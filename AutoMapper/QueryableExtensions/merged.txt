
--- Extensions.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: AutoMapper.QueryableExtensions.Extensions
// Assembly: AutoMapper, Version=3.1.1.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005
// MVID: D6FEE810-B806-4119-85A4-5044E7EED03C
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\AutoMapper.dll

using AutoMapper.Impl;
using AutoMapper.Internal;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

#nullable disable
namespace AutoMapper.QueryableExtensions
{
  public static class Extensions
  {
    private static readonly IDictionaryFactory DictionaryFactory = PlatformAdapter.Resolve<IDictionaryFactory>();
    private static readonly AutoMapper.Internal.IDictionary<TypePair, LambdaExpression> _expressionCache = Extensions.DictionaryFactory.CreateDictionary<TypePair, LambdaExpression>();

    public static Expression<Func<TSource, TDestination>> CreateMapExpression<TSource, TDestination>(
      this IMappingEngine mappingEngine)
    {
      return (Expression<Func<TSource, TDestination>>) Extensions._expressionCache.GetOrAdd(new TypePair(typeof (TSource), typeof (TDestination)), (Func<TypePair, LambdaExpression>) (tp => Extensions.CreateMapExpression(mappingEngine, tp.SourceType, tp.DestinationType)));
    }

    public static IProjectionExpression Project<TSource>(this IQueryable<TSource> source)
    {
      return source.Project<TSource>(Mapper.Engine);
    }

    public static IProjectionExpression Project<TSource>(
      this IQueryable<TSource> source,
      IMappingEngine mappingEngine)
    {
      return (IProjectionExpression) new ProjectionExpression<TSource>(source, mappingEngine);
    }

    private static LambdaExpression CreateMapExpression(
      IMappingEngine mappingEngine,
      Type typeIn,
      Type typeOut)
    {
      ParameterExpression instanceParameter = Expression.Parameter(typeIn, "dto");
      return Expression.Lambda(Extensions.CreateMapExpression(mappingEngine, typeIn, typeOut, (Expression) instanceParameter), instanceParameter);
    }

    private static Expression CreateMapExpression(
      IMappingEngine mappingEngine,
      Type typeIn,
      Type typeOut,
      Expression instanceParameter)
    {
      List<MemberBinding> memberBindings = Extensions.CreateMemberBindings(mappingEngine, typeIn, mappingEngine.ConfigurationProvider.FindTypeMapFor(typeIn, typeOut) ?? throw new InvalidOperationException(string.Format("Missing map from {0} to {1}. Create using Mapper.CreateMap<{0}, {1}>.", new object[2]
      {
        (object) typeIn.Name,
        (object) typeOut.Name
      })), instanceParameter);
      return (Expression) Expression.MemberInit(Expression.New(typeOut), memberBindings.ToArray());
    }

    private static List<MemberBinding> CreateMemberBindings(
      IMappingEngine mappingEngine,
      Type typeIn,
      TypeMap typeMap,
      Expression instanceParameter)
    {
      List<MemberBinding> memberBindings = new List<MemberBinding>();
      foreach (PropertyMap propertyMap in typeMap.GetPropertyMaps().Where<PropertyMap>((Func<PropertyMap, bool>) (pm => pm.CanResolveValue())))
      {
        ExpressionResolutionResult resolutionResult = propertyMap.ResolveExpression(typeIn, instanceParameter);
        MemberInfo memberInfo = propertyMap.DestinationProperty.MemberInfo;
        MemberAssignment memberAssignment;
        if (propertyMap.DestinationPropertyType.IsAssignableFrom(resolutionResult.Type))
          memberAssignment = Expression.Bind(memberInfo, resolutionResult.ResolutionExpression);
        else if (((IEnumerable<Type>) propertyMap.DestinationPropertyType.GetInterfaces()).Any<Type>((Func<Type, bool>) (t => t.Name == "IEnumerable")) && (object) propertyMap.DestinationPropertyType != (object) typeof (string))
        {
          Type destinationListTypeFor = Extensions.GetDestinationListTypeFor(propertyMap);
          Type typeIn1 = ((IEnumerable<Type>) resolutionResult.Type.GetGenericArguments()).First<Type>();
          LambdaExpression mapExpression = Extensions.CreateMapExpression(mappingEngine, typeIn1, destinationListTypeFor);
          MethodCallExpression selectExpression = Expression.Call(typeof (Enumerable), "Select", new Type[2]
          {
            typeIn1,
            destinationListTypeFor
          }, resolutionResult.ResolutionExpression, (Expression) mapExpression);
          if (typeof (IList<>).MakeGenericType(destinationListTypeFor).IsAssignableFrom(propertyMap.DestinationPropertyType))
          {
            MethodCallExpression listCallExpression = Extensions.GetToListCallExpression(propertyMap, destinationListTypeFor, selectExpression);
            memberAssignment = Expression.Bind(memberInfo, (Expression) listCallExpression);
          }
          else
            memberAssignment = Expression.Bind(memberInfo, (Expression) selectExpression);
        }
        else if ((object) resolutionResult.Type != (object) propertyMap.DestinationPropertyType && (object) propertyMap.DestinationPropertyType.BaseType != (object) typeof (ValueType) && (object) propertyMap.DestinationPropertyType.BaseType != (object) typeof (Enum))
        {
          Expression mapExpression = Extensions.CreateMapExpression(mappingEngine, resolutionResult.Type, propertyMap.DestinationPropertyType, resolutionResult.ResolutionExpression);
          memberAssignment = Expression.Bind(memberInfo, mapExpression);
        }
        else
          throw new AutoMapperMappingException("Unable to create a map expression from " + (object) resolutionResult.Type + " to " + (object) propertyMap.DestinationPropertyType);
        memberBindings.Add((MemberBinding) memberAssignment);
      }
      return memberBindings;
    }

    private static Type GetDestinationListTypeFor(PropertyMap propertyMap)
    {
      return !propertyMap.DestinationPropertyType.IsArray ? ((IEnumerable<Type>) propertyMap.DestinationPropertyType.GetGenericArguments()).First<Type>() : propertyMap.DestinationPropertyType.GetElementType();
    }

    private static MethodCallExpression GetToListCallExpression(
      PropertyMap propertyMap,
      Type destinationListType,
      MethodCallExpression selectExpression)
    {
      return Expression.Call(typeof (Enumerable), propertyMap.DestinationPropertyType.IsArray ? "ToArray" : "ToList", new Type[1]
      {
        destinationListType
      }, (Expression) selectExpression);
    }
  }
}


--- IProjectionExpression.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: AutoMapper.QueryableExtensions.IProjectionExpression
// Assembly: AutoMapper, Version=3.1.1.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005
// MVID: D6FEE810-B806-4119-85A4-5044E7EED03C
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\AutoMapper.dll

using System.Linq;

#nullable disable
namespace AutoMapper.QueryableExtensions
{
  public interface IProjectionExpression
  {
    IQueryable<TResult> To<TResult>();
  }
}


--- ProjectionExpression`1.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: AutoMapper.QueryableExtensions.ProjectionExpression`1
// Assembly: AutoMapper, Version=3.1.1.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005
// MVID: D6FEE810-B806-4119-85A4-5044E7EED03C
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\AutoMapper.dll

using System.Linq;

#nullable disable
namespace AutoMapper.QueryableExtensions
{
  public class ProjectionExpression<TSource> : IProjectionExpression
  {
    private readonly IQueryable<TSource> _source;
    private readonly IMappingEngine _mappingEngine;

    public ProjectionExpression(IQueryable<TSource> source, IMappingEngine mappingEngine)
    {
      this._source = source;
      this._mappingEngine = mappingEngine;
    }

    public IQueryable<TResult> To<TResult>()
    {
      return this._source.Select<TSource, TResult>(this._mappingEngine.CreateMapExpression<TSource, TResult>());
    }
  }
}

