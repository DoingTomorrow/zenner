
--- AssemblyInfo.cs ---

﻿using System.Reflection;
using System.Runtime.InteropServices;

[assembly: AssemblyCopyright("Copyright © Infobest Romania 2012")]
[assembly: AssemblyTitle("Common.Library.Core.Cryptography")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Infobest Romania")]
[assembly: AssemblyProduct("Common.Library.Core.Cryptography")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: Guid("3a38a882-d8b3-42bf-9705-fe52032a175c")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyVersion("1.0.0.0")]


--- DataConstants.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: CA.Cryptography.DataConstants
// Assembly: Common.Library.Core.Cryptography, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 243CB101-D6B4-4E20-AB19-910BDFBC9174
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.Core.Cryptography.dll

#nullable disable
namespace CA.Cryptography
{
  public class DataConstants
  {
    public const string ENCRYPTION_DATA_KEY = "DATA_KEY";
  }
}


--- EncryptionManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: CA.Cryptography.EncryptionManager
// Assembly: Common.Library.Core.Cryptography, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 243CB101-D6B4-4E20-AB19-910BDFBC9174
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.Core.Cryptography.dll

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

#nullable disable
namespace CA.Cryptography
{
  public class EncryptionManager
  {
    private SymmetricAlgorithm symetricAlg;

    public EncryptionManager()
      : this((SymmetricAlgorithm) new RijndaelManaged())
    {
    }

    public EncryptionManager(SymmetricAlgorithm _symetricAlg) => this.symetricAlg = _symetricAlg;

    public string GenerateKey()
    {
      this.symetricAlg.GenerateKey();
      return Convert.ToBase64String(this.symetricAlg.Key);
    }

    public string GenerateKeyFromPassword(string password)
    {
      byte[] salt = new byte[13]
      {
        (byte) 0,
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 241,
        (byte) 240,
        (byte) 238,
        (byte) 33,
        (byte) 34,
        (byte) 69
      };
      int iterations = 1000;
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, salt, iterations);
      this.GenerateKey();
      return Convert.ToBase64String(rfc2898DeriveBytes.GetBytes(this.symetricAlg.Key.Length));
    }

    private byte[] GenerateIV()
    {
      this.symetricAlg.GenerateIV();
      return this.symetricAlg.IV;
    }

    public string Encrypt(string plainText, string dataKey)
    {
      byte[] iv = this.GenerateIV();
      Convert.ToBase64String(iv);
      byte[] bytes = Encoding.Unicode.GetBytes(plainText);
      ICryptoTransform encryptor = this.symetricAlg.CreateEncryptor(Convert.FromBase64String(dataKey), iv);
      this.symetricAlg.Key = Convert.FromBase64String(dataKey);
      this.symetricAlg.IV = iv;
      byte[] array;
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, encryptor, CryptoStreamMode.Write))
          cryptoStream.Write(bytes, 0, bytes.Length);
        array = memoryStream.ToArray();
      }
      byte[] inArray = new byte[iv.Length + array.Length];
      iv.CopyTo((Array) inArray, 0);
      array.CopyTo((Array) inArray, iv.Length);
      return Convert.ToBase64String(inArray);
    }

    public string Decrypt(string encryptedTextValue, string dataKey)
    {
      byte[] source = Convert.FromBase64String(encryptedTextValue);
      int length = this.GenerateIV().Length;
      byte[] array1 = ((IEnumerable<byte>) source).Skip<byte>(length).Take<byte>(source.Length - length).ToArray<byte>();
      byte[] array2 = ((IEnumerable<byte>) source).Take<byte>(length).ToArray<byte>();
      ICryptoTransform decryptor = this.symetricAlg.CreateDecryptor(Convert.FromBase64String(dataKey), array2);
      this.symetricAlg.Key = Convert.FromBase64String(dataKey);
      this.symetricAlg.IV = array2;
      byte[] array3;
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Write))
          cryptoStream.Write(array1, 0, array1.Length);
        array3 = memoryStream.ToArray();
      }
      return Encoding.Unicode.GetString(array3);
    }

    public void NewTest()
    {
      byte[] bytes1 = Encoding.Unicode.GetBytes("This is all clear now!");
      using (Rijndael rijndael = (Rijndael) new RijndaelManaged())
      {
        rijndael.Padding = PaddingMode.PKCS7;
        rijndael.GenerateKey();
        rijndael.GenerateIV();
        byte[] buffer = (byte[]) null;
        byte[] bytes2 = (byte[]) null;
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndael.CreateEncryptor(), CryptoStreamMode.Write))
            cryptoStream.Write(bytes1, 0, bytes1.Length);
          buffer = memoryStream.ToArray();
        }
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndael.CreateDecryptor(), CryptoStreamMode.Write))
            cryptoStream.Write(buffer, 0, buffer.Length);
          bytes2 = memoryStream.ToArray();
        }
        Console.WriteLine(Encoding.Unicode.GetString(bytes2));
      }
    }
  }
}


--- IEncryptable.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: CA.Cryptography.IEncryptable
// Assembly: Common.Library.Core.Cryptography, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 243CB101-D6B4-4E20-AB19-910BDFBC9174
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.Core.Cryptography.dll

#nullable disable
namespace CA.Cryptography
{
  public interface IEncryptable
  {
  }
}


--- PasswordManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: CA.Cryptography.PasswordManager
// Assembly: Common.Library.Core.Cryptography, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 243CB101-D6B4-4E20-AB19-910BDFBC9174
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.Core.Cryptography.dll

using System;
using System.Security.Cryptography;
using System.Text;

#nullable disable
namespace CA.Cryptography
{
  public class PasswordManager
  {
    private HashAlgorithm HashProvider;
    private int SalthLength;

    public PasswordManager(HashAlgorithm HashAlgorithm, int theSaltLength)
    {
      this.HashProvider = HashAlgorithm;
      this.SalthLength = theSaltLength;
    }

    public PasswordManager()
      : this((HashAlgorithm) new SHA256Managed(), 4)
    {
    }

    private byte[] ComputeHash(byte[] password, byte[] salt)
    {
      byte[] numArray = new byte[password.Length + this.SalthLength];
      Array.Copy((Array) password, (Array) numArray, password.Length);
      Array.Copy((Array) salt, 0, (Array) numArray, password.Length, this.SalthLength);
      return this.HashProvider.ComputeHash(numArray);
    }

    public void GetPasswordHashAndSalt(byte[] password, out byte[] hash, out byte[] salt)
    {
      salt = new byte[this.SalthLength];
      new RNGCryptoServiceProvider().GetNonZeroBytes(salt);
      hash = this.ComputeHash(password, salt);
    }

    public void GetPasswordHashAndSaltString(string password, out string hash, out string salt)
    {
      byte[] hash1;
      byte[] salt1;
      this.GetPasswordHashAndSalt(Encoding.UTF8.GetBytes(password), out hash1, out salt1);
      hash = Convert.ToBase64String(hash1);
      salt = Convert.ToBase64String(salt1);
    }

    public void GetPasswordHashAndSaltConcatenatedString(string password, out string hashAndSalt)
    {
      string hash;
      string salt;
      this.GetPasswordHashAndSaltString(password, out hash, out salt);
      hashAndSalt = salt + hash;
    }

    public bool VerifyPasswordHash(byte[] password, byte[] hash, byte[] salt)
    {
      byte[] hash1 = this.ComputeHash(password, salt);
      if (hash1.Length != hash.Length)
        return false;
      for (int index = 0; index < hash.Length; ++index)
      {
        if (!hash[index].Equals(hash1[index]))
          return false;
      }
      return true;
    }

    public bool VerifyPassowrdHashString(string password, string hash, string salt)
    {
      byte[] hash1 = Convert.FromBase64String(hash);
      byte[] salt1 = Convert.FromBase64String(salt);
      return this.VerifyPasswordHash(Encoding.UTF8.GetBytes(password), hash1, salt1);
    }

    public bool VerifyPassowrdHashString(string password, string hashAndSalt)
    {
      string s = hashAndSalt.Substring(0, this.SalthLength * 2);
      byte[] hash = Convert.FromBase64String(hashAndSalt.Substring(this.SalthLength * 2));
      byte[] salt = Convert.FromBase64String(s);
      return this.VerifyPasswordHash(Encoding.UTF8.GetBytes(password), hash, salt);
    }

    public byte[] GenerateKeyFromPassword(string password)
    {
      byte[] salt = new byte[13]
      {
        (byte) 0,
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 241,
        (byte) 240,
        (byte) 238,
        (byte) 33,
        (byte) 34,
        (byte) 69
      };
      int iterations = 1000;
      return new Rfc2898DeriveBytes(password, salt, iterations).GetBytes(16);
    }
  }
}

