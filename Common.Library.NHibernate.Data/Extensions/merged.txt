
--- CompositeWhereClauseInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.CompositeWhereClauseInfo
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public class CompositeWhereClauseInfo : IWhereClauseInfo
  {
    public IWhereClauseInfo LeftHandSideClause { get; set; }

    public IWhereClauseInfo RightHandSideClause { get; set; }

    public string LogicalOperator { get; set; }

    public override string ToString()
    {
      return string.Format("({0} {1} {2})", (object) this.LeftHandSideClause.ToString(), (object) this.LogicalOperator, (object) this.RightHandSideClause.ToString());
    }
  }
}


--- ConfigurationExtensions.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.ConfigurationExtensions
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using NHibernate.Cfg;
using System;
using System.IO;
using System.Xml;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public static class ConfigurationExtensions
  {
    public static Configuration Configure(
      this Configuration config,
      string fileName,
      string factoryName)
    {
      XmlDocument doc = new XmlDocument();
      doc.Load(fileName);
      return config.Configure((XmlReader) ConfigurationExtensions.PrepareConfiguration(doc, factoryName));
    }

    public static Configuration Configure(
      this Configuration config,
      XmlReader textReader,
      string factoryName)
    {
      XmlDocument doc = new XmlDocument();
      doc.Load(textReader);
      return config.Configure((XmlReader) ConfigurationExtensions.PrepareConfiguration(doc, factoryName));
    }

    private static XmlTextReader PrepareConfiguration(XmlDocument doc, string factoryName)
    {
      XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);
      nsmgr.AddNamespace("nhibernate", "urn:nhibernate-configuration-2.2-x-factories");
      XmlNode xmlNode = doc.SelectSingleNode("descendant::nhibernate:hibernate-configuration", nsmgr);
      if (xmlNode == null)
        throw new Exception("<hibernate-configuration xmlns=\"urn:nhibernate-configuration-2.2-x-factories\"> element was not found in the configuration file.");
      if (xmlNode.SelectSingleNode("descendant::nhibernate:session-factory[@name='" + factoryName + "']", nsmgr) == null)
        throw new Exception("<session-factory name=\"" + factoryName + "\"> element was not found in the configuration file.");
      foreach (XmlNode selectNode in xmlNode.SelectNodes("descendant::nhibernate:session-factory[@name!='" + factoryName + "']", nsmgr))
        xmlNode.RemoveChild(selectNode);
      return new XmlTextReader((TextReader) new StringReader(xmlNode.OuterXml.Replace("-x-factories", "")));
    }
  }
}


--- CriteriaAliasesInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.CriteriaAliasesInfo
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using System;
using System.Collections.Generic;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public class CriteriaAliasesInfo
  {
    private Dictionary<string, string> propertyAliases = new Dictionary<string, string>();

    public string GetPropertyForAlias(string alias)
    {
      return this.propertyAliases.ContainsKey(alias) ? this.propertyAliases[alias] : (string) null;
    }

    public CriteriaAliasesInfo Add(string alias, string propertyPath)
    {
      if (this.propertyAliases.ContainsKey(alias))
        throw new ArgumentException("The aliased key already exists.");
      this.propertyAliases.Add(alias, propertyPath);
      return this;
    }
  }
}


--- DataPagingInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.DataPagingInfo
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using System.Collections.Generic;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public struct DataPagingInfo
  {
    public const int ALL_RECORDS = -1;

    public int Page { get; set; }

    public int PageSize { get; set; }

    public IEnumerable<OrderClauseInfo> OrderClauses { get; set; }

    public IEnumerable<IWhereClauseInfo> WhereClauses { get; set; }
  }
}


--- ExtendedCriteria.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.ExtendedCriteria
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using NHibernate;
using NHibernate.Criterion;
using System;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public class ExtendedCriteria
  {
    private QueryPropertyAliasesList aliasesList;
    private ICriteria criteria;

    public ExtendedCriteria(ICriteria criteria) => this.criteria = criteria;

    public ExtendedCriteria AddAliases(QueryPropertyAliasesList aliasesList)
    {
      this.aliasesList = aliasesList;
      return this;
    }

    public ExtendedCriteria AddWhere(IWhereClauseInfo whereClauseInfo)
    {
      this.criteria.Add(this.ProcessWhereClauseExpression(whereClauseInfo));
      return this;
    }

    private ICriterion ProcessWhereClauseExpression(IWhereClauseInfo clause)
    {
      switch (clause)
      {
        case SimpleWhereClauseInfo _:
          SimpleWhereClauseInfo simpleWhereClauseInfo = clause as SimpleWhereClauseInfo;
          string str = (string) null;
          if (this.aliasesList != null)
            str = this.aliasesList.GetPropertyForAlias(simpleWhereClauseInfo.PropertyName);
          return QueryExtensions.TranslateExpressionOperation(str ?? simpleWhereClauseInfo.PropertyName, simpleWhereClauseInfo.Operator, simpleWhereClauseInfo.Value);
        case CompositeWhereClauseInfo _:
          CompositeWhereClauseInfo compositeWhereClauseInfo = clause as CompositeWhereClauseInfo;
          if (compositeWhereClauseInfo.LogicalOperator.Equals("or", StringComparison.CurrentCultureIgnoreCase))
            return (ICriterion) Restrictions.Or(this.ProcessWhereClauseExpression(compositeWhereClauseInfo.LeftHandSideClause), this.ProcessWhereClauseExpression(compositeWhereClauseInfo.RightHandSideClause));
          if (compositeWhereClauseInfo.LogicalOperator.Equals("and", StringComparison.CurrentCultureIgnoreCase))
            return (ICriterion) Restrictions.And(this.ProcessWhereClauseExpression(compositeWhereClauseInfo.LeftHandSideClause), this.ProcessWhereClauseExpression(compositeWhereClauseInfo.RightHandSideClause));
          break;
      }
      return (ICriterion) null;
    }

    public ExtendedCriteria AddOrder(OrderClauseInfo orderClauseInfo)
    {
      string propertyName = (string) null;
      if (this.aliasesList != null)
        propertyName = this.aliasesList.GetPropertyForAlias(orderClauseInfo.PropertyName);
      if (propertyName == null)
        propertyName = orderClauseInfo.PropertyName;
      this.criteria.AddOrder(orderClauseInfo.Direction.Equals((object) OrderDirection.Asc) ? Order.Asc(propertyName) : Order.Desc(propertyName));
      return this;
    }

    public ICriteria ProcessCriteria() => this.criteria;

    public ExtendedCriteria SetProjections(ProjectionList list)
    {
      this.criteria.SetProjection((IProjection) list);
      return this;
    }
  }
}


--- ExtendedQuery.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.ExtendedQuery
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using NHibernate;
using System.Collections;
using System.Collections.Generic;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public class ExtendedQuery
  {
    private QueryPropertyAliasesList aliasesList;
    private Dictionary<string, object> parametersDictionary = new Dictionary<string, object>();
    private Dictionary<string, IEnumerable> parametersListDictionary = new Dictionary<string, IEnumerable>();
    private IQuery query;

    public ExtendedQuery(IQuery query) => this.query = query;

    public IQuery Query
    {
      get => this.query;
      set
      {
        this.query = value;
        foreach (string key in this.parametersDictionary.Keys)
          this.query.SetParameter(key, this.parametersDictionary[key]);
        foreach (string key in this.parametersListDictionary.Keys)
          this.query.SetParameterList(key, this.parametersListDictionary[key]);
      }
    }

    public ExtendedQuery SetParameter(string parameterName, object value)
    {
      this.parametersDictionary.Add(parameterName, value);
      this.query.SetParameter(parameterName, value);
      return this;
    }

    public ExtendedQuery SetParameterList(string name, IEnumerable values)
    {
      this.parametersListDictionary.Add(name, values);
      this.query.SetParameterList(name, values);
      return this;
    }

    public IEnumerable<string> GetNamedParameters()
    {
      return (IEnumerable<string>) this.parametersDictionary.Keys;
    }

    public IEnumerable<string> GetNamedParameterLists()
    {
      return (IEnumerable<string>) this.parametersListDictionary.Keys;
    }

    public object GetParameterValue(string name)
    {
      return this.parametersDictionary.ContainsKey(name) ? this.parametersDictionary[name] : (object) null;
    }

    public IEnumerable GetParameterListValue(string name)
    {
      return this.parametersListDictionary.ContainsKey(name) ? this.parametersListDictionary[name] : (IEnumerable) null;
    }
  }
}


--- HQLOperator.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.HQLOperator
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public enum HQLOperator
  {
    IsLessThan = 0,
    IsLessThanOrEqualTo = 1,
    IsEqualTo = 2,
    IsNotEqualTo = 3,
    IsGreaterThanOrEqualTo = 4,
    IsGreaterThan = 5,
    StartsWith = 6,
    EndsWith = 7,
    Contains = 8,
    IsContainedIn = 9,
    IsNull = 10, // 0x0000000A
    IsNotNull = 11, // 0x0000000B
    Wildcards = 13, // 0x0000000D
  }
}


--- IWhereClauseInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.IWhereClauseInfo
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public interface IWhereClauseInfo
  {
  }
}


--- OrderClauseInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.OrderClauseInfo
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public struct OrderClauseInfo
  {
    public string PropertyName { get; set; }

    public OrderDirection Direction { get; set; }
  }
}


--- OrderDirection.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.OrderDirection
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public enum OrderDirection
  {
    Asc,
    Desc,
  }
}


--- QueryExtensions.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.QueryExtensions
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using NHibernate;
using NHibernate.Criterion;
using NHibernate.Exceptions;
using System;
using System.Collections.Generic;
using System.Linq;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public static class QueryExtensions
  {
    public const int ALL_RECORDS = -1;

    public static IQuery AddOrder(this IQuery query, OrderClauseInfo orderClause)
    {
      Dictionary<string, string> aliasesColumns = QueryExtensions.ExtractAliasesColumns(query);
      foreach (string key in aliasesColumns.Keys)
      {
        if (orderClause.PropertyName.Equals(key))
          orderClause.PropertyName = aliasesColumns[key];
      }
      int byClausePosition;
      try
      {
        byClausePosition = QueryExtensions.FindOuterOrderByClausePosition(query.QueryString);
      }
      catch (Exception ex)
      {
        throw new SqlParseException("Invalid order by clause specification. It appears that multiple ORDER BY clauses are on the root level. Please check the query and inner message.");
      }
      string str1 = query.QueryString;
      string str2 = string.Format("{0} {1}", (object) orderClause.PropertyName, orderClause.Direction.Equals((object) OrderDirection.Asc) ? (object) "asc" : (object) "desc");
      if (byClausePosition > 0)
        str1 = query.QueryString.Insert(byClausePosition + 8, string.Format("{0}, ", (object) str2));
      string queryString = str1 + string.Format(" order by {0}", (object) str2);
      return HibernateManager.DataSessionFactory.GetCurrentSession().CreateQuery(queryString);
    }

    public static IQuery AddWhere(this IQuery query, IWhereClauseInfo whereClause)
    {
      Dictionary<string, string> aliasesColumns = QueryExtensions.ExtractAliasesColumns(query);
      string str = QueryExtensions.ExtractClauseString(QueryExtensions.ProcessWhereClauseExpression(whereClause, aliasesColumns));
      foreach (string key in aliasesColumns.Keys)
      {
        int num = str.IndexOf(key);
        char[] source = new char[3]{ '(', ' ', ',' };
        for (; num > 0; num = str.IndexOf(key, num + 1))
        {
          if (((IEnumerable<char>) source).Contains<char>(str[num - 1]))
            str = str.Substring(0, num - 1) + aliasesColumns[key] + str.Substring(num + key.Length, str.Length - key.Length - num);
        }
      }
      int whereClausePosition;
      try
      {
        whereClausePosition = QueryExtensions.FindOuterWhereClausePosition(query.QueryString);
      }
      catch (Exception ex)
      {
        throw new SqlParseException("Invalid where clause specification. It appears that multiple WHERE clauses are on the root level. Please check the query and inner message.");
      }
      string queryString1 = query.QueryString;
      string queryString2;
      if (whereClausePosition > 0)
      {
        queryString2 = query.QueryString.Insert(whereClausePosition + 5, string.Format(" ({0}) and ", (object) str));
      }
      else
      {
        int startIndex = query.QueryString.LastIndexOf("order by", StringComparison.CurrentCultureIgnoreCase);
        queryString2 = startIndex <= 0 ? queryString1 + string.Format(" where ({0})", (object) str) : query.QueryString.Insert(startIndex, string.Format("where ({0}) ", (object) str));
      }
      return HibernateManager.DataSessionFactory.GetCurrentSession().CreateQuery(queryString2);
    }

    private static string ExtractClauseString(ICriterion whereClause)
    {
      IEnumerable<string> distinctWhereClauses = StringsProcessor.ExtractDistinctWhereClauses(whereClause);
      string str = string.Empty;
      foreach (string clause in distinctWhereClauses)
        str = clause.Equals("and", StringComparison.CurrentCultureIgnoreCase) || clause.Equals("or", StringComparison.CurrentCultureIgnoreCase) ? str + clause + (object) ' ' : str + StringsProcessor.AdjustWhereClauseOperands(clause) + (object) ' ';
      return string.Format("({0})", (object) str);
    }

    public static ICriterion ProcessWhereClauseExpression(
      IWhereClauseInfo clause,
      Dictionary<string, string> aliasesList)
    {
      switch (clause)
      {
        case SimpleWhereClauseInfo _:
          SimpleWhereClauseInfo simpleWhereClauseInfo = clause as SimpleWhereClauseInfo;
          return QueryExtensions.TranslateExpressionOperation(aliasesList[simpleWhereClauseInfo.PropertyName] ?? simpleWhereClauseInfo.PropertyName, simpleWhereClauseInfo.Operator, simpleWhereClauseInfo.Value);
        case CompositeWhereClauseInfo _:
          CompositeWhereClauseInfo compositeWhereClauseInfo = clause as CompositeWhereClauseInfo;
          if (compositeWhereClauseInfo.LogicalOperator.Equals("or", StringComparison.CurrentCultureIgnoreCase))
            return (ICriterion) Restrictions.Or(QueryExtensions.ProcessWhereClauseExpression(compositeWhereClauseInfo.LeftHandSideClause, aliasesList), QueryExtensions.ProcessWhereClauseExpression(compositeWhereClauseInfo.RightHandSideClause, aliasesList));
          if (compositeWhereClauseInfo.LogicalOperator.Equals("and", StringComparison.CurrentCultureIgnoreCase))
            return (ICriterion) Restrictions.And(QueryExtensions.ProcessWhereClauseExpression(compositeWhereClauseInfo.LeftHandSideClause, aliasesList), QueryExtensions.ProcessWhereClauseExpression(compositeWhereClauseInfo.RightHandSideClause, aliasesList));
          break;
      }
      return (ICriterion) null;
    }

    public static ICriterion TranslateExpressionOperation(
      string property,
      HQLOperator operation,
      object value)
    {
      ICriterion criterion = (ICriterion) null;
      switch (operation)
      {
        case HQLOperator.IsLessThan:
          criterion = (ICriterion) Restrictions.Lt(property, value).IgnoreCase();
          break;
        case HQLOperator.IsLessThanOrEqualTo:
          criterion = (ICriterion) Restrictions.Le(property, value).IgnoreCase();
          break;
        case HQLOperator.IsEqualTo:
          criterion = (ICriterion) Restrictions.Eq(property, value).IgnoreCase();
          break;
        case HQLOperator.IsNotEqualTo:
          criterion = (ICriterion) Restrictions.Not((ICriterion) Restrictions.Eq(property, value).IgnoreCase());
          break;
        case HQLOperator.IsGreaterThanOrEqualTo:
          criterion = (ICriterion) Restrictions.Ge(property, value).IgnoreCase();
          break;
        case HQLOperator.IsGreaterThan:
          criterion = (ICriterion) Restrictions.Gt(property, value).IgnoreCase();
          break;
        case HQLOperator.StartsWith:
          criterion = (ICriterion) Restrictions.InsensitiveLike(property, value.ToString(), MatchMode.Start);
          break;
        case HQLOperator.EndsWith:
          criterion = (ICriterion) Restrictions.InsensitiveLike(property, value.ToString(), MatchMode.End);
          break;
        case HQLOperator.Contains:
          criterion = (ICriterion) Restrictions.InsensitiveLike(property, value.ToString(), MatchMode.Anywhere);
          break;
        case HQLOperator.IsContainedIn:
          criterion = (ICriterion) Restrictions.In(property, value as object[]);
          break;
        case HQLOperator.IsNull:
          criterion = (ICriterion) Restrictions.IsNull(property);
          break;
        case HQLOperator.IsNotNull:
          criterion = (ICriterion) Restrictions.IsNotNull(property);
          break;
        case HQLOperator.Wildcards:
          criterion = (ICriterion) Restrictions.InsensitiveLike(property, (object) value.ToString().Replace("*", "%").Replace("?", "_"));
          break;
      }
      return criterion;
    }

    private static string FormatValueAsShortDateFunction(DateTime value)
    {
      return string.Format("todate('{0}','YYYY-MM-DD')", (object) value.ToString("yyyy-MM-dd"));
    }

    public static bool HasColumnsSelect(this IQuery query)
    {
      if (query.QueryString.IndexOf("select", StringComparison.InvariantCultureIgnoreCase) != 0)
        return false;
      int num = 0;
      string[] strArray = query.QueryString.Split(' ');
      for (int index = 1; index < strArray.Length; ++index)
      {
        if (strArray[index] != string.Empty)
          ++num;
        if (num == 2)
          return !strArray[index].Equals("from", StringComparison.InvariantCultureIgnoreCase);
      }
      return false;
    }

    public static Dictionary<string, string> ExtractAliasesColumns(IQuery query)
    {
      Dictionary<string, string> aliasesColumns = new Dictionary<string, string>();
      ReplaceProcessedString replaceProcessedString = StringsProcessor.CreateReplaceProcessedString(query.QueryString.Replace("\n", string.Empty).Replace("\r\n", string.Empty), "#{0}#");
      List<string> list = Enumerable.Where<string>(((IEnumerable<string>) replaceProcessedString.ProcessedString.Split(' ', ',')).AsEnumerable<string>(), (Func<string, bool>) (s => s != " ")).ToList<string>();
      foreach (string returnAlias in query.ReturnAliases)
      {
        string columnAlias = returnAlias;
        int index = list.FindIndex(0, (Predicate<string>) (s => s.Equals(columnAlias)));
        if (index > 2)
        {
          string replacements = list[index - 2];
          if (replaceProcessedString.ReplacementsDictionary.ContainsKey(replacements))
            replacements = replaceProcessedString.ReplacementsDictionary[replacements];
          if (!aliasesColumns.ContainsKey(columnAlias))
            aliasesColumns.Add(columnAlias, replacements);
        }
      }
      return aliasesColumns;
    }

    private static int FindOuterOrderByClausePosition(string queryString)
    {
      int num = StringsProcessor.SearchWordPositionOuterLevel("order by", queryString);
      return num > 0 && queryString.LastIndexOf("from", StringComparison.CurrentCultureIgnoreCase) < num ? num : -1;
    }

    private static int FindOuterWhereClausePosition(string queryString)
    {
      int num = StringsProcessor.SearchWordPositionOuterLevel("where", queryString);
      return num > 0 && StringsProcessor.SearchWordPositionOuterLevel("from", queryString) < num ? num : -1;
    }
  }
}


--- QueryProcessor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.QueryProcessor
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using NHibernate;
using NHibernate.Criterion;
using NHibernate.Transform;
using System;
using System.Collections.Generic;
using System.Linq;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public static class QueryProcessor
  {
    public const int ALL_RECORDS = -1;

    public static IQueryable<T> GetQueryPagedData<T>(string queryName) where T : class
    {
      return QueryProcessor.GetQueryPagedData<T>(queryName, 1, -1, (IEnumerable<OrderClauseInfo>) null, (IEnumerable<IWhereClauseInfo>) null, out int _);
    }

    public static IQueryable<T> GetQueryPagedData<T>(string queryName, int page, int pageSize) where T : class
    {
      return QueryProcessor.GetQueryPagedData<T>(queryName, page, pageSize, (IEnumerable<OrderClauseInfo>) null, (IEnumerable<IWhereClauseInfo>) null, out int _);
    }

    public static IQueryable<T> GetQueryPagedData<T>(
      string queryName,
      int page,
      int pageSize,
      IEnumerable<OrderClauseInfo> sortClauses)
      where T : class
    {
      return QueryProcessor.GetQueryPagedData<T>(queryName, page, pageSize, sortClauses, (IEnumerable<IWhereClauseInfo>) null, out int _);
    }

    public static IQueryable<T> GetQueryPagedData<T>(
      string queryName,
      int page,
      int pageSize,
      IEnumerable<OrderClauseInfo> sortClauses,
      IEnumerable<IWhereClauseInfo> filters)
      where T : class
    {
      return QueryProcessor.GetQueryPagedData<T>(queryName, page, pageSize, sortClauses, filters, out int _);
    }

    public static IQueryable<T> GetQueryPagedData<T>(
      string queryName,
      int page,
      int pageSize,
      IEnumerable<OrderClauseInfo> sortClauses,
      IEnumerable<IWhereClauseInfo> filters,
      out int totalCount)
      where T : class
    {
      return QueryProcessor.GetQueryPagedData<T>(new ExtendedQuery(HibernateManager.DataSessionFactory.GetCurrentSession().GetNamedQuery(queryName)), page, pageSize, sortClauses, filters, out totalCount);
    }

    public static IQueryable<T> GetQueryPagedData<T>(
      ExtendedQuery extendedQuery,
      int page,
      int pageSize,
      IEnumerable<OrderClauseInfo> sortClauses,
      IEnumerable<IWhereClauseInfo> filters,
      out int totalCount)
      where T : class
    {
      IQuery query = extendedQuery.Query;
      if (filters != null)
      {
        foreach (IWhereClauseInfo filter in filters)
          query = query.AddWhere(filter);
      }
      extendedQuery.Query = query;
      totalCount = QueryProcessor.GetCountOfQuery<T>(extendedQuery);
      if (sortClauses != null)
      {
        foreach (OrderClauseInfo sortClause in sortClauses)
          query = query.AddOrder(sortClause);
      }
      extendedQuery.Query = query;
      return pageSize == -1 ? query.SetResultTransformer(Transformers.AliasToBean(typeof (T))).Future<T>().AsQueryable<T>() : (!query.HasColumnsSelect() ? query.SetFirstResult((page - 1) * pageSize).SetMaxResults(pageSize).Future<T>().AsQueryable<T>() : query.SetResultTransformer(Transformers.AliasToBean(typeof (T))).SetFirstResult((page - 1) * pageSize).SetMaxResults(pageSize).Future<T>().AsQueryable<T>());
    }

    private static int GetCountOfQuery<T>(ExtendedQuery extendedQuery) where T : class
    {
      string queryString = extendedQuery.Query.QueryString;
      int num1 = queryString.IndexOf("select", StringComparison.CurrentCultureIgnoreCase);
      int num2 = StringsProcessor.SearchWordPositionOuterLevel("from", queryString);
      if (num1 < 0 || num2 <= 0)
        return 0;
      queryString.Substring(num1 + 7, num2 - 1 - (num1 + 7));
      if (!queryString.Contains(":"))
        return (int) HibernateManager.DataSessionFactory.GetCurrentSession().CreateQuery(queryString.Substring(0, num1 + 7) + "countAll()" + queryString.Substring(num2 - 1, queryString.Length - num2 + 1)).UniqueResult();
      IQuery query = HibernateManager.DataSessionFactory.GetCurrentSession().CreateQuery(queryString.Substring(0, num1 + 7) + "countAll()" + queryString.Substring(num2 - 1, queryString.Length - num2 + 1));
      foreach (string namedParameter in extendedQuery.GetNamedParameters())
        query.SetParameter(namedParameter, extendedQuery.GetParameterValue(namedParameter));
      foreach (string namedParameterList in extendedQuery.GetNamedParameterLists())
        query.SetParameterList(namedParameterList, extendedQuery.GetParameterListValue(namedParameterList));
      return (int) query.UniqueResult();
    }

    public static IList<T> GetCriteriaPagedData<T>(
      ICriteria criteria,
      int page,
      int pageSize,
      IEnumerable<OrderClauseInfo> sortClauses,
      IEnumerable<IWhereClauseInfo> filters,
      ProjectionList projections,
      out int totalCount)
      where T : class
    {
      return QueryProcessor.GetCriteriaPagedData<T>(criteria, page, pageSize, sortClauses, filters, (QueryPropertyAliasesList) null, projections, out totalCount);
    }

    public static IList<T> GetCriteriaPagedData<T>(
      ICriteria criteria,
      int page,
      int pageSize,
      IEnumerable<OrderClauseInfo> sortClauses,
      IEnumerable<IWhereClauseInfo> filters,
      QueryPropertyAliasesList aliasesList,
      ProjectionList projections,
      out int totalCount)
      where T : class
    {
      HibernateManager.DataSessionFactory.GetCurrentSession();
      ExtendedCriteria extendedCriteria = new ExtendedCriteria(criteria).AddAliases(aliasesList);
      if (projections != null)
        extendedCriteria.SetProjections(projections);
      if (filters != null)
      {
        foreach (IWhereClauseInfo filter in filters)
          extendedCriteria.AddWhere(filter);
      }
      totalCount = (int) (criteria.Clone() as ICriteria).SetProjection(Projections.RowCount()).UniqueResult();
      if (sortClauses != null)
      {
        foreach (OrderClauseInfo sortClause in sortClauses)
          extendedCriteria.AddOrder(sortClause);
      }
      criteria = extendedCriteria.ProcessCriteria();
      return pageSize.Equals(-1) ? (aliasesList != null ? criteria.SetResultTransformer(Transformers.AliasToBean(typeof (T))).List<T>() : criteria.List<T>()) : (aliasesList != null ? criteria.SetFirstResult((page - 1) * pageSize).SetMaxResults(pageSize).SetResultTransformer(Transformers.AliasToBean(typeof (T))).List<T>() : criteria.SetFirstResult((page - 1) * pageSize).SetMaxResults(pageSize).List<T>());
    }
  }
}


--- QueryPropertyAlias.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.QueryPropertyAlias
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public class QueryPropertyAlias
  {
    private string alias;
    private string propertyName;

    protected QueryPropertyAlias(string alias, string propertyName)
    {
      this.alias = alias;
      this.propertyName = propertyName;
    }

    public static QueryPropertyAlias MapAliasToProperty(string propertyName, string alias)
    {
      return new QueryPropertyAlias(alias, propertyName);
    }

    public string Alias => this.alias;

    public string PropertyName => this.propertyName;
  }
}


--- QueryPropertyAliasesList.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.QueryPropertyAliasesList
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using System;
using System.Collections.Generic;
using System.Linq;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public class QueryPropertyAliasesList
  {
    private List<QueryPropertyAlias> propertyAliases = new List<QueryPropertyAlias>();

    protected QueryPropertyAliasesList()
    {
    }

    public static QueryPropertyAliasesList Create() => new QueryPropertyAliasesList();

    public QueryPropertyAliasesList Add(QueryPropertyAlias propertyAlias)
    {
      this.propertyAliases.Add(propertyAlias);
      return this;
    }

    public string GetPropertyForAlias(string alias)
    {
      QueryPropertyAlias queryPropertyAlias;
      return (queryPropertyAlias = Enumerable.SingleOrDefault<QueryPropertyAlias>((IEnumerable<QueryPropertyAlias>) this.propertyAliases, (Func<QueryPropertyAlias, bool>) (p => p.Alias.Equals(alias)))) != null ? queryPropertyAlias.PropertyName : (string) null;
    }
  }
}


--- ReplaceProcessedString.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.ReplaceProcessedString
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using System.Collections.Generic;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public class ReplaceProcessedString
  {
    private Dictionary<string, string> dict = new Dictionary<string, string>();

    public string OriginalString { get; set; }

    public string ProcessedString { get; set; }

    public Dictionary<string, string> ReplacementsDictionary => this.dict;
  }
}


--- SimpleWhereClauseInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.SimpleWhereClauseInfo
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public class SimpleWhereClauseInfo : IWhereClauseInfo
  {
    public string PropertyName { get; set; }

    public HQLOperator Operator { get; set; }

    public object Value { get; set; }

    public override string ToString()
    {
      return string.Format("{0} {1} {2}", (object) this.PropertyName, (object) this.Operator, this.Value);
    }
  }
}


--- StringsProcessor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Common.Library.NHibernate.Data.Extensions.StringsProcessor
// Assembly: Common.Library.NHibernate.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8E2D87B3-234F-4936-9817-E8F0EDC71AA1
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Common.Library.NHibernate.Data.dll

using NHibernate.Criterion;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

#nullable disable
namespace Common.Library.NHibernate.Data.Extensions
{
  public static class StringsProcessor
  {
    internal static ReplaceProcessedString CreateReplaceProcessedString(
      string stringToProcess,
      string replacePattern)
    {
      string str = stringToProcess;
      int num = 0;
      int startIndex = str.IndexOf('(');
      ReplaceProcessedString replaceProcessedString = new ReplaceProcessedString()
      {
        OriginalString = stringToProcess
      };
      for (; startIndex > 0; startIndex = str.IndexOf('('))
      {
        int endingBrace = StringsProcessor.FindEndingBrace(str.Substring(startIndex + 1, str.Length - startIndex - 1));
        if (endingBrace > 0)
        {
          string oldValue = str.Substring(startIndex, endingBrace + 2);
          str = str.Replace(oldValue, string.Format(replacePattern, (object) num));
          replaceProcessedString.ReplacementsDictionary.Add(string.Format(replacePattern, (object) num), oldValue);
          ++num;
        }
      }
      replaceProcessedString.ProcessedString = str;
      return replaceProcessedString;
    }

    internal static int FindStartingBrace(string target)
    {
      int length1 = target.LastIndexOf('(');
      int length2 = target.LastIndexOf(')');
      int num = 0;
      for (; length2 > length1 && length1 != -1; length1 = target.Substring(0, length1).LastIndexOf('('))
      {
        ++num;
        length2 = target.Substring(0, length2).LastIndexOf(')');
      }
      for (int index = 0; index < num; ++index)
        length1 = target.Substring(0, length1).LastIndexOf('(');
      return length1;
    }

    internal static int FindEndingBrace(string target)
    {
      int num1 = target.IndexOf('(');
      int endingBrace = target.IndexOf(')');
      int num2 = 0;
      for (; endingBrace > num1 && num1 != -1; num1 = target.IndexOf('(', num1 + 1))
      {
        ++num2;
        endingBrace = target.IndexOf(')', endingBrace + 1);
      }
      return endingBrace;
    }

    internal static IEnumerable<string> ExtractDistinctWhereClauses(ICriterion whereClause)
    {
      string input = string.Empty;
      string source = whereClause.ToString();
      int num1 = -1;
      for (int index = 0; index < source.Length; ++index)
      {
        char ch = source.ElementAt<char>(index);
        int num2;
        if (!ch.Equals('('))
        {
          ch = source.ElementAt<char>(index);
          num2 = !ch.Equals(')') ? 1 : 0;
        }
        else
          num2 = 0;
        if (num2 == 0)
        {
          input += source.Substring(num1 + 1, index - num1 - 1);
          num1 = index;
        }
      }
      if (num1 <= 0)
        input = source;
      string[] strArray = Regex.Split(input, "( and )|( or )", RegexOptions.IgnoreCase);
      List<string> distinctWhereClauses = new List<string>();
      foreach (string str in strArray)
        distinctWhereClauses.Add(str.Trim());
      return (IEnumerable<string>) distinctWhereClauses;
    }

    internal static bool ValueAppearsAsString(string operation, string value)
    {
      return !double.TryParse(value, out double _) && !operation.Equals("in", StringComparison.CurrentCultureIgnoreCase);
    }

    internal static string AdjustWhereClauseOperands(string clause)
    {
      bool flag = false;
      if (clause.StartsWith("not", StringComparison.InvariantCultureIgnoreCase))
      {
        clause = clause.Substring(4, clause.Length - 4).Trim();
        flag = true;
      }
      int length = clause.IndexOf(' ');
      int num = clause.IndexOf(' ', length + 1);
      string str1 = clause.Substring(0, length);
      string operation = clause.Substring(length + 1, num - length - 1);
      string str2 = clause.Substring(num + 1, clause.Length - (num + 1));
      return StringsProcessor.ValueAppearsAsString(operation, str2) ? string.Format("{0}{1} {2} '{3}'", flag ? (object) "not " : (object) "", (object) str1, (object) operation, (object) str2) : string.Format("{0}{1} {2} {3}", flag ? (object) "not " : (object) "", (object) str1, (object) operation, (object) str2);
    }

    internal static int SearchWordPositionOuterLevel(string word, string target)
    {
      for (int index = target.IndexOf(word, StringComparison.InvariantCultureIgnoreCase); index > 0; index = target.IndexOf(word, index + 1, StringComparison.InvariantCultureIgnoreCase))
      {
        if (StringsProcessor.CountStringOccurrences(target.Substring(0, index - 1), "(") == StringsProcessor.CountStringOccurrences(target.Substring(0, index - 1), ")"))
          return index;
      }
      return -1;
    }

    internal static int CountStringOccurrences(string text, string pattern)
    {
      int num1 = 0;
      int startIndex = 0;
      int num2;
      while ((num2 = text.IndexOf(pattern, startIndex)) != -1)
      {
        startIndex = num2 + pattern.Length;
        ++num1;
      }
      return num1;
    }
  }
}

