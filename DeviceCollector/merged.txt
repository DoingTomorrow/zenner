
--- AddDevice.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.AddDevice
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using CorporateDesign;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class AddDevice : Form
  {
    private List<ListElement> DisplayList = new List<ListElement>();
    private DeviceCollectorFunctions MyBus;
    internal object NewDevice = (object) null;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Button buttonAdd;
    private Button buttonCancel;
    private Label label1;
    private ListBox listBoxDeviceTypes;
    private Label lbAddress;
    private ComboBox comboBoxAddress;
    private Label lbSerialNumber;
    private ComboBox comboBoxSerialNumber;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public AddDevice(DeviceCollectorFunctions MyBusIn)
    {
      this.InitializeComponent();
      this.MyBus = MyBusIn;
      if (this.MyBus.MyBusMode == BusMode.WaveFlowRadio)
        this.DisplayList.Add(new ListElement("WAFEFLOW (common)", DeviceTypes.WaveFlowDevice));
      else if (this.MyBus.MyBusMode == BusMode.Minol_Device)
      {
        this.DisplayList.Add(new ListElement("Minol Device", DeviceTypes.Minol_Device));
      }
      else
      {
        this.DisplayList.Add(new ListElement("COMMON MBUS DEVICE", DeviceTypes.MBus));
        this.DisplayList.Add(new ListElement("ZENNER Serie1 (multidata S1/N1)", DeviceTypes.ZR_Serie1));
        this.DisplayList.Add(new ListElement("ZENNER Serie2 (zelsius C2,multidata WR3)", DeviceTypes.ZR_Serie2));
        this.DisplayList.Add(new ListElement("ZENNER Serie3 (C5)", DeviceTypes.ZR_Serie3));
        this.DisplayList.Add(new ListElement("ZENNER EDC", DeviceTypes.EDC));
        this.DisplayList.Add(new ListElement("ZENNER PDC", DeviceTypes.PDC));
      }
      foreach (ListElement display in this.DisplayList)
        this.listBoxDeviceTypes.Items.Add((object) display.Name);
      this.listBoxDeviceTypes.SelectedIndex = 0;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (AddDevice));
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.buttonAdd = new Button();
      this.buttonCancel = new Button();
      this.listBoxDeviceTypes = new ListBox();
      this.label1 = new Label();
      this.lbAddress = new Label();
      this.comboBoxAddress = new ComboBox();
      this.lbSerialNumber = new Label();
      this.comboBoxSerialNumber = new ComboBox();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      componentResourceManager.ApplyResources((object) this.buttonAdd, "buttonAdd");
      this.buttonAdd.Name = "buttonAdd";
      this.buttonAdd.Click += new System.EventHandler(this.buttonAdd_Click);
      componentResourceManager.ApplyResources((object) this.buttonCancel, "buttonCancel");
      this.buttonCancel.DialogResult = DialogResult.Cancel;
      this.buttonCancel.Name = "buttonCancel";
      this.buttonCancel.Click += new System.EventHandler(this.buttonCancel_Click);
      componentResourceManager.ApplyResources((object) this.listBoxDeviceTypes, "listBoxDeviceTypes");
      this.listBoxDeviceTypes.Name = "listBoxDeviceTypes";
      this.listBoxDeviceTypes.MouseDoubleClick += new MouseEventHandler(this.listBoxDeviceTypes_MouseDoubleClick);
      this.listBoxDeviceTypes.SelectedIndexChanged += new System.EventHandler(this.listBoxDeviceTypes_SelectedIndexChanged);
      componentResourceManager.ApplyResources((object) this.label1, "label1");
      this.label1.Name = "label1";
      componentResourceManager.ApplyResources((object) this.lbAddress, "lbAddress");
      this.lbAddress.Name = "lbAddress";
      componentResourceManager.ApplyResources((object) this.comboBoxAddress, "comboBoxAddress");
      this.comboBoxAddress.Items.AddRange(new object[21]
      {
        (object) componentResourceManager.GetString("comboBoxAddress.Items"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items1"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items2"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items3"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items4"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items5"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items6"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items7"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items8"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items9"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items10"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items11"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items12"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items13"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items14"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items15"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items16"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items17"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items18"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items19"),
        (object) componentResourceManager.GetString("comboBoxAddress.Items20")
      });
      this.comboBoxAddress.Name = "comboBoxAddress";
      componentResourceManager.ApplyResources((object) this.lbSerialNumber, "lbSerialNumber");
      this.lbSerialNumber.Name = "lbSerialNumber";
      componentResourceManager.ApplyResources((object) this.comboBoxSerialNumber, "comboBoxSerialNumber");
      this.comboBoxSerialNumber.Items.AddRange(new object[1]
      {
        (object) componentResourceManager.GetString("comboBoxSerialNumber.Items")
      });
      this.comboBoxSerialNumber.Name = "comboBoxSerialNumber";
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.comboBoxAddress);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.listBoxDeviceTypes);
      this.Controls.Add((Control) this.buttonAdd);
      this.Controls.Add((Control) this.buttonCancel);
      this.Controls.Add((Control) this.lbAddress);
      this.Controls.Add((Control) this.lbSerialNumber);
      this.Controls.Add((Control) this.comboBoxSerialNumber);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Name = nameof (AddDevice);
      this.ResumeLayout(false);
    }

    private void buttonAdd_Click(object sender, EventArgs e)
    {
      this.SelectType(this.listBoxDeviceTypes.SelectedIndex);
    }

    private void listBoxDeviceTypes_MouseDoubleClick(object sender, MouseEventArgs e)
    {
      this.SelectType(this.listBoxDeviceTypes.IndexFromPoint(e.Location));
    }

    private void SelectType(int index)
    {
      if (index < 0)
        return;
      DeviceTypes type = this.DisplayList[index].Type;
      int PrimaryAddress = -1;
      long SerialNumber = -1;
      if (type == DeviceTypes.WaveFlowDevice)
      {
        try
        {
          SerialNumber = long.Parse(this.comboBoxSerialNumber.Text);
        }
        catch
        {
          int num = (int) MessageBox.Show("Wrong serial number!", "Add device", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return;
        }
      }
      else
      {
        if (char.IsDigit(this.comboBoxAddress.Text[0]))
        {
          try
          {
            PrimaryAddress = int.Parse(this.comboBoxAddress.Text);
            if (PrimaryAddress < 0 || PrimaryAddress > (int) byte.MaxValue)
              PrimaryAddress = -1;
          }
          catch
          {
          }
        }
        if (char.IsDigit(this.comboBoxSerialNumber.Text[0]))
        {
          try
          {
            SerialNumber = long.Parse(this.comboBoxSerialNumber.Text);
            if (SerialNumber < 0L || SerialNumber > 99999999L)
              SerialNumber = -1L;
          }
          catch
          {
          }
        }
      }
      this.MyBus.AddDevice(type, PrimaryAddress, SerialNumber);
      this.Close();
    }

    private void listBoxDeviceTypes_SelectedIndexChanged(object sender, EventArgs e)
    {
      ListElement display = this.DisplayList[this.listBoxDeviceTypes.SelectedIndex];
      if (display.Type == DeviceTypes.MBus)
      {
        this.lbAddress.Visible = true;
        this.comboBoxAddress.Visible = true;
        this.lbSerialNumber.Visible = true;
        this.comboBoxSerialNumber.Visible = true;
      }
      else if (display.Type == DeviceTypes.ZR_Serie1)
      {
        this.lbAddress.Visible = true;
        this.comboBoxAddress.Visible = true;
        this.lbSerialNumber.Visible = true;
        this.comboBoxSerialNumber.Visible = true;
      }
      else if (display.Type == DeviceTypes.ZR_Serie2)
      {
        this.lbAddress.Visible = true;
        this.comboBoxAddress.Visible = true;
        this.lbSerialNumber.Visible = true;
        this.comboBoxSerialNumber.Visible = true;
      }
      else if (display.Type == DeviceTypes.ZR_Serie3)
      {
        this.lbAddress.Visible = true;
        this.comboBoxAddress.Visible = true;
        this.lbSerialNumber.Visible = true;
        this.comboBoxSerialNumber.Visible = true;
      }
      else if (display.Type == DeviceTypes.ZR_EHCA)
      {
        this.lbAddress.Visible = false;
        this.comboBoxAddress.Visible = false;
        this.lbSerialNumber.Visible = true;
        this.comboBoxSerialNumber.Visible = true;
      }
      else if (display.Type == DeviceTypes.WaveFlowDevice)
      {
        this.lbAddress.Visible = false;
        this.comboBoxAddress.Visible = false;
        this.lbSerialNumber.Visible = true;
        this.comboBoxSerialNumber.Visible = true;
      }
      else
      {
        if (display.Type != DeviceTypes.Minol_Device)
          return;
        this.lbAddress.Visible = false;
        this.comboBoxAddress.Visible = false;
        this.lbSerialNumber.Visible = false;
        this.comboBoxSerialNumber.Visible = false;
      }
    }

    private void buttonCancel_Click(object sender, EventArgs e) => this.Close();
  }
}


--- AddressReader.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.AddressReader
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;
using System.ComponentModel;
using System.Drawing;
using System.Resources;
using System.Windows.Forms;

#nullable disable
namespace DeviceCollector
{
  public class AddressReader : Form
  {
    internal int Address = 0;
    internal string AddressString = "0";
    internal bool Break;
    private AddressReader.AddressNode ReadType;
    private TextBox textBoxAddress;
    private Button buttonOk;
    private Button buttonCancel;
    private Label labelAddressType;
    private static ResourceManager addressReaderMessages = new ResourceManager("DeviceCollector.AddressReader", typeof (DeviceCollectorFunctions).Assembly);
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public AddressReader(AddressReader.AddressNode R_Type) => this.BaseConstructer(R_Type, "0");

    public AddressReader(AddressReader.AddressNode R_Type, string StartAddress)
    {
      this.BaseConstructer(R_Type, StartAddress);
    }

    private void BaseConstructer(AddressReader.AddressNode R_Type, string StartAddress)
    {
      this.InitializeComponent();
      this.ReadType = R_Type;
      this.Break = true;
      if (this.ReadType == AddressReader.AddressNode.ShortAdr)
      {
        this.labelAddressType.Text = AddressReader.addressReaderMessages.GetString("primAddr");
        this.textBoxAddress.Text = StartAddress;
      }
      else if (this.ReadType == AddressReader.AddressNode.SerialNrAndWildcard)
      {
        this.labelAddressType.Text = AddressReader.addressReaderMessages.GetString("secAddr");
        this.textBoxAddress.Text = StartAddress;
      }
      else
      {
        this.labelAddressType.Text = AddressReader.addressReaderMessages.GetString("ParameterListNumber");
        this.textBoxAddress.Text = StartAddress;
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (AddressReader));
      this.textBoxAddress = new TextBox();
      this.buttonOk = new Button();
      this.buttonCancel = new Button();
      this.labelAddressType = new Label();
      this.SuspendLayout();
      this.textBoxAddress.AccessibleDescription = (string) null;
      this.textBoxAddress.AccessibleName = (string) null;
      componentResourceManager.ApplyResources((object) this.textBoxAddress, "textBoxAddress");
      this.textBoxAddress.BackgroundImage = (Image) null;
      this.textBoxAddress.Font = (Font) null;
      this.textBoxAddress.Name = "textBoxAddress";
      this.textBoxAddress.KeyDown += new KeyEventHandler(this.textBoxAddress_KeyDown);
      this.buttonOk.AccessibleDescription = (string) null;
      this.buttonOk.AccessibleName = (string) null;
      componentResourceManager.ApplyResources((object) this.buttonOk, "buttonOk");
      this.buttonOk.BackgroundImage = (Image) null;
      this.buttonOk.Font = (Font) null;
      this.buttonOk.Name = "buttonOk";
      this.buttonOk.Click += new EventHandler(this.buttonOk_Click);
      this.buttonCancel.AccessibleDescription = (string) null;
      this.buttonCancel.AccessibleName = (string) null;
      componentResourceManager.ApplyResources((object) this.buttonCancel, "buttonCancel");
      this.buttonCancel.BackgroundImage = (Image) null;
      this.buttonCancel.DialogResult = DialogResult.Cancel;
      this.buttonCancel.Font = (Font) null;
      this.buttonCancel.Name = "buttonCancel";
      this.labelAddressType.AccessibleDescription = (string) null;
      this.labelAddressType.AccessibleName = (string) null;
      componentResourceManager.ApplyResources((object) this.labelAddressType, "labelAddressType");
      this.labelAddressType.Font = (Font) null;
      this.labelAddressType.Name = "labelAddressType";
      this.AccessibleDescription = (string) null;
      this.AccessibleName = (string) null;
      componentResourceManager.ApplyResources((object) this, "$this");
      this.BackgroundImage = (Image) null;
      this.ControlBox = false;
      this.Controls.Add((Control) this.labelAddressType);
      this.Controls.Add((Control) this.buttonOk);
      this.Controls.Add((Control) this.textBoxAddress);
      this.Controls.Add((Control) this.buttonCancel);
      this.Font = (Font) null;
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Icon = (Icon) null;
      this.Name = nameof (AddressReader);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private void textBoxAddress_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.Return)
      {
        if (!this.SetAddress())
          return;
        this.DialogResult = DialogResult.OK;
        this.Close();
      }
      else
      {
        if (e.KeyCode != Keys.Escape)
          return;
        this.Close();
      }
    }

    private void buttonOk_Click(object sender, EventArgs e)
    {
      if (!this.SetAddress())
        return;
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    private bool SetAddress()
    {
      if (this.ReadType == AddressReader.AddressNode.ShortAdr || this.ReadType == AddressReader.AddressNode.ParameterListIndex)
      {
        try
        {
          this.Address = int.Parse(this.textBoxAddress.Text);
          if (this.Address < 0 || this.Address > 251)
          {
            this.textBoxAddress.Text = "0";
            return false;
          }
        }
        catch
        {
          this.textBoxAddress.Text = "0";
          return false;
        }
      }
      else
        this.AddressString = this.textBoxAddress.Text;
      this.Break = false;
      return true;
    }

    public enum AddressNode
    {
      ShortAdr,
      SerialNrAndWildcard,
      ParameterListIndex,
    }
  }
}


--- AssemblyInfo.cs ---

ï»¿using System.Reflection;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle("DeviceCollector")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("ZENNER")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyFileVersion("2.0.1.0")]
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyKeyFile("")]
[assembly: AssemblyKeyName("")]
[assembly: ComVisible(false)]
[assembly: Guid("91e92816-8352-45d9-9f8d-cfdbf7710743")]
[assembly: AssemblyVersion("2.0.1.0")]


--- BusDevice.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.BusDevice
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using HandlerLib;
using PlugInLib;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class BusDevice : EventArgs
  {
    private static SortedList<string, RightInfo> EnabledLicenseRights = (SortedList<string, RightInfo>) ((IEnumerable<FieldInfo>) typeof (UserManager).GetFields(BindingFlags.Static | BindingFlags.NonPublic)).Where<FieldInfo>((System.Func<FieldInfo, bool>) (f => f.GetValue((object) null) is SortedList<string, RightInfo>)).FirstOrDefault<FieldInfo>().GetValue((object) null);
    internal bool UseMaxBaudrate = false;
    internal int TableIndex = -1;
    internal DataRow TableDataRow = (DataRow) null;
    public DeviceCollectorFunctions MyBus;
    internal ByteField TransmitBuffer;
    internal ByteField ReceiveBuffer;
    internal List<byte> TotalReceiveBuffer;
    internal MemoryLocation WatchMemoryLocation;
    internal int WatchStartAddress;
    internal int WatchNumberOfBytes;
    public DeviceInfo Info = new DeviceInfo();

    public static void CheckReadOnlyRight()
    {
      if (!UserManager.CheckPermission("Role\\Developer") && BusDevice.EnabledLicenseRights != null && BusDevice.EnabledLicenseRights.ContainsKey("ReadOnly") && UserManager.CheckPermission("Right\\ReadOnly"))
        throw new Exception("Access denied! The right 'ReadOnly' is set to true. Please check your licence.");
    }

    internal DeviceTypes DeviceType
    {
      set => this.Info.DeviceType = value;
      get => this.Info.DeviceType;
    }

    public BusDevice()
    {
    }

    public BusDevice(DeviceCollectorFunctions TheBus)
    {
      this.MyBus = TheBus;
      this.DeviceType = DeviceTypes.None;
      this.TotalReceiveBuffer = new List<byte>();
    }

    internal virtual bool SetRepeaters(string[] SerialNumbers, out string Fehlerstring)
    {
      Fehlerstring = "Not implemented!";
      return false;
    }

    internal virtual void ActivateRepeaters()
    {
    }

    internal virtual void DeactivateRepeaters()
    {
    }

    internal virtual string[] GetRepeaters() => new string[0];

    internal virtual bool GetRepeatersAreActivated() => false;

    internal virtual bool ReadVersion(out ReadVersionData versionData)
    {
      versionData = (ReadVersionData) null;
      this.FunctionNotAvailable(nameof (ReadVersion));
      return false;
    }

    internal virtual bool ResetDevice(int AfterResetBaudrate) => this.ResetNotImplemented();

    internal virtual bool ResetDevice() => this.ResetNotImplemented();

    internal virtual bool ResetDevice(bool loadBackup) => this.ResetNotImplemented();

    internal virtual byte[] RunIoTest(IoTestFunctions theFunction)
    {
      this.FunctionNotAvailable(nameof (RunIoTest));
      return (byte[]) null;
    }

    private bool ResetNotImplemented()
    {
      this.FunctionNotAvailable(DeviceCollectorFunctions.SerialBusMessage.GetString(DeviceCollectorFunctions.SerialBusMessage.GetString("9")));
      return false;
    }

    internal virtual bool ReadAnswerString(string RequestString, out string AnswerString)
    {
      AnswerString = string.Empty;
      return false;
    }

    internal virtual bool ReadParameterGroup(
      ParameterGroups TheParameterGroup,
      int Retries,
      out object ParameterData)
    {
      ParameterData = (object) null;
      return false;
    }

    internal virtual bool ReadParameterGroup(
      ParameterGroups TheParameterGroup,
      out object ParameterData)
    {
      ParameterData = (object) null;
      return false;
    }

    internal virtual bool WriteParameterGroup(
      ParameterGroups TheParameterGroup,
      object ParameterData)
    {
      return false;
    }

    internal virtual bool ResetParameterGroup(ParameterGroups TheParameterGroup) => false;

    internal virtual bool GetDeviceConfiguration(out SortedList<OverrideID, object> ConfigParamList)
    {
      ConfigParamList = (SortedList<OverrideID, object>) null;
      return false;
    }

    internal virtual bool EraseFlash(int StartAddress, int NumberOfBytes)
    {
      return this.FunctionNotAvailable(nameof (EraseFlash));
    }

    internal virtual bool SelectParameterList(int ListNumber, int function)
    {
      return this.FunctionNotAvailable(nameof (SelectParameterList));
    }

    internal virtual ParameterListInfo ReadParameterList()
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented, nameof (ReadParameterList));
      return (ParameterListInfo) null;
    }

    internal virtual bool WriteDueDateMonth(ushort month)
    {
      return this.FunctionNotAvailable("SelectParameterList");
    }

    internal virtual bool SetOptoTimeoutSeconds(int Seconds)
    {
      return this.FunctionNotAvailable(nameof (SetOptoTimeoutSeconds));
    }

    internal virtual bool FlyingTestActivate()
    {
      return this.FunctionNotAvailable(nameof (FlyingTestActivate));
    }

    internal virtual bool FlyingTestStart() => this.FunctionNotAvailable(nameof (FlyingTestStart));

    internal virtual bool FlyingTestStop() => this.FunctionNotAvailable(nameof (FlyingTestStop));

    internal virtual bool FlyingTestReadVolume(out float volume, out MBusDeviceState state)
    {
      volume = 0.0f;
      state = MBusDeviceState.AnyError;
      return this.FunctionNotAvailable(nameof (FlyingTestReadVolume));
    }

    internal virtual bool AdcTestActivate() => this.FunctionNotAvailable(nameof (AdcTestActivate));

    internal virtual bool CapacityOfTestActivate()
    {
      return this.FunctionNotAvailable(nameof (CapacityOfTestActivate));
    }

    internal virtual bool AdcTestCycleWithSimulatedVolume(float simulationVolume)
    {
      return this.FunctionNotAvailable(nameof (AdcTestCycleWithSimulatedVolume));
    }

    internal virtual bool RadioTest(RadioTestMode testMode)
    {
      return this.FunctionNotAvailable(nameof (RadioTest));
    }

    internal virtual bool Start512HzRtcCalibration()
    {
      return this.FunctionNotAvailable(nameof (Start512HzRtcCalibration));
    }

    internal virtual bool TestDone(long dispValueId)
    {
      return this.FunctionNotAvailable(nameof (TestDone));
    }

    private bool FunctionNotAvailable(string FunctionName)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented, FunctionName);
      return false;
    }

    internal virtual bool GetMeterMonitorData(out ByteField Buffer)
    {
      Buffer = (ByteField) null;
      return this.FunctionNotAvailable(nameof (GetMeterMonitorData));
    }

    internal virtual bool DeviceProtectionGet()
    {
      return this.FunctionNotAvailable(nameof (DeviceProtectionGet));
    }

    internal virtual bool DeviceProtectionSet()
    {
      return this.FunctionNotAvailable(nameof (DeviceProtectionSet));
    }

    internal virtual bool DeviceProtectionReset(uint meterKey)
    {
      return this.FunctionNotAvailable(nameof (DeviceProtectionReset));
    }

    internal virtual bool DeviceProtectionSetKey(uint meterKey)
    {
      return this.FunctionNotAvailable(nameof (DeviceProtectionSetKey));
    }
  }
}


--- BusInfo.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.BusInfo
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using StartupLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class BusInfo
  {
    private static Logger logger = LogManager.GetLogger(nameof (BusInfo));
    internal string BusInfoFilename;
    internal ArrayList CommParam = new ArrayList();
    internal DeviceCollectorFunctions MyBus;
    internal SortedList<DeviceCollectorSettings, object> ReadoutSettingsList;

    internal BusInfo(DeviceCollectorFunctions MyBusRef)
    {
      this.MyBus = MyBusRef;
      this.GetLastBusInfoFilename();
    }

    internal BusInfo(DeviceCollectorFunctions MyBusRef, string BusName)
    {
      this.MyBus = MyBusRef;
      this.BusInfoFilename = this.UseFilenameRules(BusName);
      this.ReadBusInfoFromFile(false);
    }

    internal BusInfo(DeviceCollectorFunctions MyBusRef, bool IgnoreError, bool useFileBusSettings)
    {
      this.MyBus = MyBusRef;
      this.BusInfoFilename = "";
      if (this.MyBus.MyDeviceList != null)
        this.MyBus.MyDeviceList.DeleteBusList();
      if (!useFileBusSettings)
        return;
      this.MyBus.SetBaseMode(BusMode.MBusPointToPoint);
      this.MyBus.AddDevice(DeviceTypes.ZR_Serie3, 0);
      if (this.GetLastBusInfoFilename() && this.ReadBusInfoFromFile(IgnoreError))
        this.SaveBusInfoFileNameForPlugIn();
    }

    internal BusInfo(DeviceCollectorFunctions MyBusRef, string BusName, bool IgnoreError)
    {
      this.MyBus = MyBusRef;
      this.BusInfoFilename = this.UseFilenameRules(BusName);
      if (!this.ReadBusInfoFromFile(IgnoreError))
        return;
      this.SaveBusInfoFileNameForPlugIn();
    }

    private bool GetLastBusInfoFilename()
    {
      this.BusInfoFilename = PlugInLoader.GmmConfiguration.GetValue("DeviceCollector", "LastBus");
      if (this.BusInfoFilename.Length == 0)
      {
        this.BusInfoFilename = this.UseFilenameRules(string.Empty);
        PlugInLoader.GmmConfiguration.SetOrUpdateValue("DeviceCollector", "LastBus", this.BusInfoFilename);
        return false;
      }
      this.BusInfoFilename = this.UseFilenameRules(this.BusInfoFilename);
      return true;
    }

    internal void SetBusinfoFilename(string Busname)
    {
      this.BusInfoFilename = this.UseFilenameRules(Busname);
    }

    internal void SaveBusInfoFileNameForPlugIn()
    {
      PlugInLoader.GmmConfiguration.SetOrUpdateValue("DeviceCollector", "LastBus", this.BusInfoFilename);
    }

    internal void SetBusinfoFilenameToDefault()
    {
      this.BusInfoFilename = this.UseFilenameRules(string.Empty);
    }

    internal string UseFilenameRules(string FilenameIn)
    {
      string path1 = "";
      string path2 = "";
      try
      {
        if (!string.IsNullOrEmpty(FilenameIn) && Directory.Exists(Path.GetPathRoot(FilenameIn)))
          path1 = Path.GetDirectoryName(FilenameIn);
      }
      catch
      {
      }
      if (path1.Length == 0)
        path1 = SystemValues.BussesPath;
      try
      {
        path2 = Path.GetFileName(FilenameIn);
      }
      catch
      {
      }
      if (path2.Length == 0)
        path2 = "DefaultBus";
      string path = Path.Combine(path1, path2);
      if (Path.GetExtension(path).Length == 0)
        path += ".bus";
      string directoryName = Path.GetDirectoryName(path);
      if (!Directory.Exists(directoryName))
        Directory.CreateDirectory(directoryName);
      return path;
    }

    internal bool SelectBusinfoOpenFilename()
    {
      if (string.IsNullOrEmpty(this.BusInfoFilename) && !this.GetLastBusInfoFilename())
        this.BusInfoFilename = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), Path.Combine("ZENNER", "GMM"));
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.InitialDirectory = Path.GetDirectoryName(this.BusInfoFilename);
      try
      {
        openFileDialog.FileName = Path.GetFileName(this.BusInfoFilename);
      }
      catch
      {
      }
      openFileDialog.Filter = "Businfo files (*.bus)|*.bus|Default businfo files  *.defbus)|*.defbus|All files (*.*)|*.*";
      openFileDialog.FilterIndex = 1;
      openFileDialog.RestoreDirectory = true;
      openFileDialog.Title = DeviceCollectorFunctions.SerialBusMessage.GetString("ReadBusCollection");
      openFileDialog.CheckFileExists = true;
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return false;
      this.BusInfoFilename = openFileDialog.FileName;
      return true;
    }

    internal bool SelectBusinfoSaveFilename()
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.InitialDirectory = Path.GetDirectoryName(this.BusInfoFilename);
      try
      {
        saveFileDialog.FileName = Path.GetFileName(this.BusInfoFilename);
      }
      catch
      {
      }
      saveFileDialog.Filter = "Businfo files (*.bus)|*.bus| All files (*.*)|*.*";
      saveFileDialog.FilterIndex = 1;
      saveFileDialog.RestoreDirectory = true;
      saveFileDialog.Title = DeviceCollectorFunctions.SerialBusMessage.GetString("WriteBusCollection");
      saveFileDialog.CheckFileExists = false;
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return false;
      this.BusInfoFilename = saveFileDialog.FileName;
      return true;
    }

    public bool ReadBusInfoFromFile(bool IgnoreError)
    {
      XmlTextReader reader = (XmlTextReader) null;
      if (!File.Exists(this.BusInfoFilename))
      {
        ZR_ClassLibMessages.AddErrorDescription("Businfo file not found!");
        BusInfo.logger.Warn(string.Format("ReadBusInfoFromFile: file {0} does not exist.", (object) this.BusInfoFilename));
      }
      else
      {
        try
        {
          reader = new XmlTextReader(this.BusInfoFilename);
          while (reader.Read())
          {
            if (reader.NodeType == XmlNodeType.Element)
            {
              if (reader.Name == "Communication")
              {
                this.CommParam.Clear();
                while (reader.MoveToNextAttribute())
                {
                  this.CommParam.Add((object) reader.Name);
                  this.CommParam.Add((object) reader.Value);
                }
              }
              else if (reader.Name == "SerialBusSettings")
              {
                string attribute = reader.GetAttribute("BusMode");
                try
                {
                  this.MyBus.SetBaseMode((BusMode) Enum.Parse(typeof (BusMode), attribute, true));
                }
                catch (ArgumentException ex)
                {
                  ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Unknown bus mode: " + attribute + "Please check the BusInfo file!");
                }
                this.TryLoadReadoutSettings(reader);
              }
              else if (reader.Name == "Device")
              {
                SortedList<string, string> DeviceParameter = new SortedList<string, string>();
                for (int i = 0; i < reader.AttributeCount; ++i)
                {
                  reader.MoveToAttribute(i);
                  string str = reader.Value;
                  string name = reader.Name;
                  if (name.Length > 0)
                    DeviceParameter.Add(name, str);
                }
                if (this.MyBus.MyBusMode != BusMode.MBus)
                  this.MyBus.MyDeviceList.DeleteBusList();
                this.AddDeviceToDeviceList(DeviceParameter);
              }
            }
          }
        }
        catch (Exception ex)
        {
          BusInfo.logger.Error(string.Format("ReadBusInfoFromFile: catched exception {0}.", (object) ex.Message));
          goto label_29;
        }
        finally
        {
          reader?.Close();
        }
        BusInfo.logger.Info(string.Format("ReadBusInfoFromFile: loaded file {0} successfully.", (object) this.BusInfoFilename));
        return true;
      }
label_29:
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Error on read businfo");
      this.MyBus.DeleteBusInfo();
      return false;
    }

    private bool TryLoadReadoutSettings(XmlTextReader reader)
    {
      if (this.ReadoutSettingsList == null)
        this.ReadoutSettingsList = new SortedList<DeviceCollectorSettings, object>();
      else
        this.ReadoutSettingsList.Clear();
      try
      {
        foreach (string name in ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (DeviceCollectorSettings)))
        {
          DeviceCollectorSettings key = (DeviceCollectorSettings) Enum.Parse(typeof (DeviceCollectorSettings), name, true);
          string attribute = reader.GetAttribute(name);
          if (attribute != null)
            this.ReadoutSettingsList.Add(key, (object) attribute);
        }
      }
      catch (Exception ex)
      {
        BusInfo.logger.Error(string.Format("TryLoadReadoutSettings: catched exception {0}.", (object) ex.Message));
        return false;
      }
      return true;
    }

    private void AddDeviceToDeviceList(SortedList<string, string> DeviceParameter)
    {
      if (this.MyBus.MyDeviceList == null)
        return;
      int index1 = DeviceParameter.IndexOfKey("Selected");
      bool flag1 = index1 >= 0 && bool.Parse(DeviceParameter.Values[index1]);
      int index2 = DeviceParameter.IndexOfKey("Address");
      byte num1 = index2 < 0 ? (byte) 0 : byte.Parse(DeviceParameter.Values[index2]);
      int index3 = DeviceParameter.IndexOfKey("AddressOk");
      bool flag2 = index3 >= 0 && bool.Parse(DeviceParameter.Values[index3]);
      int index4 = DeviceParameter.IndexOfKey("AddressKnown");
      bool flag3 = index4 >= 0 && bool.Parse(DeviceParameter.Values[index4]);
      int index5 = DeviceParameter.IndexOfKey("IdNo");
      string str1 = index5 < 0 ? string.Empty : DeviceParameter.Values[index5].Trim();
      int index6 = DeviceParameter.IndexOfKey("Manufacturer");
      short ManufacturerCode = index6 < 0 ? (short) 0 : short.Parse(DeviceParameter.Values[index6]);
      int index7 = DeviceParameter.IndexOfKey("Generation");
      byte num2 = index7 < 0 ? (byte) 0 : byte.Parse(DeviceParameter.Values[index7]);
      int index8 = DeviceParameter.IndexOfKey("Medium");
      byte num3 = index8 < 0 ? (byte) 0 : byte.Parse(DeviceParameter.Values[index8]);
      int index9 = DeviceParameter.IndexOfKey("DeviceInfoText");
      string str2 = index9 < 0 ? string.Empty : DeviceParameter.Values[index9];
      try
      {
        string str3 = DeviceParameter["Type"];
        if (str3 == "unknown" || !Enum.IsDefined(typeof (DeviceTypes), (object) str3))
          return;
        this.MyBus.MyDeviceList.AddDevice((DeviceTypes) Enum.Parse(typeof (DeviceTypes), str3, true), true);
        object bu = this.MyBus.MyDeviceList.bus[this.MyBus.MyDeviceList.bus.Count - 1];
        if (bu is RadioDevice)
        {
          this.MyBus.MyDeviceList.bus.RemoveAt(this.MyBus.MyDeviceList.bus.Count - 1);
          if (DeviceParameter == null || !DeviceParameter.ContainsKey("FunkId") || !DeviceParameter.ContainsKey("LastSeen") || !DeviceParameter.ContainsKey("Packets"))
            return;
          RadioList deviceList = (RadioList) this.MyBus.MyDeviceList;
          Convert.ToInt64(DeviceParameter["FunkId"], (IFormatProvider) CultureInfo.InvariantCulture);
          DeviceTypes deviceTypes = (DeviceTypes) Enum.Parse(typeof (DeviceTypes), str3, true);
          DateTime receivedAt = DateTime.Parse(DeviceParameter["LastSeen"], (IFormatProvider) FixedFormates.TheFormates.DateTimeFormat);
          string str4 = DeviceParameter["Packets"];
          char[] chArray = new char[1]{ ',' };
          foreach (string hex in str4.Split(chArray))
          {
            if (!string.IsNullOrEmpty(hex))
            {
              byte[] byteArray = ZR_ClassLibrary.Util.HexStringToByteArray(hex);
              RadioPacket packet;
              if (this.MyBus.MyBusMode == BusMode.Radio2)
                packet = (RadioPacket) new RadioPacketRadio2();
              else if (this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA || this.MyBus.MyBusMode == BusMode.Radio4)
                packet = (RadioPacket) new RadioPacketRadio3();
              else if (this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.wMBusT2_other)
              {
                packet = (RadioPacket) new RadioPacketWirelessMBus();
              }
              else
              {
                BusInfo.logger.Error("Invalid BusMode where adding the WalkBy devices.");
                continue;
              }
              packet.MyFunctions = this.MyBus;
              if (packet.Parse(byteArray, receivedAt, false))
              {
                deviceList.AddPacket(packet);
                deviceList.AddRadioDevice(packet);
              }
            }
          }
        }
        else if (bu is MBusDevice)
        {
          MBusDevice selectedDevice = this.MyBus.MyDeviceList.SelectedDevice as MBusDevice;
          selectedDevice.PrimaryAddressOk = flag2;
          selectedDevice.PrimaryAddressKnown = flag3;
          selectedDevice.PrimaryDeviceAddress = num1;
          if (str1.Length > 0)
          {
            selectedDevice.Info.MeterNumber = str1;
            selectedDevice.Info.ManufacturerCode = ManufacturerCode;
            selectedDevice.Info.Manufacturer = MBusDevice.GetManufacturer(ManufacturerCode);
            selectedDevice.Info.Version = num2;
            selectedDevice.Info.Medium = num3;
          }
          selectedDevice.DeviceInfoText = str2;
          this.MyBus.MyDeviceList.WorkBusAddresses();
        }
        else if (this.MyBus.MyBusMode == BusMode.WaveFlowRadio)
        {
          WaveFlowDevice selectedDevice = this.MyBus.MyDeviceList.SelectedDevice as WaveFlowDevice;
          if (str1.Length > 0)
          {
            DeviceInfo deviceInfo = new DeviceInfo();
            selectedDevice.Info = deviceInfo;
            selectedDevice.Info.MeterNumber = str1;
            selectedDevice.Info.ManufacturerCode = ManufacturerCode;
            selectedDevice.Info.Manufacturer = MBusDevice.GetManufacturer(ManufacturerCode);
            selectedDevice.Info.Version = num2;
            selectedDevice.Info.Medium = num3;
          }
        }
      }
      catch (Exception ex)
      {
        string message = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        BusInfo.logger.Error(ex, message);
      }
    }

    public bool WriteBusInfoToFile()
    {
      XmlTextWriter myXmlTextWriter = (XmlTextWriter) null;
      try
      {
        this.MyBus.MyCom.GetCommParameter(ref this.MyBus.MyBusInfo.CommParam);
        myXmlTextWriter = new XmlTextWriter(this.BusInfoFilename, (Encoding) null);
        myXmlTextWriter.Formatting = Formatting.Indented;
        myXmlTextWriter.WriteStartDocument(false);
        myXmlTextWriter.WriteComment("Businfo fÃ¼r Zenner Global Meter Manager");
        myXmlTextWriter.WriteStartElement("Businfo");
        myXmlTextWriter.WriteComment("Definition der Schnittstelle");
        myXmlTextWriter.WriteStartElement("Communication", (string) null);
        for (int index = 0; index < this.CommParam.Count; index += 2)
          myXmlTextWriter.WriteAttributeString((string) this.CommParam[index], (string) this.CommParam[index + 1]);
        myXmlTextWriter.WriteEndElement();
        myXmlTextWriter.WriteComment("DeviceCollector base settings");
        myXmlTextWriter.WriteStartElement("SerialBusSettings", (string) null);
        myXmlTextWriter.WriteAttributeString(DeviceCollectorSettings.BusMode.ToString(), this.MyBus.MyBusMode.ToString());
        myXmlTextWriter.WriteAttributeString(DeviceCollectorSettings.DaKonId.ToString(), this.MyBus.DaKonId.ToString());
        XmlTextWriter xmlTextWriter1 = myXmlTextWriter;
        DeviceCollectorSettings collectorSettings = DeviceCollectorSettings.FromTime;
        string localName1 = collectorSettings.ToString();
        string str1 = this.MyBus.ReadFromTime.ToString();
        xmlTextWriter1.WriteAttributeString(localName1, str1);
        XmlTextWriter xmlTextWriter2 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.ToTime;
        string localName2 = collectorSettings.ToString();
        string str2 = this.MyBus.ReadToTime.ToString();
        xmlTextWriter2.WriteAttributeString(localName2, str2);
        XmlTextWriter xmlTextWriter3 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.Password;
        string localName3 = collectorSettings.ToString();
        string str3 = this.MyBus.Password.ToString();
        xmlTextWriter3.WriteAttributeString(localName3, str3);
        XmlTextWriter xmlTextWriter4 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.MaxRequestRepeat;
        string localName4 = collectorSettings.ToString();
        string str4 = this.MyBus.MaxRequestRepeat.ToString();
        xmlTextWriter4.WriteAttributeString(localName4, str4);
        XmlTextWriter xmlTextWriter5 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.ScanStartAddress;
        string localName5 = collectorSettings.ToString();
        string str5 = this.MyBus.ScanStartAddress.ToString();
        xmlTextWriter5.WriteAttributeString(localName5, str5);
        XmlTextWriter xmlTextWriter6 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.ScanStartSerialnumber;
        string localName6 = collectorSettings.ToString();
        string str6 = this.MyBus.ScanStartSerialnumber.ToString();
        xmlTextWriter6.WriteAttributeString(localName6, str6);
        XmlTextWriter xmlTextWriter7 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.OrganizeStartAddress;
        string localName7 = collectorSettings.ToString();
        string str7 = this.MyBus.OrganizeStartAddress.ToString();
        xmlTextWriter7.WriteAttributeString(localName7, str7);
        XmlTextWriter xmlTextWriter8 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.CycleTime;
        string localName8 = collectorSettings.ToString();
        string str8 = this.MyBus.CycleTime.ToString();
        xmlTextWriter8.WriteAttributeString(localName8, str8);
        XmlTextWriter xmlTextWriter9 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.OnlySecondaryAddressing;
        string localName9 = collectorSettings.ToString();
        string str9 = this.MyBus.OnlySecondaryAddressing.ToString();
        xmlTextWriter9.WriteAttributeString(localName9, str9);
        XmlTextWriter xmlTextWriter10 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.FastSecondaryAddressing;
        string localName10 = collectorSettings.ToString();
        string str10 = this.MyBus.FastSecondaryAddressing.ToString();
        xmlTextWriter10.WriteAttributeString(localName10, str10);
        XmlTextWriter xmlTextWriter11 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.KeepExistingDestinationAddress;
        string localName11 = collectorSettings.ToString();
        string str11 = this.MyBus.KeepExistingDestinationAddress.ToString();
        xmlTextWriter11.WriteAttributeString(localName11, str11);
        XmlTextWriter xmlTextWriter12 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.ChangeInterfaceBaudrateToo;
        string localName12 = collectorSettings.ToString();
        string str12 = this.MyBus.ChangeInterfaceBaudrateToo.ToString();
        xmlTextWriter12.WriteAttributeString(localName12, str12);
        XmlTextWriter xmlTextWriter13 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.UseExternalKeyForReading;
        string localName13 = collectorSettings.ToString();
        string str13 = this.MyBus.UseExternalKeyForReading.ToString();
        xmlTextWriter13.WriteAttributeString(localName13, str13);
        XmlTextWriter xmlTextWriter14 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.BeepSignalOnReadResult;
        string localName14 = collectorSettings.ToString();
        string str14 = this.MyBus.BeepSignalForReadResult.ToString();
        xmlTextWriter14.WriteAttributeString(localName14, str14);
        XmlTextWriter xmlTextWriter15 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.LogToFileEnabled;
        string localName15 = collectorSettings.ToString();
        string str15 = this.MyBus.LogToFileEnabled.ToString();
        xmlTextWriter15.WriteAttributeString(localName15, str15);
        XmlTextWriter xmlTextWriter16 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.LogFilePath;
        string localName16 = collectorSettings.ToString();
        string str16 = this.MyBus.LogFilePath.ToString();
        xmlTextWriter16.WriteAttributeString(localName16, str16);
        XmlTextWriter xmlTextWriter17 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.IsMultiTelegrammEnabled;
        string localName17 = collectorSettings.ToString();
        string str17 = this.MyBus.IsMultiTelegrammEnabled.ToString();
        xmlTextWriter17.WriteAttributeString(localName17, str17);
        XmlTextWriter xmlTextWriter18 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.UseREQ_UD2_5B;
        string localName18 = collectorSettings.ToString();
        string str18 = this.MyBus.UseREQ_UD2_5B.ToString();
        xmlTextWriter18.WriteAttributeString(localName18, str18);
        XmlTextWriter xmlTextWriter19 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.SendFirstApplicationReset;
        string localName19 = collectorSettings.ToString();
        string str19 = this.MyBus.SendFirstApplicationReset.ToString();
        xmlTextWriter19.WriteAttributeString(localName19, str19);
        XmlTextWriter xmlTextWriter20 = myXmlTextWriter;
        collectorSettings = DeviceCollectorSettings.SendFirstSND_NKE;
        string localName20 = collectorSettings.ToString();
        string str20 = this.MyBus.SendFirstSND_NKE.ToString();
        xmlTextWriter20.WriteAttributeString(localName20, str20);
        myXmlTextWriter.WriteEndElement();
        if (this.MyBus.MyDeviceList != null)
        {
          myXmlTextWriter.WriteComment("Liste der GerÃ¤te");
          for (int index = 0; index < this.MyBus.MyDeviceList.bus.Count; ++index)
          {
            myXmlTextWriter.WriteStartElement("Device", (string) null);
            myXmlTextWriter.WriteAttributeString("Type", ((BusDevice) this.MyBus.MyDeviceList.bus[index]).DeviceType.ToString());
            bool flag;
            if (this.MyBus.MyDeviceList.bus[index] == this.MyBus.MyDeviceList.SelectedDevice)
            {
              XmlTextWriter xmlTextWriter21 = myXmlTextWriter;
              flag = true;
              string str21 = flag.ToString();
              xmlTextWriter21.WriteAttributeString("Selected", str21);
            }
            else
            {
              XmlTextWriter xmlTextWriter22 = myXmlTextWriter;
              flag = false;
              string str22 = flag.ToString();
              xmlTextWriter22.WriteAttributeString("Selected", str22);
            }
            if (this.MyBus.MyDeviceList.bus[index] is RadioDevice)
            {
              Dictionary<long, RadioDataSet> receivedData = ((RadioList) this.MyBus.MyDeviceList).ReceivedData;
              RadioDevice bu = (RadioDevice) this.MyBus.MyDeviceList.bus[index];
              if (receivedData.Count > 0 && bu.Info != null && bu.Device != null)
              {
                myXmlTextWriter.WriteAttributeString("FunkId", bu.Device.FunkId.ToString());
                myXmlTextWriter.WriteAttributeString("LastSeen", bu.Info.LastReadingDate.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.Append(ZR_ClassLibrary.Util.ByteArrayToHexString(receivedData[bu.Device.FunkId].LastRadioPacket.Buffer)).Append(',');
                myXmlTextWriter.WriteAttributeString("Packets", stringBuilder.ToString());
              }
            }
            else if (this.MyBus.MyDeviceList.bus[index] is MBusDevice)
            {
              MBusDevice bu = this.MyBus.MyDeviceList.bus[index] as MBusDevice;
              myXmlTextWriter.WriteAttributeString("Address", bu.PrimaryDeviceAddress.ToString());
              myXmlTextWriter.WriteAttributeString("AddressOk", bu.PrimaryAddressOk.ToString());
              myXmlTextWriter.WriteAttributeString("AddressKnown", bu.PrimaryAddressKnown.ToString());
              if (bu.Info != null)
              {
                myXmlTextWriter.WriteAttributeString("IdNo", bu.Info.MeterNumber);
                myXmlTextWriter.WriteAttributeString("Manufacturer", bu.Info.ManufacturerCode.ToString());
                myXmlTextWriter.WriteAttributeString("Generation", bu.Info.Version.ToString());
                myXmlTextWriter.WriteAttributeString("Medium", bu.Info.Medium.ToString());
              }
              if (bu.TableDataRow != null && bu.TableDataRow.Table.Columns["DeviceInfoText"] != null)
              {
                int ordinal = bu.TableDataRow.Table.Columns["DeviceInfoText"].Ordinal;
                if (bu.TableDataRow != null && ordinal != -1)
                  myXmlTextWriter.WriteAttributeString("DeviceInfoText", bu.TableDataRow[ordinal].ToString());
              }
            }
            else if (this.MyBus.MyBusMode == BusMode.WaveFlowRadio)
              this.WriteWaveFlowRadioToFile(myXmlTextWriter, index);
            myXmlTextWriter.WriteEndElement();
          }
          myXmlTextWriter.WriteEndElement();
        }
      }
      catch (Exception ex)
      {
        BusInfo.logger.Error(string.Format("WriteBusInfoToFile: catched exception {0}.", (object) ex.Message));
        return false;
      }
      finally
      {
        if (myXmlTextWriter != null)
        {
          myXmlTextWriter.Flush();
          myXmlTextWriter.Close();
        }
      }
      BusInfo.logger.Info(string.Format("WriteBusInfoToFile: wrote file {0} successfully.", (object) this.BusInfoFilename));
      return true;
    }

    private void WriteWaveFlowRadioToFile(XmlTextWriter myXmlTextWriter, int i)
    {
      if (this.MyBus.MyDeviceList != null)
        return;
      WaveFlowDevice bu = this.MyBus.MyDeviceList.bus[i] as WaveFlowDevice;
      if (bu.Info == null)
        return;
      myXmlTextWriter.WriteAttributeString("IdNo", bu.Info.MeterNumber);
      myXmlTextWriter.WriteAttributeString("Manufacturer", bu.Info.ManufacturerCode.ToString());
      myXmlTextWriter.WriteAttributeString("Generation", bu.Info.Version.ToString());
      myXmlTextWriter.WriteAttributeString("Medium", bu.Info.Medium.ToString());
    }

    private void SetDefaultCommParameter()
    {
      if (this.MyBus.MyCom == null)
        return;
      this.MyBus.MyCom.GetCommParameter(ref this.CommParam);
    }

    internal string GetBusSettings(AsyncComSettings key)
    {
      this.MyBus.MyCom.GetCommParameter(ref this.MyBus.MyBusInfo.CommParam);
      for (int index = 0; index < this.MyBus.MyBusInfo.CommParam.Count; index += 2)
      {
        string str = (string) this.MyBus.MyBusInfo.CommParam[index];
        if (key.ToString() == str)
          return (string) this.MyBus.MyBusInfo.CommParam[index + 1];
      }
      return string.Empty;
    }

    internal SortedList<string, string> GetBusSettings()
    {
      SortedList<string, string> busSettings = new SortedList<string, string>();
      busSettings.Add("BusMode", this.MyBus.MyBusMode.ToString());
      if (this.MyBus.MyDeviceList != null && this.MyBus.MyDeviceList.bus != null && this.MyBus.MyDeviceList.bus.Count > 0)
      {
        StringBuilder DeviceData = new StringBuilder();
        for (int index = 0; index < this.MyBus.MyDeviceList.bus.Count; ++index)
        {
          DeviceData.Length = 0;
          DeviceData.Append("Type:" + ((BusDevice) this.MyBus.MyDeviceList.bus[index]).DeviceType.ToString());
          DeviceData.Append("|Selected:");
          bool flag;
          if (this.MyBus.MyDeviceList.bus[index] == this.MyBus.MyDeviceList.SelectedDevice)
          {
            StringBuilder stringBuilder = DeviceData;
            flag = true;
            string str = flag.ToString();
            stringBuilder.Append(str);
          }
          else
          {
            StringBuilder stringBuilder = DeviceData;
            flag = false;
            string str = flag.ToString();
            stringBuilder.Append(str);
          }
          if (!(this.MyBus.MyDeviceList.bus[index] is MinolDevice))
          {
            if (this.MyBus.MyDeviceList.bus[index] is MBusDevice)
            {
              MBusDevice bu = this.MyBus.MyDeviceList.bus[index] as MBusDevice;
              DeviceData.Append("|Address:" + bu.PrimaryDeviceAddress.ToString());
              DeviceData.Append("|AddressOk:" + bu.PrimaryAddressOk.ToString());
              DeviceData.Append("|AddressKnown:" + bu.PrimaryAddressKnown.ToString());
              if (bu.Info != null)
              {
                DeviceData.Append("|IdNo:" + bu.Info.MeterNumber);
                DeviceData.Append("|Manufacturer:" + bu.Info.ManufacturerCode.ToString());
                DeviceData.Append("|Generation:" + bu.Info.Version.ToString());
                DeviceData.Append("|Medium:" + bu.Info.Medium.ToString());
              }
            }
            else if (this.MyBus.MyDeviceList.MyBus.MyBusMode == BusMode.WaveFlowRadio)
              this.AddWaveFlowInfo(DeviceData, index);
          }
          busSettings.Add("Device" + index.ToString(), DeviceData.ToString());
        }
      }
      this.MyBus.MyCom.GetCommParameter(ref this.MyBus.MyBusInfo.CommParam);
      for (int index = 0; index < this.MyBus.MyBusInfo.CommParam.Count; index += 2)
      {
        string key = (string) this.MyBus.MyBusInfo.CommParam[index];
        if (!busSettings.ContainsKey(key))
          busSettings.Add(key, (string) this.MyBus.MyBusInfo.CommParam[index + 1]);
      }
      return busSettings;
    }

    private void AddWaveFlowInfo(StringBuilder DeviceData, int i)
    {
      if (this.MyBus.MyDeviceList != null)
        return;
      WaveFlowDevice bu = this.MyBus.MyDeviceList.bus[i] as WaveFlowDevice;
      if (bu.Info == null)
        return;
      DeviceData.Append("|IdNo:" + bu.Info.MeterNumber);
      DeviceData.Append("|Manufacturer:" + bu.Info.ManufacturerCode.ToString());
      DeviceData.Append("|Generation:" + bu.Info.Version.ToString());
      DeviceData.Append("|Medium:" + bu.Info.Medium.ToString());
    }

    internal void SetAsyncComSettings(SortedList<string, string> settings)
    {
      if (this.MyBus.MyDeviceList != null)
        this.MyBus.MyDeviceList.DeleteBusList();
      if (settings.ContainsKey(AsyncComSettings.Port.ToString()))
      {
        SortedList<string, string> busSettings = this.GetBusSettings();
        if (busSettings != null && busSettings.ContainsKey(AsyncComSettings.Port.ToString()) && busSettings[AsyncComSettings.Port.ToString()] != settings[AsyncComSettings.Port.ToString()])
          this.MyBus.ComClose();
      }
      ArrayList ParameterList = new ArrayList();
      for (int index = 0; index < settings.Count; ++index)
      {
        string key = settings.Keys[index];
        ParameterList.Add((object) key);
        ParameterList.Add((object) settings.Values[index]);
      }
      this.MyBus.MyCom.SetCommParameter(ParameterList);
    }

    internal void SetAsyncComSettings(SortedList<AsyncComSettings, object> settings)
    {
      SortedList<string, string> busSettings = this.GetBusSettings();
      if (this.MyBus.MyDeviceList != null)
        this.MyBus.MyDeviceList.DeleteBusList();
      AsyncComSettings asyncComSettings;
      if (settings.ContainsKey(AsyncComSettings.Port))
      {
        SortedList<string, string> sortedList = busSettings;
        asyncComSettings = AsyncComSettings.Port;
        string key = asyncComSettings.ToString();
        if (sortedList[key].ToString() != settings[AsyncComSettings.Port].ToString())
          this.MyBus.ComClose();
      }
      ArrayList ParameterList = new ArrayList();
      for (int index = 0; index < settings.Count; ++index)
      {
        asyncComSettings = settings.Keys[index];
        string str = asyncComSettings.ToString();
        ParameterList.Add((object) str);
        ParameterList.Add(settings.Values[index]);
      }
      this.MyBus.MyCom.SetCommParameter(ParameterList);
    }
  }
}


--- BusRes.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.BusRes
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;

#nullable disable
namespace DeviceCollector
{
  [GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
  [DebuggerNonUserCode]
  [CompilerGenerated]
  internal class BusRes
  {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;

    internal BusRes()
    {
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static ResourceManager ResourceManager
    {
      get
      {
        if (BusRes.resourceMan == null)
          BusRes.resourceMan = new ResourceManager("DeviceCollector.BusRes", typeof (BusRes).Assembly);
        return BusRes.resourceMan;
      }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    internal static CultureInfo Culture
    {
      get => BusRes.resourceCulture;
      set => BusRes.resourceCulture = value;
    }

    internal static string _1 => BusRes.ResourceManager.GetString("1", BusRes.resourceCulture);

    internal static string _10 => BusRes.ResourceManager.GetString("10", BusRes.resourceCulture);

    internal static string _11 => BusRes.ResourceManager.GetString("11", BusRes.resourceCulture);

    internal static string _12 => BusRes.ResourceManager.GetString("12", BusRes.resourceCulture);

    internal static string _13 => BusRes.ResourceManager.GetString("13", BusRes.resourceCulture);

    internal static string _2 => BusRes.ResourceManager.GetString("2", BusRes.resourceCulture);

    internal static string _3 => BusRes.ResourceManager.GetString("3", BusRes.resourceCulture);

    internal static string _4 => BusRes.ResourceManager.GetString("4", BusRes.resourceCulture);

    internal static string _5 => BusRes.ResourceManager.GetString("5", BusRes.resourceCulture);

    internal static string _6 => BusRes.ResourceManager.GetString("6", BusRes.resourceCulture);

    internal static string _7 => BusRes.ResourceManager.GetString("7", BusRes.resourceCulture);

    internal static string _8 => BusRes.ResourceManager.GetString("8", BusRes.resourceCulture);

    internal static string _9 => BusRes.ResourceManager.GetString("9", BusRes.resourceCulture);

    internal static string AD_CONVERTER
    {
      get => BusRes.ResourceManager.GetString(nameof (AD_CONVERTER), BusRes.resourceCulture);
    }

    internal static string AsyncComIsLocked
    {
      get => BusRes.ResourceManager.GetString(nameof (AsyncComIsLocked), BusRes.resourceCulture);
    }

    internal static string BUS_SYSTEM
    {
      get => BusRes.ResourceManager.GetString(nameof (BUS_SYSTEM), BusRes.resourceCulture);
    }

    internal static string COLD_WATER
    {
      get => BusRes.ResourceManager.GetString(nameof (COLD_WATER), BusRes.resourceCulture);
    }

    internal static string COMPRESSED_AIR
    {
      get => BusRes.ResourceManager.GetString(nameof (COMPRESSED_AIR), BusRes.resourceCulture);
    }

    internal static string COOL_COLD
    {
      get => BusRes.ResourceManager.GetString(nameof (COOL_COLD), BusRes.resourceCulture);
    }

    internal static string COOL_WARM
    {
      get => BusRes.ResourceManager.GetString(nameof (COOL_WARM), BusRes.resourceCulture);
    }

    internal static string ELECTRICITY
    {
      get => BusRes.ResourceManager.GetString(nameof (ELECTRICITY), BusRes.resourceCulture);
    }

    internal static string ExcelConnectError
    {
      get => BusRes.ResourceManager.GetString(nameof (ExcelConnectError), BusRes.resourceCulture);
    }

    internal static string GAS
    {
      get => BusRes.ResourceManager.GetString(nameof (GAS), BusRes.resourceCulture);
    }

    internal static string HCA
    {
      get => BusRes.ResourceManager.GetString(nameof (HCA), BusRes.resourceCulture);
    }

    internal static string HEAT_AND_COOL
    {
      get => BusRes.ResourceManager.GetString(nameof (HEAT_AND_COOL), BusRes.resourceCulture);
    }

    internal static string HEAT_COLD
    {
      get => BusRes.ResourceManager.GetString(nameof (HEAT_COLD), BusRes.resourceCulture);
    }

    internal static string HEAT_WARM
    {
      get => BusRes.ResourceManager.GetString(nameof (HEAT_WARM), BusRes.resourceCulture);
    }

    internal static string HOT_AND_COLD_WATER
    {
      get => BusRes.ResourceManager.GetString(nameof (HOT_AND_COLD_WATER), BusRes.resourceCulture);
    }

    internal static string HOT_WATER
    {
      get => BusRes.ResourceManager.GetString(nameof (HOT_WATER), BusRes.resourceCulture);
    }

    internal static string HOT_WATER_90
    {
      get => BusRes.ResourceManager.GetString(nameof (HOT_WATER_90), BusRes.resourceCulture);
    }

    internal static string NoVersionCommandAvailable
    {
      get
      {
        return BusRes.ResourceManager.GetString(nameof (NoVersionCommandAvailable), BusRes.resourceCulture);
      }
    }

    internal static string OIL
    {
      get => BusRes.ResourceManager.GetString(nameof (OIL), BusRes.resourceCulture);
    }

    internal static string OTHER
    {
      get => BusRes.ResourceManager.GetString(nameof (OTHER), BusRes.resourceCulture);
    }

    internal static string PRESSURE
    {
      get => BusRes.ResourceManager.GetString(nameof (PRESSURE), BusRes.resourceCulture);
    }

    internal static string PrimaryAddressSearch
    {
      get
      {
        return BusRes.ResourceManager.GetString(nameof (PrimaryAddressSearch), BusRes.resourceCulture);
      }
    }

    internal static string ReadBusCollection
    {
      get => BusRes.ResourceManager.GetString(nameof (ReadBusCollection), BusRes.resourceCulture);
    }

    internal static string STEAM
    {
      get => BusRes.ResourceManager.GetString(nameof (STEAM), BusRes.resourceCulture);
    }

    internal static string UNKNOWN
    {
      get => BusRes.ResourceManager.GetString(nameof (UNKNOWN), BusRes.resourceCulture);
    }

    internal static string WATER
    {
      get => BusRes.ResourceManager.GetString(nameof (WATER), BusRes.resourceCulture);
    }

    internal static string WriteBusCollection
    {
      get => BusRes.ResourceManager.GetString(nameof (WriteBusCollection), BusRes.resourceCulture);
    }
  }
}


--- BusStatusClass.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.BusStatusClass
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

#nullable disable
namespace DeviceCollector
{
  public class BusStatusClass
  {
    internal BusStatusClass.GlobalFunctionTasks GlobalFunctionTask;
    internal BusStatusClass.BusFunctionTasks BusFunctionTask;
    internal int RepeadCounter;
    internal int TransmitBlockCounter;
    internal int ReceiveBlockCounter;
    internal int ByteCounter;
    internal int TotalJobCounter;
    internal int TotalErrorCounter;
    internal int TotalTransmitBlockCounter;
    internal int TotalReceiveBlockCounter;
    private DeviceCollectorFunctions MyFunctions;

    public BusStatusClass(DeviceCollectorFunctions TheFunctions) => this.MyFunctions = TheFunctions;

    internal void StartGlobalFunctionTask(
      BusStatusClass.GlobalFunctionTasks NewGlobalFunctionTask)
    {
      this.GlobalFunctionTask = NewGlobalFunctionTask;
      this.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Off);
      this.TotalErrorCounter = 0;
      this.TotalJobCounter = 0;
      this.TotalTransmitBlockCounter = 0;
      this.TotalReceiveBlockCounter = 0;
    }

    internal void StartBusFunctionTask(BusStatusClass.BusFunctionTasks NewBusFunctionTask)
    {
      ++this.TotalJobCounter;
      this.BusFunctionTask = NewBusFunctionTask;
      this.RepeadCounter = 0;
      this.TransmitBlockCounter = 0;
      this.ReceiveBlockCounter = 0;
      this.ByteCounter = 0;
    }

    internal void IncrementTransmitBlockCounter()
    {
      ++this.TransmitBlockCounter;
      ++this.TotalTransmitBlockCounter;
    }

    internal void IncrementReceiveBlockCounter()
    {
      ++this.ReceiveBlockCounter;
      ++this.TotalReceiveBlockCounter;
    }

    internal bool TestRepeat1() => this.RepeadCounter <= 1;

    internal bool TestRepeatCounter(int MaxRepeatNumber)
    {
      if (this.MyFunctions.BreakRequest || this.RepeadCounter >= MaxRepeatNumber)
        return false;
      if (this.RepeadCounter > 0)
        ++this.TotalErrorCounter;
      ++this.RepeadCounter;
      return true;
    }

    internal enum GlobalFunctionTasks
    {
      Off,
      ReadParameter,
      ScanPrimary,
      ScanSecundary,
      TestloopReadEEProm,
      TestloopWriteReadEEProm,
    }

    internal enum BusFunctionTasks
    {
      Off,
      SEND_NKE,
      REQ_UD2,
      ApplicationReset,
      SelectAllParameter,
      SetBaudrate,
      SelectDevice,
      SetPrimaryAddress,
      ResetDevice,
      ResetDeviceBaudChange,
      RunBackup,
      SetEmergencyMode,
      DeleteMeterKey,
      ReadMemoryBlock,
      WriteMemoryBlock,
      WriteBitField,
      DigitalInputsAndOutputs,
      ReadVersion,
      SetNewPin,
      TransmitRadioFrame,
      WriteBit,
      WriteNibble,
      WriteByte,
      SelectParameterList,
      Serie3Command,
      MBusConverterCommand,
      PulseDisable,
      PulseEnable,
      RadioDisable,
      RadioNormal,
      StartVolumeMonitor,
      StopVolumeMonitor,
      RadioOOK,
      RadioPN9,
      SynchronizeAction,
      WritePulseoutQueue,
      StartDepassivation,
      RadioReceive,
      UpdateMode,
      WriteDueDateMonth,
      EventLogClear,
      SystemLogClear,
      RemovalFlagClear,
      TamperFlagClear,
      BackflowFlagClear,
      LeakFlagClear,
      BlockFlagClear,
      OversizeFlagClear,
      UndersizeFlagClear,
      BurstFlagClear,
      LogClearAndDisableLog,
      ReadMeterValue,
      WriteMeterValue,
      LogEnable,
      LogDisable,
      Dummy,
    }
  }
}


--- DeviceCollectorFunctions.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.DeviceCollectorFunctions
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using HandlerLib;
using NLog;
using StartupLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Resources;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZENNER.CommonLibrary;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class DeviceCollectorFunctions : 
    IDeviceCollector,
    I_ZR_Component,
    ICancelable,
    IReadoutConfig,
    IWindow
  {
    internal static Logger logger = LogManager.GetLogger(nameof (DeviceCollectorFunctions));
    public const string MyComponentName = "DeviceCollector";
    public const string SerialBusDateFormat = "dd.MM.yyyy";
    public const string SerialBusDateTimeFormat = "dd.MM.yyyy HH:mm:ss";
    internal static ResourceManager SerialBusMessage = new ResourceManager("DeviceCollector.BusRes", typeof (DeviceCollectorFunctions).Assembly);
    private static ByteField EmptyByteField = new ByteField(0);
    private static long JobCounter = 0;
    private bool _breakRequest = false;
    internal bool DeviceIsModified = false;
    internal bool MinoHeadCombiConnected = false;
    internal DeviceCollectorWindow BusWindow;
    internal WavePortConnector MyWavePort;
    internal Thread BusThread;
    private int connectionProfileID = -1;
    public DeviceList MyDeviceList;
    public IAsyncFunctions MyCom;
    internal Receiver MyReceiver;
    internal DeviceCollectorFunctions.Functions RunningFunction;
    internal BusStatusClass BusState;
    internal int WorkCounter;
    internal DeviceInfo TempDeviceInfo = new DeviceInfo();
    internal BusInfo MyBusInfo;
    private const int MaxDataBytes = 250;
    private RadioReader radioReader;
    private EDC edcHandler;
    private PDC pdcHandler;
    private SmokeDetector smokeDetectorHandler;
    public byte[] DataBytes = new byte[250];
    internal bool IsPluginObject = false;
    private bool readoutConfigByBusFile = false;
    private bool autosave = false;
    private string MessageBaseInfo = string.Empty;
    private ConfigList ConfigList;

    public event EventHandler<BusDevice> OnDeviceListChanged;

    public event EventHandlerEx<int> OnProgress;

    public event EventHandlerEx<string> OnProgressMessage;

    public bool BreakRequest
    {
      get => this._breakRequest;
      set
      {
        this._breakRequest = value;
        if (this.MyCom == null)
          return;
        this.MyCom.BreakRequest = this._breakRequest;
      }
    }

    public int ConnectionProfileID => this.connectionProfileID;

    public bool ReadoutConfigByBusFile
    {
      get => this.readoutConfigByBusFile;
      set
      {
        this.readoutConfigByBusFile = value;
        if (this.readoutConfigByBusFile)
          this.DisableConfigList();
        (this.MyCom as AsyncFunctions).ReadoutConfigByBusFile = this.readoutConfigByBusFile;
      }
    }

    public bool Autosave
    {
      get => this.autosave;
      set
      {
        this.autosave = value;
        if (this.autosave)
          this.ReadoutConfigByBusFile = true;
        if (!this.IsPluginObject)
          return;
        PlugInLoader.GmmConfiguration.SetOrUpdateValue("DeviceCollector", nameof (Autosave), this.autosave.ToString());
      }
    }

    public bool DisableBusWriteOnDispose
    {
      get => !this.autosave;
      set => this.Autosave = !value;
    }

    public string MinomatV4_Challenge { get; set; }

    public string MinomatV4_DurationDay { get; set; }

    public string MinomatV4_DurationDueDate { get; set; }

    public string MinomatV4_DurationMonth { get; set; }

    public string MinomatV4_DurationQuarterHour { get; set; }

    public string MinomatV4_GSM_ID { get; set; }

    public string MinomatV4_MinolID { get; set; }

    public string MinomatV4_SessionKey { get; set; }

    public string MinomatV4_SourceAddress { get; set; }

    public bool SendFirstApplicationReset { get; set; }

    public bool UseREQ_UD2_5B { get; set; }

    public bool SendFirstSND_NKE { get; set; }

    public bool IsMultiTelegrammEnabled { get; set; }

    public IAsyncFunctions AsyncCom => this.MyCom;

    internal ZR_ClassLibrary.BusMode MyBusMode { get; set; }

    public PointToPointDevices? SelectedDeviceMBusType
    {
      get
      {
        ZR_ClassLibrary.BusMode baseMode = this.GetBaseMode();
        if (baseMode != ZR_ClassLibrary.BusMode.MBus && baseMode != 0)
          return new PointToPointDevices?();
        BusDevice selectedDevice = this.GetSelectedDevice();
        if (selectedDevice == null)
          return new PointToPointDevices?();
        if (selectedDevice.DeviceType == DeviceTypes.TemperatureSensor)
          return new PointToPointDevices?(PointToPointDevices.TemperatureSensor);
        if (selectedDevice.DeviceType == DeviceTypes.HumiditySensor)
          return new PointToPointDevices?(PointToPointDevices.HumiditySensor);
        switch (selectedDevice)
        {
          case EDC _:
            return new PointToPointDevices?(PointToPointDevices.EDC);
          case PDC _:
            return new PointToPointDevices?(PointToPointDevices.PDC);
          case Serie3MBus _:
            return new PointToPointDevices?(PointToPointDevices.ZR_Serie3);
          case Serie2MBus _:
            return new PointToPointDevices?(PointToPointDevices.ZR_Serie2);
          case Serie1MBus _:
            return new PointToPointDevices?(PointToPointDevices.ZR_Serie1);
          case MBusDevice _:
            return new PointToPointDevices?(PointToPointDevices.MBus);
          default:
            throw new NotImplementedException();
        }
      }
      set
      {
        if (!value.HasValue)
          throw new NotSupportedException();
        switch (value.Value)
        {
          case PointToPointDevices.MBus:
            if (this.IsSelectedDevice(DeviceTypes.MBus) || this.GetSelectedDevice() != null && !this.DeleteSelectedDevice() || this.AddDevice(DeviceTypes.MBus, 0))
              break;
            break;
          case PointToPointDevices.ZR_Serie1:
            if (this.IsSelectedDevice(DeviceTypes.ZR_Serie1) || this.GetSelectedDevice() != null && !this.DeleteSelectedDevice() || this.AddDevice(DeviceTypes.ZR_Serie1, 0))
              break;
            break;
          case PointToPointDevices.ZR_Serie2:
            if (this.IsSelectedDevice(DeviceTypes.ZR_Serie2) || this.GetSelectedDevice() != null && !this.DeleteSelectedDevice() || this.AddDevice(DeviceTypes.ZR_Serie2, 0))
              break;
            break;
          case PointToPointDevices.ZR_Serie3:
            if (this.IsSelectedDevice(DeviceTypes.ZR_Serie3) || this.GetSelectedDevice() != null && !this.DeleteSelectedDevice() || this.AddDevice(DeviceTypes.ZR_Serie3, 0))
              break;
            break;
          case PointToPointDevices.EDC:
            if (this.IsSelectedDevice(DeviceTypes.EDC) || this.GetSelectedDevice() != null && !this.DeleteSelectedDevice() || this.AddDevice(DeviceTypes.EDC, 0))
              break;
            break;
          case PointToPointDevices.PDC:
            if (this.IsSelectedDevice(DeviceTypes.PDC) || this.GetSelectedDevice() != null && !this.DeleteSelectedDevice() || this.AddDevice(DeviceTypes.PDC, 0))
              break;
            break;
          case PointToPointDevices.TemperatureSensor:
            if (this.IsSelectedDevice(DeviceTypes.TemperatureSensor) || this.GetSelectedDevice() != null && !this.DeleteSelectedDevice() || this.AddDevice(DeviceTypes.TemperatureSensor, 0))
              break;
            break;
          case PointToPointDevices.HumiditySensor:
            if (this.IsSelectedDevice(DeviceTypes.HumiditySensor) || this.GetSelectedDevice() != null && !this.DeleteSelectedDevice() || this.AddDevice(DeviceTypes.HumiditySensor, 0))
              break;
            break;
          default:
            throw new NotImplementedException();
        }
      }
    }

    internal string DaKonId { get; set; }

    internal DateTime ReadFromTime { get; set; }

    internal DateTime ReadToTime { get; set; }

    internal string Password { get; set; }

    public int MaxRequestRepeat { get; set; }

    internal int ScanStartAddress { get; set; }

    internal string ScanStartSerialnumber { get; set; }

    internal int OrganizeStartAddress { get; set; }

    internal int CycleTime { get; set; }

    internal bool OnlySecondaryAddressing { get; set; }

    internal bool FastSecondaryAddressing { get; set; }

    internal bool KeepExistingDestinationAddress { get; set; }

    internal bool ChangeInterfaceBaudrateToo { get; set; }

    internal bool UseExternalKeyForReading { get; set; }

    internal bool BeepSignalForReadResult { get; set; }

    internal bool LogToFileEnabled { get; set; }

    internal string LogFilePath { get; set; }

    public RadioReader RadioReader
    {
      get
      {
        this.GetDeviceCollectorSettingsList();
        if (this.radioReader == null)
          this.radioReader = new RadioReader(this);
        return this.radioReader;
      }
    }

    public SmokeDetector SmokeDetectorHandler
    {
      get
      {
        if (this.smokeDetectorHandler == null)
          this.smokeDetectorHandler = new SmokeDetector(this);
        return this.smokeDetectorHandler;
      }
    }

    public EDC EDCHandler
    {
      get
      {
        if (this.edcHandler == null)
          this.edcHandler = new EDC(this);
        return this.edcHandler;
      }
    }

    public PDC PDCHandler
    {
      get
      {
        if (this.pdcHandler == null)
          this.pdcHandler = new PDC(this);
        return this.pdcHandler;
      }
    }

    internal DeviceCollectorFunctions()
    {
      this.IsPluginObject = true;
      this.BaseConstructor((IAsyncFunctions) null);
      string str = PlugInLoader.GmmConfiguration.GetValue("DeviceCollector", nameof (Autosave));
      if (!string.IsNullOrEmpty(str))
        this.Autosave = bool.Parse(str);
      this.MyBusInfo = new BusInfo(this, true, this.autosave);
    }

    public DeviceCollectorFunctions(IAsyncFunctions SpecialAsyncCom)
    {
      this.BaseConstructor(SpecialAsyncCom);
      this.MyBusInfo = new BusInfo(this, true, false);
    }

    public DeviceCollectorFunctions(IAsyncFunctions asyncCom, bool useFileBusSettings)
    {
      this.BaseConstructor(asyncCom);
      this.ReadoutConfigByBusFile = useFileBusSettings;
      this.MyBusInfo = new BusInfo(this, true, this.ReadoutConfigByBusFile);
      if (this.MyBusInfo == null)
        return;
      this.MyCom.SetCommParameter(this.MyBusInfo.CommParam);
      this.SetDeviceCollectorSettings(this.MyBusInfo.ReadoutSettingsList);
    }

    public DeviceCollectorFunctions(
      IAsyncFunctions SpecialAsyncCom,
      DeviceCollectorFunctions.Initialise init)
    {
      this.BaseConstructor(SpecialAsyncCom);
      this.ReadoutConfigByBusFile = true;
      this.MyBusInfo = init != DeviceCollectorFunctions.Initialise.BusInfo && init != DeviceCollectorFunctions.Initialise.Both ? new BusInfo(this) : new BusInfo(this, false, true);
      if (this.MyBusInfo != null)
        this.SetDeviceCollectorSettings(this.MyBusInfo.ReadoutSettingsList);
      if (init != DeviceCollectorFunctions.Initialise.AsyncCom && init != DeviceCollectorFunctions.Initialise.Both)
        return;
      this.MyCom.SetCommParameter(this.MyBusInfo.CommParam);
    }

    private void BaseConstructor(IAsyncFunctions SpecialAsyncCom)
    {
      this.SetDefaultSettings();
      this.RunningFunction = DeviceCollectorFunctions.Functions.NoFunction;
      this.MyReceiver = (Receiver) null;
      this.BusState = new BusStatusClass(this);
      this.BreakRequest = false;
      this.IsMultiTelegrammEnabled = true;
      this.SendFirstSND_NKE = false;
      this.UseREQ_UD2_5B = true;
      this.SendFirstApplicationReset = false;
      if (SpecialAsyncCom == null)
      {
        if (!this.IsPluginObject)
          throw new Exception("AsyncCom object is not available");
        this.MyCom = (IAsyncFunctions) PlugInLoader.GetPlugIn("AsyncCom").GetPluginInfo().Interface;
      }
      else
        this.MyCom = SpecialAsyncCom;
      this.MyDeviceList = this.GetDeviceListForBusMode();
      this.MyCom.OnAsyncComMessage += new EventHandler<GMM_EventArgs>(this.AsyncComMessage);
    }

    public void Dispose()
    {
      this.pdcHandler = (PDC) null;
      this.edcHandler = (EDC) null;
      if (this.radioReader != null)
        this.radioReader.Close();
      this.smokeDetectorHandler = (SmokeDetector) null;
      this.radioReader = (RadioReader) null;
    }

    public void RaiseEventOnDeviceListChanged(DeviceList sender, BusDevice e)
    {
      if (this.OnDeviceListChanged == null)
        return;
      this.OnDeviceListChanged((object) sender, e);
    }

    public void SetDefaultSettings()
    {
      this.MyBusMode = ZR_ClassLibrary.BusMode.MBusPointToPoint;
      this.ReadFromTime = new DateTime(1900, 1, 1);
      this.ReadToTime = SystemValues.DateTimeNow.AddYears(1);
      this.DaKonId = string.Empty;
      this.Password = string.Empty;
      this.LogFilePath = string.Empty;
      this.ScanStartSerialnumber = "fffffff0";
      this.OrganizeStartAddress = 1;
      this.MaxRequestRepeat = 3;
      this.ScanStartAddress = 0;
      this.CycleTime = 5;
      this.OnlySecondaryAddressing = false;
      this.FastSecondaryAddressing = false;
      this.ChangeInterfaceBaudrateToo = false;
      this.UseExternalKeyForReading = false;
      this.BeepSignalForReadResult = false;
      this.KeepExistingDestinationAddress = false;
      this.LogToFileEnabled = false;
      this.IsMultiTelegrammEnabled = true;
      this.UseREQ_UD2_5B = true;
      this.SendFirstApplicationReset = false;
      this.SendFirstSND_NKE = false;
    }

    public bool SetDeviceCollectorSettings(
      SortedList<DeviceCollectorSettings, object> settings)
    {
      return this.ChangeDeviceCollectorSettings(settings);
    }

    public bool SetDeviceCollectorSettings(SortedList<string, string> settings)
    {
      return this.ChangeDeviceCollectorSettings(settings);
    }

    public bool SetDeviceCollectorSettings(string deviceCollectorSettings)
    {
      if (string.IsNullOrEmpty(deviceCollectorSettings))
        return false;
      string[] strArray = deviceCollectorSettings.Split(';');
      if (strArray.Length == 0)
        return false;
      SortedList<DeviceCollectorSettings, object> settings = new SortedList<DeviceCollectorSettings, object>();
      List<string> stringList = new List<string>((IEnumerable<string>) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (DeviceCollectorSettings)));
      for (int index = 0; index + 1 < strArray.Length; index += 2)
      {
        if (stringList.Contains(strArray[index]))
        {
          DeviceCollectorSettings key = (DeviceCollectorSettings) Enum.Parse(typeof (DeviceCollectorSettings), strArray[index], true);
          string str = strArray[index + 1];
          if (!settings.ContainsKey(key))
            settings.Add(key, (object) str);
          else
            DeviceCollectorFunctions.logger.Error("Multiple DeviceCollectorSettings detected: {0}={1} and {2}={3}", new object[4]
            {
              (object) key,
              (object) strArray[index + 1],
              (object) key,
              settings[key]
            });
        }
      }
      return this.SetDeviceCollectorSettings(settings);
    }

    public bool ChangeDeviceCollectorSettings(SortedList<string, string> settings)
    {
      if (settings == null)
        throw new ArgumentNullException(nameof (settings));
      List<string> stringList = new List<string>((IEnumerable<string>) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (DeviceCollectorSettings)));
      SortedList<DeviceCollectorSettings, object> settings1 = new SortedList<DeviceCollectorSettings, object>();
      int index = settings.IndexOfKey("ConnectionProfileID");
      if (index >= 0)
        this.connectionProfileID = int.Parse(settings.Values[index]);
      foreach (KeyValuePair<string, string> setting in settings)
      {
        if (stringList.Contains(setting.Key))
        {
          DeviceCollectorSettings key = (DeviceCollectorSettings) Enum.Parse(typeof (DeviceCollectorSettings), setting.Key, true);
          string str = setting.Value;
          settings1.Add(key, (object) str);
        }
      }
      return this.ChangeDeviceCollectorSettings(settings1);
    }

    public bool ChangeDeviceCollectorSettings(
      SortedList<DeviceCollectorSettings, object> settings)
    {
      if (settings == null)
        return true;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (KeyValuePair<DeviceCollectorSettings, object> setting in settings)
      {
        stringBuilder.Append((object) setting.Key);
        stringBuilder.Append("=");
        stringBuilder.Append(setting.Value);
        stringBuilder.Append(ZR_Constants.SystemNewLine);
      }
      DeviceCollectorFunctions.logger.Info("Set DeviceCollectorSettings: " + stringBuilder.ToString());
      try
      {
        if (settings.ContainsKey(DeviceCollectorSettings.BusMode))
          this.SetBaseMode((ZR_ClassLibrary.BusMode) Enum.Parse(typeof (ZR_ClassLibrary.BusMode), settings[DeviceCollectorSettings.BusMode].ToString(), true));
        if (settings.ContainsKey(DeviceCollectorSettings.FromTime))
          this.ReadFromTime = ZR_ClassLibrary.Util.ToDateTime(settings[DeviceCollectorSettings.FromTime]);
        if (settings.ContainsKey(DeviceCollectorSettings.ToTime))
          this.ReadToTime = ZR_ClassLibrary.Util.ToDateTime(settings[DeviceCollectorSettings.ToTime]);
        if (settings.ContainsKey(DeviceCollectorSettings.DaKonId))
          this.DaKonId = ZR_ClassLibrary.Util.ToString(settings[DeviceCollectorSettings.DaKonId]).Trim();
        if (settings.ContainsKey(DeviceCollectorSettings.Password))
          this.Password = ZR_ClassLibrary.Util.ToString(settings[DeviceCollectorSettings.Password]);
        if (settings.ContainsKey(DeviceCollectorSettings.LogFilePath))
          this.LogFilePath = ZR_ClassLibrary.Util.ToString(settings[DeviceCollectorSettings.LogFilePath]);
        if (settings.ContainsKey(DeviceCollectorSettings.ScanStartSerialnumber))
          this.ScanStartSerialnumber = ZR_ClassLibrary.Util.ToString(settings[DeviceCollectorSettings.ScanStartSerialnumber]);
        if (settings.ContainsKey(DeviceCollectorSettings.OrganizeStartAddress))
          this.OrganizeStartAddress = ZR_ClassLibrary.Util.ToInteger(settings[DeviceCollectorSettings.OrganizeStartAddress]);
        if (settings.ContainsKey(DeviceCollectorSettings.MaxRequestRepeat))
          this.MaxRequestRepeat = ZR_ClassLibrary.Util.ToInteger(settings[DeviceCollectorSettings.MaxRequestRepeat]);
        if (settings.ContainsKey(DeviceCollectorSettings.ScanStartAddress))
          this.ScanStartAddress = ZR_ClassLibrary.Util.ToInteger(settings[DeviceCollectorSettings.ScanStartAddress]);
        if (settings.ContainsKey(DeviceCollectorSettings.CycleTime))
          this.CycleTime = ZR_ClassLibrary.Util.ToInteger(settings[DeviceCollectorSettings.CycleTime]);
        if (settings.ContainsKey(DeviceCollectorSettings.OnlySecondaryAddressing))
          this.OnlySecondaryAddressing = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.OnlySecondaryAddressing]);
        if (settings.ContainsKey(DeviceCollectorSettings.FastSecondaryAddressing))
          this.FastSecondaryAddressing = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.FastSecondaryAddressing]);
        if (settings.ContainsKey(DeviceCollectorSettings.ChangeInterfaceBaudrateToo))
          this.ChangeInterfaceBaudrateToo = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.ChangeInterfaceBaudrateToo]);
        if (settings.ContainsKey(DeviceCollectorSettings.UseExternalKeyForReading))
          this.UseExternalKeyForReading = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.UseExternalKeyForReading]);
        if (settings.ContainsKey(DeviceCollectorSettings.BeepSignalOnReadResult))
          this.BeepSignalForReadResult = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.BeepSignalOnReadResult]);
        if (settings.ContainsKey(DeviceCollectorSettings.KeepExistingDestinationAddress))
          this.KeepExistingDestinationAddress = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.KeepExistingDestinationAddress]);
        if (settings.ContainsKey(DeviceCollectorSettings.LogToFileEnabled))
          this.LogToFileEnabled = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.LogToFileEnabled]);
        if (settings.ContainsKey(DeviceCollectorSettings.IsMultiTelegrammEnabled))
          this.IsMultiTelegrammEnabled = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.IsMultiTelegrammEnabled]);
        if (settings.ContainsKey(DeviceCollectorSettings.UseREQ_UD2_5B))
          this.UseREQ_UD2_5B = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.UseREQ_UD2_5B]);
        if (settings.ContainsKey(DeviceCollectorSettings.SendFirstApplicationReset))
          this.SendFirstApplicationReset = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.SendFirstApplicationReset]);
        if (settings.ContainsKey(DeviceCollectorSettings.SendFirstSND_NKE))
          this.SendFirstSND_NKE = ZR_ClassLibrary.Util.ToBoolean(settings[DeviceCollectorSettings.SendFirstSND_NKE]);
        if (settings.ContainsKey(DeviceCollectorSettings.MinomatV4_Challenge) && settings[DeviceCollectorSettings.MinomatV4_Challenge] != null)
          this.MinomatV4_Challenge = settings[DeviceCollectorSettings.MinomatV4_Challenge].ToString();
        if (settings.ContainsKey(DeviceCollectorSettings.MinomatV4_DurationDay) && settings[DeviceCollectorSettings.MinomatV4_DurationDay] != null)
          this.MinomatV4_DurationDay = settings[DeviceCollectorSettings.MinomatV4_DurationDay].ToString();
        if (settings.ContainsKey(DeviceCollectorSettings.MinomatV4_DurationDueDate) && settings[DeviceCollectorSettings.MinomatV4_DurationDueDate] != null)
          this.MinomatV4_DurationDueDate = settings[DeviceCollectorSettings.MinomatV4_DurationDueDate].ToString();
        if (settings.ContainsKey(DeviceCollectorSettings.MinomatV4_DurationMonth) && settings[DeviceCollectorSettings.MinomatV4_DurationMonth] != null)
          this.MinomatV4_DurationMonth = settings[DeviceCollectorSettings.MinomatV4_DurationMonth].ToString();
        if (settings.ContainsKey(DeviceCollectorSettings.MinomatV4_DurationQuarterHour) && settings[DeviceCollectorSettings.MinomatV4_DurationQuarterHour] != null)
          this.MinomatV4_DurationQuarterHour = settings[DeviceCollectorSettings.MinomatV4_DurationQuarterHour].ToString();
        if (settings.ContainsKey(DeviceCollectorSettings.MinomatV4_GSM_ID) && settings[DeviceCollectorSettings.MinomatV4_GSM_ID] != null)
          this.MinomatV4_GSM_ID = settings[DeviceCollectorSettings.MinomatV4_GSM_ID].ToString();
        if (settings.ContainsKey(DeviceCollectorSettings.MinomatV4_MinolID) && settings[DeviceCollectorSettings.MinomatV4_MinolID] != null)
          this.MinomatV4_MinolID = settings[DeviceCollectorSettings.MinomatV4_MinolID].ToString();
        if (settings.ContainsKey(DeviceCollectorSettings.MinomatV4_SessionKey) && settings[DeviceCollectorSettings.MinomatV4_SessionKey] != null)
          this.MinomatV4_SessionKey = settings[DeviceCollectorSettings.MinomatV4_SessionKey].ToString();
        if (settings.ContainsKey(DeviceCollectorSettings.MinomatV4_SourceAddress) && settings[DeviceCollectorSettings.MinomatV4_SourceAddress] != null)
          this.MinomatV4_SourceAddress = settings[DeviceCollectorSettings.MinomatV4_SourceAddress].ToString();
        if (settings.ContainsKey(DeviceCollectorSettings.SelectedDeviceMBusType))
        {
          ZR_ClassLibrary.BusMode myBusMode = this.MyBusMode;
          if (myBusMode == ZR_ClassLibrary.BusMode.MBus || myBusMode == ZR_ClassLibrary.BusMode.MBusPointToPoint)
          {
            string str = settings[DeviceCollectorSettings.SelectedDeviceMBusType].ToString();
            if (!string.IsNullOrEmpty(str) && Enum.IsDefined(typeof (PointToPointDevices), (object) str))
              this.SelectedDeviceMBusType = new PointToPointDevices?((PointToPointDevices) Enum.Parse(typeof (PointToPointDevices), str, true));
          }
        }
        if (settings.ContainsKey(DeviceCollectorSettings.PrimaryAddress) && this.GetBaseMode() == ZR_ClassLibrary.BusMode.MBus)
        {
          BusDevice selectedDevice = this.GetSelectedDevice();
          if (selectedDevice != null && selectedDevice is MBusDevice)
            selectedDevice.Info.A_Field = (byte) ZR_ClassLibrary.Util.ToInteger(settings[DeviceCollectorSettings.PrimaryAddress]);
        }
        if (settings.ContainsKey(DeviceCollectorSettings.SecondaryAddress))
        {
          if (this.GetBaseMode() == ZR_ClassLibrary.BusMode.MBus)
          {
            BusDevice selectedDevice = this.GetSelectedDevice();
            if (selectedDevice != null && selectedDevice is MBusDevice)
            {
              selectedDevice.Info.MeterNumberOriginal = ZR_ClassLibrary.Util.ConvertUnt32ToBcdUInt32((uint) ZR_ClassLibrary.Util.ToInteger(settings[DeviceCollectorSettings.SecondaryAddress]));
              selectedDevice.Info.MeterNumber = selectedDevice.Info.MeterNumberOriginal.ToString("x08");
            }
          }
        }
      }
      catch (Exception ex)
      {
        string str = "Can not set all readout settings! Error: " + ex.Message;
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, str);
        DeviceCollectorFunctions.logger.Error(ex, str);
      }
      return true;
    }

    public SortedList<DeviceCollectorSettings, object> GetDeviceCollectorSettings()
    {
      return new SortedList<DeviceCollectorSettings, object>()
      {
        {
          DeviceCollectorSettings.BusMode,
          (object) this.MyBusMode
        },
        {
          DeviceCollectorSettings.FromTime,
          (object) this.ReadFromTime
        },
        {
          DeviceCollectorSettings.ToTime,
          (object) this.ReadToTime
        },
        {
          DeviceCollectorSettings.DaKonId,
          (object) this.DaKonId
        },
        {
          DeviceCollectorSettings.Password,
          (object) this.Password
        },
        {
          DeviceCollectorSettings.LogFilePath,
          (object) this.LogFilePath
        },
        {
          DeviceCollectorSettings.ScanStartSerialnumber,
          (object) this.ScanStartSerialnumber
        },
        {
          DeviceCollectorSettings.OrganizeStartAddress,
          (object) this.OrganizeStartAddress
        },
        {
          DeviceCollectorSettings.MaxRequestRepeat,
          (object) this.MaxRequestRepeat
        },
        {
          DeviceCollectorSettings.ScanStartAddress,
          (object) this.ScanStartAddress
        },
        {
          DeviceCollectorSettings.CycleTime,
          (object) this.CycleTime
        },
        {
          DeviceCollectorSettings.OnlySecondaryAddressing,
          (object) this.OnlySecondaryAddressing
        },
        {
          DeviceCollectorSettings.FastSecondaryAddressing,
          (object) this.FastSecondaryAddressing
        },
        {
          DeviceCollectorSettings.ChangeInterfaceBaudrateToo,
          (object) this.ChangeInterfaceBaudrateToo
        },
        {
          DeviceCollectorSettings.UseExternalKeyForReading,
          (object) this.UseExternalKeyForReading
        },
        {
          DeviceCollectorSettings.BeepSignalOnReadResult,
          (object) this.BeepSignalForReadResult
        },
        {
          DeviceCollectorSettings.KeepExistingDestinationAddress,
          (object) this.KeepExistingDestinationAddress
        },
        {
          DeviceCollectorSettings.LogToFileEnabled,
          (object) this.LogToFileEnabled
        },
        {
          DeviceCollectorSettings.IsMultiTelegrammEnabled,
          (object) this.IsMultiTelegrammEnabled
        },
        {
          DeviceCollectorSettings.UseREQ_UD2_5B,
          (object) this.UseREQ_UD2_5B
        },
        {
          DeviceCollectorSettings.SendFirstApplicationReset,
          (object) this.SendFirstApplicationReset
        },
        {
          DeviceCollectorSettings.SendFirstSND_NKE,
          (object) this.SendFirstSND_NKE
        },
        {
          DeviceCollectorSettings.SelectedDeviceMBusType,
          (object) this.SelectedDeviceMBusType
        },
        {
          DeviceCollectorSettings.MinomatV4_Challenge,
          (object) this.MinomatV4_Challenge
        },
        {
          DeviceCollectorSettings.MinomatV4_DurationDay,
          (object) this.MinomatV4_DurationDay
        },
        {
          DeviceCollectorSettings.MinomatV4_DurationDueDate,
          (object) this.MinomatV4_DurationDueDate
        },
        {
          DeviceCollectorSettings.MinomatV4_DurationMonth,
          (object) this.MinomatV4_DurationMonth
        },
        {
          DeviceCollectorSettings.MinomatV4_DurationQuarterHour,
          (object) this.MinomatV4_DurationQuarterHour
        },
        {
          DeviceCollectorSettings.MinomatV4_GSM_ID,
          (object) this.MinomatV4_GSM_ID
        },
        {
          DeviceCollectorSettings.MinomatV4_MinolID,
          (object) this.MinomatV4_MinolID
        },
        {
          DeviceCollectorSettings.MinomatV4_SessionKey,
          (object) this.MinomatV4_SessionKey
        },
        {
          DeviceCollectorSettings.MinomatV4_SourceAddress,
          (object) this.MinomatV4_SourceAddress
        }
      };
    }

    public string GetDeviceCollectorSettingsAsString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (KeyValuePair<DeviceCollectorSettings, object> collectorSetting in this.GetDeviceCollectorSettings())
      {
        if (collectorSetting.Value != null)
        {
          if (stringBuilder.Length > 0)
            stringBuilder.Append(";");
          stringBuilder.Append(collectorSetting.Key.ToString());
          stringBuilder.Append(";");
          if (collectorSetting.Value is DateTime)
            stringBuilder.Append(((DateTime) collectorSetting.Value).ToString((IFormatProvider) FixedFormates.TheFormates));
          else
            stringBuilder.Append(collectorSetting.Value.ToString());
        }
      }
      return stringBuilder.ToString();
    }

    public SortedList<string, string> GetDeviceCollectorSettingsList()
    {
      SortedList<string, string> collectorSettingsList = new SortedList<string, string>();
      foreach (KeyValuePair<DeviceCollectorSettings, object> collectorSetting in this.GetDeviceCollectorSettings())
      {
        if (collectorSetting.Value != null)
        {
          string key = collectorSetting.Key.ToString();
          string str = !(collectorSetting.Value is DateTime) ? collectorSetting.Value.ToString() : ((DateTime) collectorSetting.Value).ToString((IFormatProvider) CultureInfo.InvariantCulture);
          collectorSettingsList.Add(key, str);
        }
      }
      return collectorSettingsList;
    }

    private void AsyncComMessage(object sender, GMM_EventArgs MessageObj)
    {
      if (MessageObj.TheMessageType == GMM_EventArgs.MessageType.KeyReceived && this.UseExternalKeyForReading || this.OnMessage == null)
        return;
      this.OnMessage(sender, MessageObj);
    }

    public void RaiseProgressEvent(int progressPercentage)
    {
      this.RaiseProgressEvent(progressPercentage, string.Empty);
    }

    public void RaiseProgressEvent(int progressPercentage, string status)
    {
      if (this.OnMessage == null)
        return;
      this.OnMessage((object) this, new GMM_EventArgs(status)
      {
        TheMessageType = GMM_EventArgs.MessageType.MessageAndProgressPercentage,
        ProgressPercentage = progressPercentage
      });
    }

    public bool GetDeviceCollectorInfo(out object InfoObject)
    {
      InfoObject = (object) null;
      return this.MyDeviceList != null && this.MyDeviceList.GetDeviceCollectorInfo(out InfoObject);
    }

    public void ShowBusWindow() => this.ShowBusWindow("");

    public string ShowBusWindow(string ComponentList)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.DeviceCollector))
        return "";
      if (this.MyCom != null && this.MyCom.IsLocked && (this.BusWindow == null || this.BusWindow != null && this.MyCom.Owner != this.BusWindow.Name))
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", string.Format(DeviceCollectorFunctions.SerialBusMessage.GetString("AsyncComIsLocked"), (object) this.MyCom.Owner));
        return "GMM";
      }
      if (this.BusWindow == null)
        this.BusWindow = new DeviceCollectorWindow(this);
      this.BusWindow.InitStartMenu(ComponentList);
      int num1 = (int) this.BusWindow.ShowDialog();
      return this.BusWindow.StartComponentName;
    }

    public void GMM_Dispose()
    {
      if (this.MyDeviceList is MinomatList && ((MinomatList) this.MyDeviceList).IsConnected)
        ((MinomatList) this.MyDeviceList).DisconnectFromMinomat();
      this.ComClose();
      if (!this.ReadoutConfigByBusFile || !this.autosave)
        return;
      this.MyBusInfo.WriteBusInfoToFile();
      this.MyBusInfo.SaveBusInfoFileNameForPlugIn();
    }

    public bool ComOpen()
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.WaveFlowRadio)
      {
        this.MyCom.Close();
        return this.OpenWaveFlowRadio();
      }
      if (this.MyCom.IsOpen || this.MyCom.Transceiver != ZR_ClassLibrary.TransceiverDevice.MinoHead || this.MyBusMode != ZR_ClassLibrary.BusMode.MinomatV4 && this.MyBusMode != ZR_ClassLibrary.BusMode.MinomatV3)
        return this.MyCom.Open();
      return this.MyCom.Open() && this.MyCom.CallTransceiverFunction(TransceiverDeviceFunction.TransparentModeV3On);
    }

    public bool ComClose()
    {
      try
      {
        return this.MyBusMode == ZR_ClassLibrary.BusMode.WaveFlowRadio ? this.CloseWaveFlowRadio() : this.MyCom.Close();
      }
      catch (Exception ex)
      {
        string message = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        DeviceCollectorFunctions.logger.Error(ex, message);
        return false;
      }
    }

    public bool SetBreak() => this.MyCom.SetBreak();

    public bool ClearBreak() => this.MyCom.ClearBreak();

    public ZR_ClassLibrary.BusMode GetBaseMode() => this.MyBusMode;

    public bool SetBaseMode(ZR_ClassLibrary.BusMode NewBusMode)
    {
      if ((NewBusMode == ZR_ClassLibrary.BusMode.MinomatV2 || NewBusMode == ZR_ClassLibrary.BusMode.MinomatV3 || NewBusMode == ZR_ClassLibrary.BusMode.MinomatV4) && this.MyCom.Transceiver == ZR_ClassLibrary.TransceiverDevice.MinoHead)
        this.MyCom.Close();
      if (NewBusMode == ZR_ClassLibrary.BusMode.WaveFlowRadio)
      {
        this.CloseWaveFlowRadio();
        this.MyCom.Close();
      }
      if (this.MyBusMode == NewBusMode)
        return true;
      this.MyBusMode = NewBusMode;
      if (this.MyCom.IsOpen)
        this.MyCom.ChangeDriverSettings();
      this.MyDeviceList = this.GetDeviceListForBusMode();
      if (this.BusWindow != null)
      {
        this.BusWindow.ClearTables();
        this.BusWindow.RefreshBusInfo();
      }
      return true;
    }

    internal DeviceList GetDeviceListForBusMode()
    {
      DeviceList deviceListForBusMode;
      switch (this.MyBusMode)
      {
        case ZR_ClassLibrary.BusMode.MBusPointToPoint:
        case ZR_ClassLibrary.BusMode.MBus:
        case ZR_ClassLibrary.BusMode.MinomatV3:
        case ZR_ClassLibrary.BusMode.MinomatV4:
        case ZR_ClassLibrary.BusMode.Minol_Device:
        case ZR_ClassLibrary.BusMode.SmokeDetector:
        case ZR_ClassLibrary.BusMode.NFC:
          deviceListForBusMode = (DeviceList) new MBusList(this);
          break;
        case ZR_ClassLibrary.BusMode.WaveFlowRadio:
          deviceListForBusMode = (DeviceList) new WaveFlowList(this);
          break;
        case ZR_ClassLibrary.BusMode.MinomatV2:
          deviceListForBusMode = (DeviceList) new MinomatList(this);
          break;
        case ZR_ClassLibrary.BusMode.MinomatRadioTest:
        case ZR_ClassLibrary.BusMode.Radio2:
        case ZR_ClassLibrary.BusMode.Radio3:
        case ZR_ClassLibrary.BusMode.Radio4:
        case ZR_ClassLibrary.BusMode.wMBusS1:
        case ZR_ClassLibrary.BusMode.wMBusS1M:
        case ZR_ClassLibrary.BusMode.wMBusS2:
        case ZR_ClassLibrary.BusMode.wMBusT1:
        case ZR_ClassLibrary.BusMode.wMBusT2_meter:
        case ZR_ClassLibrary.BusMode.wMBusT2_other:
        case ZR_ClassLibrary.BusMode.wMBusC1A:
        case ZR_ClassLibrary.BusMode.wMBusC1B:
        case ZR_ClassLibrary.BusMode.Radio3_868_95_RUSSIA:
        case ZR_ClassLibrary.BusMode.RadioMS:
          deviceListForBusMode = this.MyDeviceList == null || !(this.MyDeviceList is RadioList) ? (DeviceList) new RadioList(this) : this.MyDeviceList;
          break;
        case ZR_ClassLibrary.BusMode.RelayDevice:
          deviceListForBusMode = this.MyDeviceList == null || !(this.MyDeviceList is RelayList) ? (DeviceList) new RelayList(this) : this.MyDeviceList;
          break;
        default:
          throw new NotImplementedException();
      }
      return deviceListForBusMode;
    }

    public void SetAsyncComSettings(SortedList<string, string> settings)
    {
      this.MyBusInfo.SetAsyncComSettings(settings);
    }

    public void SetAsyncComSettings(SortedList<AsyncComSettings, object> settings)
    {
      this.MyBusInfo.SetAsyncComSettings(settings);
    }

    public SortedList<string, string> GetAsyncComSettings() => this.MyBusInfo.GetBusSettings();

    public string GetAsyncComSettings(AsyncComSettings key) => this.MyBusInfo.GetBusSettings(key);

    public int SetMaxRepeat(int MaxRepeat)
    {
      int maxRequestRepeat = this.MaxRequestRepeat;
      this.MaxRequestRepeat = MaxRepeat;
      return maxRequestRepeat;
    }

    internal void SendProgress(object sender, int progress)
    {
      if (this.OnProgress == null)
        return;
      this.OnProgress(sender, progress);
    }

    internal void SendProgressMessage(object sender, string progressMessage)
    {
      if (this.OnProgressMessage == null)
        return;
      this.OnProgressMessage(sender, progressMessage);
    }

    public event EventHandler<GMM_EventArgs> OnMessage;

    internal void SendMessage(int MessageInt, GMM_EventArgs.MessageType MessageType)
    {
      if (this.OnMessage == null)
        return;
      GMM_EventArgs e = new GMM_EventArgs(this.MessageBaseInfo, MessageInt, MessageType);
      this.OnMessage((object) this, e);
      if (e.Cancel)
        this.BreakRequest = true;
    }

    internal void SendMessage(
      string MessageString,
      int MessageInt,
      GMM_EventArgs.MessageType MessageType)
    {
      if (this.OnMessage == null)
        return;
      GMM_EventArgs e = new GMM_EventArgs(this.MessageBaseInfo + MessageString, MessageInt, MessageType);
      this.OnMessage((object) this, e);
      if (e.Cancel)
        this.BreakRequest = true;
    }

    internal void SendMessage(GMM_EventArgs e)
    {
      if (!string.IsNullOrEmpty(e.EventMessage))
        DeviceCollectorFunctions.logger.Info(e.EventMessage);
      if (this.OnMessage == null)
        return;
      this.OnMessage((object) this, e);
      Application.DoEvents();
      if (e.Cancel)
        this.BreakRequest = true;
    }

    public void SetMessageInfo(string info) => this.MessageBaseInfo = info;

    public void BreakAllFunctions() => this.BreakRequest = true;

    private bool SetRunningFunction(DeviceCollectorFunctions.Functions NewFunction)
    {
      this.RunningFunction = NewFunction;
      this.WorkCounter = 0;
      ++DeviceCollectorFunctions.JobCounter;
      return true;
    }

    private bool EndRunningFunction()
    {
      this.RunningFunction = DeviceCollectorFunctions.Functions.NoFunction;
      return true;
    }

    public bool WriteBusInfo()
    {
      this.ReadoutConfigByBusFile = true;
      if (!this.MyBusInfo.WriteBusInfoToFile())
        return false;
      this.MyBusInfo.SaveBusInfoFileNameForPlugIn();
      return true;
    }

    public bool WriteBusInfo(string BusInfoName) => this.WriteBusInfo(BusInfoName, false);

    public bool WriteBusInfo(string BusInfoName, bool SetNameToDefault)
    {
      this.ReadoutConfigByBusFile = true;
      this.MyBusInfo.SetBusinfoFilename(BusInfoName);
      this.MyBusInfo.WriteBusInfoToFile();
      if (SetNameToDefault)
        this.MyBusInfo.SetBusinfoFilenameToDefault();
      this.MyBusInfo.SaveBusInfoFileNameForPlugIn();
      return true;
    }

    public bool WriteLastUsedBusInfo(string BusInfoName)
    {
      this.ReadoutConfigByBusFile = true;
      this.MyBusInfo.SetBusinfoFilename(BusInfoName);
      if (!this.MyBusInfo.WriteBusInfoToFile())
        return false;
      this.MyBusInfo.SaveBusInfoFileNameForPlugIn();
      return PlugInLoader.GmmConfiguration.WriteConfigFile();
    }

    public bool ReadBusInfo(string BusInfoName)
    {
      this.ReadoutConfigByBusFile = true;
      this.ComClose();
      return this.ReadBusInfo(BusInfoName, false);
    }

    public bool ReadBusInfo(string BusInfoName, bool SetNameToDefault)
    {
      this.ReadoutConfigByBusFile = true;
      ZR_ClassLibMessages.ClearErrors();
      this.MyDeviceList = this.GetDeviceListForBusMode();
      this.MyBusInfo = new BusInfo(this, BusInfoName, false);
      if (ZR_ClassLibMessages.GetLastError() != 0 || !this.MyCom.SetCommParameter(this.MyBusInfo.CommParam) || !this.SetDeviceCollectorSettings(this.MyBusInfo.ReadoutSettingsList))
        return false;
      if (SetNameToDefault || Path.GetExtension(this.MyBusInfo.BusInfoFilename) == ".defbus")
      {
        this.MyBusInfo.SetBusinfoFilenameToDefault();
        this.MyBusInfo.SaveBusInfoFileNameForPlugIn();
      }
      return true;
    }

    public string GetBusFilename() => this.MyBusInfo.BusInfoFilename;

    public void DeleteBusInfo()
    {
      if (this.MyDeviceList == null)
        return;
      this.MyDeviceList.DeleteBusList();
    }

    public BusDevice GetSelectedDevice()
    {
      return this.MyDeviceList == null ? (BusDevice) null : this.MyDeviceList.SelectedDevice;
    }

    public int GetIndexOfSelectedDevice()
    {
      return this.MyDeviceList == null ? -1 : this.MyDeviceList.GetIndexOfSelectedDevice();
    }

    public bool IsSelectedDevice(DeviceTypes TestType)
    {
      if (this.MyDeviceList == null || this.MyDeviceList.SelectedDevice == null)
        return false;
      switch (TestType)
      {
        case DeviceTypes.MBus:
          if (this.MyDeviceList.SelectedDevice is MBusDevice)
            return true;
          break;
        case DeviceTypes.ZR_Serie1:
          if (this.MyDeviceList.SelectedDevice is Serie1MBus)
            return true;
          break;
        case DeviceTypes.ZR_Serie2:
          return !(this.MyDeviceList.SelectedDevice is Serie3MBus) && this.MyDeviceList.SelectedDevice is Serie2MBus;
        case DeviceTypes.ZR_EHCA:
          if (this.MyDeviceList.SelectedDevice is EHCA_MBus)
            return true;
          break;
        case DeviceTypes.Minol_Device:
          if (this.MyDeviceList.SelectedDevice is MinolDevice)
            return true;
          break;
        case DeviceTypes.ZR_Serie3:
          if (this.MyDeviceList.SelectedDevice is Serie3MBus)
            return true;
          break;
        case DeviceTypes.EDC:
          if (this.MyDeviceList.SelectedDevice is EDC)
            return true;
          break;
        case DeviceTypes.PDC:
          if (this.MyDeviceList.SelectedDevice is PDC)
            return true;
          break;
      }
      return false;
    }

    public bool AddDevice(DeviceTypes NewType, int PrimaryAddress)
    {
      if (this.GetBaseMode() == ZR_ClassLibrary.BusMode.MBusPointToPoint)
        this.MyDeviceList.DeleteBusList();
      if (!this.MyDeviceList.AddDevice(NewType, true))
        return false;
      if (PrimaryAddress > 0 && PrimaryAddress < 256)
      {
        ((MBusDevice) this.MyDeviceList.SelectedDevice).PrimaryDeviceAddress = (byte) PrimaryAddress;
        ((MBusDevice) this.MyDeviceList.SelectedDevice).PrimaryAddressKnown = true;
        ((MBusDevice) this.MyDeviceList.SelectedDevice).PrimaryAddressOk = true;
      }
      this.MyDeviceList.WorkBusAddresses();
      return true;
    }

    public bool AddDevice(DeviceTypes NewType, int PrimaryAddress, long SerialNumber)
    {
      return this.AddDevice(NewType, PrimaryAddress, SerialNumber.ToString());
    }

    public bool AddDevice(DeviceTypes NewType, int PrimaryAddress, string SerialNumber)
    {
      if (this.MyDeviceList is RadioList)
      {
        if (string.IsNullOrEmpty(SerialNumber))
          return false;
        long funkId;
        try
        {
          funkId = ZR_ClassLibrary.Util.ToLong((object) SerialNumber);
        }
        catch
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Invalid number! Value: " + SerialNumber);
          return false;
        }
        return (this.MyDeviceList as RadioList).AddExpectedDevice(funkId);
      }
      if (!this.MyDeviceList.AddDevice(NewType, true))
        return false;
      if (this.MyDeviceList.MyBus.MyBusMode == ZR_ClassLibrary.BusMode.WaveFlowRadio)
      {
        this.SetSerialNumberByWaveFlowDevice(SerialNumber);
        return true;
      }
      if (this.MyDeviceList.SelectedDevice is MinomatDevice)
      {
        this.MyDeviceList.SelectedDevice.Info.MeterNumber = SerialNumber;
        return true;
      }
      if (PrimaryAddress > 0 && PrimaryAddress < 256)
      {
        ((MBusDevice) this.MyDeviceList.SelectedDevice).PrimaryDeviceAddress = (byte) PrimaryAddress;
        ((MBusDevice) this.MyDeviceList.SelectedDevice).PrimaryAddressKnown = true;
        ((MBusDevice) this.MyDeviceList.SelectedDevice).PrimaryAddressOk = true;
      }
      if (this.MyDeviceList.SelectedDevice is MBusDevice)
      {
        this.MyDeviceList.SelectedDevice.Info.MeterNumber = SerialNumber;
        this.MyDeviceList.WorkBusAddresses();
      }
      return true;
    }

    private void SetSerialNumberByWaveFlowDevice(string SerialNumber)
    {
      this.MyDeviceList.SelectedDevice.Info.MeterNumber = SerialNumber;
    }

    public bool ScanFromSerialNumber(string StartSerialnumber)
    {
      this.BreakRequest = false;
      return this.MyDeviceList.ScanFromSerialNumber(StartSerialnumber);
    }

    public bool ScanFromAddress(int ScanAddress)
    {
      this.BreakRequest = false;
      return this.MyDeviceList.ScanFromAddress(ScanAddress);
    }

    public bool SearchSingleDeviceBySerialNumber(string SerialNumber)
    {
      this.BreakRequest = false;
      return this.MyDeviceList.SearchSingleDeviceBySerialNumber(SerialNumber);
    }

    public bool SearchSingleDeviceByPrimaryAddress(int Address)
    {
      this.BreakRequest = false;
      return this.MyDeviceList.SearchSingleDeviceByPrimaryAddress(Address);
    }

    public bool SetSelectedDeviceByPrimaryAddress(int Address)
    {
      return this.MyDeviceList.SelectDeviceByPrimaryAddress(Address);
    }

    public bool SetSelectedDeviceBySerialNumber(string SerialNumber)
    {
      return this.MyDeviceList.SelectDeviceBySerialNumber(SerialNumber);
    }

    public bool SetPhysicalDeviceBySerialNumber(string SerialNumber)
    {
      return this.MyDeviceList.SetPhysicalDeviceBySerialNumber(SerialNumber);
    }

    public bool SetSelectedDeviceByIndex(int index) => this.MyDeviceList.SelectDeviceByIndex(index);

    public bool SetBaudrate(int Baudrate)
    {
      return this.SetBaudrate(Baudrate, this.ChangeInterfaceBaudrateToo);
    }

    public bool SetBaudrate(int Baudrate, bool ChangeAsyncComBaudrate)
    {
      if (this.MyDeviceList.SelectedDevice is MBusDevice)
      {
        this.DeviceIsModified = true;
        this.MyDeviceList.SelectedDevice.UseMaxBaudrate = false;
        if (!((MBusDevice) this.MyDeviceList.SelectedDevice).SetBaudrate(Baudrate))
          return false;
        if (ChangeAsyncComBaudrate)
          this.MyCom.SingleParameter(CommParameter.Baudrate, Baudrate.ToString());
        return true;
      }
      int num = (int) MessageBox.Show("The selected device does not support this SetBaudrate command");
      return false;
    }

    public bool SetPrimaryAddress(int Address)
    {
      if (this.MyDeviceList.SelectedDevice is MBusDevice)
      {
        this.DeviceIsModified = true;
        return Address >= 0 && Address <= 250 && this.MyDeviceList.SetPrimaryAddressOnBus(Address);
      }
      int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("7"));
      return false;
    }

    public bool SetPrimaryAddressWithoutShift(int Address)
    {
      if (this.MyDeviceList.SelectedDevice is MBusDevice)
      {
        this.DeviceIsModified = true;
        return Address >= 0 && Address <= 250 && this.MyDeviceList.SetPrimaryAddressOnBusWithoutShift(Address);
      }
      int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("7"));
      return false;
    }

    public bool ReadParameter(out string ZDF_Data)
    {
      ZDF_Data = "";
      DeviceInfo Info;
      if (!this.ReadParameter(out Info))
        return false;
      ZDF_Data = Info.GetZDFParameterString();
      return true;
    }

    public bool ReadParameter(out DeviceInfo Info)
    {
      DateTime now = ParameterService.GetNow();
      return this.ReadParameter(out Info, now);
    }

    public bool ReadParameter(out DeviceInfo Info, DateTime timePoint)
    {
      Info = (DeviceInfo) null;
      if (this.MyDeviceList == null)
        return false;
      this.BreakRequest = false;
      if (this.MyDeviceList.SelectedDevice == null && this.MyDeviceList.MyBus.MyBusMode == ZR_ClassLibrary.BusMode.MBusPointToPoint)
        this.MyDeviceList.AddDevice(DeviceTypes.MBus, true);
      if (this.MyDeviceList.SelectedDevice is MBusDevice)
      {
        MBusDevice selectedDevice = this.MyDeviceList.SelectedDevice as MBusDevice;
        int num = 0;
        if (this.OnProgress != null)
          this.OnProgress((object) this, 30);
        if (this.SendFirstApplicationReset)
          selectedDevice.SendMeterApplicationResetAsBroadcast();
        if (this.OnProgress != null)
          this.OnProgress((object) this, 40);
        if (this.SendFirstSND_NKE)
          selectedDevice.SND_NKE_Broadcast();
        int e1 = 40;
        while (!this.BreakRequest)
        {
          ++num;
          if (this.OnProgress != null)
            this.OnProgress((object) this, e1);
          e1 += 10;
          if (e1 > 100)
            e1 = 90;
          if (!selectedDevice.REQ_UD2(timePoint))
          {
            this.SendMessage(new GMM_EventArgs("Failed to receive M-Bus response frame #" + num.ToString(), GMM_EventArgs.MessageType.SimpleMessage));
            return false;
          }
          this.SendMessage(new GMM_EventArgs("Read frame #" + num.ToString(), GMM_EventArgs.MessageType.SimpleMessage));
          if (Info != null)
          {
            DeviceInfo nextInfo = new DeviceInfo(selectedDevice.Info);
            if ((int) Info.ManufacturerCode == (int) nextInfo.ManufacturerCode && (int) Info.Medium == (int) nextInfo.Medium && Info.MeterNumber == nextInfo.MeterNumber)
            {
              foreach (DeviceInfo.MBusParamStruct parameter in nextInfo.ParameterList)
              {
                DeviceInfo.MBusParamStruct p = parameter;
                if (!Info.ParameterList.Exists((Predicate<DeviceInfo.MBusParamStruct>) (e => e.DefineString == p.DefineString && e.ValueString == p.ValueString)))
                  Info.ParameterList.Add(p);
              }
            }
            else
            {
              DeviceInfo deviceInfo = Info.SubDevices.Find((Predicate<DeviceInfo>) (e => (int) e.ManufacturerCode == (int) nextInfo.ManufacturerCode && (int) e.Medium == (int) nextInfo.Medium && e.MeterNumber == nextInfo.MeterNumber));
              if (deviceInfo != null)
              {
                foreach (DeviceInfo.MBusParamStruct parameter in nextInfo.ParameterList)
                {
                  DeviceInfo.MBusParamStruct p = parameter;
                  if (!deviceInfo.ParameterList.Exists((Predicate<DeviceInfo.MBusParamStruct>) (e => e.DefineString == p.DefineString && e.ValueString == p.ValueString)))
                    deviceInfo.ParameterList.Add(p);
                }
              }
              else
                Info.SubDevices.Add(nextInfo);
            }
          }
          else
            Info = new DeviceInfo(selectedDevice.Info);
          if (selectedDevice.followingTelegrammAnnounced && this.IsMultiTelegrammEnabled)
          {
            selectedDevice.followingTelegrammAnnounced = false;
            selectedDevice.followingTelegrammTransmit_FCB_Odd = !selectedDevice.followingTelegrammTransmit_FCB_Odd;
          }
          else
            break;
        }
        this.MyDeviceList.SelectedDevice.Info = Info;
        if (this.OnProgress != null)
          this.OnProgress((object) this, 99);
        return true;
      }
      if (this.MyDeviceList.MyBus.MyBusMode == ZR_ClassLibrary.BusMode.WaveFlowRadio)
        return this.ReadWaveFlowParameter(out Info);
      if (this.MyDeviceList.SelectedDevice is MinomatDevice)
      {
        bool flag = ((MinomatDevice) this.MyDeviceList.SelectedDevice).ReadParameters();
        Info = new DeviceInfo(this.MyDeviceList.SelectedDevice.Info);
        return flag;
      }
      if (this.MyDeviceList.SelectedDevice == null)
        return false;
      Info = this.MyDeviceList.SelectedDevice.Info;
      return true;
    }

    public byte[] GetTransmitBuffer()
    {
      return this.MyDeviceList == null || this.MyDeviceList.SelectedDevice == null || this.MyDeviceList.SelectedDevice.TransmitBuffer == null ? (byte[]) null : this.MyDeviceList.SelectedDevice.TransmitBuffer.Data;
    }

    public byte[] GetReceiveBuffer()
    {
      return this.MyDeviceList == null || this.MyDeviceList.SelectedDevice == null || this.MyDeviceList.SelectedDevice.TotalReceiveBuffer == null ? (byte[]) null : this.MyDeviceList.SelectedDevice.TotalReceiveBuffer.ToArray();
    }

    public UniqueIdentification GetUniqueIdentificationOfSelectedDevice()
    {
      if (this.MyDeviceList == null || this.MyDeviceList.SelectedDevice == null || this.MyDeviceList.SelectedDevice.Info == null)
        return (UniqueIdentification) null;
      return new UniqueIdentification()
      {
        Manufacturer = this.MyDeviceList.SelectedDevice.Info.Manufacturer,
        Version = this.MyDeviceList.SelectedDevice.Info.Version.ToString(),
        Medium = this.MyDeviceList.SelectedDevice.Info.MediumString,
        ParameterList = this.MyDeviceList.SelectedDevice.Info.ParameterListWithoutValues
      };
    }

    public bool GetParameter(out DeviceInfo Info)
    {
      Info = (DeviceInfo) null;
      if (this.MyDeviceList.SelectedDevice is MBusDevice)
      {
        if (!this.MyDeviceList.SelectedDevice.Info.ParameterOk)
          return false;
        Info = new DeviceInfo(this.MyDeviceList.SelectedDevice.Info);
      }
      else if (this.MyDeviceList.MyBus.MyBusMode == ZR_ClassLibrary.BusMode.WaveFlowRadio)
      {
        if (!this.TryGetInfoFromSelectedWaveFlowDevice(out Info))
          return false;
      }
      else
      {
        if (!(this.MyDeviceList.SelectedDevice is MinomatDevice) || !this.MyDeviceList.SelectedDevice.Info.ParameterOk)
          return false;
        Info = new DeviceInfo(this.MyDeviceList.SelectedDevice.Info);
      }
      return true;
    }

    private bool TryGetInfoFromSelectedWaveFlowDevice(out DeviceInfo Info)
    {
      Info = (DeviceInfo) null;
      if (!this.MyDeviceList.SelectedDevice.Info.ParameterOk)
        return false;
      Info = new DeviceInfo(this.MyDeviceList.SelectedDevice.Info);
      return true;
    }

    public bool GetParameter(out DeviceInfo Info, int DeviceListIndex)
    {
      Info = (DeviceInfo) null;
      if (DeviceListIndex >= this.MyDeviceList.bus.Count)
        return false;
      Info = new DeviceInfo(((BusDevice) this.MyDeviceList.bus[DeviceListIndex]).Info);
      return true;
    }

    public List<DeviceInfo> GetParameters()
    {
      return this.MyBusMode == ZR_ClassLibrary.BusMode.RelayDevice && this.MyDeviceList is RelayList deviceList ? deviceList.GetAllParametersOfSelectedDevice() : (List<DeviceInfo>) null;
    }

    public int GetNumberOfDevices() => this.MyDeviceList.bus.Count;

    public bool GetDeviceConfiguration(
      out SortedList<OverrideID, ConfigurationParameter> ConfigParamList)
    {
      ConfigParamList = (SortedList<OverrideID, ConfigurationParameter>) null;
      if (!(this.MyDeviceList.SelectedDevice is MinomatDevice))
        return false;
      ((MinomatDevice) this.MyDeviceList.SelectedDevice).GetDeviceConfiguration(out ConfigParamList);
      return true;
    }

    public bool SerchDeviceAcrossBaudrates()
    {
      if (this.MyDeviceList.SelectedDevice is MBusDevice)
        return ((MBusDevice) this.MyDeviceList.SelectedDevice).SerchBaudrate();
      int num = (int) MessageBox.Show("The selected device does not support the SerchDeviceAcrossBaudrates command");
      return false;
    }

    public bool ResetDevice()
    {
      DeviceCollectorFunctions.logger.Trace(nameof (ResetDevice));
      return this.CheckSelectedDevice() && this.MyDeviceList.SelectedDevice.ResetDevice();
    }

    public bool ResetDevice(bool loadBackup)
    {
      DeviceCollectorFunctions.logger.Trace("ResetDevice load backup");
      return this.CheckSelectedDevice() && this.MyDeviceList.SelectedDevice.ResetDevice(loadBackup);
    }

    public bool ResetDevice(int AfterResetBaudrate)
    {
      if (DeviceCollectorFunctions.logger.IsTraceEnabled)
        DeviceCollectorFunctions.logger.Trace("ResetDevice. AfterResetBaudrate: " + AfterResetBaudrate.ToString());
      return this.CheckSelectedDevice() && this.MyDeviceList.SelectedDevice.ResetDevice(AfterResetBaudrate);
    }

    private bool CheckSelectedDevice()
    {
      if (this.MyDeviceList.SelectedDevice != null)
        return true;
      string str = "Access to not available selected device";
      DeviceCollectorFunctions.logger.Error(str);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, str);
      return false;
    }

    public bool DeviceProtectionGet()
    {
      return this.CheckSelectedDevice() && this.MyDeviceList.SelectedDevice.DeviceProtectionGet();
    }

    public bool DeviceProtectionSet()
    {
      return this.CheckSelectedDevice() && this.MyDeviceList.SelectedDevice.DeviceProtectionSet();
    }

    public bool DeviceProtectionReset(uint meterKey)
    {
      return this.CheckSelectedDevice() && this.MyDeviceList.SelectedDevice.DeviceProtectionReset(meterKey);
    }

    public bool DeviceProtectionSetKey(uint meterKey)
    {
      return this.CheckSelectedDevice() && this.MyDeviceList.SelectedDevice.DeviceProtectionSetKey(meterKey);
    }

    public bool SetEmergencyMode()
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
        return ((Serie2MBus) this.MyDeviceList.SelectedDevice).SetEmergencyMode();
      int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString(DeviceCollectorFunctions.SerialBusMessage.GetString(DeviceCollectorFunctions.SerialBusMessage.GetString("10"))));
      return false;
    }

    public bool RunBackup()
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
        return ((Serie2MBus) this.MyDeviceList.SelectedDevice).RunBackup();
      int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString(DeviceCollectorFunctions.SerialBusMessage.GetString(DeviceCollectorFunctions.SerialBusMessage.GetString("11"))));
      return false;
    }

    public bool DeleteMeterKey(int MeterKey)
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
        return ((Serie2MBus) this.MyDeviceList.SelectedDevice).DeleteMeterKey(MeterKey);
      if (this.MyDeviceList.SelectedDevice is RDM_Bus)
        return ((RDM_Bus) this.MyDeviceList.SelectedDevice).DeleteMeterKey(MeterKey);
      int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString(DeviceCollectorFunctions.SerialBusMessage.GetString(DeviceCollectorFunctions.SerialBusMessage.GetString("12"))));
      return false;
    }

    public bool SetNewPin(int NewPin)
    {
      if (this.MyDeviceList.SelectedDevice is RDM_Bus)
        return ((RDM_Bus) this.MyDeviceList.SelectedDevice).SetNewPin(NewPin);
      int num = (int) MessageBox.Show("The selected device does not support the SetNewPin command");
      return false;
    }

    public bool ReadVersion(out ReadVersionData versionData)
    {
      return this.MyDeviceList.SelectedDevice.ReadVersion(out versionData);
    }

    public bool ReadVersion(
      out short Manufacturer,
      out byte Medium,
      out byte MBusMeterType,
      out long Version,
      out int MBusSerialNr)
    {
      return this.ReadVersion((int[]) null, out Manufacturer, out Medium, out MBusMeterType, out Version, out MBusSerialNr);
    }

    public bool ReadVersion(
      out short Manufacturer,
      out byte Medium,
      out byte MBusMeterType,
      out long Version,
      out int MBusSerialNr,
      out int ConfigAdr,
      out int HardwareMask)
    {
      return this.ReadVersion((int[]) null, out Manufacturer, out Medium, out MBusMeterType, out Version, out MBusSerialNr, out ConfigAdr, out HardwareMask);
    }

    public bool ReadVersion(
      int[] Bautrates,
      out short Manufacturer,
      out byte Medium,
      out byte MBusMeterType,
      out long Version,
      out int MBusSerialNr)
    {
      return this.ReadVersion(Bautrates, out Manufacturer, out Medium, out MBusMeterType, out Version, out MBusSerialNr, out int _, out int _);
    }

    public bool ReadVersion(
      int[] Bautrates,
      out short Manufacturer,
      out byte Medium,
      out byte MBusMeterType,
      out long Version,
      out int MBusSerialNr,
      out int HardwareTypeId,
      out int HardwareMask)
    {
      this.BreakRequest = false;
      Manufacturer = (short) 0;
      Medium = (byte) 0;
      MBusMeterType = (byte) 0;
      Version = 0L;
      MBusSerialNr = 0;
      HardwareTypeId = 0;
      HardwareMask = 0;
      if (this.MyDeviceList.SelectedDevice is Serie3MBus)
      {
        ReadVersionData versionData;
        if (!this.MyDeviceList.SelectedDevice.ReadVersion(out versionData))
          return false;
        Manufacturer = versionData.MBusManufacturer;
        Medium = versionData.MBusMedium;
        MBusMeterType = versionData.MBusGeneration;
        MBusSerialNr = (int) versionData.MBusSerialNr;
        Version = (long) versionData.Version;
        HardwareTypeId = (int) versionData.BuildRevision;
        HardwareMask = (int) versionData.HardwareIdentification;
        return true;
      }
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
      {
        if (!((Serie2MBus) this.MyDeviceList.SelectedDevice).ReadVersion(Bautrates))
          return false;
        Manufacturer = this.MyDeviceList.SelectedDevice.Info.ManufacturerCode;
        Medium = this.MyDeviceList.SelectedDevice.Info.Medium;
        MBusMeterType = this.MyDeviceList.SelectedDevice.Info.Version;
        MBusSerialNr = int.Parse(this.MyDeviceList.SelectedDevice.Info.MeterNumber);
        Version = ((Serie2MBus) this.MyDeviceList.SelectedDevice).DeviceVersion;
        HardwareTypeId = ((Serie2MBus) this.MyDeviceList.SelectedDevice).HardwareTypeId;
        HardwareMask = ((Serie2MBus) this.MyDeviceList.SelectedDevice).HardwareMask;
        return true;
      }
      if (this.MyDeviceList.SelectedDevice is RDM_Bus)
        return ((RDM_Bus) this.MyDeviceList.SelectedDevice).ReadVersion(ref Version);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented, DeviceCollectorFunctions.SerialBusMessage.GetString("NoVersionCommandAvailable"));
      return false;
    }

    public bool IsDeviceModified()
    {
      if (!this.DeviceIsModified)
        return false;
      this.DeviceIsModified = false;
      return true;
    }

    public bool UseMaxBaudrate()
    {
      if (this.MyDeviceList.SelectedDevice == null)
        return false;
      this.MyDeviceList.SelectedDevice.UseMaxBaudrate = true;
      return true;
    }

    public bool DigitalInputsAndOutputs(
      uint NewOutputMask,
      uint NewOutputState,
      ref uint OldOutputState,
      ref uint OldInputState)
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
        return ((Serie2MBus) this.MyDeviceList.SelectedDevice).DigitalInputsAndOutputs(NewOutputMask, NewOutputState, ref OldOutputState, ref OldInputState);
      int num = (int) MessageBox.Show("The selected device does not support the DigitalInputsAndOutputs command");
      return false;
    }

    public byte[] RunIoTest(IoTestFunctions theFunction)
    {
      return this.MyDeviceList.SelectedDevice == null ? (byte[]) null : this.MyDeviceList.SelectedDevice.RunIoTest(theFunction);
    }

    public bool SetOutput(int OutputNumber, bool State)
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
      {
        if (OutputNumber < 1 || OutputNumber > 2)
          return false;
        uint OldOutputState = 0;
        uint OldInputState = 0;
        uint NewOutputMask = (uint) (1 << OutputNumber - 1);
        uint NewOutputState = 0;
        if (State)
          NewOutputState = NewOutputMask;
        return ((Serie2MBus) this.MyDeviceList.SelectedDevice).DigitalInputsAndOutputs(NewOutputMask, NewOutputState, ref OldOutputState, ref OldInputState);
      }
      if (this.MyDeviceList.SelectedDevice is Serie1MBus)
        return OutputNumber >= 1 && OutputNumber <= 2 && ((Serie1MBus) this.MyDeviceList.SelectedDevice).SetOutput(OutputNumber, State);
      int num = (int) MessageBox.Show("The selected device does not support the SetOutput command");
      return false;
    }

    public bool GetInput(int InputNumber, out bool InputState)
    {
      InputState = false;
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
      {
        if (InputNumber < 1 || InputNumber > 2)
          return false;
        uint OldOutputState = 0;
        uint OldInputState = 0;
        if (!((Serie2MBus) this.MyDeviceList.SelectedDevice).DigitalInputsAndOutputs(0U, 0U, ref OldOutputState, ref OldInputState))
          return false;
        uint num = (uint) (1 << InputNumber - 1);
        if ((OldInputState & num) > 0U)
          InputState = true;
        return true;
      }
      if (this.MyDeviceList.SelectedDevice is Serie1MBus)
        return InputNumber >= 1 && InputNumber <= 2 && ((Serie1MBus) this.MyDeviceList.SelectedDevice).GetInput(InputNumber, out InputState);
      int num1 = (int) MessageBox.Show("The selected device does not support the GetInput command");
      return false;
    }

    public ImpulseInputCounters ReadInputCounters()
    {
      return ((Serie3MBus) this.MyDeviceList.SelectedDevice).ReadInputCounters();
    }

    public bool TransmitRadioFrame()
    {
      if (this.MyDeviceList.SelectedDevice is RDM_Bus)
        return ((RDM_Bus) this.MyDeviceList.SelectedDevice).TransmitRadioFrame();
      int num = (int) MessageBox.Show("The selected device does not support the TransmitRadioFrame command");
      return false;
    }

    public bool SetOptoTimeoutSeconds(int Seconds)
    {
      return this.MyDeviceList.SelectedDevice.SetOptoTimeoutSeconds(Seconds);
    }

    public bool FlyingTestActivate() => this.MyDeviceList.SelectedDevice.FlyingTestActivate();

    public bool FlyingTestStart() => this.MyDeviceList.SelectedDevice.FlyingTestStart();

    public bool FlyingTestStop() => this.MyDeviceList.SelectedDevice.FlyingTestStop();

    public bool FlyingTestReadVolume(out float volume, out MBusDeviceState state)
    {
      return this.MyDeviceList.SelectedDevice.FlyingTestReadVolume(out volume, out state);
    }

    public bool AdcTestActivate() => this.MyDeviceList.SelectedDevice.AdcTestActivate();

    public bool CapacityOfTestActivate()
    {
      return this.MyDeviceList.SelectedDevice.CapacityOfTestActivate();
    }

    public bool AdcTestCycleWithSimulatedVolume(float simulationVolume)
    {
      return this.MyDeviceList.SelectedDevice.AdcTestCycleWithSimulatedVolume(simulationVolume);
    }

    public bool RadioTestActivate(RadioTestMode testMode)
    {
      return this.MyDeviceList.SelectedDevice.RadioTest(testMode);
    }

    public bool Start512HzRtcCalibration()
    {
      return this.MyDeviceList.SelectedDevice.Start512HzRtcCalibration();
    }

    public bool TestDone(long dispValueId)
    {
      return this.MyDeviceList.SelectedDevice.TestDone(dispValueId);
    }

    public bool ReadMemory(long FullStartAddress, int NumberOfBytes, out ByteField MemoryData)
    {
      MemoryData = DeviceCollectorFunctions.EmptyByteField;
      if (this.MyDeviceList.SelectedDevice is Serie1MBus)
      {
        MemoryData = new ByteField(NumberOfBytes);
        return ((Serie1MBus) this.MyDeviceList.SelectedDevice).ReadMemory(FullStartAddress, NumberOfBytes, ref MemoryData);
      }
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented, "The selected device does not support this ReadMemory command");
      return false;
    }

    public bool ReadMemory(
      MemoryLocation Location,
      int StartAddress,
      int NumberOfBytes,
      out ByteField MemoryData)
    {
      this.BreakRequest = false;
      if (this.MyBusMode != ZR_ClassLibrary.BusMode.Minol_Device)
        return this.ReadMemory((int) Location, StartAddress, NumberOfBytes, out MemoryData);
      if (this.MyDeviceList.SelectedDevice == null)
        this.MyDeviceList.SelectedDevice = (BusDevice) new MinolDevice(this);
      return ((MinolDevice) this.MyDeviceList.SelectedDevice).ReadMemory(Location, StartAddress, NumberOfBytes, out MemoryData);
    }

    public bool ReadMemory(
      MemoryLocation Location,
      int StartAddress,
      int NumberOfBytes,
      out ByteField MemoryData,
      bool useOnlyLongWakeUpSequence)
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.Minol_Device)
      {
        if (this.MyDeviceList.SelectedDevice == null)
          this.MyDeviceList.SelectedDevice = (BusDevice) new MinolDevice(this);
        if (this.MyDeviceList.SelectedDevice is MinolDevice)
          ((MinolDevice) this.MyDeviceList.SelectedDevice).UseOnlyLongWakeUpSequence = useOnlyLongWakeUpSequence;
      }
      return this.ReadMemory(Location, StartAddress, NumberOfBytes, out MemoryData);
    }

    public bool ReadMemory(
      int Location,
      int StartAddress,
      int NumberOfBytes,
      out ByteField MemoryData)
    {
      this.BreakRequest = false;
      MemoryData = DeviceCollectorFunctions.EmptyByteField;
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
      {
        if (NumberOfBytes >= 65536 || NumberOfBytes < 0)
        {
          int num = (int) MessageBox.Show("ReadMemory: Number off bytes out of range", "DeviceCollector");
          return false;
        }
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).Location = Location;
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).StartAddress = StartAddress;
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).NumberOfBytes = NumberOfBytes;
        if (!((Serie2MBus) this.MyDeviceList.SelectedDevice).ReadMemory())
          return false;
        MemoryData = ((Serie2MBus) this.MyDeviceList.SelectedDevice).DataBuffer;
        return true;
      }
      if (this.MyDeviceList.SelectedDevice is EHCA_MBus)
      {
        ((EHCA_MBus) this.MyDeviceList.SelectedDevice).StartAddress = StartAddress;
        ((EHCA_MBus) this.MyDeviceList.SelectedDevice).NumberOfBytes = NumberOfBytes;
        if (!((EHCA_MBus) this.MyDeviceList.SelectedDevice).ReadMemory())
          return false;
        MemoryData = ((EHCA_MBus) this.MyDeviceList.SelectedDevice).DataBuffer;
        return true;
      }
      if (this.MyDeviceList.SelectedDevice is RDM_Bus)
        return ((RDM_Bus) this.MyDeviceList.SelectedDevice).ReadMemory(StartAddress, NumberOfBytes, out MemoryData);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented, "The selected device does not support this ReadMemory command");
      return false;
    }

    public bool ReadParameterGroup(ParameterGroups TheParameterGroup, out object ParameterData)
    {
      this.BreakRequest = false;
      ParameterData = (object) null;
      return this.MyDeviceList.SelectedDevice != null && this.MyDeviceList.SelectedDevice.ReadParameterGroup(TheParameterGroup, out ParameterData);
    }

    public bool ReadAnswerString(string RequestString, out string AnswerString)
    {
      AnswerString = string.Empty;
      return this.MyDeviceList.SelectedDevice != null && this.MyDeviceList.SelectedDevice.ReadAnswerString(RequestString, out AnswerString);
    }

    public bool WriteParameterGroup(ParameterGroups TheParameterGroup, object ParameterData)
    {
      return this.MyDeviceList.SelectedDevice != null && this.MyDeviceList.SelectedDevice.WriteParameterGroup(TheParameterGroup, ParameterData);
    }

    public bool ResetParameterGroup(ParameterGroups TheParameterGroup)
    {
      return this.MyDeviceList.SelectedDevice != null && this.MyDeviceList.SelectedDevice.ResetParameterGroup(TheParameterGroup);
    }

    private bool OpenWaveFlowRadio()
    {
      if (this.MyWavePort == null)
        this.MyWavePort = new WavePortConnector(this);
      return this.MyWavePort.OpenPort();
    }

    private bool CloseWaveFlowRadio()
    {
      if (this.MyWavePort != null)
        this.MyWavePort.ClosePort();
      return true;
    }

    private bool ReadWaveFlowParameter(out DeviceInfo Info)
    {
      bool flag = ((WaveFlowDevice) this.MyDeviceList.SelectedDevice).ReadParameters();
      Info = new DeviceInfo(this.MyDeviceList.SelectedDevice.Info);
      return flag;
    }

    public string GetWafeFlowSerialNumber()
    {
      try
      {
        return ((WaveFlowDevice) this.MyDeviceList.SelectedDevice).GetSerialNumber();
      }
      catch
      {
        return string.Empty;
      }
    }

    public bool ReadWaveFlowParameterGroup(
      ParameterGroups TheParameterGroup,
      out SortedList ParameterList,
      out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      ParameterList = new SortedList();
      try
      {
        if (this.MyDeviceList.SelectedDevice == null)
        {
          Fehlerstring = "No device in bus list";
          return false;
        }
        object ParameterData = new object();
        if (!this.ReadParameterGroup(TheParameterGroup, out ParameterData))
        {
          Fehlerstring = ((WaveFlowDevice) this.MyDeviceList.SelectedDevice).GetLastErrorString();
          return false;
        }
        ParameterList = (SortedList) ParameterData;
        return true;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        return false;
      }
    }

    public bool ReadWaveFlowAnswer(
      string RequestString,
      out string XMLString,
      out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      XMLString = string.Empty;
      try
      {
        if (this.MyDeviceList.SelectedDevice == null)
        {
          Fehlerstring = "No device in bus list";
          return false;
        }
        if (this.ReadAnswerString(RequestString, out XMLString))
          return true;
        Fehlerstring = ((WaveFlowDevice) this.MyDeviceList.SelectedDevice).GetLastErrorString();
        return false;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        return false;
      }
    }

    public bool ReadWavePortFirmware(out string TheFirmwareString, out string Fehlerstring)
    {
      TheFirmwareString = string.Empty;
      Fehlerstring = "Nicht implementiert";
      return false;
    }

    public bool WriteWaveFlowParameterGroup(
      ParameterGroups TheParameterGroup,
      SortedList ParameterList,
      out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      try
      {
        if (this.MyDeviceList.SelectedDevice == null)
        {
          Fehlerstring = "No device in bus list";
          return false;
        }
        if (this.WriteParameterGroup(TheParameterGroup, (object) ParameterList))
          return true;
        Fehlerstring = ((WaveFlowDevice) this.MyDeviceList.SelectedDevice).GetLastErrorString();
        return false;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        return false;
      }
    }

    public bool ResetWaveFlowParameterGroup(
      ParameterGroups TheParameterGroup,
      out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      try
      {
        if (this.MyDeviceList.SelectedDevice == null)
        {
          Fehlerstring = "No device in bus list";
          return false;
        }
        if (this.ResetParameterGroup(TheParameterGroup))
          return true;
        Fehlerstring = ((WaveFlowDevice) this.MyDeviceList.SelectedDevice).GetLastErrorString();
        return false;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        return false;
      }
    }

    public bool SetWafeFlowRepeaters(string[] SerialNumbers, out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      try
      {
        if (this.MyDeviceList.SelectedDevice != null)
          return this.MyDeviceList.SelectedDevice.SetRepeaters(SerialNumbers, out Fehlerstring);
        Fehlerstring = "No device in bus list";
        return false;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        return false;
      }
    }

    public bool ActivateWafeFlowRepeaters(out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      try
      {
        if (this.MyDeviceList.SelectedDevice == null)
        {
          Fehlerstring = "No device in bus list";
          return false;
        }
        this.MyDeviceList.SelectedDevice.ActivateRepeaters();
        return true;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        return false;
      }
    }

    public bool DeactivateWafeFlowRepeaters(out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      try
      {
        if (this.MyDeviceList.SelectedDevice == null)
        {
          Fehlerstring = "No device in bus list";
          return false;
        }
        this.MyDeviceList.SelectedDevice.DeactivateRepeaters();
        return true;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        return false;
      }
    }

    public bool GetWafeFlowRepeaters(out string[] Repeaters, out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      Repeaters = new string[0];
      try
      {
        if (this.MyDeviceList.SelectedDevice == null)
        {
          Fehlerstring = "No device in bus list";
          return false;
        }
        Repeaters = this.MyDeviceList.SelectedDevice.GetRepeaters();
        return true;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        return false;
      }
    }

    public bool GetWafeFlowRepeatersAreActivated(out bool Activated, out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      Activated = false;
      try
      {
        if (this.MyDeviceList.SelectedDevice == null)
        {
          Fehlerstring = "No device in bus list";
          return false;
        }
        Activated = this.MyDeviceList.SelectedDevice.GetRepeatersAreActivated();
        return true;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
        return false;
      }
    }

    public bool WriteMemory(MemoryLocation Location, int StartAddress, ByteField data)
    {
      if (this.MyBusMode != ZR_ClassLibrary.BusMode.Minol_Device)
        return this.WriteMemory((int) Location, StartAddress, data);
      if (this.MyDeviceList.SelectedDevice == null || !(this.MyDeviceList.SelectedDevice is MinolDevice))
        this.MyDeviceList.SelectedDevice = (BusDevice) new MinolDevice(this);
      return ((MinolDevice) this.MyDeviceList.SelectedDevice).WriteMemory(Location, StartAddress, data);
    }

    public bool EraseFlash(int StartAddress, int NumberOfBytes)
    {
      return this.MyDeviceList.SelectedDevice.EraseFlash(StartAddress, NumberOfBytes);
    }

    public bool UpdateMemory(
      MemoryLocation Location,
      int StartAddress,
      ByteField OldData,
      ByteField NewData)
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
      {
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).Location = (int) Location;
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).StartAddress = StartAddress;
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).OldDataBuffer = OldData;
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).DataBuffer = NewData;
        return ((Serie2MBus) this.MyDeviceList.SelectedDevice).UpdateMemory();
      }
      int num = (int) MessageBox.Show("The selected device does not support this UpdateMemory command");
      return false;
    }

    public bool WriteMemory(int Location, int StartAddress, ByteField data)
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
      {
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).Location = Location;
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).StartAddress = StartAddress;
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).DataBuffer = data;
        return ((Serie2MBus) this.MyDeviceList.SelectedDevice).WriteMemory();
      }
      if (this.MyDeviceList.SelectedDevice is EHCA_MBus)
      {
        ((EHCA_MBus) this.MyDeviceList.SelectedDevice).StartAddress = StartAddress;
        ((EHCA_MBus) this.MyDeviceList.SelectedDevice).DataBuffer = data;
        return ((EHCA_MBus) this.MyDeviceList.SelectedDevice).WriteMemory();
      }
      if (this.MyDeviceList.SelectedDevice is RDM_Bus)
        return ((RDM_Bus) this.MyDeviceList.SelectedDevice).WriteMemory(StartAddress, ref data);
      int num = (int) MessageBox.Show("The selected device does not support this WriteMemory command");
      return false;
    }

    public bool WriteBitfield(int Address, byte AndMask, byte OrMask)
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
      {
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).StartAddress = Address;
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).AndMask = AndMask;
        ((Serie2MBus) this.MyDeviceList.SelectedDevice).OrMask = OrMask;
        return ((Serie2MBus) this.MyDeviceList.SelectedDevice).WriteBitfield();
      }
      if (this.MyDeviceList.SelectedDevice is EHCA_MBus)
      {
        ((EHCA_MBus) this.MyDeviceList.SelectedDevice).StartAddress = Address;
        return ((EHCA_MBus) this.MyDeviceList.SelectedDevice).WriteBitfield((uint) AndMask, (uint) OrMask);
      }
      int num = (int) MessageBox.Show("The selected device does not support this WriteBitfield command");
      return false;
    }

    public bool WriteBitfield(int Address, uint AndMask, uint OrMask)
    {
      if (this.MyDeviceList.SelectedDevice is EHCA_MBus)
      {
        ((EHCA_MBus) this.MyDeviceList.SelectedDevice).StartAddress = Address;
        return ((EHCA_MBus) this.MyDeviceList.SelectedDevice).WriteBitfield(AndMask, OrMask);
      }
      int num = (int) MessageBox.Show("The selected device does not support this WriteBitfield command");
      return false;
    }

    public bool WriteBit(long FullAddress, bool BitData)
    {
      if (this.MyDeviceList.SelectedDevice is Serie1MBus)
        return ((Serie1MBus) this.MyDeviceList.SelectedDevice).WriteBit(FullAddress, BitData);
      int num = (int) MessageBox.Show("The selected device does not support this WriteBit command");
      return false;
    }

    public bool WriteNibble(long FullAddress, byte NibbleData)
    {
      if (this.MyDeviceList.SelectedDevice is Serie1MBus)
        return ((Serie1MBus) this.MyDeviceList.SelectedDevice).WriteNibble(FullAddress, NibbleData);
      int num = (int) MessageBox.Show("The selected device does not support this WriteNibble command");
      return false;
    }

    public bool WriteByte(long FullAddress, byte ByteData)
    {
      if (this.MyDeviceList.SelectedDevice is Serie1MBus)
        return ((Serie1MBus) this.MyDeviceList.SelectedDevice).WriteByte(FullAddress, ByteData);
      int num = (int) MessageBox.Show("The selected device does not support this WriteByte command");
      return false;
    }

    public bool SetParameterListDefault()
    {
      if (this.MyDeviceList.SelectedDevice is MBusDevice)
      {
        this.DeviceIsModified = true;
        return ((MBusDevice) this.MyDeviceList.SelectedDevice).MeterApplicationReset();
      }
      int num = (int) MessageBox.Show("The selected device does not support this SetParameterListDefault command");
      return false;
    }

    public bool SetParameterListDefault(int BusListIndex)
    {
      if (this.MyDeviceList.bus[BusListIndex] is Serie1MBus)
      {
        this.DeviceIsModified = true;
        return ((MBusDevice) this.MyDeviceList.bus[BusListIndex]).MeterApplicationReset();
      }
      if (!(this.MyDeviceList.bus[BusListIndex] is Serie2MBus))
        return true;
      this.DeviceIsModified = true;
      return ((MBusDevice) this.MyDeviceList.bus[BusListIndex]).MeterApplicationReset();
    }

    public bool SetParameterListAll()
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
        return ((MBusDevice) this.MyDeviceList.SelectedDevice).SelectAllParameter();
      return this.MyDeviceList.SelectedDevice is Serie1MBus && ((MBusDevice) this.MyDeviceList.SelectedDevice).SelectAllParameter();
    }

    public bool SetParameterListAllParameters(int BusListIndex)
    {
      if (this.MyDeviceList.bus[BusListIndex] is Serie1MBus)
        return ((MBusDevice) this.MyDeviceList.bus[BusListIndex]).SelectAllParameter();
      return !(this.MyDeviceList.bus[BusListIndex] is Serie2MBus) || ((MBusDevice) this.MyDeviceList.bus[BusListIndex]).SelectAllParameter();
    }

    public bool WriteDueDateMonth(ushort month)
    {
      return this.MyDeviceList.SelectedDevice.WriteDueDateMonth(month);
    }

    public bool SelectParameterList(int ListNumber, int function)
    {
      return this.MyDeviceList.SelectedDevice.SelectParameterList(ListNumber, function);
    }

    public bool SelectParameterList(int BusListIndex, int ParameterListNumber, int function)
    {
      return ((BusDevice) this.MyDeviceList.bus[BusListIndex]).SelectParameterList(ParameterListNumber, function);
    }

    public ParameterListInfo ReadParameterList()
    {
      return this.MyDeviceList.SelectedDevice.ReadParameterList();
    }

    public void ClearCounters()
    {
    }

    public int GetJobCounter() => this.BusState.TotalJobCounter;

    public int GetErrorCounter() => this.BusState.TotalErrorCounter;

    public int GetTransmitBlockCounter() => this.BusState.TotalTransmitBlockCounter;

    public int GetReceiveBlockCounter() => this.BusState.TotalReceiveBlockCounter;

    internal void MemoryWriteWatch(int address, ref byte[] data)
    {
      string text = "";
      for (int index = 0; index < data.Length; ++index)
      {
        if ((index & 15) == 0)
          text = text + Environment.NewLine + (address + index).ToString("x04") + ":";
        text = text + " " + data[index].ToString("x02");
      }
      int num = (int) MessageBox.Show(text, "DeviceCollector memory watch");
    }

    public bool StartMeterMonitor(int SampleTime)
    {
      if (this.MyDeviceList.SelectedDevice is Serie2MBus)
        return ((Serie2MBus) this.MyDeviceList.SelectedDevice).StartMeterMonitor(SampleTime);
      int num = (int) MessageBox.Show("The selected device does not support this StartMeterMonitor command");
      return false;
    }

    public bool GetMeterMonitorData(out ByteField MonitorData)
    {
      MonitorData = (ByteField) null;
      return this.MyDeviceList.SelectedDevice != null && this.MyDeviceList.SelectedDevice.GetMeterMonitorData(out MonitorData);
    }

    public void StartTestloopReadEEProm()
    {
      if (!(this.MyDeviceList.SelectedDevice is Serie2MBus))
        return;
      this.BreakRequest = false;
      if (!this.SetRunningFunction(DeviceCollectorFunctions.Functions.TestloopReadEEProm))
        return;
      this.BusState.StartGlobalFunctionTask(BusStatusClass.GlobalFunctionTasks.TestloopReadEEProm);
      this.BusThread = ThreadStarter.CreateThread(new RuntimeThread.Start(new RuntimeThread().TestloopReadEEProm), this);
      this.BusThread.Name = "TestloopReadEEProm";
      this.BusThread.Start();
    }

    public void StartTestloopWriteReadEEProm()
    {
      if (!(this.MyDeviceList.SelectedDevice is Serie2MBus))
        return;
      this.BreakRequest = false;
      if (!this.SetRunningFunction(DeviceCollectorFunctions.Functions.TestloopWriteReadEEProm))
        return;
      this.BusState.StartGlobalFunctionTask(BusStatusClass.GlobalFunctionTasks.TestloopWriteReadEEProm);
      this.BusThread = ThreadStarter.CreateThread(new RuntimeThread.Start(new RuntimeThread().TestloopWriteReadEEProm), this);
      this.BusThread.Name = "TestloopWriteReadEEProm";
      this.BusThread.Start();
    }

    public void StopTestLoop()
    {
      if (!(this.MyDeviceList.SelectedDevice is Serie2MBus))
        return;
      this.BreakRequest = true;
      while (!this.BusThread.Join(100))
      {
        Thread.Sleep(20);
        Application.DoEvents();
      }
      this.EndRunningFunction();
      this.BreakRequest = false;
    }

    public bool StartReceiver() => this.MyReceiver.StartReceiver();

    public bool StopReceiver() => this.MyReceiver.StopReceiver();

    public bool SystemInit()
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.MinomatV2)
        return ((MinomatList) this.MyDeviceList).SystemInit();
      throw new NotImplementedException("Only valid for MinomatV2");
    }

    public bool StartHKVEReceptionWindow()
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.MinomatV2)
        return ((MinomatList) this.MyDeviceList).StartHKVEReceptionWindow();
      throw new NotImplementedException("Only valid for MinomatV2");
    }

    public bool SetMinomatV2Configuration(MinomatV2.Configuration configuration)
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.MinomatV2)
        return ((MinomatList) this.MyDeviceList).SetConfiguration(configuration);
      throw new NotImplementedException("Only valid for MinomatV2");
    }

    public MinomatV2.Configuration GetMinomatV2Configuration()
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.MinomatV2)
        return ((MinomatList) this.MyDeviceList).GetConfiguration();
      throw new NotImplementedException("Only valid for MinomatV2");
    }

    public MinomatV2.SystemStatus GetMinomatV2SystemStatus()
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.MinomatV2)
        return ((MinomatList) this.MyDeviceList).GetSystemStatus();
      throw new NotImplementedException("Only valid for MinomatV2");
    }

    public List<string> GetRegisteredHKVE()
    {
      if (this.MyBusMode != ZR_ClassLibrary.BusMode.MinomatV2)
        throw new NotImplementedException("Only valid for MinomatV2");
      List<MinomatDevice> devices = new List<MinomatDevice>();
      List<string> registeredHkve = new List<string>();
      if (((MinomatList) this.MyDeviceList).GetAllRegisteredDevices(out devices, (byte) 0, (byte) 100))
      {
        foreach (MinomatDevice minomatDevice in devices)
          registeredHkve.Add(minomatDevice.Info.MeterNumber);
      }
      return registeredHkve;
    }

    public List<string> GetUnregisteredHKVE()
    {
      if (this.MyBusMode != ZR_ClassLibrary.BusMode.MinomatV2)
        throw new NotImplementedException("Only valid for MinomatV2");
      List<MinomatDevice> devices = new List<MinomatDevice>();
      List<string> unregisteredHkve = new List<string>();
      if (((MinomatList) this.MyDeviceList).GetAllRegisteredDevices(out devices, (byte) 100, (byte) 200))
      {
        foreach (MinomatDevice minomatDevice in devices)
          unregisteredHkve.Add(minomatDevice.Info.MeterNumber);
      }
      return unregisteredHkve;
    }

    public bool RegisterHKVE(List<string> devices)
    {
      if (this.MyBusMode != ZR_ClassLibrary.BusMode.MinomatV2)
        throw new NotImplementedException("Only valid for MinomatV2");
      if (devices == null)
        return false;
      List<MinomatDevice> deviceList = new List<MinomatDevice>();
      foreach (string device in devices)
      {
        MinomatDevice minomatDevice = new MinomatDevice(this);
        minomatDevice.Info.MeterNumber = device;
        deviceList.Add(minomatDevice);
      }
      return this.RegisterHKVE(deviceList);
    }

    public bool RegisterHKVE(MinomatDevice device)
    {
      if (this.MyBusMode != ZR_ClassLibrary.BusMode.MinomatV2)
        throw new NotImplementedException("Only valid for MinomatV2");
      return this.RegisterHKVE(new List<MinomatDevice>()
      {
        device
      });
    }

    public bool RegisterHKVE(List<MinomatDevice> deviceList)
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.MinomatV2)
        return ((MinomatList) this.MyDeviceList).RegisterHKVE(deviceList);
      throw new NotImplementedException("Only valid for MinomatV2");
    }

    public bool DeregisterHKVE(List<string> devices)
    {
      if (this.MyBusMode != ZR_ClassLibrary.BusMode.MinomatV2)
        throw new NotImplementedException("Only valid for MinomatV2");
      if (devices == null)
        return false;
      List<MinomatDevice> deviceList = new List<MinomatDevice>();
      foreach (string device in devices)
      {
        MinomatDevice minomatDevice = new MinomatDevice(this);
        minomatDevice.Info.MeterNumber = device;
        deviceList.Add(minomatDevice);
      }
      return this.DeRegisterHKVE(deviceList);
    }

    public bool DeRegisterHKVE(List<MinomatDevice> deviceList)
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.MinomatV2)
        return ((MinomatList) this.MyDeviceList).DeRegisterHKVE(deviceList);
      throw new NotImplementedException("Only valid for MinomatV2");
    }

    public bool PingSelectedDevice()
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.MinomatV2)
        return ((MinomatList) this.MyDeviceList).ConnectToMinomat();
      throw new NotImplementedException("Only valid for MinomatV2");
    }

    public bool SetTime(DateTime dateTime)
    {
      if (this.MyBusMode == ZR_ClassLibrary.BusMode.MinomatV2)
        return ((MinomatList) this.MyDeviceList).SetMinomatRTC(dateTime);
      throw new NotImplementedException("Only valid for MinomatV2");
    }

    public bool ReadDeviceList()
    {
      this.MyDeviceList = this.GetDeviceListForBusMode();
      SortedList<DeviceCollectorSettings, object> collectorSettings = this.GetDeviceCollectorSettings();
      switch (this.MyBusMode)
      {
        case ZR_ClassLibrary.BusMode.MBusPointToPoint:
        case ZR_ClassLibrary.BusMode.MBus:
        case ZR_ClassLibrary.BusMode.WaveFlowRadio:
        case ZR_ClassLibrary.BusMode.MinomatRadioTest:
        case ZR_ClassLibrary.BusMode.Minol_Device:
        case ZR_ClassLibrary.BusMode.RelayDevice:
        case ZR_ClassLibrary.BusMode.Radio2:
        case ZR_ClassLibrary.BusMode.Radio3:
        case ZR_ClassLibrary.BusMode.Radio4:
        case ZR_ClassLibrary.BusMode.wMBusS1:
        case ZR_ClassLibrary.BusMode.wMBusS1M:
        case ZR_ClassLibrary.BusMode.wMBusS2:
        case ZR_ClassLibrary.BusMode.wMBusT1:
        case ZR_ClassLibrary.BusMode.wMBusT2_meter:
        case ZR_ClassLibrary.BusMode.wMBusT2_other:
        case ZR_ClassLibrary.BusMode.wMBusC1A:
        case ZR_ClassLibrary.BusMode.wMBusC1B:
        case ZR_ClassLibrary.BusMode.Radio3_868_95_RUSSIA:
        case ZR_ClassLibrary.BusMode.RadioMS:
          return false;
        case ZR_ClassLibrary.BusMode.MinomatV2:
          this.MyDeviceList.DeleteBusList();
          MinomatDevice NewDevice1 = new MinomatDevice(this);
          NewDevice1.Info.MeterNumber = collectorSettings[DeviceCollectorSettings.DaKonId].ToString();
          NewDevice1.DeviceType = DeviceTypes.MinomatDevice;
          NewDevice1.Info.DeviceType = NewDevice1.DeviceType;
          NewDevice1.Info.A_Field = byte.MaxValue;
          NewDevice1.PrimaryAddressOk = false;
          this.MyDeviceList.AddDevice((object) NewDevice1, true);
          this.SetSelectedDeviceBySerialNumber(NewDevice1.Info.MeterNumber);
          List<MinomatDevice> devices = new List<MinomatDevice>();
          if (!((MinomatList) this.MyDeviceList).GetAllRegisteredDevices(out devices, (byte) 0, (byte) 200) || devices == null)
            return false;
          foreach (object NewDevice2 in devices)
            this.MyDeviceList.AddDevice(NewDevice2, false);
          return true;
        default:
          throw new NotImplementedException(this.MyBusMode.ToString());
      }
    }

    public bool DeleteSelectedDevice() => this.MyDeviceList.DeleteSelectedDevice();

    public Dictionary<string, string> LoadAvailableCOMservers()
    {
      return this.MyCom.LoadAvailableCOMservers();
    }

    public object ShowWindow(object parameters)
    {
      if (parameters != null)
      {
        if (parameters is string)
          this.SetDeviceCollectorSettings(parameters.ToString());
        else if (parameters is SortedList<DeviceCollectorSettings, object>)
          this.SetDeviceCollectorSettings(parameters as SortedList<DeviceCollectorSettings, object>);
      }
      this.ShowBusWindow();
      return (object) this.GetDeviceCollectorSettings();
    }

    public void SetReadoutConfiguration(ConfigList configList)
    {
      if (this.ReadoutConfigByBusFile)
      {
        this.DisableConfigList();
      }
      else
      {
        if (configList == null)
          throw new ArgumentNullException(nameof (configList));
        if (this.ConfigList == null)
        {
          this.ConfigList = configList;
          this.ConfigList.PropertyChanged += new PropertyChangedEventHandler(this.ConfigList_PropertyChanged);
          this.ConfigList.CollectionChanged += new NotifyCollectionChangedEventHandler(this.ConfigList_CollectionChanged);
        }
        else if (this.ConfigList != configList)
          throw new ArgumentException("this.configList != configList");
        this.SetDeviceCollectorSettings(configList.GetSortedList());
      }
    }

    private void DisableConfigList()
    {
      if (this.ConfigList == null)
        return;
      this.ConfigList.PropertyChanged -= new PropertyChangedEventHandler(this.ConfigList_PropertyChanged);
      this.ConfigList.CollectionChanged -= new NotifyCollectionChangedEventHandler(this.ConfigList_CollectionChanged);
      this.ConfigList = (ConfigList) null;
    }

    private void ConfigList_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
      this.configValuesChanged();
    }

    private void ConfigList_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
      this.configValuesChanged();
    }

    private void configValuesChanged()
    {
      SortedList<string, string> collectorSettingsList = this.GetDeviceCollectorSettingsList();
      SortedList<string, string> settings = new SortedList<string, string>();
      foreach (KeyValuePair<string, string> sorted in this.ConfigList.GetSortedList())
      {
        if (!collectorSettingsList.ContainsKey(sorted.Key) || !(collectorSettingsList[sorted.Key] == sorted.Value))
          settings.Add(sorted.Key, sorted.Value);
      }
      if (settings.Count <= 0)
        return;
      this.SetDeviceCollectorSettings(settings);
    }

    public ConfigList GetReadoutConfiguration() => this.ConfigList;

    public enum Initialise
    {
      BusInfo,
      AsyncCom,
      Both,
    }

    internal enum Functions
    {
      NoFunction,
      ReqUD2,
      ReadVersion,
      ReadMemory,
      WriteMemory,
      ReadParameter,
      DeviceReset,
      TestloopReadEEProm,
      TestloopWriteReadEEProm,
      DeleteMeterKey,
      WriteBitfield,
      RunBackup,
      SetBaudrate,
      SetPrimaryAddress,
      SearchSingleDeviceByPrimaryAddress,
      SearchSingleDeviceBySerialNumber,
      ConnectingToMinomat,
    }
  }
}


--- DeviceCollectorWindow.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.DeviceCollectorWindow
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using CorporateDesign;
using GmmDbLib;
using NLog;
using StartupLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Media;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class DeviceCollectorWindow : Form
  {
    private IContainer components = (IContainer) null;
    private MainMenu SerialBusMenu;
    private TabPage tabPageMemory;
    private TabPage tabPageDeviceParameter;
    private ListBox listBoxLocation;
    private Label label1;
    private TextBox textBoxStartAddress;
    private Label label2;
    private TextBox textBoxNumberOfBytes;
    private Label labelLocation;
    private Button buttonShowMemory;
    private Button buttonReadMemory;
    private TabPage tabPageBusInfo;
    private MenuItem menuFile;
    private MenuItem menuItemReadEEPromLoop;
    private TabControl tabControl;
    private TabPage tabPageBusSetup;
    private TextBox textBoxRepeadsOnError;
    private Label label8;
    private MenuItem menuHelp;
    private MenuItem menuComponent;
    private MenuItem menuStartAsyncCom;
    private MenuItem menuStartDesigner;
    private MenuItem menuStartGlobalMeterManager;
    private Button buttonOk;
    private MenuItem menuMeterMonitor;
    private GroupBox groupBox1;
    private TextBox textBoxAndMask;
    private Label label10;
    private Label label11;
    private TextBox textBoxOrMask;
    private Button buttonWriteBitfield;
    private GroupBox groupBox2;
    private Label label9;
    private TextBox textBoxValue;
    private Button buttonDeleteMeterKey;
    private Button buttonSetBaudrate;
    private DataGrid dataGridParameterList;
    private MenuItem menuRead;
    private MenuItem menuRunBackup;
    private MenuItem menuDeleteBusInfo;
    private MenuItem menuSearchSingleDeviceByAddress;
    private MenuItem menuSearchSingleDeviceBySerialNumber;
    private MenuItem menuWriteBusinfo;
    private MenuItem menuReadBusinfo;
    private MenuItem menuReset;
    private MenuItem menuReadDeviceParameter;
    private MenuItem menuGetVersion;
    private MenuItem menuSetEmergencyMode;
    private MenuItem menuSchnittstellenFehlerLoop;
    private MenuItem menuSerchBaudrate;
    private MenuItem menuEEPromWriteReadLoop;
    private MenuItem menuItem1;
    private MenuItem menuSelectDeviceByPrimaryAddress;
    private MenuItem menuScanByAddress;
    private MenuItem menuItem9;
    private MenuItem menuItem10;
    private Button buttonBreak;
    private Label labelStatus;
    private ContextMenu contextMenu1;
    private MenuItem menuCtSetPrimaryAddress;
    private MenuItem menuCtReadMeterParameter;
    private MenuItem menuItem15;
    private MenuItem menuItemBack;
    private MenuItem menuItemQuit;
    private MenuItem menuTest;
    private MenuItem menuFunction;
    private ToolTip toolTip1;
    private Button buttonToolbarReadDevice;
    private CheckBox checkBoxLoggToFile;
    private Label label4;
    private ComboBox comboBoxLoggToCom;
    private CheckBox checkBoxLoggAllTemp;
    private MenuItem menuItemIO_Test;
    private MenuItem menuScanBySerialNumber;
    private MenuItem menuAddDeviceByParameter;
    private MenuItem menuDeleteDeviceFromBus;
    private Label label15;
    private Label label16;
    private Label label17;
    private TextBox textBoxScanStartNumber;
    private TextBox textBoxOrganizeStartAddress;
    private TextBox textBoxScanStartAddress;
    public MenuItem menuCtDeleteFromBusinfo;
    private MenuItem menuLineSerieX;
    private TabPage tabPageAllParameter;
    private Button buttonShowAll;
    private Button buttonReadAll;
    private MenuItem menuShowAllParameters;
    private MenuItem menuItem12;
    private MenuItem menuReadAll;
    private ComboBox comboBoxBusMode;
    private Label label18;
    private MenuItem menuStartReceiver;
    private MenuItem menuStopReceiver;
    private MenuItem menuBus;
    private MenuItem menuRadio;
    private Button buttonClearAll;
    private MenuItem menuItem7;
    private MenuItem menuDeleteData;
    private MenuItem menuEEPromReset;
    private CheckBox checkBoxKeepDestinationAddress;
    private GroupBox groupBoxLogger;
    private CheckBox checkBoxLoggToZDF_File;
    private GroupBox groupBox3;
    private TextBox textBoxZDF_FileName;
    private MenuItem menuItemShowMeterData;
    private MenuItem menuItem3;
    private CheckBox checkBoxWatchRange;
    private TextBox textBoxAllParameters;
    private Label labelReadoutSystemText;
    private Label labelReadoutSystemVersionText;
    private Label labelReadoutSystem;
    private Label labelReadoutSystemVersion;
    private ProgressBar progressBar;
    private GroupBox groupBoxDeviceInfo;
    private TextBox textBoxManufacturer;
    private Label label5;
    private TextBox textBoxMedium;
    private Label label6;
    private Label label7;
    private TextBox textBoxSerialNr;
    private Label label19;
    private TextBox textBoxReceiveLevel;
    private MenuItem menuTransmitRadioFrame;
    private Button buttonSelectZDF_File;
    private GroupBox groupBoxRadioReadoutSystem;
    private GroupBox groupBoxRadioReceiverSetup;
    private GroupBox groupBoxBaseBusSettings;
    private MenuItem menuRequestLoop;
    private MenuItem menuItem14;
    private Button buttonToolbarReadAllDevices;
    private Button buttonToolbarDeleteBusinfo;
    private Button buttonToolbarScanBusByAddress;
    private Button buttonToolbarScanBusBySerialNumber;
    private Button buttonToolbarSearchSingelDeviceByAddress;
    private Button buttonToolbarSearchSingelDeviceBySerialNumber;
    private MenuItem menuItemCmSetParameterListLine;
    private MenuItem menuCmSetToDefaultParameterList;
    private MenuItem menuCmSetToFullParameterList;
    private MenuItem menuItemShiftToNextAddress;
    private MenuItem menuItemSerialBusHelp;
    private MenuItem menuItemShowWaveFlowParameter;
    private MenuItem menuItemWafeFlowParameterTest;
    private MenuItem menuItem17;
    private MenuItem menuItemLoadZDF_File;
    private MenuItem menuItemExportDataTable;
    private MenuItem menuConnectAcrossBaudrates;
    private MenuItem menuGetVersionTestCycle;
    private CheckBox checkBoxFastSecoundaryAddressing;
    private CheckBox checkBoxOnlySecondaryAddressing;
    private DataGridView dataGridBusTable;
    private TextBox textBoxBusFilePath;
    private TextBox textBoxLoopTime;
    private Label label14;
    private MenuItem menuDevice;
    private MenuItem menuSetSelectedDeviceTo300_Baud;
    private MenuItem menuSetSelectedDeviceTo2400_Baud;
    private MenuItem menuSetSelectedDeviceTo9600_Baud;
    private MenuItem menuItemSetSelectedDeviceToDefaultParameterList;
    private MenuItem menuItemSetSelectedDeviceToFullParameterList;
    private MenuItem menuItemSetAllDevicesToDefaultParameterList;
    private MenuItem menuItemSetAllDevicesToFullParameterList;
    private MenuItem menuSetPrimaryAddress;
    private MenuItem menuOrganize;
    private MenuItem menuSetSelectedDeviceTo38400_Baud;
    private MenuItem menuItemSelectParameterListLine;
    private MenuItem menuItem23;
    private MenuItem menuLineBaud;
    private CheckBox checkBoxChangeInterfaceBaudrateToo;
    private MenuItem menuItemStartWindow;
    private MenuItem menuItemExportExcelDataTable;
    private GroupBox gboxMinomat;
    private Label label13;
    private TextBox textBoxMinomatSerial;
    private DateTimePicker dateTimePickerToTime;
    private DateTimePicker dateTimePickerFromTime;
    private Label label12;
    private Label label20;
    private MenuItem menuItem4;
    private MenuItem menuItemShowInfo;
    private CheckBox checkBoxUseExternalKeySignal;
    private CheckBox checkBoxBeepByReading;
    private MenuItem menuItemRequestLoopAll;
    private DataGridView dataGridViewAllParameter;
    private Button buttonEraseFlash;
    private MenuItem menuCtMBusConverterLine;
    private MenuItem menuCtShowHideColumnsDeviceList;
    private ContextMenu contextMenuAllParameters;
    private MenuItem menuCtShowHideColumnsAllParameters;
    private MenuItem menuItem6;
    private MenuItem menuItem11;
    private MenuItem menuItemSetupProfiles;
    private MenuItem menuItemConfigurator;
    private MenuItem menuItemSelectParameterList;
    private Button btnSetDefaultSettings;
    private MenuItem menuItemMemoryAccess;
    private MenuItem menuItemAblaufTest;
    private TextBox txtFilterBySerialNumber;
    private Label label3;
    private MenuItem menuItem5;
    private Button btnExportToCSV;
    private SplitContainer splitContainerAllParameters;
    private MenuItem menuItem13;
    private MenuItem menuCtMBusConverter;
    private MenuItem menuItemMBusConverterLine;
    private MenuItem menuItemMBusConverter;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private MenuItem menuCtSelectParameterList;
    private MenuItem menuMbusParser;
    private CheckBox checkBoxIsMultitelegrammEnabled;
    private CheckBox checkBoxUseReqUd2_5B;
    private CheckBox checkBoxApplicationReset;
    private CheckBox checkBoxSND_NKE;
    private MenuItem menuItemMinoConnectTest;
    private CheckBox checkBoxAutoSaveSetup;
    private Button buttonAsyncCom;
    private static Logger logger = LogManager.GetLogger(nameof (DeviceCollectorWindow));
    private const string ZDF_FileNameConfig = "ZDF_FileName";
    private const string LoggZDF_FileConfig = "LoggZDF_File";
    private int InfoCounter = 0;
    private int ErrorCounter = 0;
    private DeviceCollectorFunctions MyBus;
    private bool LoopIsRunning = false;
    private MemoryDump MyDump;
    private bool comboBoxBusModeEventsEnabled = true;
    private bool IsRunning = false;
    private bool BusinfoIsManualChanged;
    internal string StartComponentName;
    private DeviceCollector.MBusConverterDiagnostic MBusConverter;
    private EventHandler<GMM_EventArgs> EventObject;
    private bool initActive;
    internal string BaseMessage = string.Empty;
    private int aliveCounter;
    private bool ReadActive = false;
    private bool ModeChangeBreak = false;
    private MemoryAccess MyMemory;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (DeviceCollectorWindow));
      this.splitContainerAllParameters = new SplitContainer();
      this.textBoxAllParameters = new TextBox();
      this.dataGridViewAllParameter = new DataGridView();
      this.btnExportToCSV = new Button();
      this.txtFilterBySerialNumber = new TextBox();
      this.buttonClearAll = new Button();
      this.label3 = new Label();
      this.buttonReadAll = new Button();
      this.buttonShowAll = new Button();
      this.SerialBusMenu = new MainMenu(this.components);
      this.menuFile = new MenuItem();
      this.menuReadBusinfo = new MenuItem();
      this.menuWriteBusinfo = new MenuItem();
      this.menuItem17 = new MenuItem();
      this.menuItemLoadZDF_File = new MenuItem();
      this.menuItemExportDataTable = new MenuItem();
      this.menuItemExportExcelDataTable = new MenuItem();
      this.menuItem11 = new MenuItem();
      this.menuItemSetupProfiles = new MenuItem();
      this.menuBus = new MenuItem();
      this.menuDeleteBusInfo = new MenuItem();
      this.menuDeleteDeviceFromBus = new MenuItem();
      this.menuItem10 = new MenuItem();
      this.menuScanByAddress = new MenuItem();
      this.menuScanBySerialNumber = new MenuItem();
      this.menuItem9 = new MenuItem();
      this.menuSearchSingleDeviceByAddress = new MenuItem();
      this.menuSearchSingleDeviceBySerialNumber = new MenuItem();
      this.menuAddDeviceByParameter = new MenuItem();
      this.menuItem1 = new MenuItem();
      this.menuSelectDeviceByPrimaryAddress = new MenuItem();
      this.menuItem4 = new MenuItem();
      this.menuItemShowInfo = new MenuItem();
      this.menuDevice = new MenuItem();
      this.menuSetPrimaryAddress = new MenuItem();
      this.menuOrganize = new MenuItem();
      this.menuItemSelectParameterListLine = new MenuItem();
      this.menuItemSetSelectedDeviceToDefaultParameterList = new MenuItem();
      this.menuItemSetSelectedDeviceToFullParameterList = new MenuItem();
      this.menuItemSelectParameterList = new MenuItem();
      this.menuItem23 = new MenuItem();
      this.menuItemSetAllDevicesToDefaultParameterList = new MenuItem();
      this.menuItemSetAllDevicesToFullParameterList = new MenuItem();
      this.menuLineBaud = new MenuItem();
      this.menuSetSelectedDeviceTo300_Baud = new MenuItem();
      this.menuSetSelectedDeviceTo2400_Baud = new MenuItem();
      this.menuSetSelectedDeviceTo9600_Baud = new MenuItem();
      this.menuSetSelectedDeviceTo38400_Baud = new MenuItem();
      this.menuItemMBusConverterLine = new MenuItem();
      this.menuItemMBusConverter = new MenuItem();
      this.menuRadio = new MenuItem();
      this.menuStartReceiver = new MenuItem();
      this.menuStopReceiver = new MenuItem();
      this.menuItem7 = new MenuItem();
      this.menuDeleteData = new MenuItem();
      this.menuRead = new MenuItem();
      this.menuReadDeviceParameter = new MenuItem();
      this.menuReadAll = new MenuItem();
      this.menuItem14 = new MenuItem();
      this.menuRequestLoop = new MenuItem();
      this.menuItemRequestLoopAll = new MenuItem();
      this.menuSerchBaudrate = new MenuItem();
      this.menuItem12 = new MenuItem();
      this.menuShowAllParameters = new MenuItem();
      this.menuLineSerieX = new MenuItem();
      this.menuGetVersion = new MenuItem();
      this.menuGetVersionTestCycle = new MenuItem();
      this.menuConnectAcrossBaudrates = new MenuItem();
      this.menuFunction = new MenuItem();
      this.menuReset = new MenuItem();
      this.menuRunBackup = new MenuItem();
      this.menuSetEmergencyMode = new MenuItem();
      this.menuTransmitRadioFrame = new MenuItem();
      this.menuItemShiftToNextAddress = new MenuItem();
      this.menuTest = new MenuItem();
      this.menuItemMemoryAccess = new MenuItem();
      this.menuItemReadEEPromLoop = new MenuItem();
      this.menuMeterMonitor = new MenuItem();
      this.menuSchnittstellenFehlerLoop = new MenuItem();
      this.menuEEPromWriteReadLoop = new MenuItem();
      this.menuEEPromReset = new MenuItem();
      this.menuItemIO_Test = new MenuItem();
      this.menuItemShowWaveFlowParameter = new MenuItem();
      this.menuItemWafeFlowParameterTest = new MenuItem();
      this.menuItemAblaufTest = new MenuItem();
      this.menuItem5 = new MenuItem();
      this.menuMbusParser = new MenuItem();
      this.menuItemMinoConnectTest = new MenuItem();
      this.menuComponent = new MenuItem();
      this.menuItemStartWindow = new MenuItem();
      this.menuStartGlobalMeterManager = new MenuItem();
      this.menuItemBack = new MenuItem();
      this.menuItemQuit = new MenuItem();
      this.menuItem15 = new MenuItem();
      this.menuStartDesigner = new MenuItem();
      this.menuItemConfigurator = new MenuItem();
      this.menuStartAsyncCom = new MenuItem();
      this.menuHelp = new MenuItem();
      this.menuItemSerialBusHelp = new MenuItem();
      this.menuItem6 = new MenuItem();
      this.tabControl = new TabControl();
      this.tabPageBusInfo = new TabPage();
      this.contextMenu1 = new ContextMenu();
      this.menuCtReadMeterParameter = new MenuItem();
      this.menuItemShowMeterData = new MenuItem();
      this.menuItem3 = new MenuItem();
      this.menuCtSetPrimaryAddress = new MenuItem();
      this.menuCtDeleteFromBusinfo = new MenuItem();
      this.menuItemCmSetParameterListLine = new MenuItem();
      this.menuCmSetToDefaultParameterList = new MenuItem();
      this.menuCmSetToFullParameterList = new MenuItem();
      this.menuCtSelectParameterList = new MenuItem();
      this.menuCtMBusConverterLine = new MenuItem();
      this.menuCtMBusConverter = new MenuItem();
      this.menuItem13 = new MenuItem();
      this.menuCtShowHideColumnsDeviceList = new MenuItem();
      this.textBoxBusFilePath = new TextBox();
      this.dataGridBusTable = new DataGridView();
      this.tabPageAllParameter = new TabPage();
      this.contextMenuAllParameters = new ContextMenu();
      this.menuCtShowHideColumnsAllParameters = new MenuItem();
      this.tabPageDeviceParameter = new TabPage();
      this.groupBoxDeviceInfo = new GroupBox();
      this.textBoxManufacturer = new TextBox();
      this.label5 = new Label();
      this.textBoxMedium = new TextBox();
      this.label6 = new Label();
      this.label7 = new Label();
      this.textBoxSerialNr = new TextBox();
      this.groupBoxRadioReadoutSystem = new GroupBox();
      this.labelReadoutSystemText = new Label();
      this.labelReadoutSystemVersionText = new Label();
      this.labelReadoutSystem = new Label();
      this.labelReadoutSystemVersion = new Label();
      this.dataGridParameterList = new DataGrid();
      this.tabPageBusSetup = new TabPage();
      this.btnSetDefaultSettings = new Button();
      this.gboxMinomat = new GroupBox();
      this.dateTimePickerToTime = new DateTimePicker();
      this.dateTimePickerFromTime = new DateTimePicker();
      this.label12 = new Label();
      this.label20 = new Label();
      this.textBoxMinomatSerial = new TextBox();
      this.label13 = new Label();
      this.groupBoxRadioReceiverSetup = new GroupBox();
      this.textBoxReceiveLevel = new TextBox();
      this.label19 = new Label();
      this.groupBox3 = new GroupBox();
      this.buttonSelectZDF_File = new Button();
      this.textBoxZDF_FileName = new TextBox();
      this.checkBoxLoggToZDF_File = new CheckBox();
      this.groupBoxBaseBusSettings = new GroupBox();
      this.checkBoxSND_NKE = new CheckBox();
      this.checkBoxUseReqUd2_5B = new CheckBox();
      this.checkBoxApplicationReset = new CheckBox();
      this.checkBoxIsMultitelegrammEnabled = new CheckBox();
      this.textBoxLoopTime = new TextBox();
      this.checkBoxFastSecoundaryAddressing = new CheckBox();
      this.label14 = new Label();
      this.checkBoxOnlySecondaryAddressing = new CheckBox();
      this.checkBoxBeepByReading = new CheckBox();
      this.checkBoxUseExternalKeySignal = new CheckBox();
      this.checkBoxChangeInterfaceBaudrateToo = new CheckBox();
      this.checkBoxKeepDestinationAddress = new CheckBox();
      this.label15 = new Label();
      this.comboBoxBusMode = new ComboBox();
      this.label16 = new Label();
      this.label8 = new Label();
      this.label17 = new Label();
      this.textBoxRepeadsOnError = new TextBox();
      this.textBoxScanStartAddress = new TextBox();
      this.label18 = new Label();
      this.textBoxScanStartNumber = new TextBox();
      this.textBoxOrganizeStartAddress = new TextBox();
      this.groupBoxLogger = new GroupBox();
      this.comboBoxLoggToCom = new ComboBox();
      this.label4 = new Label();
      this.checkBoxLoggToFile = new CheckBox();
      this.checkBoxLoggAllTemp = new CheckBox();
      this.checkBoxAutoSaveSetup = new CheckBox();
      this.tabPageMemory = new TabPage();
      this.checkBoxWatchRange = new CheckBox();
      this.groupBox2 = new GroupBox();
      this.buttonDeleteMeterKey = new Button();
      this.label9 = new Label();
      this.textBoxValue = new TextBox();
      this.buttonSetBaudrate = new Button();
      this.groupBox1 = new GroupBox();
      this.textBoxAndMask = new TextBox();
      this.label10 = new Label();
      this.label11 = new Label();
      this.textBoxOrMask = new TextBox();
      this.buttonWriteBitfield = new Button();
      this.listBoxLocation = new ListBox();
      this.label1 = new Label();
      this.textBoxStartAddress = new TextBox();
      this.label2 = new Label();
      this.textBoxNumberOfBytes = new TextBox();
      this.labelLocation = new Label();
      this.buttonEraseFlash = new Button();
      this.buttonShowMemory = new Button();
      this.buttonReadMemory = new Button();
      this.progressBar = new ProgressBar();
      this.buttonOk = new Button();
      this.buttonBreak = new Button();
      this.labelStatus = new Label();
      this.buttonToolbarReadAllDevices = new Button();
      this.buttonToolbarReadDevice = new Button();
      this.toolTip1 = new ToolTip(this.components);
      this.buttonToolbarDeleteBusinfo = new Button();
      this.buttonToolbarScanBusByAddress = new Button();
      this.buttonToolbarScanBusBySerialNumber = new Button();
      this.buttonToolbarSearchSingelDeviceByAddress = new Button();
      this.buttonToolbarSearchSingelDeviceBySerialNumber = new Button();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.buttonAsyncCom = new Button();
      this.splitContainerAllParameters.BeginInit();
      this.splitContainerAllParameters.Panel1.SuspendLayout();
      this.splitContainerAllParameters.Panel2.SuspendLayout();
      this.splitContainerAllParameters.SuspendLayout();
      ((ISupportInitialize) this.dataGridViewAllParameter).BeginInit();
      this.tabControl.SuspendLayout();
      this.tabPageBusInfo.SuspendLayout();
      ((ISupportInitialize) this.dataGridBusTable).BeginInit();
      this.tabPageAllParameter.SuspendLayout();
      this.tabPageDeviceParameter.SuspendLayout();
      this.groupBoxDeviceInfo.SuspendLayout();
      this.groupBoxRadioReadoutSystem.SuspendLayout();
      this.dataGridParameterList.BeginInit();
      this.tabPageBusSetup.SuspendLayout();
      this.gboxMinomat.SuspendLayout();
      this.groupBoxRadioReceiverSetup.SuspendLayout();
      this.groupBox3.SuspendLayout();
      this.groupBoxBaseBusSettings.SuspendLayout();
      this.groupBoxLogger.SuspendLayout();
      this.tabPageMemory.SuspendLayout();
      this.groupBox2.SuspendLayout();
      this.groupBox1.SuspendLayout();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.splitContainerAllParameters, "splitContainerAllParameters");
      this.splitContainerAllParameters.FixedPanel = FixedPanel.Panel1;
      this.splitContainerAllParameters.Name = "splitContainerAllParameters";
      this.splitContainerAllParameters.Panel1.Controls.Add((Control) this.textBoxAllParameters);
      this.splitContainerAllParameters.Panel2.Controls.Add((Control) this.dataGridViewAllParameter);
      this.splitContainerAllParameters.Panel2.Controls.Add((Control) this.btnExportToCSV);
      this.splitContainerAllParameters.Panel2.Controls.Add((Control) this.txtFilterBySerialNumber);
      this.splitContainerAllParameters.Panel2.Controls.Add((Control) this.buttonClearAll);
      this.splitContainerAllParameters.Panel2.Controls.Add((Control) this.label3);
      this.splitContainerAllParameters.Panel2.Controls.Add((Control) this.buttonReadAll);
      this.splitContainerAllParameters.Panel2.Controls.Add((Control) this.buttonShowAll);
      this.textBoxAllParameters.BorderStyle = BorderStyle.FixedSingle;
      componentResourceManager.ApplyResources((object) this.textBoxAllParameters, "textBoxAllParameters");
      this.textBoxAllParameters.Name = "textBoxAllParameters";
      this.textBoxAllParameters.ReadOnly = true;
      this.dataGridViewAllParameter.AllowUserToAddRows = false;
      this.dataGridViewAllParameter.AllowUserToDeleteRows = false;
      this.dataGridViewAllParameter.AllowUserToOrderColumns = true;
      componentResourceManager.ApplyResources((object) this.dataGridViewAllParameter, "dataGridViewAllParameter");
      this.dataGridViewAllParameter.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dataGridViewAllParameter.Name = "dataGridViewAllParameter";
      this.dataGridViewAllParameter.ReadOnly = true;
      this.dataGridViewAllParameter.RowTemplate.Height = 24;
      this.dataGridViewAllParameter.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      componentResourceManager.ApplyResources((object) this.btnExportToCSV, "btnExportToCSV");
      this.btnExportToCSV.Name = "btnExportToCSV";
      this.btnExportToCSV.UseVisualStyleBackColor = true;
      this.btnExportToCSV.Click += new System.EventHandler(this.btnExportToCSV_Click);
      componentResourceManager.ApplyResources((object) this.txtFilterBySerialNumber, "txtFilterBySerialNumber");
      this.txtFilterBySerialNumber.Name = "txtFilterBySerialNumber";
      componentResourceManager.ApplyResources((object) this.buttonClearAll, "buttonClearAll");
      this.buttonClearAll.Name = "buttonClearAll";
      this.buttonClearAll.Click += new System.EventHandler(this.buttonClearAll_Click);
      componentResourceManager.ApplyResources((object) this.label3, "label3");
      this.label3.Name = "label3";
      componentResourceManager.ApplyResources((object) this.buttonReadAll, "buttonReadAll");
      this.buttonReadAll.Name = "buttonReadAll";
      this.buttonReadAll.Click += new System.EventHandler(this.buttonReadAll_Click);
      componentResourceManager.ApplyResources((object) this.buttonShowAll, "buttonShowAll");
      this.buttonShowAll.Name = "buttonShowAll";
      this.buttonShowAll.Click += new System.EventHandler(this.buttonShowAll_Click);
      this.SerialBusMenu.MenuItems.AddRange(new MenuItem[9]
      {
        this.menuFile,
        this.menuBus,
        this.menuDevice,
        this.menuRadio,
        this.menuRead,
        this.menuFunction,
        this.menuTest,
        this.menuComponent,
        this.menuHelp
      });
      this.menuFile.Index = 0;
      this.menuFile.MenuItems.AddRange(new MenuItem[8]
      {
        this.menuReadBusinfo,
        this.menuWriteBusinfo,
        this.menuItem17,
        this.menuItemLoadZDF_File,
        this.menuItemExportDataTable,
        this.menuItemExportExcelDataTable,
        this.menuItem11,
        this.menuItemSetupProfiles
      });
      componentResourceManager.ApplyResources((object) this.menuFile, "menuFile");
      this.menuReadBusinfo.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuReadBusinfo, "menuReadBusinfo");
      this.menuReadBusinfo.Click += new System.EventHandler(this.menuReadBusinfo_Click);
      this.menuWriteBusinfo.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuWriteBusinfo, "menuWriteBusinfo");
      this.menuWriteBusinfo.Click += new System.EventHandler(this.menuWriteBusinfo_Click);
      this.menuItem17.Index = 2;
      componentResourceManager.ApplyResources((object) this.menuItem17, "menuItem17");
      this.menuItemLoadZDF_File.Index = 3;
      componentResourceManager.ApplyResources((object) this.menuItemLoadZDF_File, "menuItemLoadZDF_File");
      this.menuItemLoadZDF_File.Click += new System.EventHandler(this.menuItemLoadZDF_File_Click);
      this.menuItemExportDataTable.Index = 4;
      componentResourceManager.ApplyResources((object) this.menuItemExportDataTable, "menuItemExportDataTable");
      this.menuItemExportDataTable.Click += new System.EventHandler(this.menuItemExportDataTable_Click);
      this.menuItemExportExcelDataTable.Index = 5;
      componentResourceManager.ApplyResources((object) this.menuItemExportExcelDataTable, "menuItemExportExcelDataTable");
      this.menuItemExportExcelDataTable.Click += new System.EventHandler(this.menuItemExportExcelDataTable_Click);
      this.menuItem11.Index = 6;
      componentResourceManager.ApplyResources((object) this.menuItem11, "menuItem11");
      this.menuItemSetupProfiles.Index = 7;
      componentResourceManager.ApplyResources((object) this.menuItemSetupProfiles, "menuItemSetupProfiles");
      this.menuItemSetupProfiles.Click += new System.EventHandler(this.menuItemSetupProfiles_Click);
      this.menuBus.Index = 1;
      this.menuBus.MenuItems.AddRange(new MenuItem[13]
      {
        this.menuDeleteBusInfo,
        this.menuDeleteDeviceFromBus,
        this.menuItem10,
        this.menuScanByAddress,
        this.menuScanBySerialNumber,
        this.menuItem9,
        this.menuSearchSingleDeviceByAddress,
        this.menuSearchSingleDeviceBySerialNumber,
        this.menuAddDeviceByParameter,
        this.menuItem1,
        this.menuSelectDeviceByPrimaryAddress,
        this.menuItem4,
        this.menuItemShowInfo
      });
      componentResourceManager.ApplyResources((object) this.menuBus, "menuBus");
      this.menuDeleteBusInfo.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuDeleteBusInfo, "menuDeleteBusInfo");
      this.menuDeleteBusInfo.Click += new System.EventHandler(this.menuDeleteBusInfo_Click);
      this.menuDeleteDeviceFromBus.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuDeleteDeviceFromBus, "menuDeleteDeviceFromBus");
      this.menuDeleteDeviceFromBus.Click += new System.EventHandler(this.menuDeleteDeviceFromBus_Click);
      this.menuItem10.Index = 2;
      componentResourceManager.ApplyResources((object) this.menuItem10, "menuItem10");
      this.menuScanByAddress.Index = 3;
      componentResourceManager.ApplyResources((object) this.menuScanByAddress, "menuScanByAddress");
      this.menuScanByAddress.Click += new System.EventHandler(this.menuScanByAddress_Click);
      this.menuScanBySerialNumber.Index = 4;
      componentResourceManager.ApplyResources((object) this.menuScanBySerialNumber, "menuScanBySerialNumber");
      this.menuScanBySerialNumber.Click += new System.EventHandler(this.menuScanBySerialNumber_Click);
      this.menuItem9.Index = 5;
      componentResourceManager.ApplyResources((object) this.menuItem9, "menuItem9");
      this.menuSearchSingleDeviceByAddress.Index = 6;
      componentResourceManager.ApplyResources((object) this.menuSearchSingleDeviceByAddress, "menuSearchSingleDeviceByAddress");
      this.menuSearchSingleDeviceByAddress.Click += new System.EventHandler(this.menuSearchSingleDeviceByAddress_Click);
      this.menuSearchSingleDeviceBySerialNumber.Index = 7;
      componentResourceManager.ApplyResources((object) this.menuSearchSingleDeviceBySerialNumber, "menuSearchSingleDeviceBySerialNumber");
      this.menuSearchSingleDeviceBySerialNumber.Click += new System.EventHandler(this.menuSearchSingleDeviceBySerialNumber_Click);
      this.menuAddDeviceByParameter.Index = 8;
      componentResourceManager.ApplyResources((object) this.menuAddDeviceByParameter, "menuAddDeviceByParameter");
      this.menuAddDeviceByParameter.Click += new System.EventHandler(this.menuAddDeviceByParameter_Click);
      this.menuItem1.Index = 9;
      componentResourceManager.ApplyResources((object) this.menuItem1, "menuItem1");
      this.menuSelectDeviceByPrimaryAddress.Index = 10;
      componentResourceManager.ApplyResources((object) this.menuSelectDeviceByPrimaryAddress, "menuSelectDeviceByPrimaryAddress");
      this.menuSelectDeviceByPrimaryAddress.Click += new System.EventHandler(this.menuSelectDeviceByPrimaryAddress_Click);
      this.menuItem4.Index = 11;
      componentResourceManager.ApplyResources((object) this.menuItem4, "menuItem4");
      this.menuItemShowInfo.Index = 12;
      componentResourceManager.ApplyResources((object) this.menuItemShowInfo, "menuItemShowInfo");
      this.menuItemShowInfo.Click += new System.EventHandler(this.menuItemShowInfo_Click);
      this.menuDevice.Index = 2;
      this.menuDevice.MenuItems.AddRange(new MenuItem[16]
      {
        this.menuSetPrimaryAddress,
        this.menuOrganize,
        this.menuItemSelectParameterListLine,
        this.menuItemSetSelectedDeviceToDefaultParameterList,
        this.menuItemSetSelectedDeviceToFullParameterList,
        this.menuItemSelectParameterList,
        this.menuItem23,
        this.menuItemSetAllDevicesToDefaultParameterList,
        this.menuItemSetAllDevicesToFullParameterList,
        this.menuLineBaud,
        this.menuSetSelectedDeviceTo300_Baud,
        this.menuSetSelectedDeviceTo2400_Baud,
        this.menuSetSelectedDeviceTo9600_Baud,
        this.menuSetSelectedDeviceTo38400_Baud,
        this.menuItemMBusConverterLine,
        this.menuItemMBusConverter
      });
      componentResourceManager.ApplyResources((object) this.menuDevice, "menuDevice");
      this.menuSetPrimaryAddress.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuSetPrimaryAddress, "menuSetPrimaryAddress");
      this.menuSetPrimaryAddress.Click += new System.EventHandler(this.menuSetPrimaryAddress_Click);
      this.menuOrganize.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuOrganize, "menuOrganize");
      this.menuOrganize.Click += new System.EventHandler(this.menuOrganize_Click);
      this.menuItemSelectParameterListLine.Index = 2;
      componentResourceManager.ApplyResources((object) this.menuItemSelectParameterListLine, "menuItemSelectParameterListLine");
      this.menuItemSetSelectedDeviceToDefaultParameterList.Index = 3;
      componentResourceManager.ApplyResources((object) this.menuItemSetSelectedDeviceToDefaultParameterList, "menuItemSetSelectedDeviceToDefaultParameterList");
      this.menuItemSetSelectedDeviceToDefaultParameterList.Click += new System.EventHandler(this.menuItemSetSelectedDeviceToDefaultParameterList_Click);
      this.menuItemSetSelectedDeviceToFullParameterList.Index = 4;
      componentResourceManager.ApplyResources((object) this.menuItemSetSelectedDeviceToFullParameterList, "menuItemSetSelectedDeviceToFullParameterList");
      this.menuItemSetSelectedDeviceToFullParameterList.Click += new System.EventHandler(this.menuItemSetSelectedDeviceToFullParameterList_Click);
      this.menuItemSelectParameterList.Index = 5;
      componentResourceManager.ApplyResources((object) this.menuItemSelectParameterList, "menuItemSelectParameterList");
      this.menuItemSelectParameterList.Click += new System.EventHandler(this.menuItemSelectParameterList_Click);
      this.menuItem23.Index = 6;
      componentResourceManager.ApplyResources((object) this.menuItem23, "menuItem23");
      this.menuItemSetAllDevicesToDefaultParameterList.Index = 7;
      componentResourceManager.ApplyResources((object) this.menuItemSetAllDevicesToDefaultParameterList, "menuItemSetAllDevicesToDefaultParameterList");
      this.menuItemSetAllDevicesToDefaultParameterList.Click += new System.EventHandler(this.menuItemSetAllDevicesToDefaultParameterList_Click);
      this.menuItemSetAllDevicesToFullParameterList.Index = 8;
      componentResourceManager.ApplyResources((object) this.menuItemSetAllDevicesToFullParameterList, "menuItemSetAllDevicesToFullParameterList");
      this.menuItemSetAllDevicesToFullParameterList.Click += new System.EventHandler(this.menuItemSetAllDevicesToFullParameterList_Click);
      this.menuLineBaud.Index = 9;
      componentResourceManager.ApplyResources((object) this.menuLineBaud, "menuLineBaud");
      this.menuSetSelectedDeviceTo300_Baud.Index = 10;
      componentResourceManager.ApplyResources((object) this.menuSetSelectedDeviceTo300_Baud, "menuSetSelectedDeviceTo300_Baud");
      this.menuSetSelectedDeviceTo300_Baud.Click += new System.EventHandler(this.menuSetSelectedDeviceTo300_Baud_Click);
      this.menuSetSelectedDeviceTo2400_Baud.Index = 11;
      componentResourceManager.ApplyResources((object) this.menuSetSelectedDeviceTo2400_Baud, "menuSetSelectedDeviceTo2400_Baud");
      this.menuSetSelectedDeviceTo2400_Baud.Click += new System.EventHandler(this.menuSetSelectedDeviceTo2400_Baud_Click);
      this.menuSetSelectedDeviceTo9600_Baud.Index = 12;
      componentResourceManager.ApplyResources((object) this.menuSetSelectedDeviceTo9600_Baud, "menuSetSelectedDeviceTo9600_Baud");
      this.menuSetSelectedDeviceTo9600_Baud.Click += new System.EventHandler(this.menuSetSelectedDeviceTo9600_Baud_Click);
      this.menuSetSelectedDeviceTo38400_Baud.Index = 13;
      componentResourceManager.ApplyResources((object) this.menuSetSelectedDeviceTo38400_Baud, "menuSetSelectedDeviceTo38400_Baud");
      this.menuSetSelectedDeviceTo38400_Baud.Click += new System.EventHandler(this.menuSetSelectedDeviceTo38400_Baud_Click);
      this.menuItemMBusConverterLine.Index = 14;
      componentResourceManager.ApplyResources((object) this.menuItemMBusConverterLine, "menuItemMBusConverterLine");
      this.menuItemMBusConverter.Index = 15;
      componentResourceManager.ApplyResources((object) this.menuItemMBusConverter, "menuItemMBusConverter");
      this.menuItemMBusConverter.Click += new System.EventHandler(this.menuItemMBusConverter_Click);
      this.menuRadio.Index = 3;
      this.menuRadio.MenuItems.AddRange(new MenuItem[4]
      {
        this.menuStartReceiver,
        this.menuStopReceiver,
        this.menuItem7,
        this.menuDeleteData
      });
      componentResourceManager.ApplyResources((object) this.menuRadio, "menuRadio");
      this.menuStartReceiver.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuStartReceiver, "menuStartReceiver");
      this.menuStartReceiver.Click += new System.EventHandler(this.menuStartReceiver_Click);
      this.menuStopReceiver.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuStopReceiver, "menuStopReceiver");
      this.menuStopReceiver.Click += new System.EventHandler(this.menuStopReceiver_Click);
      this.menuItem7.Index = 2;
      componentResourceManager.ApplyResources((object) this.menuItem7, "menuItem7");
      this.menuDeleteData.Index = 3;
      componentResourceManager.ApplyResources((object) this.menuDeleteData, "menuDeleteData");
      this.menuDeleteData.Click += new System.EventHandler(this.menuDeleteData_Click);
      this.menuRead.Index = 4;
      this.menuRead.MenuItems.AddRange(new MenuItem[12]
      {
        this.menuReadDeviceParameter,
        this.menuReadAll,
        this.menuItem14,
        this.menuRequestLoop,
        this.menuItemRequestLoopAll,
        this.menuSerchBaudrate,
        this.menuItem12,
        this.menuShowAllParameters,
        this.menuLineSerieX,
        this.menuGetVersion,
        this.menuGetVersionTestCycle,
        this.menuConnectAcrossBaudrates
      });
      componentResourceManager.ApplyResources((object) this.menuRead, "menuRead");
      this.menuReadDeviceParameter.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuReadDeviceParameter, "menuReadDeviceParameter");
      this.menuReadDeviceParameter.Click += new System.EventHandler(this.menuReadDeviceParameter_Click);
      this.menuReadAll.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuReadAll, "menuReadAll");
      this.menuReadAll.Click += new System.EventHandler(this.menuReadAll_Click);
      this.menuItem14.Index = 2;
      componentResourceManager.ApplyResources((object) this.menuItem14, "menuItem14");
      this.menuRequestLoop.Index = 3;
      componentResourceManager.ApplyResources((object) this.menuRequestLoop, "menuRequestLoop");
      this.menuRequestLoop.Click += new System.EventHandler(this.menuRequestLoop_Click);
      this.menuItemRequestLoopAll.Index = 4;
      componentResourceManager.ApplyResources((object) this.menuItemRequestLoopAll, "menuItemRequestLoopAll");
      this.menuItemRequestLoopAll.Click += new System.EventHandler(this.menuItemRequestLoopAll_Click);
      this.menuSerchBaudrate.Index = 5;
      componentResourceManager.ApplyResources((object) this.menuSerchBaudrate, "menuSerchBaudrate");
      this.menuSerchBaudrate.Click += new System.EventHandler(this.menuSerchBaudrate_Click);
      this.menuItem12.Index = 6;
      componentResourceManager.ApplyResources((object) this.menuItem12, "menuItem12");
      this.menuShowAllParameters.Index = 7;
      componentResourceManager.ApplyResources((object) this.menuShowAllParameters, "menuShowAllParameters");
      this.menuShowAllParameters.Click += new System.EventHandler(this.menuShowAllParameters_Click);
      this.menuLineSerieX.Index = 8;
      componentResourceManager.ApplyResources((object) this.menuLineSerieX, "menuLineSerieX");
      this.menuGetVersion.Index = 9;
      componentResourceManager.ApplyResources((object) this.menuGetVersion, "menuGetVersion");
      this.menuGetVersion.Click += new System.EventHandler(this.menuGetVersion_Click);
      this.menuGetVersionTestCycle.Index = 10;
      componentResourceManager.ApplyResources((object) this.menuGetVersionTestCycle, "menuGetVersionTestCycle");
      this.menuGetVersionTestCycle.Click += new System.EventHandler(this.menuGetVersionTestCycle_Click);
      this.menuConnectAcrossBaudrates.Index = 11;
      componentResourceManager.ApplyResources((object) this.menuConnectAcrossBaudrates, "menuConnectAcrossBaudrates");
      this.menuConnectAcrossBaudrates.Click += new System.EventHandler(this.menuConnectAcrossBaudrates_Click);
      this.menuFunction.Index = 5;
      this.menuFunction.MenuItems.AddRange(new MenuItem[5]
      {
        this.menuReset,
        this.menuRunBackup,
        this.menuSetEmergencyMode,
        this.menuTransmitRadioFrame,
        this.menuItemShiftToNextAddress
      });
      componentResourceManager.ApplyResources((object) this.menuFunction, "menuFunction");
      this.menuReset.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuReset, "menuReset");
      this.menuReset.Click += new System.EventHandler(this.menuReset_Click);
      this.menuRunBackup.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuRunBackup, "menuRunBackup");
      this.menuRunBackup.Click += new System.EventHandler(this.menuRunBackup_Click);
      this.menuSetEmergencyMode.Index = 2;
      componentResourceManager.ApplyResources((object) this.menuSetEmergencyMode, "menuSetEmergencyMode");
      this.menuSetEmergencyMode.Click += new System.EventHandler(this.menuSetEmergencyMode_Click);
      this.menuTransmitRadioFrame.Index = 3;
      componentResourceManager.ApplyResources((object) this.menuTransmitRadioFrame, "menuTransmitRadioFrame");
      this.menuTransmitRadioFrame.Click += new System.EventHandler(this.menuTransmitRadioFrame_Click);
      this.menuItemShiftToNextAddress.Index = 4;
      componentResourceManager.ApplyResources((object) this.menuItemShiftToNextAddress, "menuItemShiftToNextAddress");
      this.menuItemShiftToNextAddress.Click += new System.EventHandler(this.menuItemShiftToNextAddress_Click);
      this.menuTest.Index = 6;
      this.menuTest.MenuItems.AddRange(new MenuItem[13]
      {
        this.menuItemMemoryAccess,
        this.menuItemReadEEPromLoop,
        this.menuMeterMonitor,
        this.menuSchnittstellenFehlerLoop,
        this.menuEEPromWriteReadLoop,
        this.menuEEPromReset,
        this.menuItemIO_Test,
        this.menuItemShowWaveFlowParameter,
        this.menuItemWafeFlowParameterTest,
        this.menuItemAblaufTest,
        this.menuItem5,
        this.menuMbusParser,
        this.menuItemMinoConnectTest
      });
      componentResourceManager.ApplyResources((object) this.menuTest, "menuTest");
      this.menuItemMemoryAccess.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuItemMemoryAccess, "menuItemMemoryAccess");
      this.menuItemMemoryAccess.Click += new System.EventHandler(this.menuItemMemoryAccess_Click);
      this.menuItemReadEEPromLoop.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuItemReadEEPromLoop, "menuItemReadEEPromLoop");
      this.menuItemReadEEPromLoop.Click += new System.EventHandler(this.menuItemReadEEPromLoop_Click);
      this.menuMeterMonitor.Index = 2;
      componentResourceManager.ApplyResources((object) this.menuMeterMonitor, "menuMeterMonitor");
      this.menuMeterMonitor.Click += new System.EventHandler(this.menuMeterMonitor_Click);
      this.menuSchnittstellenFehlerLoop.Index = 3;
      componentResourceManager.ApplyResources((object) this.menuSchnittstellenFehlerLoop, "menuSchnittstellenFehlerLoop");
      this.menuSchnittstellenFehlerLoop.Click += new System.EventHandler(this.menuSchnittstellenFehlerLoop_Click);
      this.menuEEPromWriteReadLoop.Index = 4;
      componentResourceManager.ApplyResources((object) this.menuEEPromWriteReadLoop, "menuEEPromWriteReadLoop");
      this.menuEEPromWriteReadLoop.Click += new System.EventHandler(this.menuEEPromWriteReadLoop_Click);
      this.menuEEPromReset.Index = 5;
      componentResourceManager.ApplyResources((object) this.menuEEPromReset, "menuEEPromReset");
      this.menuEEPromReset.Click += new System.EventHandler(this.menuEEPromReset_Click);
      this.menuItemIO_Test.Index = 6;
      componentResourceManager.ApplyResources((object) this.menuItemIO_Test, "menuItemIO_Test");
      this.menuItemIO_Test.Click += new System.EventHandler(this.menuItemIO_Test_Click);
      this.menuItemShowWaveFlowParameter.Index = 7;
      componentResourceManager.ApplyResources((object) this.menuItemShowWaveFlowParameter, "menuItemShowWaveFlowParameter");
      this.menuItemShowWaveFlowParameter.Click += new System.EventHandler(this.menuItemShowWaveFlowParameter_Click);
      this.menuItemWafeFlowParameterTest.Index = 8;
      componentResourceManager.ApplyResources((object) this.menuItemWafeFlowParameterTest, "menuItemWafeFlowParameterTest");
      this.menuItemWafeFlowParameterTest.Click += new System.EventHandler(this.menuItemWafeFlowParameterTest_Click);
      this.menuItemAblaufTest.Index = 9;
      componentResourceManager.ApplyResources((object) this.menuItemAblaufTest, "menuItemAblaufTest");
      this.menuItemAblaufTest.Click += new System.EventHandler(this.menuItemAblaufTest_Click);
      this.menuItem5.Index = 10;
      componentResourceManager.ApplyResources((object) this.menuItem5, "menuItem5");
      this.menuItem5.Click += new System.EventHandler(this.menuItem5_Click);
      this.menuMbusParser.Index = 11;
      componentResourceManager.ApplyResources((object) this.menuMbusParser, "menuMbusParser");
      this.menuMbusParser.Click += new System.EventHandler(this.menuMbusParser_Click);
      this.menuItemMinoConnectTest.Index = 12;
      componentResourceManager.ApplyResources((object) this.menuItemMinoConnectTest, "menuItemMinoConnectTest");
      this.menuItemMinoConnectTest.Click += new System.EventHandler(this.menuItemMinoConnectTest_Click);
      this.menuComponent.Index = 7;
      this.menuComponent.MenuItems.AddRange(new MenuItem[8]
      {
        this.menuItemStartWindow,
        this.menuStartGlobalMeterManager,
        this.menuItemBack,
        this.menuItemQuit,
        this.menuItem15,
        this.menuStartDesigner,
        this.menuItemConfigurator,
        this.menuStartAsyncCom
      });
      componentResourceManager.ApplyResources((object) this.menuComponent, "menuComponent");
      this.menuItemStartWindow.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuItemStartWindow, "menuItemStartWindow");
      this.menuItemStartWindow.Click += new System.EventHandler(this.menuItemStartWindow_Click);
      this.menuStartGlobalMeterManager.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuStartGlobalMeterManager, "menuStartGlobalMeterManager");
      this.menuStartGlobalMeterManager.Click += new System.EventHandler(this.menuStartGlobalMeterManager_Click);
      this.menuItemBack.Index = 2;
      componentResourceManager.ApplyResources((object) this.menuItemBack, "menuItemBack");
      this.menuItemBack.Click += new System.EventHandler(this.menuItemBack_Click);
      this.menuItemQuit.Index = 3;
      componentResourceManager.ApplyResources((object) this.menuItemQuit, "menuItemQuit");
      this.menuItemQuit.Click += new System.EventHandler(this.menuItemQuit_Click);
      this.menuItem15.Index = 4;
      componentResourceManager.ApplyResources((object) this.menuItem15, "menuItem15");
      this.menuStartDesigner.Index = 5;
      componentResourceManager.ApplyResources((object) this.menuStartDesigner, "menuStartDesigner");
      this.menuStartDesigner.Click += new System.EventHandler(this.menuStartDesigner_Click);
      this.menuItemConfigurator.Index = 6;
      componentResourceManager.ApplyResources((object) this.menuItemConfigurator, "menuItemConfigurator");
      this.menuItemConfigurator.Click += new System.EventHandler(this.menuItemConfigurator_Click);
      this.menuStartAsyncCom.Index = 7;
      componentResourceManager.ApplyResources((object) this.menuStartAsyncCom, "menuStartAsyncCom");
      this.menuStartAsyncCom.Click += new System.EventHandler(this.menuStartAsyncCom_Click);
      this.menuHelp.Index = 8;
      this.menuHelp.MenuItems.AddRange(new MenuItem[2]
      {
        this.menuItemSerialBusHelp,
        this.menuItem6
      });
      componentResourceManager.ApplyResources((object) this.menuHelp, "menuHelp");
      this.menuItemSerialBusHelp.Index = 0;
      this.menuItemSerialBusHelp.RadioCheck = true;
      componentResourceManager.ApplyResources((object) this.menuItemSerialBusHelp, "menuItemSerialBusHelp");
      this.menuItemSerialBusHelp.Click += new System.EventHandler(this.menuItemSerialBusHelp_Click);
      this.menuItem6.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuItem6, "menuItem6");
      this.menuItem6.Click += new System.EventHandler(this.menuItem6_Click);
      componentResourceManager.ApplyResources((object) this.tabControl, "tabControl");
      this.tabControl.Controls.Add((Control) this.tabPageBusInfo);
      this.tabControl.Controls.Add((Control) this.tabPageAllParameter);
      this.tabControl.Controls.Add((Control) this.tabPageDeviceParameter);
      this.tabControl.Controls.Add((Control) this.tabPageBusSetup);
      this.tabControl.Controls.Add((Control) this.tabPageMemory);
      this.tabControl.Name = "tabControl";
      this.tabControl.SelectedIndex = 0;
      this.tabControl.SelectedIndexChanged += new System.EventHandler(this.tabControl_SelectedIndexChanged);
      this.tabPageBusInfo.ContextMenu = this.contextMenu1;
      this.tabPageBusInfo.Controls.Add((Control) this.textBoxBusFilePath);
      this.tabPageBusInfo.Controls.Add((Control) this.dataGridBusTable);
      componentResourceManager.ApplyResources((object) this.tabPageBusInfo, "tabPageBusInfo");
      this.tabPageBusInfo.Name = "tabPageBusInfo";
      this.tabPageBusInfo.UseVisualStyleBackColor = true;
      this.contextMenu1.MenuItems.AddRange(new MenuItem[13]
      {
        this.menuCtReadMeterParameter,
        this.menuItemShowMeterData,
        this.menuItem3,
        this.menuCtSetPrimaryAddress,
        this.menuCtDeleteFromBusinfo,
        this.menuItemCmSetParameterListLine,
        this.menuCmSetToDefaultParameterList,
        this.menuCmSetToFullParameterList,
        this.menuCtSelectParameterList,
        this.menuCtMBusConverterLine,
        this.menuCtMBusConverter,
        this.menuItem13,
        this.menuCtShowHideColumnsDeviceList
      });
      this.menuCtReadMeterParameter.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuCtReadMeterParameter, "menuCtReadMeterParameter");
      this.menuCtReadMeterParameter.Click += new System.EventHandler(this.menuCtReadMeterParameter_Click);
      this.menuItemShowMeterData.Index = 1;
      componentResourceManager.ApplyResources((object) this.menuItemShowMeterData, "menuItemShowMeterData");
      this.menuItemShowMeterData.Click += new System.EventHandler(this.menuItemShowMeterData_Click);
      this.menuItem3.Index = 2;
      componentResourceManager.ApplyResources((object) this.menuItem3, "menuItem3");
      this.menuCtSetPrimaryAddress.Index = 3;
      componentResourceManager.ApplyResources((object) this.menuCtSetPrimaryAddress, "menuCtSetPrimaryAddress");
      this.menuCtSetPrimaryAddress.Click += new System.EventHandler(this.menuCtSetPrimaryAddress_Click);
      this.menuCtDeleteFromBusinfo.Index = 4;
      componentResourceManager.ApplyResources((object) this.menuCtDeleteFromBusinfo, "menuCtDeleteFromBusinfo");
      this.menuCtDeleteFromBusinfo.Click += new System.EventHandler(this.menuCtDeleteFromBusinfo_Click);
      this.menuItemCmSetParameterListLine.Index = 5;
      componentResourceManager.ApplyResources((object) this.menuItemCmSetParameterListLine, "menuItemCmSetParameterListLine");
      this.menuCmSetToDefaultParameterList.Index = 6;
      componentResourceManager.ApplyResources((object) this.menuCmSetToDefaultParameterList, "menuCmSetToDefaultParameterList");
      this.menuCmSetToDefaultParameterList.Click += new System.EventHandler(this.menuCmSetToDefaultParameterList_Click);
      this.menuCmSetToFullParameterList.Index = 7;
      componentResourceManager.ApplyResources((object) this.menuCmSetToFullParameterList, "menuCmSetToFullParameterList");
      this.menuCmSetToFullParameterList.Click += new System.EventHandler(this.menuCmSetToFullParameterList_Click);
      this.menuCtSelectParameterList.Index = 8;
      componentResourceManager.ApplyResources((object) this.menuCtSelectParameterList, "menuCtSelectParameterList");
      this.menuCtSelectParameterList.Click += new System.EventHandler(this.menuCtSelectParameterList_Click);
      this.menuCtMBusConverterLine.Index = 9;
      componentResourceManager.ApplyResources((object) this.menuCtMBusConverterLine, "menuCtMBusConverterLine");
      this.menuCtMBusConverter.Index = 10;
      componentResourceManager.ApplyResources((object) this.menuCtMBusConverter, "menuCtMBusConverter");
      this.menuCtMBusConverter.Click += new System.EventHandler(this.menuCtMBusConverter_Click);
      this.menuItem13.Index = 11;
      componentResourceManager.ApplyResources((object) this.menuItem13, "menuItem13");
      this.menuCtShowHideColumnsDeviceList.Index = 12;
      componentResourceManager.ApplyResources((object) this.menuCtShowHideColumnsDeviceList, "menuCtShowHideColumnsDeviceList");
      componentResourceManager.ApplyResources((object) this.textBoxBusFilePath, "textBoxBusFilePath");
      this.textBoxBusFilePath.Name = "textBoxBusFilePath";
      this.textBoxBusFilePath.ReadOnly = true;
      this.dataGridBusTable.AllowUserToAddRows = false;
      this.dataGridBusTable.AllowUserToDeleteRows = false;
      this.dataGridBusTable.AllowUserToResizeRows = false;
      componentResourceManager.ApplyResources((object) this.dataGridBusTable, "dataGridBusTable");
      this.dataGridBusTable.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.DisplayedCells;
      this.dataGridBusTable.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dataGridBusTable.EditMode = DataGridViewEditMode.EditOnEnter;
      this.dataGridBusTable.Name = "dataGridBusTable";
      this.dataGridBusTable.RowTemplate.Height = 24;
      this.dataGridBusTable.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.dataGridBusTable.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dataGridBusTable_CellBeginEdit);
      this.dataGridBusTable.CellEndEdit += new DataGridViewCellEventHandler(this.dataGridBusTable_CellEndEdit);
      this.dataGridBusTable.CellMouseDoubleClick += new DataGridViewCellMouseEventHandler(this.dataGridBusTable_CellMouseDoubleClick);
      this.dataGridBusTable.Sorted += new System.EventHandler(this.dataGridBusTable_Sorted);
      this.dataGridBusTable.KeyUp += new KeyEventHandler(this.dataGridBusTable_KeyUp);
      this.dataGridBusTable.MouseClick += new MouseEventHandler(this.dataGridBusTable_MouseClick);
      this.tabPageAllParameter.ContextMenu = this.contextMenuAllParameters;
      this.tabPageAllParameter.Controls.Add((Control) this.splitContainerAllParameters);
      componentResourceManager.ApplyResources((object) this.tabPageAllParameter, "tabPageAllParameter");
      this.tabPageAllParameter.Name = "tabPageAllParameter";
      this.tabPageAllParameter.UseVisualStyleBackColor = true;
      this.contextMenuAllParameters.MenuItems.AddRange(new MenuItem[1]
      {
        this.menuCtShowHideColumnsAllParameters
      });
      this.menuCtShowHideColumnsAllParameters.Index = 0;
      componentResourceManager.ApplyResources((object) this.menuCtShowHideColumnsAllParameters, "menuCtShowHideColumnsAllParameters");
      this.tabPageDeviceParameter.Controls.Add((Control) this.groupBoxDeviceInfo);
      this.tabPageDeviceParameter.Controls.Add((Control) this.groupBoxRadioReadoutSystem);
      this.tabPageDeviceParameter.Controls.Add((Control) this.dataGridParameterList);
      componentResourceManager.ApplyResources((object) this.tabPageDeviceParameter, "tabPageDeviceParameter");
      this.tabPageDeviceParameter.Name = "tabPageDeviceParameter";
      this.tabPageDeviceParameter.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.groupBoxDeviceInfo, "groupBoxDeviceInfo");
      this.groupBoxDeviceInfo.Controls.Add((Control) this.textBoxManufacturer);
      this.groupBoxDeviceInfo.Controls.Add((Control) this.label5);
      this.groupBoxDeviceInfo.Controls.Add((Control) this.textBoxMedium);
      this.groupBoxDeviceInfo.Controls.Add((Control) this.label6);
      this.groupBoxDeviceInfo.Controls.Add((Control) this.label7);
      this.groupBoxDeviceInfo.Controls.Add((Control) this.textBoxSerialNr);
      this.groupBoxDeviceInfo.Name = "groupBoxDeviceInfo";
      this.groupBoxDeviceInfo.TabStop = false;
      componentResourceManager.ApplyResources((object) this.textBoxManufacturer, "textBoxManufacturer");
      this.textBoxManufacturer.Name = "textBoxManufacturer";
      componentResourceManager.ApplyResources((object) this.label5, "label5");
      this.label5.Name = "label5";
      componentResourceManager.ApplyResources((object) this.textBoxMedium, "textBoxMedium");
      this.textBoxMedium.Name = "textBoxMedium";
      componentResourceManager.ApplyResources((object) this.label6, "label6");
      this.label6.Name = "label6";
      componentResourceManager.ApplyResources((object) this.label7, "label7");
      this.label7.Name = "label7";
      componentResourceManager.ApplyResources((object) this.textBoxSerialNr, "textBoxSerialNr");
      this.textBoxSerialNr.Name = "textBoxSerialNr";
      componentResourceManager.ApplyResources((object) this.groupBoxRadioReadoutSystem, "groupBoxRadioReadoutSystem");
      this.groupBoxRadioReadoutSystem.Controls.Add((Control) this.labelReadoutSystemText);
      this.groupBoxRadioReadoutSystem.Controls.Add((Control) this.labelReadoutSystemVersionText);
      this.groupBoxRadioReadoutSystem.Controls.Add((Control) this.labelReadoutSystem);
      this.groupBoxRadioReadoutSystem.Controls.Add((Control) this.labelReadoutSystemVersion);
      this.groupBoxRadioReadoutSystem.Name = "groupBoxRadioReadoutSystem";
      this.groupBoxRadioReadoutSystem.TabStop = false;
      componentResourceManager.ApplyResources((object) this.labelReadoutSystemText, "labelReadoutSystemText");
      this.labelReadoutSystemText.Name = "labelReadoutSystemText";
      componentResourceManager.ApplyResources((object) this.labelReadoutSystemVersionText, "labelReadoutSystemVersionText");
      this.labelReadoutSystemVersionText.Name = "labelReadoutSystemVersionText";
      this.labelReadoutSystem.BorderStyle = BorderStyle.Fixed3D;
      this.labelReadoutSystem.FlatStyle = FlatStyle.System;
      componentResourceManager.ApplyResources((object) this.labelReadoutSystem, "labelReadoutSystem");
      this.labelReadoutSystem.Name = "labelReadoutSystem";
      this.labelReadoutSystemVersion.BorderStyle = BorderStyle.Fixed3D;
      this.labelReadoutSystemVersion.FlatStyle = FlatStyle.System;
      componentResourceManager.ApplyResources((object) this.labelReadoutSystemVersion, "labelReadoutSystemVersion");
      this.labelReadoutSystemVersion.Name = "labelReadoutSystemVersion";
      componentResourceManager.ApplyResources((object) this.dataGridParameterList, "dataGridParameterList");
      this.dataGridParameterList.DataMember = "";
      this.dataGridParameterList.HeaderForeColor = SystemColors.ControlText;
      this.dataGridParameterList.Name = "dataGridParameterList";
      this.dataGridParameterList.PreferredColumnWidth = 150;
      this.tabPageBusSetup.Controls.Add((Control) this.btnSetDefaultSettings);
      this.tabPageBusSetup.Controls.Add((Control) this.gboxMinomat);
      this.tabPageBusSetup.Controls.Add((Control) this.groupBoxRadioReceiverSetup);
      this.tabPageBusSetup.Controls.Add((Control) this.groupBox3);
      this.tabPageBusSetup.Controls.Add((Control) this.groupBoxBaseBusSettings);
      this.tabPageBusSetup.Controls.Add((Control) this.groupBoxLogger);
      this.tabPageBusSetup.Controls.Add((Control) this.checkBoxAutoSaveSetup);
      componentResourceManager.ApplyResources((object) this.tabPageBusSetup, "tabPageBusSetup");
      this.tabPageBusSetup.Name = "tabPageBusSetup";
      this.tabPageBusSetup.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.btnSetDefaultSettings, "btnSetDefaultSettings");
      this.btnSetDefaultSettings.Name = "btnSetDefaultSettings";
      this.btnSetDefaultSettings.UseVisualStyleBackColor = true;
      this.btnSetDefaultSettings.Click += new System.EventHandler(this.btnSetDefaultSettings_Click);
      this.gboxMinomat.Controls.Add((Control) this.dateTimePickerToTime);
      this.gboxMinomat.Controls.Add((Control) this.dateTimePickerFromTime);
      this.gboxMinomat.Controls.Add((Control) this.label12);
      this.gboxMinomat.Controls.Add((Control) this.label20);
      this.gboxMinomat.Controls.Add((Control) this.textBoxMinomatSerial);
      this.gboxMinomat.Controls.Add((Control) this.label13);
      componentResourceManager.ApplyResources((object) this.gboxMinomat, "gboxMinomat");
      this.gboxMinomat.Name = "gboxMinomat";
      this.gboxMinomat.TabStop = false;
      this.dateTimePickerToTime.Format = DateTimePickerFormat.Short;
      componentResourceManager.ApplyResources((object) this.dateTimePickerToTime, "dateTimePickerToTime");
      this.dateTimePickerToTime.Name = "dateTimePickerToTime";
      this.dateTimePickerToTime.ValueChanged += new System.EventHandler(this.dateTimePickerToTime_ValueChanged);
      this.dateTimePickerFromTime.Format = DateTimePickerFormat.Short;
      componentResourceManager.ApplyResources((object) this.dateTimePickerFromTime, "dateTimePickerFromTime");
      this.dateTimePickerFromTime.Name = "dateTimePickerFromTime";
      this.dateTimePickerFromTime.ValueChanged += new System.EventHandler(this.dateTimePickerFromTime_ValueChanged);
      componentResourceManager.ApplyResources((object) this.label12, "label12");
      this.label12.Name = "label12";
      componentResourceManager.ApplyResources((object) this.label20, "label20");
      this.label20.Name = "label20";
      componentResourceManager.ApplyResources((object) this.textBoxMinomatSerial, "textBoxMinomatSerial");
      this.textBoxMinomatSerial.Name = "textBoxMinomatSerial";
      this.textBoxMinomatSerial.Leave += new System.EventHandler(this.textBoxMinomatSerial_Leave);
      componentResourceManager.ApplyResources((object) this.label13, "label13");
      this.label13.Name = "label13";
      this.groupBoxRadioReceiverSetup.Controls.Add((Control) this.textBoxReceiveLevel);
      this.groupBoxRadioReceiverSetup.Controls.Add((Control) this.label19);
      componentResourceManager.ApplyResources((object) this.groupBoxRadioReceiverSetup, "groupBoxRadioReceiverSetup");
      this.groupBoxRadioReceiverSetup.Name = "groupBoxRadioReceiverSetup";
      this.groupBoxRadioReceiverSetup.TabStop = false;
      componentResourceManager.ApplyResources((object) this.textBoxReceiveLevel, "textBoxReceiveLevel");
      this.textBoxReceiveLevel.Name = "textBoxReceiveLevel";
      componentResourceManager.ApplyResources((object) this.label19, "label19");
      this.label19.Name = "label19";
      componentResourceManager.ApplyResources((object) this.groupBox3, "groupBox3");
      this.groupBox3.Controls.Add((Control) this.buttonSelectZDF_File);
      this.groupBox3.Controls.Add((Control) this.textBoxZDF_FileName);
      this.groupBox3.Controls.Add((Control) this.checkBoxLoggToZDF_File);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.TabStop = false;
      componentResourceManager.ApplyResources((object) this.buttonSelectZDF_File, "buttonSelectZDF_File");
      this.buttonSelectZDF_File.Name = "buttonSelectZDF_File";
      this.buttonSelectZDF_File.Click += new System.EventHandler(this.buttonSelectZDF_File_Click);
      componentResourceManager.ApplyResources((object) this.textBoxZDF_FileName, "textBoxZDF_FileName");
      this.textBoxZDF_FileName.Name = "textBoxZDF_FileName";
      this.textBoxZDF_FileName.Leave += new System.EventHandler(this.textBoxZDF_FileName_Leave);
      componentResourceManager.ApplyResources((object) this.checkBoxLoggToZDF_File, "checkBoxLoggToZDF_File");
      this.checkBoxLoggToZDF_File.Name = "checkBoxLoggToZDF_File";
      this.checkBoxLoggToZDF_File.CheckedChanged += new System.EventHandler(this.checkBoxLoggToZDF_File_CheckedChanged);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxSND_NKE);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxUseReqUd2_5B);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxApplicationReset);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxIsMultitelegrammEnabled);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.textBoxLoopTime);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxFastSecoundaryAddressing);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.label14);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxOnlySecondaryAddressing);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxBeepByReading);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxUseExternalKeySignal);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxChangeInterfaceBaudrateToo);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.checkBoxKeepDestinationAddress);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.label15);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.comboBoxBusMode);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.label16);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.label8);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.label17);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.textBoxRepeadsOnError);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.textBoxScanStartAddress);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.label18);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.textBoxScanStartNumber);
      this.groupBoxBaseBusSettings.Controls.Add((Control) this.textBoxOrganizeStartAddress);
      componentResourceManager.ApplyResources((object) this.groupBoxBaseBusSettings, "groupBoxBaseBusSettings");
      this.groupBoxBaseBusSettings.Name = "groupBoxBaseBusSettings";
      this.groupBoxBaseBusSettings.TabStop = false;
      componentResourceManager.ApplyResources((object) this.checkBoxSND_NKE, "checkBoxSND_NKE");
      this.checkBoxSND_NKE.Name = "checkBoxSND_NKE";
      this.checkBoxSND_NKE.CheckedChanged += new System.EventHandler(this.checkBoxSND_NKE_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxUseReqUd2_5B, "checkBoxUseReqUd2_5B");
      this.checkBoxUseReqUd2_5B.Name = "checkBoxUseReqUd2_5B";
      this.checkBoxUseReqUd2_5B.CheckedChanged += new System.EventHandler(this.checkBoxUseReqUd2_5B_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxApplicationReset, "checkBoxApplicationReset");
      this.checkBoxApplicationReset.Name = "checkBoxApplicationReset";
      this.checkBoxApplicationReset.CheckedChanged += new System.EventHandler(this.checkBoxApplicationReset_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxIsMultitelegrammEnabled, "checkBoxIsMultitelegrammEnabled");
      this.checkBoxIsMultitelegrammEnabled.Name = "checkBoxIsMultitelegrammEnabled";
      this.checkBoxIsMultitelegrammEnabled.CheckedChanged += new System.EventHandler(this.checkBoxIsMultitelegrammEnabled_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.textBoxLoopTime, "textBoxLoopTime");
      this.textBoxLoopTime.Name = "textBoxLoopTime";
      this.textBoxLoopTime.Leave += new System.EventHandler(this.textBoxLoopTime_Leave);
      componentResourceManager.ApplyResources((object) this.checkBoxFastSecoundaryAddressing, "checkBoxFastSecoundaryAddressing");
      this.checkBoxFastSecoundaryAddressing.Name = "checkBoxFastSecoundaryAddressing";
      this.checkBoxFastSecoundaryAddressing.CheckedChanged += new System.EventHandler(this.checkBoxFastSecoundaryAddressing_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.label14, "label14");
      this.label14.Name = "label14";
      componentResourceManager.ApplyResources((object) this.checkBoxOnlySecondaryAddressing, "checkBoxOnlySecondaryAddressing");
      this.checkBoxOnlySecondaryAddressing.Name = "checkBoxOnlySecondaryAddressing";
      this.checkBoxOnlySecondaryAddressing.CheckedChanged += new System.EventHandler(this.checkBoxOnlySecondaryAddressing_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxBeepByReading, "checkBoxBeepByReading");
      this.checkBoxBeepByReading.Name = "checkBoxBeepByReading";
      this.checkBoxBeepByReading.CheckedChanged += new System.EventHandler(this.checkBoxBeepByReading_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxUseExternalKeySignal, "checkBoxUseExternalKeySignal");
      this.checkBoxUseExternalKeySignal.Name = "checkBoxUseExternalKeySignal";
      this.checkBoxUseExternalKeySignal.CheckedChanged += new System.EventHandler(this.checkBoxUseExternalKeySignal_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxChangeInterfaceBaudrateToo, "checkBoxChangeInterfaceBaudrateToo");
      this.checkBoxChangeInterfaceBaudrateToo.Name = "checkBoxChangeInterfaceBaudrateToo";
      this.checkBoxChangeInterfaceBaudrateToo.CheckedChanged += new System.EventHandler(this.checkBoxChangeInterfaceBaudrateToo_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxKeepDestinationAddress, "checkBoxKeepDestinationAddress");
      this.checkBoxKeepDestinationAddress.Name = "checkBoxKeepDestinationAddress";
      this.checkBoxKeepDestinationAddress.CheckedChanged += new System.EventHandler(this.checkBoxKeepDestinationAddress_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.label15, "label15");
      this.label15.Name = "label15";
      this.comboBoxBusMode.DropDownStyle = ComboBoxStyle.DropDownList;
      componentResourceManager.ApplyResources((object) this.comboBoxBusMode, "comboBoxBusMode");
      this.comboBoxBusMode.Name = "comboBoxBusMode";
      this.comboBoxBusMode.SelectedIndexChanged += new System.EventHandler(this.comboBoxBusMode_SelectedIndexChanged);
      componentResourceManager.ApplyResources((object) this.label16, "label16");
      this.label16.Name = "label16";
      componentResourceManager.ApplyResources((object) this.label8, "label8");
      this.label8.Name = "label8";
      componentResourceManager.ApplyResources((object) this.label17, "label17");
      this.label17.Name = "label17";
      componentResourceManager.ApplyResources((object) this.textBoxRepeadsOnError, "textBoxRepeadsOnError");
      this.textBoxRepeadsOnError.Name = "textBoxRepeadsOnError";
      this.textBoxRepeadsOnError.KeyDown += new KeyEventHandler(this.textBoxRepeadsOnError_KeyDown);
      this.textBoxRepeadsOnError.Leave += new System.EventHandler(this.textBoxRepeadsOnError_Leave);
      componentResourceManager.ApplyResources((object) this.textBoxScanStartAddress, "textBoxScanStartAddress");
      this.textBoxScanStartAddress.Name = "textBoxScanStartAddress";
      this.textBoxScanStartAddress.Leave += new System.EventHandler(this.textBoxScanStartAddress_Leave);
      componentResourceManager.ApplyResources((object) this.label18, "label18");
      this.label18.Name = "label18";
      componentResourceManager.ApplyResources((object) this.textBoxScanStartNumber, "textBoxScanStartNumber");
      this.textBoxScanStartNumber.Name = "textBoxScanStartNumber";
      this.textBoxScanStartNumber.Leave += new System.EventHandler(this.textBoxScanStartNumber_Leave);
      componentResourceManager.ApplyResources((object) this.textBoxOrganizeStartAddress, "textBoxOrganizeStartAddress");
      this.textBoxOrganizeStartAddress.Name = "textBoxOrganizeStartAddress";
      this.textBoxOrganizeStartAddress.Leave += new System.EventHandler(this.textBoxOrganizeStartAddress_Leave);
      this.groupBoxLogger.Controls.Add((Control) this.comboBoxLoggToCom);
      this.groupBoxLogger.Controls.Add((Control) this.label4);
      this.groupBoxLogger.Controls.Add((Control) this.checkBoxLoggToFile);
      this.groupBoxLogger.Controls.Add((Control) this.checkBoxLoggAllTemp);
      componentResourceManager.ApplyResources((object) this.groupBoxLogger, "groupBoxLogger");
      this.groupBoxLogger.Name = "groupBoxLogger";
      this.groupBoxLogger.TabStop = false;
      componentResourceManager.ApplyResources((object) this.comboBoxLoggToCom, "comboBoxLoggToCom");
      this.comboBoxLoggToCom.Items.AddRange(new object[13]
      {
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items1"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items2"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items3"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items4"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items5"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items6"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items7"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items8"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items9"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items10"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items11"),
        (object) componentResourceManager.GetString("comboBoxLoggToCom.Items12")
      });
      this.comboBoxLoggToCom.Name = "comboBoxLoggToCom";
      componentResourceManager.ApplyResources((object) this.label4, "label4");
      this.label4.Name = "label4";
      componentResourceManager.ApplyResources((object) this.checkBoxLoggToFile, "checkBoxLoggToFile");
      this.checkBoxLoggToFile.Name = "checkBoxLoggToFile";
      componentResourceManager.ApplyResources((object) this.checkBoxLoggAllTemp, "checkBoxLoggAllTemp");
      this.checkBoxLoggAllTemp.Name = "checkBoxLoggAllTemp";
      componentResourceManager.ApplyResources((object) this.checkBoxAutoSaveSetup, "checkBoxAutoSaveSetup");
      this.checkBoxAutoSaveSetup.Name = "checkBoxAutoSaveSetup";
      this.checkBoxAutoSaveSetup.CheckedChanged += new System.EventHandler(this.checkBoxAutoSaveSetup_CheckedChanged);
      this.tabPageMemory.Controls.Add((Control) this.checkBoxWatchRange);
      this.tabPageMemory.Controls.Add((Control) this.groupBox2);
      this.tabPageMemory.Controls.Add((Control) this.groupBox1);
      this.tabPageMemory.Controls.Add((Control) this.listBoxLocation);
      this.tabPageMemory.Controls.Add((Control) this.label1);
      this.tabPageMemory.Controls.Add((Control) this.textBoxStartAddress);
      this.tabPageMemory.Controls.Add((Control) this.label2);
      this.tabPageMemory.Controls.Add((Control) this.textBoxNumberOfBytes);
      this.tabPageMemory.Controls.Add((Control) this.labelLocation);
      this.tabPageMemory.Controls.Add((Control) this.buttonEraseFlash);
      this.tabPageMemory.Controls.Add((Control) this.buttonShowMemory);
      this.tabPageMemory.Controls.Add((Control) this.buttonReadMemory);
      componentResourceManager.ApplyResources((object) this.tabPageMemory, "tabPageMemory");
      this.tabPageMemory.Name = "tabPageMemory";
      this.tabPageMemory.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.checkBoxWatchRange, "checkBoxWatchRange");
      this.checkBoxWatchRange.Name = "checkBoxWatchRange";
      this.checkBoxWatchRange.CheckedChanged += new System.EventHandler(this.checkBoxWatchRange_CheckedChanged);
      this.groupBox2.Controls.Add((Control) this.buttonDeleteMeterKey);
      this.groupBox2.Controls.Add((Control) this.label9);
      this.groupBox2.Controls.Add((Control) this.textBoxValue);
      this.groupBox2.Controls.Add((Control) this.buttonSetBaudrate);
      componentResourceManager.ApplyResources((object) this.groupBox2, "groupBox2");
      this.groupBox2.Name = "groupBox2";
      this.groupBox2.TabStop = false;
      componentResourceManager.ApplyResources((object) this.buttonDeleteMeterKey, "buttonDeleteMeterKey");
      this.buttonDeleteMeterKey.Name = "buttonDeleteMeterKey";
      this.buttonDeleteMeterKey.Click += new System.EventHandler(this.buttonDeleteMeterKey_Click);
      componentResourceManager.ApplyResources((object) this.label9, "label9");
      this.label9.Name = "label9";
      this.textBoxValue.AcceptsReturn = true;
      componentResourceManager.ApplyResources((object) this.textBoxValue, "textBoxValue");
      this.textBoxValue.Name = "textBoxValue";
      componentResourceManager.ApplyResources((object) this.buttonSetBaudrate, "buttonSetBaudrate");
      this.buttonSetBaudrate.Name = "buttonSetBaudrate";
      this.buttonSetBaudrate.Click += new System.EventHandler(this.buttonSetBaudrate_Click);
      this.groupBox1.Controls.Add((Control) this.textBoxAndMask);
      this.groupBox1.Controls.Add((Control) this.label10);
      this.groupBox1.Controls.Add((Control) this.label11);
      this.groupBox1.Controls.Add((Control) this.textBoxOrMask);
      this.groupBox1.Controls.Add((Control) this.buttonWriteBitfield);
      componentResourceManager.ApplyResources((object) this.groupBox1, "groupBox1");
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.TabStop = false;
      this.textBoxAndMask.AcceptsReturn = true;
      componentResourceManager.ApplyResources((object) this.textBoxAndMask, "textBoxAndMask");
      this.textBoxAndMask.Name = "textBoxAndMask";
      componentResourceManager.ApplyResources((object) this.label10, "label10");
      this.label10.Name = "label10";
      componentResourceManager.ApplyResources((object) this.label11, "label11");
      this.label11.Name = "label11";
      this.textBoxOrMask.AcceptsReturn = true;
      componentResourceManager.ApplyResources((object) this.textBoxOrMask, "textBoxOrMask");
      this.textBoxOrMask.Name = "textBoxOrMask";
      componentResourceManager.ApplyResources((object) this.buttonWriteBitfield, "buttonWriteBitfield");
      this.buttonWriteBitfield.Name = "buttonWriteBitfield";
      this.buttonWriteBitfield.Click += new System.EventHandler(this.buttonWriteBitfield_Click);
      this.listBoxLocation.Items.AddRange(new object[2]
      {
        (object) componentResourceManager.GetString("listBoxLocation.Items"),
        (object) componentResourceManager.GetString("listBoxLocation.Items1")
      });
      componentResourceManager.ApplyResources((object) this.listBoxLocation, "listBoxLocation");
      this.listBoxLocation.Name = "listBoxLocation";
      componentResourceManager.ApplyResources((object) this.label1, "label1");
      this.label1.Name = "label1";
      componentResourceManager.ApplyResources((object) this.textBoxStartAddress, "textBoxStartAddress");
      this.textBoxStartAddress.Name = "textBoxStartAddress";
      componentResourceManager.ApplyResources((object) this.label2, "label2");
      this.label2.Name = "label2";
      componentResourceManager.ApplyResources((object) this.textBoxNumberOfBytes, "textBoxNumberOfBytes");
      this.textBoxNumberOfBytes.Name = "textBoxNumberOfBytes";
      componentResourceManager.ApplyResources((object) this.labelLocation, "labelLocation");
      this.labelLocation.Name = "labelLocation";
      this.buttonEraseFlash.BackColor = SystemColors.Control;
      componentResourceManager.ApplyResources((object) this.buttonEraseFlash, "buttonEraseFlash");
      this.buttonEraseFlash.Name = "buttonEraseFlash";
      this.buttonEraseFlash.UseVisualStyleBackColor = false;
      this.buttonEraseFlash.Click += new System.EventHandler(this.buttonShowMemory_Click);
      componentResourceManager.ApplyResources((object) this.buttonShowMemory, "buttonShowMemory");
      this.buttonShowMemory.Name = "buttonShowMemory";
      this.buttonShowMemory.Click += new System.EventHandler(this.buttonShowMemory_Click);
      componentResourceManager.ApplyResources((object) this.buttonReadMemory, "buttonReadMemory");
      this.buttonReadMemory.Name = "buttonReadMemory";
      this.buttonReadMemory.Click += new System.EventHandler(this.buttonReadMemory_Click);
      componentResourceManager.ApplyResources((object) this.progressBar, "progressBar");
      this.progressBar.Name = "progressBar";
      componentResourceManager.ApplyResources((object) this.buttonOk, "buttonOk");
      this.buttonOk.Name = "buttonOk";
      this.buttonOk.Click += new System.EventHandler(this.buttonOk_Click);
      componentResourceManager.ApplyResources((object) this.buttonBreak, "buttonBreak");
      this.buttonBreak.Name = "buttonBreak";
      this.buttonBreak.Click += new System.EventHandler(this.buttonBreak_Click);
      this.buttonBreak.MouseLeave += new System.EventHandler(this.buttonBreak_MouseLeave);
      this.buttonBreak.MouseMove += new MouseEventHandler(this.buttonBreak_MouseMove);
      componentResourceManager.ApplyResources((object) this.labelStatus, "labelStatus");
      this.labelStatus.BorderStyle = BorderStyle.Fixed3D;
      this.labelStatus.Name = "labelStatus";
      this.buttonToolbarReadAllDevices.FlatAppearance.BorderSize = 0;
      componentResourceManager.ApplyResources((object) this.buttonToolbarReadAllDevices, "buttonToolbarReadAllDevices");
      this.buttonToolbarReadAllDevices.Name = "buttonToolbarReadAllDevices";
      this.toolTip1.SetToolTip((Control) this.buttonToolbarReadAllDevices, componentResourceManager.GetString("buttonToolbarReadAllDevices.ToolTip"));
      this.buttonToolbarReadAllDevices.Click += new System.EventHandler(this.buttonReadAllDevices_Click);
      this.buttonToolbarReadDevice.FlatAppearance.BorderSize = 0;
      componentResourceManager.ApplyResources((object) this.buttonToolbarReadDevice, "buttonToolbarReadDevice");
      this.buttonToolbarReadDevice.Name = "buttonToolbarReadDevice";
      this.toolTip1.SetToolTip((Control) this.buttonToolbarReadDevice, componentResourceManager.GetString("buttonToolbarReadDevice.ToolTip"));
      this.buttonToolbarReadDevice.Click += new System.EventHandler(this.buttonReadDevice_Click);
      this.buttonToolbarDeleteBusinfo.FlatAppearance.BorderSize = 0;
      componentResourceManager.ApplyResources((object) this.buttonToolbarDeleteBusinfo, "buttonToolbarDeleteBusinfo");
      this.buttonToolbarDeleteBusinfo.Name = "buttonToolbarDeleteBusinfo";
      this.toolTip1.SetToolTip((Control) this.buttonToolbarDeleteBusinfo, componentResourceManager.GetString("buttonToolbarDeleteBusinfo.ToolTip"));
      this.buttonToolbarDeleteBusinfo.Click += new System.EventHandler(this.buttonToolbarDeleteBusinfo_Click);
      this.buttonToolbarScanBusByAddress.FlatAppearance.BorderSize = 0;
      componentResourceManager.ApplyResources((object) this.buttonToolbarScanBusByAddress, "buttonToolbarScanBusByAddress");
      this.buttonToolbarScanBusByAddress.Name = "buttonToolbarScanBusByAddress";
      this.toolTip1.SetToolTip((Control) this.buttonToolbarScanBusByAddress, componentResourceManager.GetString("buttonToolbarScanBusByAddress.ToolTip"));
      this.buttonToolbarScanBusByAddress.Click += new System.EventHandler(this.buttonToolbarScanBusByAddress_Click);
      this.buttonToolbarScanBusBySerialNumber.FlatAppearance.BorderSize = 0;
      componentResourceManager.ApplyResources((object) this.buttonToolbarScanBusBySerialNumber, "buttonToolbarScanBusBySerialNumber");
      this.buttonToolbarScanBusBySerialNumber.Name = "buttonToolbarScanBusBySerialNumber";
      this.toolTip1.SetToolTip((Control) this.buttonToolbarScanBusBySerialNumber, componentResourceManager.GetString("buttonToolbarScanBusBySerialNumber.ToolTip"));
      this.buttonToolbarScanBusBySerialNumber.Click += new System.EventHandler(this.buttonToolbarScanBusBySerialNumber_Click);
      this.buttonToolbarSearchSingelDeviceByAddress.FlatAppearance.BorderSize = 0;
      componentResourceManager.ApplyResources((object) this.buttonToolbarSearchSingelDeviceByAddress, "buttonToolbarSearchSingelDeviceByAddress");
      this.buttonToolbarSearchSingelDeviceByAddress.Name = "buttonToolbarSearchSingelDeviceByAddress";
      this.toolTip1.SetToolTip((Control) this.buttonToolbarSearchSingelDeviceByAddress, componentResourceManager.GetString("buttonToolbarSearchSingelDeviceByAddress.ToolTip"));
      this.buttonToolbarSearchSingelDeviceByAddress.Click += new System.EventHandler(this.buttonToolbarSearchSingelDeviceByAddress_Click);
      this.buttonToolbarSearchSingelDeviceBySerialNumber.FlatAppearance.BorderSize = 0;
      componentResourceManager.ApplyResources((object) this.buttonToolbarSearchSingelDeviceBySerialNumber, "buttonToolbarSearchSingelDeviceBySerialNumber");
      this.buttonToolbarSearchSingelDeviceBySerialNumber.Name = "buttonToolbarSearchSingelDeviceBySerialNumber";
      this.toolTip1.SetToolTip((Control) this.buttonToolbarSearchSingelDeviceBySerialNumber, componentResourceManager.GetString("buttonToolbarSearchSingelDeviceBySerialNumber.ToolTip"));
      this.buttonToolbarSearchSingelDeviceBySerialNumber.Click += new System.EventHandler(this.buttonToolbarSearchSingelDeviceBySerialNumber_Click);
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      componentResourceManager.ApplyResources((object) this.buttonAsyncCom, "buttonAsyncCom");
      this.buttonAsyncCom.Name = "buttonAsyncCom";
      this.buttonAsyncCom.UseVisualStyleBackColor = true;
      this.buttonAsyncCom.Click += new System.EventHandler(this.buttonAsyncCom_Click);
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.buttonAsyncCom);
      this.Controls.Add((Control) this.buttonToolbarScanBusByAddress);
      this.Controls.Add((Control) this.buttonToolbarDeleteBusinfo);
      this.Controls.Add((Control) this.buttonToolbarReadAllDevices);
      this.Controls.Add((Control) this.progressBar);
      this.Controls.Add((Control) this.labelStatus);
      this.Controls.Add((Control) this.buttonOk);
      this.Controls.Add((Control) this.tabControl);
      this.Controls.Add((Control) this.buttonBreak);
      this.Controls.Add((Control) this.buttonToolbarReadDevice);
      this.Controls.Add((Control) this.buttonToolbarScanBusBySerialNumber);
      this.Controls.Add((Control) this.buttonToolbarSearchSingelDeviceByAddress);
      this.Controls.Add((Control) this.buttonToolbarSearchSingelDeviceBySerialNumber);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Menu = this.SerialBusMenu;
      this.Name = nameof (DeviceCollectorWindow);
      this.Activated += new System.EventHandler(this.SerialBus_Activated);
      this.Closing += new CancelEventHandler(this.SerialBus_Closing);
      this.Closed += new System.EventHandler(this.SerialBus_Closed);
      this.Load += new System.EventHandler(this.SerialBus_Load);
      this.VisibleChanged += new System.EventHandler(this.DeviceCollectorWindow_VisibleChanged);
      this.splitContainerAllParameters.Panel1.ResumeLayout(false);
      this.splitContainerAllParameters.Panel1.PerformLayout();
      this.splitContainerAllParameters.Panel2.ResumeLayout(false);
      this.splitContainerAllParameters.Panel2.PerformLayout();
      this.splitContainerAllParameters.EndInit();
      this.splitContainerAllParameters.ResumeLayout(false);
      ((ISupportInitialize) this.dataGridViewAllParameter).EndInit();
      this.tabControl.ResumeLayout(false);
      this.tabPageBusInfo.ResumeLayout(false);
      this.tabPageBusInfo.PerformLayout();
      ((ISupportInitialize) this.dataGridBusTable).EndInit();
      this.tabPageAllParameter.ResumeLayout(false);
      this.tabPageDeviceParameter.ResumeLayout(false);
      this.groupBoxDeviceInfo.ResumeLayout(false);
      this.groupBoxDeviceInfo.PerformLayout();
      this.groupBoxRadioReadoutSystem.ResumeLayout(false);
      this.dataGridParameterList.EndInit();
      this.tabPageBusSetup.ResumeLayout(false);
      this.gboxMinomat.ResumeLayout(false);
      this.gboxMinomat.PerformLayout();
      this.groupBoxRadioReceiverSetup.ResumeLayout(false);
      this.groupBoxRadioReceiverSetup.PerformLayout();
      this.groupBox3.ResumeLayout(false);
      this.groupBox3.PerformLayout();
      this.groupBoxBaseBusSettings.ResumeLayout(false);
      this.groupBoxBaseBusSettings.PerformLayout();
      this.groupBoxLogger.ResumeLayout(false);
      this.tabPageMemory.ResumeLayout(false);
      this.tabPageMemory.PerformLayout();
      this.groupBox2.ResumeLayout(false);
      this.groupBox2.PerformLayout();
      this.groupBox1.ResumeLayout(false);
      this.groupBox1.PerformLayout();
      this.ResumeLayout(false);
    }

    internal DeviceCollectorWindow(DeviceCollectorFunctions TheBus)
    {
      this.initActive = true;
      this.InitializeComponent();
      FormTranslatorSupport.TranslateWindow(Tg.DeviceCollectorWindow, (Form) this);
      this.buttonToolbarReadDevice.Image = Images.pics.DeviceRead_20x20.Image;
      this.buttonToolbarReadAllDevices.Image = Images.pics.ReadAll_20x20.Image;
      this.buttonToolbarDeleteBusinfo.Image = Images.pics.DeleteAllDevices_20x20.Image;
      this.buttonToolbarScanBusByAddress.Image = Images.pics.ScanByAddress_20x20.Image;
      this.buttonToolbarScanBusBySerialNumber.Image = Images.pics.ScanBySerialNo_20x20.Image;
      this.buttonToolbarSearchSingelDeviceByAddress.Image = Images.pics.SeachByAddress_20x20.Image;
      this.buttonToolbarSearchSingelDeviceBySerialNumber.Image = Images.pics.SearchBySerialNo_20x20.Image;
      this.MyBus = TheBus;
      if (Thread.CurrentThread.Name != "GMM main")
        this.Text = this.Text + " [" + Thread.CurrentThread.Name + "]";
      this.MyBus.BreakRequest = true;
      this.ClearFields();
      foreach (string name in Enum.GetNames(typeof (BusMode)))
      {
        string str1 = name;
        BusMode busMode = BusMode.MBus;
        string str2 = busMode.ToString();
        if (!(str1 == str2) || UserManager.CheckPermission(UserRights.Rights.MBus))
        {
          string str3 = name;
          busMode = BusMode.MBusPointToPoint;
          string str4 = busMode.ToString();
          if (!(str3 == str4) || UserManager.CheckPermission(UserRights.Rights.MBus))
          {
            string str5 = name;
            busMode = BusMode.RelayDevice;
            string str6 = busMode.ToString();
            if (!(str5 == str6) || UserManager.CheckPermission(UserRights.Rights.MBus))
            {
              string str7 = name;
              busMode = BusMode.Minol_Device;
              string str8 = busMode.ToString();
              if (!(str7 == str8) || UserManager.CheckPermission(UserRights.Rights.MinolExpertHandler))
              {
                string str9 = name;
                busMode = BusMode.MinomatV2;
                string str10 = busMode.ToString();
                if (!(str9 == str10) || UserManager.CheckPermission(UserRights.Rights.MinomatV2))
                {
                  string str11 = name;
                  busMode = BusMode.MinomatV3;
                  string str12 = busMode.ToString();
                  int num1;
                  if (!(str11 == str12))
                  {
                    string str13 = name;
                    busMode = BusMode.MinomatV4;
                    string str14 = busMode.ToString();
                    if (!(str13 == str14))
                    {
                      string str15 = name;
                      busMode = BusMode.RadioMS;
                      string str16 = busMode.ToString();
                      if (!(str15 == str16))
                      {
                        string str17 = name;
                        busMode = BusMode.MinomatRadioTest;
                        string str18 = busMode.ToString();
                        if (!(str17 == str18))
                        {
                          num1 = 0;
                          goto label_14;
                        }
                      }
                    }
                  }
                  num1 = !UserManager.CheckPermission(UserRights.Rights.MinomatV4) ? 1 : 0;
label_14:
                  if (num1 == 0)
                  {
                    string str19 = name;
                    busMode = BusMode.Radio2;
                    string str20 = busMode.ToString();
                    if (!(str19 == str20) || UserManager.CheckPermission(UserRights.Rights.WalkBy))
                    {
                      string str21 = name;
                      busMode = BusMode.Radio3;
                      string str22 = busMode.ToString();
                      if (!(str21 == str22) || UserManager.CheckPermission(UserRights.Rights.Radio3))
                      {
                        string str23 = name;
                        busMode = BusMode.Radio3_868_95_RUSSIA;
                        string str24 = busMode.ToString();
                        if (!(str23 == str24) || UserManager.CheckPermission(UserRights.Rights.Radio3))
                        {
                          string str25 = name;
                          busMode = BusMode.wMBusC1A;
                          string str26 = busMode.ToString();
                          int num2;
                          if (!(str25 == str26))
                          {
                            string str27 = name;
                            busMode = BusMode.wMBusC1B;
                            string str28 = busMode.ToString();
                            if (!(str27 == str28))
                            {
                              string str29 = name;
                              busMode = BusMode.wMBusS1;
                              string str30 = busMode.ToString();
                              if (!(str29 == str30))
                              {
                                string str31 = name;
                                busMode = BusMode.wMBusS1M;
                                string str32 = busMode.ToString();
                                if (!(str31 == str32))
                                {
                                  string str33 = name;
                                  busMode = BusMode.wMBusS2;
                                  string str34 = busMode.ToString();
                                  if (!(str33 == str34))
                                  {
                                    string str35 = name;
                                    busMode = BusMode.wMBusT1;
                                    string str36 = busMode.ToString();
                                    if (!(str35 == str36))
                                    {
                                      string str37 = name;
                                      busMode = BusMode.wMBusT2_meter;
                                      string str38 = busMode.ToString();
                                      if (!(str37 == str38))
                                      {
                                        string str39 = name;
                                        busMode = BusMode.wMBusT2_other;
                                        string str40 = busMode.ToString();
                                        if (!(str39 == str40))
                                        {
                                          num2 = 0;
                                          goto label_28;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          num2 = !UserManager.CheckPermission(UserRights.Rights.WirelessMBus) ? 1 : 0;
label_28:
                          if (num2 == 0)
                          {
                            string str41 = name;
                            busMode = BusMode.WaveFlowRadio;
                            string str42 = busMode.ToString();
                            if (!(str41 == str42) || UserManager.CheckPermission(UserRights.Rights.Waveflow))
                            {
                              string str43 = name;
                              busMode = BusMode.SmokeDetector;
                              string str44 = busMode.ToString();
                              if (!(str43 == str44) || UserManager.CheckPermission(UserRights.Rights.SmokeDetectorHandler))
                                this.comboBoxBusMode.Items.Add((object) name);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      this.EventObject = new EventHandler<GMM_EventArgs>(this.WorkMessage);
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      this.UpdateSettings();
      this.SetEnabledFunctions();
      this.listBoxLocation.SelectedIndex = 0;
      new DataGridViewColumnSelector(this.dataGridBusTable, this.menuCtShowHideColumnsDeviceList).ColumnsShowAlways = new string[1]
      {
        "Nr."
      };
      DataGridViewColumnSelector viewColumnSelector = new DataGridViewColumnSelector(this.dataGridViewAllParameter, this.menuCtShowHideColumnsAllParameters);
      if (!UserManager.CheckPermission(UserRights.Rights.Developer))
        this.HideColumns(this.dataGridBusTable, "IsSel", "SelRep", "ReadRep", "DeselRep");
      this.initActive = false;
    }

    private void DeviceCollectorWindow_VisibleChanged(object sender, EventArgs e)
    {
      if (!this.IsHandleCreated)
        return;
      if (this.Visible)
      {
        this.MyBus.OnMessage += this.EventObject;
        this.MyBus.MyCom.OnAsyncComMessage += this.EventObject;
      }
      else
      {
        this.MyBus.OnMessage -= this.EventObject;
        this.MyBus.MyCom.OnAsyncComMessage -= this.EventObject;
      }
    }

    internal void InitStartMenu(string ComponentList)
    {
      this.StartComponentName = "";
      if (ComponentList == null)
      {
        this.menuComponent.Visible = false;
      }
      else
      {
        this.menuStartAsyncCom.Visible = UserManager.CheckPermission(UserRights.Rights.AsyncCom);
        this.menuStartDesigner.Visible = UserManager.CheckPermission(UserRights.Rights.Designer);
        this.menuItemConfigurator.Visible = UserManager.CheckPermission(UserRights.Rights.Configurator);
        this.menuComponent.Visible = this.menuStartAsyncCom.Visible || this.menuStartDesigner.Visible || this.menuItemConfigurator.Visible;
      }
    }

    internal void ClearTables()
    {
      this.dataGridBusTable.DataSource = (object) null;
      this.dataGridParameterList.DataSource = (object) null;
      this.dataGridViewAllParameter.Columns.Clear();
    }

    internal void RefreshBusInfo()
    {
      if (this.MyBus.MyDeviceList == null)
        return;
      DataTable BusTable;
      this.MyBus.MyDeviceList.GetBusTable(out BusTable, this.MyBus.MyBusMode);
      this.dataGridBusTable.DataSource = (object) BusTable;
      this.textBoxBusFilePath.Text = this.MyBus.MyBusInfo.BusInfoFilename;
      this.gboxMinomat.Enabled = this.MyBus.MyBusMode == BusMode.MinomatV2 || this.MyBus.MyBusMode == BusMode.MinomatRadioTest;
      if (this.MyBus.MyDeviceList.SelectedDevice != null)
      {
        int tableIndex = this.MyBus.MyDeviceList.SelectedDevice.TableIndex;
        if (tableIndex >= 0)
        {
          for (int index = 0; index < this.dataGridBusTable.Rows.Count; ++index)
          {
            if (tableIndex < BusTable.Rows.Count && ((DataRowView) this.dataGridBusTable.Rows[index].DataBoundItem).Row == BusTable.Rows[tableIndex])
            {
              if (!this.dataGridBusTable.Rows[index].Selected)
              {
                this.dataGridBusTable.CurrentCell = this.dataGridBusTable.Rows[index].Cells[0];
                this.dataGridBusTable.ClearSelection();
                this.dataGridBusTable.Rows[index].Selected = true;
                this.dataGridBusTable.Refresh();
                break;
              }
              break;
            }
          }
        }
      }
      this.textBoxRepeadsOnError.Text = this.MyBus.MaxRequestRepeat.ToString();
      this.comboBoxBusModeEventsEnabled = false;
      if (this.comboBoxBusMode.Items.Contains((object) this.MyBus.MyBusMode.ToString()))
        this.comboBoxBusMode.SelectedIndex = this.comboBoxBusMode.Items.IndexOf((object) this.MyBus.MyBusMode.ToString());
      else if (!string.IsNullOrEmpty(this.comboBoxBusMode.Text))
        this.MyBus.SetBaseMode((BusMode) Enum.Parse(typeof (BusMode), this.comboBoxBusMode.Text));
      this.textBoxMinomatSerial.Text = this.MyBus.DaKonId;
      DateTime readFromTime = this.MyBus.ReadFromTime;
      if (!ZR_ClassLibrary.Util.AreEqual((object) this.MyBus.ReadFromTime, (object) DateTime.MinValue) && !ZR_ClassLibrary.Util.AreEqual((object) this.MyBus.ReadFromTime, (object) DateTime.MaxValue))
        this.dateTimePickerFromTime.Value = this.MyBus.ReadFromTime;
      DateTime readToTime = this.MyBus.ReadToTime;
      if (!ZR_ClassLibrary.Util.AreEqual((object) this.MyBus.ReadToTime, (object) DateTime.MinValue) && !ZR_ClassLibrary.Util.AreEqual((object) this.MyBus.ReadToTime, (object) DateTime.MaxValue))
        this.dateTimePickerToTime.Value = this.MyBus.ReadToTime;
      this.comboBoxBusModeEventsEnabled = true;
      if (this.LoopIsRunning)
        return;
      this.SetEnabledFunctions();
    }

    private void btnSetDefaultSettings_Click(object sender, EventArgs e)
    {
      this.MyBus.SetDefaultSettings();
      this.UpdateSettings();
    }

    private void dataGridBusTable_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyValue != 46 || this.dataGridBusTable.SelectedRows.Count != 1)
        return;
      DataGridViewRow selectedRow = this.dataGridBusTable.SelectedRows[0];
      if (selectedRow.Cells.Count > 5 && selectedRow.Cells[2].Value.ToString() == "Collision")
      {
        this.MyBus.MyDeviceList.RemoveFaultyDevices(Convert.ToByte(selectedRow.Cells[5].Value.ToString()));
        this.dataGridBusTable.Rows.Remove(selectedRow);
      }
    }

    private void comboBoxBusMode_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (!this.comboBoxBusModeEventsEnabled || !this.IsRunning)
        return;
      if (this.ModeChangeBreak)
      {
        this.ModeChangeBreak = false;
      }
      else
      {
        this.BusinfoIsManualChanged = true;
        if (GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("13"), MessageBoxButtons.OKCancel) != DialogResult.OK)
        {
          this.ModeChangeBreak = true;
          this.RefreshBusInfo();
        }
        else
        {
          this.MyBus.SetBaseMode((BusMode) Enum.Parse(typeof (BusMode), this.comboBoxBusMode.Text));
          this.tabControl.SelectedTab = this.tabPageBusInfo;
          this.Refresh();
          if (this.MyBus.MyBusMode == BusMode.MBusPointToPoint)
          {
            int num = (int) new AddDevice(this.MyBus).ShowDialog();
          }
          else if (this.MyBus.MyBusMode == BusMode.Minol_Device)
            this.MyBus.AddDevice(DeviceTypes.Minol_Device, -1, -1L);
          this.RefreshBusInfo();
          this.gboxMinomat.Enabled = this.MyBus.MyBusMode == BusMode.MinomatV2;
        }
      }
    }

    private void textBoxRepeadsOnError_Leave(object sender, EventArgs e) => this.CheckRepeats();

    private void textBoxRepeadsOnError_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.CheckRepeats();
    }

    private void CheckRepeats()
    {
      bool flag = true;
      int num1 = 0;
      try
      {
        num1 = int.Parse(this.textBoxRepeadsOnError.Text);
        if (num1 >= 1 && num1 <= 10)
          flag = false;
      }
      catch
      {
      }
      if (flag)
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Value error on Repeat setup");
        this.textBoxRepeadsOnError.Text = this.MyBus.MaxRequestRepeat.ToString();
      }
      else
        this.MyBus.MaxRequestRepeat = num1;
    }

    private void textBoxScanStartAddress_Leave(object sender, EventArgs e)
    {
      try
      {
        this.MyBus.ScanStartAddress = ZR_ClassLibrary.Util.ToInteger((object) this.textBoxScanStartAddress.Text);
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", this.label15.Text + ": " + ex.Message);
        this.textBoxScanStartAddress.Text = this.MyBus.ScanStartAddress.ToString();
      }
    }

    private void textBoxScanStartNumber_Leave(object sender, EventArgs e)
    {
      this.MyBus.ScanStartSerialnumber = this.textBoxScanStartNumber.Text;
    }

    private void textBoxOrganizeStartAddress_Leave(object sender, EventArgs e)
    {
      try
      {
        this.MyBus.OrganizeStartAddress = ZR_ClassLibrary.Util.ToInteger((object) this.textBoxOrganizeStartAddress.Text);
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", this.label17.Text + ": " + ex.Message);
        this.textBoxOrganizeStartAddress.Text = this.MyBus.OrganizeStartAddress.ToString();
      }
    }

    private void textBoxLoopTime_Leave(object sender, EventArgs e)
    {
      try
      {
        this.MyBus.CycleTime = ZR_ClassLibrary.Util.ToInteger((object) this.textBoxLoopTime.Text);
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", this.label14.Text + ": " + ex.Message);
        this.textBoxLoopTime.Text = this.MyBus.CycleTime.ToString();
      }
    }

    private void dateTimePickerFromTime_ValueChanged(object sender, EventArgs e)
    {
      this.MyBus.ReadFromTime = this.dateTimePickerFromTime.Value;
    }

    private void dateTimePickerToTime_ValueChanged(object sender, EventArgs e)
    {
      this.MyBus.ReadToTime = this.dateTimePickerToTime.Value;
    }

    private void textBoxMinomatSerial_Leave(object sender, EventArgs e)
    {
      this.MyBus.DaKonId = this.textBoxMinomatSerial.Text;
    }

    private void textBoxZDF_FileName_Leave(object sender, EventArgs e)
    {
      this.MyBus.LogFilePath = this.textBoxZDF_FileName.Text;
    }

    private void checkBoxOnlySecondaryAddressing_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.OnlySecondaryAddressing = this.checkBoxOnlySecondaryAddressing.Checked;
    }

    private void checkBoxIsMultitelegrammEnabled_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.IsMultiTelegrammEnabled = this.checkBoxIsMultitelegrammEnabled.Checked;
    }

    private void checkBoxApplicationReset_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.SendFirstApplicationReset = this.checkBoxApplicationReset.Checked;
    }

    private void checkBoxUseReqUd2_5B_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.UseREQ_UD2_5B = this.checkBoxUseReqUd2_5B.Checked;
    }

    private void checkBoxSND_NKE_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.SendFirstSND_NKE = this.checkBoxSND_NKE.Checked;
    }

    private void checkBoxFastSecoundaryAddressing_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.FastSecondaryAddressing = this.checkBoxFastSecoundaryAddressing.Checked;
    }

    private void checkBoxKeepDestinationAddress_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.KeepExistingDestinationAddress = this.checkBoxKeepDestinationAddress.Checked;
    }

    private void checkBoxChangeInterfaceBaudrateToo_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.ChangeInterfaceBaudrateToo = this.checkBoxChangeInterfaceBaudrateToo.Checked;
    }

    private void checkBoxUseExternalKeySignal_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.UseExternalKeyForReading = this.checkBoxUseExternalKeySignal.Checked;
    }

    private void checkBoxBeepByReading_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.BeepSignalForReadResult = this.checkBoxBeepByReading.Checked;
    }

    private void checkBoxAutoSaveSetup_CheckedChanged(object sender, EventArgs e)
    {
      if (this.initActive)
        return;
      this.MyBus.Autosave = this.checkBoxAutoSaveSetup.Checked;
    }

    private void checkBoxLoggToZDF_File_CheckedChanged(object sender, EventArgs e)
    {
      this.MyBus.LogToFileEnabled = this.checkBoxLoggToZDF_File.Checked;
    }

    private void UpdateSettings()
    {
      if (this.MyBus == null)
        return;
      try
      {
        this.comboBoxBusMode.SelectedIndex = this.comboBoxBusMode.Items.IndexOf((object) this.MyBus.MyBusMode.ToString());
        this.textBoxMinomatSerial.Text = this.MyBus.DaKonId;
        this.textBoxZDF_FileName.Text = this.MyBus.LogFilePath;
        this.textBoxScanStartNumber.Text = this.MyBus.ScanStartSerialnumber;
        this.textBoxOrganizeStartAddress.Text = this.MyBus.OrganizeStartAddress.ToString();
        this.textBoxRepeadsOnError.Text = this.MyBus.MaxRequestRepeat.ToString();
        this.textBoxScanStartAddress.Text = this.MyBus.ScanStartAddress.ToString();
        this.textBoxLoopTime.Text = this.MyBus.CycleTime.ToString();
        this.checkBoxOnlySecondaryAddressing.Checked = this.MyBus.OnlySecondaryAddressing;
        this.checkBoxFastSecoundaryAddressing.Checked = this.MyBus.FastSecondaryAddressing;
        this.checkBoxChangeInterfaceBaudrateToo.Checked = this.MyBus.ChangeInterfaceBaudrateToo;
        this.checkBoxUseExternalKeySignal.Checked = this.MyBus.UseExternalKeyForReading;
        this.checkBoxBeepByReading.Checked = this.MyBus.BeepSignalForReadResult;
        this.checkBoxKeepDestinationAddress.Checked = this.MyBus.KeepExistingDestinationAddress;
        this.checkBoxLoggToZDF_File.Checked = this.MyBus.LogToFileEnabled;
        this.checkBoxIsMultitelegrammEnabled.Checked = this.MyBus.IsMultiTelegrammEnabled;
        this.checkBoxUseReqUd2_5B.Checked = this.MyBus.UseREQ_UD2_5B;
        this.checkBoxApplicationReset.Checked = this.MyBus.SendFirstApplicationReset;
        this.checkBoxSND_NKE.Checked = this.MyBus.SendFirstSND_NKE;
        if (this.MyBus.ReadFromTime != DateTime.MinValue)
          this.dateTimePickerFromTime.Value = this.MyBus.ReadFromTime;
        if (this.MyBus.ReadToTime != DateTime.MinValue)
          this.dateTimePickerToTime.Value = this.MyBus.ReadToTime;
        this.checkBoxAutoSaveSetup.Checked = this.MyBus.Autosave;
      }
      catch (Exception ex)
      {
        DeviceCollectorWindow.logger.Error<string, string>("{0} {1}", ex.Message, ex.StackTrace);
      }
    }

    private void WorkMessage(object sender, GMM_EventArgs MessageObj)
    {
      if (this.InvokeRequired)
      {
        try
        {
          this.BeginInvoke((Delegate) new EventHandler<GMM_EventArgs>(this.WorkMessage), sender, (object) MessageObj);
        }
        catch
        {
        }
      }
      else
      {
        switch (MessageObj.TheMessageType)
        {
          case GMM_EventArgs.MessageType.StandardMessage:
            this.labelStatus.Text = this.BaseMessage + MessageObj.EventMessage + MessageObj.InfoNumber.ToString();
            break;
          case GMM_EventArgs.MessageType.Alive:
            ++this.aliveCounter;
            break;
          case GMM_EventArgs.MessageType.PrimaryAddressMessage:
            this.labelStatus.Text = this.BaseMessage + MessageObj.EventMessage + MessageObj.InfoNumber.ToString("x04");
            break;
          case GMM_EventArgs.MessageType.ScanAddressMessage:
            this.labelStatus.Text = this.BaseMessage + MessageObj.EventMessage + "  found:" + MessageObj.InfoNumber.ToString();
            this.RefreshBusInfo();
            break;
          case GMM_EventArgs.MessageType.EndMessage:
            this.labelStatus.Text = this.BaseMessage + string.Empty;
            break;
          case GMM_EventArgs.MessageType.MinomatErrorMessage:
            this.labelStatus.Text = this.BaseMessage + MessageObj.EventMessage;
            this.SetEnabledFunctions();
            break;
          case GMM_EventArgs.MessageType.MinomatAliveMessage:
            this.labelStatus.Text = this.BaseMessage + MessageObj.EventMessage;
            this.SetEnabledFunctions();
            break;
          case GMM_EventArgs.MessageType.MinomatConnectingMessage:
            this.labelStatus.Text = this.BaseMessage + MessageObj.EventMessage + MessageObj.InfoNumber.ToString();
            this.SetEnabledFunctions();
            break;
          case GMM_EventArgs.MessageType.KeyReceived:
            if (this.MyBus.MyBusMode != BusMode.MBus && this.MyBus.MyBusMode != BusMode.MBusPointToPoint && this.MyBus.MyBusMode != BusMode.WaveFlowRadio && this.MyBus.MyBusMode != BusMode.MinomatV2 || !this.MyBus.UseExternalKeyForReading)
              break;
            this.ReadDeviceParameter(false);
            break;
          case GMM_EventArgs.MessageType.MessageAndProgressPercentage:
            this.labelStatus.Text = this.BaseMessage + MessageObj.EventMessage;
            if (MessageObj.ProgressPercentage >= 0 && MessageObj.ProgressPercentage <= 100)
              this.progressBar.Value = MessageObj.ProgressPercentage;
            if (this.MyBus.MyBusMode == BusMode.RelayDevice)
              break;
            this.RefreshBusInfo();
            break;
          case GMM_EventArgs.MessageType.SimpleMessage:
            this.labelStatus.Text = this.BaseMessage + MessageObj.EventMessage;
            break;
          case GMM_EventArgs.MessageType.WalkByPacketReceived:
            this.labelStatus.Text = this.BaseMessage + MessageObj.EventMessage;
            this.RefreshBusInfo();
            this.SetEnabledFunctions();
            this.AddToZDF_ParameterTable(((RadioList) this.MyBus.MyDeviceList).DeviceInfoOfLastReceivedPacket);
            this.Cursor = Cursors.WaitCursor;
            Application.DoEvents();
            break;
        }
      }
    }

    private void ClearFields()
    {
      this.InfoCounter = 0;
      this.ErrorCounter = 0;
      this.textBoxSerialNr.Text = "";
      this.textBoxMedium.Text = "";
      this.textBoxManufacturer.Text = "";
      this.progressBar.Value = 0;
      this.labelStatus.Text = "";
      this.BaseMessage = string.Empty;
    }

    private void buttonReadMemory_Click(object sender, EventArgs e)
    {
      this.MyDump = new MemoryDump();
      this.MyBus.SetMessageInfo("ReadMemory at address: 0x");
      int hexDecValue1 = this.GetHexDecValue(this.textBoxNumberOfBytes.Text);
      int hexDecValue2 = this.GetHexDecValue(this.textBoxStartAddress.Text);
      int selectedIndex = this.listBoxLocation.SelectedIndex;
      this.Cursor = Cursors.WaitCursor;
      ByteField MemoryData;
      bool flag = this.MyBus.ReadMemory((MemoryLocation) selectedIndex, hexDecValue2, hexDecValue1, out MemoryData);
      this.Cursor = Cursors.Default;
      if (!flag)
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "ReadMemory Error");
      }
      else if (MemoryData.Count == 0)
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "keine Daten empfangen");
      }
      else
      {
        int count = MemoryData.Count;
        int[] data = new int[count];
        long num3 = 0;
        for (int index = 0; index < count; ++index)
        {
          num3 += (long) MemoryData.Data[index];
          data[index] = (int) MemoryData.Data[index];
        }
        this.labelStatus.Text = "Read memory ok. Checksum: 0x" + num3.ToString("x");
        this.Refresh();
        this.MyDump.SetMemory(hexDecValue2, hexDecValue2 + count - 1, data, this.listBoxLocation.SelectedItem.ToString());
        int num4 = (int) this.MyDump.ShowDialog();
        if (!this.MyDump.WriteChanges)
          return;
        this.MyBus.SetMessageInfo("WriteMemory at address: 0x");
        this.WriteMemory();
      }
    }

    private int GetHexDecValue(string InString)
    {
      InString.TrimStart();
      return InString.Length > 2 && InString[0] == '0' && InString[1] == 'x' ? int.Parse(InString.Substring(2), NumberStyles.HexNumber) : int.Parse(InString);
    }

    private void WriteMemory()
    {
      ArrayList data1 = new ArrayList();
      int selectedIndex = this.listBoxLocation.SelectedIndex;
      this.MyDump.GetChangedData(ref data1);
      int index1;
      for (int index2 = 0; index2 < data1.Count; index2 = index1 - 1 + 1)
      {
        index1 = index2 + 1;
        while (index1 < data1.Count && ((MemoryDump.ChangedDataInfo) data1[index1 - 1]).Address + 1 == ((MemoryDump.ChangedDataInfo) data1[index1]).Address)
          ++index1;
        ByteField data2 = new ByteField(index1 - index2);
        for (int index3 = index2; index3 < index1; ++index3)
          data2.Add(((MemoryDump.ChangedDataInfo) data1[index3]).NewData);
        if (!this.MyBus.WriteMemory(selectedIndex, ((MemoryDump.ChangedDataInfo) data1[index2]).Address, data2))
        {
          int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Write error");
          return;
        }
      }
      int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Write ok");
    }

    private void buttonShowMemory_Click(object sender, EventArgs e)
    {
      if (this.MyDump != null)
      {
        int num = (int) this.MyDump.ShowDialog();
        if (!this.MyDump.WriteChanges)
          return;
        this.WriteMemory();
      }
      else
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Dump not available");
      }
    }

    private void menuRequestLoop_Click(object sender, EventArgs e)
    {
      this.SetLoopConditions();
      this.ClearFields();
      this.BaseMessage = this.GetCounterStatus();
      this.tabControl.SelectedTab = this.tabPageDeviceParameter;
      int num = 5;
      while (!this.MyBus.BreakRequest)
      {
        if (num > 2)
          this.labelStatus.Text = this.BaseMessage + "Reading";
        if (this.MyBus.MyDeviceList.SelectedDevice != null && this.MyBus.MyDeviceList.SelectedDevice is MBusDevice)
        {
          MBusDevice selectedDevice = (MBusDevice) this.MyBus.MyDeviceList.SelectedDevice;
          selectedDevice.followingTelegrammAnnounced = false;
          selectedDevice.followingTelegrammTransmit_FCB_Odd = !this.MyBus.UseREQ_UD2_5B;
        }
        DeviceInfo Info;
        if (this.MyBus.ReadParameter(out Info))
        {
          if (Info != null)
          {
            this.textBoxSerialNr.Text = Info.MeterNumber;
            this.textBoxMedium.Text = Info.Medium.ToString();
            this.textBoxManufacturer.Text = Info.Manufacturer.ToString();
            ++this.InfoCounter;
            Info.GenerateParameterTable();
            this.dataGridParameterList.DataSource = (object) Info.ParameterTable;
            this.Refresh();
            this.AddToZDF_ParameterTable(Info);
          }
        }
        else
          ++this.ErrorCounter;
        this.BaseMessage = this.GetCounterStatus();
        this.labelStatus.Text = this.BaseMessage + " ... waiting";
        try
        {
          num = int.Parse(this.textBoxLoopTime.Text) * 2;
        }
        catch
        {
          this.textBoxLoopTime.Text = "5";
          num = 5;
        }
        this.Refresh();
        for (int index = 0; index < num && !this.MyBus.BreakRequest; ++index)
        {
          this.progressBar.Value = 100 / num * (index + 1);
          Application.DoEvents();
          Thread.Sleep(500);
        }
        this.Refresh();
        Application.DoEvents();
      }
      this.ClearFields();
      this.ResetLoopConditions();
    }

    private void menuItemRequestLoopAll_Click(object sender, EventArgs e)
    {
      if (this.MyBus.MyDeviceList.bus == null || this.MyBus.MyDeviceList.bus.Count < 0)
        return;
      this.SetLoopConditions();
      this.ClearFields();
      this.BaseMessage = this.GetCounterStatus();
      this.tabControl.SelectedTab = this.tabPageAllParameter;
      int num1 = 0;
      while (!this.MyBus.BreakRequest)
      {
        this.labelStatus.Text = "Reading";
        this.MyBus.MyDeviceList.SelectedDevice = (BusDevice) this.MyBus.MyDeviceList.bus[num1++];
        DeviceInfo Info;
        if (this.MyBus.ReadParameter(out Info))
        {
          this.textBoxSerialNr.Text = Info.MeterNumber;
          this.textBoxMedium.Text = Info.Medium.ToString();
          this.textBoxManufacturer.Text = Info.Manufacturer.ToString();
          ++this.InfoCounter;
          Info.GenerateParameterTable();
          this.dataGridParameterList.DataSource = (object) Info.ParameterTable;
          this.BaseMessage = this.GetCounterStatus();
          this.Refresh();
          this.AddToZDF_ParameterTable(Info);
        }
        else
          ++this.ErrorCounter;
        Thread.Sleep(100);
        Application.DoEvents();
        if (num1 == this.MyBus.MyDeviceList.bus.Count)
        {
          num1 = 0;
          this.labelStatus.Text += " ... waiting";
          this.BaseMessage = this.GetCounterStatus();
          this.labelStatus.Text = this.BaseMessage + " ... waiting";
          this.Refresh();
          int num2;
          try
          {
            num2 = int.Parse(this.textBoxLoopTime.Text) * 2;
          }
          catch
          {
            this.textBoxLoopTime.Text = "5";
            num2 = 5;
          }
          for (int index = 0; index < num2 && !this.MyBus.BreakRequest; ++index)
          {
            this.progressBar.Value = 100 / num2 * (index + 1);
            Application.DoEvents();
            Thread.Sleep(500);
          }
          this.Refresh();
        }
      }
      this.ClearFields();
      this.ResetLoopConditions();
    }

    private string GetCounterStatus()
    {
      StringBuilder stringBuilder = new StringBuilder(100);
      stringBuilder.Append("(ok:");
      stringBuilder.Append(this.InfoCounter.ToString());
      stringBuilder.Append(" err:");
      stringBuilder.Append(this.ErrorCounter.ToString());
      stringBuilder.Append(") ");
      return stringBuilder.ToString();
    }

    private void SetEnabledFunctions()
    {
      bool flag1 = UserManager.CheckPermission(UserRights.Rights.Developer);
      bool flag2 = !flag1 && UserManager.CheckPermission("Demo");
      bool flag3 = this.MyBus.MyBusMode == BusMode.MBus;
      bool flag4 = this.MyBus.MyBusMode == BusMode.MBusPointToPoint;
      bool flag5 = this.MyBus.MyBusMode == BusMode.WaveFlowRadio;
      bool flag6 = this.MyBus.MyBusMode == BusMode.MinomatV2;
      bool flag7 = this.MyBus.MyBusMode == BusMode.Minol_Device;
      bool flag8 = this.MyBus.MyBusMode == BusMode.RelayDevice;
      bool flag9 = this.MyBus.MyBusMode == BusMode.Radio2 || this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio4 || this.MyBus.MyBusMode == BusMode.MinomatRadioTest || this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA || this.MyBus.MyBusMode == BusMode.RadioMS || this.MyBus.MyBusMode == BusMode.wMBusT2_other;
      bool flag10 = flag6 & flag1;
      bool flag11 = false;
      if (this.dataGridBusTable.DataSource != null && ((DataTable) this.dataGridBusTable.DataSource).Rows.Count > 0)
        flag11 = true;
      bool flag12 = this.MyBus.MyDeviceList != null && this.MyBus.MyDeviceList.SelectedDevice != null;
      bool flag13 = flag12 && this.MyBus.MyDeviceList.SelectedDevice is MBusDevice;
      bool flag14 = flag12 && this.MyBus.MyDeviceList.SelectedDevice is Serie3MBus;
      bool flag15 = flag12 && this.MyBus.MyDeviceList.SelectedDevice is Serie2MBus && !flag14;
      bool flag16 = flag12 && this.MyBus.MyDeviceList.SelectedDevice is Serie1MBus && !flag15 && !flag14;
      bool flag17 = flag16 | flag15;
      bool flag18 = flag15 | flag14;
      bool flag19 = flag16 | flag15 | flag14;
      bool flag20 = this.dataGridViewAllParameter.Rows.Count > 0;
      bool flag21 = this.MyBus.MyDeviceList != null && this.MyBus.MyDeviceList.MBusConverterAvailable;
      this.menuFile.Enabled = true;
      this.menuBus.Enabled = true;
      this.menuDevice.Enabled = true;
      this.menuRadio.Enabled = true;
      this.menuRead.Enabled = true;
      this.menuFunction.Enabled = true;
      this.menuTest.Enabled = true;
      this.menuComponent.Enabled = true;
      this.menuHelp.Enabled = true;
      this.menuBus.Visible = flag3 | flag4 | flag5 | flag7 | flag6 | flag8 | flag9;
      this.menuDevice.Visible = flag3 | flag4 | flag5;
      this.menuRadio.Visible = false;
      this.menuFunction.Visible = flag1;
      this.menuTest.Visible = flag1;
      this.menuWriteBusinfo.Enabled = !flag2;
      this.menuReadBusinfo.Enabled = !flag2;
      this.menuItemLoadZDF_File.Enabled = !flag2;
      this.menuItemExportDataTable.Enabled = !flag2 & flag20;
      this.menuItemExportExcelDataTable.Enabled = !flag2 & flag20;
      this.menuItemSetupProfiles.Visible = flag1;
      this.menuItem11.Visible = flag1;
      this.menuDeleteBusInfo.Enabled = flag11 | flag6;
      this.menuDeleteDeviceFromBus.Enabled = flag11 & flag12;
      this.menuScanByAddress.Enabled = ((flag3 ? 1 : (!flag4 ? 0 : (!flag11 ? 1 : 0))) | (flag6 ? 1 : 0) | (flag8 ? 1 : 0) | (flag9 ? 1 : 0)) != 0;
      this.menuScanBySerialNumber.Enabled = flag3;
      this.menuSearchSingleDeviceByAddress.Enabled = ((flag3 ? 1 : (!flag4 ? 0 : (!flag11 ? 1 : 0))) | (flag6 ? 1 : 0)) != 0;
      this.menuSearchSingleDeviceBySerialNumber.Enabled = flag3 | flag5 | flag6;
      this.menuAddDeviceByParameter.Enabled = flag3 | flag5 || flag4 && !flag11 || flag7 && !flag11;
      this.menuSelectDeviceByPrimaryAddress.Enabled = flag3 & flag11;
      this.menuItemShowInfo.Visible = flag10;
      this.menuSetPrimaryAddress.Visible = flag3 | flag4;
      this.menuSetPrimaryAddress.Enabled = flag12;
      this.menuOrganize.Visible = flag3;
      this.menuOrganize.Enabled = flag11;
      this.menuItemSelectParameterListLine.Visible = flag17 | flag14 & flag3;
      this.menuItemSetSelectedDeviceToDefaultParameterList.Visible = flag17;
      this.menuItemSetSelectedDeviceToFullParameterList.Visible = flag17;
      this.menuItemSelectParameterList.Visible = flag14 & flag3;
      this.menuItem23.Visible = flag3;
      this.menuItemSetAllDevicesToDefaultParameterList.Visible = flag3;
      this.menuItemSetAllDevicesToDefaultParameterList.Enabled = flag11;
      this.menuItemSetAllDevicesToFullParameterList.Visible = flag3;
      this.menuItemSetAllDevicesToFullParameterList.Enabled = flag11;
      bool flag22 = flag3 | flag4;
      bool flag23 = flag22 & flag12;
      this.menuLineBaud.Visible = flag22;
      this.menuSetSelectedDeviceTo300_Baud.Visible = flag22;
      this.menuSetSelectedDeviceTo300_Baud.Enabled = flag23;
      this.menuSetSelectedDeviceTo2400_Baud.Visible = flag22;
      this.menuSetSelectedDeviceTo2400_Baud.Enabled = flag23;
      this.menuSetSelectedDeviceTo9600_Baud.Visible = flag22;
      this.menuSetSelectedDeviceTo9600_Baud.Enabled = flag23;
      this.menuSetSelectedDeviceTo38400_Baud.Visible = flag22;
      this.menuSetSelectedDeviceTo38400_Baud.Enabled = flag23;
      this.menuItemMBusConverterLine.Visible = flag21;
      this.menuItemMBusConverter.Visible = flag21;
      this.menuReadDeviceParameter.Enabled = flag12;
      this.menuReadAll.Visible = flag3 | flag5;
      this.menuReadAll.Enabled = flag12;
      this.menuRequestLoop.Enabled = flag12;
      this.menuItemRequestLoopAll.Visible = flag3;
      this.menuItemRequestLoopAll.Enabled = flag3 && this.MyBus.MyDeviceList.bus != null && this.MyBus.MyDeviceList.bus.Count > 0;
      this.menuSerchBaudrate.Visible = flag18 & flag1;
      this.menuShowAllParameters.Enabled = flag11;
      this.menuLineSerieX.Visible = flag18;
      this.menuGetVersion.Visible = flag18;
      this.menuGetVersionTestCycle.Visible = flag18;
      this.menuConnectAcrossBaudrates.Visible = flag18 & flag1;
      if (flag9 && this.MyBus.RadioReader.IsBusy)
      {
        this.buttonBreak.Enabled = !this.MyBus.BreakRequest;
        this.menuScanByAddress.Enabled = this.MyBus.BreakRequest;
      }
      this.menuCtReadMeterParameter.Enabled = this.menuReadDeviceParameter.Enabled;
      this.menuItemShowMeterData.Enabled = flag12;
      this.menuItemCmSetParameterListLine.Visible = this.menuItemSelectParameterListLine.Visible;
      this.menuCmSetToDefaultParameterList.Visible = this.menuItemSetSelectedDeviceToDefaultParameterList.Visible;
      this.menuCmSetToFullParameterList.Visible = this.menuItemSetSelectedDeviceToFullParameterList.Visible;
      this.menuCtSelectParameterList.Visible = this.menuItemSelectParameterList.Visible;
      this.menuCtSetPrimaryAddress.Visible = this.menuSetPrimaryAddress.Visible;
      this.menuCtDeleteFromBusinfo.Enabled = this.menuDeleteDeviceFromBus.Enabled;
      this.menuCtMBusConverterLine.Visible = this.menuItemMBusConverterLine.Visible;
      this.menuCtMBusConverter.Visible = this.menuItemMBusConverter.Visible;
      this.buttonToolbarReadDevice.Enabled = this.menuReadDeviceParameter.Enabled;
      this.buttonToolbarReadAllDevices.Enabled = this.menuReadAll.Enabled;
      this.buttonToolbarDeleteBusinfo.Enabled = this.menuDeleteBusInfo.Enabled;
      this.buttonToolbarScanBusByAddress.Enabled = this.menuScanByAddress.Enabled;
      this.buttonToolbarScanBusBySerialNumber.Enabled = this.menuScanBySerialNumber.Enabled;
      this.buttonToolbarSearchSingelDeviceByAddress.Enabled = this.menuSearchSingleDeviceByAddress.Enabled;
      this.buttonToolbarSearchSingelDeviceBySerialNumber.Enabled = this.menuSearchSingleDeviceBySerialNumber.Enabled;
      if (flag19 & flag1)
      {
        if (this.tabControl.TabPages.IndexOf(this.tabPageMemory) < 0)
          this.tabControl.TabPages.Add(this.tabPageMemory);
      }
      else if (this.tabControl.TabPages.IndexOf(this.tabPageMemory) >= 0)
        this.tabControl.TabPages.RemoveAt(this.tabControl.TabPages.IndexOf(this.tabPageMemory));
      this.groupBoxLogger.Visible = flag1;
      this.groupBoxRadioReceiverSetup.Visible = false;
      this.groupBoxRadioReadoutSystem.Visible = false;
      this.checkBoxLoggToFile.Enabled = !flag2;
      this.checkBoxLoggToZDF_File.Enabled = !flag2;
      this.buttonReadAll.Visible = this.menuReadAll.Enabled;
      if (flag12)
      {
        if (this.MyBus.MyDeviceList.SelectedDevice is Serie3MBus)
        {
          this.buttonEraseFlash.Visible = true;
          this.listBoxLocation.Visible = false;
          this.listBoxLocation.SelectedIndex = 1;
          this.labelLocation.Visible = false;
        }
        else
        {
          this.buttonEraseFlash.Visible = false;
          this.listBoxLocation.Visible = true;
          this.labelLocation.Visible = false;
        }
      }
      else
        this.buttonEraseFlash.Visible = false;
    }

    private void SetLoopConditions()
    {
      bool flag = this.MyBus.MyBusMode == BusMode.Radio2 || this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio4 || this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.wMBusT2_other || this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA || this.MyBus.MyBusMode == BusMode.RadioMS || this.MyBus.MyBusMode == BusMode.MinomatRadioTest;
      this.Cursor = Cursors.WaitCursor;
      this.buttonToolbarReadDevice.Enabled = false;
      this.buttonToolbarReadAllDevices.Enabled = false;
      this.buttonToolbarDeleteBusinfo.Enabled = false;
      this.buttonToolbarScanBusByAddress.Enabled = false;
      this.buttonToolbarScanBusBySerialNumber.Enabled = false;
      this.buttonToolbarSearchSingelDeviceByAddress.Enabled = false;
      this.buttonToolbarSearchSingelDeviceBySerialNumber.Enabled = false;
      this.buttonBreak.Enabled = true;
      for (int index = 0; index < this.SerialBusMenu.MenuItems.Count; ++index)
        this.SerialBusMenu.MenuItems[index].Enabled = false;
      if (!flag)
      {
        this.dataGridBusTable.Enabled = false;
        this.ControlBox = false;
        this.tabPageBusInfo.ContextMenu = (ContextMenu) null;
      }
      this.LoopIsRunning = true;
      this.MyBus.BreakRequest = false;
      this.buttonOk.Enabled = false;
      Application.DoEvents();
    }

    private void ResetLoopConditions()
    {
      bool flag = this.MyBus.MyBusMode == BusMode.Radio2 || this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio4 || this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.wMBusT2_other || this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA || this.MyBus.MyBusMode == BusMode.RadioMS || this.MyBus.MyBusMode == BusMode.MinomatRadioTest;
      this.LoopIsRunning = false;
      this.labelStatus.Text = "";
      this.tabPageBusInfo.ContextMenu = this.contextMenu1;
      this.ControlBox = true;
      this.dataGridBusTable.Enabled = true;
      this.SetEnabledFunctions();
      this.buttonBreak.Enabled = false;
      this.Cursor = Cursors.Default;
      if (!flag)
        this.MyBus.BreakRequest = false;
      this.buttonOk.Enabled = true;
    }

    private void menuSchnittstellenFehlerLoop_Click(object sender, EventArgs e)
    {
      this.MyBus.BreakRequest = false;
      int num1 = 0;
      this.LoopIsRunning = true;
      Random random = new Random();
      ArrayList ParameterList = new ArrayList();
      int index1 = -1;
      bool flag = true;
      ByteField DataBlock = new ByteField();
      this.MyBus.MyCom.GetCommParameter(ref ParameterList);
      for (int index2 = 0; index2 < ParameterList.Count; index2 += 2)
      {
        if (ParameterList[index2].ToString() == "Baudrate")
        {
          index1 = index2 + 1;
          break;
        }
      }
      if (ParameterList[index1].ToString() == "2400")
        flag = false;
      this.tabControl.SelectedTab = this.tabPageDeviceParameter;
      DeviceInfo Info;
      while (!this.MyBus.BreakRequest && this.MyBus.ReadParameter(out Info))
      {
        ++num1;
        this.textBoxSerialNr.Text = Info.MeterNumber;
        this.textBoxMedium.Text = Info.Medium.ToString();
        this.textBoxManufacturer.Text = Info.Manufacturer.ToString();
        Info.GenerateParameterTable();
        this.dataGridParameterList.DataSource = (object) Info.ParameterTable;
        Label labelStatus = this.labelStatus;
        int num2 = this.MyBus.GetJobCounter();
        string str1 = num2.ToString();
        num2 = this.MyBus.GetErrorCounter();
        string str2 = num2.ToString();
        string str3 = "Jobs:" + str1 + "; Errors:" + str2;
        labelStatus.Text = str3;
        this.progressBar.Value = 100;
        ParameterList[index1] = !flag ? (object) "9600" : (object) "2400";
        this.MyBus.MyCom.SetCommParameter(ParameterList);
        if (this.MyBus.MyCom.Open())
        {
          Thread.Sleep(random.Next(1000));
          if (DataBlock.Count > 50)
            DataBlock = new ByteField();
          DataBlock.Add(85);
          if (!this.MyBus.MyCom.TransmitBlock(ref DataBlock))
          {
            int num3 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Send errorblock error");
          }
          ParameterList[index1] = !flag ? (object) "2400" : (object) "9600";
          this.MyBus.MyCom.SetCommParameter(ParameterList);
          int num4 = int.Parse(this.textBoxLoopTime.Text) * 2;
          for (int index3 = 0; index3 < num4 && !this.MyBus.BreakRequest; ++index3)
          {
            this.progressBar.Value = 100 / num4 * (index3 + 1);
            Thread.Sleep(500);
            Application.DoEvents();
          }
          this.Refresh();
        }
        else
          break;
      }
      if (!this.MyBus.BreakRequest)
      {
        int num5 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("2"));
      }
      this.ClearFields();
      this.LoopIsRunning = false;
    }

    private void menuItemReadEEPromLoop_Click(object sender, EventArgs e)
    {
      this.MyBus.OnMessage -= this.EventObject;
      this.SetLoopConditions();
      this.ClearFields();
      this.tabControl.SelectedTab = this.tabPageDeviceParameter;
      this.MyBus.BreakRequest = false;
      int MaxRepeat = this.MyBus.SetMaxRepeat(1);
      this.MyBus.ClearCounters();
      this.MyBus.StartTestloopReadEEProm();
      while (!this.MyBus.BreakRequest)
      {
        ++this.InfoCounter;
        this.labelStatus.Text = "Jobs:" + this.MyBus.GetJobCounter().ToString() + "; Errors:" + this.MyBus.GetErrorCounter().ToString();
        Application.DoEvents();
      }
      this.MyBus.StopTestLoop();
      this.MyBus.SetMaxRepeat(MaxRepeat);
      this.ResetLoopConditions();
      this.MyBus.OnMessage += this.EventObject;
      this.labelStatus.Text = "";
    }

    private void menuItem6_Click(object sender, EventArgs e)
    {
      ArrayList FullNames = new ArrayList();
      Assembly assembly = Assembly.GetAssembly(typeof (DeviceCollectorWindow));
      FullNames.Add((object) assembly.FullName);
      foreach (AssemblyName referencedAssembly in assembly.GetReferencedAssemblies())
        FullNames.Add((object) referencedAssembly.FullName);
      for (int index1 = 0; index1 < FullNames.Count; ++index1)
      {
        for (int index2 = index1 + 1; index2 < FullNames.Count; ++index2)
        {
          if (FullNames[index1].ToString() == FullNames[index2].ToString())
          {
            FullNames.RemoveAt(index2);
            --index2;
          }
        }
      }
      FullNames.Sort();
      int num = (int) new ZR_About(FullNames).ShowDialog();
    }

    private void menuStartAsyncCom_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "AsyncCom";
      this.Hide();
    }

    private void menuStartHandler_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "Handler";
      this.Hide();
    }

    private void menuStartDesigner_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "Designer";
      this.Hide();
    }

    private void menuItemConfigurator_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "Configurator";
      this.Hide();
    }

    private void menuItemStartWindow_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "StartWindow";
      this.Hide();
    }

    private void menuStartGlobalMeterManager_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "GMM";
      this.Hide();
    }

    private void menuItemBack_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "";
      this.Hide();
    }

    private void menuItemQuit_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "Exit";
      this.Hide();
    }

    private void buttonOk_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "";
      this.Hide();
    }

    private void buttonCancel_Click(object sender, EventArgs e)
    {
      this.StopLoop();
      this.StartComponentName = "";
      this.Hide();
    }

    private void SerialBus_Activated(object sender, EventArgs e)
    {
      this.textBoxBusFilePath.Text = this.MyBus.MyBusInfo.BusInfoFilename;
    }

    private void SerialBus_Load(object sender, EventArgs e)
    {
      this.StartComponentName = "";
      this.RefreshBusInfo();
      this.IsRunning = true;
      this.tabControl.SelectedTab = this.tabPageBusInfo;
    }

    private void SerialBus_Closing(object sender, CancelEventArgs e)
    {
      if (this.BusinfoIsManualChanged && GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("3"), MessageBoxButtons.OKCancel) != DialogResult.Cancel)
        this.WriteBusinfo();
      PlugInLoader.GmmConfiguration.SetOrUpdateValue("DeviceCollector", "ZDF_FileName", this.textBoxZDF_FileName.Text);
      PlugInLoader.GmmConfiguration.SetOrUpdateValue("DeviceCollector", "LoggZDF_File", this.checkBoxLoggToZDF_File.Checked.ToString());
    }

    private void SerialBus_Closed(object sender, EventArgs e)
    {
      this.StopLoop();
      this.Hide();
    }

    private void StopLoop()
    {
      this.MyBus.BreakRequest = true;
      if (this.MyBus.MyBusMode == BusMode.Radio2 || this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio4 || this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.wMBusT2_other || this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA || this.MyBus.MyBusMode == BusMode.RadioMS || this.MyBus.MyBusMode == BusMode.MinomatRadioTest)
        return;
      if (this.LoopIsRunning)
        Thread.Sleep(800);
      this.MyBus.BreakRequest = false;
    }

    private void menuMeterMonitor_Click(object sender, EventArgs e)
    {
      this.ClearFields();
      this.tabControl.SelectedTab = this.tabPageDeviceParameter;
      this.MyBus.BreakRequest = false;
      this.MyBus.StartMeterMonitor(5);
      int num = 0;
      ByteField MonitorData;
      while (!this.MyBus.BreakRequest && this.MyBus.GetMeterMonitorData(out MonitorData))
      {
        if (MonitorData.Count > 30)
        {
          for (int index = 0; (int) MonitorData.Data[index] == (int) MonitorData.Data[index + 3] - 1; index += 3)
          {
            if (index > 30)
            {
              num = 0;
              break;
            }
          }
          for (int index = 1; (int) MonitorData.Data[index] == (int) MonitorData.Data[index + 3] - 1; index += 3)
          {
            if (index > 30)
            {
              num = 2;
              break;
            }
          }
          for (int index = 2; (int) MonitorData.Data[index] == (int) MonitorData.Data[index + 3] - 1; index += 3)
          {
            if (index > 30)
            {
              num = 1;
              break;
            }
          }
        }
        for (int index = 0; index < MonitorData.Count; ++index)
        {
          switch (num)
          {
            case 0:
              num = 1;
              break;
            case 1:
              num = 2;
              break;
            default:
              num = 0;
              break;
          }
        }
        Application.DoEvents();
      }
    }

    private void buttonDeleteMeterKey_Click(object sender, EventArgs e)
    {
      if (this.MyBus.DeleteMeterKey(this.GetHexDecValue(this.textBoxValue.Text)))
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Delete MeterKey ok");
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Delete MeterKey error!");
      }
    }

    private void buttonSetBaudrate_Click(object sender, EventArgs e)
    {
      if (this.MyBus.SetBaudrate(this.GetHexDecValue(this.textBoxValue.Text)))
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Baudrate change ok");
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Baudrate change error!");
      }
    }

    private void buttonWriteBitfield_Click(object sender, EventArgs e)
    {
      if (this.MyBus.WriteBitfield(this.GetHexDecValue(this.textBoxStartAddress.Text), (byte) this.GetHexDecValue(this.textBoxAndMask.Text), (byte) this.GetHexDecValue(this.textBoxOrMask.Text)))
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Write Bitfield ok");
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Write Bitfield error");
      }
    }

    private void menuWriteBusinfo_Click(object sender, EventArgs e) => this.WriteBusinfo();

    private void WriteBusinfo()
    {
      if (!this.MyBus.MyBusInfo.SelectBusinfoSaveFilename())
        return;
      this.MyBus.WriteBusInfo(this.MyBus.MyBusInfo.BusInfoFilename);
      this.textBoxBusFilePath.Text = this.MyBus.MyBusInfo.BusInfoFilename;
      this.BusinfoIsManualChanged = false;
    }

    private void menuReadBusinfo_Click(object sender, EventArgs e)
    {
      this.MyBus.BreakRequest = true;
      if (!this.MyBus.MyBusInfo.SelectBusinfoOpenFilename())
        return;
      this.MyBus.ReadBusInfo(this.MyBus.MyBusInfo.BusInfoFilename);
      this.RefreshBusInfo();
      this.SetEnabledFunctions();
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void menuDeleteBusInfo_Click(object sender, EventArgs e) => this.DeleteBusinfo();

    private void DeleteBusinfo()
    {
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      this.MyBus.DeleteBusInfo();
      this.RefreshBusInfo();
      this.Refresh();
    }

    private void menuAddDeviceByParameter_Click(object sender, EventArgs e)
    {
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      int num = (int) new AddDevice(this.MyBus).ShowDialog();
      this.RefreshBusInfo();
    }

    private void menuDeleteDeviceFromBus_Click(object sender, EventArgs e)
    {
      if (this.MyBus.MyDeviceList == null)
        return;
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      this.MyBus.MyDeviceList.DeleteSelectedDevice();
      this.RefreshBusInfo();
    }

    private void menuCtDeleteFromBusinfo_Click(object sender, EventArgs e)
    {
      if (this.MyBus.MyDeviceList == null)
        return;
      this.MyBus.MyDeviceList.DeleteSelectedDevice();
      this.RefreshBusInfo();
    }

    private void menuSearchSingleDeviceByAddress_Click(object sender, EventArgs e)
    {
      this.SearchSingleDeviceByAddress();
    }

    private void menuSearchSingleDeviceBySerialNumber_Click(object sender, EventArgs e)
    {
      this.SearchSingleDeviceBySerialNumber();
    }

    private void menuSelectDeviceByPrimaryAddress_Click(object sender, EventArgs e)
    {
    }

    private void menuScanByAddress_Click(object sender, EventArgs e) => this.ScanByAddress();

    private void ReadAll()
    {
      if (this.MyBus.MyDeviceList == null)
        return;
      this.SetLoopConditions();
      this.tabControl.SelectedTab = this.tabPageAllParameter;
      int num = 0;
      string str = "/" + this.MyBus.MyDeviceList.bus.Count.ToString();
      while (!this.MyBus.BreakRequest && this.MyBus.MyDeviceList.SelectDeviceByIndex(num++))
      {
        DeviceInfo Info;
        bool flag = this.MyBus.ReadParameter(out Info);
        this.AddToZDF_ParameterTable(Info);
        this.labelStatus.Text = "Read all: " + num.ToString() + str;
        if (!flag)
          this.labelStatus.Text += " !!! Read error !!! ";
        this.RefreshBusInfo();
      }
      this.ResetLoopConditions();
    }

    private void ScanByAddress()
    {
      if (this.MyBus.MyDeviceList == null)
        return;
      ZR_ClassLibMessages.ClearErrors();
      this.checkBoxOnlySecondaryAddressing.Checked = false;
      this.BusinfoIsManualChanged = true;
      this.SetLoopConditions();
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      if (this.MyBus.MyBusMode == BusMode.MBusPointToPoint)
      {
        this.MyBus.MyDeviceList.DeleteBusList();
        this.MyBus.MyCom.ResetEarliestTransmitTime();
        this.MyBus.MyDeviceList.SearchSingleDeviceByPrimaryAddress(254);
      }
      else if (this.MyBus.MyBusMode == BusMode.MinomatV2)
      {
        if (!((MinomatList) this.MyBus.MyDeviceList).ReadMinomat())
          ZR_ClassLibMessages.ShowAndClearErrors("Scan by Address", "Minomat readout failed.");
      }
      else if (this.MyBus.MyBusMode == BusMode.Radio2 || this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio4 || this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.wMBusT2_other || this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA || this.MyBus.MyBusMode == BusMode.RadioMS || this.MyBus.MyBusMode == BusMode.MinomatRadioTest)
      {
        if (!((RadioList) this.MyBus.MyDeviceList).ReadRadio())
          ZR_ClassLibMessages.ShowAndClearErrors("Read radio", "Radio reading failed.");
        this.MyBus.BreakRequest = true;
        this.BusinfoIsManualChanged = false;
        this.SetEnabledFunctions();
      }
      else
      {
        int ScanAddress = 0;
        bool flag = true;
        try
        {
          ScanAddress = int.Parse(this.textBoxScanStartAddress.Text);
          if (ScanAddress >= 0 && ScanAddress < 252)
            flag = false;
        }
        catch
        {
        }
        if (flag)
        {
          int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("4"));
          return;
        }
        this.MyBus.SetMessageInfo("Scanning: ");
        this.MyBus.MyDeviceList.ScanFromAddress(ScanAddress);
        this.progressBar.Value = 0;
      }
      this.RefreshBusInfo();
      this.MyBus.SetMessageInfo("");
      this.ResetLoopConditions();
    }

    private void ScanBySerialNumber()
    {
      this.SetLoopConditions();
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      this.MyBus.SetMessageInfo("Scanning: ");
      this.Cursor = Cursors.WaitCursor;
      this.BusinfoIsManualChanged = true;
      this.MyBus.MyDeviceList.ScanFromSerialNumber(this.textBoxScanStartNumber.Text);
      this.RefreshBusInfo();
      this.MyBus.SetMessageInfo("");
      this.ResetLoopConditions();
    }

    private void SearchSingleDeviceByAddress()
    {
      this.checkBoxOnlySecondaryAddressing.Checked = false;
      this.BusinfoIsManualChanged = true;
      this.SetLoopConditions();
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      AddressReader addressReader = new AddressReader(AddressReader.AddressNode.ShortAdr);
      if (addressReader.ShowDialog() == DialogResult.OK)
      {
        if (this.MyBus.SearchSingleDeviceByPrimaryAddress(addressReader.Address))
        {
          this.RefreshBusInfo();
          this.Refresh();
        }
        else
        {
          int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("1"));
        }
      }
      this.ResetLoopConditions();
    }

    private void SearchSingleDeviceBySerialNumber()
    {
      this.BusinfoIsManualChanged = true;
      this.SetLoopConditions();
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      AddressReader addressReader = new AddressReader(AddressReader.AddressNode.SerialNrAndWildcard);
      if (addressReader.ShowDialog() == DialogResult.OK && !this.MyBus.SearchSingleDeviceBySerialNumber(addressReader.AddressString))
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.AppendLine(DeviceCollectorFunctions.SerialBusMessage.GetString("1"));
        if (ZR_ClassLibMessages.GetLastError() != 0)
          stringBuilder.AppendLine(ZR_ClassLibMessages.GetLastErrorStringTranslated());
        ZR_ClassLibMessages.ClearErrors();
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", stringBuilder.ToString());
      }
      this.RefreshBusInfo();
      this.ResetLoopConditions();
    }

    private void Organize()
    {
      this.BusinfoIsManualChanged = true;
      this.SetLoopConditions();
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      this.MyBus.MyDeviceList.OrganizeBus(int.Parse(this.textBoxOrganizeStartAddress.Text));
      this.RefreshBusInfo();
      this.Cursor = Cursors.Default;
      this.labelStatus.Text = string.Empty;
      this.ResetLoopConditions();
    }

    private void SetPrimaryAddress()
    {
      this.BusinfoIsManualChanged = true;
      this.SetLoopConditions();
      AddressReader addressReader = new AddressReader(AddressReader.AddressNode.ShortAdr);
      if (addressReader.ShowDialog() == DialogResult.OK)
      {
        if (!this.checkBoxKeepDestinationAddress.Checked ? this.MyBus.SetPrimaryAddress(addressReader.Address) : this.MyBus.SetPrimaryAddressWithoutShift(addressReader.Address))
        {
          this.RefreshBusInfo();
          this.Refresh();
        }
        else
        {
          int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("5"));
        }
      }
      this.ResetLoopConditions();
    }

    private void menuGetVersion_Click(object sender, EventArgs e) => this.GetVersion((int[]) null);

    private void menuConnectAcrossBaudrates_Click(object sender, EventArgs e)
    {
      this.GetVersion(Serie2MBus.AllBaudrates);
    }

    private void GetVersion(int[] TestBaudrates)
    {
      ZR_ClassLibMessages.ClearErrors();
      this.SetLoopConditions();
      this.Cursor = Cursors.WaitCursor;
      this.labelStatus.Text = "Read version";
      if (this.MyBus.MyDeviceList.SelectedDevice is Serie3MBus)
      {
        ReadVersionData versionData;
        bool flag = this.MyBus.ReadVersion(out versionData);
        this.Cursor = Cursors.Default;
        this.labelStatus.Text = "Off";
        if (flag)
        {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.AppendLine("Manufacturer =  " + versionData.ManufacturerString);
          stringBuilder.AppendLine("Medium = " + versionData.MBusMediumString);
          stringBuilder.AppendLine("MBusGeneration = 0x" + versionData.MBusGeneration.ToString("x2"));
          stringBuilder.AppendLine("Version = " + versionData.GetVersionString());
          stringBuilder.AppendLine("MBusSerialNr = " + versionData.MBusSerialNr.ToString("d08"));
          if (versionData.BuildTime != DateTime.MinValue)
          {
            stringBuilder.AppendLine("BuildRevision = " + versionData.BuildRevision.ToString());
            stringBuilder.AppendLine("BuildTime = " + versionData.BuildTime.ToShortDateString() + " " + versionData.BuildTime.ToShortTimeString());
            stringBuilder.AppendLine("Signature = 0x" + versionData.FirmwareSignature.ToString("x04"));
          }
          stringBuilder.AppendLine("Hardware = " + versionData.HardwareIdentificationString);
          int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", stringBuilder.ToString());
        }
        else
          ZR_ClassLibMessages.ShowAndClearErrors("DeviceCollector", "ReadVersion Error");
      }
      else
      {
        short Manufacturer;
        byte Medium;
        byte MBusMeterType;
        long Version;
        int MBusSerialNr;
        int HardwareTypeId;
        int HardwareMask;
        bool flag = this.MyBus.ReadVersion(TestBaudrates, out Manufacturer, out Medium, out MBusMeterType, out Version, out MBusSerialNr, out HardwareTypeId, out HardwareMask);
        string str1 = this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, "");
        this.Cursor = Cursors.Default;
        this.labelStatus.Text = "Off";
        if (flag)
        {
          string str2 = "Manufacturer  = " + MBusDevice.GetManufacturer(Manufacturer) + "\r\nMedium = ...... 0x" + Medium.ToString("x2") + "\r\nMBusMeterType = 0x" + MBusMeterType.ToString("x2");
          int count = this.MyBus.MyDeviceList.SelectedDevice.ReceiveBuffer.Count;
          string MessageString = str2 + "\r\nVersion = ..... " + ParameterService.GetVersionString(Version, count) + "\r\nMBusSerialNr  = " + MBusSerialNr.ToString("d8") + "\r\nBaudrate = .... " + str1.ToString();
          if (Version >= 67108864L)
            MessageString = MessageString + "\r\nHardwareTypeId = 0x" + HardwareTypeId.ToString("x08") + "\r\nHardware = " + ParameterService.GetHardwareString((uint) HardwareMask);
          int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", MessageString);
        }
        else
          ZR_ClassLibMessages.ShowAndClearErrors("DeviceCollector", "ReadVersion Error");
      }
      this.ResetLoopConditions();
    }

    private void menuGetVersionTestCycle_Click(object sender, EventArgs e)
    {
      this.SetLoopConditions();
      this.ClearFields();
      this.tabControl.Enabled = false;
      string text = this.textBoxLoopTime.Text;
      this.textBoxLoopTime.Text = "0";
      this.MyBus.SetMessageInfo("Loop; ");
      int num = 0;
      while (!this.MyBus.BreakRequest)
      {
        string str = "Read version loop." + this.GetCounterStatus();
        this.MyBus.SetMessageInfo(str + ": ");
        this.labelStatus.Text = str;
        this.Refresh();
        this.progressBar.Value = num * 10 % 100 + 10;
        if (this.MyBus.ReadVersion((int[]) null, out short _, out byte _, out byte _, out long _, out int _))
          ++this.InfoCounter;
        else
          ++this.ErrorCounter;
        ++num;
        Application.DoEvents();
      }
      this.textBoxLoopTime.Text = text;
      this.MyBus.SetMessageInfo("");
      this.progressBar.Value = 0;
      this.tabControl.Enabled = true;
      this.ResetLoopConditions();
    }

    private void menuScanBySerialNumber_Click(object sender, EventArgs e)
    {
      this.ScanBySerialNumber();
    }

    private void menuSetPrimaryAddress_Click(object sender, EventArgs e)
    {
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      this.SetPrimaryAddress();
    }

    private void menuCtSetPrimaryAddress_Click(object sender, EventArgs e)
    {
      this.SetPrimaryAddress();
    }

    private void menuReadDeviceParameter_Click(object sender, EventArgs e)
    {
      this.ReadDeviceParameter(true);
    }

    private void menuCtReadMeterParameter_Click(object sender, EventArgs e)
    {
      this.ReadDeviceParameter(true);
    }

    private bool ReadDeviceParameter(bool ShowErrorMessages)
    {
      if (this.ReadActive)
        return false;
      this.ReadActive = true;
      bool flag1 = false;
      ZR_ClassLibMessages.ClearErrors();
      if (this.MyBus.MyDeviceList.SelectedDevice != null && this.MyBus.MyDeviceList.SelectedDevice is MBusDevice)
      {
        MBusDevice selectedDevice = (MBusDevice) this.MyBus.MyDeviceList.SelectedDevice;
        selectedDevice.followingTelegrammAnnounced = false;
        selectedDevice.followingTelegrammTransmit_FCB_Odd = !this.MyBus.UseREQ_UD2_5B;
      }
      try
      {
        if (this.MyBus.MyBusMode == BusMode.MBusPointToPoint)
        {
          if (this.MyBus.MyDeviceList.bus.Count == 0)
            this.ScanByAddress();
        }
        else if (this.MyBus.MyBusMode == BusMode.RelayDevice)
        {
          this.tabControl.SelectedTab = this.tabPageAllParameter;
          List<DeviceInfo> parameters = this.MyBus.GetParameters();
          if (parameters != null)
          {
            foreach (DeviceInfo DevInfo in parameters)
            {
              this.AddToSingleDeviceParameterTable(DevInfo);
              this.AddToZDF_ParameterTable(DevInfo);
            }
          }
          flag1 = true;
          goto label_33;
        }
        if (this.MyBus.MyDeviceList.bus.Count == 0)
        {
          if (ShowErrorMessages)
          {
            int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("1"));
          }
        }
        else
        {
          this.dataGridParameterList.DataSource = (object) null;
          bool breakRequest = this.MyBus.BreakRequest;
          this.SetLoopConditions();
          DeviceInfo Info;
          bool flag2 = this.MyBus.ReadParameter(out Info);
          bool flag3 = this.MyBus.MyBusMode == BusMode.Radio2 || this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio4 || this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.wMBusT2_other || this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA || this.MyBus.MyBusMode == BusMode.RadioMS || this.MyBus.MyBusMode == BusMode.MinomatRadioTest;
          if (flag3)
            this.MyBus.BreakRequest = breakRequest;
          if (!flag2)
          {
            this.ClearFields();
          }
          else
          {
            this.AddToSingleDeviceParameterTable(Info);
            if (!flag3)
              this.AddToZDF_ParameterTable(Info);
            this.tabControl.SelectedTab = this.tabPageDeviceParameter;
            this.ResetLoopConditions();
            this.labelStatus.Text = "Read ok";
            if (this.MyBus.BeepSignalForReadResult)
              SystemSounds.Beep.Play();
            flag1 = true;
            goto label_33;
          }
        }
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ex.ToString());
      }
      this.ResetLoopConditions();
      this.labelStatus.Text = "Read error";
      if (this.MyBus.BeepSignalForReadResult)
        SystemSounds.Hand.Play();
      if (ShowErrorMessages)
      {
        ZR_ClassLibMessages.AddErrorDescription(DeviceCollectorFunctions.SerialBusMessage.GetString("2"));
        ZR_ClassLibMessages.ShowAndClearErrors("DeviceCollector");
      }
label_33:
      this.RefreshBusInfo();
      this.ReadActive = false;
      return flag1;
    }

    private void menuItemShowMeterData_Click(object sender, EventArgs e) => this.ShowMeterData();

    private void ShowMeterData()
    {
      if (this.MyBus.MyDeviceList.SelectedDevice.Info == null)
        return;
      this.tabControl.SelectedTab = this.tabPageDeviceParameter;
      this.AddToSingleDeviceParameterTable(this.MyBus.MyDeviceList.SelectedDevice.Info);
      this.AddToZDF_ParameterTable(this.MyBus.MyDeviceList.SelectedDevice.Info);
    }

    private void AddToSingleDeviceParameterTable(DeviceInfo DevInfo)
    {
      if (DevInfo == null)
        return;
      this.textBoxSerialNr.Text = DevInfo.MeterNumber;
      this.textBoxMedium.Text = DevInfo.Medium.ToString();
      this.textBoxManufacturer.Text = DevInfo.Manufacturer.ToString();
      DevInfo.GenerateParameterTable();
      this.dataGridParameterList.DataSource = (object) DevInfo.ParameterTable;
      this.Refresh();
    }

    private void menuReset_Click(object sender, EventArgs e)
    {
      if (this.MyBus.ResetDevice())
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Reset ok");
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Reset not ok");
      }
    }

    private void menuRunBackup_Click(object sender, EventArgs e)
    {
      if (this.MyBus.RunBackup())
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Backup ok");
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Backup error");
      }
    }

    private void menuSetEmergencyMode_Click(object sender, EventArgs e)
    {
      if (this.MyBus.SetEmergencyMode())
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "EmergencyMode ok");
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "EmergencyMode error");
      }
    }

    private void menuSerchBaudrate_Click(object sender, EventArgs e)
    {
      if (this.MyBus.SerchDeviceAcrossBaudrates())
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Baudrate ok");
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Device not found");
      }
    }

    private void menuEEPromWriteReadLoop_Click(object sender, EventArgs e)
    {
      this.ClearFields();
      this.tabControl.SelectedTab = this.tabPageDeviceParameter;
      this.SetLoopConditions();
      int MaxRepeat = this.MyBus.SetMaxRepeat(1);
      this.MyBus.ClearCounters();
      this.MyBus.StartTestloopWriteReadEEProm();
      this.Cursor = Cursors.WaitCursor;
      while (!this.MyBus.BreakRequest)
      {
        Label labelStatus = this.labelStatus;
        int num = this.MyBus.GetJobCounter();
        string str1 = num.ToString();
        num = this.MyBus.GetErrorCounter();
        string str2 = num.ToString();
        string str3 = "Jobs:" + str1 + "; Errors:" + str2;
        labelStatus.Text = str3;
        Application.DoEvents();
      }
      this.MyBus.StopTestLoop();
      this.MyBus.SetMaxRepeat(MaxRepeat);
      this.ResetLoopConditions();
      this.labelStatus.Text = "";
    }

    private void buttonBreak_Click(object sender, EventArgs e)
    {
      ZR_ClassLibMessages.ClearErrors();
      this.MyBus.BreakRequest = true;
      this.progressBar.Value = 0;
      this.SetEnabledFunctions();
      this.labelStatus.Text = string.Empty;
      this.Cursor = Cursors.Default;
    }

    private void buttonReadDevice_Click(object sender, EventArgs e)
    {
      this.ReadDeviceParameter(true);
    }

    private void buttonReadAllDevices_Click(object sender, EventArgs e) => this.ReadAll();

    private void buttonToolbarDeleteBusinfo_Click(object sender, EventArgs e)
    {
      this.DeleteBusinfo();
    }

    private void buttonToolbarScanBusByAddress_Click(object sender, EventArgs e)
    {
      this.ScanByAddress();
    }

    private void buttonToolbarScanBusBySerialNumber_Click(object sender, EventArgs e)
    {
      this.ScanBySerialNumber();
    }

    private void buttonToolbarSearchSingelDeviceByAddress_Click(object sender, EventArgs e)
    {
      this.SearchSingleDeviceByAddress();
    }

    private void buttonToolbarSearchSingelDeviceBySerialNumber_Click(object sender, EventArgs e)
    {
      this.SearchSingleDeviceBySerialNumber();
    }

    private void menuItemIO_Test_Click(object sender, EventArgs e)
    {
      int num = (int) new IO_Test(this.MyBus).ShowDialog();
    }

    private void buttonShowAll_Click(object sender, EventArgs e)
    {
      this.textBoxAllParameters.Text = this.MyBus.MyDeviceList.GetAllParameters();
      this.NewAllParameterGrid(this.textBoxAllParameters.Text);
    }

    private void menuShowAllParameters_Click(object sender, EventArgs e)
    {
      this.tabControl.SelectedTab = this.tabPageAllParameter;
      this.textBoxAllParameters.Text = this.MyBus.MyDeviceList.GetAllParameters();
      this.NewAllParameterGrid(this.textBoxAllParameters.Text);
    }

    private void menuReadAll_Click(object sender, EventArgs e) => this.ReadAll();

    private void buttonReadAll_Click(object sender, EventArgs e) => this.ReadAll();

    private void AddToZDF_ParameterTable(DeviceInfo DevInfo)
    {
      if (DevInfo == null || !string.IsNullOrEmpty(this.txtFilterBySerialNumber.Text) && !DevInfo.MeterNumber.StartsWith(this.txtFilterBySerialNumber.Text))
        return;
      string zdfParameterString1 = DevInfo.GetZDFParameterString();
      this.AddAllParameter(zdfParameterString1);
      foreach (DeviceInfo subDevice in DevInfo.SubDevices)
        this.AddAllParameter(subDevice.GetZDFParameterString());
      if (this.checkBoxLoggToZDF_File.Checked)
      {
        string path = Path.Combine(Application.StartupPath, this.textBoxZDF_FileName.Text);
        try
        {
          using (StreamWriter streamWriter = File.AppendText(path))
          {
            streamWriter.WriteLine(zdfParameterString1);
            foreach (DeviceInfo subDevice in DevInfo.SubDevices)
            {
              string zdfParameterString2 = subDevice.GetZDFParameterString();
              streamWriter.WriteLine(zdfParameterString2);
            }
          }
        }
        catch (Exception ex)
        {
          string message = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
          DeviceCollectorWindow.logger.Error(ex, message);
        }
      }
    }

    private void menuStartReceiver_Click(object sender, EventArgs e) => this.StartReceiver();

    private void StartReceiver()
    {
      try
      {
        this.MyBus.MyReceiver.ReceiverLevel = int.Parse(this.textBoxReceiveLevel.Text);
      }
      catch
      {
      }
      if (!this.MyBus.StartReceiver())
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Receiver start error");
      }
      else
      {
        this.tabControl.SelectedTab = this.tabPageDeviceParameter;
        this.labelReadoutSystem.Text = this.MyBus.MyReceiver.ReceiverType;
        this.labelReadoutSystemVersion.Text = this.MyBus.MyReceiver.ReceiverVersion;
        this.groupBoxRadioReadoutSystem.Visible = true;
        this.MyBus.BreakRequest = false;
        while (!this.MyBus.BreakRequest)
        {
          DeviceInfo Info;
          if (this.MyBus.ReadParameter(out Info))
          {
            this.textBoxSerialNr.Text = Info.MeterNumber;
            this.textBoxMedium.Text = Info.Medium.ToString();
            this.textBoxManufacturer.Text = Info.Manufacturer;
            Info.GenerateParameterTable();
            this.AddAllParameter(Info.GetZDFParameterString());
            this.dataGridParameterList.DataSource = (object) Info.ParameterTable;
            this.RefreshBusInfo();
          }
        }
        this.MyBus.SendMessage("", 0, GMM_EventArgs.MessageType.EndMessage);
        this.MyBus.StopReceiver();
      }
    }

    private void menuStopReceiver_Click(object sender, EventArgs e)
    {
      if (this.MyBus.BreakRequest)
        this.MyBus.StopReceiver();
      else
        this.MyBus.BreakRequest = true;
    }

    private void buttonClearAll_Click(object sender, EventArgs e)
    {
      this.dataGridViewAllParameter.Columns.Clear();
      this.textBoxAllParameters.Text = "";
    }

    private void menuDeleteData_Click(object sender, EventArgs e)
    {
      this.MyBus.DeleteBusInfo();
      this.ClearTables();
      this.RefreshBusInfo();
      this.Refresh();
    }

    private void menuEEPromReset_Click(object sender, EventArgs e)
    {
      ByteField data = new ByteField(100);
      for (int index = 0; index < 100; ++index)
        data.Add(0);
      this.MyBus.WriteMemory(MemoryLocation.EEPROM, 0, data);
    }

    private void checkBoxWatchRange_CheckedChanged(object sender, EventArgs e)
    {
      if (this.checkBoxWatchRange.Checked)
      {
        this.MyBus.MyDeviceList.SelectedDevice.WatchNumberOfBytes = this.GetHexDecValue(this.textBoxNumberOfBytes.Text);
        this.MyBus.MyDeviceList.SelectedDevice.WatchStartAddress = this.GetHexDecValue(this.textBoxStartAddress.Text);
        this.MyBus.MyDeviceList.SelectedDevice.WatchMemoryLocation = (MemoryLocation) this.listBoxLocation.SelectedIndex;
      }
      else
        this.MyBus.MyDeviceList.SelectedDevice.WatchNumberOfBytes = 0;
    }

    private bool AddAllParameter(string ZDF_String)
    {
      this.AddParameterToZDF_View(ZDF_String);
      this.AddParameterToDataGrid(ZDF_String, true);
      return true;
    }

    private bool AddParameterToZDF_View(string ZDF_String)
    {
      if (this.textBoxAllParameters.Text.Length > 10000)
        this.textBoxAllParameters.Text = this.textBoxAllParameters.Text.Substring(this.textBoxAllParameters.Text.IndexOf(Environment.NewLine, 5000) + Environment.NewLine.Length);
      if (this.textBoxAllParameters.Text.Length == 0)
        this.textBoxAllParameters.Text = ZDF_String;
      else
        this.textBoxAllParameters.AppendText(Environment.NewLine + ZDF_String);
      return true;
    }

    private bool AddParameterToDataGrid(string ZDF_String, bool RefreshGrid)
    {
      if (string.IsNullOrEmpty(ZDF_String))
        return false;
      string[] strArray = ZDF_String.Split(';');
      if (strArray.Length == 0 || strArray.Length % 2 != 0)
        return false;
      bool flag = false;
      if (this.dataGridViewAllParameter.Columns.Count == 0 || this.dataGridViewAllParameter.Columns.Count < strArray.Length / 2)
      {
        flag = true;
      }
      else
      {
        int index = 0;
        int num = 0;
        while (index < strArray.Length)
        {
          if (!this.dataGridViewAllParameter.Columns.Contains(strArray[index]))
          {
            flag = true;
            break;
          }
          index += 2;
          ++num;
        }
      }
      this.dataGridViewAllParameter.SuspendLayout();
      if (flag)
        this.dataGridViewAllParameter.ColumnHeadersVisible = false;
      this.dataGridViewAllParameter.AutoGenerateColumns = false;
      if (this.dataGridViewAllParameter.Columns.Count == 0)
        RefreshGrid = false;
      if (flag)
      {
        for (int index = 0; index < strArray.Length; index += 2)
        {
          string str = strArray[index];
          if (!this.dataGridViewAllParameter.Columns.Contains(str))
            this.dataGridViewAllParameter.Columns[this.dataGridViewAllParameter.Columns.Add(str, str)].FillWeight = 1f;
        }
      }
      int rowIndex = this.dataGridViewAllParameter.Rows.Add();
      for (int index = 0; index < strArray.Length; index += 2)
      {
        string columnName = strArray[index];
        string str = strArray[index + 1];
        this.dataGridViewAllParameter[columnName, rowIndex].Value = (object) str;
      }
      if (RefreshGrid)
      {
        this.dataGridViewAllParameter.ClearSelection();
        if (this.dataGridViewAllParameter.RowCount > 0)
        {
          this.dataGridViewAllParameter.FirstDisplayedScrollingRowIndex = this.dataGridViewAllParameter.RowCount - 1;
          this.dataGridViewAllParameter.Rows[this.dataGridViewAllParameter.RowCount - 1].Selected = true;
        }
        this.dataGridViewAllParameter.Refresh();
      }
      this.dataGridViewAllParameter.ColumnHeadersVisible = true;
      this.dataGridViewAllParameter.ResumeLayout();
      return true;
    }

    private bool NewAllParameterGrid(string AllParameterString)
    {
      string oldValue = Environment.NewLine.Substring(1);
      this.dataGridViewAllParameter.Columns.Clear();
      string[] strArray = AllParameterString.Split(Environment.NewLine[0]);
      for (int index = 0; index < strArray.Length; ++index)
      {
        if (!(strArray[index].Trim() == string.Empty))
        {
          string parameter = ParameterService.GetParameter(strArray[index], "SID");
          if (parameter == string.Empty || string.IsNullOrEmpty(this.txtFilterBySerialNumber.Text) || parameter.StartsWith(this.txtFilterBySerialNumber.Text))
            this.AddAllParameter(strArray[index].Replace(oldValue, ""));
        }
      }
      return true;
    }

    private void menuTransmitRadioFrame_Click(object sender, EventArgs e)
    {
      if (this.MyBus.TransmitRadioFrame())
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Transmit ok.");
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Transmit error.");
      }
    }

    private void buttonSelectZDF_File_Click(object sender, EventArgs e)
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.InitialDirectory = SystemValues.ZDF_DataPath;
      openFileDialog.Filter = "ZENNER data file (*.zdf)|*.zdf| All files (*.*)|*.*";
      openFileDialog.FilterIndex = 1;
      openFileDialog.RestoreDirectory = true;
      openFileDialog.CheckFileExists = false;
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.textBoxZDF_FileName.Text = openFileDialog.FileName;
    }

    private void buttonLoadZDF_File_Click(object sender, EventArgs e) => this.LoadZDF_File();

    private void menuItemLoadZDF_File_Click(object sender, EventArgs e) => this.LoadZDF_File();

    private void LoadZDF_File()
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.InitialDirectory = SystemValues.ImportPath;
      openFileDialog.Filter = "ZDF files (*.zdf)|*.zdf| All files (*.*)|*.*";
      openFileDialog.FilterIndex = 1;
      openFileDialog.RestoreDirectory = false;
      openFileDialog.Title = "Read ZDF File";
      openFileDialog.CheckFileExists = true;
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.SetLoopConditions();
      this.dataGridViewAllParameter.Columns.Clear();
      try
      {
        using (StreamReader streamReader = new StreamReader(openFileDialog.FileName))
        {
          int num1 = 0;
          string ZDF_String;
          while ((ZDF_String = streamReader.ReadLine()) != null)
          {
            if (num1 % 100 == 0)
            {
              this.labelStatus.Text = "read line: " + num1.ToString();
              Application.DoEvents();
              if (this.MyBus.BreakRequest)
                break;
            }
            ++num1;
            if (!this.AddParameterToDataGrid(ZDF_String, false))
            {
              int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", DeviceCollectorFunctions.SerialBusMessage.GetString("6"));
              break;
            }
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "File error" + Environment.NewLine + ex.Message);
      }
      this.ResetLoopConditions();
    }

    private void menuItemExportDataTable_Click(object sender, EventArgs e)
    {
      this.ExportDataTabel();
    }

    private void ExportDataTabel()
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.InitialDirectory = SystemValues.ExportPath;
      saveFileDialog.Filter = "CSV file (*.csv)|*.csv|All files (*.*)|*.*";
      saveFileDialog.FilterIndex = 1;
      saveFileDialog.RestoreDirectory = true;
      saveFileDialog.Title = "Write to file";
      saveFileDialog.CheckFileExists = false;
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      try
      {
        using (StreamWriter streamWriter = new StreamWriter(saveFileDialog.FileName))
        {
          char ch = '\t';
          StringBuilder stringBuilder = new StringBuilder(2000);
          bool flag1 = true;
          DataGridViewColumn dataGridViewColumnStart = this.dataGridViewAllParameter.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
          List<int> intList = new List<int>();
          for (; dataGridViewColumnStart != null; dataGridViewColumnStart = this.dataGridViewAllParameter.Columns.GetNextColumn(dataGridViewColumnStart, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
          {
            if (!flag1)
              stringBuilder.Append(ch);
            stringBuilder.Append(dataGridViewColumnStart.HeaderText);
            flag1 = false;
            intList.Add(dataGridViewColumnStart.Index);
          }
          streamWriter.WriteLine(stringBuilder.ToString());
          foreach (DataGridViewRow row in (IEnumerable) this.dataGridViewAllParameter.Rows)
          {
            stringBuilder.Length = 0;
            bool flag2 = true;
            for (int index = 0; index < intList.Count; ++index)
            {
              DataGridViewCell cell = row.Cells[intList[index]];
              if (!flag2)
                stringBuilder.Append(ch);
              if (cell.Value != null)
                stringBuilder.Append(cell.Value.ToString());
              else
                stringBuilder.Append(" ");
              flag2 = false;
            }
            streamWriter.WriteLine(stringBuilder.ToString());
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "File error" + Environment.NewLine + ex.Message);
      }
    }

    private void menuItemExportExcelDataTable_Click(object sender, EventArgs e)
    {
      this.Cursor = Cursors.WaitCursor;
      try
      {
        ExcelConnect excelConnect = new ExcelConnect();
        DataGridViewColumn dataGridViewColumnStart = this.dataGridViewAllParameter.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
        List<int> colIdsToExport = new List<int>();
        for (; dataGridViewColumnStart != null; dataGridViewColumnStart = this.dataGridViewAllParameter.Columns.GetNextColumn(dataGridViewColumnStart, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
          colIdsToExport.Add(dataGridViewColumnStart.Index);
        DataTable TheTable = new DataTable();
        foreach (DataGridViewColumn column in (BaseCollection) this.dataGridViewAllParameter.Columns)
          TheTable.Columns.Add(column.HeaderText);
        foreach (DataGridViewRow row1 in (IEnumerable) this.dataGridViewAllParameter.Rows)
        {
          DataRow row2 = TheTable.NewRow();
          foreach (DataGridViewCell cell in (BaseCollection) row1.Cells)
            row2[cell.ColumnIndex] = cell.Value;
          TheTable.Rows.Add(row2);
        }
        excelConnect.AddTable(TheTable, "DeviceCollector Data", colIdsToExport, true);
        excelConnect.ShowWorkbook();
      }
      catch (Exception ex)
      {
        this.Cursor = Cursors.Default;
        int num = (int) GMM_MessageBox.ShowMessage("GMM", DeviceCollectorFunctions.SerialBusMessage.GetString("ExcelConnectError") + Environment.NewLine + ex.Message, true);
      }
      this.Cursor = Cursors.Default;
    }

    private void menuItemSetSelectedDeviceToDefaultParameterList_Click(object sender, EventArgs e)
    {
      this.SetToDefaultParameterList();
    }

    private void menuCmSetToDefaultParameterList_Click(object sender, EventArgs e)
    {
      this.SetToDefaultParameterList();
    }

    private void SetToDefaultParameterList()
    {
      if (!this.MyBus.SetParameterListDefault())
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Set default parameter list: Error");
      }
      else
        this.labelStatus.Text = "Set default parameter list: Done";
    }

    private void menuItemSetSelectedDeviceToFullParameterList_Click(object sender, EventArgs e)
    {
      this.SetToFullParameterList();
    }

    private void menuCmSetToFullParameterList_Click(object sender, EventArgs e)
    {
      this.SetToFullParameterList();
    }

    private void SetToFullParameterList()
    {
      if (!this.MyBus.SetParameterListAll())
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Set full parameter list: Error");
      }
      else
        this.labelStatus.Text = "Set full parameter list: Done";
    }

    private void menuItemSetAllDevicesToDefaultParameterList_Click(object sender, EventArgs e)
    {
      this.SetLoopConditions();
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      this.MyBus.BreakRequest = false;
      string str = "/" + this.MyBus.MyDeviceList.bus.Count.ToString();
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; !this.MyBus.BreakRequest && index < this.MyBus.MyDeviceList.bus.Count; ++index)
      {
        this.labelStatus.Text = "Set default parameter list: " + index.ToString() + str;
        if (!this.MyBus.SetParameterListDefault(index))
          stringBuilder.AppendLine("Error on device: " + ((BusDevice) this.MyBus.MyDeviceList.bus[index]).Info.MeterNumber);
      }
      this.labelStatus.Text = "Set default parameter list: Done";
      if (stringBuilder.Length > 0)
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", stringBuilder.ToString(), true);
      }
      this.ResetLoopConditions();
    }

    private void menuItemSetAllDevicesToFullParameterList_Click(object sender, EventArgs e)
    {
      this.SetLoopConditions();
      this.tabControl.SelectedTab = this.tabPageBusInfo;
      this.MyBus.BreakRequest = false;
      string str = "/" + this.MyBus.MyDeviceList.bus.Count.ToString();
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; !this.MyBus.BreakRequest && index < this.MyBus.MyDeviceList.bus.Count; ++index)
      {
        this.labelStatus.Text = "Set full parameter list: " + index.ToString() + str;
        if (!this.MyBus.SetParameterListAllParameters(index))
          stringBuilder.AppendLine("Error on device: " + ((BusDevice) this.MyBus.MyDeviceList.bus[index]).Info.MeterNumber);
      }
      this.labelStatus.Text = "Set full parameter list: Done";
      if (stringBuilder.Length > 0)
      {
        int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", stringBuilder.ToString(), true);
      }
      this.ResetLoopConditions();
    }

    private void menuItemShiftToNextAddress_Click(object sender, EventArgs e)
    {
      this.MyBus.BreakRequest = false;
      for (int index1 = 0; index1 < this.MyBus.MyDeviceList.bus.Count; ++index1)
      {
        if (this.MyBus.BreakRequest)
          return;
        byte primaryDeviceAddress1 = ((MBusDevice) this.MyBus.MyDeviceList.bus[index1]).PrimaryDeviceAddress;
        for (int index2 = index1 + 1; index2 < this.MyBus.MyDeviceList.bus.Count; ++index2)
        {
          byte primaryDeviceAddress2 = ((MBusDevice) this.MyBus.MyDeviceList.bus[index2]).PrimaryDeviceAddress;
          if ((int) primaryDeviceAddress1 == (int) primaryDeviceAddress2)
          {
            bool[] flagArray = new bool[256];
            for (byte index3 = 0; (int) index3 < this.MyBus.MyDeviceList.bus.Count; ++index3)
              flagArray[(int) ((MBusDevice) this.MyBus.MyDeviceList.bus[(int) index3]).PrimaryDeviceAddress] = true;
            byte Byte = 1;
            while ((int) Byte < flagArray.Length && flagArray[(int) Byte])
              ++Byte;
            MBusDevice bu = (MBusDevice) this.MyBus.MyDeviceList.bus[index1];
            uint SerialNumberOut;
            if (MBusDevice.StringToMBusSerialNumber(bu.Info.MeterNumber, out SerialNumberOut))
            {
              if (!this.MyBus.FastSecondaryAddressing)
                bu.DeselectDevice();
              if (bu.SelectDeviceOnBus(SerialNumberOut, ushort.MaxValue, byte.MaxValue, byte.MaxValue))
              {
                bu.TransmitBuffer = new ByteField(5);
                bu.TransmitBuffer.Add(16);
                bu.TransmitBuffer.Add(91);
                bu.TransmitBuffer.Add(253);
                bu.TransmitBuffer.Add((byte) 88);
                bu.TransmitBuffer.Add(22);
                this.MyBus.MyCom.TransmitBlock(ref bu.TransmitBuffer);
                Thread.Sleep(int.Parse(this.textBoxValue.Text));
                bu.GenerateLongframeStart();
                bu.TransmitBuffer.Add(83);
                bu.TransmitBuffer.Add(primaryDeviceAddress1);
                bu.TransmitBuffer.Add(81);
                bu.TransmitBuffer.Add(1);
                bu.TransmitBuffer.Add(122);
                bu.TransmitBuffer.Add(Byte);
                bu.FinishLongFrame();
                this.MyBus.MyCom.TransmitBlock(ref bu.TransmitBuffer);
                for (int index4 = index1 + 1; index4 < this.MyBus.MyDeviceList.bus.Count; ++index4)
                {
                  if ((int) ((MBusDevice) this.MyBus.MyDeviceList.bus[index4]).PrimaryDeviceAddress == (int) primaryDeviceAddress1)
                    ((MBusDevice) this.MyBus.MyDeviceList.bus[index4]).PrimaryDeviceAddress = Byte;
                }
                Thread.Sleep(500);
                break;
              }
              break;
            }
            break;
          }
        }
      }
      this.RefreshBusInfo();
    }

    private void menuItemSerialBusHelp_Click(object sender, EventArgs e)
    {
    }

    private void menuItemShowWaveFlowParameter_Click(object sender, EventArgs e)
    {
      if (!(this.MyBus.MyDeviceList.SelectedDevice is WaveFlowDevice))
        return;
      int num = (int) MessageBox.Show(((WaveFlowDevice) this.MyBus.MyDeviceList.SelectedDevice).GetParameterString());
    }

    private void menuItemWafeFlowParameterTest_Click(object sender, EventArgs e)
    {
    }

    private void dataGridBusTable_CellMouseDoubleClick(
      object sender,
      DataGridViewCellMouseEventArgs e)
    {
      this.ReadDeviceParameter(true);
    }

    private void tabControl_SelectedIndexChanged(object sender, EventArgs e)
    {
      bool flag = this.MyBus.MyBusMode == BusMode.Radio2 || this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio4 || this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.wMBusT2_other || this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA || this.MyBus.MyBusMode == BusMode.RadioMS || this.MyBus.MyBusMode == BusMode.MinomatRadioTest;
      if (this.tabControl.SelectedIndex != 0 || flag)
        return;
      this.RefreshBusInfo();
    }

    private void dataGridBusTable_MouseClick(object sender, MouseEventArgs e)
    {
      DataGridView.HitTestInfo hitTestInfo = this.dataGridBusTable.HitTest(e.X, e.Y);
      if (hitTestInfo.RowIndex < 0)
        return;
      try
      {
        DataRow row = ((DataRowView) this.dataGridBusTable.Rows[hitTestInfo.RowIndex].DataBoundItem).Row;
        if (row == null || row.ItemArray != null && row.ItemArray.Length > 2 && row.ItemArray[2].ToString() == "Collision")
          return;
        if (!this.MyBus.MyDeviceList.SelectDeviceByIndex(((DataTable) this.dataGridBusTable.DataSource).Rows.IndexOf(row)))
        {
          int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Select error");
        }
        this.SetEnabledFunctions();
      }
      catch (Exception ex)
      {
        DeviceCollectorWindow.logger.Error(ex.Message);
      }
    }

    private void menuSetSelectedDeviceTo300_Baud_Click(object sender, EventArgs e)
    {
      this.SetBaudrate(300);
    }

    private void menuSetSelectedDeviceTo2400_Baud_Click(object sender, EventArgs e)
    {
      this.SetBaudrate(2400);
    }

    private void menuSetSelectedDeviceTo9600_Baud_Click(object sender, EventArgs e)
    {
      this.SetBaudrate(9600);
    }

    private void menuSetSelectedDeviceTo38400_Baud_Click(object sender, EventArgs e)
    {
      this.SetBaudrate(38400);
    }

    private void SetBaudrate(int Baudrate)
    {
      if (this.MyBus.SetBaudrate(Baudrate))
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Baudrate change ok");
      }
      else
      {
        int num2 = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Baudrate change error!");
      }
    }

    private void menuOrganize_Click(object sender, EventArgs e) => this.Organize();

    private void menuItemShowInfo_Click(object sender, EventArgs e)
    {
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        object InfoObject;
        if (!this.MyBus.MyDeviceList.GetDeviceCollectorInfo(out InfoObject))
          return;
        int num = (int) MessageBox.Show(this.getFieldsAndValues(InfoObject));
      }
      catch
      {
      }
    }

    public string getFieldsAndValues(object o)
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (o != null)
      {
        foreach (FieldInfo field in o.GetType().GetFields())
        {
          if (!field.FieldType.IsValueType)
            stringBuilder.Append(this.getFieldsAndValues(field.GetValue(o)));
          else
            stringBuilder.AppendLine(field.Name + ":" + field.GetValue(o)?.ToString());
        }
      }
      return stringBuilder.ToString();
    }

    private void dataGridBusTable_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      int columnIndex = this.dataGridBusTable["DeviceInfoText", 0].ColumnIndex;
      if (e.ColumnIndex == columnIndex)
        return;
      e.Cancel = true;
    }

    private void dataGridBusTable_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      try
      {
        if (!this.MyBus.MyDeviceList.SelectDeviceByIndex(((DataTable) this.dataGridBusTable.DataSource).Rows.IndexOf(((DataRowView) this.dataGridBusTable.Rows[e.RowIndex].DataBoundItem).Row)))
        {
          int num = (int) GMM_MessageBox.ShowMessage("DeviceCollector", "Select error");
        }
        else
        {
          string str = ((DataGridView) sender)[e.ColumnIndex, e.RowIndex].Value.ToString();
          if (this.MyBus.MyDeviceList.SelectedDevice is MBusDevice selectedDevice && str != selectedDevice.DeviceInfoText)
          {
            selectedDevice.DeviceInfoText = str;
            this.BusinfoIsManualChanged = true;
          }
        }
      }
      catch
      {
      }
    }

    private void HideColumns(DataGridView dataGrid, params string[] columnNames)
    {
      if (dataGrid == null || dataGrid.ColumnCount <= 0 || columnNames.Length == 0)
        return;
      foreach (string columnName in columnNames)
      {
        if (dataGrid.Columns.Contains(columnName))
          dataGrid.Columns[columnName].Visible = false;
      }
    }

    private void menuItemSetupProfiles_Click(object sender, EventArgs e)
    {
      int num = (int) new SetupProfiles(this.MyBus).ShowDialog();
    }

    private void buttonBreak_MouseMove(object sender, MouseEventArgs e)
    {
      this.Cursor = Cursors.Default;
      this.Refresh();
      Application.DoEvents();
    }

    private void buttonBreak_MouseLeave(object sender, EventArgs e)
    {
      if (this.LoopIsRunning)
        this.Cursor = Cursors.WaitCursor;
      this.Refresh();
      Application.DoEvents();
    }

    private void menuItemMemoryAccess_Click(object sender, EventArgs e)
    {
      if (this.MyMemory == null)
        this.MyMemory = new MemoryAccess(this.MyBus);
      if (this.MyMemory.CanFocus)
        return;
      this.MyMemory.Show((IWin32Window) this);
    }

    private void menuItemAblaufTest_Click(object sender, EventArgs e)
    {
      this.MyBus.SetBaudrate(4800, true);
      this.GetVersion((int[]) null);
    }

    private void menuItem5_Click(object sender, EventArgs e)
    {
      new RadioScannerForm(this.MyBus).Show();
    }

    private void btnExportToCSV_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.FileName = this.MyBus.MyBusInfo.BusInfoFilename + ".csv";
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      using (StreamWriter streamWriter = new StreamWriter(saveFileDialog.FileName))
      {
        string str1 = string.Empty;
        for (int index = 0; index < this.dataGridViewAllParameter.Columns.Count; ++index)
          str1 = str1 + this.dataGridViewAllParameter.Columns[index].HeaderText + ";";
        streamWriter.WriteLine(str1);
        for (int index1 = 0; index1 < this.dataGridViewAllParameter.Rows.Count; ++index1)
        {
          string str2 = string.Empty;
          for (int index2 = 0; index2 < this.dataGridViewAllParameter.Columns.Count; ++index2)
          {
            string s = this.dataGridViewAllParameter.Rows[index1].Cells[index2].Value.ToString();
            str2 = !DateTime.TryParse(s, out DateTime _) ? str2 + s.Replace('.', ',') + ";" : str2 + s + ";";
          }
          streamWriter.WriteLine(str2);
        }
      }
    }

    private void menuItemMBusConverter_Click(object sender, EventArgs e)
    {
      this.MBusConverterDiagnostic();
    }

    private void menuCtMBusConverter_Click(object sender, EventArgs e)
    {
      this.MBusConverterDiagnostic();
    }

    private void MBusConverterDiagnostic()
    {
      if (this.MBusConverter == null)
        this.MBusConverter = new DeviceCollector.MBusConverterDiagnostic(this.MyBus);
      int num = (int) this.MBusConverter.ShowDialog();
    }

    private void menuItemSelectParameterList_Click(object sender, EventArgs e)
    {
      this.SelectParameterList();
    }

    private void menuCtSelectParameterList_Click(object sender, EventArgs e)
    {
      this.SelectParameterList();
    }

    private void SelectParameterList()
    {
      int num = (int) new ListSelectWindow(this.MyBus).ShowDialog();
    }

    private void dataGridBusTable_Sorted(object sender, EventArgs e)
    {
      this.SortDeviceListTableEqualToDataGridView();
    }

    private void SortDeviceListTableEqualToDataGridView()
    {
      if (this.MyBus == null || this.MyBus.MyDeviceList == null || this.MyBus.MyDeviceList.bus == null || this.MyBus.MyDeviceList.bus.Count == 0 || this.dataGridBusTable.RowCount == 0 || this.dataGridBusTable.DataSource == null || this.dataGridBusTable.Rows.Count == 0 || !this.dataGridBusTable.Columns.Contains("SerialNr."))
        return;
      ArrayList arrayList = new ArrayList();
      for (int index = 0; index < this.dataGridBusTable.Rows.Count; ++index)
      {
        string str = this.dataGridBusTable.Rows[index].Cells["SerialNr."].Value.ToString();
        foreach (object bu in this.MyBus.MyDeviceList.bus)
        {
          if (bu is BusDevice busDevice && busDevice.Info != null && busDevice.Info.MeterNumber == str)
          {
            arrayList.Add((object) busDevice);
            break;
          }
        }
        if (arrayList.Count == this.MyBus.MyDeviceList.bus.Count)
          this.MyBus.MyDeviceList.bus = arrayList;
      }
    }

    private void menuMbusParser_Click(object sender, EventArgs e) => MBusParserWindow.ShowWindow();

    private void menuItemMinoConnectTest_Click(object sender, EventArgs e)
    {
      int num = (int) new MinoConnectTest(this.MyBus).ShowDialog();
    }

    private void buttonAsyncCom_Click(object sender, EventArgs e)
    {
      this.MyBus.MyCom.ShowComWindow();
    }
  }
}


--- DeviceInfo.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.DeviceInfo
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public sealed class DeviceInfo
  {
    public DeviceTypes DeviceType = DeviceTypes.None;
    public bool ParameterOk;
    public DateTime LastReadingDate = DateTime.MinValue;
    public string MeterNumber;
    public uint MeterNumberOriginal;
    public string Manufacturer;
    public short ManufacturerCode;
    public byte Version;
    public byte Medium;
    public byte AccessNb;
    public byte Status;
    public int Signature;
    public List<DeviceInfo.MBusParamStruct> ParameterList;
    public DataTable ParameterTable;
    public List<DeviceInfo> SubDevices;
    public byte C_Field;
    public byte A_Field;
    public byte CI_Field;

    public string MediumString => MBusDevice.GetMediaString(this.Medium);

    public List<string> ParameterListWithoutValues { get; set; }

    public DeviceInfo()
    {
      this.ParameterOk = false;
      this.MeterNumber = string.Empty;
      this.Manufacturer = "???";
      this.ManufacturerCode = (short) 0;
      this.Version = (byte) 0;
      this.Medium = (byte) 0;
      this.AccessNb = (byte) 0;
      this.Status = (byte) 0;
      this.Signature = 0;
      this.ParameterList = new List<DeviceInfo.MBusParamStruct>();
      this.SubDevices = new List<DeviceInfo>();
      this.ParameterListWithoutValues = new List<string>();
    }

    public DeviceInfo(DeviceInfo InfoToCopy)
    {
      if (InfoToCopy == null)
        return;
      this.ParameterOk = InfoToCopy.ParameterOk;
      this.MeterNumber = InfoToCopy.MeterNumber;
      this.Manufacturer = InfoToCopy.Manufacturer;
      this.Version = InfoToCopy.Version;
      this.Medium = InfoToCopy.Medium;
      this.AccessNb = InfoToCopy.AccessNb;
      this.Status = InfoToCopy.Status;
      this.Signature = InfoToCopy.Signature;
      this.C_Field = InfoToCopy.C_Field;
      this.A_Field = InfoToCopy.A_Field;
      this.CI_Field = InfoToCopy.CI_Field;
      this.DeviceType = InfoToCopy.DeviceType;
      this.LastReadingDate = InfoToCopy.LastReadingDate;
      this.ManufacturerCode = InfoToCopy.ManufacturerCode;
      this.MeterNumberOriginal = InfoToCopy.MeterNumberOriginal;
      this.ParameterList = new List<DeviceInfo.MBusParamStruct>();
      for (int index = 0; index < InfoToCopy.ParameterList.Count; ++index)
        this.ParameterList.Add(InfoToCopy.ParameterList[index]);
      this.SubDevices = new List<DeviceInfo>();
      if (InfoToCopy.SubDevices.Count > 0)
        this.SubDevices.AddRange((IEnumerable<DeviceInfo>) InfoToCopy.SubDevices);
      this.ParameterListWithoutValues = new List<string>();
      if (InfoToCopy.ParameterListWithoutValues.Count <= 0)
        return;
      this.ParameterListWithoutValues.AddRange((IEnumerable<string>) InfoToCopy.ParameterListWithoutValues);
    }

    public void GenerateParameterTable()
    {
      this.ParameterTable = new DataTable("Parameter");
      this.ParameterTable.Columns.Add("Unit", typeof (string));
      this.ParameterTable.Columns.Add("Value", typeof (string));
      for (int index = 0; index < this.ParameterList.Count; ++index)
      {
        DataRow row = this.ParameterTable.NewRow();
        row["Unit"] = (object) this.ParameterList[index].DefineString;
        row["Value"] = (object) this.ParameterList[index].ValueString;
        this.ParameterTable.Rows.Add(row);
      }
    }

    public string GetParameter(string ParameterName)
    {
      for (int index = 0; index < this.ParameterList.Count; ++index)
      {
        if (this.ParameterList[index].DefineString == ParameterName)
          return this.ParameterList[index].ValueString;
      }
      return string.Empty;
    }

    public bool SetParameter(string ParameterName, string ParameterValue)
    {
      for (int index = 0; index < this.ParameterList.Count; ++index)
      {
        if (this.ParameterList[index].DefineString == ParameterName)
        {
          this.ParameterList[index].ValueString = ParameterValue;
          return true;
        }
      }
      return false;
    }

    public bool EraseParameter(string ParameterName)
    {
      for (int index = 0; index < this.ParameterList.Count; ++index)
      {
        if (this.ParameterList[index].DefineString == ParameterName)
        {
          this.ParameterList.RemoveAt(index);
          return true;
        }
      }
      return false;
    }

    public string GetZDFParameterString()
    {
      StringBuilder stringBuilder = new StringBuilder(1000);
      if (this.ParameterList.Count > 0)
      {
        for (int index = 0; index < this.ParameterList.Count; ++index)
        {
          if (index != 0)
            stringBuilder.Append(";");
          stringBuilder.Append(this.ParameterList[index].DefineString);
          stringBuilder.Append(";");
          stringBuilder.Append(this.ParameterList[index].ValueString);
        }
      }
      else
        stringBuilder.Append("NoParameter");
      return stringBuilder.ToString();
    }

    public sealed class MBusParamStruct
    {
      public string DefineString;
      public string ValueString;

      public MBusParamStruct(string DefStr, string ValStr)
      {
        this.DefineString = DefStr;
        this.ValueString = ValStr;
      }

      public override string ToString()
      {
        return string.IsNullOrEmpty(this.DefineString) || this.ValueString == null ? base.ToString() : this.DefineString + " " + this.ValueString;
      }
    }
  }
}


--- DeviceList.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.DeviceList
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public abstract class DeviceList
  {
    private static Logger logger = LogManager.GetLogger(nameof (DeviceList));
    public const string COLUMN_NAME_INDEX_NUMBER = "Nr.";
    public const string COLUMN_NAME_IS_SELECTED_ON_BUS = "IsSel";
    public const string COLUMN_NAME_SELECTED_REPEATS = "SelRep";
    public const string COLUMN_NAME_READ_REPEATS = "ReadRep";
    public const string COLUMN_NAME_DESELECT_REPEATS = "DeselRep";
    public const string COLUMN_NAME_SERIAL_NUMBER = "SerialNr.";
    protected bool PrimaryAddressingOk = false;
    protected bool AllAddressesOk = false;
    internal bool MBusConverterAvailable = false;
    private BusDevice SelectedDeviceInternal;
    public ArrayList bus;
    public List<MBusDevice> FaultyDevices;
    internal DeviceCollectorFunctions MyBus;

    public BusDevice SelectedDevice
    {
      set
      {
        this.SelectedDeviceInternal = value;
        this.MyBus.DeviceIsModified = true;
      }
      get => this.SelectedDeviceInternal;
    }

    internal int GetIndexOfSelectedDevice()
    {
      return this.bus == null || this.bus.Count == 0 ? -1 : this.bus.IndexOf((object) this.SelectedDeviceInternal);
    }

    internal virtual void DeleteBusList()
    {
      if (this.bus != null && this.bus.Count > 0)
        this.bus.Clear();
      if (this.FaultyDevices != null && this.FaultyDevices.Count > 0)
        this.FaultyDevices.Clear();
      this.SelectedDevice = (BusDevice) null;
    }

    public void AddFaultyDevice(MBusDevice NewDevice) => this.FaultyDevices.Add(NewDevice);

    internal void RemoveFaultyDevices(byte address)
    {
      if (this.FaultyDevices == null)
        return;
      MBusDevice mbusDevice = (MBusDevice) null;
      foreach (MBusDevice faultyDevice in this.FaultyDevices)
      {
        if ((int) faultyDevice.PrimaryDeviceAddress == (int) address)
        {
          mbusDevice = faultyDevice;
          break;
        }
      }
      if (mbusDevice == null)
        return;
      this.FaultyDevices.Remove(mbusDevice);
    }

    internal bool SelectDeviceByIndex(int index)
    {
      if (index >= this.bus.Count)
        return false;
      this.SelectedDevice = (BusDevice) this.bus[index];
      return true;
    }

    internal int GetSelectedIndex()
    {
      if (this.SelectedDevice == null)
        return -1;
      for (int index = 0; index < this.bus.Count; ++index)
      {
        if (this.bus[index].Equals((object) this.SelectedDevice))
          return index;
      }
      return -1;
    }

    internal void GetBusTable(out DataTable BusTable, BusMode busMode)
    {
      bool flag = this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.wMBusT2_other;
      BusTable = new DataTable();
      BusTable.TableName = "BusInfo";
      if (this.bus.Count == 0 && this.FaultyDevices.Count == 0)
        return;
      BusTable.Columns.Add("Nr.", typeof (int));
      BusTable.Columns.Add("Manuf.", typeof (string));
      if (busMode != 0)
        BusTable.Columns.Add("SerialNr.", typeof (string));
      if (this.bus.Count != 0 && !(this.bus[0] is IdentDevice))
      {
        BusTable.Columns.Add("DeviceType", typeof (string));
        if (!flag && (this.MyBus.MyBusMode == BusMode.MBus || this.MyBus.MyBusMode != 0))
        {
          if (busMode != 0)
          {
            BusTable.Columns.Add("AddrOk", typeof (bool));
            BusTable.Columns.Add("Address", typeof (string));
            BusTable.Columns.Add("IsSel", typeof (bool));
          }
          BusTable.Columns.Add("SelRep", typeof (int));
          BusTable.Columns.Add("ReadRep", typeof (int));
          BusTable.Columns.Add("DeselRep", typeof (int));
        }
      }
      if (this.FaultyDevices.Count != 0)
      {
        if (BusTable.Columns["DeviceType"] == null)
          BusTable.Columns.Add("DeviceType", typeof (string));
        if (BusTable.Columns["AddrOk"] == null)
          BusTable.Columns.Add("AddrOk", typeof (bool));
        if (BusTable.Columns["Address"] == null)
          BusTable.Columns.Add("Address", typeof (string));
      }
      if (((this.MyBus.MyBusMode == BusMode.Radio2 || this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio4 || this.MyBus.MyBusMode == BusMode.MinomatRadioTest || this.MyBus.MyBusMode == BusMode.RadioMS ? 1 : (this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA ? 1 : 0)) | (flag ? 1 : 0)) != 0)
      {
        if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoConnect || this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoHead)
          BusTable.Columns.Add("RSSI", typeof (int));
        if (!flag)
        {
          BusTable.Columns.Add("DeviceError", typeof (bool));
          BusTable.Columns.Add("Manipulated", typeof (bool));
        }
        BusTable.Columns.Add("ReceivedPackets", typeof (int));
        BusTable.Columns.Add("LastSeen", typeof (string));
        BusTable.Columns.Add("IntervalSec", typeof (int));
        if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoConnect)
          BusTable.Columns.Add("MCT", typeof (uint));
      }
      BusTable.Columns.Add("DeviceInfoText", typeof (string));
      int num = 0;
      for (int index = 0; index < this.bus.Count; ++index)
      {
        try
        {
          BusDevice bu1 = (BusDevice) this.bus[index];
          bu1.TableIndex = num++;
          DataRow row = BusTable.NewRow();
          bu1.TableDataRow = row;
          row["Nr."] = (object) (index + 1);
          if (BusTable.Columns.Contains("SerialNr."))
            row["SerialNr."] = (object) "???";
          row["Manuf."] = (object) "???";
          if (this.bus[index] is MBusDevice)
          {
            MBusDevice bu2 = (MBusDevice) this.bus[index];
            row["DeviceType"] = (object) bu2.DeviceType.ToString();
            if (BusTable.Columns.Contains("Address"))
              row["Address"] = !bu2.PrimaryAddressKnown ? (object) "???" : (object) bu2.PrimaryDeviceAddress.ToString("d03");
            if (bu2.Info != null)
            {
              row["Manuf."] = (object) bu2.Info.Manufacturer;
              if (BusTable.Columns.Contains("SerialNr."))
                row["SerialNr."] = (object) bu2.Info.MeterNumber;
            }
            if (BusTable.Columns.Contains("AddrOk"))
              row["AddrOk"] = (object) bu2.PrimaryAddressOk;
            if (BusTable.Columns.Contains("IsSel"))
              row["IsSel"] = (object) bu2.IsSelectedOnBus;
            row["DeviceInfoText"] = (object) bu2.DeviceInfoText;
          }
          else if (this.bus[index] is IdentDevice)
          {
            if (BusTable.Columns.Contains("SerialNr."))
              row["SerialNr."] = (object) ((BusDevice) this.bus[index]).Info.MeterNumber;
          }
          else if (this.MyBus.MyBusMode == BusMode.WaveFlowRadio)
          {
            row["DeviceType"] = (object) ((BusDevice) this.bus[index]).DeviceType.ToString();
            row["Manuf."] = (object) ((BusDevice) this.bus[index]).Info.Manufacturer;
            if (BusTable.Columns.Contains("SerialNr."))
              row["SerialNr."] = (object) ((BusDevice) this.bus[index]).Info.MeterNumber;
          }
          else if (this.bus[index] is MinomatDevice)
          {
            row["DeviceType"] = (object) ((BusDevice) this.bus[index]).DeviceType.ToString();
            row["Manuf."] = (object) ((BusDevice) this.bus[index]).Info.Manufacturer;
            if (BusTable.Columns.Contains("SerialNr."))
              row["SerialNr."] = (object) ((BusDevice) this.bus[index]).Info.MeterNumber;
          }
          else if (this.bus[index] is RadioDevice)
          {
            RadioDevice bu3 = this.bus[index] as RadioDevice;
            if (bu3.Device is RadioDevicePacket)
            {
              RadioDevicePacket device = bu3.Device as RadioDevicePacket;
              row["Manuf."] = (object) bu3.Info.Manufacturer;
              row["DeviceType"] = (object) bu3.Info.MediumString;
              row["SerialNr."] = (object) bu3.Device.FunkId;
              if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoConnect || this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoHead)
              {
                int? rssiDBm = bu3.Device.RSSI_dBm;
                row["RSSI"] = !rssiDBm.HasValue ? (object) 0 : (object) bu3.Device.RSSI_dBm;
              }
              if (!flag)
              {
                row["DeviceError"] = (object) device.IsDeviceError;
                row["Manipulated"] = (object) device.IsManipulated;
              }
              row["ReceivedPackets"] = (object) bu3.DeviceInfoList.Count;
              row["LastSeen"] = (object) bu3.Info.LastReadingDate.ToString("HH:mm:ss");
              if (bu3.DeviceInfoList.Count > 1)
              {
                DateTime lastReadingDate1 = bu3.DeviceInfoList[bu3.DeviceInfoList.Count - 2].LastReadingDate;
                DateTime lastReadingDate2 = bu3.DeviceInfoList[bu3.DeviceInfoList.Count - 1].LastReadingDate;
                row["IntervalSec"] = (object) (int) lastReadingDate2.Subtract(lastReadingDate1).TotalSeconds;
              }
              if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoConnect)
                row["MCT"] = (object) device.MCT;
            }
            else if (bu3.Device is RadioPacketMinomatV4)
            {
              RadioPacketMinomatV4 device = bu3.Device as RadioPacketMinomatV4;
              row["Manuf."] = (object) bu3.Info.Manufacturer;
              row["DeviceType"] = (object) bu3.Info.MediumString;
              row["SerialNr."] = (object) bu3.Device.FunkId;
              if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoConnect || this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoHead)
              {
                int? rssiDBm = bu3.Device.RSSI_dBm;
                row["RSSI"] = !rssiDBm.HasValue ? (object) 0 : (object) bu3.Device.RSSI_dBm;
              }
              row["ReceivedPackets"] = (object) bu3.DeviceInfoList.Count;
              row["LastSeen"] = (object) bu3.Info.LastReadingDate.ToString("HH:mm:ss");
              if (bu3.DeviceInfoList.Count > 1)
              {
                DateTime lastReadingDate3 = bu3.DeviceInfoList[bu3.DeviceInfoList.Count - 2].LastReadingDate;
                DateTime lastReadingDate4 = bu3.DeviceInfoList[bu3.DeviceInfoList.Count - 1].LastReadingDate;
                row["IntervalSec"] = (object) (int) lastReadingDate4.Subtract(lastReadingDate3).TotalSeconds;
              }
              if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoConnect)
                row["MCT"] = (object) device.MCT;
            }
          }
          BusTable.Rows.Add(row);
        }
        catch (Exception ex)
        {
          DeviceList.logger.Error(ex.Message);
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal data on create device list! Error: " + ex.Message);
        }
      }
      try
      {
        for (int index = 0; index < this.FaultyDevices.Count; ++index)
        {
          BusDevice faultyDevice = (BusDevice) this.FaultyDevices[index];
          faultyDevice.TableIndex = num++;
          DataRow row = BusTable.NewRow();
          faultyDevice.TableDataRow = row;
          row["Nr."] = (object) 0;
          if (BusTable.Columns.Contains("SerialNr."))
            row["SerialNr."] = (object) "Collision";
          row["Manuf."] = (object) "-";
          row["DeviceType"] = (object) this.FaultyDevices[index].DeviceType.ToString();
          if (BusTable.Columns.Contains("Address"))
            row["Address"] = (object) this.FaultyDevices[index].PrimaryDeviceAddress.ToString("d03");
          if (BusTable.Columns.Contains("AddrOk"))
            row["AddrOk"] = (object) this.FaultyDevices[index].PrimaryAddressOk;
          BusTable.Rows.Add(row);
        }
      }
      catch
      {
      }
    }

    internal virtual string GetAllParameters()
    {
      StringBuilder stringBuilder = new StringBuilder(100000);
      for (int index = 0; index < this.bus.Count; ++index)
      {
        BusDevice bu = this.bus[index] as BusDevice;
        if (index > 0)
          stringBuilder.Append("<r>");
        if (bu.Info != null)
          stringBuilder.Append(bu.Info.GetZDFParameterString());
        else
          stringBuilder.Append("NotRead");
      }
      return stringBuilder.ToString();
    }

    internal virtual bool DeleteSelectedDevice() => throw new NotImplementedException();

    internal virtual bool AddDevice(DeviceTypes NewType, bool select)
    {
      throw new NotImplementedException();
    }

    internal virtual bool AddDevice(object NewDevice, bool select)
    {
      throw new NotImplementedException();
    }

    internal virtual bool ScanFromAddress(int ScanAddress) => throw new NotImplementedException();

    internal virtual bool ScanFromSerialNumber(string StartSerialNumber)
    {
      throw new NotImplementedException();
    }

    internal virtual bool SearchSingleDeviceByPrimaryAddress(int SearchAddress)
    {
      throw new NotImplementedException();
    }

    internal virtual bool SearchSingleDeviceBySerialNumber(string SearchSerialNumber)
    {
      throw new NotImplementedException();
    }

    public virtual bool SearchSingleDeviceBySerialNumber(uint BCD_SerialNumber)
    {
      throw new NotImplementedException();
    }

    internal virtual bool SelectDeviceByPrimaryAddress(int Address)
    {
      throw new NotImplementedException();
    }

    internal virtual bool SelectDeviceBySerialNumber(string SerialNumber)
    {
      if (this.bus == null)
        return false;
      foreach (BusDevice bu in this.bus)
      {
        if (bu.Info != null && bu.Info.MeterNumber == SerialNumber)
        {
          this.SelectedDevice = bu;
          return true;
        }
      }
      return false;
    }

    internal virtual bool SetPhysicalDeviceBySerialNumber(string SerialNumber)
    {
      throw new Exception("Function SetPhysicalDeviceBySerialNumber for this list type not available.");
    }

    internal virtual bool WorkBusAddresses() => throw new NotImplementedException();

    internal virtual bool OrganizeBus(int StartAddress) => throw new NotImplementedException();

    internal virtual bool SetPrimaryAddressOnBusWithoutShift(int NewAddress)
    {
      throw new NotImplementedException();
    }

    internal virtual bool SetPrimaryAddressOnBus(int NewAddress)
    {
      throw new NotImplementedException();
    }

    internal virtual bool GetDeviceCollectorInfo(out object InfoObject)
    {
      throw new NotImplementedException();
    }
  }
}


--- EDC.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.EDC
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using NLog;
using System;
using System.Collections.Generic;
using System.Threading;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class EDC : Serie3MBus
  {
    private static Logger logger = LogManager.GetLogger(nameof (EDC));
    private const int CMD_ENTERS_UPDATE_MODE = 1;
    private const int CMD_EVENT_LOG_CLEAR = 3;
    private const int CMD_SYSTEM_LOG_CLEAR = 5;
    private const int CMD_PULSE_DISABLE = 16;
    private const int CMD_PULSE_ENABLE = 17;
    private const int CMD_RADIO_DISABLE = 6;
    private const int CMD_RADIO_NORMAL = 9;
    private const int CMD_COIL_TEST_MODE = 18;
    private const int CMD_RADIO_OOK = 12;
    private const int CMD_RADIO_PN9 = 13;
    private const int CMD_TIME = 14;
    private const int CMD_DEPASSIVATION = 21;
    private const int CMD_PULSEOUT_QUEUE = 24;
    private const int CMD_RADIO_RECEIVE = 10;
    private const int CMD_METER_VALUE = 32;
    private const int CMD_REMOVAL_FLAG_CLEAR = 37;
    private const int CMD_TAMPER_FLAG_CLEAR = 38;
    private const int CMD_BACKFLOW_FLAG_CLEAR = 39;
    private const int CMD_LEAK_FLAG_CLEAR = 40;
    private const int CMD_BLOCK_FLAG_CLEAR = 41;
    private const int CMD_OVERSIZE_FLAG_CLEAR = 42;
    private const int CMD_UNDERSIZE_FLAG_CLEAR = 43;
    private const int CMD_BURST_FLAG_CLEAR = 44;
    private const int CMD_CONFIG_FLAGS = 45;
    private const int CMD_LOG_ENABLE = 47;
    private const int CMD_LOG_DISABLE = 48;
    private const int CMD_LOG_CLEAR_AND_DISABLE_LOG = 49;
    private const int CMD_SERIAL = 52;
    private const int CMD_ADDRESS = 53;
    private const int CMD_GENERATION = 54;
    private const int CMD_MEDIUM = 55;
    private const int CMD_MANUFACTURER = 56;
    private const int CMD_OBIS = 57;

    public EDC(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.BaseConstructor();
    }

    public EDC(MBusDevice TheMBusDevice)
      : base(TheMBusDevice)
    {
      this.BaseConstructor();
    }

    private void BaseConstructor() => this.DeviceType = DeviceTypes.EDC;

    public int ReadTimeout_RecTime_OffsetPerBlock
    {
      get
      {
        if (this.MyBus.AsyncCom == null)
          return 800;
        SortedList<AsyncComSettings, object> asyncComSettings = this.MyBus.AsyncCom.GetAsyncComSettings();
        return !asyncComSettings.ContainsKey(AsyncComSettings.RecTime_OffsetPerBlock) || string.IsNullOrEmpty(asyncComSettings[AsyncComSettings.RecTime_OffsetPerBlock].ToString()) ? 800 : Convert.ToInt32(asyncComSettings[AsyncComSettings.RecTime_OffsetPerBlock]);
      }
      set
      {
        if (this.MyBus.AsyncCom == null)
          return;
        this.MyBus.AsyncCom.SingleParameter(CommParameter.RecTime_OffsetPerBlock, value.ToString());
      }
    }

    public new bool ReadVersion(out ReadVersionData versionData)
    {
      return base.ReadVersion(out versionData);
    }

    public bool ReadMemory(ushort startAddress, int size, out byte[] buffer)
    {
      buffer = (byte[]) null;
      this.StartAddress = (int) startAddress;
      this.NumberOfBytes = size;
      if (!this.ReadMemory())
      {
        EDC.logger.Error<ushort, int>("Read memory error at address: 0x{0:X4}, Size: {1}", startAddress, size);
        return false;
      }
      buffer = this.DataBuffer.Data;
      return true;
    }

    public bool RunRAMBackup()
    {
      EDC.logger.Info(nameof (RunRAMBackup));
      return this.RunBackup();
    }

    public new bool ResetDevice()
    {
      int timeOffsetPerBlock = this.ReadTimeout_RecTime_OffsetPerBlock;
      if (timeOffsetPerBlock < 2000)
        this.ReadTimeout_RecTime_OffsetPerBlock = 2000;
      try
      {
        this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ResetDevice);
        if (!this.MyBus.MyCom.Open())
          return false;
        this.GenerateSendDataHeader();
        this.TransmitBuffer.Add(15);
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(4);
        this.FinishLongFrame();
        while (!this.MyBus.BreakRequest && this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
        {
          EDC.logger.Info(nameof (ResetDevice));
          this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusDeviceReset);
          if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
            return false;
          this.MyBus.BusState.IncrementTransmitBlockCounter();
          if (!this.ReceiveOkNok())
          {
            if (EDC.logger.IsWarnEnabled && this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
              EDC.logger.Warn("--> ResetDevice error. Repeat command!");
          }
          else
          {
            Thread.Sleep(300);
            return true;
          }
        }
        return false;
      }
      finally
      {
        this.ReadTimeout_RecTime_OffsetPerBlock = timeOffsetPerBlock;
      }
    }

    public bool UpdateModeEnter()
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return false;
      if (this.UpdateModeReadFlash(38400U, (byte) 128) != null)
        return true;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(1);
      this.FinishLongFrame();
      EDC.logger.Debug("Enters the update mode");
      this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
      this.MyBus.BusState.IncrementTransmitBlockCounter();
      ByteField DataBlock = new ByteField(1);
      if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
      {
        Thread.Sleep(200);
        this.MyBus.MyCom.ResetLastTransmitEndTime();
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(200);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            return false;
        }
      }
      return DataBlock != null && DataBlock.Count == 1 && DataBlock.Data[0] == (byte) 229;
    }

    public bool UpdateModeExit()
    {
      List<byte> buffer = new List<byte>();
      buffer.Add((byte) 5);
      buffer.Add((byte) 0);
      ushort num = Util.CalculatesCRC16_CC430(buffer);
      buffer.AddRange((IEnumerable<byte>) BitConverter.GetBytes(num));
      byte[] stuffedBuffer = this.GetStuffedBuffer(buffer);
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 170);
      byteList.AddRange((IEnumerable<byte>) stuffedBuffer);
      byteList.Add((byte) 205);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return false;
      bool wakeupTemporaryOff = this.MyBus.AsyncCom.WakeupTemporaryOff;
      try
      {
        EDC.logger.Debug("Exit the update mode");
        this.MyBus.AsyncCom.WakeupTemporaryOff = true;
        this.MyBus.MyCom.TransmitBlock(byteList.ToArray());
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        Thread.Sleep(2000);
        this.MyBus.MyCom.ResetLastTransmitEndTime();
        ByteField DataBlock = new ByteField(1);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(100);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(300);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
              return false;
          }
        }
        this.MyBus.MyCom.ClearCom();
        return DataBlock != null && DataBlock.Count == 1 && DataBlock.Data[0] == (byte) 229;
      }
      finally
      {
        this.MyBus.AsyncCom.WakeupTemporaryOff = wakeupTemporaryOff;
      }
    }

    public bool UpdateModeEraseFlash(uint address)
    {
      byte[] bytes = BitConverter.GetBytes(address);
      List<byte> buffer1 = new List<byte>();
      buffer1.Add((byte) 7);
      buffer1.Add((byte) 0);
      buffer1.AddRange((IEnumerable<byte>) bytes);
      ushort num1 = Util.CalculatesCRC16_CC430(buffer1);
      buffer1.AddRange((IEnumerable<byte>) BitConverter.GetBytes(num1));
      byte[] stuffedBuffer = this.GetStuffedBuffer(buffer1);
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 170);
      byteList.AddRange((IEnumerable<byte>) stuffedBuffer);
      byteList.Add((byte) 205);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return false;
      bool wakeupTemporaryOff = this.MyBus.AsyncCom.WakeupTemporaryOff;
      try
      {
        EDC.logger.Debug("Erase 512 bytes flash at address 0x" + address.ToString("X4"));
        this.MyBus.AsyncCom.WakeupTemporaryOff = true;
        this.MyBus.MyCom.TransmitBlock(byteList.ToArray());
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        List<byte> buffer2 = new List<byte>();
        ByteField DataBlock = new ByteField(1);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(300);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(300);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(300);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                return false;
            }
          }
        }
        byte num2 = DataBlock.Data[0];
        buffer2.Add(num2);
        if (num2 != (byte) 170)
          return false;
        byte num3;
        do
        {
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(100);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(300);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
              {
                Thread.Sleep(300);
                this.MyBus.MyCom.ResetLastTransmitEndTime();
                if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                  return false;
              }
            }
          }
          num3 = DataBlock.Data[0];
          buffer2.Add(num3);
        }
        while (num3 != (byte) 205);
        byte[] unstuffedBuffer = this.GetUnstuffedBuffer(buffer2);
        if (unstuffedBuffer.Length < 10)
          return false;
        byte[] numArray = new byte[unstuffedBuffer.Length - 4];
        Buffer.BlockCopy((Array) unstuffedBuffer, 1, (Array) numArray, 0, numArray.Length);
        ushort num4 = Util.CalculatesCRC16_CC430(new List<byte>((IEnumerable<byte>) numArray));
        ushort uint16 = BitConverter.ToUInt16(unstuffedBuffer, 7);
        return unstuffedBuffer != null && unstuffedBuffer[1] == (byte) 135 && unstuffedBuffer[2] == (byte) 0 && (int) unstuffedBuffer[3] == (int) bytes[0] && (int) unstuffedBuffer[4] == (int) bytes[1] && (int) unstuffedBuffer[5] == (int) bytes[2] && (int) unstuffedBuffer[6] == (int) bytes[3] && (int) uint16 == (int) num4;
      }
      finally
      {
        this.MyBus.AsyncCom.WakeupTemporaryOff = wakeupTemporaryOff;
      }
    }

    public bool UpdateModeWriteFlash(uint address, byte[] memory_128byte)
    {
      byte[] bytes = BitConverter.GetBytes(address);
      List<byte> buffer1 = new List<byte>();
      buffer1.Add((byte) 6);
      buffer1.Add((byte) 0);
      buffer1.AddRange((IEnumerable<byte>) bytes);
      buffer1.AddRange((IEnumerable<byte>) memory_128byte);
      ushort num1 = Util.CalculatesCRC16_CC430(buffer1);
      buffer1.AddRange((IEnumerable<byte>) BitConverter.GetBytes(num1));
      byte[] stuffedBuffer = this.GetStuffedBuffer(buffer1);
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 170);
      byteList.AddRange((IEnumerable<byte>) stuffedBuffer);
      byteList.Add((byte) 205);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return false;
      bool wakeupTemporaryOff = this.MyBus.AsyncCom.WakeupTemporaryOff;
      try
      {
        EDC.logger.Debug("Write 128 bytes flash at address 0x" + address.ToString("X4"));
        this.MyBus.AsyncCom.WakeupTemporaryOff = true;
        this.MyBus.MyCom.TransmitBlock(byteList.ToArray());
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        this.MyBus.MyCom.ResetLastTransmitEndTime();
        List<byte> buffer2 = new List<byte>();
        ByteField DataBlock = new ByteField(1);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(200);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(200);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(200);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                return false;
            }
          }
        }
        byte num2 = DataBlock.Data[0];
        buffer2.Add(num2);
        if (num2 != (byte) 170)
          return false;
        byte num3;
        do
        {
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(200);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(200);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
              {
                Thread.Sleep(200);
                this.MyBus.MyCom.ResetLastTransmitEndTime();
                if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                  return false;
              }
            }
          }
          num3 = DataBlock.Data[0];
          buffer2.Add(num3);
        }
        while (num3 != (byte) 205);
        byte[] unstuffedBuffer = this.GetUnstuffedBuffer(buffer2);
        if (unstuffedBuffer.Length < 10)
          return false;
        byte[] numArray = new byte[unstuffedBuffer.Length - 4];
        Buffer.BlockCopy((Array) unstuffedBuffer, 1, (Array) numArray, 0, numArray.Length);
        ushort num4 = Util.CalculatesCRC16_CC430(new List<byte>((IEnumerable<byte>) numArray));
        ushort uint16 = BitConverter.ToUInt16(unstuffedBuffer, 7);
        return unstuffedBuffer != null && unstuffedBuffer[1] == (byte) 134 && unstuffedBuffer[2] == (byte) 0 && (int) unstuffedBuffer[3] == (int) bytes[0] && (int) unstuffedBuffer[4] == (int) bytes[1] && (int) unstuffedBuffer[5] == (int) bytes[2] && (int) unstuffedBuffer[6] == (int) bytes[3] && (int) uint16 == (int) num4;
      }
      finally
      {
        this.MyBus.AsyncCom.WakeupTemporaryOff = wakeupTemporaryOff;
      }
    }

    public byte[] UpdateModeReadFlash(uint address, byte count)
    {
      byte[] bytes = BitConverter.GetBytes(address);
      List<byte> buffer1 = new List<byte>();
      buffer1.Add((byte) 8);
      buffer1.Add((byte) 0);
      buffer1.AddRange((IEnumerable<byte>) bytes);
      buffer1.Add(count);
      ushort num1 = Util.CalculatesCRC16_CC430(buffer1);
      buffer1.AddRange((IEnumerable<byte>) BitConverter.GetBytes(num1));
      byte[] stuffedBuffer = this.GetStuffedBuffer(buffer1);
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 170);
      byteList.AddRange((IEnumerable<byte>) stuffedBuffer);
      byteList.Add((byte) 205);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return (byte[]) null;
      bool wakeupTemporaryOff = this.MyBus.AsyncCom.WakeupTemporaryOff;
      try
      {
        EDC.logger.Debug("Read " + count.ToString() + " bytes flash at address 0x" + address.ToString("X4"));
        this.MyBus.AsyncCom.WakeupTemporaryOff = true;
        this.MyBus.MyCom.TransmitBlock(byteList.ToArray());
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        List<byte> buffer2 = new List<byte>();
        ByteField DataBlock = new ByteField(1);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(200);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(400);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
              return (byte[]) null;
          }
        }
        buffer2.AddRange((IEnumerable<byte>) DataBlock.Data);
        if (buffer2[0] != (byte) 170)
          return (byte[]) null;
        while (buffer2[buffer2.Count - 1] != (byte) 205)
        {
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(200);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(200);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                return (byte[]) null;
            }
          }
          buffer2.Add(DataBlock.Data[0]);
        }
        byte[] unstuffedBuffer = this.GetUnstuffedBuffer(buffer2);
        byte[] numArray = new byte[unstuffedBuffer.Length - 4];
        Buffer.BlockCopy((Array) unstuffedBuffer, 1, (Array) numArray, 0, numArray.Length);
        ushort num2 = Util.CalculatesCRC16_CC430(new List<byte>((IEnumerable<byte>) numArray));
        ushort uint16 = BitConverter.ToUInt16(unstuffedBuffer, unstuffedBuffer.Length - 3);
        if (unstuffedBuffer == null || unstuffedBuffer[1] != (byte) 136 || unstuffedBuffer[2] != (byte) 0 || (int) unstuffedBuffer[3] != (int) bytes[0] || (int) unstuffedBuffer[4] != (int) bytes[1] || (int) unstuffedBuffer[5] != (int) bytes[2] || (int) unstuffedBuffer[6] != (int) bytes[3] || (int) uint16 != (int) num2)
          return (byte[]) null;
        byte[] dst = new byte[(int) count];
        Buffer.BlockCopy((Array) unstuffedBuffer, 7, (Array) dst, 0, dst.Length);
        return dst;
      }
      finally
      {
        this.MyBus.AsyncCom.WakeupTemporaryOff = wakeupTemporaryOff;
      }
    }

    private byte[] GetStuffedBuffer(List<byte> buffer)
    {
      List<byte> byteList = new List<byte>();
      foreach (byte num1 in buffer)
      {
        int num2;
        switch (num1)
        {
          case 170:
          case 205:
            num2 = 1;
            break;
          default:
            num2 = num1 == (byte) 92 ? 1 : 0;
            break;
        }
        if (num2 != 0)
        {
          byteList.Add((byte) 92);
          byteList.Add(~num1);
        }
        else
          byteList.Add(num1);
      }
      return byteList.ToArray();
    }

    private byte[] GetUnstuffedBuffer(List<byte> buffer)
    {
      List<byte> byteList = new List<byte>();
      for (int index = 0; index < buffer.Count; ++index)
      {
        if (buffer[index] == (byte) 92)
        {
          ++index;
          byteList.Add(~buffer[index]);
        }
        else
          byteList.Add(buffer[index]);
      }
      return byteList.ToArray();
    }

    public bool PulseDisable()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.PulseDisable, (byte) 16) && this.ReceiveACK_NACK((byte) 16);
    }

    public bool PulseEnable()
    {
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.PulseEnable, (byte) 17) && this.ReceiveACK_NACK((byte) 17);
    }

    public bool RadioDisable()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.RadioDisable, (byte) 6) && this.ReceiveACK_NACK((byte) 6);
    }

    public bool RadioNormal()
    {
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.RadioNormal, (byte) 9) && this.ReceiveACK_NACK((byte) 9);
    }

    private bool ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks task, byte cmd)
    {
      this.MyBus.BusState.StartBusFunctionTask(task);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(cmd);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("Send cmd: " + task.ToString());
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run " + task.ToString());
        }
        else
        {
          if (this.ReceiveLongframeEnd())
            return true;
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run " + task.ToString());
        }
      }
      return false;
    }

    public bool StartVolumeMonitor()
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.MyCom.BreakRequest = false;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.StartVolumeMonitor);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(18);
      this.FinishLongFrame();
      EDC.logger.Info("Send cmd: StartVolumeMonitor");
      this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
      this.MyBus.BusState.IncrementTransmitBlockCounter();
      Thread.Sleep(1200);
      this.MyBus.MyCom.ResetLastTransmitEndTime();
      if (this.MyBus.AsyncCom.InputBufferLength > 0L)
      {
        EDC.logger.Info("ok");
        return true;
      }
      EDC.logger.Error("Failed to start the volume monitor.");
      return false;
    }

    public bool StopVolumeMonitor_SendE5()
    {
      this.MyBus.MyCom.BreakRequest = false;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.StopVolumeMonitor);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.MyCom.WakeupTemporaryOff = true;
      ByteField DataBlock = new ByteField(new byte[1]
      {
        (byte) 229
      });
      EDC.logger.Info("Send cmd: StopVolumeMonitor_SendE5");
      this.MyBus.MyCom.TransmitBlock(ref DataBlock);
      this.MyBus.MyCom.TransmitBlock(ref DataBlock);
      this.MyBus.MyCom.TransmitBlock(ref DataBlock);
      this.MyBus.BusState.IncrementTransmitBlockCounter();
      Thread.Sleep(600);
      this.MyBus.MyCom.ResetLastTransmitEndTime();
      LogManager.DisableLogging();
      try
      {
        this.MyBus.MyCom.ClearCom();
      }
      finally
      {
        LogManager.EnableLogging();
      }
      ZR_ClassLibMessages.ClearErrorText();
      return true;
    }

    public bool WriteRAM(ushort address, byte[] buffer)
    {
      BusDevice.CheckReadOnlyRight();
      int timeOffsetPerBlock = this.ReadTimeout_RecTime_OffsetPerBlock;
      if (timeOffsetPerBlock < 1000)
        this.ReadTimeout_RecTime_OffsetPerBlock = 1000;
      try
      {
        bool flag = this.Write(MemoryLocation.RAM, address, buffer);
        if (flag)
          Thread.Sleep(100);
        return flag;
      }
      finally
      {
        this.ReadTimeout_RecTime_OffsetPerBlock = timeOffsetPerBlock;
      }
    }

    public bool WriteFLASH(ushort address, byte[] buffer)
    {
      BusDevice.CheckReadOnlyRight();
      int timeOffsetPerBlock = this.ReadTimeout_RecTime_OffsetPerBlock;
      if (timeOffsetPerBlock < 1000)
        this.ReadTimeout_RecTime_OffsetPerBlock = 1000;
      try
      {
        bool flag = this.Write(MemoryLocation.FLASH, address, buffer);
        if (flag)
          Thread.Sleep(200);
        return flag;
      }
      finally
      {
        this.ReadTimeout_RecTime_OffsetPerBlock = timeOffsetPerBlock;
      }
    }

    private bool Write(MemoryLocation location, ushort address, byte[] buffer)
    {
      BusDevice.CheckReadOnlyRight();
      if (location != MemoryLocation.FLASH && location != MemoryLocation.RAM)
        return false;
      if (buffer == null || buffer.Length == 0)
        return true;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMemoryBlock);
      if (!this.MyBus.MyCom.Open())
        return false;
      int IntToByte = 3;
      if (location == MemoryLocation.FLASH)
      {
        IntToByte = 1;
        if (buffer.Length % 4 != 0)
          throw new Exception("Internally EDC Handler Bug: FLASH write. Write buffer is not multiple of 4!");
      }
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(BitConverter.GetBytes(address));
      this.TransmitBuffer.Add((byte) buffer.Length);
      this.TransmitBuffer.Add(IntToByte);
      this.TransmitBuffer.Add(buffer);
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("Write " + location.ToString() + " 0x" + address.ToString("X4"));
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveOkNok())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run write " + location.ToString());
        }
        else
        {
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
      }
      return flag;
    }

    public bool SendSND_NKE()
    {
      this.SND_NKE_Broadcast();
      return true;
    }

    public bool RadioOOK()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.RadioOOK, (byte) 12) && this.ReceiveACK_NACK((byte) 12);
    }

    public bool RadioOOK(RadioMode mode, short offset, ushort timeoutInSeconds)
    {
      return this.RadioTest(BusStatusClass.BusFunctionTasks.RadioOOK, (byte) 12, mode, offset, timeoutInSeconds);
    }

    public bool RadioPN9()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.RadioPN9, (byte) 13) && this.ReceiveACK_NACK((byte) 13);
    }

    public bool RadioPN9(RadioMode mode, short offset, ushort timeoutInSeconds)
    {
      return this.RadioTest(BusStatusClass.BusFunctionTasks.RadioPN9, (byte) 13, mode, offset, timeoutInSeconds);
    }

    private bool RadioTest(
      BusStatusClass.BusFunctionTasks task,
      byte cmd,
      RadioMode mode,
      short offset,
      ushort timeoutInSeconds)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(task);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(cmd);
      this.TransmitBuffer.Add((byte) mode);
      this.TransmitBuffer.Add(BitConverter.GetBytes(offset));
      this.TransmitBuffer.Add(BitConverter.GetBytes(timeoutInSeconds));
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("Send cmd: " + task.ToString());
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run " + task.ToString());
        }
        else
        {
          if (this.ReceiveLongframeEnd())
            return this.ReceiveACK_NACK(cmd);
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run " + task.ToString());
        }
      }
      return flag;
    }

    public bool StartDepassivation()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.StartDepassivation, (byte) 21) && this.ReceiveACK_NACK((byte) 21);
    }

    public DateTime? ReadSystemTime()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMemoryBlock);
      if (!this.MyBus.MyCom.Open())
        return new DateTime?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(14);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("Send cmd: ReadSystemTime");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run ReadSystemTime");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run ReadSystemTime");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 12 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown EDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          byte num = this.ReceiveBuffer.Data[6];
          byte month = this.ReceiveBuffer.Data[7];
          byte day = this.ReceiveBuffer.Data[8];
          byte hour = this.ReceiveBuffer.Data[9];
          byte minute = this.ReceiveBuffer.Data[10];
          byte second = this.ReceiveBuffer.Data[11];
          if (month > (byte) 12 || day > (byte) 31 || hour > (byte) 23 || minute > (byte) 59 || second > (byte) 59)
            return new DateTime?(new DateTime(2000, 1, 1));
          if (month == (byte) 0 || day == (byte) 0)
            return new DateTime?(new DateTime(2000, 1, 1));
          try
          {
            return new DateTime?(new DateTime((int) num + 2000, (int) month, (int) day, (int) hour, (int) minute, (int) second));
          }
          catch
          {
            return new DateTime?(new DateTime(2000, 1, 1));
          }
        }
      }
      return new DateTime?();
    }

    public bool WriteSystemTime(DateTime value)
    {
      BusDevice.CheckReadOnlyRight();
      if (value.Year < 2000)
        throw new ArgumentOutOfRangeException("Can not write system time! The year should be greater or equal to 2000. Value: " + value.ToLongDateString());
      if (value.Year > 2255)
        throw new ArgumentOutOfRangeException("Can not write system time! The year should be smaller as 2255. Value: " + value.ToLongDateString());
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMemoryBlock);
      byte Byte = (byte) (value.Year - 2000);
      byte month = (byte) value.Month;
      byte day = (byte) value.Day;
      byte hour = (byte) value.Hour;
      byte minute = (byte) value.Minute;
      byte second = (byte) value.Second;
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(14);
      this.TransmitBuffer.Add(Byte);
      this.TransmitBuffer.Add(month);
      this.TransmitBuffer.Add(day);
      this.TransmitBuffer.Add(hour);
      this.TransmitBuffer.Add(minute);
      this.TransmitBuffer.Add(second);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("WriteSystemTime(" + value.ToString("g") + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run ReadSystemTime");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run ReadSystemTime");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 12 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown EDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (int) Byte == (int) this.ReceiveBuffer.Data[6] && (int) month == (int) this.ReceiveBuffer.Data[7] && (int) day == (int) this.ReceiveBuffer.Data[8] && (int) hour == (int) this.ReceiveBuffer.Data[9] && (int) minute == (int) this.ReceiveBuffer.Data[10];
        }
      }
      return false;
    }

    internal bool ReceiveACK_NACK(byte cmd)
    {
      ZR_ClassLibMessages.ClearErrors();
      if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
        throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
      if (this.ReceiveBuffer.Data[5] == byte.MaxValue)
        throw new Exception("Invalid command was send to EDC device! CMD: 0x" + cmd.ToString("X2"));
      if (this.ReceiveBuffer.Data[5] == (byte) 251 || this.ReceiveBuffer.Data[5] == (byte) 252 || this.ReceiveBuffer.Data[5] == (byte) 253 || this.ReceiveBuffer.Data[5] == (byte) 254)
        throw new Exception("Invalid response was received! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
      if (this.ReceiveBuffer.Data[5] == (byte) 250 && (int) this.ReceiveBuffer.Data[6] == (int) cmd)
      {
        EDC.logger.Debug("... successful ");
        return true;
      }
      if ((int) this.ReceiveBuffer.Data[5] != ((int) cmd | 128))
        return false;
      EDC.logger.Debug("... successful ");
      return true;
    }

    public bool EraseFLASHSegment(ushort address)
    {
      BusDevice.CheckReadOnlyRight();
      EDC.logger.Info("Erase FLASH 0x" + address.ToString("X4"));
      int timeOffsetPerBlock = this.ReadTimeout_RecTime_OffsetPerBlock;
      if (timeOffsetPerBlock < 1000)
        this.ReadTimeout_RecTime_OffsetPerBlock = 1000;
      try
      {
        bool flag = this.EraseFlash((int) address, 0);
        if (flag)
          Thread.Sleep(200);
        return flag;
      }
      finally
      {
        this.ReadTimeout_RecTime_OffsetPerBlock = timeOffsetPerBlock;
      }
    }

    public bool WritePulseoutQueue(short value, bool clearQueue)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WritePulseoutQueue);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(24);
      this.TransmitBuffer.Add(BitConverter.GetBytes(value));
      this.TransmitBuffer.Add(BitConverter.GetBytes(clearQueue));
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("Send cmd: " + BusStatusClass.BusFunctionTasks.WritePulseoutQueue.ToString());
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run " + BusStatusClass.BusFunctionTasks.WritePulseoutQueue.ToString());
        }
        else
        {
          if (this.ReceiveLongframeEnd())
            return this.ReceiveACK_NACK((byte) 24);
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run " + BusStatusClass.BusFunctionTasks.WritePulseoutQueue.ToString());
        }
      }
      return flag;
    }

    public bool RadioReceive(
      out RadioPacket packet,
      out byte[] buffer,
      out int rssi_dBm,
      out int lqi,
      uint timeout)
    {
      BusDevice.CheckReadOnlyRight();
      packet = (RadioPacket) null;
      buffer = (byte[]) null;
      rssi_dBm = 0;
      lqi = 0;
      DateTime now1 = DateTime.Now;
      try
      {
        if (!this.PulseDisable())
          throw new Exception("Can not disable radio!");
        if (!this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.RadioReceive, (byte) 10))
          throw new Exception("Can not start radio receiver!");
        if (!this.ReceiveACK_NACK((byte) 10))
          throw new Exception("Missing OK after start radio receiver!");
        DateTime now2 = DateTime.Now;
        while ((DateTime.Now - now2).TotalMilliseconds < (double) timeout && this.MyBus.MyCom.InputBufferLength < 19L)
        {
          if (this.MyBus.BreakRequest)
            throw new Exception("Function was canceled!");
          EDC.logger.Trace("Wait 100 ms");
          Thread.Sleep(100);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
        }
        if ((DateTime.Now - now2).TotalMilliseconds > (double) timeout)
        {
          string TheDescription = "Timeout " + timeout.ToString() + " ms expired. The timeout period elapsed prior to completion of the operation or the device is not responding.";
          if (this.MyBus.MyCom.InputBufferLength > 0L)
            TheDescription = TheDescription + "Invalid buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data, 0);
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.Timeout, TheDescription);
          return false;
        }
        this.MyBus.MyCom.ResetLastTransmitEndTime();
        if (!this.ReceiveHeader())
          throw new Exception("Can not encode header!");
        if (!this.ReceiveLongframeEnd())
          throw new Exception("Can not encode M-Bus long frame!");
        if (!this.ReceiveACK_NACK((byte) 10))
          throw new Exception("Can not receive OK after sucessfull radio receive!");
        if (this.ReceiveBuffer.Data.Length < 7 || this.ReceiveBuffer.Data[6] > (byte) 0)
          throw new Exception("Faled to recive radio packet! Error number: " + this.ReceiveBuffer.Data[6].ToString());
        buffer = new byte[this.ReceiveBuffer.Data.Length - 7 - 2];
        Buffer.BlockCopy((Array) this.ReceiveBuffer.Data, 7, (Array) buffer, 0, buffer.Length);
        packet = RadioPacket.Parse(buffer, true);
        rssi_dBm = Util.RssiToRssi_dBm(buffer[buffer.Length - 2]);
        lqi = (int) buffer[buffer.Length - 1];
        return true;
      }
      finally
      {
        ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
        this.RadioDisable();
        if (lastError != 0)
          ZR_ClassLibMessages.AddErrorDescription(lastError);
      }
    }

    public bool StartRadioReceiver()
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.PulseDisable())
        throw new Exception("Failed to start the radio receiver! Can not disable the coil sampling.");
      if (!this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.RadioReceive, (byte) 10))
        throw new Exception("Can not start radio receiver!");
      if (!this.ReceiveACK_NACK((byte) 10))
        throw new Exception("Missing OK after start radio receiver!");
      return true;
    }

    public bool EventLogClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.EventLogClear, (byte) 3) && this.ReceiveACK_NACK((byte) 3);
    }

    public bool SystemLogClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.SystemLogClear, (byte) 5) && this.ReceiveACK_NACK((byte) 5);
    }

    public bool RemovalFlagClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.RemovalFlagClear, (byte) 37) && this.ReceiveACK_NACK((byte) 37);
    }

    public bool TamperFlagClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.TamperFlagClear, (byte) 38) && this.ReceiveACK_NACK((byte) 38);
    }

    public bool BackflowFlagClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.BackflowFlagClear, (byte) 39) && this.ReceiveACK_NACK((byte) 39);
    }

    public bool LeakFlagClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.LeakFlagClear, (byte) 40) && this.ReceiveACK_NACK((byte) 40);
    }

    public bool BlockFlagClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.BlockFlagClear, (byte) 41) && this.ReceiveACK_NACK((byte) 41);
    }

    public bool OversizeFlagClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.OversizeFlagClear, (byte) 42) && this.ReceiveACK_NACK((byte) 42);
    }

    public bool UndersizeFlagClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.UndersizeFlagClear, (byte) 43) && this.ReceiveACK_NACK((byte) 43);
    }

    public bool BurstFlagClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.BurstFlagClear, (byte) 44) && this.ReceiveACK_NACK((byte) 44);
    }

    public bool LogEnable()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.LogEnable, (byte) 47) && this.ReceiveACK_NACK((byte) 47);
    }

    public bool LogDisable()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.LogDisable, (byte) 48) && this.ReceiveACK_NACK((byte) 48);
    }

    public bool LogClearAndDisableLog()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand(BusStatusClass.BusFunctionTasks.LogClearAndDisableLog, (byte) 49) && this.ReceiveACK_NACK((byte) 49);
    }

    public bool WriteMeterValue(uint value)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMeterValue);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(32);
      this.TransmitBuffer.Add(BitConverter.GetBytes(value));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("WriteMeterValue(" + value.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run WriteMeterValue");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run WriteMeterValue");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (long) BitConverter.ToInt32(this.ReceiveBuffer.Data, 6) == (long) value;
        }
      }
      return false;
    }

    public uint? ReadMeterValue()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMeterValue);
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(32);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("Send cmd: ReadMeterValue");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run ReadMeterValue");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run ReadMeterValue");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 6));
        }
      }
      return new uint?();
    }

    public ushort? ReadConfigFlags()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(45);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug(nameof (ReadConfigFlags));
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run ReadConfigFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run ReadConfigFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 6));
        }
      }
      return new ushort?();
    }

    public bool WriteConfigFlags(ushort value)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(45);
      this.TransmitBuffer.Add(BitConverter.GetBytes(value));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("WriteConfigFlags(" + value.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run WriteConfigFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn(" ... repeat run WriteConfigFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (int) BitConverter.ToUInt16(this.ReceiveBuffer.Data, 6) == (int) value;
        }
      }
      return false;
    }

    public uint? ReadSerialnumber(byte index)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(52);
      this.TransmitBuffer.Add(index);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("ReadSerialnumber(" + index.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 13 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(Util.ConvertBcdUInt32ToUInt32(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7)));
        }
      }
      return new uint?();
    }

    public bool WriteSerialnumber(byte index, uint serial)
    {
      BusDevice.CheckReadOnlyRight();
      uint bcdUint32 = Util.ConvertUnt32ToBcdUInt32(serial);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(52);
      this.TransmitBuffer.Add(index);
      this.TransmitBuffer.Add(BitConverter.GetBytes(bcdUint32));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("WriteSerialnumber(" + index.ToString() + ", " + serial.ToString() + "=>BCD: 0x" + bcdUint32.ToString("X8") + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 13 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (int) BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7) == (int) bcdUint32;
        }
      }
      return false;
    }

    public byte? ReadAddress(byte index)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(53);
      this.TransmitBuffer.Add(index);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("ReadAddress(" + index.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public bool WriteAddress(byte index, byte address)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(53);
      this.TransmitBuffer.Add(index);
      this.TransmitBuffer.Add(address);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("WriteAddress(" + address.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (int) this.ReceiveBuffer.Data[7] == (int) address;
        }
      }
      return false;
    }

    public byte? ReadGeneration(byte index)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(54);
      this.TransmitBuffer.Add(index);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("ReadGeneration(" + index.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public bool WriteGeneration(byte index, byte generation)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(54);
      this.TransmitBuffer.Add(index);
      this.TransmitBuffer.Add(generation);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("WriteGeneration(" + generation.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (int) this.ReceiveBuffer.Data[7] == (int) generation;
        }
      }
      return false;
    }

    public byte? ReadMedium(byte index)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(55);
      this.TransmitBuffer.Add(index);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("ReadMedium(" + index.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public bool WriteMedium(byte index, byte medium)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(55);
      this.TransmitBuffer.Add(index);
      this.TransmitBuffer.Add(medium);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("WriteMedium(" + medium.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (int) this.ReceiveBuffer.Data[7] == (int) medium;
        }
      }
      return false;
    }

    public ushort? ReadManufacturer(byte index)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(56);
      this.TransmitBuffer.Add(index);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("ReadManufacturer(" + index.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ushort?();
    }

    public bool WriteManufacturer(byte index, ushort manufacturer)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(56);
      this.TransmitBuffer.Add(index);
      this.TransmitBuffer.Add(BitConverter.GetBytes(manufacturer));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("WriteManufacturer(" + manufacturer.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (int) BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7) == (int) manufacturer;
        }
      }
      return false;
    }

    public byte? ReadObis(byte index)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(57);
      this.TransmitBuffer.Add(index);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Debug("ReadObis(" + index.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public bool WriteObis(byte index, byte obis)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add(57);
      this.TransmitBuffer.Add(index);
      this.TransmitBuffer.Add(obis);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        EDC.logger.Info("WriteObis(" + obis.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            EDC.logger.Warn("repeat");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 64 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) index)
            throw new Exception("Unknown EDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (int) this.ReceiveBuffer.Data[7] == (int) obis;
        }
      }
      return false;
    }
  }
}


--- EHCA_MBus.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.EHCA_MBus
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class EHCA_MBus : MBusDevice
  {
    private const int MaxReadBlockSize = 200;
    private const int MaxWriteBlockSize = 8;
    internal int StartAddress;
    internal int NumberOfBytes;
    internal ByteField DataBuffer;

    public EHCA_MBus(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.DeviceType = DeviceTypes.ZR_EHCA;
    }

    public EHCA_MBus(MBusDevice TheMBusDevice)
      : base(TheMBusDevice.MyBus)
    {
      this.Info = TheMBusDevice.Info;
      this.PrimaryAddressKnown = TheMBusDevice.PrimaryAddressKnown;
      this.PrimaryAddressOk = TheMBusDevice.PrimaryAddressOk;
      this.PrimaryDeviceAddress = TheMBusDevice.PrimaryDeviceAddress;
      this.DeviceType = DeviceTypes.ZR_EHCA;
    }

    internal bool ReadMemory()
    {
      if (!this.MyBus.MyCom.Open())
        return false;
      int startAddress = this.StartAddress;
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartReadMemory);
      this.DataBuffer = new ByteField(this.NumberOfBytes);
      do
      {
        int BlockSize = this.NumberOfBytes - (startAddress - this.StartAddress);
        if (BlockSize > 200)
          BlockSize = 200;
        if (!this.ReadMemoryBlock(startAddress, BlockSize))
          return false;
        for (int index = 1; index < this.ReceiveBuffer.Count - 2; ++index)
          this.DataBuffer.Add(this.ReceiveBuffer.Data[index]);
        startAddress += BlockSize;
      }
      while (startAddress - this.StartAddress < this.NumberOfBytes);
      return true;
    }

    private bool ReadMemoryBlock(int BlockStartAddress, int BlockSize)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMemoryBlock);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) (BlockStartAddress & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (BlockStartAddress >> 8 & (int) byte.MaxValue));
      this.TransmitBuffer.Add((int) (byte) BlockSize - 1);
      this.TransmitBuffer.Add(2);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartReadBlock);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveHeader() && this.ReceiveLongframeEnd())
        {
          if (this.ReceiveBuffer.Count - 3 == BlockSize)
            return true;
          this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusReadWrongBlockLength);
        }
      }
      return false;
    }

    internal bool WriteMemory()
    {
      if (!this.MyBus.MyCom.Open())
        return false;
      int startAddress = this.StartAddress;
      int DataStartOffset = 0;
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteMemory);
      do
      {
        int BlockSize = this.DataBuffer.Count - (startAddress - this.StartAddress);
        if (BlockSize > 8)
          BlockSize = 8;
        if (!this.WriteMemoryBlock(startAddress, BlockSize, ref DataStartOffset))
          return false;
        startAddress += BlockSize;
      }
      while (startAddress - this.StartAddress < this.DataBuffer.Count);
      return true;
    }

    private bool WriteMemoryBlock(int BlockStartAddress, int BlockSize, ref int DataStartOffset)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMemoryBlock);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) (BlockStartAddress & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (BlockStartAddress >> 8 & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) BlockSize);
      this.TransmitBuffer.Add(3);
      while (BlockSize-- > 0)
        this.TransmitBuffer.Add(this.DataBuffer.Data[DataStartOffset++]);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteBlock);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
      }
      return false;
    }

    internal bool WriteBitfield(uint AndMask, uint OrMask)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteBitField);
      int num = 4;
      for (uint index = 4278190080; index > 0U && ((int) AndMask & (int) index) == (int) index && (OrMask & index) <= 0U; index >>= 8)
        --num;
      if (num == 0)
        return true;
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) (this.StartAddress & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (this.StartAddress >> 8 & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (num * 2));
      this.TransmitBuffer.Add(13);
      for (byte index = 0; (int) index < num; ++index)
      {
        this.TransmitBuffer.Add((byte) (AndMask >> (int) index * 8 & (uint) byte.MaxValue));
        this.TransmitBuffer.Add((byte) (OrMask >> (int) index * 8 & (uint) byte.MaxValue));
      }
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteBit);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
      }
      return false;
    }
  }
}


--- FunctionFiled.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.FunctionFiled
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

#nullable disable
namespace DeviceCollector
{
  public enum FunctionFiled : byte
  {
    InstantaneousValue,
    MaximumValue,
    MinimumValue,
    ValueDuringErrorState,
  }
}


--- IdentDevice.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.IdentDevice
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class IdentDevice : BusDevice
  {
    internal IdentDevice(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.DeviceType = DeviceTypes.Ident;
    }
  }
}


--- IDeviceCollector.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.IDeviceCollector
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using System;
using System.Collections;
using System.Collections.Generic;
using ZENNER.CommonLibrary;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public interface IDeviceCollector : I_ZR_Component, ICancelable, IReadoutConfig
  {
    IAsyncFunctions AsyncCom { get; }

    string ShowBusWindow(string ComponentList);

    void ShowBusWindow();

    bool SetBaseMode(ZR_ClassLibrary.BusMode NewBusMode);

    ZR_ClassLibrary.BusMode GetBaseMode();

    SortedList<string, string> GetAsyncComSettings();

    void SetAsyncComSettings(SortedList<string, string> settings);

    bool SetDeviceCollectorSettings(
      SortedList<DeviceCollectorSettings, object> settings);

    bool SetDeviceCollectorSettings(SortedList<string, string> settings);

    bool SetDeviceCollectorSettings(string settings);

    SortedList<DeviceCollectorSettings, object> GetDeviceCollectorSettings();

    string GetDeviceCollectorSettingsAsString();

    bool ChangeDeviceCollectorSettings(
      SortedList<DeviceCollectorSettings, object> settings);

    bool GetDeviceCollectorInfo(out object InfoObject);

    bool WriteLastUsedBusInfo(string BusInfoName);

    bool ReadBusInfo(string BusInfoName);

    bool ReadBusInfo(string BusInfoName, bool SetNameToDefault);

    bool WriteBusInfo();

    bool WriteBusInfo(string BusInfoName);

    bool WriteBusInfo(string BusInfoName, bool SetNameToDefault);

    bool StartReceiver();

    bool StopReceiver();

    bool ComOpen();

    bool ComClose();

    bool SetBreak();

    bool ClearBreak();

    void BreakAllFunctions();

    event EventHandler<GMM_EventArgs> OnMessage;

    void SetMessageInfo(string info);

    int SetMaxRepeat(int MaxRepeat);

    bool ReadParameter(out DeviceInfo Info);

    bool ReadParameter(out string ZDF_Data);

    bool GetParameter(out DeviceInfo Info);

    bool GetParameter(out DeviceInfo Info, int DeviceListIndex);

    List<DeviceInfo> GetParameters();

    int GetNumberOfDevices();

    bool GetDeviceConfiguration(
      out SortedList<OverrideID, ConfigurationParameter> ConfigParamList);

    void ClearCounters();

    int GetJobCounter();

    int GetErrorCounter();

    int GetTransmitBlockCounter();

    int GetReceiveBlockCounter();

    void DeleteBusInfo();

    bool IsSelectedDevice(DeviceTypes TestType);

    BusDevice GetSelectedDevice();

    int GetIndexOfSelectedDevice();

    bool AddDevice(DeviceTypes NewType, int PrimaryAddress);

    bool AddDevice(DeviceTypes NewType, int PrimaryAddress, long SerialNumber);

    bool AddDevice(DeviceTypes NewType, int PrimaryAddress, string SerialNumber);

    bool ScanFromAddress(int ScanAddress);

    bool ScanFromSerialNumber(string StartSerialnumber);

    bool SearchSingleDeviceByPrimaryAddress(int Address);

    bool SearchSingleDeviceBySerialNumber(string SerialNumber);

    bool SetSelectedDeviceBySerialNumber(string SerialNumber);

    bool SetSelectedDeviceByPrimaryAddress(int Address);

    bool SetSelectedDeviceByIndex(int index);

    bool SetPrimaryAddress(int Address);

    bool SetBaudrate(int Baudrate);

    bool SetBaudrate(int Baudrate, bool ChangeAsyncComBaudrate);

    bool UseMaxBaudrate();

    bool SerchDeviceAcrossBaudrates();

    bool ResetDevice();

    bool ResetDevice(bool loadBackup);

    bool ResetDevice(int AfterResetBaudrate);

    bool RunBackup();

    bool DeviceProtectionGet();

    bool DeviceProtectionSet();

    bool DeviceProtectionReset(uint meterKey);

    bool DeviceProtectionSetKey(uint meterKey);

    bool SetEmergencyMode();

    bool DisableBusWriteOnDispose { get; set; }

    bool ReadVersion(out ReadVersionData versionData);

    bool ReadVersion(
      out short Manufacturer,
      out byte Medium,
      out byte MBusMeterType,
      out long Version,
      out int MBusSerialNr);

    bool ReadVersion(
      out short Manufacturer,
      out byte Medium,
      out byte MBusMeterType,
      out long Version,
      out int MBusSerialNr,
      out int ConfigAdr,
      out int HardwareMask);

    bool IsDeviceModified();

    bool ReadVersion(
      int[] Bautrates,
      out short Manufacturer,
      out byte Medium,
      out byte MBusMeterType,
      out long Version,
      out int MBusSerialNr);

    bool ReadVersion(
      int[] Bautrates,
      out short Manufacturer,
      out byte Medium,
      out byte MBusMeterType,
      out long Version,
      out int MBusSerialNr,
      out int ConfigAdr,
      out int HardwareMask);

    bool ReadMemory(
      MemoryLocation Location,
      int StartAddress,
      int NumberOfBytes,
      out ByteField MemoryData);

    bool ReadMemory(
      MemoryLocation Location,
      int StartAddress,
      int NumberOfBytes,
      out ByteField MemoryData,
      bool useOnlyLongWakeUpSequence);

    bool ReadMemory(int Location, int StartAddress, int NumberOfBytes, out ByteField MemoryData);

    bool ReadMemory(long FullStartAddress, int NumberOfBytes, out ByteField MemoryData);

    bool WriteMemory(MemoryLocation Location, int StartAddress, ByteField data);

    bool WriteMemory(int Location, int StartAddress, ByteField data);

    bool UpdateMemory(
      MemoryLocation Location,
      int StartAddress,
      ByteField OldData,
      ByteField NewData);

    bool WriteBitfield(int Address, byte AndMask, byte OrMask);

    bool WriteBitfield(int Address, uint AndMask, uint OrMask);

    bool WriteBit(long FullAddress, bool BitData);

    bool WriteNibble(long FullAddress, byte NibbleData);

    bool WriteByte(long FullAddress, byte ByteData);

    bool EraseFlash(int StartAddress, int NumberOfBytes);

    bool DeleteMeterKey(int MeterKey);

    bool SetNewPin(int NewPin);

    bool TransmitRadioFrame();

    bool DigitalInputsAndOutputs(
      uint NewOutputMask,
      uint NewOutputState,
      ref uint OldOutputState,
      ref uint OldInputState);

    byte[] RunIoTest(IoTestFunctions theFunction);

    bool SetOutput(int OutputNumber, bool State);

    bool GetInput(int InputNumber, out bool InputState);

    bool StartMeterMonitor(int SampleTime);

    bool GetMeterMonitorData(out ByteField MonitorData);

    bool SetOptoTimeoutSeconds(int Seconds);

    bool FlyingTestActivate();

    bool FlyingTestStart();

    bool FlyingTestStop();

    bool FlyingTestReadVolume(out float volume, out MBusDeviceState state);

    bool AdcTestActivate();

    bool CapacityOfTestActivate();

    bool AdcTestCycleWithSimulatedVolume(float simulationVolume);

    bool RadioTestActivate(RadioTestMode testMode);

    bool Start512HzRtcCalibration();

    bool TestDone(long dispValueId);

    bool ReadWaveFlowParameterGroup(
      ParameterGroups TheParameterGroup,
      out SortedList ParameterList,
      out string Fehlerstring);

    bool WriteWaveFlowParameterGroup(
      ParameterGroups TheParameterGroup,
      SortedList ParameterList,
      out string Fehlerstring);

    bool ResetWaveFlowParameterGroup(ParameterGroups TheParameterGroup, out string Fehlerstring);

    bool ReadWaveFlowAnswer(string RequestString, out string XMLString, out string Fehlerstring);

    bool ReadWavePortFirmware(out string TheFirmwareString, out string Fehlerstring);

    string GetWafeFlowSerialNumber();

    bool SetWafeFlowRepeaters(string[] SerialNumbers, out string Fehlerstring);

    bool ActivateWafeFlowRepeaters(out string Fehlerstring);

    bool DeactivateWafeFlowRepeaters(out string Fehlerstring);

    bool GetWafeFlowRepeaters(out string[] Repeaters, out string Fehlerstring);

    bool GetWafeFlowRepeatersAreActivated(out bool Activated, out string Fehlerstring);

    void StartTestloopReadEEProm();

    void StopTestLoop();

    bool SystemInit();

    bool StartHKVEReceptionWindow();

    bool RegisterHKVE(List<string> list);

    bool DeregisterHKVE(List<string> list);

    List<string> GetRegisteredHKVE();

    List<string> GetUnregisteredHKVE();

    bool SetMinomatV2Configuration(MinomatV2.Configuration configuration);

    MinomatV2.Configuration GetMinomatV2Configuration();

    MinomatV2.SystemStatus GetMinomatV2SystemStatus();

    int MaxRequestRepeat { get; set; }

    bool PingSelectedDevice();

    RadioReader RadioReader { get; }

    EDC EDCHandler { get; }

    PDC PDCHandler { get; }

    SmokeDetector SmokeDetectorHandler { get; }

    bool ReadDeviceList();

    bool DeleteSelectedDevice();

    bool SetTime(DateTime dateTime);

    void RaiseProgressEvent(int progressPercentage);

    void RaiseProgressEvent(int progressPercentage, string status);

    byte[] GetTransmitBuffer();

    byte[] GetReceiveBuffer();

    UniqueIdentification GetUniqueIdentificationOfSelectedDevice();

    Dictionary<string, string> LoadAvailableCOMservers();

    event EventHandler<BusDevice> OnDeviceListChanged;

    bool SendFirstApplicationReset { get; set; }

    bool SendFirstSND_NKE { get; set; }

    bool UseREQ_UD2_5B { get; set; }

    bool IsMultiTelegrammEnabled { get; set; }

    PointToPointDevices? SelectedDeviceMBusType { get; set; }

    string MinomatV4_SourceAddress { get; set; }

    event EventHandlerEx<int> OnProgress;

    event EventHandlerEx<string> OnProgressMessage;

    void Dispose();
  }
}


--- ImpulseInputCounters.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.ImpulseInputCounters
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

#nullable disable
namespace DeviceCollector
{
  public class ImpulseInputCounters
  {
    public string ImputState;
    public short VolumePulseCounter;
    public ushort HardwareCounter;
    public ushort Input0Counter;
    public ushort Input1Counter;
    public ushort Input2Counter;
  }
}


--- IO_Test.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.IO_Test
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using CorporateDesign;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace DeviceCollector
{
  public class IO_Test : Form
  {
    private DeviceCollectorFunctions MyBus;
    private bool IO_Run = false;
    private Label label1;
    private Label label2;
    private Label label3;
    private Label label4;
    private Label label5;
    private Label label6;
    private CheckBox checkBoxOutputState1;
    private CheckBox checkBoxOutputState2;
    private CheckBox checkBoxInputState1;
    private CheckBox checkBoxInputState2;
    private CheckBox checkBoxOutputSet1;
    private CheckBox checkBoxOutputSet2;
    private CheckBox checkBoxOutputMask1;
    private CheckBox checkBoxOutputMask2;
    private Label label7;
    private Label label8;
    private Label labelAccessCounter;
    private Label labelErrorCounter;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Button buttonSingleAccess;
    private Button buttonStartCycle;
    private Button buttonStopCycle;
    private Button buttonExit;
    private Label label9;
    private CheckBox checkBoxOutputMask3;
    private CheckBox checkBoxOutputSet3;
    private CheckBox checkBoxInputState3;
    private CheckBox checkBoxOutputState3;
    private System.ComponentModel.Container components = (System.ComponentModel.Container) null;

    public IO_Test(DeviceCollectorFunctions MyBusIn)
    {
      this.InitializeComponent();
      this.MyBus = MyBusIn;
      if (this.MyBus.MyDeviceList.SelectedDevice is Serie2MBus)
        return;
      int num = (int) MessageBox.Show("The selected device has no I/O functions.");
      this.Close();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (IO_Test));
      this.checkBoxOutputState1 = new CheckBox();
      this.checkBoxOutputState2 = new CheckBox();
      this.label1 = new Label();
      this.label2 = new Label();
      this.checkBoxInputState1 = new CheckBox();
      this.checkBoxInputState2 = new CheckBox();
      this.checkBoxOutputSet1 = new CheckBox();
      this.checkBoxOutputSet2 = new CheckBox();
      this.checkBoxOutputMask1 = new CheckBox();
      this.label3 = new Label();
      this.checkBoxOutputMask2 = new CheckBox();
      this.label4 = new Label();
      this.label5 = new Label();
      this.label6 = new Label();
      this.label7 = new Label();
      this.label8 = new Label();
      this.labelAccessCounter = new Label();
      this.labelErrorCounter = new Label();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.buttonSingleAccess = new Button();
      this.buttonStartCycle = new Button();
      this.buttonStopCycle = new Button();
      this.buttonExit = new Button();
      this.label9 = new Label();
      this.checkBoxOutputMask3 = new CheckBox();
      this.checkBoxOutputSet3 = new CheckBox();
      this.checkBoxInputState3 = new CheckBox();
      this.checkBoxOutputState3 = new CheckBox();
      this.SuspendLayout();
      this.checkBoxOutputState1.Enabled = false;
      this.checkBoxOutputState1.Location = new Point(140, 70);
      this.checkBoxOutputState1.Name = "checkBoxOutputState1";
      this.checkBoxOutputState1.Size = new Size(20, 20);
      this.checkBoxOutputState1.TabIndex = 0;
      this.checkBoxOutputState2.Enabled = false;
      this.checkBoxOutputState2.Location = new Point(140, 90);
      this.checkBoxOutputState2.Name = "checkBoxOutputState2";
      this.checkBoxOutputState2.Size = new Size(20, 20);
      this.checkBoxOutputState2.TabIndex = 0;
      this.label1.Location = new Point(110, 50);
      this.label1.Name = "label1";
      this.label1.Size = new Size(80, 20);
      this.label1.TabIndex = 1;
      this.label1.Text = "OutputState";
      this.label1.TextAlign = ContentAlignment.TopCenter;
      this.label2.Location = new Point(190, 50);
      this.label2.Name = "label2";
      this.label2.Size = new Size(80, 20);
      this.label2.TabIndex = 1;
      this.label2.Text = "InputState";
      this.label2.TextAlign = ContentAlignment.TopCenter;
      this.checkBoxInputState1.Enabled = false;
      this.checkBoxInputState1.Location = new Point(220, 70);
      this.checkBoxInputState1.Name = "checkBoxInputState1";
      this.checkBoxInputState1.Size = new Size(20, 20);
      this.checkBoxInputState1.TabIndex = 0;
      this.checkBoxInputState2.Enabled = false;
      this.checkBoxInputState2.Location = new Point(220, 90);
      this.checkBoxInputState2.Name = "checkBoxInputState2";
      this.checkBoxInputState2.Size = new Size(20, 20);
      this.checkBoxInputState2.TabIndex = 0;
      this.checkBoxOutputSet1.Location = new Point(380, 70);
      this.checkBoxOutputSet1.Name = "checkBoxOutputSet1";
      this.checkBoxOutputSet1.Size = new Size(20, 20);
      this.checkBoxOutputSet1.TabIndex = 0;
      this.checkBoxOutputSet2.Location = new Point(380, 90);
      this.checkBoxOutputSet2.Name = "checkBoxOutputSet2";
      this.checkBoxOutputSet2.Size = new Size(20, 20);
      this.checkBoxOutputSet2.TabIndex = 0;
      this.checkBoxOutputMask1.Location = new Point(300, 70);
      this.checkBoxOutputMask1.Name = "checkBoxOutputMask1";
      this.checkBoxOutputMask1.Size = new Size(20, 20);
      this.checkBoxOutputMask1.TabIndex = 0;
      this.label3.Location = new Point(350, 50);
      this.label3.Name = "label3";
      this.label3.Size = new Size(80, 20);
      this.label3.TabIndex = 1;
      this.label3.Text = "OutputSet";
      this.label3.TextAlign = ContentAlignment.TopCenter;
      this.checkBoxOutputMask2.Location = new Point(300, 90);
      this.checkBoxOutputMask2.Name = "checkBoxOutputMask2";
      this.checkBoxOutputMask2.Size = new Size(20, 20);
      this.checkBoxOutputMask2.TabIndex = 0;
      this.label4.Location = new Point(270, 50);
      this.label4.Name = "label4";
      this.label4.Size = new Size(80, 20);
      this.label4.TabIndex = 1;
      this.label4.Text = "OutputMask";
      this.label4.TextAlign = ContentAlignment.TopCenter;
      this.label5.Location = new Point(60, 70);
      this.label5.Name = "label5";
      this.label5.Size = new Size(40, 20);
      this.label5.TabIndex = 1;
      this.label5.Text = "I/O 1:";
      this.label5.TextAlign = ContentAlignment.MiddleRight;
      this.label6.Location = new Point(60, 90);
      this.label6.Name = "label6";
      this.label6.Size = new Size(40, 20);
      this.label6.TabIndex = 1;
      this.label6.Text = "I/O 2:";
      this.label6.TextAlign = ContentAlignment.MiddleRight;
      this.label7.Location = new Point(60, 170);
      this.label7.Name = "label7";
      this.label7.Size = new Size(110, 20);
      this.label7.TabIndex = 1;
      this.label7.Text = "Access counter:";
      this.label7.TextAlign = ContentAlignment.MiddleRight;
      this.label8.Location = new Point(60, 200);
      this.label8.Name = "label8";
      this.label8.Size = new Size(110, 20);
      this.label8.TabIndex = 1;
      this.label8.Text = "Error counter:";
      this.label8.TextAlign = ContentAlignment.MiddleRight;
      this.labelAccessCounter.BorderStyle = BorderStyle.Fixed3D;
      this.labelAccessCounter.Location = new Point(180, 170);
      this.labelAccessCounter.Name = "labelAccessCounter";
      this.labelAccessCounter.Size = new Size(90, 20);
      this.labelAccessCounter.TabIndex = 2;
      this.labelAccessCounter.Text = "0";
      this.labelAccessCounter.TextAlign = ContentAlignment.MiddleLeft;
      this.labelErrorCounter.BorderStyle = BorderStyle.Fixed3D;
      this.labelErrorCounter.Location = new Point(180, 200);
      this.labelErrorCounter.Name = "labelErrorCounter";
      this.labelErrorCounter.Size = new Size(90, 20);
      this.labelErrorCounter.TabIndex = 2;
      this.labelErrorCounter.Text = "0";
      this.labelErrorCounter.TextAlign = ContentAlignment.MiddleLeft;
      this.zennerCoroprateDesign1.Dock = DockStyle.Fill;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(592, 304);
      this.zennerCoroprateDesign1.TabIndex = 3;
      this.buttonSingleAccess.Location = new Point(460, 150);
      this.buttonSingleAccess.Name = "buttonSingleAccess";
      this.buttonSingleAccess.Size = new Size(110, 30);
      this.buttonSingleAccess.TabIndex = 4;
      this.buttonSingleAccess.Text = "Single access";
      this.buttonSingleAccess.Click += new EventHandler(this.buttonSingleAccess_Click);
      this.buttonStartCycle.Location = new Point(460, 60);
      this.buttonStartCycle.Name = "buttonStartCycle";
      this.buttonStartCycle.Size = new Size(110, 30);
      this.buttonStartCycle.TabIndex = 4;
      this.buttonStartCycle.Text = "Start cycle";
      this.buttonStartCycle.Click += new EventHandler(this.buttonStartCycle_Click);
      this.buttonStopCycle.Location = new Point(460, 100);
      this.buttonStopCycle.Name = "buttonStopCycle";
      this.buttonStopCycle.Size = new Size(110, 30);
      this.buttonStopCycle.TabIndex = 4;
      this.buttonStopCycle.Text = "Stop cycle";
      this.buttonStopCycle.Click += new EventHandler(this.buttonStopCycle_Click);
      this.buttonExit.Location = new Point(460, 190);
      this.buttonExit.Name = "buttonExit";
      this.buttonExit.Size = new Size(110, 30);
      this.buttonExit.TabIndex = 4;
      this.buttonExit.Text = "Exit";
      this.buttonExit.Click += new EventHandler(this.buttonExit_Click);
      this.label9.Location = new Point(60, 110);
      this.label9.Name = "label9";
      this.label9.Size = new Size(40, 20);
      this.label9.TabIndex = 1;
      this.label9.Text = "I/O 3:";
      this.label9.TextAlign = ContentAlignment.MiddleRight;
      this.checkBoxOutputMask3.Location = new Point(300, 110);
      this.checkBoxOutputMask3.Name = "checkBoxOutputMask3";
      this.checkBoxOutputMask3.Size = new Size(20, 20);
      this.checkBoxOutputMask3.TabIndex = 0;
      this.checkBoxOutputSet3.Location = new Point(380, 110);
      this.checkBoxOutputSet3.Name = "checkBoxOutputSet3";
      this.checkBoxOutputSet3.Size = new Size(20, 20);
      this.checkBoxOutputSet3.TabIndex = 0;
      this.checkBoxInputState3.Enabled = false;
      this.checkBoxInputState3.Location = new Point(220, 110);
      this.checkBoxInputState3.Name = "checkBoxInputState3";
      this.checkBoxInputState3.Size = new Size(20, 20);
      this.checkBoxInputState3.TabIndex = 0;
      this.checkBoxOutputState3.Enabled = false;
      this.checkBoxOutputState3.Location = new Point(140, 110);
      this.checkBoxOutputState3.Name = "checkBoxOutputState3";
      this.checkBoxOutputState3.Size = new Size(20, 20);
      this.checkBoxOutputState3.TabIndex = 0;
      this.AutoScaleBaseSize = new Size(5, 13);
      this.ClientSize = new Size(592, 304);
      this.Controls.Add((Control) this.buttonExit);
      this.Controls.Add((Control) this.buttonStopCycle);
      this.Controls.Add((Control) this.buttonStartCycle);
      this.Controls.Add((Control) this.buttonSingleAccess);
      this.Controls.Add((Control) this.labelAccessCounter);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.checkBoxOutputState1);
      this.Controls.Add((Control) this.checkBoxOutputState3);
      this.Controls.Add((Control) this.checkBoxOutputState2);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.checkBoxInputState1);
      this.Controls.Add((Control) this.checkBoxInputState3);
      this.Controls.Add((Control) this.checkBoxInputState2);
      this.Controls.Add((Control) this.checkBoxOutputSet1);
      this.Controls.Add((Control) this.checkBoxOutputSet3);
      this.Controls.Add((Control) this.checkBoxOutputSet2);
      this.Controls.Add((Control) this.checkBoxOutputMask1);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.checkBoxOutputMask3);
      this.Controls.Add((Control) this.checkBoxOutputMask2);
      this.Controls.Add((Control) this.label4);
      this.Controls.Add((Control) this.label5);
      this.Controls.Add((Control) this.label9);
      this.Controls.Add((Control) this.label6);
      this.Controls.Add((Control) this.label7);
      this.Controls.Add((Control) this.label8);
      this.Controls.Add((Control) this.labelErrorCounter);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (IO_Test);
      this.Text = nameof (IO_Test);
      this.ResumeLayout(false);
    }

    private void IO_Cycle()
    {
      this.IO_Run = true;
      this.Cursor = Cursors.WaitCursor;
      while (this.IO_Run)
        this.WorkIO();
      this.Cursor = Cursors.Default;
    }

    private bool WorkIO()
    {
      uint NewOutputMask = 0;
      uint NewOutputState = 0;
      uint OldOutputState = 0;
      uint OldInputState = 0;
      if (this.checkBoxOutputMask1.Checked)
        NewOutputMask |= 1U;
      if (this.checkBoxOutputMask2.Checked)
        NewOutputMask |= 2U;
      if (this.checkBoxOutputMask3.Checked)
        NewOutputMask |= 4U;
      if (this.checkBoxOutputSet1.Checked)
        NewOutputState |= 1U;
      if (this.checkBoxOutputSet2.Checked)
        NewOutputState |= 2U;
      if (this.checkBoxOutputSet3.Checked)
        NewOutputState |= 4U;
      if (this.MyBus.DigitalInputsAndOutputs(NewOutputMask, NewOutputState, ref OldOutputState, ref OldInputState))
      {
        this.checkBoxOutputState1.Checked = (OldOutputState & 1U) > 0U;
        this.checkBoxOutputState2.Checked = (OldOutputState & 2U) > 0U;
        this.checkBoxOutputState3.Checked = (OldOutputState & 4U) > 0U;
        this.checkBoxInputState1.Checked = (OldInputState & 1U) > 0U;
        this.checkBoxInputState2.Checked = (OldInputState & 2U) > 0U;
        this.checkBoxInputState3.Checked = (OldInputState & 4U) > 0U;
        this.labelAccessCounter.Text = (int.Parse(this.labelAccessCounter.Text) + 1).ToString();
        return false;
      }
      this.labelAccessCounter.Text = (int.Parse(this.labelAccessCounter.Text) + 1).ToString();
      this.labelErrorCounter.Text = (int.Parse(this.labelErrorCounter.Text) + 1).ToString();
      return false;
    }

    private void buttonSingleAccess_Click(object sender, EventArgs e)
    {
      this.MyBus.BreakRequest = false;
      this.WorkIO();
      this.WorkIO();
    }

    private void buttonStartCycle_Click(object sender, EventArgs e) => this.IO_Cycle();

    private void buttonStopCycle_Click(object sender, EventArgs e) => this.IO_Run = false;

    private void buttonExit_Click(object sender, EventArgs e) => this.Hide();
  }
}


--- IoTestFunctions.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.IoTestFunctions
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

#nullable disable
namespace DeviceCollector
{
  public enum IoTestFunctions
  {
    IoTest_Run,
    IoTest_ActivateIoTestMode,
    IoTest_DeactivateIoTestMode,
  }
}


--- ListElement.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.ListElement
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  internal class ListElement
  {
    internal string Name;
    internal DeviceTypes Type;

    public ListElement(string ElementName, DeviceTypes ElementType)
    {
      this.Name = ElementName;
      this.Type = ElementType;
    }
  }
}


--- ListSelectWindow.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.ListSelectWindow
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using CorporateDesign;
using HandlerLib;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class ListSelectWindow : Form
  {
    private DeviceCollectorFunctions myFunctions;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign2;
    private GroupBox groupBoxSelectList;
    private Button buttonMBusListSet;
    private TextBox textBoxMBusListNumber;
    private Label label1;
    private GroupBox groupBox1;
    private Button buttonRead;
    private Label labelMBusMaxList;
    private Label labelRadioMaxList;
    private TextBox textBoxRadioListNumber;
    private Button buttonRadioListSet;
    private Label label2;
    private Label labelMBusSublists;
    private Label label5;

    public ListSelectWindow(DeviceCollectorFunctions myFunctions)
    {
      this.myFunctions = myFunctions;
      this.InitializeComponent();
    }

    private void buttonMBusListSet_Click(object sender, EventArgs e)
    {
      ZR_ClassLibMessages.ClearErrors();
      if (this.myFunctions.SelectParameterList(int.Parse(this.textBoxMBusListNumber.Text), 0))
      {
        int num = (int) GMM_MessageBox.ShowMessage("Set device parameter list", "Set parameter list done");
        this.Close();
      }
      else if (ZR_ClassLibMessages.GetLastError() == ZR_ClassLibMessages.LastErrors.NAK_Received)
      {
        int num = (int) GMM_MessageBox.ShowMessage("Set device parameter list", "Parameter list not available!", true);
        ZR_ClassLibMessages.ClearErrors();
      }
      else
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("Set device parameter list", "Set parameter list error!", true);
      }
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void buttonRadioListSet_Click(object sender, EventArgs e)
    {
      ZR_ClassLibMessages.ClearErrors();
      if (this.myFunctions.SelectParameterList(int.Parse(this.textBoxRadioListNumber.Text), 1))
      {
        int num = (int) GMM_MessageBox.ShowMessage("Set device parameter list", "Set parameter list done");
        this.Close();
      }
      else if (ZR_ClassLibMessages.GetLastError() == ZR_ClassLibMessages.LastErrors.NAK_Received)
      {
        int num = (int) GMM_MessageBox.ShowMessage("Set device parameter list", "Parameter list not available!", true);
        ZR_ClassLibMessages.ClearErrors();
      }
      else
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("Set device parameter list", "Set parameter list error!", true);
      }
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void buttonRead_Click(object sender, EventArgs e)
    {
      ParameterListInfo parameterListInfo = this.myFunctions.ReadParameterList();
      if (parameterListInfo == null)
        return;
      this.labelMBusMaxList.Text = string.Format("[0...{0}]", (object) (parameterListInfo.S3_Device.MaxList - 1));
      this.labelMBusSublists.Text = parameterListInfo.S3_Device.Sublists.ToString();
      this.textBoxMBusListNumber.Text = parameterListInfo.S3_Device.SelectedList.ToString();
      if (parameterListInfo.Radio != null)
      {
        this.buttonRadioListSet.Enabled = true;
        this.textBoxRadioListNumber.Enabled = true;
        this.labelRadioMaxList.Text = string.Format("[0...{0}]", (object) (parameterListInfo.Radio.MaxList - 1));
        this.textBoxRadioListNumber.Text = parameterListInfo.Radio.SelectedList.ToString();
      }
      else
      {
        this.buttonRadioListSet.Enabled = false;
        this.textBoxRadioListNumber.Enabled = false;
        this.labelRadioMaxList.Text = "[...]";
        this.textBoxRadioListNumber.Text = "";
      }
    }

    private void textBoxMBusListNumber_TextChanged(object sender, EventArgs e)
    {
      if (int.Parse(this.textBoxMBusListNumber.Text) <= (int) byte.MaxValue)
        return;
      this.textBoxMBusListNumber.Text = "0";
    }

    private void textBoxListNumber_KeyPress(object sender, KeyPressEventArgs e)
    {
      if (char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar))
        return;
      e.Handled = true;
    }

    private void buttonWrite_Click(object sender, EventArgs e)
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.groupBoxSelectList = new GroupBox();
      this.labelMBusSublists = new Label();
      this.label5 = new Label();
      this.labelMBusMaxList = new Label();
      this.buttonMBusListSet = new Button();
      this.textBoxMBusListNumber = new TextBox();
      this.label1 = new Label();
      this.groupBox1 = new GroupBox();
      this.labelRadioMaxList = new Label();
      this.textBoxRadioListNumber = new TextBox();
      this.buttonRadioListSet = new Button();
      this.label2 = new Label();
      this.buttonRead = new Button();
      this.zennerCoroprateDesign2 = new ZennerCoroprateDesign();
      this.groupBoxSelectList.SuspendLayout();
      this.groupBox1.SuspendLayout();
      this.SuspendLayout();
      this.groupBoxSelectList.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.groupBoxSelectList.Controls.Add((Control) this.labelMBusSublists);
      this.groupBoxSelectList.Controls.Add((Control) this.label5);
      this.groupBoxSelectList.Controls.Add((Control) this.labelMBusMaxList);
      this.groupBoxSelectList.Controls.Add((Control) this.buttonMBusListSet);
      this.groupBoxSelectList.Controls.Add((Control) this.textBoxMBusListNumber);
      this.groupBoxSelectList.Controls.Add((Control) this.label1);
      this.groupBoxSelectList.Location = new Point(12, 46);
      this.groupBoxSelectList.Name = "groupBoxSelectList";
      this.groupBoxSelectList.Size = new Size(323, 74);
      this.groupBoxSelectList.TabIndex = 20;
      this.groupBoxSelectList.TabStop = false;
      this.groupBoxSelectList.Text = "MBus parameter list";
      this.labelMBusSublists.AutoSize = true;
      this.labelMBusSublists.Location = new Point(140, 50);
      this.labelMBusSublists.Name = "labelMBusSublists";
      this.labelMBusSublists.Size = new Size(13, 13);
      this.labelMBusSublists.TabIndex = 6;
      this.labelMBusSublists.Text = "0";
      this.label5.AutoSize = true;
      this.label5.Location = new Point(88, 50);
      this.label5.Name = "label5";
      this.label5.Size = new Size(46, 13);
      this.label5.TabIndex = 5;
      this.label5.Text = "Sublists:";
      this.labelMBusMaxList.AutoSize = true;
      this.labelMBusMaxList.Location = new Point(140, 24);
      this.labelMBusMaxList.Name = "labelMBusMaxList";
      this.labelMBusMaxList.Size = new Size(34, 13);
      this.labelMBusMaxList.TabIndex = 4;
      this.labelMBusMaxList.Text = "[0...?]";
      this.buttonMBusListSet.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonMBusListSet.Location = new Point(224, 17);
      this.buttonMBusListSet.Name = "buttonMBusListSet";
      this.buttonMBusListSet.Size = new Size(83, 31);
      this.buttonMBusListSet.TabIndex = 3;
      this.buttonMBusListSet.Text = "Set";
      this.buttonMBusListSet.UseVisualStyleBackColor = true;
      this.buttonMBusListSet.Click += new System.EventHandler(this.buttonMBusListSet_Click);
      this.textBoxMBusListNumber.Location = new Point(83, 21);
      this.textBoxMBusListNumber.Name = "textBoxMBusListNumber";
      this.textBoxMBusListNumber.Size = new Size(51, 20);
      this.textBoxMBusListNumber.TabIndex = 2;
      this.textBoxMBusListNumber.Text = "0";
      this.textBoxMBusListNumber.TextChanged += new System.EventHandler(this.textBoxMBusListNumber_TextChanged);
      this.textBoxMBusListNumber.KeyPress += new KeyPressEventHandler(this.textBoxListNumber_KeyPress);
      this.label1.Location = new Point(9, 20);
      this.label1.Name = "label1";
      this.label1.Size = new Size(68, 20);
      this.label1.TabIndex = 0;
      this.label1.Text = "List number";
      this.label1.TextAlign = ContentAlignment.MiddleRight;
      this.groupBox1.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.groupBox1.Controls.Add((Control) this.labelRadioMaxList);
      this.groupBox1.Controls.Add((Control) this.textBoxRadioListNumber);
      this.groupBox1.Controls.Add((Control) this.buttonRadioListSet);
      this.groupBox1.Controls.Add((Control) this.label2);
      this.groupBox1.Location = new Point(12, 126);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.Size = new Size(323, 57);
      this.groupBox1.TabIndex = 21;
      this.groupBox1.TabStop = false;
      this.groupBox1.Text = "Radio parameter list";
      this.labelRadioMaxList.AutoSize = true;
      this.labelRadioMaxList.Location = new Point(139, 25);
      this.labelRadioMaxList.Name = "labelRadioMaxList";
      this.labelRadioMaxList.Size = new Size(34, 13);
      this.labelRadioMaxList.TabIndex = 5;
      this.labelRadioMaxList.Text = "[0...?]";
      this.textBoxRadioListNumber.Location = new Point(82, 22);
      this.textBoxRadioListNumber.Name = "textBoxRadioListNumber";
      this.textBoxRadioListNumber.Size = new Size(51, 20);
      this.textBoxRadioListNumber.TabIndex = 4;
      this.textBoxRadioListNumber.Text = "0";
      this.buttonRadioListSet.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonRadioListSet.Location = new Point(224, 16);
      this.buttonRadioListSet.Name = "buttonRadioListSet";
      this.buttonRadioListSet.Size = new Size(83, 31);
      this.buttonRadioListSet.TabIndex = 4;
      this.buttonRadioListSet.Text = "Set";
      this.buttonRadioListSet.UseVisualStyleBackColor = true;
      this.buttonRadioListSet.Click += new System.EventHandler(this.buttonRadioListSet_Click);
      this.label2.Location = new Point(8, 21);
      this.label2.Name = "label2";
      this.label2.Size = new Size(68, 20);
      this.label2.TabIndex = 4;
      this.label2.Text = "List number";
      this.label2.TextAlign = ContentAlignment.MiddleRight;
      this.buttonRead.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonRead.Location = new Point(236, 192);
      this.buttonRead.Name = "buttonRead";
      this.buttonRead.Size = new Size(83, 31);
      this.buttonRead.TabIndex = 3;
      this.buttonRead.Text = "Read settings";
      this.buttonRead.UseVisualStyleBackColor = true;
      this.buttonRead.Click += new System.EventHandler(this.buttonRead_Click);
      this.zennerCoroprateDesign2.Dock = DockStyle.Top;
      this.zennerCoroprateDesign2.Location = new Point(0, 0);
      this.zennerCoroprateDesign2.Margin = new Padding(2);
      this.zennerCoroprateDesign2.Name = "zennerCoroprateDesign2";
      this.zennerCoroprateDesign2.Size = new Size(355, 41);
      this.zennerCoroprateDesign2.TabIndex = 19;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(355, 235);
      this.Controls.Add((Control) this.groupBox1);
      this.Controls.Add((Control) this.buttonRead);
      this.Controls.Add((Control) this.groupBoxSelectList);
      this.Controls.Add((Control) this.zennerCoroprateDesign2);
      this.Name = nameof (ListSelectWindow);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = nameof (ListSelectWindow);
      this.groupBoxSelectList.ResumeLayout(false);
      this.groupBoxSelectList.PerformLayout();
      this.groupBox1.ResumeLayout(false);
      this.groupBox1.PerformLayout();
      this.ResumeLayout(false);
    }
  }
}


--- MBusConverterDiagnostic.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MBusConverterDiagnostic
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using CorporateDesign;
using NLog;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MBusConverterDiagnostic : Form
  {
    protected static Logger MBusConverterLogger = LogManager.GetLogger("MBusConverterCommands");
    private MBusDevice MBusConverterDevice;
    private MBusDevice SelectedDevice;
    private DeviceCollectorFunctions MyFunctions;
    private double[] DiagnositcValues = new double[512];
    private int[] DiagnositcValuesInt = new int[512];
    private int DiagnositcValuesOffset;
    private MBusConverterDiagnostic.ConverterCommands typeOfData;
    private int Grundpegel;
    private int Triggergrenze;
    private List<MBusConverterDiagnostic.mA_TableEntry> mA_Table;
    private double scaleFactor;
    private bool use_mA_Table;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private TextBox textBoxMBusConverterData;
    private Button buttonIdentifyReceiveCurrent;
    private Button buttonIdentifyReceiveCurrentFilterd;
    private Button buttonIdentifyTransmitCurrent;
    private Button buttonIdentifyTransmitVoltage;
    private Button buttonReadConverterData;
    private Button buttonIdentifyStandbyCurrent;
    private Button buttonIdentifyPowerOnCurrent;
    private Button buttonReadLastData;
    private Button buttonReadErrorLogger;
    private Button buttonIdentifyStandbyCurrentSpectrum;
    private Chart chart1;

    public MBusConverterDiagnostic(DeviceCollectorFunctions MyFunctions)
    {
      this.InitializeComponent();
      this.MyFunctions = MyFunctions;
      this.mA_Table = new List<MBusConverterDiagnostic.mA_TableEntry>();
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(34, 0.0353));
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(44, 0.0545));
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(51, 0.07));
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(61, 0.08));
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(76, 0.088));
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(95, 0.097));
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(124, 0.106));
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(543, 0.129));
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(1256, 0.133));
      this.mA_Table.Add(new MBusConverterDiagnostic.mA_TableEntry(9999999, 0.133));
      this.textBoxMBusConverterData.Clear();
      for (int index = 0; index < this.MyFunctions.MyDeviceList.bus.Count; ++index)
      {
        if (this.MyFunctions.MyDeviceList.bus[index] is MBusDevice)
        {
          MBusDevice bu = (MBusDevice) this.MyFunctions.MyDeviceList.bus[index];
          if (bu.PrimaryAddressKnown && bu.PrimaryDeviceAddress == (byte) 251)
          {
            this.MBusConverterDevice = bu;
            break;
          }
        }
      }
      for (int xValue = 0; xValue < this.DiagnositcValues.Length; ++xValue)
        this.chart1.Series[0].Points.AddXY((double) xValue, this.DiagnositcValues[xValue]);
    }

    private void MBusConverterDiagnostic_Activated(object sender, EventArgs e)
    {
      this.textBoxMBusConverterData.Clear();
      if (this.MBusConverterDevice == null)
      {
        this.textBoxMBusConverterData.AppendText("No mbus converter available");
        this.buttonReadConverterData.Enabled = false;
        this.buttonIdentifyReceiveCurrent.Enabled = false;
        this.buttonIdentifyReceiveCurrentFilterd.Enabled = false;
        this.buttonIdentifyTransmitCurrent.Enabled = false;
        this.buttonIdentifyTransmitVoltage.Enabled = false;
        this.buttonIdentifyStandbyCurrent.Enabled = false;
        this.buttonIdentifyPowerOnCurrent.Enabled = false;
        this.buttonIdentifyStandbyCurrentSpectrum.Enabled = false;
        this.buttonReadErrorLogger.Enabled = false;
        this.buttonReadLastData.Enabled = false;
      }
      else
      {
        this.buttonReadConverterData.Enabled = true;
        this.buttonIdentifyTransmitCurrent.Enabled = true;
        this.buttonIdentifyTransmitVoltage.Enabled = true;
        this.buttonIdentifyStandbyCurrent.Enabled = true;
        this.buttonIdentifyPowerOnCurrent.Enabled = true;
        this.buttonIdentifyStandbyCurrentSpectrum.Enabled = true;
        this.buttonReadErrorLogger.Enabled = true;
        this.buttonReadLastData.Enabled = true;
        if (this.MyFunctions.MyDeviceList.SelectedDevice == null || !(this.MyFunctions.MyDeviceList.SelectedDevice is MBusDevice) || this.MyFunctions.MyDeviceList.SelectedDevice == this.MBusConverterDevice)
        {
          this.textBoxMBusConverterData.AppendText("Test device not selected");
          this.buttonIdentifyReceiveCurrent.Enabled = false;
          this.buttonIdentifyReceiveCurrentFilterd.Enabled = false;
        }
        else
        {
          this.SelectedDevice = (MBusDevice) this.MyFunctions.MyDeviceList.SelectedDevice;
          this.buttonIdentifyReceiveCurrent.Enabled = true;
          this.buttonIdentifyReceiveCurrentFilterd.Enabled = true;
        }
      }
    }

    private void buttonReadConverterData_Click(object sender, EventArgs e)
    {
      this.textBoxMBusConverterData.Clear();
      this.chart1.Series[0].Points.Clear();
      ZR_ClassLibMessages.ClearErrors();
      this.ReadConverterMBusData();
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void buttonIdentifyReceiveCurrent_Click(object sender, EventArgs e)
    {
      this.TestFunction(MBusConverterDiagnostic.ConverterCommands.SetReceiveCurrent);
    }

    private void buttonIdentifyReceiveCurrentFilterd_Click(object sender, EventArgs e)
    {
      this.TestFunction(MBusConverterDiagnostic.ConverterCommands.SetReceiveCurrentFilterd);
    }

    private void buttonIdentifyTransmitCurrent_Click(object sender, EventArgs e)
    {
      this.TestFunction(MBusConverterDiagnostic.ConverterCommands.SetReceiveCurrentOnTransmit);
    }

    private void buttonIdentifyTransmitVoltage_Click(object sender, EventArgs e)
    {
      this.TestFunction(MBusConverterDiagnostic.ConverterCommands.SetTransmitVoltage);
    }

    private void buttonIdentifyStandbyCurrent_Click(object sender, EventArgs e)
    {
      this.textBoxMBusConverterData.Clear();
      ZR_ClassLibMessages.ClearErrors();
      if (this.ActivateDiagnostic(MBusConverterDiagnostic.ConverterCommands.SetStandbyCurrent))
        this.ReadDiagnostic();
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void buttonIdentifyPowerOnCurrent_Click(object sender, EventArgs e)
    {
      this.textBoxMBusConverterData.Clear();
      ZR_ClassLibMessages.ClearErrors();
      if (this.ActivateDiagnostic(MBusConverterDiagnostic.ConverterCommands.SetPowerOnCurrent))
        this.ReadDiagnostic();
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void buttonIdentifyStandbyCurrentSpectrum_Click(object sender, EventArgs e)
    {
      this.textBoxMBusConverterData.Clear();
      ZR_ClassLibMessages.ClearErrors();
      if (this.ActivateDiagnostic(MBusConverterDiagnostic.ConverterCommands.SetStandbyCurrentSpectrum))
        this.ReadDiagnostic();
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void buttonReadErrorLogger_Click(object sender, EventArgs e)
    {
      this.textBoxMBusConverterData.Clear();
      ZR_ClassLibMessages.ClearErrors();
      if (this.ActivateDiagnostic(MBusConverterDiagnostic.ConverterCommands.SetReadErrorLogger))
        this.ReadErrorLogger();
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void buttonReadLastData_Click(object sender, EventArgs e)
    {
      this.textBoxMBusConverterData.Clear();
      ZR_ClassLibMessages.ClearErrors();
      this.ReadDiagnostic();
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void TestFunction(
      MBusConverterDiagnostic.ConverterCommands theCommand)
    {
      this.textBoxMBusConverterData.Clear();
      ZR_ClassLibMessages.ClearErrors();
      if (this.ActivateDiagnostic(theCommand))
      {
        this.ReadDeviceMBusData();
        this.ReadDiagnostic();
      }
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private bool ReadConverterMBusData()
    {
      this.MyFunctions.BreakRequest = false;
      if (!this.MBusConverterDevice.REQ_UD2() || !this.MBusConverterDevice.GenerateParameterList(true))
        return false;
      StringBuilder stringBuilder = new StringBuilder();
      string zdfParameterString = this.MBusConverterDevice.Info.GetZDFParameterString();
      stringBuilder.AppendLine(zdfParameterString);
      stringBuilder.AppendLine();
      Dictionary<string, string> parametersAsList = ParameterService.GetAllParametersAsList(zdfParameterString, ';');
      if (parametersAsList == null)
        return false;
      foreach (KeyValuePair<string, string> keyValuePair in parametersAsList)
      {
        try
        {
          string empty = string.Empty;
          string str = !(keyValuePair.Key == "A") ? keyValuePair.Key + ": " + keyValuePair.Value : keyValuePair.Key + ": " + keyValuePair.Value + "[MBus current in mA]";
          stringBuilder.AppendLine(str);
          if (keyValuePair.Key == "ERR")
          {
            int int32 = Convert.ToInt32(keyValuePair.Value, 16);
            if ((int32 & 1) != 0)
              stringBuilder.AppendLine("--> *** short-circuit on MBus lines ***");
            else
              stringBuilder.AppendLine("--> MBus current ok");
            if ((int32 & 2) != 0)
              stringBuilder.AppendLine("--> *** MBus+ line connected to earth ***");
            else
              stringBuilder.AppendLine("--> MBus+ line ok");
            if ((int32 & 4) != 0)
              stringBuilder.AppendLine("--> *** MBus- line connected to earth ***");
            else
              stringBuilder.AppendLine("--> MBus- line ok");
            if ((int32 & 8) != 0)
              stringBuilder.AppendLine("--> *** Receiver: Parity error found ***");
            else
              stringBuilder.AppendLine("--> No parity error found");
            if ((int32 & 16) != 0)
              stringBuilder.AppendLine("--> *** Receiver: Stop bit error found ***");
            else
              stringBuilder.AppendLine("--> No stop bit error found");
            if ((int32 & 32) != 0)
              stringBuilder.AppendLine("--> *** MBus over-current detected ***");
            else
              stringBuilder.AppendLine("--> MBus current ok");
          }
        }
        catch
        {
        }
      }
      this.textBoxMBusConverterData.Text = stringBuilder.ToString();
      return true;
    }

    private void ReadDeviceMBusData()
    {
      if (!this.SelectedDevice.GarantAddressingPossible())
      {
        this.textBoxMBusConverterData.AppendText("--- Device address not valied ---");
      }
      else
      {
        this.textBoxMBusConverterData.AppendText("--> Request device data ...");
        this.textBoxMBusConverterData.AppendText(Environment.NewLine);
        this.MyFunctions.MyCom.ClearCom();
        this.MyFunctions.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.REQ_UD2);
        this.SelectedDevice.GenerateREQ_UD2();
        this.MyFunctions.MyCom.TransmitBlock(ref this.SelectedDevice.TransmitBuffer);
        Thread.Sleep(1000);
        this.MyFunctions.MyCom.ClearCom();
        this.MyFunctions.MyCom.ResetEarliestTransmitTime();
        ZR_ClassLibMessages.ClearErrors();
      }
    }

    private bool ActivateDiagnostic(
      MBusConverterDiagnostic.ConverterCommands theCommand)
    {
      if (!this.MyFunctions.MyCom.Open())
        return false;
      this.textBoxMBusConverterData.Clear();
      int millisecondsTimeout;
      switch (theCommand)
      {
        case MBusConverterDiagnostic.ConverterCommands.SetReceiveCurrent:
          millisecondsTimeout = 100;
          this.textBoxMBusConverterData.AppendText("*** Identify receive current ***");
          break;
        case MBusConverterDiagnostic.ConverterCommands.SetReceiveCurrentFilterd:
          millisecondsTimeout = 100;
          this.textBoxMBusConverterData.AppendText("*** Identify receive current filterd ***");
          break;
        case MBusConverterDiagnostic.ConverterCommands.SetReceiveCurrentOnTransmit:
          millisecondsTimeout = 100;
          this.textBoxMBusConverterData.AppendText("*** Identify transmit current ***");
          break;
        case MBusConverterDiagnostic.ConverterCommands.SetTransmitVoltage:
          millisecondsTimeout = 100;
          this.textBoxMBusConverterData.AppendText("*** Identify transmit voltage ***");
          break;
        case MBusConverterDiagnostic.ConverterCommands.SetStandbyCurrent:
          millisecondsTimeout = 100;
          this.textBoxMBusConverterData.AppendText("*** Identify standby current ***");
          break;
        case MBusConverterDiagnostic.ConverterCommands.SetPowerOnCurrent:
          millisecondsTimeout = 1000;
          this.textBoxMBusConverterData.AppendText("*** Identify power on current ***");
          break;
        case MBusConverterDiagnostic.ConverterCommands.SetReadErrorLogger:
          millisecondsTimeout = 50;
          this.textBoxMBusConverterData.AppendText("*** Show error logger ***");
          break;
        case MBusConverterDiagnostic.ConverterCommands.SetStandbyCurrentSpectrum:
          millisecondsTimeout = 1000;
          this.textBoxMBusConverterData.AppendText("*** Identify standby current spectrum ***");
          break;
        default:
          this.textBoxMBusConverterData.AppendText("*** Identify command error ***");
          return false;
      }
      this.textBoxMBusConverterData.AppendText(Environment.NewLine);
      this.MyFunctions.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.MBusConverterCommand);
      this.MBusConverterDevice.GenerateSendDataHeader();
      this.MBusConverterDevice.TransmitBuffer.Add(15);
      this.MBusConverterDevice.TransmitBuffer.Add((byte) theCommand);
      this.MBusConverterDevice.FinishLongFrame();
      bool flag = false;
      while (this.MyFunctions.BusState.TestRepeatCounter(this.MyFunctions.MaxRequestRepeat))
      {
        this.MyFunctions.MyCom.TransmitBlock(ref this.MBusConverterDevice.TransmitBuffer);
        this.MyFunctions.BusState.IncrementTransmitBlockCounter();
        if (!this.MBusConverterDevice.ReceiveOkNok())
        {
          if (MBusConverterDiagnostic.MBusConverterLogger.IsWarnEnabled && this.MyFunctions.BusState.RepeadCounter < this.MyFunctions.MaxRequestRepeat)
            MBusConverterDiagnostic.MBusConverterLogger.Warn("--> Activate diagnostic error. Repeat command!");
        }
        else
        {
          flag = true;
          break;
        }
      }
      if (flag)
      {
        MBusConverterDiagnostic.MBusConverterLogger.Debug("--> Activate diagnostic done");
        Thread.Sleep(millisecondsTimeout);
      }
      else
        MBusConverterDiagnostic.MBusConverterLogger.Error("--> Activate diagnostic error");
      return flag;
    }

    private bool ReadErrorLogger()
    {
      this.textBoxMBusConverterData.AppendText("--> Diagnostics");
      this.textBoxMBusConverterData.AppendText(Environment.NewLine);
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      this.DiagnositcValuesOffset = 0;
      for (int PacketNumber = 10; PacketNumber <= 14; ++PacketNumber)
      {
        this.textBoxMBusConverterData.AppendText("--> Read block " + PacketNumber.ToString());
        this.textBoxMBusConverterData.AppendText(Environment.NewLine);
        if (this.ReadCurrentDiagnosticBlock(PacketNumber))
        {
          if (PacketNumber == 10)
          {
            num1 = this.DiagnositcValuesInt[0] | this.DiagnositcValuesInt[1] << 16;
            num2 = this.DiagnositcValuesInt[2];
            num3 = (num2 * 6 + 2) / 230;
          }
          if (num3 <= 0)
            break;
        }
        else
          break;
      }
      StringBuilder stringBuilder = new StringBuilder(3000);
      stringBuilder.AppendLine("--> Diagnostic type: '" + this.typeOfData.ToString() + "'");
      stringBuilder.AppendLine("--> Number of errors: '" + num2.ToString() + "'");
      int index1 = 3;
      for (int index2 = 0; index2 < num2; ++index2)
      {
        int num4 = this.DiagnositcValuesInt[index1] | this.DiagnositcValuesInt[index1 + 1] << 16;
        int num5 = this.DiagnositcValuesInt[index1 + 2];
        index1 += 3;
        string str = "illegal time: ";
        int num6 = num1 - num4;
        if (num6 >= 0)
        {
          DateTime dateTime = SystemValues.DateTimeNow.AddSeconds((double) num6 * -1.0);
          str = dateTime.ToShortDateString() + " " + dateTime.ToShortTimeString();
        }
        stringBuilder.AppendLine();
        stringBuilder.Append(str + ": ");
        stringBuilder.Append(((MBusConverterDiagnostic.MBusConverterReadErrors) num5).ToString());
      }
      this.textBoxMBusConverterData.AppendText(stringBuilder.ToString());
      this.chart1.Series[0].Points.Clear();
      for (int xValue = 0; xValue < this.DiagnositcValues.Length; ++xValue)
        this.chart1.Series[0].Points.AddXY((double) xValue, this.DiagnositcValues[xValue]);
      this.textBoxMBusConverterData.Select(0, 10);
      this.textBoxMBusConverterData.ScrollToCaret();
      this.textBoxMBusConverterData.DeselectAll();
      return true;
    }

    private bool ReadDiagnostic()
    {
      this.textBoxMBusConverterData.AppendText("--> Diagnostics");
      this.textBoxMBusConverterData.AppendText(Environment.NewLine);
      bool flag = false;
      this.DiagnositcValuesOffset = 0;
      for (int PacketNumber = 10; PacketNumber <= 14; ++PacketNumber)
      {
        this.textBoxMBusConverterData.AppendText("--> Read block " + PacketNumber.ToString());
        this.textBoxMBusConverterData.AppendText(Environment.NewLine);
        flag = this.ReadCurrentDiagnosticBlock(PacketNumber);
        if (flag)
        {
          if (PacketNumber == 10)
          {
            this.textBoxMBusConverterData.AppendText("--> Diagnostic type: '" + this.typeOfData.ToString() + "'");
            this.textBoxMBusConverterData.AppendText(Environment.NewLine);
          }
        }
        else
          break;
      }
      StringBuilder stringBuilder = new StringBuilder(3000);
      for (int index = 0; index < this.DiagnositcValuesOffset; ++index)
      {
        stringBuilder.AppendLine();
        stringBuilder.Append(index.ToString("d04"));
        stringBuilder.Append(":");
        stringBuilder.Append(" ");
        stringBuilder.Append(this.DiagnositcValues[index].ToString());
      }
      this.textBoxMBusConverterData.AppendText(stringBuilder.ToString());
      this.chart1.Series[0].Points.Clear();
      for (int xValue = 0; xValue < this.DiagnositcValues.Length; ++xValue)
        this.chart1.Series[0].Points.AddXY((double) xValue, this.DiagnositcValues[xValue]);
      this.textBoxMBusConverterData.Select(0, 10);
      this.textBoxMBusConverterData.ScrollToCaret();
      this.textBoxMBusConverterData.DeselectAll();
      return flag;
    }

    private bool ReadCurrentDiagnosticBlock(int PacketNumber)
    {
      if (!this.MyFunctions.MyCom.Open())
        return false;
      this.MyFunctions.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.MBusConverterCommand);
      this.MBusConverterDevice.GenerateSendDataHeader();
      this.MBusConverterDevice.TransmitBuffer.Add(15);
      this.MBusConverterDevice.TransmitBuffer.Add((byte) PacketNumber);
      this.MBusConverterDevice.FinishLongFrame();
      bool flag = false;
      while (this.MyFunctions.BusState.TestRepeatCounter(this.MyFunctions.MaxRequestRepeat))
      {
        this.MyFunctions.MyCom.TransmitBlock(ref this.MBusConverterDevice.TransmitBuffer);
        this.MyFunctions.BusState.IncrementTransmitBlockCounter();
        if (!this.MBusConverterDevice.ReceiveHeader())
          MBusConverterDiagnostic.MBusConverterLogger.Debug("--> !!! Receive header error !!!");
        else if (!this.MBusConverterDevice.ReceiveLongframeEnd())
          MBusConverterDiagnostic.MBusConverterLogger.Debug("--> !!! Receive longframe end error !!!");
        else if (this.MBusConverterDevice.ReceiveBuffer.Count <= 10)
          MBusConverterDiagnostic.MBusConverterLogger.Debug("--> !!! Wron block size received !!!");
        else if (this.MBusConverterDevice.ReceiveBuffer.Data[0] != (byte) 15)
        {
          MBusConverterDiagnostic.MBusConverterLogger.Debug("--> !!! Wron block received !!!");
        }
        else
        {
          int num1 = 1;
          if (PacketNumber == 10)
          {
            this.use_mA_Table = false;
            this.scaleFactor = 0.0;
            this.typeOfData = (MBusConverterDiagnostic.ConverterCommands) this.MBusConverterDevice.ReceiveBuffer.Data[num1++];
            if (this.typeOfData == MBusConverterDiagnostic.ConverterCommands.SetReceiveCurrent)
              this.use_mA_Table = true;
            else if (this.typeOfData == MBusConverterDiagnostic.ConverterCommands.SetReceiveCurrentFilterd)
              this.use_mA_Table = true;
            else if (this.typeOfData == MBusConverterDiagnostic.ConverterCommands.SetReceiveCurrentOnTransmit)
              this.use_mA_Table = true;
            else if (this.typeOfData == MBusConverterDiagnostic.ConverterCommands.SetTransmitVoltage)
              this.scaleFactor = 0.0106;
            else if (this.typeOfData == MBusConverterDiagnostic.ConverterCommands.SetStandbyCurrent)
              this.use_mA_Table = true;
            else if (this.typeOfData == MBusConverterDiagnostic.ConverterCommands.SetPowerOnCurrent)
              this.use_mA_Table = true;
            else if (this.typeOfData != MBusConverterDiagnostic.ConverterCommands.SetReadErrorLogger && this.typeOfData == MBusConverterDiagnostic.ConverterCommands.SetStandbyCurrentSpectrum)
            {
              this.scaleFactor = 1.0;
              byte[] data1 = this.MBusConverterDevice.ReceiveBuffer.Data;
              int index1 = num1;
              int num2 = index1 + 1;
              this.Grundpegel = (int) data1[index1];
              int grundpegel = this.Grundpegel;
              byte[] data2 = this.MBusConverterDevice.ReceiveBuffer.Data;
              int index2 = num2;
              int num3 = index2 + 1;
              int num4 = (int) data2[index2] << 8;
              this.Grundpegel = grundpegel | num4;
              byte[] data3 = this.MBusConverterDevice.ReceiveBuffer.Data;
              int index3 = num3;
              int num5 = index3 + 1;
              this.Triggergrenze = (int) data3[index3];
              int triggergrenze = this.Triggergrenze;
              byte[] data4 = this.MBusConverterDevice.ReceiveBuffer.Data;
              int index4 = num5;
              num1 = index4 + 1;
              int num6 = (int) data4[index4] << 8;
              this.Triggergrenze = triggergrenze | num6;
              this.textBoxMBusConverterData.AppendText("--> Base level: " + this.Grundpegel.ToString());
              this.textBoxMBusConverterData.AppendText(Environment.NewLine);
              this.textBoxMBusConverterData.AppendText("--> Trigger level: " + this.Triggergrenze.ToString());
              this.textBoxMBusConverterData.AppendText(Environment.NewLine);
            }
          }
          while (num1 < this.MBusConverterDevice.ReceiveBuffer.Count - 2)
          {
            if (this.DiagnositcValuesOffset >= this.DiagnositcValues.Length)
              break;
            byte[] data5 = this.MBusConverterDevice.ReceiveBuffer.Data;
            int index5 = num1;
            int num7 = index5 + 1;
            int num8 = (int) data5[index5];
            byte[] data6 = this.MBusConverterDevice.ReceiveBuffer.Data;
            int index6 = num7;
            num1 = index6 + 1;
            int num9 = (int) data6[index6] << 8;
            int num10 = num8 | num9;
            if (this.use_mA_Table)
            {
              for (int index7 = 0; index7 < this.mA_Table.Count; ++index7)
              {
                if (this.mA_Table[index7].ADC_Value > num10)
                {
                  this.scaleFactor = this.mA_Table[index7].factor;
                  break;
                }
              }
            }
            this.DiagnositcValuesInt[this.DiagnositcValuesOffset] = num10;
            this.DiagnositcValues[this.DiagnositcValuesOffset++] = (double) num10 * this.scaleFactor;
          }
          flag = true;
          break;
        }
      }
      if (flag)
      {
        MBusConverterDiagnostic.MBusConverterLogger.Debug("--> Activate diagnostic done");
      }
      else
      {
        MBusConverterDiagnostic.MBusConverterLogger.Error("--> Activate diagnostic error");
        this.textBoxMBusConverterData.AppendText(Environment.NewLine);
        this.textBoxMBusConverterData.AppendText("--> Read block error");
      }
      return flag;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ChartArea chartArea = new ChartArea();
      Legend legend = new Legend();
      Series series = new Series();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (MBusConverterDiagnostic));
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.textBoxMBusConverterData = new TextBox();
      this.buttonIdentifyReceiveCurrent = new Button();
      this.buttonIdentifyReceiveCurrentFilterd = new Button();
      this.buttonIdentifyTransmitCurrent = new Button();
      this.buttonIdentifyTransmitVoltage = new Button();
      this.buttonReadConverterData = new Button();
      this.buttonIdentifyStandbyCurrent = new Button();
      this.buttonIdentifyPowerOnCurrent = new Button();
      this.buttonReadLastData = new Button();
      this.buttonReadErrorLogger = new Button();
      this.buttonIdentifyStandbyCurrentSpectrum = new Button();
      this.chart1 = new Chart();
      this.chart1.BeginInit();
      this.SuspendLayout();
      this.zennerCoroprateDesign1.Dock = DockStyle.Top;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(1040, 40);
      this.zennerCoroprateDesign1.TabIndex = 0;
      this.textBoxMBusConverterData.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.textBoxMBusConverterData.Font = new Font("Courier New", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.textBoxMBusConverterData.Location = new Point(12, 461);
      this.textBoxMBusConverterData.Multiline = true;
      this.textBoxMBusConverterData.Name = "textBoxMBusConverterData";
      this.textBoxMBusConverterData.ScrollBars = ScrollBars.Both;
      this.textBoxMBusConverterData.Size = new Size(697, 277);
      this.textBoxMBusConverterData.TabIndex = 1;
      this.buttonIdentifyReceiveCurrent.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonIdentifyReceiveCurrent.Enabled = false;
      this.buttonIdentifyReceiveCurrent.Location = new Point(715, 508);
      this.buttonIdentifyReceiveCurrent.Name = "buttonIdentifyReceiveCurrent";
      this.buttonIdentifyReceiveCurrent.Size = new Size(313, 23);
      this.buttonIdentifyReceiveCurrent.TabIndex = 2;
      this.buttonIdentifyReceiveCurrent.Text = "Identify receive current";
      this.buttonIdentifyReceiveCurrent.UseVisualStyleBackColor = true;
      this.buttonIdentifyReceiveCurrent.Click += new System.EventHandler(this.buttonIdentifyReceiveCurrent_Click);
      this.buttonIdentifyReceiveCurrentFilterd.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonIdentifyReceiveCurrentFilterd.Enabled = false;
      this.buttonIdentifyReceiveCurrentFilterd.Location = new Point(715, 531);
      this.buttonIdentifyReceiveCurrentFilterd.Name = "buttonIdentifyReceiveCurrentFilterd";
      this.buttonIdentifyReceiveCurrentFilterd.Size = new Size(313, 23);
      this.buttonIdentifyReceiveCurrentFilterd.TabIndex = 2;
      this.buttonIdentifyReceiveCurrentFilterd.Text = "Identify receive current filterd";
      this.buttonIdentifyReceiveCurrentFilterd.UseVisualStyleBackColor = true;
      this.buttonIdentifyReceiveCurrentFilterd.Click += new System.EventHandler(this.buttonIdentifyReceiveCurrentFilterd_Click);
      this.buttonIdentifyTransmitCurrent.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonIdentifyTransmitCurrent.Enabled = false;
      this.buttonIdentifyTransmitCurrent.Location = new Point(715, 554);
      this.buttonIdentifyTransmitCurrent.Name = "buttonIdentifyTransmitCurrent";
      this.buttonIdentifyTransmitCurrent.Size = new Size(313, 23);
      this.buttonIdentifyTransmitCurrent.TabIndex = 2;
      this.buttonIdentifyTransmitCurrent.Text = "Identify transmit current";
      this.buttonIdentifyTransmitCurrent.UseVisualStyleBackColor = true;
      this.buttonIdentifyTransmitCurrent.Click += new System.EventHandler(this.buttonIdentifyTransmitCurrent_Click);
      this.buttonIdentifyTransmitVoltage.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonIdentifyTransmitVoltage.Enabled = false;
      this.buttonIdentifyTransmitVoltage.Location = new Point(715, 577);
      this.buttonIdentifyTransmitVoltage.Name = "buttonIdentifyTransmitVoltage";
      this.buttonIdentifyTransmitVoltage.Size = new Size(313, 23);
      this.buttonIdentifyTransmitVoltage.TabIndex = 2;
      this.buttonIdentifyTransmitVoltage.Text = "Identify transmit voltage";
      this.buttonIdentifyTransmitVoltage.UseVisualStyleBackColor = true;
      this.buttonIdentifyTransmitVoltage.Click += new System.EventHandler(this.buttonIdentifyTransmitVoltage_Click);
      this.buttonReadConverterData.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonReadConverterData.Enabled = false;
      this.buttonReadConverterData.Location = new Point(715, 461);
      this.buttonReadConverterData.Name = "buttonReadConverterData";
      this.buttonReadConverterData.Size = new Size(313, 23);
      this.buttonReadConverterData.TabIndex = 2;
      this.buttonReadConverterData.Text = "Read converter data";
      this.buttonReadConverterData.UseVisualStyleBackColor = true;
      this.buttonReadConverterData.Click += new System.EventHandler(this.buttonReadConverterData_Click);
      this.buttonIdentifyStandbyCurrent.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonIdentifyStandbyCurrent.Enabled = false;
      this.buttonIdentifyStandbyCurrent.Location = new Point(715, 600);
      this.buttonIdentifyStandbyCurrent.Name = "buttonIdentifyStandbyCurrent";
      this.buttonIdentifyStandbyCurrent.Size = new Size(313, 23);
      this.buttonIdentifyStandbyCurrent.TabIndex = 2;
      this.buttonIdentifyStandbyCurrent.Text = "Identify standby current";
      this.buttonIdentifyStandbyCurrent.UseVisualStyleBackColor = true;
      this.buttonIdentifyStandbyCurrent.Click += new System.EventHandler(this.buttonIdentifyStandbyCurrent_Click);
      this.buttonIdentifyPowerOnCurrent.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonIdentifyPowerOnCurrent.Enabled = false;
      this.buttonIdentifyPowerOnCurrent.Location = new Point(715, 623);
      this.buttonIdentifyPowerOnCurrent.Name = "buttonIdentifyPowerOnCurrent";
      this.buttonIdentifyPowerOnCurrent.Size = new Size(313, 23);
      this.buttonIdentifyPowerOnCurrent.TabIndex = 2;
      this.buttonIdentifyPowerOnCurrent.Text = "Identify power on current";
      this.buttonIdentifyPowerOnCurrent.UseVisualStyleBackColor = true;
      this.buttonIdentifyPowerOnCurrent.Click += new System.EventHandler(this.buttonIdentifyPowerOnCurrent_Click);
      this.buttonReadLastData.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonReadLastData.Enabled = false;
      this.buttonReadLastData.Location = new Point(715, 715);
      this.buttonReadLastData.Name = "buttonReadLastData";
      this.buttonReadLastData.Size = new Size(313, 23);
      this.buttonReadLastData.TabIndex = 2;
      this.buttonReadLastData.Text = "Read last data";
      this.buttonReadLastData.UseVisualStyleBackColor = true;
      this.buttonReadLastData.Click += new System.EventHandler(this.buttonReadLastData_Click);
      this.buttonReadErrorLogger.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonReadErrorLogger.Enabled = false;
      this.buttonReadErrorLogger.Location = new Point(715, 669);
      this.buttonReadErrorLogger.Name = "buttonReadErrorLogger";
      this.buttonReadErrorLogger.Size = new Size(313, 23);
      this.buttonReadErrorLogger.TabIndex = 2;
      this.buttonReadErrorLogger.Text = "Read error logger";
      this.buttonReadErrorLogger.UseVisualStyleBackColor = true;
      this.buttonReadErrorLogger.Click += new System.EventHandler(this.buttonReadErrorLogger_Click);
      this.buttonIdentifyStandbyCurrentSpectrum.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonIdentifyStandbyCurrentSpectrum.Enabled = false;
      this.buttonIdentifyStandbyCurrentSpectrum.Location = new Point(715, 646);
      this.buttonIdentifyStandbyCurrentSpectrum.Name = "buttonIdentifyStandbyCurrentSpectrum";
      this.buttonIdentifyStandbyCurrentSpectrum.Size = new Size(313, 23);
      this.buttonIdentifyStandbyCurrentSpectrum.TabIndex = 2;
      this.buttonIdentifyStandbyCurrentSpectrum.Text = "Identify standby current spectrum";
      this.buttonIdentifyStandbyCurrentSpectrum.UseVisualStyleBackColor = true;
      this.buttonIdentifyStandbyCurrentSpectrum.Click += new System.EventHandler(this.buttonIdentifyStandbyCurrentSpectrum_Click);
      this.chart1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      chartArea.Name = "ChartArea1";
      this.chart1.ChartAreas.Add(chartArea);
      legend.Name = "Legend1";
      this.chart1.Legends.Add(legend);
      this.chart1.Location = new Point(12, 46);
      this.chart1.Name = "chart1";
      series.ChartArea = "ChartArea1";
      series.ChartType = SeriesChartType.Line;
      series.Legend = "Legend1";
      series.Name = "Daten";
      this.chart1.Series.Add(series);
      this.chart1.Size = new Size(1016, 409);
      this.chart1.TabIndex = 3;
      this.chart1.Text = "chart1";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1040, 750);
      this.Controls.Add((Control) this.chart1);
      this.Controls.Add((Control) this.buttonReadLastData);
      this.Controls.Add((Control) this.buttonIdentifyStandbyCurrentSpectrum);
      this.Controls.Add((Control) this.buttonReadErrorLogger);
      this.Controls.Add((Control) this.buttonIdentifyPowerOnCurrent);
      this.Controls.Add((Control) this.buttonIdentifyStandbyCurrent);
      this.Controls.Add((Control) this.buttonIdentifyTransmitVoltage);
      this.Controls.Add((Control) this.buttonIdentifyTransmitCurrent);
      this.Controls.Add((Control) this.buttonIdentifyReceiveCurrentFilterd);
      this.Controls.Add((Control) this.buttonReadConverterData);
      this.Controls.Add((Control) this.buttonIdentifyReceiveCurrent);
      this.Controls.Add((Control) this.textBoxMBusConverterData);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (MBusConverterDiagnostic);
      this.Text = "MBusConverter Diagnostic";
      this.Activated += new System.EventHandler(this.MBusConverterDiagnostic_Activated);
      this.chart1.EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private enum ConverterCommands
    {
      SetReceiveCurrent = 0,
      SetReceiveCurrentFilterd = 1,
      SetReceiveCurrentOnTransmit = 2,
      SetTransmitVoltage = 3,
      SetStandbyCurrent = 4,
      SetPowerOnCurrent = 5,
      SetReadErrorLogger = 6,
      SetStandbyCurrentSpectrum = 7,
      RecDataBlock0 = 10, // 0x0000000A
      RecDataBlock1 = 11, // 0x0000000B
      RecDataBlock2 = 12, // 0x0000000C
      RecDataBlock3 = 13, // 0x0000000D
      RecDataBlock4 = 14, // 0x0000000E
    }

    internal class mA_TableEntry
    {
      internal int ADC_Value;
      internal double factor;

      internal mA_TableEntry(int ADC_Value, double factor)
      {
        this.ADC_Value = ADC_Value;
        this.factor = factor;
      }
    }

    private enum MBusConverterReadErrors
    {
      noError,
      parityError,
      stopbitError,
      dataCollision,
      lastErrorRepeated,
    }
  }
}


--- MBusDevice.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MBusDevice
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using HandlerLib;
using NLog;
using StartupLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZENNER.CommonLibrary.Exceptions;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MBusDevice : BusDevice
  {
    protected static Logger MBusDeviceLogger = LogManager.GetLogger(nameof (MBusDevice));
    private static int[] DifLengthTable = new int[16]
    {
      0,
      1,
      2,
      3,
      4,
      4,
      6,
      8,
      0,
      1,
      2,
      3,
      4,
      4,
      6,
      8
    };
    internal static MBusDevice.ParamCode[] DifParamCodeTable = new MBusDevice.ParamCode[16]
    {
      MBusDevice.ParamCode.None,
      MBusDevice.ParamCode.Int,
      MBusDevice.ParamCode.Int,
      MBusDevice.ParamCode.Int,
      MBusDevice.ParamCode.Int,
      MBusDevice.ParamCode.Real,
      MBusDevice.ParamCode.Int,
      MBusDevice.ParamCode.Int,
      MBusDevice.ParamCode.Readout,
      MBusDevice.ParamCode.BCD,
      MBusDevice.ParamCode.BCD,
      MBusDevice.ParamCode.BCD,
      MBusDevice.ParamCode.BCD,
      MBusDevice.ParamCode.Variable,
      MBusDevice.ParamCode.BCD,
      MBusDevice.ParamCode.Special
    };
    public static MBusDevice.VifStruct[] VifList = new MBusDevice.VifStruct[128]
    {
      new MBusDevice.VifStruct("MWH", -9, 0, "MWh"),
      new MBusDevice.VifStruct("MWH", -8, 0, "MWh"),
      new MBusDevice.VifStruct("MWH", -7, 0, "MWh"),
      new MBusDevice.VifStruct("MWH", -6, 0, "MWh"),
      new MBusDevice.VifStruct("MWH", -5, 0, "MWh"),
      new MBusDevice.VifStruct("MWH", -4, 0, "MWh"),
      new MBusDevice.VifStruct("MWH", -3, 0, "MWh"),
      new MBusDevice.VifStruct("MWH", -2, 0, "MWh"),
      new MBusDevice.VifStruct("GJ", -9, 0, "GJ"),
      new MBusDevice.VifStruct("GJ", -8, 0, "GJ"),
      new MBusDevice.VifStruct("GJ", -7, 0, "GJ"),
      new MBusDevice.VifStruct("GJ", -6, 0, "GJ"),
      new MBusDevice.VifStruct("GJ", -5, 0, "GJ"),
      new MBusDevice.VifStruct("GJ", -4, 0, "GJ"),
      new MBusDevice.VifStruct("GJ", -3, 0, "GJ"),
      new MBusDevice.VifStruct("GJ", -2, 0, "GJ"),
      new MBusDevice.VifStruct("QM", -6, 0, "m\u00B3"),
      new MBusDevice.VifStruct("QM", -5, 0, "m\u00B3"),
      new MBusDevice.VifStruct("QM", -4, 0, "m\u00B3"),
      new MBusDevice.VifStruct("QM", -3, 0, "m\u00B3"),
      new MBusDevice.VifStruct("QM", -2, 0, "m\u00B3"),
      new MBusDevice.VifStruct("QM", -1, 0, "m\u00B3"),
      new MBusDevice.VifStruct("QM", 0, 0, "m\u00B3"),
      new MBusDevice.VifStruct("QM", 1, 0, "m\u00B3"),
      new MBusDevice.VifStruct("Kg", -3, 0, "Kg"),
      new MBusDevice.VifStruct("Kg", -3, 0, "Kg"),
      new MBusDevice.VifStruct("Kg", -3, 0, "Kg"),
      new MBusDevice.VifStruct("Kg", -3, 0, "Kg"),
      new MBusDevice.VifStruct("Kg", -3, 0, "Kg"),
      new MBusDevice.VifStruct("Kg", -3, 0, "Kg"),
      new MBusDevice.VifStruct("Kg", -3, 0, "Kg"),
      new MBusDevice.VifStruct("Kg", -3, 0, "Kg"),
      new MBusDevice.VifStruct("OnSecs", 0, 0, "s"),
      new MBusDevice.VifStruct("OnMins", 0, 0, "s"),
      new MBusDevice.VifStruct("OnHours", 0, 0, "s"),
      new MBusDevice.VifStruct("OnDays", 0, 0, "s"),
      new MBusDevice.VifStruct("OpSecs", 0, 0, "s"),
      new MBusDevice.VifStruct("OpMins", 0, 0, "s"),
      new MBusDevice.VifStruct("OpHours", 0, 0, "s"),
      new MBusDevice.VifStruct("OpDays", 0, 0, "s"),
      new MBusDevice.VifStruct("kW", -6, 0, "kW"),
      new MBusDevice.VifStruct("kW", -5, 0, "kW"),
      new MBusDevice.VifStruct("kW", -4, 0, "kW"),
      new MBusDevice.VifStruct("kW", -3, 0, "kW"),
      new MBusDevice.VifStruct("kW", -2, 0, "kW"),
      new MBusDevice.VifStruct("kW", -1, 0, "kW"),
      new MBusDevice.VifStruct("kW", 0, 0, "kW"),
      new MBusDevice.VifStruct("kW", 1, 0, "kW"),
      new MBusDevice.VifStruct("GJ/h", -9, 0, "GJ/h"),
      new MBusDevice.VifStruct("GJ/h", -8, 0, "GJ/h"),
      new MBusDevice.VifStruct("GJ/h", -7, 0, "GJ/h"),
      new MBusDevice.VifStruct("GJ/h", -6, 0, "GJ/h"),
      new MBusDevice.VifStruct("GJ/h", -5, 0, "GJ/h"),
      new MBusDevice.VifStruct("GJ/h", -4, 0, "GJ/h"),
      new MBusDevice.VifStruct("GJ/h", -3, 0, "GJ/h"),
      new MBusDevice.VifStruct("GJ/h", -2, 0, "GJ/h"),
      new MBusDevice.VifStruct("QMPH", -6, 0, "m\u00B3/h"),
      new MBusDevice.VifStruct("QMPH", -5, 0, "m\u00B3/h"),
      new MBusDevice.VifStruct("QMPH", -4, 0, "m\u00B3/h"),
      new MBusDevice.VifStruct("QMPH", -3, 0, "m\u00B3/h"),
      new MBusDevice.VifStruct("QMPH", -2, 0, "m\u00B3/h"),
      new MBusDevice.VifStruct("QMPH", -1, 0, "m\u00B3/h"),
      new MBusDevice.VifStruct("QMPH", 0, 0, "m\u00B3/h"),
      new MBusDevice.VifStruct("QMPH", 1, 0, "m\u00B3/h"),
      new MBusDevice.VifStruct("QMPM", -7, 0, "m\u00B3/min"),
      new MBusDevice.VifStruct("QMPM", -6, 0, "m\u00B3/min"),
      new MBusDevice.VifStruct("QMPM", -5, 0, "m\u00B3/min"),
      new MBusDevice.VifStruct("QMPM", -4, 0, "m\u00B3/min"),
      new MBusDevice.VifStruct("QMPM", -3, 0, "m\u00B3/min"),
      new MBusDevice.VifStruct("QMPM", -2, 0, "m\u00B3/min"),
      new MBusDevice.VifStruct("QMPM", -1, 0, "m\u00B3/min"),
      new MBusDevice.VifStruct("QMPM", 0, 0, "m\u00B3/min"),
      new MBusDevice.VifStruct("QMPS", -9, 0, "m\u00B3/s"),
      new MBusDevice.VifStruct("QMPS", -8, 0, "m\u00B3/s"),
      new MBusDevice.VifStruct("QMPS", -7, 0, "m\u00B3/s"),
      new MBusDevice.VifStruct("QMPS", -6, 0, "m\u00B3/s"),
      new MBusDevice.VifStruct("QMPS", -5, 0, "m\u00B3/s"),
      new MBusDevice.VifStruct("QMPS", -4, 0, "m\u00B3/s"),
      new MBusDevice.VifStruct("QMPS", -3, 0, "m\u00B3/s"),
      new MBusDevice.VifStruct("QMPS", -2, 0, "m\u00B3/s"),
      new MBusDevice.VifStruct("KGPH", -3, 0, "kg/h"),
      new MBusDevice.VifStruct("KGPH", -2, 0, "kg/h"),
      new MBusDevice.VifStruct("KGPH", -1, 0, "kg/h"),
      new MBusDevice.VifStruct("KGPH", 0, 0, "kg/h"),
      new MBusDevice.VifStruct("KGPH", 1, 0, "kg/h"),
      new MBusDevice.VifStruct("KGPH", 2, 0, "kg/h"),
      new MBusDevice.VifStruct("KGPH", 3, 0, "kg/h"),
      new MBusDevice.VifStruct("KGPH", 4, 0, "kg/h"),
      new MBusDevice.VifStruct("TF", -3, 0, "Â°C"),
      new MBusDevice.VifStruct("TF", -2, 0, "Â°C"),
      new MBusDevice.VifStruct("TF", -1, 0, "Â°C"),
      new MBusDevice.VifStruct("TF", 0, 0, "Â°C"),
      new MBusDevice.VifStruct("TR", -3, 0, "Â°C"),
      new MBusDevice.VifStruct("TR", -2, 0, "Â°C"),
      new MBusDevice.VifStruct("TR", -1, 0, "Â°C"),
      new MBusDevice.VifStruct("TR", 0, 0, "Â°C"),
      new MBusDevice.VifStruct("TD", -3, 0, "K"),
      new MBusDevice.VifStruct("TD", -2, 0, "K"),
      new MBusDevice.VifStruct("TD", -1, 0, "K"),
      new MBusDevice.VifStruct("TD", 0, 0, "K"),
      new MBusDevice.VifStruct("TX", -3, 0, "Â°C"),
      new MBusDevice.VifStruct("TX", -2, 0, "Â°C"),
      new MBusDevice.VifStruct("TX", -1, 0, "Â°C"),
      new MBusDevice.VifStruct("TX", 0, 0, "Â°C"),
      new MBusDevice.VifStruct("HePas", -3, 0, "bar"),
      new MBusDevice.VifStruct("HePas", -2, 0, "bar"),
      new MBusDevice.VifStruct("HePas", -1, 0, "bar"),
      new MBusDevice.VifStruct("HePas", 0, 0, "bar"),
      new MBusDevice.VifStruct("TIMP", 0, 0, "-"),
      new MBusDevice.VifStruct("TIMP", 0, 0, "-"),
      new MBusDevice.VifStruct("HCA", 0, 0, "-"),
      new MBusDevice.VifStruct("Reserved_VifList_0x6f", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("AvDSecs", 0, 0, "sec"),
      new MBusDevice.VifStruct("AvDMins", 0, 0, "min"),
      new MBusDevice.VifStruct("AvDHours", 0, 0, "hour"),
      new MBusDevice.VifStruct("AvDDays", 0, 0, "day"),
      new MBusDevice.VifStruct("AcDSecs", 0, 0, "sec"),
      new MBusDevice.VifStruct("AcDMins", 0, 0, "min"),
      new MBusDevice.VifStruct("AcDHours", 0, 0, "hour"),
      new MBusDevice.VifStruct("AcDDays", 0, 0, "day"),
      new MBusDevice.VifStruct("FAB", 0, 0, "-"),
      new MBusDevice.VifStruct("CID", 0, 0, "-"),
      new MBusDevice.VifStruct("ADR", 0, 0, "-"),
      new MBusDevice.VifStruct("??_VifList_0x7b", 0, 0, "??"),
      new MBusDevice.VifStruct("UserDefinableVIF", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifList_0x7d", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifList_0x7e", 0, 0, "??"),
      new MBusDevice.VifStruct("Manuf", 0, 0, "-")
    };
    public static MBusDevice.VifStruct[] VifEList_0xFD = new MBusDevice.VifStruct[128]
    {
      new MBusDevice.VifStruct("CurrencyUnitsCredit", -3, 0, "Credit"),
      new MBusDevice.VifStruct("CurrencyUnitsCredit", -2, 0, "Credit"),
      new MBusDevice.VifStruct("CurrencyUnitsCredit", -1, 0, "Credit"),
      new MBusDevice.VifStruct("CurrencyUnitsCredit", 0, 0, "Credit"),
      new MBusDevice.VifStruct("CurrencyUnitsDebit", -3, 0, "Debit"),
      new MBusDevice.VifStruct("CurrencyUnitsDebit", -2, 0, "Debit"),
      new MBusDevice.VifStruct("CurrencyUnitsDebit", -1, 0, "Debit"),
      new MBusDevice.VifStruct("CurrencyUnitsDebit", 0, 0, "Debit"),
      new MBusDevice.VifStruct("AccessNumber", 0, 0, "-"),
      new MBusDevice.VifStruct("TYPE", 0, 0, "-"),
      new MBusDevice.VifStruct("Manufacturer", 0, 0, "-"),
      new MBusDevice.VifStruct("ParaSet", 0, 0, "-"),
      new MBusDevice.VifStruct("Model", 0, 0, "-"),
      new MBusDevice.VifStruct("Hardware", 0, 0, "-"),
      new MBusDevice.VifStruct("Firmware", 0, 0, "-"),
      new MBusDevice.VifStruct("Software", 0, 0, "-"),
      new MBusDevice.VifStruct("CustomerLocation", 0, 0, "-"),
      new MBusDevice.VifStruct("Customer", 0, 0, "-"),
      new MBusDevice.VifStruct("AccessCodeUser", 0, 0, "-"),
      new MBusDevice.VifStruct("AccessCodeOperator", 0, 0, "-"),
      new MBusDevice.VifStruct("AccessCodeSystemOperator", 0, 0, "-"),
      new MBusDevice.VifStruct("AccessCodeDeveloper", 0, 0, "-"),
      new MBusDevice.VifStruct("Password", 0, 0, "-"),
      new MBusDevice.VifStruct("ERR", 0, 8, "-", true),
      new MBusDevice.VifStruct("ERR_MASK", 0, 0, "-"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x19", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("DIGI_OUT", 0, 8, "-"),
      new MBusDevice.VifStruct("DIGI_IN", 0, 8, "-"),
      new MBusDevice.VifStruct("Baudrate", 0, 0, "-"),
      new MBusDevice.VifStruct("ResponseDelayTime", 0, 0, "bittimes"),
      new MBusDevice.VifStruct("Retry", 0, 0, "-"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x1f", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("FirstStorageNrForCyclicStorage", 0, 0, "-"),
      new MBusDevice.VifStruct("LastStorageNrForCyclicStorage", 0, 0, "-"),
      new MBusDevice.VifStruct("SizeOfStorageBlock", 0, 0, "-"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x23", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("StorageIntervalSec", 0, 0, "sec"),
      new MBusDevice.VifStruct("StorageIntervalMin", 0, 0, "min"),
      new MBusDevice.VifStruct("StorageIntervalHour", 0, 0, "hour"),
      new MBusDevice.VifStruct("StorageIntervalDay", 0, 0, "day"),
      new MBusDevice.VifStruct("StorageIntervalMonth", 0, 0, "month"),
      new MBusDevice.VifStruct("StorageIntervalYear", 0, 0, "year"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x2a", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x2b", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("DurationSinceLastReadoutSec", 0, 0, "sec"),
      new MBusDevice.VifStruct("DurationSinceLastReadoutMin", 0, 0, "min"),
      new MBusDevice.VifStruct("DurationSinceLastReadoutHour", 0, 0, "hour"),
      new MBusDevice.VifStruct("DurationSinceLastReadoutDay", 0, 0, "day"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x30", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("TariffStorageIntervalMin", 0, 0, "min"),
      new MBusDevice.VifStruct("TariffStorageIntervalHour", 0, 0, "hour"),
      new MBusDevice.VifStruct("TariffStorageIntervalDay", 0, 0, "day"),
      new MBusDevice.VifStruct("PeriodOfTariffSec", 0, 0, "sec"),
      new MBusDevice.VifStruct("PeriodOfTariffMin", 0, 0, "min"),
      new MBusDevice.VifStruct("PeriodOfTariffHour", 0, 0, "hour"),
      new MBusDevice.VifStruct("PeriodOfTariffDay", 0, 0, "day"),
      new MBusDevice.VifStruct("PeriodOfTariffMonth", 0, 0, "month"),
      new MBusDevice.VifStruct("PeriodOfTariffYear", 0, 0, "year"),
      new MBusDevice.VifStruct("Dimensionless", 0, 0, "-"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x3b", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x3c", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x3d", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x3e", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x3f", 1, 0, "Reserved"),
      new MBusDevice.VifStruct("V", -9, 0, "V"),
      new MBusDevice.VifStruct("V", -8, 0, "V"),
      new MBusDevice.VifStruct("V", -7, 0, "V"),
      new MBusDevice.VifStruct("V", -6, 0, "V"),
      new MBusDevice.VifStruct("V", -5, 0, "V"),
      new MBusDevice.VifStruct("V", -4, 0, "V"),
      new MBusDevice.VifStruct("V", -3, 0, "V"),
      new MBusDevice.VifStruct("V", -2, 0, "V"),
      new MBusDevice.VifStruct("V", -1, 0, "V"),
      new MBusDevice.VifStruct("V", 0, 0, "V"),
      new MBusDevice.VifStruct("V", 1, 0, "V"),
      new MBusDevice.VifStruct("V", 2, 0, "V"),
      new MBusDevice.VifStruct("V", 3, 0, "V"),
      new MBusDevice.VifStruct("V", 4, 0, "V"),
      new MBusDevice.VifStruct("V", 5, 0, "V"),
      new MBusDevice.VifStruct("V", 6, 0, "V"),
      new MBusDevice.VifStruct("A", -12, 0, "A"),
      new MBusDevice.VifStruct("A", -11, 0, "A"),
      new MBusDevice.VifStruct("A", -10, 0, "A"),
      new MBusDevice.VifStruct("A", -9, 0, "A"),
      new MBusDevice.VifStruct("A", -8, 0, "A"),
      new MBusDevice.VifStruct("A", -7, 0, "A"),
      new MBusDevice.VifStruct("A", -6, 0, "A"),
      new MBusDevice.VifStruct("A", -5, 0, "A"),
      new MBusDevice.VifStruct("A", -4, 0, "A"),
      new MBusDevice.VifStruct("A", -3, 0, "A"),
      new MBusDevice.VifStruct("A", -2, 0, "A"),
      new MBusDevice.VifStruct("A", -1, 0, "A"),
      new MBusDevice.VifStruct("A", 0, 0, "A"),
      new MBusDevice.VifStruct("A", 1, 0, "A"),
      new MBusDevice.VifStruct("A", 2, 0, "A"),
      new MBusDevice.VifStruct("A", 3, 0, "A"),
      new MBusDevice.VifStruct("RES0000", 0, 0, "-"),
      new MBusDevice.VifStruct("CumulationCounter", 0, 0, "-"),
      new MBusDevice.VifStruct("ControlSignal", 0, 0, "-"),
      new MBusDevice.VifStruct("DayOfWeek", 0, 0, "-"),
      new MBusDevice.VifStruct("WeekNumber", 0, 0, "-"),
      new MBusDevice.VifStruct("TimePointOfDayChange", 0, 0, "-"),
      new MBusDevice.VifStruct("StateOfParameterActivation", 0, 0, "-"),
      new MBusDevice.VifStruct("SPEC_SUP_INF", 0, 0, "-"),
      new MBusDevice.VifStruct("DurationSinceLastCumulationHour", 0, 0, "hour"),
      new MBusDevice.VifStruct("DurationSinceLastCumulationDay", 0, 0, "day"),
      new MBusDevice.VifStruct("DurationSinceLastCumulationMonth", 0, 0, "month"),
      new MBusDevice.VifStruct("DurationSinceLastCumulationYear", 0, 0, "year"),
      new MBusDevice.VifStruct("OperatingTimeBatteryHour", 0, 0, "hour"),
      new MBusDevice.VifStruct("OperatingTimeBatteryDay", 0, 0, "day"),
      new MBusDevice.VifStruct("OperatingTimeBatteryMonth", 0, 0, "month"),
      new MBusDevice.VifStruct("OperatingTimeBatteryYear", 0, 0, "year"),
      new MBusDevice.VifStruct("DateAndTimeOfBatteryChange", 0, 0, "-"),
      new MBusDevice.VifStruct("RSSI", 0, 0, "dBm"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x72", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x73", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x74", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x75", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x76", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x77", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x78", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x79", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x7a", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x7b", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x7c", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x7d", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x7e", 0, 0, "Reserved"),
      new MBusDevice.VifStruct("Reserved_VifEList_0xFD_0x7f", 0, 0, "Reserved")
    };
    public static MBusDevice.VifStruct[] VifEList_0xFB = new MBusDevice.VifStruct[128]
    {
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 8, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 8, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 8, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 1, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("Temperature_Limit", 0, 0, "Â°C"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("", 0, 0, ""),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??"),
      new MBusDevice.VifStruct("??_VifEList_0xFB", 0, 0, "??")
    };
    public static MBusDevice.OrtoVifStruct[] VifEListOrto = new MBusDevice.OrtoVifStruct[128]
    {
      new MBusDevice.OrtoVifStruct("", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x01", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x02", 0, false, ""),
      new MBusDevice.OrtoVifStruct("", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x04", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x05", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x06", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x07", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x08", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x09", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x0a", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x0b", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x0c", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x0d", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x0e", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x0f", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x10", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x11", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x12", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x13", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x14", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x15", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x16", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x17", 0, false, ""),
      new MBusDevice.OrtoVifStruct("", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x19", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x1a", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x1b", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x1c", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x1d", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x1e", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_CPWR", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x20", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x21", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_PerHour", 0, false, "/h"),
      new MBusDevice.OrtoVifStruct("_PerDay", 0, false, "/day"),
      new MBusDevice.OrtoVifStruct("_PerWeek", 0, false, "/week"),
      new MBusDevice.OrtoVifStruct("_PerMonth", 0, false, "/month"),
      new MBusDevice.OrtoVifStruct("_PerYear", 0, false, "/year"),
      new MBusDevice.OrtoVifStruct("_PerCycle", 0, false, "/cycle"),
      new MBusDevice.OrtoVifStruct("_IncInp0", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_IncInp1", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_IncOut0", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_IncOut1", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_PerLiter", 0, false, "/l"),
      new MBusDevice.OrtoVifStruct("_PerQM", 0, false, "/m\u00B3"),
      new MBusDevice.OrtoVifStruct("_PerKg", 0, false, "/kg"),
      new MBusDevice.OrtoVifStruct("_PerK", 0, false, "/K"),
      new MBusDevice.OrtoVifStruct("_PerkWh", 0, false, "/kWh"),
      new MBusDevice.OrtoVifStruct("_PerGJ", 0, false, "/GJ"),
      new MBusDevice.OrtoVifStruct("_PerkW", 0, false, "/kW"),
      new MBusDevice.OrtoVifStruct("_PerK*l", 0, false, "/K*l"),
      new MBusDevice.OrtoVifStruct("_PerV", 0, false, "/V"),
      new MBusDevice.OrtoVifStruct("_PerA", 0, false, "/A"),
      new MBusDevice.OrtoVifStruct("_*s", 0, false, "*s"),
      new MBusDevice.OrtoVifStruct("_*s/V", 0, false, "*s/V"),
      new MBusDevice.OrtoVifStruct("_*s/A", 0, false, "*s/A"),
      new MBusDevice.OrtoVifStruct("_STime", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_RAW", 0, false, ""),
      new MBusDevice.OrtoVifStruct("+", 0, false, ""),
      new MBusDevice.OrtoVifStruct("-", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x3d", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x3e", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x3f", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_LowerLimit", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_OfExceedsOfLower", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_TimeOfBeginFirstLower", 0, true, ""),
      new MBusDevice.OrtoVifStruct("_TimeOfEndFirstLower", 0, true, ""),
      new MBusDevice.OrtoVifStruct("_VifEListOrto_0x44", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_VifEListOrto_0x45", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_TimeOfBeginLastLower", 0, true, ""),
      new MBusDevice.OrtoVifStruct("_TimeOfEndLastLower", 0, true, ""),
      new MBusDevice.OrtoVifStruct("_UpperLimit", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_OfExceedsOfUpper", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_TimeOfBeginFirstUpper", 0, true, ""),
      new MBusDevice.OrtoVifStruct("_TimeOfEndFirstUpper", 0, true, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x4c", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x4d", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_TimeOfBeginLastUpper", 0, true, ""),
      new MBusDevice.OrtoVifStruct("_TimeOfEndLastUpper", 0, true, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x50", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x51", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x52", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x53", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x54", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x55", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x56", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x57", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x58", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x59", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x5a", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x5b", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x5c", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x5d", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x5e", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x5f", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x60", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x61", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x62", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x63", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x64", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x65", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x66", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x67", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x68", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x69", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x6a", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x6b", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_Leakage", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_Overflow", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x6e", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x6f", 0, false, ""),
      new MBusDevice.OrtoVifStruct("", -6, false, ""),
      new MBusDevice.OrtoVifStruct("", -5, false, ""),
      new MBusDevice.OrtoVifStruct("", -4, false, ""),
      new MBusDevice.OrtoVifStruct("", -3, false, ""),
      new MBusDevice.OrtoVifStruct("", -2, false, ""),
      new MBusDevice.OrtoVifStruct("", -1, false, ""),
      new MBusDevice.OrtoVifStruct("", 0, false, ""),
      new MBusDevice.OrtoVifStruct("", 1, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x78", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x79", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x7a", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x7b", 0, false, ""),
      new MBusDevice.OrtoVifStruct("??_VifEListOrto_0x7c", 0, false, ""),
      new MBusDevice.OrtoVifStruct("", 3, false, ""),
      new MBusDevice.OrtoVifStruct("_Future", 0, false, ""),
      new MBusDevice.OrtoVifStruct("_Man", 0, false, "")
    };
    private const int LongFrameStartLen = 4;
    private const int LongFrameHeaderLen = 19;
    private const int LongFrameStopLen = 2;
    private const int MaxFrameEndLen = 242;
    protected int FrameEndLen;
    private byte TempChecksum;
    public byte PrimaryDeviceAddress;
    public bool PrimaryAddressOk;
    public bool PrimaryAddressKnown;
    public bool IsSelectedOnBus;
    public string DeviceInfoText = string.Empty;
    public bool followingTelegrammAnnounced = false;
    public bool followingTelegrammTransmit_FCB_Odd = false;
    private MBusDevice.ParamScannerValues scannerValues = new MBusDevice.ParamScannerValues();

    public static string GetMeterTypeDescription(MBusDeviceType TheType)
    {
      return DeviceCollectorFunctions.SerialBusMessage.GetString(TheType.ToString()) ?? DeviceCollectorFunctions.SerialBusMessage.GetString(MBusDeviceType.UNKNOWN.ToString());
    }

    public MBusDevice()
    {
      this.DeviceType = DeviceTypes.MBus;
      this.PrimaryAddressOk = false;
      this.PrimaryAddressKnown = false;
      this.IsSelectedOnBus = false;
    }

    public MBusDevice(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.DeviceType = DeviceTypes.MBus;
      this.PrimaryAddressOk = false;
      this.PrimaryAddressKnown = false;
      this.IsSelectedOnBus = false;
    }

    public byte GetPrimaryAddress()
    {
      this.GarantAddressingPossible();
      if (this.MyBus.MyBusMode == BusMode.MBusPointToPoint || this.MyBus.MyBusMode == BusMode.SmokeDetector)
        return 254;
      if (!this.MyBus.OnlySecondaryAddressing && this.PrimaryAddressOk)
        return this.PrimaryDeviceAddress;
      if (this.IsSelectedOnBus)
        return 253;
      MBusDevice.MBusDeviceLogger.Error("MBus telegram generation without valid address.");
      return 251;
    }

    private bool AddressingPossible()
    {
      return this.MyBus.MyBusMode == BusMode.MBusPointToPoint || this.MyBus.MyBusMode == BusMode.SmokeDetector || !this.MyBus.OnlySecondaryAddressing && this.PrimaryAddressOk || this.IsSelectedOnBus;
    }

    public void GenerateREQ_UD2()
    {
      this.TransmitBuffer = new ByteField(5);
      byte primaryAddress = this.GetPrimaryAddress();
      MBusDevice.REQ_UD2_Type reqUd2Type = this.MyBus.UseREQ_UD2_5B ? MBusDevice.REQ_UD2_Type.REQ_UD2_5B : MBusDevice.REQ_UD2_Type.REQ_UD2_7B;
      if (this.MyBus.IsMultiTelegrammEnabled)
        reqUd2Type = !this.followingTelegrammTransmit_FCB_Odd ? MBusDevice.REQ_UD2_Type.REQ_UD2_5B : MBusDevice.REQ_UD2_Type.REQ_UD2_7B;
      this.TransmitBuffer.Add(16);
      this.TransmitBuffer.Add((byte) reqUd2Type);
      this.TransmitBuffer.Add(primaryAddress);
      this.TransmitBuffer.Add((byte) (reqUd2Type + primaryAddress));
      this.TransmitBuffer.Add(22);
    }

    internal void GenerateLongframeStart()
    {
      this.TransmitBuffer = new ByteField(270);
      this.TransmitBuffer.Add(104);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(104);
    }

    public void GenerateSendDataHeader()
    {
      byte primaryAddress = this.GetPrimaryAddress();
      this.GenerateLongframeStart();
      this.TransmitBuffer.Add(83);
      this.TransmitBuffer.Add(primaryAddress);
      this.TransmitBuffer.Add(81);
    }

    public void FinishLongFrame()
    {
      byte num = (byte) (this.TransmitBuffer.Count - 4);
      this.TransmitBuffer.Data[1] = num;
      this.TransmitBuffer.Data[2] = num;
      byte Byte = 0;
      for (int index = 4; index < this.TransmitBuffer.Count; ++index)
        Byte += this.TransmitBuffer.Data[index];
      this.TransmitBuffer.Add(Byte);
      this.TransmitBuffer.Add(22);
    }

    internal bool ReceiveLongframeStart()
    {
      try
      {
        this.MyBus.TempDeviceInfo = new DeviceInfo();
        this.ReceiveBuffer = new ByteField(4);
        MBusDevice.MBusDeviceLogger.Debug("Receive longframe");
        if (!this.MyBus.MyCom.ReceiveBlock(ref this.ReceiveBuffer, 4, true))
        {
          MBusDevice.MBusDeviceLogger.Error("... Error on receive longframe header");
          return false;
        }
        MBusDevice.MBusDeviceLogger.Debug("... Longframe bytes received");
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusWorkHeader);
        if (this.ReceiveBuffer.Data[0] == (byte) 104 && this.ReceiveBuffer.Data[3] == (byte) 104)
        {
          int num = (int) this.ReceiveBuffer.Data[1];
          if ((int) this.ReceiveBuffer.Data[2] == num)
          {
            this.FrameEndLen = num + 2;
            this.TempChecksum = (byte) 0;
            return true;
          }
        }
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FramingError, "Received error data.");
        ++this.MyBus.BusState.TotalErrorCounter;
        return false;
      }
      catch (TimeoutException ex)
      {
        return false;
      }
      catch (FramingErrorException ex)
      {
        return false;
      }
    }

    internal bool ReceiveHeader()
    {
      try
      {
        if (!this.MyBus.MyCom.IsOpen)
          return false;
        this.MyBus.TempDeviceInfo = new DeviceInfo();
        this.TotalReceiveBuffer.Clear();
        this.ReceiveBuffer = new ByteField(19);
        MBusDevice.MBusDeviceLogger.Trace("Start receive header");
        if (!this.MyBus.MyCom.ReceiveBlock(ref this.ReceiveBuffer, 19, true))
        {
          ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
          MBusDevice.MBusDeviceLogger.Warn("Failed receive M-Bus header! Reason: " + lastError.ToString());
          this.MyBus.MyCom.ClearWakeup();
          ++this.MyBus.BusState.TotalErrorCounter;
          return false;
        }
        this.TotalReceiveBuffer.AddRange((IEnumerable<byte>) this.ReceiveBuffer.Data);
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusWorkHeader);
        if (this.ReceiveBuffer.Data[0] == (byte) 104 && this.ReceiveBuffer.Data[3] == (byte) 104)
        {
          int num = (int) this.ReceiveBuffer.Data[1];
          if (num != 0 && (int) this.ReceiveBuffer.Data[2] == num)
          {
            this.MyBus.TempDeviceInfo.C_Field = this.ReceiveBuffer.Data[4];
            this.MyBus.TempDeviceInfo.A_Field = this.ReceiveBuffer.Data[5];
            this.MyBus.TempDeviceInfo.CI_Field = this.ReceiveBuffer.Data[6];
            long InValue = (long) this.ReceiveBuffer.Data[7] + ((long) this.ReceiveBuffer.Data[8] << 8) + ((long) this.ReceiveBuffer.Data[9] << 16) + ((long) this.ReceiveBuffer.Data[10] << 24);
            this.MyBus.TempDeviceInfo.MeterNumberOriginal = Convert.ToUInt32(InValue);
            this.MyBus.TempDeviceInfo.MeterNumber = MBusDevice.TranslateBcdToBin(InValue).ToString();
            this.MyBus.TempDeviceInfo.ManufacturerCode = (short) this.ReceiveBuffer.Data[11];
            this.MyBus.TempDeviceInfo.ManufacturerCode += (short) ((int) this.ReceiveBuffer.Data[12] << 8);
            this.MyBus.TempDeviceInfo.Manufacturer = MBusDevice.GetManufacturer(this.MyBus.TempDeviceInfo.ManufacturerCode);
            this.MyBus.TempDeviceInfo.Version = this.ReceiveBuffer.Data[13];
            this.MyBus.TempDeviceInfo.Medium = this.ReceiveBuffer.Data[14];
            this.MyBus.TempDeviceInfo.AccessNb = this.ReceiveBuffer.Data[15];
            this.MyBus.TempDeviceInfo.Status = this.ReceiveBuffer.Data[16];
            this.MyBus.TempDeviceInfo.Signature = (int) this.ReceiveBuffer.Data[17];
            this.MyBus.TempDeviceInfo.Signature += (int) this.ReceiveBuffer.Data[18] << 8;
            this.TempChecksum = (byte) 0;
            for (int index = 4; index < 19; ++index)
              this.TempChecksum += this.ReceiveBuffer.Data[index];
            this.FrameEndLen = num - 19 + 4 + 2;
            return true;
          }
        }
        string str = "Invalid M-Bus header! Buffer: " + ZR_ClassLibrary.Util.ByteArrayToHexString(this.ReceiveBuffer.Data);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, str);
        ++this.MyBus.BusState.TotalErrorCounter;
        MBusDevice.MBusDeviceLogger.Error(str);
        return false;
      }
      catch (TimeoutException ex)
      {
        return false;
      }
      catch (FramingErrorException ex)
      {
        return false;
      }
    }

    internal bool ReceiveLongframeEnd() => this.ReceiveLongframeEnd(ParameterService.GetNow());

    internal bool ReceiveLongframeEnd(DateTime LastReadingDate)
    {
      try
      {
        if (this.FrameEndLen <= 0)
          return false;
        MBusDevice.MBusDeviceLogger.Trace("Start receive longframe end. It is expected {0} bytes", this.FrameEndLen);
        this.ReceiveBuffer = new ByteField(this.FrameEndLen);
        if (this.FrameEndLen < 2 || this.FrameEndLen > 242)
        {
          string str = "Illegal mbus length. Value: " + this.FrameEndLen.ToString();
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, str);
          this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusReceiveDataError);
          MBusDevice.MBusDeviceLogger.Error(str);
        }
        else if (this.MyBus.MyCom.ReceiveBlock(ref this.ReceiveBuffer, this.FrameEndLen, true))
        {
          this.TotalReceiveBuffer.AddRange((IEnumerable<byte>) this.ReceiveBuffer.Data);
          this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusWorkData);
          for (int index = 0; index < this.FrameEndLen - 2; ++index)
            this.TempChecksum += this.ReceiveBuffer.Data[index];
          if ((int) this.TempChecksum != (int) this.ReceiveBuffer.Data[this.FrameEndLen - 2])
          {
            MBusDevice.MBusDeviceLogger.Error("Checksum error!");
            this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusChecksumError);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "MBus checksum error");
          }
          else
          {
            this.MyBus.TempDeviceInfo.DeviceType = this.Info.DeviceType;
            this.MyBus.TempDeviceInfo.LastReadingDate = LastReadingDate;
            this.Info = this.MyBus.TempDeviceInfo;
            this.MyBus.BusState.IncrementReceiveBlockCounter();
            this.MyBus.MyCom.ResetEarliestTransmitTime();
            return true;
          }
        }
        ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
        MBusDevice.MBusDeviceLogger.Error("Failed to receive end of M-Bus long frame! Reason: " + lastError.ToString());
        if (MBusDevice.MBusDeviceLogger.IsTraceEnabled)
        {
          MBusDevice.MBusDeviceLogger.Trace("Received data: {0}", ZR_ClassLibrary.Util.ByteArrayToHexString(this.ReceiveBuffer.Data, 0, this.ReceiveBuffer.Count));
          MBusDevice.MBusDeviceLogger.Trace("Received size: {0}", this.ReceiveBuffer.Count);
          MBusDevice.MBusDeviceLogger.Trace("Required size: {0}", this.FrameEndLen);
        }
        ++this.MyBus.BusState.TotalErrorCounter;
        return false;
      }
      catch (TimeoutException ex)
      {
        return false;
      }
      catch (FramingErrorException ex)
      {
        return false;
      }
    }

    internal bool DeselectDevice()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SEND_NKE);
      ByteField DataBlock = new ByteField(5);
      DataBlock.Add(16);
      DataBlock.Add(64);
      DataBlock.Add(253);
      DataBlock.Add((byte) 61);
      DataBlock.Add(22);
      if (!this.MyBus.MyCom.Open())
        return false;
      int maxRequestRepeat = this.MyBus.MaxRequestRepeat;
      while (maxRequestRepeat > 0 && !this.MyBus.BreakRequest)
      {
        MBusDevice.MBusDeviceLogger.Info<int, int>("Try deselect M-Bus device. Repeats {0} of {1}", this.MyBus.MaxRequestRepeat - maxRequestRepeat + 1, this.MyBus.MaxRequestRepeat);
        this.MyBus.MyCom.WaitToEarliestTransmitTime();
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSendSND_NKE);
        if (MBusDevice.MBusDeviceLogger.IsTraceEnabled)
          MBusDevice.MBusDeviceLogger.Trace<string, int>("DESELECT M-BUS DEVICE : {0}, Size: {1}", ZR_ClassLibrary.Util.ByteArrayToHexString(DataBlock.Data, 0, DataBlock.Count), DataBlock.Count);
        this.MyBus.MyCom.TransmitBlock(ref DataBlock);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          if (this.TryDisposeDataFromInputBufferAndKeepErrorMessage())
          {
            MBusDevice.MBusDeviceLogger.Warn("Failed deselected the device! Unexpected data received!");
            ZR_ClassLibMessages.ClearErrors();
            return false;
          }
          MBusDevice.MBusDeviceLogger.Info("Successfully deselected the device!");
          ZR_ClassLibMessages.ClearErrors();
          return true;
        }
        ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
        MBusDevice.MBusDeviceLogger.Warn("Failed deselected the device! Reason: " + lastError.ToString());
        switch (lastError)
        {
          case ZR_ClassLibMessages.LastErrors.NoError:
          case ZR_ClassLibMessages.LastErrors.Timeout:
            ZR_ClassLibMessages.ClearErrors();
            return true;
          case ZR_ClassLibMessages.LastErrors.FramingError:
          case ZR_ClassLibMessages.LastErrors.IllegalData:
            this.TryDisposeDataFromInputBufferAndKeepErrorMessage();
            --maxRequestRepeat;
            if (MBusDevice.MBusDeviceLogger.IsDebugEnabled)
              MBusDevice.MBusDeviceLogger.Debug("Application.DoEvents() -> DeselectDevice");
            Application.DoEvents();
            continue;
          default:
            return false;
        }
      }
      ZR_ClassLibMessages.ClearErrors();
      return true;
    }

    internal bool ReceiveOkNok()
    {
      try
      {
        ByteField DataBlock = new ByteField(1);
        ZR_ClassLibMessages.ClearErrors();
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          MBusDevice.MBusDeviceLogger.Trace("NACK (Timeout or frame error)");
          ++this.MyBus.BusState.TotalErrorCounter;
          return false;
        }
        if (DataBlock.Data[0] == (byte) 229)
        {
          this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusReceiveOK);
          MBusDevice.MBusDeviceLogger.Trace("ACK received Buffer: E5");
          this.MyBus.BusState.IncrementReceiveBlockCounter();
          this.MyBus.MyCom.ResetEarliestTransmitTime();
          return true;
        }
        if (DataBlock.Data[0] == (byte) 26)
        {
          this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusReceiveNOK);
          MBusDevice.MBusDeviceLogger.Trace("NACK received Buffer: 1A");
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NAK_Received);
          ++this.MyBus.BusState.TotalErrorCounter;
          return false;
        }
        MBusDevice.MBusDeviceLogger.Trace("NACK (Data received but not ACK) Buffer: " + DataBlock.Data[0].ToString("X02"));
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "OK expectad but not received");
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusReceiveNOK);
        ++this.MyBus.BusState.TotalErrorCounter;
        return false;
      }
      catch (TimeoutException ex)
      {
        return false;
      }
      catch (FramingErrorException ex)
      {
        return false;
      }
    }

    public static string GetManufacturer(short ManufacturerCode)
    {
      return "" + ((char) (((int) ManufacturerCode >> 10 & 31) + 64)).ToString() + ((char) (((int) ManufacturerCode >> 5 & 31) + 64)).ToString() + ((char) (((int) ManufacturerCode & 31) + 64)).ToString();
    }

    public static ushort GetManufacturerCode(string Manufacturer)
    {
      return (ushort) ((uint) (ushort) ((uint) (ushort) (0U + (uint) (ushort) ((uint) (byte) Manufacturer[2] - 64U)) + (uint) (ushort) ((uint) (ushort) ((uint) (byte) Manufacturer[1] - 64U) << 5)) + (uint) (ushort) ((uint) (ushort) ((uint) (byte) Manufacturer[0] - 64U) << 10));
    }

    internal static bool StringToMBusSerialNumber(string SerialNumberIn, out uint SerialNumberOut)
    {
      SerialNumberIn.Trim();
      SerialNumberIn = SerialNumberIn.ToUpper();
      SerialNumberOut = 0U;
      while (SerialNumberIn.Length > 0)
      {
        SerialNumberOut <<= 4;
        uint num = (uint) SerialNumberIn[0] - 48U;
        if (num < 0U || num > 9U)
        {
          if (num != 22U)
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal serial number for secundare addressing", MBusDevice.MBusDeviceLogger);
          num = 15U;
        }
        SerialNumberIn = SerialNumberIn.Remove(0, 1);
        SerialNumberOut += num;
      }
      return true;
    }

    public bool SerchBaudrate()
    {
      ArrayList ParameterList = new ArrayList();
      this.MyBus.MyCom.GetCommParameter(ref ParameterList);
      int index;
      for (index = 0; index < ParameterList.Count; index += 2)
      {
        if ((string) ParameterList[index] == "Baudrate")
        {
          ++index;
          break;
        }
      }
      if ((index & 1) != 1)
        return false;
      string str = (string) ParameterList[index];
      int maxRequestRepeat = this.MyBus.MaxRequestRepeat;
      this.MyBus.MaxRequestRepeat = 1;
      bool flag = this.REQ_UD2();
      if (!flag)
      {
        ParameterList[index] = !(str == "2400") ? (object) "2400" : (object) "9600";
        this.MyBus.MyCom.SetCommParameter(ParameterList);
        flag = this.REQ_UD2();
      }
      this.MyBus.MaxRequestRepeat = maxRequestRepeat;
      if (flag)
        return true;
      ParameterList[index] = (object) str;
      this.MyBus.MyCom.SetCommParameter(ParameterList);
      return false;
    }

    internal bool GarantAddressingPossible()
    {
      if (!this.AddressingPossible())
      {
        uint SerialNumberOut;
        if (!MBusDevice.StringToMBusSerialNumber(this.Info.MeterNumber, out SerialNumberOut))
          return false;
        if (!this.MyBus.FastSecondaryAddressing)
          this.DeselectDevice();
        if (!this.SelectDeviceOnBus(SerialNumberOut, ushort.MaxValue, byte.MaxValue, byte.MaxValue))
          return false;
      }
      return true;
    }

    public bool REQ_UD2() => this.REQ_UD2(ParameterService.GetNow());

    public bool REQ_UD2(DateTime timePoint)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MBus))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for M-Bus!");
        return false;
      }
      if (this.MyBus.MyCom.Open())
      {
        this.Info.LastReadingDate = timePoint;
        if (this.GarantAddressingPossible())
        {
          this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.REQ_UD2);
          this.GenerateREQ_UD2();
          for (int maxRequestRepeat = this.MyBus.MaxRequestRepeat; maxRequestRepeat > 0 && !this.MyBus.BreakRequest; --maxRequestRepeat)
          {
            MBusDevice.MBusDeviceLogger.Info<int, int>("Try REQ_UD2. Repeats {0} of {1}", this.MyBus.MaxRequestRepeat - maxRequestRepeat + 1, this.MyBus.MaxRequestRepeat);
            this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSendREQ_UD2);
            if (MBusDevice.MBusDeviceLogger.IsTraceEnabled)
              MBusDevice.MBusDeviceLogger.Trace("REQ_UD2: {0}", ZR_ClassLibrary.Util.ByteArrayToHexString(this.TransmitBuffer.Data, 0, this.TransmitBuffer.Count));
            this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
            this.MyBus.BusState.IncrementTransmitBlockCounter();
            if (this.ReceiveHeader())
            {
              if (this.ReceiveLongframeEnd(timePoint))
              {
                this.GenerateParameterList(true);
                MBusDevice.MBusDeviceLogger.Info("M-Bus device found! -------------------------------------> Serialnumber: {0}", this.Info.MeterNumber);
                this.Info.ParameterOk = true;
                ZR_ClassLibMessages.ClearErrorText();
                if (this.Info.Manufacturer == "ZRI" && this.Info.Version == (byte) 2)
                  this.DeviceType = DeviceTypes.EDC;
                return true;
              }
              this.TryDisposeDataFromInputBufferAndKeepErrorMessage();
            }
            else
              this.TryDisposeDataFromInputBufferAndKeepErrorMessage();
          }
        }
      }
      this.Info.ParameterOk = false;
      this.GenerateParameterList(false);
      return false;
    }

    private bool TryDisposeDataFromInputBufferAndKeepErrorMessage()
    {
      ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
      if (lastError != ZR_ClassLibMessages.LastErrors.FramingError && lastError != ZR_ClassLibMessages.LastErrors.IllegalData)
        return false;
      ByteField DataBlock = new ByteField(1);
      if (this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
      {
        byte[] buffer;
        this.MyBus.MyCom.TryReceiveBlock(out buffer);
        string message = "Dispose data from input buffer! Buffer: " + DataBlock.Data[0].ToString("X2") + ZR_ClassLibrary.Util.ByteArrayToHexString(buffer);
        MBusDevice.MBusDeviceLogger.Error(message);
      }
      ZR_ClassLibMessages.AddErrorDescription(lastError);
      return true;
    }

    public bool MeterApplicationReset()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ApplicationReset);
      this.TransmitBuffer = new ByteField(270);
      byte primaryAddress = this.GetPrimaryAddress();
      this.TransmitBuffer.Add(104);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(104);
      this.TransmitBuffer.Add(83);
      this.TransmitBuffer.Add(primaryAddress);
      this.TransmitBuffer.Add(80);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        MBusDevice.MBusDeviceLogger.Debug("Send application reset");
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusApplicationReset);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
      }
      return false;
    }

    public bool SelectAllParameter()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SelectAllParameter);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add((int) sbyte.MaxValue);
      this.TransmitBuffer.Add(126);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        MBusDevice.MBusDeviceLogger.Debug("Select all parameter");
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSetAllParameters);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
      }
      return false;
    }

    internal override bool WriteDueDateMonth(ushort month)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteDueDateMonth);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add((int) month);
      this.TransmitBuffer.Add(33);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        MBusDevice.MBusDeviceLogger.Debug("Write DueDateMonth");
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.WriteDueDateMonth);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
        if (ZR_ClassLibMessages.GetLastError() != ZR_ClassLibMessages.LastErrors.NAK_Received)
          ;
      }
      return false;
    }

    internal override bool SelectParameterList(int ListNumber, int function)
    {
      return this.SelectParameterListWork(ListNumber, function);
    }

    internal bool SelectParameterListWork(int ListNumber, int function)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SelectParameterList);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(ParameterListInfo.GetCommandPayload((ushort) ListNumber, function > 0));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        MBusDevice.MBusDeviceLogger.Debug("Select parameter list");
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSetAllParameters);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
        if (ZR_ClassLibMessages.GetLastError() != ZR_ClassLibMessages.LastErrors.NAK_Received)
          ;
      }
      return false;
    }

    public bool SetBaudrate(int Baudrate)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SetBaudrate);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      switch (Baudrate)
      {
        case 300:
          this.TransmitBuffer.Data[6] = (byte) 184;
          break;
        case 600:
          this.TransmitBuffer.Data[6] = (byte) 185;
          break;
        case 1200:
          this.TransmitBuffer.Data[6] = (byte) 186;
          break;
        case 2400:
          this.TransmitBuffer.Data[6] = (byte) 187;
          break;
        case 4800:
          this.TransmitBuffer.Data[6] = (byte) 188;
          break;
        case 9600:
          this.TransmitBuffer.Data[6] = (byte) 189;
          break;
        case 19200:
          this.TransmitBuffer.Data[6] = (byte) 190;
          break;
        case 38400:
          this.TransmitBuffer.Data[6] = (byte) 191;
          break;
        default:
          return false;
      }
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        MBusDevice.MBusDeviceLogger.Debug("Set baudrate");
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSendREQ_UD2);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
      }
      return false;
    }

    public bool SelectDeviceOnBus(
      uint BCD_SerialNr,
      ushort Manufacturer,
      byte Generation,
      byte Medium)
    {
      MBusDevice mbusDevice = this;
      for (int index = 0; index < this.MyBus.MyDeviceList.bus.Count; ++index)
      {
        MBusDevice bu = (MBusDevice) this.MyBus.MyDeviceList.bus[index];
        if (bu.IsSelectedOnBus)
        {
          mbusDevice = bu;
          bu.IsSelectedOnBus = false;
        }
      }
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SelectDevice);
      this.TransmitBuffer = new ByteField(270);
      this.TransmitBuffer.Add(104);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(104);
      this.TransmitBuffer.Add(83);
      this.TransmitBuffer.Add(253);
      this.TransmitBuffer.Add(82);
      this.TransmitBuffer.Add((int) (byte) BCD_SerialNr & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) (byte) (BCD_SerialNr >> 8) & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) (byte) (BCD_SerialNr >> 16) & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) (byte) (BCD_SerialNr >> 24) & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) (byte) Manufacturer & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) (byte) ((uint) Manufacturer >> 8) & (int) byte.MaxValue);
      this.TransmitBuffer.Add(Generation);
      this.TransmitBuffer.Add(Medium);
      this.FinishLongFrame();
      for (int maxRequestRepeat = this.MyBus.MaxRequestRepeat; maxRequestRepeat > 0 && !this.MyBus.BreakRequest; --maxRequestRepeat)
      {
        MBusDevice.MBusDeviceLogger.Info<int, int>("Try select device. Repeats {0} of {1}", this.MyBus.MaxRequestRepeat - maxRequestRepeat + 1, this.MyBus.MaxRequestRepeat);
        if (!this.MyBus.MyCom.Open())
          return false;
        this.MyBus.MyCom.WaitToEarliestTransmitTime();
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSelectDevice);
        if (MBusDevice.MBusDeviceLogger.IsTraceEnabled)
          MBusDevice.MBusDeviceLogger.Trace("SELECT MBUS DEVICE: {0}", ZR_ClassLibrary.Util.ByteArrayToHexString(this.TransmitBuffer.Data, 0, this.TransmitBuffer.Count));
        if (maxRequestRepeat != this.MyBus.MaxRequestRepeat)
          this.MyBus.SendMessage(new GMM_EventArgs(string.Format("{0} Attempt {1} of {2}", (object) BCD_SerialNr.ToString("X08"), (object) (this.MyBus.MaxRequestRepeat - maxRequestRepeat), (object) this.MyBus.MaxRequestRepeat)));
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
          return false;
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          if (this.MyBus.BusState.GlobalFunctionTask != BusStatusClass.GlobalFunctionTasks.ScanSecundary)
          {
            ZR_ClassLibMessages.ClearErrors();
            this.IsSelectedOnBus = true;
            return true;
          }
          ByteField DataBlock = new ByteField(1);
          if (this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            MBusDevice.MBusDeviceLogger.Error("Disposed a byte after selection! Byte: 0x{0}", DataBlock.Data[0].ToString("X2"));
            this.TryDisposeDataFromInputBufferAndKeepErrorMessage();
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
            this.IsSelectedOnBus = false;
            return false;
          }
          switch (ZR_ClassLibMessages.GetLastError())
          {
            case ZR_ClassLibMessages.LastErrors.NoError:
            case ZR_ClassLibMessages.LastErrors.Timeout:
              ZR_ClassLibMessages.ClearErrors();
              this.IsSelectedOnBus = true;
              MBusDevice.MBusDeviceLogger.Info("Successfull selected the device!");
              return true;
            default:
              this.IsSelectedOnBus = false;
              this.TryDisposeDataFromInputBufferAndKeepErrorMessage();
              return false;
          }
        }
        else
        {
          this.IsSelectedOnBus = false;
          ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
          MBusDevice.MBusDeviceLogger.Warn("Failed select the device on bus! Reason: " + lastError.ToString());
          if (lastError != ZR_ClassLibMessages.LastErrors.Timeout)
          {
            this.IsSelectedOnBus = false;
            this.TryDisposeDataFromInputBufferAndKeepErrorMessage();
            bool flag1 = BCD_SerialNr.ToString("X08").StartsWith("F");
            bool flag2 = BCD_SerialNr.ToString("X08").EndsWith("F");
            if (flag1 || flag2)
              return false;
          }
        }
      }
      return this.IsSelectedOnBus;
    }

    public bool SetPrimaryAddress(int PrimaryAddress)
    {
      if (!this.MyBus.MyCom.Open() || !this.GarantAddressingPossible())
        return false;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SetPrimaryAddress);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(1);
      this.TransmitBuffer.Add(122);
      this.TransmitBuffer.Add(PrimaryAddress);
      this.FinishLongFrame();
      this.MyBus.MyCom.SetAnswerOffsetTime(500);
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        MBusDevice.MBusDeviceLogger.Debug("Select primary address.");
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSendREQ_UD2);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          this.PrimaryAddressKnown = true;
          this.PrimaryDeviceAddress = (byte) PrimaryAddress;
          this.Info.EraseParameter("RADR");
          this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("RADR", this.PrimaryDeviceAddress.ToString()));
          flag = true;
          ZR_ClassLibMessages.ClearErrorText();
          break;
        }
      }
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      return flag;
    }

    public static bool GetZR_MBusLoggerDivVif(ref long DifVif, ref short DivVifSize)
    {
      byte num1 = 0;
      int num2 = 0;
      int num3 = 0;
      int num4 = 0;
      long num5 = 0;
      bool flag1 = true;
      bool flag2 = true;
      byte num6 = 1;
      byte num7 = 0;
      byte num8 = 0;
      byte num9 = 0;
      if (DivVifSize < (short) 2)
        return false;
      while (DivVifSize > (short) 0)
      {
        byte num10 = (byte) ((ulong) DifVif & (ulong) byte.MaxValue);
        if (flag2)
        {
          flag2 = false;
          if (((int) num10 & 128) == 0)
            flag1 = false;
          if (((int) num10 & 64) == 64)
            num2 = 1;
          num1 = (byte) ((uint) num10 & 63U);
        }
        else if (flag1)
        {
          if (((int) num10 & 128) == 0)
            flag1 = false;
          int num11 = ((int) num10 & 15) << (int) num6;
          byte num12 = (byte) ((uint) num6 + 4U);
          num2 |= num11;
          int num13 = ((int) num10 & 48) >> 4 << (int) num7;
          num6 = (byte) ((uint) num12 + 2U);
          num3 |= num13;
          int num14 = ((int) num10 & 48) >> 6 << (int) num8;
          ++num8;
          num4 |= num14;
        }
        else
        {
          num5 = DifVif;
          num9 = (byte) DivVifSize;
          break;
        }
        DifVif >>= 8;
        --DivVifSize;
      }
      if (num2 > 2 || num4 > 0 || num5 == 122L || num5 == 121L)
        return false;
      int num15 = num2;
      int num16 = 32;
      byte num17 = 0;
      DifVif = 0L;
      DivVifSize = (short) 0;
      while (true)
      {
        if (num17 == (byte) 0)
        {
          DifVif = (long) (128 | (int) num1);
          num17 = (byte) 1;
          num16 >>= 1;
          num5 <<= 8;
          ++DivVifSize;
        }
        else if (num15 > 0 || num16 > 0 || num3 > 0)
        {
          long num18 = (long) (num16 & 15 | (num3 & 3) << 4 | (num15 & 1) << 6);
          num16 >>= 4;
          num3 >>= 1;
          num15 >>= 1;
          if (num15 > 0 || num16 > 0 || num3 > 0)
            num18 |= 128L;
          DifVif |= num18 << (int) DivVifSize * 8;
          num5 <<= 8;
          ++DivVifSize;
        }
        else
          break;
      }
      DifVif |= num5;
      DivVifSize += (short) num9;
      return true;
    }

    public static bool GetZR_MBusParameterID(
      long DifVifs,
      short DifVifSize,
      out string ZR_MBusParameterID,
      out string ParamUnit,
      out int UnitExponent)
    {
      byte[] DifVifList = new byte[(int) DifVifSize];
      for (int index = 0; index < (int) DifVifSize; ++index)
      {
        DifVifList[index] = (byte) ((ulong) DifVifs & (ulong) byte.MaxValue);
        DifVifs >>= 8;
      }
      return MBusDevice.GetZR_MBusParameterID(DifVifList, out ZR_MBusParameterID, out ParamUnit, out UnitExponent);
    }

    public static string GetZR_MBusParameterID(byte[] DifVifList)
    {
      if (DifVifList == null || DifVifList.Length == 0)
        return string.Empty;
      string ZR_MBusParameterID;
      MBusDevice.GetZR_MBusParameterID(DifVifList, out ZR_MBusParameterID, out string _, out int _);
      return ZR_MBusParameterID;
    }

    private static bool GetZR_MBusParameterID(
      byte[] DifVifList,
      out string ZR_MBusParameterID,
      out string ParamUnit,
      out int UnitExponent)
    {
      MBusDevice.ParamScannerValues s = new MBusDevice.ParamScannerValues();
      s.readBuffer = DifVifList;
      s.usedBytesInBuffer = DifVifList.Length;
      s.Clear();
      bool zrMbusParameterId = MBusDevice.ScanDif(ref s);
      if (zrMbusParameterId && !s.NoVIF)
        zrMbusParameterId = MBusDevice.ScanVif(ref s);
      if (s.paramError)
        s.ZDF_StringBuilder.Append("_ParamErr");
      ZR_MBusParameterID = s.ZDF_String;
      ParamUnit = s.unitText;
      UnitExponent = s.unitExponent;
      return zrMbusParameterId;
    }

    internal bool GenerateParameterList(bool OkList)
    {
      bool parameterList = false;
      this.Info.ParameterList.Clear();
      this.Info.ParameterListWithoutValues.Clear();
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("RTIME", this.Info.LastReadingDate.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern)));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", this.Info.MeterNumber));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("MAN", this.Info.Manufacturer));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("GEN", this.Info.Version.ToString()));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("MED", this.Info.MediumString));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("RADR", this.Info.A_Field.ToString()));
      if (!OkList)
      {
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("R_ERR", this.Info.A_Field.ToString()));
      }
      else
      {
        this.followingTelegrammAnnounced = false;
        this.scannerValues.readBuffer = this.ReceiveBuffer.Data;
        this.scannerValues.usedBytesInBuffer = this.ReceiveBuffer.Count - 2;
        this.scannerValues.followingTelegrammAnnounced = false;
        this.scannerValues.breakParameterLoop = false;
        this.scannerValues.readBufferOffset = 0;
        while (this.scannerValues.readBufferOffset < this.scannerValues.usedBytesInBuffer && !this.scannerValues.breakParameterLoop)
        {
          if (this.scannerValues.readBuffer[this.scannerValues.readBufferOffset] == (byte) 47)
            ++this.scannerValues.readBufferOffset;
          else if (MBusDevice.ScanMBusParameter(ref this.scannerValues, this.Info.ParameterList))
          {
            if (this.scannerValues.ZDF_StringBuilder.Length > 0)
            {
              if (this.scannerValues.isType)
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct(this.scannerValues.ZDF_String, MBusDevice.GetMediaString(byte.Parse(this.scannerValues.PValue.ToString()))));
              else
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct(this.scannerValues.ZDF_String, this.scannerValues.PValue.ToString()));
              this.Info.ParameterListWithoutValues.Add(this.scannerValues.ZDF_String.Replace("_ERR", string.Empty));
            }
          }
          else
            break;
        }
        if (this.scannerValues.followingTelegrammAnnounced)
          this.followingTelegrammAnnounced = true;
        parameterList = true;
      }
      return parameterList;
    }

    internal static bool ScanMBusParameter(
      ref MBusDevice.ParamScannerValues s,
      List<DeviceInfo.MBusParamStruct> parameter)
    {
      s.Clear();
      bool flag = MBusDevice.ScanDif(ref s);
      if (flag && !s.NoVIF)
        flag = MBusDevice.ScanVif(ref s);
      if (flag && !s.NoValue)
        MBusDevice.ScanValue(ref s, parameter);
      int num = -1;
      if (s.paramError)
      {
        s.ZDF_StringBuilder.Append("_ParamErr");
        num = s.readBufferStartOffset;
      }
      if (s.addAdditionalData)
        num = s.readBufferOffset;
      if (num >= 0)
      {
        s.PValue.Length = 0;
        s.readBufferOffset = num;
        while (s.readBufferOffset < s.usedBytesInBuffer)
        {
          if (!s.GetNextByte())
            return false;
          s.PValue.Append(s.actualByte.ToString("x02") + " ");
        }
      }
      return true;
    }

    private static bool ScanDif(ref MBusDevice.ParamScannerValues s)
    {
      int num = 0;
      s.readBufferStartOffset = s.readBufferOffset;
      while (s.GetNextByte())
      {
        if (num == 0)
        {
          if (s.actualByte == (byte) 15 || s.actualByte == (byte) 31)
          {
            if (s.readBufferOffset < s.usedBytesInBuffer)
            {
              s.ZDF_StringBuilder.Append("ManSpec");
              s.addAdditionalData = true;
            }
            s.NoVIF = true;
            s.NoValue = true;
            s.breakParameterLoop = true;
            if (s.actualByte == (byte) 31)
              s.followingTelegrammAnnounced = true;
            return true;
          }
          s.storageNumber = ((int) s.actualByte & 64) >> 6;
          s.functionCode = (MBusDevice.FunctionCode) (((int) s.actualByte & 48) >> 4);
          s.parameterCoding = MBusDevice.DifParamCodeTable[(int) s.actualByte & 15];
          s.parameterLength = MBusDevice.DifLengthTable[(int) s.actualByte & 15];
        }
        else
        {
          if (num > 8)
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal number of DIV values", MBusDevice.MBusDeviceLogger);
          s.storageNumber += ((int) s.actualByte & 15) << num * 4 - 3;
          s.tarifNumber += ((int) s.actualByte & 48) >> 4 << num * 2 - 2;
          s.unitNumber += ((int) s.actualByte & 64) >> 6 << num - 1;
        }
        ++num;
        if (((uint) s.actualByte & 128U) <= 0U)
          return true;
      }
      return false;
    }

    private static bool ScanVif(ref MBusDevice.ParamScannerValues s)
    {
      if (!s.GetNextByte())
        return false;
      if (s.actualByte == (byte) 253)
      {
        if (!s.GetNextByte())
          return false;
        int index = (int) s.actualByte & (int) sbyte.MaxValue;
        s.ZDF_StringBuilder.Append(MBusDevice.VifEList_0xFD[index].VifString);
        s.unitText = MBusDevice.VifEList_0xFD[index].VifUnit;
        s.unitExponent = MBusDevice.VifEList_0xFD[index].VifExponent;
        s.fixStringSize = MBusDevice.VifEList_0xFD[index].FixStringSize;
        s.isHexValue = MBusDevice.VifEList_0xFD[index].IsHexValue;
        if (!MBusDevice.ScanOrtogonalVif(ref s))
          return false;
      }
      else if (s.actualByte == (byte) 251)
      {
        if (!s.GetNextByte())
          return false;
        int index = (int) s.actualByte & (int) sbyte.MaxValue;
        s.ZDF_StringBuilder.Append(MBusDevice.VifEList_0xFB[index].VifString);
        s.unitText = MBusDevice.VifEList_0xFB[index].VifUnit;
        s.unitExponent = MBusDevice.VifEList_0xFB[index].VifExponent;
        s.fixStringSize = MBusDevice.VifEList_0xFB[index].FixStringSize;
        if (!MBusDevice.ScanOrtogonalVif(ref s))
          return false;
      }
      else if (s.actualByte == (byte) 252 || s.actualByte == (byte) 124)
      {
        byte actualByte1 = s.actualByte;
        int index = (int) actualByte1 & (int) sbyte.MaxValue;
        s.ZDF_StringBuilder.Append(MBusDevice.VifEList_0xFB[index].VifString);
        s.unitText = MBusDevice.VifEList_0xFB[index].VifUnit;
        s.unitExponent = MBusDevice.VifEList_0xFB[index].VifExponent;
        s.fixStringSize = MBusDevice.VifEList_0xFB[index].FixStringSize;
        if (!s.GetNextByte())
          return false;
        byte actualByte2 = s.actualByte;
        s.ZDF_StringBuilder.Append(ZR_ClassLibrary.Util.ReverseString(Encoding.ASCII.GetString(s.readBuffer, s.readBufferOffset, (int) actualByte2)));
        s.readBufferOffset += (int) actualByte2;
        s.actualByte = actualByte1;
        if (!MBusDevice.ScanOrtogonalVif(ref s))
          return false;
      }
      else
      {
        int index = (int) s.actualByte & (int) sbyte.MaxValue;
        s.ZDF_StringBuilder.Append(MBusDevice.VifList[index].VifString);
        s.unitExponent = MBusDevice.VifList[index].VifExponent;
        s.fixStringSize = MBusDevice.VifList[index].FixStringSize;
        if (index == (int) sbyte.MaxValue)
        {
          s.ZDF_StringBuilder.Append("ManSpec");
          s.addAdditionalData = true;
          s.NoValue = true;
          s.breakParameterLoop = true;
        }
        else if (!MBusDevice.ScanOrtogonalVif(ref s))
          return false;
      }
      if (s.ZDF_String == "TYPE")
        s.isType = true;
      if (s.storageNumber > 0 || s.unitNumber > 0)
        s.ZDF_StringBuilder.Append("[" + s.storageNumber.ToString() + "]");
      if (s.unitNumber > 0)
        s.ZDF_StringBuilder.Append("[" + s.unitNumber.ToString() + "]");
      if (s.functionCode == MBusDevice.FunctionCode.MaximumValue)
        s.ZDF_StringBuilder.Append("_MAX");
      else if (s.functionCode == MBusDevice.FunctionCode.MinimumValue)
        s.ZDF_StringBuilder.Append("_MIN");
      else if (s.functionCode == MBusDevice.FunctionCode.ValueDuringError)
        s.ZDF_StringBuilder.Append("_ERR");
      if (s.tarifNumber > 0)
        s.ZDF_StringBuilder.Append("_TAR[" + s.tarifNumber.ToString() + "]");
      return true;
    }

    private static bool ScanOrtogonalVif(ref MBusDevice.ParamScannerValues s)
    {
      s.isDateTime = s.ZDF_String.StartsWith("TIMP");
      bool flag = false;
      while (((uint) s.actualByte & 128U) > 0U)
      {
        if (!s.GetNextByte())
          return false;
        s.lastVIFE = s.actualByte;
        int index = (int) s.actualByte & (int) sbyte.MaxValue;
        if (flag)
        {
          s.ZDF_StringBuilder.Append(index.ToString("x02"));
        }
        else
        {
          s.ZDF_StringBuilder.Append(MBusDevice.VifEListOrto[index].VifStringToAdd);
          s.unitExponent += MBusDevice.VifEListOrto[index].VifExponentToAdd;
          if (MBusDevice.VifEListOrto[index].IsDateTimeValue)
            s.isDateTime = true;
          if (index == (int) sbyte.MaxValue)
            flag = true;
        }
      }
      return true;
    }

    private static bool ScanValue(
      ref MBusDevice.ParamScannerValues s,
      List<DeviceInfo.MBusParamStruct> parameter)
    {
      switch (s.parameterCoding)
      {
        case MBusDevice.ParamCode.Int:
          if (s.isDateTime)
          {
            if (s.parameterLength == 2)
            {
              if (!s.GetNextByte())
                return false;
              int actualByte = (int) s.actualByte;
              if (!s.GetNextByte())
                return false;
              int num1 = actualByte + ((int) s.actualByte << 8);
              if (num1 != (int) ushort.MaxValue)
              {
                StringBuilder pvalue1 = s.PValue;
                int num2 = num1 & 31;
                string str1 = num2.ToString("d02") + ".";
                pvalue1.Append(str1);
                StringBuilder pvalue2 = s.PValue;
                num2 = (num1 & 3840) >> 8;
                string str2 = num2.ToString("d02") + ".";
                pvalue2.Append(str2);
                int num3 = (num1 & 224) >> 5 | (num1 & 61440) >> 9;
                int num4 = num3 < 80 ? num3 + 2000 : num3 + 1900;
                s.PValue.Append(num4.ToString("d04"));
                break;
              }
              break;
            }
            if (s.parameterLength == 4)
            {
              if (!s.GetNextByte())
                return false;
              int actualByte1 = (int) s.actualByte;
              if (!s.GetNextByte())
                return false;
              int num5 = actualByte1 + ((int) s.actualByte << 8);
              if ((num5 & 128) != 0)
              {
                s.readBufferOffset += 2;
                s.PValue.Append("01.01.1980 00:00");
                break;
              }
              s.PValue.Append(((num5 & 7936) >> 8).ToString("d02") + ":");
              StringBuilder pvalue3 = s.PValue;
              int num6 = num5 & 63;
              string str3 = num6.ToString("d02");
              pvalue3.Append(str3);
              if (!s.GetNextByte())
                return false;
              int actualByte2 = (int) s.actualByte;
              if (!s.GetNextByte())
                return false;
              int num7 = actualByte2 + ((int) s.actualByte << 8);
              int num8 = (num7 & 224) >> 5 | (num7 & 61440) >> 9;
              int num9 = num8 < 80 ? num8 + 2000 : num8 + 1900;
              s.PValue.Insert(0, num9.ToString("d04") + " ");
              StringBuilder pvalue4 = s.PValue;
              num6 = (num7 & 3840) >> 8;
              string str4 = num6.ToString("d02") + ".";
              pvalue4.Insert(0, str4);
              StringBuilder pvalue5 = s.PValue;
              num6 = num7 & 31;
              string str5 = num6.ToString("d02") + ".";
              pvalue5.Insert(0, str5);
              break;
            }
            if (s.parameterLength == 6)
            {
              if (!s.GetNextByte())
                return false;
              int actualByte3 = (int) s.actualByte;
              if (!s.GetNextByte())
                return false;
              int num10 = actualByte3 + ((int) s.actualByte << 8);
              if (!s.GetNextByte())
                return false;
              int num11 = num10 + ((int) s.actualByte << 16);
              if ((num11 & 32768) != 0)
              {
                s.readBufferOffset += 3;
                s.PValue.Append("01.01.1980 00:00");
                break;
              }
              s.PValue.Append(((num11 & 2031616) >> 16).ToString("d02") + ":");
              s.PValue.Append(((num11 & 16128) >> 8).ToString("d02") + ":");
              StringBuilder pvalue6 = s.PValue;
              int num12 = num11 & 63;
              string str6 = num12.ToString("d02");
              pvalue6.Append(str6);
              if (!s.GetNextByte())
                return false;
              int actualByte4 = (int) s.actualByte;
              if (!s.GetNextByte())
                return false;
              int num13 = actualByte4 + ((int) s.actualByte << 8);
              int num14 = (num13 & 224) >> 5 | (num13 & 61440) >> 9;
              int num15 = num14 < 80 ? num14 + 2000 : num14 + 1900;
              s.PValue.Insert(0, num15.ToString("d04") + " ");
              StringBuilder pvalue7 = s.PValue;
              num12 = (num13 & 3840) >> 8;
              string str7 = num12.ToString("d02") + ".";
              pvalue7.Insert(0, str7);
              StringBuilder pvalue8 = s.PValue;
              num12 = num13 & 31;
              string str8 = num12.ToString("d02") + ".";
              pvalue8.Insert(0, str8);
              ++s.readBufferOffset;
              break;
            }
            s.paramError = true;
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal date parameter byte size", MBusDevice.MBusDeviceLogger);
          }
          if (s.parameterLength != 1 && s.parameterLength != 2 && s.parameterLength != 3 && s.parameterLength != 4 && s.parameterLength != 6 && s.parameterLength != 8)
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Invalid parameter length detected! Value: " + s.parameterLength.ToString(), MBusDevice.MBusDeviceLogger);
          switch (s.parameterLength)
          {
            case 1:
              s.PValue.Append(s.readBuffer[s.readBufferOffset].ToString((IFormatProvider) FixedFormates.TheFormates));
              break;
            case 2:
              if (s.isHexValue)
              {
                s.PValue.Append(s.readBuffer[s.readBufferOffset + 1].ToString("X2"));
                s.PValue.Append(s.readBuffer[s.readBufferOffset].ToString("X2"));
                break;
              }
              short int16 = BitConverter.ToInt16(s.readBuffer, s.readBufferOffset);
              s.PValue.Append(int16.ToString((IFormatProvider) FixedFormates.TheFormates));
              break;
            case 3:
              int num16 = BitConverter.ToInt32(new byte[4]
              {
                (byte) 0,
                s.readBuffer[s.readBufferOffset],
                s.readBuffer[s.readBufferOffset + 1],
                s.readBuffer[s.readBufferOffset + 2]
              }, 0) >> 8;
              s.PValue.Append(num16.ToString((IFormatProvider) FixedFormates.TheFormates));
              break;
            case 4:
              if (s.readBuffer[s.readBufferOffset] == (byte) 0 && s.readBuffer[s.readBufferOffset + 1] == (byte) 0 && s.readBuffer[s.readBufferOffset + 2] == (byte) 0 && s.readBuffer[s.readBufferOffset + 3] == (byte) 128)
              {
                s.PValue.Length = 0;
                break;
              }
              int int32_1 = BitConverter.ToInt32(s.readBuffer, s.readBufferOffset);
              s.PValue.Append(int32_1.ToString((IFormatProvider) FixedFormates.TheFormates));
              break;
            case 6:
              long num17 = BitConverter.ToInt64(new byte[8]
              {
                (byte) 0,
                (byte) 0,
                s.readBuffer[s.readBufferOffset],
                s.readBuffer[s.readBufferOffset + 1],
                s.readBuffer[s.readBufferOffset + 2],
                s.readBuffer[s.readBufferOffset + 3],
                s.readBuffer[s.readBufferOffset + 4],
                s.readBuffer[s.readBufferOffset + 5]
              }, 0) >> 16;
              s.PValue.Append(num17.ToString((IFormatProvider) FixedFormates.TheFormates));
              break;
            case 8:
              long int64 = BitConverter.ToInt64(s.readBuffer, s.readBufferOffset);
              s.PValue.Append(int64.ToString((IFormatProvider) FixedFormates.TheFormates));
              break;
            default:
              throw new NotSupportedException("Invalid parameter length = " + s.parameterLength.ToString());
          }
          for (int index = 0; index < s.parameterLength; ++index)
          {
            if (!s.GetNextByte())
              return false;
          }
          break;
        case MBusDevice.ParamCode.Real:
          float single = BitConverter.ToSingle(s.readBuffer, s.readBufferOffset);
          s.readBufferOffset += 4;
          string str9 = single.ToString("F50", (IFormatProvider) FixedFormates.TheFormates);
          if (str9.IndexOf(FixedFormates.TheFormates.NumberFormat.NumberDecimalSeparator) >= 0)
            str9 = str9.TrimEnd('0');
          string str10 = str9.TrimEnd('.');
          s.PValue.Append(str10);
          break;
        case MBusDevice.ParamCode.BCD:
          for (int index1 = 0; index1 < s.parameterLength; ++index1)
          {
            if (!s.GetNextByte())
              return false;
            for (int index2 = 0; index2 < 2; ++index2)
            {
              byte num18 = index2 != 0 ? (byte) ((uint) s.actualByte >> 4) : (byte) ((uint) s.actualByte & 15U);
              if (num18 > (byte) 9)
              {
                if (index1 == s.parameterLength - 1 && index2 == 1 && num18 == (byte) 15)
                {
                  while (s.PValue[0] == '0' && s.PValue.Length > 0)
                    s.PValue = s.PValue.Remove(0, 1);
                  s.PValue.Insert(0, "-");
                }
                else if (num18 < (byte) 15 && num18 > (byte) 9)
                {
                  s.PValue.Insert(0, "!");
                }
                else
                {
                  for (++index1; index1 < s.parameterLength; ++index1)
                  {
                    if (!s.GetNextByte())
                      return false;
                  }
                  break;
                }
              }
              else
                s.PValue.Insert(0, ((char) ((uint) num18 + 48U)).ToString() ?? "");
            }
          }
          break;
        case MBusDevice.ParamCode.Variable:
          if (!s.GetNextByte())
            return false;
          int actualByte5 = (int) s.actualByte;
          if (s.lastVIFE == (byte) 31 && s.storageNumber == 8)
          {
            if (!s.GetNextByte())
              return false;
            MBusDevice.SpacingControl spacingControl = new MBusDevice.SpacingControl(s.actualByte);
            if (!s.GetNextByte())
              return false;
            byte actualByte6 = s.actualByte;
            if (spacingControl.SpaceUnit == MBusDevice.SpaceUnit.DaysOrMonths && actualByte6 == (byte) 254)
            {
              int num19 = (actualByte5 - 2) / spacingControl.Length;
              if (spacingControl.DataField == MBusDevice.ParamCode.BCD)
              {
                s.ZDF_StringBuilder.Replace("_CPWR", "");
                string referenceValueKey = s.ZDF_String;
                DeviceInfo.MBusParamStruct mbusParamStruct1 = parameter.Find((Predicate<DeviceInfo.MBusParamStruct>) (x => x.DefineString == referenceValueKey));
                string str11 = mbusParamStruct1 != null ? mbusParamStruct1.ValueString : string.Empty;
                string referenceTimeKey = "TIMP" + s.ZDF_String.Substring(s.ZDF_String.IndexOf('['));
                DeviceInfo.MBusParamStruct mbusParamStruct2 = parameter.Find((Predicate<DeviceInfo.MBusParamStruct>) (x => x.DefineString == referenceTimeKey));
                string str12 = mbusParamStruct2 != null ? mbusParamStruct2.ValueString : string.Empty;
                int length = referenceValueKey.IndexOf('[');
                int num20 = referenceValueKey.IndexOf(']');
                int int32_2 = Convert.ToInt32(referenceValueKey.Substring(length + 1, num20 - length - 1));
                string str13 = referenceValueKey.Substring(0, length);
                if (string.IsNullOrEmpty(str11))
                {
                  for (int index3 = 0; index3 < num19; ++index3)
                  {
                    for (int index4 = 0; index4 < spacingControl.Length; ++index4)
                    {
                      if (!s.GetNextByte())
                        return false;
                    }
                    List<DeviceInfo.MBusParamStruct> mbusParamStructList1 = parameter;
                    int num21 = int32_2 + index3 + 1;
                    DeviceInfo.MBusParamStruct mbusParamStruct3 = new DeviceInfo.MBusParamStruct("TIMP[" + num21.ToString() + "]", "");
                    mbusParamStructList1.Add(mbusParamStruct3);
                    List<DeviceInfo.MBusParamStruct> mbusParamStructList2 = parameter;
                    string str14 = str13;
                    num21 = int32_2 + index3 + 1;
                    string str15 = num21.ToString();
                    DeviceInfo.MBusParamStruct mbusParamStruct4 = new DeviceInfo.MBusParamStruct(str14 + "[" + str15 + "]", "");
                    mbusParamStructList2.Add(mbusParamStruct4);
                  }
                  s.ZDF_StringBuilder.Length = 0;
                  s.PValue.Length = 0;
                }
                else
                {
                  double num22 = Convert.ToDouble(str11, (IFormatProvider) FixedFormates.TheFormates);
                  DateTime dateTime = Convert.ToDateTime(str12, (IFormatProvider) FixedFormates.TheFormates);
                  if (spacingControl.IncrementMode == MBusDevice.IncrementMode.Diff)
                  {
                    List<double?> nullableList = new List<double?>();
                    double? nullable1;
                    for (int index5 = 0; index5 < num19; ++index5)
                    {
                      int? nullable2 = new int?(0);
                      byte[] numArray = new byte[spacingControl.Length];
                      for (int index6 = 0; index6 < spacingControl.Length; ++index6)
                      {
                        if (!s.GetNextByte())
                          return false;
                        numArray[index6] = s.actualByte;
                      }
                      bool flag = false;
                      for (int index7 = 0; index7 < numArray.Length; ++index7)
                      {
                        if (numArray[index7] != byte.MaxValue)
                          flag = true;
                        int num23 = (int) numArray[index7] << index7 * 8;
                        int? nullable3 = nullable2;
                        nullable2 = nullable3.HasValue ? new int?(num23 | nullable3.GetValueOrDefault()) : new int?();
                      }
                      if (flag)
                      {
                        nullable2 = new int?(ZR_ClassLibrary.Util.ConvertBcdInt32ToInt32(nullable2.Value));
                        s.PValue.Length = 0;
                        s.PValue.Append((object) nullable2);
                        MBusDevice.SetStringExpo(ref s.PValue, s.unitExponent);
                        parameter.Add(new DeviceInfo.MBusParamStruct("CP_DIFF[" + (int32_2 + index5 + 1).ToString() + "]", s.PValue.ToString()));
                        double num24 = Convert.ToDouble(s.PValue.ToString(), (IFormatProvider) FixedFormates.TheFormates);
                        if (nullableList.Count == 0)
                        {
                          double num25 = num22 + num24;
                          nullableList.Add(new double?(num25));
                        }
                        else
                        {
                          nullable1 = nullableList[nullableList.Count - 1];
                          double num26 = num24;
                          double? nullable4 = nullable1.HasValue ? new double?(nullable1.GetValueOrDefault() + num26) : new double?();
                          nullableList.Add(nullable4);
                        }
                      }
                      else
                      {
                        int? nullable5 = new int?();
                        break;
                      }
                    }
                    int num27 = str11.IndexOf(FixedFormates.TheFormates.NumberFormat.NumberDecimalSeparator);
                    int num28 = 0;
                    if (num27 > 0)
                      num28 = str11.Length - num27 - 1;
                    for (int index = 0; index < nullableList.Count; ++index)
                    {
                      nullable1 = nullableList[index];
                      if (nullable1.HasValue)
                      {
                        nullable1 = nullableList[index];
                        string str16 = nullable1.Value.ToString("F50", (IFormatProvider) FixedFormates.TheFormates);
                        if (str16.IndexOf(FixedFormates.TheFormates.NumberFormat.NumberDecimalSeparator) >= 0)
                          str16 = str16.TrimEnd('0');
                        string ValStr = str16.TrimEnd('.');
                        parameter.Add(new DeviceInfo.MBusParamStruct("TIMP[" + (int32_2 + index + 1).ToString() + "]", dateTime.AddMonths(index + 1).ToString("d", (IFormatProvider) FixedFormates.TheFormates)));
                        parameter.Add(new DeviceInfo.MBusParamStruct(str13 + "[" + (int32_2 + index + 1).ToString() + "]", ValStr));
                      }
                      else
                        break;
                    }
                    s.ZDF_StringBuilder.Length = 0;
                    s.PValue.Length = 0;
                  }
                }
              }
              break;
            }
            break;
          }
          if (actualByte5 <= 191)
          {
            for (int index = 0; index < actualByte5 && s.readBufferOffset < s.usedBytesInBuffer; ++index)
            {
              if (!s.GetNextByte())
                return false;
              s.PValue.Insert(0, new char[1]
              {
                (char) s.actualByte
              });
            }
            break;
          }
          s.paramError = true;
          return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Unknown parameter code", MBusDevice.MBusDeviceLogger);
        default:
          s.paramError = true;
          return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Unknown parameter coding. Buffer: " + ZR_ClassLibrary.Util.ByteArrayToHexString(s.readBuffer) + " Offset: " + s.readBufferOffset.ToString() + " Unknown ParameterCoding: " + s.parameterCoding.ToString() + " of " + s.ZDF_String, MBusDevice.MBusDeviceLogger);
      }
      MBusDevice.SetStringExpo(ref s.PValue, s.unitExponent);
      while (s.PValue.Length < s.fixStringSize)
        s.PValue.Insert(0, "0");
      if (s.isHexValue)
        s.PValue.Insert(0, "0x");
      return true;
    }

    private int SkipThisParameter(byte ActualByte, int InParamOffset, int ParameterLength)
    {
      while (((uint) ActualByte & 128U) > 0U)
        ActualByte = this.ReceiveBuffer.Data[InParamOffset++];
      while (ParameterLength > 0)
      {
        --ParameterLength;
        ++InParamOffset;
      }
      return InParamOffset;
    }

    public static string GetMediaString(byte Media)
    {
      try
      {
        return ((MBusDeviceType) Media).ToString();
      }
      catch
      {
      }
      return "UNKNOWN (0x" + Media.ToString("x02") + ")";
    }

    internal static long TranslateBcdToBin(long InValue)
    {
      string str = InValue.ToString("X16");
      if (str.Contains("F") || str.Contains("E") || str.Contains("D") || str.Contains("C") || str.Contains("B") || str.Contains("A"))
      {
        MBusDevice.MBusDeviceLogger.Warn("Invalid BCD value detected. Value: 0x" + InValue.ToString("X8"));
        return 0;
      }
      long num = 1;
      long bin = 0;
      for (; InValue > 0L; InValue >>= 4)
      {
        bin += (InValue & 15L) * num;
        num *= 10L;
      }
      return bin;
    }

    internal static void SetStringExpo(ref StringBuilder PValue, int UnitExponent)
    {
      string s = PValue.ToString().Trim();
      if (string.IsNullOrEmpty(s))
        return;
      if (UnitExponent != 0)
      {
        try
        {
          double num = double.Parse(s, (IFormatProvider) FixedFormates.TheFormates) * Math.Pow(10.0, (double) UnitExponent);
          if (num != 0.0)
          {
            string str1 = num.ToString("F50", (IFormatProvider) FixedFormates.TheFormates);
            if (str1.IndexOf(FixedFormates.TheFormates.NumberFormat.NumberDecimalSeparator) >= 0)
              str1 = str1.TrimEnd('0');
            string str2 = str1.TrimEnd('.');
            PValue.Length = 0;
            PValue.Append(str2);
          }
        }
        catch (Exception ex)
        {
          MBusDevice.MBusDeviceLogger.Fatal("Can not scale the PValue: '" + s + " UnitExponent: " + UnitExponent.ToString() + " ' Error: " + ex.Message);
          return;
        }
      }
      while (PValue.Length > 1)
      {
        if (PValue.ToString().Contains(".") && PValue[PValue.Length - 1] == '0' && UnitExponent < 0)
        {
          PValue.Remove(PValue.Length - 1, 1);
          ++UnitExponent;
        }
        else if (PValue[PValue.Length - 1] == '.')
        {
          PValue.Remove(PValue.Length - 1, 1);
        }
        else
        {
          if (PValue[0] != '0' || PValue[1] == '.')
            break;
          PValue.Remove(0, 1);
        }
      }
    }

    public static string ParseMBusDifVif(byte[] data)
    {
      if (data == null)
        return string.Empty;
      List<byte> byteList = new List<byte>((IEnumerable<byte>) data);
      byteList.Add((byte) 0);
      byteList.Add((byte) 0);
      MBusDevice mbusDevice = new MBusDevice();
      mbusDevice.ReceiveBuffer = new ByteField(byteList.ToArray());
      if (!mbusDevice.GenerateParameterList(true))
        return string.Empty;
      mbusDevice.Info.ParameterList.RemoveRange(0, 6);
      string zdfParameterString = mbusDevice.Info.GetZDFParameterString();
      if (zdfParameterString == "NoParameter")
        return string.Empty;
      return zdfParameterString.EndsWith(";") ? zdfParameterString : zdfParameterString + ";";
    }

    internal void SendMeterApplicationResetAsBroadcast()
    {
      if (!this.MyBus.MyCom.Open())
        return;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ApplicationReset);
      this.TransmitBuffer = new ByteField(9);
      this.TransmitBuffer.Add(104);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(104);
      this.TransmitBuffer.Add(115);
      this.TransmitBuffer.Add((int) byte.MaxValue);
      this.TransmitBuffer.Add(80);
      this.FinishLongFrame();
      MBusDevice.MBusDeviceLogger.Debug("Send application reset as broadcast");
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusApplicationReset);
      this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
      this.MyBus.BusState.IncrementTransmitBlockCounter();
    }

    internal void SND_NKE_Broadcast()
    {
      if (!this.MyBus.MyCom.Open())
        return;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SEND_NKE);
      this.TransmitBuffer = new ByteField(5);
      this.TransmitBuffer.Add(16);
      this.TransmitBuffer.Add(64);
      this.TransmitBuffer.Add((int) byte.MaxValue);
      this.TransmitBuffer.Add(63);
      this.TransmitBuffer.Add(22);
      MBusDevice.MBusDeviceLogger.Debug("Send SEND_NKE");
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSendSND_NKE);
      this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
      this.MyBus.BusState.IncrementTransmitBlockCounter();
    }

    internal void SendSynchronizeAction()
    {
      if (!this.MyBus.MyCom.Open())
        return;
      byte primaryAddress = this.GetPrimaryAddress();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SynchronizeAction);
      this.TransmitBuffer = new ByteField(9);
      this.TransmitBuffer.Add(104);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(104);
      this.TransmitBuffer.Add(115);
      this.TransmitBuffer.Add(primaryAddress);
      this.TransmitBuffer.Add(92);
      this.FinishLongFrame();
      MBusDevice.MBusDeviceLogger.Debug("Send Synchronize Action");
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSendSynchronizeAction);
      this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
      this.MyBus.BusState.IncrementTransmitBlockCounter();
      Thread.Sleep(32);
    }

    internal enum ParamCode
    {
      Int,
      Real,
      BCD,
      None,
      Special,
      Readout,
      Variable,
    }

    internal enum FunctionCode
    {
      InstantaneousValue,
      MaximumValue,
      MinimumValue,
      ValueDuringError,
    }

    private sealed class SpacingControl
    {
      private byte value;

      public MBusDevice.IncrementMode IncrementMode
      {
        get => (MBusDevice.IncrementMode) ((int) this.value >> 6);
      }

      public MBusDevice.SpaceUnit SpaceUnit
      {
        get => (MBusDevice.SpaceUnit) (((int) this.value & 48) >> 4);
      }

      public MBusDevice.ParamCode DataField => MBusDevice.DifParamCodeTable[(int) this.value & 15];

      public int Length => MBusDevice.DifLengthTable[(int) this.value & 15];

      public SpacingControl(byte value) => this.value = value;
    }

    private enum IncrementMode
    {
      Abs,
      Inc,
      Dec,
      Diff,
    }

    private enum SpaceUnit
    {
      Secounds,
      Minutes,
      Hours,
      DaysOrMonths,
    }

    public struct VifStruct
    {
      public string VifString;
      public int VifExponent;
      public int FixStringSize;
      public string VifUnit;
      public bool IsHexValue;

      public VifStruct(string Str, int Expo, int FixStringS, string UnitIn)
      {
        this.VifString = Str;
        this.VifExponent = Expo;
        this.FixStringSize = FixStringS;
        this.VifUnit = UnitIn;
        this.IsHexValue = false;
      }

      public VifStruct(string Str, int Expo, int FixStringS, string UnitIn, bool isBinary)
      {
        this.VifString = Str;
        this.VifExponent = Expo;
        this.FixStringSize = FixStringS;
        this.VifUnit = UnitIn;
        this.IsHexValue = isBinary;
      }
    }

    public struct OrtoVifStruct(
      string VifStringToAdd,
      int VifExponentToAdd,
      bool IsDateTimeValue,
      string VifUnitToAdd)
    {
      public string VifStringToAdd = VifStringToAdd;
      public int VifExponentToAdd = VifExponentToAdd;
      public bool IsDateTimeValue = IsDateTimeValue;
      public string VifUnitToAdd = VifUnitToAdd;
    }

    public enum REQ_UD2_Type : byte
    {
      REQ_UD1_5A = 90, // 0x5A
      REQ_UD2_5B = 91, // 0x5B
      REQ_UD1_7A = 122, // 0x7A
      REQ_UD2_7B = 123, // 0x7B
    }

    internal class ParamScannerValues
    {
      internal byte[] readBuffer;
      internal int usedBytesInBuffer;
      internal int readBufferStartOffset;
      internal int readBufferOffset;
      internal byte actualByte;
      internal StringBuilder ZDF_StringBuilder = new StringBuilder();
      internal byte lastVIFE;
      internal int storageNumber;
      internal int tarifNumber;
      internal int unitNumber;
      internal string unitText;
      internal MBusDevice.FunctionCode functionCode;
      internal MBusDevice.ParamCode parameterCoding;
      internal int parameterLength;
      internal bool followingTelegrammAnnounced;
      internal bool NoVIF;
      internal bool NoValue;
      internal bool breakParameterLoop;
      internal bool paramError;
      internal bool addAdditionalData;
      internal bool isType;
      internal int unitExponent;
      internal int fixStringSize;
      internal bool isDateTime;
      internal bool isHexValue;
      internal StringBuilder PValue = new StringBuilder();

      internal string ZDF_String => this.ZDF_StringBuilder.ToString();

      internal void Clear()
      {
        this.ZDF_StringBuilder.Length = 0;
        this.lastVIFE = (byte) 0;
        this.storageNumber = 0;
        this.tarifNumber = 0;
        this.unitNumber = 0;
        this.unitText = string.Empty;
        this.functionCode = MBusDevice.FunctionCode.InstantaneousValue;
        this.parameterCoding = MBusDevice.ParamCode.None;
        this.parameterLength = 0;
        this.NoVIF = false;
        this.NoValue = false;
        this.breakParameterLoop = false;
        this.paramError = false;
        this.addAdditionalData = false;
        this.isType = false;
        this.unitExponent = 0;
        this.fixStringSize = 0;
        this.isDateTime = false;
        this.isHexValue = false;
        this.PValue.Length = 0;
      }

      internal bool GetNextByte()
      {
        if (this.readBufferOffset >= this.usedBytesInBuffer)
          return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal data length by MBus parameter scanning", MBusDevice.MBusDeviceLogger);
        this.actualByte = this.readBuffer[this.readBufferOffset++];
        return true;
      }
    }
  }
}


--- MBusDeviceState.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MBusDeviceState
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

#nullable disable
namespace DeviceCollector
{
  public enum MBusDeviceState
  {
    NoError = 0,
    Busy = 1,
    AnyError = 2,
    PowerLow = 4,
    PowerLowError = 6,
    PermanentError = 10, // 0x0000000A
    TemporaryError = 18, // 0x00000012
  }
}


--- MBusDifVif.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MBusDifVif
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using System;
using System.Collections.Generic;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MBusDifVif
  {
    private static Logger loggerMBusDifVif = LogManager.GetLogger(nameof (MBusDifVif));
    public bool DifSizeUnchangable;
    private List<byte> difVifList = new List<byte>();

    public MBusDifVif()
    {
    }

    public MBusDifVif(MBusDifVif.DifVifOptions options)
    {
      if (options != MBusDifVif.DifVifOptions.DifSizeUnchangabel)
        return;
      this.DifSizeUnchangable = true;
    }

    public byte[] DifVifArray => this.difVifList.ToArray();

    public int DifByteSize
    {
      get
      {
        if (this.difVifList == null)
          return 0;
        int index = 0;
        while (((int) this.difVifList[index] & 128) != 0)
          ++index;
        return index + 1;
      }
      set
      {
        int difByteSize = this.DifByteSize;
        if (value == difByteSize)
          return;
        if (value < difByteSize)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented, "can not reduce DifByteSize");
        }
        else
        {
          for (; difByteSize < value; ++difByteSize)
          {
            this.difVifList[difByteSize - 1] |= (byte) 128;
            this.difVifList.Insert(difByteSize, (byte) 0);
          }
        }
      }
    }

    public int VifByteSize
    {
      get => this.difVifList.Count - this.DifByteSize;
      set
      {
        int vifByteSize = this.VifByteSize;
        if (value == vifByteSize)
          return;
        if (value < vifByteSize)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented, "can not reduce VifByteSize");
        }
        else
        {
          for (; vifByteSize < value; ++vifByteSize)
          {
            this.difVifList[this.difVifList.Count - 1] |= (byte) 128;
            this.difVifList.Add((byte) 0);
          }
        }
      }
    }

    public bool IsBCD
    {
      get
      {
        return this.difVifList.Count != 0 && MBusDevice.DifParamCodeTable[(int) this.difVifList[0] & 15] == MBusDevice.ParamCode.BCD;
      }
    }

    public bool IsDateTime_32bit
    {
      get
      {
        if (this.difVifList == null || this.difVifList.Count == 0)
          return false;
        int difByteSize = this.DifByteSize;
        if (difByteSize == this.difVifList.Count - 1)
          return ((int) this.difVifList[difByteSize] & (int) sbyte.MaxValue) == 109;
        if (this.difVifList[difByteSize] == (byte) 253)
          return ((int) this.difVifList[0] & 15) == 4 && ((int) this.difVifList[difByteSize + 1] & (int) sbyte.MaxValue) == 48;
        return this.difVifList[difByteSize] != (byte) 251 && ((int) this.difVifList[0] & 15) == 4 && ((int) this.difVifList[difByteSize + 1] & 114) == 66;
      }
    }

    public bool IsDate_16bit
    {
      get
      {
        if (this.difVifList == null || this.difVifList.Count == 0)
          return false;
        int difByteSize = this.DifByteSize;
        if (difByteSize == this.difVifList.Count - 1)
          return ((int) this.difVifList[difByteSize] & (int) sbyte.MaxValue) == 108;
        if (this.difVifList[difByteSize] == (byte) 253)
          return ((int) this.difVifList[0] & 15) == 2 && ((int) this.difVifList[difByteSize + 1] & (int) sbyte.MaxValue) == 48;
        return this.difVifList[difByteSize] != (byte) 251 && ((int) this.difVifList[0] & 15) == 2 && ((int) this.difVifList[difByteSize + 1] & 114) == 66;
      }
    }

    public int StorageNumber
    {
      get
      {
        int storageNumber = 0;
        int index = 0;
        while (true)
        {
          if (index == 0)
            storageNumber = ((int) this.difVifList[index] & 64) >> 6;
          else
            storageNumber += ((int) this.difVifList[index] & 15) << index * 4 - 3;
          if (((int) this.difVifList[index] & 128) != 0)
            ++index;
          else
            break;
        }
        return storageNumber;
      }
      set
      {
        int num1 = value;
        int index = 0;
        while (true)
        {
          byte num2;
          if (index == 0)
          {
            this.difVifList[index] &= (byte) 191;
            num2 = (byte) ((num1 & 1) << 6);
            num1 >>= 1;
          }
          else
          {
            this.difVifList[index] &= (byte) 240;
            num2 = (byte) (num1 & 15);
            num1 >>= 4;
          }
          this.difVifList[index] |= num2;
          if (num1 != 0)
          {
            if (((int) this.difVifList[index] & 128) == 0)
            {
              this.difVifList[index] |= (byte) 128;
              this.difVifList.Insert(index + 1, (byte) 0);
            }
            ++index;
          }
          else
            break;
        }
        while (((uint) this.difVifList[index] & 128U) > 0U)
        {
          ++index;
          this.difVifList[index] &= (byte) 240;
        }
        this.DeleteNotUsedDifs();
      }
    }

    public int TarifNumber
    {
      get
      {
        if (this.DifByteSize < 2)
          return 0;
        int tarifNumber = 0;
        int index = 1;
        while (true)
        {
          tarifNumber += ((int) this.difVifList[index] & 48) >> 4 << index * 2 - 2;
          if (((int) this.difVifList[index] & 128) != 0)
            ++index;
          else
            break;
        }
        return tarifNumber;
      }
      set
      {
        int num = value;
        int index = 0;
        while (num > 0)
        {
          if (((int) this.difVifList[index] & 128) == 0)
          {
            this.difVifList[index] |= (byte) 128;
            this.difVifList.Insert(index + 1, (byte) 0);
          }
          else
            this.difVifList[index + 1] &= (byte) 207;
          this.difVifList[index + 1] |= (byte) ((num & 3) << 4);
          num >>= 2;
          ++index;
        }
        for (; ((uint) this.difVifList[index] & 128U) > 0U; ++index)
          this.difVifList[index + 1] &= (byte) 207;
        this.DeleteNotUsedDifs();
      }
    }

    public int Subunit
    {
      get
      {
        if (this.DifByteSize < 2)
          return 0;
        int subunit = 0;
        int index = 1;
        while (true)
        {
          subunit += ((int) this.difVifList[index] & 64) >> 6 << index - 1;
          if (((int) this.difVifList[index] & 128) != 0)
            ++index;
          else
            break;
        }
        return subunit;
      }
      set
      {
        int num = value;
        int index = 0;
        while (num > 0)
        {
          if (((int) this.difVifList[index] & 128) == 0)
          {
            this.difVifList[index] |= (byte) 128;
            this.difVifList.Insert(index + 1, (byte) 0);
          }
          else
            this.difVifList[index + 1] &= (byte) 191;
          this.difVifList[index + 1] |= (byte) ((num & 1) << 6);
          num >>= 1;
          ++index;
        }
        for (; ((uint) this.difVifList[index] & 128U) > 0U; ++index)
          this.difVifList[index + 1] &= (byte) 191;
        this.DeleteNotUsedDifs();
      }
    }

    private void DeleteNotUsedDifs()
    {
      if (this.DifSizeUnchangable)
        return;
      int index = this.DifByteSize - 1;
      while (index > 0 && this.difVifList[index] == (byte) 0)
      {
        this.difVifList.RemoveAt(index);
        --index;
        this.difVifList[index] &= (byte) 127;
      }
    }

    public FunctionFiled FunctionFiled
    {
      get
      {
        return this.difVifList == null || this.difVifList.Count < 1 ? FunctionFiled.InstantaneousValue : (FunctionFiled) Enum.ToObject(typeof (FunctionFiled), ((int) this.difVifList[0] & 48) >> 4);
      }
      set
      {
        if (this.difVifList == null || this.difVifList.Count < 1)
          return;
        this.difVifList[0] &= (byte) 207;
        this.difVifList[0] |= (byte) ((uint) value << 4);
      }
    }

    public int ByteSize => this.difVifList.Count;

    public void SetScalingVif(int theVif)
    {
      if (theVif < 128 && theVif >= 0)
      {
        int difByteSize = this.DifByteSize;
        if ((int) this.difVifList[difByteSize] == (int) (byte) theVif)
          return;
        if (MBusDifVif.loggerMBusDifVif.IsTraceEnabled)
          MBusDifVif.loggerMBusDifVif.Trace("Change VIF from 0x" + this.difVifList[difByteSize].ToString("x02") + " to 0x" + theVif.ToString("x02"));
        this.difVifList[difByteSize] = (byte) (((int) this.difVifList[difByteSize] & 128) + theVif);
      }
      else
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Can not change vif", MBusDifVif.loggerMBusDifVif);
    }

    public bool LoadDifVif(byte[] difVif) => this.LoadDifVif(difVif, 0);

    public bool LoadDifVif(byte[] byteBuffer, int difVifStartOffset)
    {
      this.difVifList.Clear();
      bool flag = false;
      for (int index = 0; difVifStartOffset + index < byteBuffer.Length; ++index)
      {
        byte num = byteBuffer[difVifStartOffset + index];
        this.difVifList.Add(num);
        if (((int) num & 128) == 0)
        {
          if (flag)
            return true;
          flag = true;
        }
      }
      return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "DifVif not complete", MBusDifVif.loggerMBusDifVif);
    }

    public override string ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("(DifVif:");
      for (int index = 0; index < this.difVifList.Count; ++index)
      {
        if (index > 0)
          stringBuilder.Append(' ');
        stringBuilder.Append(this.difVifList[index].ToString("x02"));
      }
      stringBuilder.Append(") (ZDF: " + this.GetZdfString() + ")");
      return stringBuilder.ToString();
    }

    public string GetZdfString()
    {
      StringBuilder zdfString = new StringBuilder();
      int difByteSize = this.DifByteSize;
      int vifByteSize = this.VifByteSize;
      if (vifByteSize >= 1)
      {
        if (this.DifVifArray[difByteSize] == (byte) 253)
        {
          if (vifByteSize < 2)
            return "IllegalVifFD";
          int index = (int) this.difVifList[difByteSize + 1] & (int) sbyte.MaxValue;
          zdfString.Append(MBusDevice.VifEList_0xFD[index].VifString);
          this.AddOrtogonalVIF(difByteSize + 1, zdfString);
        }
        else if (this.DifVifArray[difByteSize] == (byte) 251)
        {
          if (vifByteSize < 2)
            return "IllegalVifFB";
          int index = (int) this.difVifList[difByteSize + 1] & (int) sbyte.MaxValue;
          zdfString.Append(MBusDevice.VifEList_0xFB[index].VifString);
          this.AddOrtogonalVIF(difByteSize + 1, zdfString);
        }
        else if (this.DifVifArray[difByteSize] == (byte) 252 || this.DifVifArray[difByteSize] == (byte) 124)
        {
          zdfString.Append("ManSpec");
        }
        else
        {
          int index = (int) this.difVifList[difByteSize] & (int) sbyte.MaxValue;
          zdfString.Append(MBusDevice.VifList[index].VifString);
          if (index == (int) sbyte.MaxValue)
            zdfString.Append("ManSpec");
          else
            this.AddOrtogonalVIF(difByteSize, zdfString);
        }
      }
      int storageNumber = this.StorageNumber;
      int subunit = this.Subunit;
      int tarifNumber = this.TarifNumber;
      FunctionFiled functionFiled = this.FunctionFiled;
      if (storageNumber > 0 || storageNumber > 0)
        zdfString.Append("[" + storageNumber.ToString() + "]");
      if (subunit > 0)
        zdfString.Append("[" + subunit.ToString() + "]");
      switch (functionFiled)
      {
        case FunctionFiled.MaximumValue:
          zdfString.Append("_MAX");
          break;
        case FunctionFiled.MinimumValue:
          zdfString.Append("_MIN");
          break;
        case FunctionFiled.ValueDuringErrorState:
          zdfString.Append("_ERR");
          break;
      }
      if (tarifNumber > 0)
        zdfString.Append("_TAR[" + tarifNumber.ToString() + "]");
      return zdfString.ToString();
    }

    private void AddOrtogonalVIF(int offset, StringBuilder zdfString)
    {
      if (((int) this.difVifList[offset] & 128) == 0)
        return;
      ++offset;
      if (offset >= this.difVifList.Count)
        zdfString.Append("IllegalOrtoVif");
      int index = (int) this.difVifList[offset] & (int) sbyte.MaxValue;
      zdfString.Append(MBusDevice.VifEListOrto[index].VifStringToAdd);
    }

    public static DateTime? GetMBusDateTime(byte[] buffer, int offset)
    {
      int minute = (int) buffer[offset] & 63;
      int hour = (int) buffer[offset + 1] & 31;
      int day = (int) buffer[offset + 2] & 31;
      int month = (int) buffer[offset + 3] & 15;
      int num1 = ((int) buffer[offset + 2] >> 5) + (((int) buffer[offset + 3] & 240) >> 1);
      int num2 = ((int) buffer[offset + 1] & 96) >> 5;
      bool flag1 = ((int) buffer[offset] & 128) == 0;
      bool flag2 = ((uint) buffer[offset + 1] & 128U) > 0U;
      int year = num1 > 80 ? num1 + (1900 + 100 * num2) : num1 + 2000;
      if (month < 1 || month > 12)
        return new DateTime?();
      if (hour < 1 || hour > 24)
        return new DateTime?();
      try
      {
        DateTime dateTime = new DateTime(year, month, day, hour, minute, 0, DateTimeKind.Unspecified);
        if (flag2)
          dateTime = dateTime.AddHours(-1.0);
        if (!flag1)
          dateTime = DateTime.MinValue;
        return new DateTime?(dateTime);
      }
      catch
      {
        return new DateTime?();
      }
    }

    public enum DifVifOptions
    {
      Non,
      DifSizeUnchangabel,
    }
  }
}


--- MBusList.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MBusList
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using NLog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MBusList : DeviceList
  {
    public static Logger MBusScannerLogger = LogManager.GetLogger("MBusScanner");

    public MBusList(DeviceCollectorFunctions BusRef)
    {
      this.MyBus = BusRef;
      this.bus = new ArrayList();
      this.FaultyDevices = new List<MBusDevice>();
    }

    internal override bool AddDevice(DeviceTypes NewType, bool select)
    {
      BusDevice e;
      switch (NewType)
      {
        case DeviceTypes.MBus:
          e = (BusDevice) new MBusDevice(this.MyBus);
          break;
        case DeviceTypes.ZR_Serie1:
          e = (BusDevice) new Serie1MBus(this.MyBus);
          break;
        case DeviceTypes.ZR_Serie2:
          e = (BusDevice) new Serie2MBus(this.MyBus);
          break;
        case DeviceTypes.ZR_EHCA:
          e = (BusDevice) new EHCA_MBus(this.MyBus);
          break;
        case DeviceTypes.ZR_RDM:
          e = (BusDevice) new RDM_Bus(this.MyBus);
          break;
        case DeviceTypes.Minol_Device:
          e = (BusDevice) new MinolDevice(this.MyBus);
          break;
        case DeviceTypes.ZR_Serie3:
          e = (BusDevice) new Serie3MBus(this.MyBus);
          break;
        case DeviceTypes.EDC:
          e = (BusDevice) this.MyBus.EDCHandler;
          break;
        case DeviceTypes.PDC:
          e = (BusDevice) this.MyBus.PDCHandler;
          break;
        case DeviceTypes.TemperatureSensor:
        case DeviceTypes.HumiditySensor:
          e = new BusDevice(this.MyBus);
          e.DeviceType = NewType;
          break;
        default:
          return false;
      }
      if (e is MBusDevice)
        e.DeviceType = NewType;
      this.bus.Add((object) e);
      this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, e);
      this.WorkBusAddresses();
      if (select)
        this.SelectedDevice = (BusDevice) this.bus[this.bus.Count - 1];
      return true;
    }

    internal override bool AddDevice(object NewDevice, bool select)
    {
      if (!(NewDevice is MBusDevice mbusDevice))
        return false;
      if (mbusDevice.Info.Manufacturer == "ZR_" || mbusDevice.Info.Manufacturer == "ZRM")
      {
        if (mbusDevice.Info.Medium != (byte) 8)
        {
          if (mbusDevice.Info.Version >= (byte) 128)
          {
            Serie2MBus e = new Serie2MBus(mbusDevice);
            this.bus.Add((object) e);
            this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, (BusDevice) e);
          }
          else
          {
            Serie1MBus e = new Serie1MBus(mbusDevice);
            this.bus.Add((object) e);
            this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, (BusDevice) e);
          }
        }
        else
        {
          EHCA_MBus e = new EHCA_MBus(mbusDevice);
          this.bus.Add((object) e);
          this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, (BusDevice) e);
        }
      }
      else if (mbusDevice.Info.Manufacturer == "ZRI")
      {
        bool flag = mbusDevice.DeviceType == DeviceTypes.EDC;
        Serie3MBus e = new Serie3MBus(mbusDevice);
        if (flag)
          e.DeviceType = DeviceTypes.EDC;
        this.bus.Add((object) e);
        this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, (BusDevice) e);
      }
      else
      {
        this.bus.Add(NewDevice);
        this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, (BusDevice) mbusDevice);
      }
      this.WorkBusAddresses();
      if (select)
        this.SelectedDevice = (BusDevice) this.bus[this.bus.Count - 1];
      return true;
    }

    internal override bool DeleteSelectedDevice()
    {
      if (this.SelectedDevice == null)
        return false;
      byte aField1 = this.SelectedDevice.Info.A_Field;
      string meterNumber1 = this.SelectedDevice.Info.MeterNumber;
      int index;
      for (index = 0; index < this.bus.Count; ++index)
      {
        if (this.SelectedDevice == this.bus[index])
        {
          this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, (BusDevice) null);
          break;
        }
        byte aField2 = ((BusDevice) this.bus[index]).Info.A_Field;
        string meterNumber2 = ((BusDevice) this.bus[index]).Info.MeterNumber;
        if ((int) aField1 == (int) aField2 && meterNumber1 == meterNumber2)
        {
          this.bus.RemoveAt(index);
          this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, (BusDevice) null);
          break;
        }
      }
      this.WorkBusAddresses();
      if (this.bus.Count > 0)
      {
        if (index < this.bus.Count)
          this.SelectedDevice = (BusDevice) this.bus[index];
        else
          this.SelectedDevice = (BusDevice) this.bus[this.bus.Count - 1];
      }
      else
        this.SelectedDevice = (BusDevice) null;
      return true;
    }

    internal override bool SelectDeviceByPrimaryAddress(int Address)
    {
      foreach (MBusDevice bu in this.bus)
      {
        if (bu.PrimaryAddressOk && (int) bu.PrimaryDeviceAddress == Address)
        {
          this.SelectedDevice = (BusDevice) bu;
          return true;
        }
      }
      return false;
    }

    internal override bool SetPhysicalDeviceBySerialNumber(string SerialNumber)
    {
      if (this.bus == null || this.SelectedDevice == null || this.SelectedDevice.Info == null)
        return false;
      foreach (BusDevice bu in this.bus)
      {
        if (bu.Info != null && bu.Info.MeterNumber == SerialNumber)
        {
          this.SelectedDevice = bu;
          return true;
        }
      }
      if (!(this.SelectedDevice is Serie3MBus))
        return false;
      Serie3MBus serie3Mbus = new Serie3MBus(this.SelectedDevice.MyBus);
      serie3Mbus.Info = new DeviceInfo(this.SelectedDevice.Info);
      serie3Mbus.Info.MeterNumber = SerialNumber;
      serie3Mbus.MaxWriteBlockSize = ((Serie2MBus) this.SelectedDevice).MaxWriteBlockSize;
      this.bus.Add((object) serie3Mbus);
      this.SelectedDevice = (BusDevice) serie3Mbus;
      return true;
    }

    internal override bool SearchSingleDeviceByPrimaryAddress(int SearchAddress)
    {
      ZR_ClassLibMessages.ClearErrors();
      if (!this.IsNewMBusDevicePossible() || SearchAddress < 0 || SearchAddress > 251 && SearchAddress != 254)
        return false;
      MBusDevice NewDevice = new MBusDevice(this.MyBus);
      NewDevice.PrimaryAddressKnown = true;
      NewDevice.PrimaryAddressOk = true;
      NewDevice.PrimaryDeviceAddress = (byte) SearchAddress;
      if (!NewDevice.REQ_UD2())
      {
        ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
        int num;
        switch (lastError)
        {
          case ZR_ClassLibMessages.LastErrors.NoError:
          case ZR_ClassLibMessages.LastErrors.Timeout:
          case ZR_ClassLibMessages.LastErrors.ComOpenError:
            num = 1;
            break;
          default:
            num = lastError == ZR_ClassLibMessages.LastErrors.CommunicationError ? 1 : 0;
            break;
        }
        if (num == 0)
        {
          NewDevice.DeviceType = DeviceTypes.MultipleDevices;
          NewDevice.PrimaryAddressOk = false;
          NewDevice.PrimaryAddressKnown = false;
          for (int index = 0; index < this.FaultyDevices.Count; ++index)
          {
            if (this.FaultyDevices[index].Info != null && (int) this.FaultyDevices[index].PrimaryDeviceAddress == (int) NewDevice.PrimaryDeviceAddress)
              return false;
          }
          this.AddFaultyDevice(NewDevice);
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "MultipleDevices found.");
        }
        return false;
      }
      if (this.MyBus.MyBusMode == BusMode.MBusPointToPoint)
      {
        NewDevice.PrimaryDeviceAddress = NewDevice.Info.A_Field;
      }
      else
      {
        for (int index = 0; index < this.bus.Count; ++index)
        {
          if (((BusDevice) this.bus[index]).Info != null && (int) ((BusDevice) this.bus[index]).Info.ManufacturerCode == (int) NewDevice.Info.ManufacturerCode && (int) ((BusDevice) this.bus[index]).Info.Medium == (int) NewDevice.Info.Medium && (int) ((BusDevice) this.bus[index]).Info.Version == (int) NewDevice.Info.Version && ((BusDevice) this.bus[index]).Info.MeterNumber == NewDevice.Info.MeterNumber)
          {
            Application.DoEvents();
            return true;
          }
        }
      }
      this.AddDevice((object) NewDevice, true);
      return true;
    }

    internal override bool SearchSingleDeviceBySerialNumber(string SearchSerialNumber)
    {
      uint SerialNumberOut;
      return MBusDevice.StringToMBusSerialNumber(SearchSerialNumber, out SerialNumberOut) && this.SearchSingleDeviceBySerialNumber(SerialNumberOut);
    }

    public override bool SearchSingleDeviceBySerialNumber(uint BCD_SerialNumber)
    {
      if (!this.IsNewMBusDevicePossible())
        return false;
      this.MyBus.SendMessage(BCD_SerialNumber.ToString("X08"), this.bus.Count, GMM_EventArgs.MessageType.ScanAddressMessage);
      MBusDevice NewDevice = new MBusDevice(this.MyBus);
      NewDevice.PrimaryAddressKnown = false;
      NewDevice.PrimaryAddressOk = false;
      NewDevice.PrimaryDeviceAddress = (byte) 0;
      if (!this.MyBus.FastSecondaryAddressing)
        NewDevice.DeselectDevice();
      if (NewDevice.SelectDeviceOnBus(BCD_SerialNumber, ushort.MaxValue, byte.MaxValue, byte.MaxValue))
      {
        if (!NewDevice.REQ_UD2())
        {
          ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
          bool flag1 = BCD_SerialNumber.ToString("X08").StartsWith("F");
          bool flag2 = BCD_SerialNumber.ToString("X08").EndsWith("F");
          if (!flag1 && !flag2)
            MBusList.MBusScannerLogger.Fatal("Invalid device detected! Reason: " + lastError.ToString());
          else
            MBusList.MBusScannerLogger.Error("REQ_UD2 failed! Reason: " + lastError.ToString());
          ZR_ClassLibMessages.ClearErrors();
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
          return false;
        }
        for (int index = 0; index < this.bus.Count; ++index)
        {
          if (((BusDevice) this.bus[index]).Info != null && (int) ((BusDevice) this.bus[index]).Info.ManufacturerCode == (int) NewDevice.Info.ManufacturerCode && (int) ((BusDevice) this.bus[index]).Info.Medium == (int) NewDevice.Info.Medium && (int) ((BusDevice) this.bus[index]).Info.Version == (int) NewDevice.Info.Version && ((BusDevice) this.bus[index]).Info.MeterNumber == NewDevice.Info.MeterNumber)
            return true;
        }
        NewDevice.PrimaryDeviceAddress = NewDevice.Info.A_Field;
        NewDevice.PrimaryAddressKnown = true;
        this.AddDevice((object) NewDevice, true);
        return true;
      }
      MBusList.MBusScannerLogger.Debug("M-Bus device can not selected!");
      return false;
    }

    internal override bool ScanFromAddress(int ScanAddress)
    {
      bool flag = false;
      this.MyBus.BreakRequest = false;
      this.MyBus.BusState.StartGlobalFunctionTask(BusStatusClass.GlobalFunctionTasks.ScanPrimary);
      while (!this.MyBus.BreakRequest)
      {
        if (ScanAddress > 251)
        {
          this.MyBus.SendMessage(new GMM_EventArgs(GMM_EventArgs.MessageType.MessageAndProgressPercentage));
          break;
        }
        if (this.MyBus.MyBusMode != BusMode.MBusPointToPoint || this.bus.Count <= 0)
        {
          if (this.MyBus.MyBusMode != 0)
          {
            GMM_EventArgs e = new GMM_EventArgs(GMM_EventArgs.MessageType.MessageAndProgressPercentage);
            e.ProgressPercentage = ScanAddress * 100 / 251;
            e.EventMessage = string.Format(DeviceCollectorFunctions.SerialBusMessage.GetString("PrimaryAddressSearch"), (object) ScanAddress, (object) 251, (object) this.bus.Count);
            this.MyBus.SendMessage(e);
            this.MyBus.SendProgress((object) this, e.ProgressPercentage);
            this.MyBus.SendProgressMessage((object) this, string.Format("Scan: {0} - {1}", (object) ScanAddress, (object) 251));
          }
          if (this.SearchSingleDeviceByPrimaryAddress(ScanAddress++) || ZR_ClassLibMessages.GetLastError() != ZR_ClassLibMessages.LastErrors.CommunicationError && ZR_ClassLibMessages.GetLastError() != ZR_ClassLibMessages.LastErrors.ComOpenError)
            Application.DoEvents();
          else
            goto label_10;
        }
        else
          break;
      }
      flag = true;
label_10:
      this.MyBus.BusState.StartGlobalFunctionTask(BusStatusClass.GlobalFunctionTasks.Off);
      return flag;
    }

    internal override bool ScanFromSerialNumber(string StartSerialNumber)
    {
      this.MyBus.BreakRequest = false;
      bool flag = true;
      DateTime dateTimeNow1 = SystemValues.DateTimeNow;
      if (string.IsNullOrEmpty(StartSerialNumber))
        StartSerialNumber = "0fffffff";
      else if (StartSerialNumber.ToLower().StartsWith("f"))
        flag = false;
      int maxRequestRepeat = this.MyBus.MaxRequestRepeat;
      this.MyBus.BusState.StartGlobalFunctionTask(BusStatusClass.GlobalFunctionTasks.ScanSecundary);
      string ParameterValue = this.MyBus.MyCom.SingleParameter(CommParameter.TestEcho, "");
      try
      {
        if (!this.MyBus.MyCom.Open())
          return false;
        this.MyBus.MyCom.SingleParameter(CommParameter.TestEcho, "False");
        MBusList.MBusScannerLogger.Info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        MBusList.MBusScannerLogger.Info<string, int>("M-Bus scanner was started! (StartSerialNumber: {0}, MaxRepeat {1})", StartSerialNumber, maxRequestRepeat);
        MBusList.MBusScannerLogger.Info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        MBusList.MBusScannerLogger.Info(" ");
        uint SerialNumberOut;
        if (!MBusDevice.StringToMBusSerialNumber(StartSerialNumber, out SerialNumberOut))
          return false;
        int num = 0;
        Queue<uint> uintQueue = new Queue<uint>();
        while (!this.MyBus.BreakRequest && (this.MyBus.MyBusMode != BusMode.MBusPointToPoint || this.bus.Count <= 0))
        {
          bool collision = false;
          DateTime dateTimeNow2 = SystemValues.DateTimeNow;
          while (!this.MyBus.BreakRequest)
          {
            if (flag)
            {
              string str = SerialNumberOut.ToString("X8");
              int progress = ((int) str[0] - 48) * 90 / 9;
              if (str[1] != 'F')
                progress += ((int) str[1] - 48) * 10 / 9;
              this.MyBus.SendProgress((object) this, progress);
              this.MyBus.SendProgressMessage((object) this, "Scan: " + str);
            }
            else
            {
              string str = SerialNumberOut.ToString("X8");
              int progress = ((int) str[7] - 48) * 90 / 9;
              if (str[6] != 'F')
                progress += ((int) str[6] - 48) * 10 / 9;
              this.MyBus.SendProgress((object) this, progress);
              this.MyBus.SendProgressMessage((object) this, "Scan: " + str);
            }
            MBusList.MBusScannerLogger.Info("START SECUNDARY ADDRESS SCANN-----------------------------------> {0}", SerialNumberOut.ToString("X08"));
            dateTimeNow2 = SystemValues.DateTimeNow;
            if (!this.SearchSingleDeviceBySerialNumber(SerialNumberOut))
            {
              ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
              if (lastError == ZR_ClassLibMessages.LastErrors.IllegalData || lastError == ZR_ClassLibMessages.LastErrors.FramingError)
              {
                collision = true;
                ++num;
                MBusList.MBusScannerLogger.Error("Collision detected!");
                break;
              }
              if (lastError == ZR_ClassLibMessages.LastErrors.CommunicationError)
              {
                while (!this.MyBus.BreakRequest)
                {
                  MBusList.MBusScannerLogger.Fatal("Connection was unexpected closed! Try reconnect.");
                  this.MyBus.ComClose();
                  if (this.MyBus.ComOpen())
                    break;
                }
              }
              else
              {
                uintQueue.Enqueue(SerialNumberOut);
                break;
              }
            }
            else
            {
              Application.DoEvents();
              break;
            }
          }
          MBusList.MBusScannerLogger.Info("END SECUNDARY ADDRESS SCANN-------------------------------------> {0}", ZR_ClassLibrary.Util.ElapsedToString(SystemValues.DateTimeNow - dateTimeNow2));
          MBusList.MBusScannerLogger.Info(" ");
          MBusList.MBusScannerLogger.Info("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
          MBusList.MBusScannerLogger.Info(" ");
          if (flag)
          {
            if (!this.ScanWalkerSetNextAddressFirstToLast(ref SerialNumberOut, collision))
              break;
          }
          else if (!this.ScanWalkerSetNextAddressLastToFirst(ref SerialNumberOut, collision))
            break;
        }
        if (MBusList.MBusScannerLogger.IsTraceEnabled)
        {
          MBusList.MBusScannerLogger.Trace("Devices not found:");
          while (uintQueue.Count > 0)
            MBusList.MBusScannerLogger.Trace(uintQueue.Dequeue().ToString("X08"));
        }
        string str1 = string.Format("Elapsed time: {0}, Founds: {1}, Collisions: {2}", (object) ZR_ClassLibrary.Util.ElapsedToString(SystemValues.DateTimeNow.Subtract(dateTimeNow1)), (object) this.bus.Count, (object) num);
        if (this.MyBus.BreakRequest)
          MBusList.MBusScannerLogger.Info("M-Bus scanner was canceled! ({0})", str1);
        else
          MBusList.MBusScannerLogger.Info("M-Bus scanner was finished! ({0})", str1);
        this.MyBus.SendProgress((object) this, 100);
        ZR_ClassLibMessages.ClearErrors();
        return true;
      }
      finally
      {
        this.MyBus.MyCom.SingleParameter(CommParameter.TestEcho, ParameterValue);
        this.MyBus.BusState.StartGlobalFunctionTask(BusStatusClass.GlobalFunctionTasks.Off);
      }
    }

    internal override bool WorkBusAddresses()
    {
      this.MBusConverterAvailable = false;
      if (this.bus.Count == 1)
      {
        if (this.bus[0] is Receiver)
          return false;
        if (this.bus[0] is BusDevice)
        {
          DeviceTypes deviceType = ((BusDevice) this.bus[0]).DeviceType;
          if (deviceType == DeviceTypes.HumiditySensor || deviceType == DeviceTypes.TemperatureSensor)
            return false;
        }
      }
      this.PrimaryAddressingOk = true;
      this.AllAddressesOk = true;
      for (int index1 = 0; index1 < this.bus.Count; ++index1)
      {
        if (this.MyBus.MyBusMode != BusMode.WaveFlowRadio && this.MyBus.MyBusMode != BusMode.MinomatV2)
        {
          if (!((MBusDevice) this.bus[index1]).PrimaryAddressKnown)
          {
            this.PrimaryAddressingOk = false;
            break;
          }
          ((MBusDevice) this.bus[index1]).PrimaryAddressOk = true;
          for (int index2 = 0; index2 < this.bus.Count; ++index2)
          {
            if (index1 != index2 && (int) ((MBusDevice) this.bus[index1]).PrimaryDeviceAddress == (int) ((MBusDevice) this.bus[index2]).PrimaryDeviceAddress)
            {
              ((MBusDevice) this.bus[index1]).PrimaryAddressOk = false;
              this.AllAddressesOk = false;
              break;
            }
          }
          if (((MBusDevice) this.bus[index1]).PrimaryAddressOk && ((MBusDevice) this.bus[index1]).PrimaryDeviceAddress == (byte) 251)
            this.MBusConverterAvailable = true;
        }
      }
      if (!this.PrimaryAddressingOk)
      {
        this.AllAddressesOk = false;
        for (int index = 0; index < this.bus.Count; ++index)
          ((MBusDevice) this.bus[index]).PrimaryAddressOk = false;
      }
      return this.AllAddressesOk;
    }

    internal override bool OrganizeBus(int StartAddress)
    {
      this.MyBus.DeviceIsModified = true;
      this.WorkBusAddresses();
      this.MyBus.BreakRequest = false;
      for (int index = 0; index < this.bus.Count; ++index)
      {
        if (this.MyBus.BreakRequest)
          return false;
        this.MyBus.SendMessage("Check device: ", index + 1, GMM_EventArgs.MessageType.StandardMessage);
        if (!((MBusDevice) this.bus[index]).REQ_UD2())
        {
          int num = (int) MessageBox.Show("Device check error!");
          return false;
        }
      }
      this.WorkBusAddresses();
      if (!this.PrimaryAddressingOk)
      {
        int num = (int) MessageBox.Show("Addressing not ok");
        return false;
      }
      int num1 = StartAddress;
      for (int index = 0; index < this.bus.Count; ++index)
      {
        if (this.MyBus.BreakRequest)
          return false;
        if (!((MBusDevice) this.bus[index]).PrimaryAddressOk)
        {
          this.MyBus.SendMessage("Address device: ", index + 1, GMM_EventArgs.MessageType.StandardMessage);
          num1 = this.GetNextFreeAddress(num1);
          if (num1 < 0 || !((MBusDevice) this.bus[index]).SetPrimaryAddress(num1))
            return false;
          this.WorkBusAddresses();
        }
      }
      if (!this.PrimaryAddressingOk || !this.AllAddressesOk)
      {
        int num2 = (int) MessageBox.Show("Full Addressing not ok");
        return false;
      }
      for (int index1 = 0; index1 < StartAddress; ++index1)
      {
        for (int index2 = 0; index2 < this.bus.Count; ++index2)
        {
          if ((int) ((MBusDevice) this.bus[index2]).PrimaryDeviceAddress == index1)
          {
            this.MyBus.SendMessage("Shift device: ", index2 + 1, GMM_EventArgs.MessageType.StandardMessage);
            num1 = this.GetNextFreeAddress(num1);
            if (num1 < 0 || !((MBusDevice) this.bus[index2]).SetPrimaryAddress(num1))
              return false;
          }
        }
      }
      int index3;
      do
      {
        num1 = this.GetNextFreeAddress(num1);
        if (num1 >= 0)
        {
          int num3 = 0;
          index3 = 0;
          for (int index4 = 0; index4 < this.bus.Count; ++index4)
          {
            if ((int) ((MBusDevice) this.bus[index4]).PrimaryDeviceAddress > num3)
            {
              num3 = (int) ((MBusDevice) this.bus[index4]).PrimaryDeviceAddress;
              index3 = index4;
            }
          }
          if (num1 >= num3)
            goto label_39;
        }
        else
          goto label_29;
      }
      while (((MBusDevice) this.bus[index3]).SetPrimaryAddress(num1));
      goto label_37;
label_29:
      return false;
label_37:
      return false;
label_39:
      return true;
    }

    internal override bool SetPrimaryAddressOnBusWithoutShift(int NewAddress)
    {
      this.WorkBusAddresses();
      bool flag = ((MBusDevice) this.SelectedDevice).SetPrimaryAddress(NewAddress);
      this.WorkBusAddresses();
      return flag;
    }

    internal override bool SetPrimaryAddressOnBus(int NewAddress)
    {
      this.WorkBusAddresses();
      for (int index1 = 0; index1 < this.bus.Count; ++index1)
      {
        if (this.bus[index1] != this.SelectedDevice && (int) ((MBusDevice) this.bus[index1]).PrimaryDeviceAddress == NewAddress)
        {
          for (int index2 = index1 + 1; index2 < this.bus.Count; ++index2)
          {
            if (this.bus[index2] != this.SelectedDevice && (int) ((MBusDevice) this.bus[index2]).PrimaryDeviceAddress == NewAddress)
              goto label_10;
          }
          int nextFreeAddress = this.GetNextFreeAddress(NewAddress);
          if (nextFreeAddress < 0 || !((MBusDevice) this.bus[index1]).SetPrimaryAddress(nextFreeAddress))
            return false;
          break;
        }
      }
label_10:
      bool flag = ((MBusDevice) this.SelectedDevice).SetPrimaryAddress(NewAddress);
      this.WorkBusAddresses();
      return flag;
    }

    private bool ScanWalkerSetNextAddressFirstToLast(ref uint address, bool collision)
    {
      string str = address.ToString("X8");
      int length = str.IndexOf('F');
      if (length < 0)
      {
        if (Convert.ToByte(str[7].ToString()) < (byte) 9)
        {
          ++address;
          return true;
        }
        collision = false;
        length = 7;
      }
      if (collision && length < 8)
      {
        string s = (str.Substring(0, length) + "0").PadRight(8, 'F');
        address = uint.Parse(s, NumberStyles.HexNumber);
        return true;
      }
      byte num1 = Convert.ToByte(str[length - 1].ToString());
      if (num1 < (byte) 9)
      {
        string s = (str.Substring(0, length - 1) + ((int) num1 + 1).ToString()).PadRight(8, 'F');
        address = uint.Parse(s, NumberStyles.HexNumber);
        return true;
      }
      while (length > 1)
      {
        --length;
        byte num2 = Convert.ToByte(str[length - 1].ToString());
        if (num2 < (byte) 9)
        {
          string s = (str.Substring(0, length - 1) + ((int) num2 + 1).ToString()).PadRight(8, 'F');
          address = uint.Parse(s, NumberStyles.HexNumber);
          return true;
        }
      }
      return false;
    }

    private bool ScanWalkerSetNextAddressLastToFirst(ref uint address, bool collision)
    {
      uint address1 = uint.Parse(ZR_ClassLibrary.Util.ReverseString(address.ToString("X8")), NumberStyles.AllowHexSpecifier);
      if (!this.ScanWalkerSetNextAddressFirstToLast(ref address1, collision))
        return false;
      string s = ZR_ClassLibrary.Util.ReverseString(address1.ToString("X8"));
      address = uint.Parse(s, NumberStyles.AllowHexSpecifier);
      return true;
    }

    private int GetNextFreeAddress(int FromAddress)
    {
      int nextFreeAddress = FromAddress;
      for (int index = 0; index < this.bus.Count; ++index)
      {
        if ((int) ((MBusDevice) this.bus[index]).PrimaryDeviceAddress == nextFreeAddress)
        {
          ++nextFreeAddress;
          index = -1;
          if (nextFreeAddress == 250)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Addressing overrun!");
            return -1;
          }
        }
      }
      return nextFreeAddress;
    }

    internal virtual bool IsNewMBusDevicePossible()
    {
      if (this.bus.Count < 1 && this.MyBus.MyBusMode == BusMode.MBusPointToPoint || this.MyBus.MyBusMode == BusMode.MBus)
        return true;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "No further device possible!");
      return false;
    }
  }
}


--- MBusParameter.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MBusParameter
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MBusParameter : DeviceParameter
  {
    public long ParaValue;
    public int StorageNr;
    public DeviceParameter.ParamUnit Unit;
    public int Exponent;
    private static int[] DIF_ParameterByteLen = new int[16]
    {
      0,
      1,
      2,
      3,
      4,
      4,
      6,
      8,
      0,
      1,
      2,
      3,
      4,
      -1,
      6,
      -1
    };

    public bool ScanReceivedParameter(ref ByteField Data, ref int ReadPtr) => true;
  }
}


--- MBusParserWindow.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MBusParserWindow
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace DeviceCollector
{
  public class MBusParserWindow : Form
  {
    private IContainer components = (IContainer) null;
    private TextBox txtInput;
    private Button btnParse;
    private TextBox txtOutput;
    private Label label1;
    private Label label2;

    public MBusParserWindow() => this.InitializeComponent();

    private void btnParse_Click(object sender, EventArgs e)
    {
      try
      {
        string str = this.txtInput.Text.Replace(" ", "").Replace("\r\n", "");
        this.txtOutput.Text = MBusDevice.ParseMBusDifVif(ZR_ClassLibrary.Util.HexStringToByteArray(str.Substring(38, str.Length - 38 - 4)));
        this.txtOutput.Text = this.txtOutput.Text.Replace(";", Environment.NewLine);
      }
      catch (Exception ex)
      {
        this.txtOutput.Text = ex.Message;
      }
    }

    internal static void ShowWindow()
    {
      using (MBusParserWindow mbusParserWindow = new MBusParserWindow())
      {
        int num = (int) mbusParserWindow.ShowDialog();
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.txtInput = new TextBox();
      this.btnParse = new Button();
      this.txtOutput = new TextBox();
      this.label1 = new Label();
      this.label2 = new Label();
      this.SuspendLayout();
      this.txtInput.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.txtInput.Location = new Point(3, 23);
      this.txtInput.Multiline = true;
      this.txtInput.Name = "txtInput";
      this.txtInput.ScrollBars = ScrollBars.Vertical;
      this.txtInput.Size = new Size(481, 111);
      this.txtInput.TabIndex = 0;
      this.btnParse.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnParse.Location = new Point(409, 137);
      this.btnParse.Name = "btnParse";
      this.btnParse.Size = new Size(75, 23);
      this.btnParse.TabIndex = 1;
      this.btnParse.Text = "Parse";
      this.btnParse.UseVisualStyleBackColor = true;
      this.btnParse.Click += new System.EventHandler(this.btnParse_Click);
      this.txtOutput.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtOutput.Location = new Point(3, 166);
      this.txtOutput.Multiline = true;
      this.txtOutput.Name = "txtOutput";
      this.txtOutput.ScrollBars = ScrollBars.Vertical;
      this.txtOutput.Size = new Size(481, 358);
      this.txtOutput.TabIndex = 2;
      this.label1.AutoSize = true;
      this.label1.Location = new Point(6, 5);
      this.label1.Name = "label1";
      this.label1.Size = new Size(38, 13);
      this.label1.TabIndex = 3;
      this.label1.Text = "Buffer:";
      this.label2.AutoSize = true;
      this.label2.Location = new Point(7, 146);
      this.label2.Name = "label2";
      this.label2.Size = new Size(31, 13);
      this.label2.TabIndex = 4;
      this.label2.Text = "ZDF:";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(485, 527);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.txtOutput);
      this.Controls.Add((Control) this.btnParse);
      this.Controls.Add((Control) this.txtInput);
      this.Name = nameof (MBusParserWindow);
      this.Text = nameof (MBusParserWindow);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- MbusTelegram.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MbusTelegram
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;

#nullable disable
namespace DeviceCollector
{
  internal sealed class MbusTelegram
  {
    public DateTime TimePoint { get; set; }

    public byte[] Buffer { get; set; }

    public MbusTelegram(DateTime timePoint, byte[] buffer)
    {
      this.TimePoint = timePoint;
      this.Buffer = buffer;
    }
  }
}


--- MbusTelegramCollection.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MbusTelegramCollection
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;
using System.Collections.Generic;

#nullable disable
namespace DeviceCollector
{
  internal sealed class MbusTelegramCollection : List<MBusTelegramSet>
  {
    internal void Add(
      byte primaryAddress,
      long serialNumber,
      DateTime timePoint,
      byte[] mbusTelegram)
    {
      MbusTelegram telegram = new MbusTelegram(timePoint, mbusTelegram);
      if (this.ContainsKey(primaryAddress, serialNumber))
        this[primaryAddress, serialNumber].MBusTelegrams.Add(telegram);
      else
        this.Add(new MBusTelegramSet(primaryAddress, serialNumber, telegram));
    }

    public MBusTelegramSet this[byte primaryAddress, long serialNumber]
    {
      get
      {
        return this.Find((Predicate<MBusTelegramSet>) (device => (int) device.PrimaryAddress == (int) primaryAddress && device.SerialNumber == serialNumber));
      }
    }

    internal bool ContainsKey(byte primaryAddress, long serialNumber)
    {
      return this.Exists((Predicate<MBusTelegramSet>) (device => (int) device.PrimaryAddress == (int) primaryAddress && device.SerialNumber == serialNumber));
    }

    internal MBusTelegramSet GetTelegramsOfMBusDevice(byte primaryAddress, long serialNumber)
    {
      return this.Find((Predicate<MBusTelegramSet>) (device => (int) device.PrimaryAddress == (int) primaryAddress && device.SerialNumber == serialNumber));
    }
  }
}


--- MBusTelegramSet.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MBusTelegramSet
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System.Collections.Generic;

#nullable disable
namespace DeviceCollector
{
  internal sealed class MBusTelegramSet
  {
    public long SerialNumber { get; set; }

    public byte PrimaryAddress { get; set; }

    public List<MbusTelegram> MBusTelegrams { get; set; }

    public MBusTelegramSet(byte primaryAddress, long serialNumber)
    {
      this.MBusTelegrams = new List<MbusTelegram>();
      this.PrimaryAddress = primaryAddress;
      this.SerialNumber = serialNumber;
    }

    public MBusTelegramSet(byte primaryAddress, long serialNumber, MbusTelegram telegram)
      : this(primaryAddress, serialNumber)
    {
      this.MBusTelegrams.Add(telegram);
    }

    public override string ToString()
    {
      return string.Format("{0}+{1}", (object) this.SerialNumber, (object) this.PrimaryAddress);
    }
  }
}


--- MemoryAccess.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MemoryAccess
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using CorporateDesign;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MemoryAccess : Form
  {
    private Color ReadBackColor = Color.LightGreen;
    private Color NewBackColor = Color.Yellow;
    private Color ChangedBackColor = Color.LightPink;
    private Color EditBackColor = Color.LightSkyBlue;
    private DeviceCollectorFunctions MyFunctions;
    private SortedList<int, byte> ReadData;
    private SortedList<int, byte> NewReceivedData;
    private SortedList<int, byte> WriteData;
    private bool ChangeActive = true;
    private MemoryLocation TheLocation;
    private int StartAddress;
    private int ByteSize;
    private string EditCellValue;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign2;
    private Panel panel1;
    private DataGridView dataGridViewMemory;
    private ComboBox comboBoxLocation;
    private Label label1;
    private TextBox textBoxStartAddress;
    private Label label2;
    private TextBox textBoxNumberOfBytes;
    private Label labelLocation;
    private Button buttonEraseFlash;
    private Button buttonWriteChanges;
    private Button buttonReadMemory;
    private Button buttonClearAll;
    private DataGridViewTextBoxColumn Address;
    private DataGridViewTextBoxColumn Col00;
    private DataGridViewTextBoxColumn Col01;
    private DataGridViewTextBoxColumn Col02;
    private DataGridViewTextBoxColumn Col03;
    private DataGridViewTextBoxColumn Col04;
    private DataGridViewTextBoxColumn Col05;
    private DataGridViewTextBoxColumn Col06;
    private DataGridViewTextBoxColumn Col07;
    private DataGridViewTextBoxColumn Col08;
    private DataGridViewTextBoxColumn Col09;
    private DataGridViewTextBoxColumn Col0a;
    private DataGridViewTextBoxColumn Col0b;
    private DataGridViewTextBoxColumn Col0c;
    private DataGridViewTextBoxColumn Col0d;
    private DataGridViewTextBoxColumn Col0e;
    private DataGridViewTextBoxColumn Col0f;

    public MemoryAccess(DeviceCollectorFunctions MyFunctions)
    {
      this.MyFunctions = MyFunctions;
      this.InitializeComponent();
      this.comboBoxLocation.DataSource = (object) Enum.GetNames(typeof (MemoryLocation));
      this.ReadData = new SortedList<int, byte>();
      this.NewReceivedData = new SortedList<int, byte>();
      this.WriteData = new SortedList<int, byte>();
    }

    private void MemoryAccess_Load(object sender, EventArgs e)
    {
      this.comboBoxLocation.SelectedIndex = 1;
      this.ChangeActive = false;
    }

    private void MemoryAccess_FormClosing(object sender, FormClosingEventArgs e)
    {
      e.Cancel = true;
      this.Hide();
    }

    private void buttonClearAll_Click(object sender, EventArgs e)
    {
      this.ChangeActive = true;
      this.dataGridViewMemory.Rows.Clear();
      this.ReadData.Clear();
      this.NewReceivedData.Clear();
      this.WriteData.Clear();
      this.ChangeActive = false;
    }

    private void buttonReadMemory_Click(object sender, EventArgs e)
    {
      if (!this.LoadSetupValues())
        return;
      this.WriteData.Clear();
      ByteField MemoryData;
      if (!this.MyFunctions.ReadMemory(this.TheLocation, this.StartAddress, this.ByteSize, out MemoryData))
      {
        ZR_ClassLibMessages.ShowAndClearErrors();
      }
      else
      {
        this.AddReadDataFromList(this.NewReceivedData);
        int startAddress = this.StartAddress;
        for (int index = 0; index < MemoryData.Count; ++index)
        {
          this.NewReceivedData.Add(startAddress, MemoryData.Data[index]);
          ++startAddress;
        }
        this.UpdateGrid();
      }
    }

    private void buttonEraseFlash_Click(object sender, EventArgs e)
    {
      if (!this.LoadSetupValues())
        return;
      if (!this.MyFunctions.EraseFlash(this.StartAddress, this.ByteSize))
      {
        ZR_ClassLibMessages.AddErrorDescription("Error on erase flash");
        ZR_ClassLibMessages.ShowAndClearErrors();
      }
      else
      {
        this.AddReadDataFromList(this.NewReceivedData);
        this.AddReadDataFromList(this.WriteData);
        int num = this.StartAddress + this.ByteSize;
        for (int startAddress = this.StartAddress; startAddress < num; ++startAddress)
          this.WriteData.Add(startAddress, byte.MaxValue);
        this.AddReadDataFromList(this.WriteData);
        this.UpdateGrid();
      }
    }

    private void buttonWriteChanges_Click(object sender, EventArgs e)
    {
      if (this.WriteData.Count == 0)
        return;
      int key = this.WriteData.Keys[0];
      int num = key;
      ByteField data = new ByteField(this.WriteData.Count);
      int index = 0;
      while (true)
      {
        if (index >= this.WriteData.Count || this.WriteData.Keys[index] > num + 1)
        {
          if (this.MyFunctions.WriteMemory(this.TheLocation, key, data))
          {
            if (index < this.WriteData.Count)
            {
              key = this.WriteData.Keys[index];
              num = key;
              data.Count = 0;
              data.Add(this.WriteData.Values[index]);
            }
            else
              goto label_10;
          }
          else
            break;
        }
        else
        {
          num = this.WriteData.Keys[index];
          data.Add(this.WriteData.Values[index]);
        }
        ++index;
      }
      ZR_ClassLibMessages.ShowAndClearErrors();
      return;
label_10:
      this.AddReadDataFromList(this.NewReceivedData);
      this.AddReadDataFromList(this.WriteData);
      this.UpdateGrid();
    }

    private void UpdateGrid()
    {
      this.dataGridViewMemory.Rows.Clear();
      this.ChangeActive = true;
      int num1 = 0;
      if (this.ReadData.Count > 0)
        num1 = this.ReadData.Keys[this.ReadData.Count - 1] | 15;
      if (this.NewReceivedData.Count > 0 && num1 < this.NewReceivedData.Keys[this.NewReceivedData.Count - 1])
        num1 = this.NewReceivedData.Keys[this.NewReceivedData.Count - 1];
      int num2 = num1 | 15;
      int num3 = int.MaxValue;
      if (this.ReadData.Count > 0)
        num3 = this.ReadData.Keys[0];
      if (this.NewReceivedData.Count > 0 && num3 > this.NewReceivedData.Keys[0])
        num3 = this.NewReceivedData.Keys[0];
      int num4 = num3 & -16;
      DataGridViewRow dataGridViewRow = (DataGridViewRow) null;
      bool flag1 = true;
      bool flag2 = false;
      for (int key = num4; key <= num2; ++key)
      {
        if ((key & 15) == 0)
        {
          if (flag1)
          {
            flag2 = false;
            flag1 = false;
            dataGridViewRow = this.dataGridViewMemory.Rows[this.dataGridViewMemory.Rows.Add()];
          }
          else if (!flag2)
          {
            flag2 = true;
            dataGridViewRow = this.dataGridViewMemory.Rows[this.dataGridViewMemory.Rows.Add()];
          }
          dataGridViewRow.Cells[0].Value = (object) key.ToString("x04");
          dataGridViewRow.Cells[0].ReadOnly = true;
        }
        int index1 = (key & 15) + 1;
        int index2 = this.ReadData.IndexOfKey(key);
        int index3 = this.NewReceivedData.IndexOfKey(key);
        if (index3 >= 0)
        {
          flag1 = true;
          if (index2 >= 0)
          {
            if ((int) this.NewReceivedData.Values[index3] == (int) this.ReadData.Values[index2])
            {
              dataGridViewRow.Cells[index1].Value = (object) this.NewReceivedData.Values[index3].ToString("x02");
              dataGridViewRow.Cells[index1].Style.BackColor = this.ReadBackColor;
            }
            else
            {
              dataGridViewRow.Cells[index1].Value = (object) (this.NewReceivedData.Values[index3].ToString("x02") + " (" + this.ReadData.Values[index2].ToString("x02") + ")");
              dataGridViewRow.Cells[index1].Style.BackColor = this.ChangedBackColor;
            }
          }
          else
          {
            dataGridViewRow.Cells[index1].Value = (object) this.NewReceivedData.Values[index3].ToString("x02");
            dataGridViewRow.Cells[index1].Style.BackColor = this.NewBackColor;
          }
        }
        else if (index2 >= 0)
        {
          flag1 = true;
          dataGridViewRow.Cells[index1].Value = (object) this.ReadData.Values[index2].ToString("x02");
        }
        else
          dataGridViewRow.Cells[index1].Value = (object) "--";
      }
      this.ChangeActive = false;
    }

    private void dataGridViewMemory_CellEnter(object sender, DataGridViewCellEventArgs e)
    {
      if (this.ChangeActive)
        return;
      if (this.dataGridViewMemory[e.ColumnIndex, e.RowIndex].Value == null)
        this.EditCellValue = string.Empty;
      else
        this.EditCellValue = this.dataGridViewMemory[e.ColumnIndex, e.RowIndex].Value.ToString();
    }

    private void dataGridViewMemory_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dataGridViewMemory[e.ColumnIndex, e.RowIndex].Value == null || e.ColumnIndex == 0)
        return;
      int result1;
      if (!int.TryParse(this.dataGridViewMemory[0, e.RowIndex].Value != null ? this.dataGridViewMemory[0, e.RowIndex].Value.ToString() : string.Empty, NumberStyles.HexNumber, (IFormatProvider) null, out result1))
      {
        this.dataGridViewMemory[0, e.RowIndex].Value = (object) "err";
        this.dataGridViewMemory[e.ColumnIndex, e.RowIndex].Value = (object) "err";
      }
      else
      {
        string s = this.dataGridViewMemory[e.ColumnIndex, e.RowIndex].Value.ToString().Trim();
        if (!(s != this.EditCellValue))
          return;
        this.EditCellValue = s;
        byte result2;
        if (!byte.TryParse(s, NumberStyles.HexNumber, (IFormatProvider) null, out result2))
        {
          this.dataGridViewMemory[e.ColumnIndex, e.RowIndex].Value = (object) "err";
        }
        else
        {
          int key = result1 + e.ColumnIndex - 1;
          int index = this.WriteData.IndexOfKey(key);
          if (index >= 0)
            this.WriteData.RemoveAt(index);
          this.WriteData.Add(key, result2);
          this.dataGridViewMemory[e.ColumnIndex, e.RowIndex].Style.BackColor = this.EditBackColor;
        }
      }
    }

    private bool LoadSetupValues()
    {
      ZR_ClassLibMessages.ClearErrors();
      this.TheLocation = (MemoryLocation) Enum.Parse(typeof (MemoryLocation), this.comboBoxLocation.SelectedItem.ToString());
      this.StartAddress = this.GetNumber(this.textBoxStartAddress.Text);
      if (this.StartAddress < 0)
      {
        this.textBoxStartAddress.Text = "0";
        int num = (int) GMM_MessageBox.ShowMessage("ReadMemory", "Illegal address");
        return false;
      }
      this.ByteSize = this.GetNumber(this.textBoxNumberOfBytes.Text);
      if (this.ByteSize < 0)
      {
        this.textBoxNumberOfBytes.Text = "0";
        int num = (int) GMM_MessageBox.ShowMessage("ReadMemory", "Illegal number of bytes.");
        return false;
      }
      return this.ByteSize >= 1;
    }

    private int GetNumber(string Text)
    {
      int result = 0;
      NumberStyles style = NumberStyles.Integer;
      Text = Text.Trim();
      if (Text.StartsWith("0x"))
      {
        Text = Text.Substring(2);
        style = NumberStyles.HexNumber;
      }
      return !int.TryParse(Text, style, (IFormatProvider) null, out result) ? -1 : result;
    }

    private void AddReadDataFromList(SortedList<int, byte> NewData)
    {
      for (int index1 = 0; index1 < NewData.Count; ++index1)
      {
        int index2 = this.ReadData.IndexOfKey(NewData.Keys[index1]);
        if (index2 >= 0)
        {
          if ((int) this.ReadData.Values[index2] != (int) NewData.Values[index1])
          {
            this.ReadData.RemoveAt(index2);
            this.ReadData.Add(NewData.Keys[index1], NewData.Values[index1]);
          }
        }
        else
          this.ReadData.Add(NewData.Keys[index1], NewData.Values[index1]);
      }
      NewData.Clear();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.zennerCoroprateDesign2 = new ZennerCoroprateDesign();
      this.panel1 = new Panel();
      this.buttonEraseFlash = new Button();
      this.buttonWriteChanges = new Button();
      this.buttonClearAll = new Button();
      this.buttonReadMemory = new Button();
      this.comboBoxLocation = new ComboBox();
      this.label1 = new Label();
      this.textBoxStartAddress = new TextBox();
      this.label2 = new Label();
      this.textBoxNumberOfBytes = new TextBox();
      this.labelLocation = new Label();
      this.dataGridViewMemory = new DataGridView();
      this.Address = new DataGridViewTextBoxColumn();
      this.Col00 = new DataGridViewTextBoxColumn();
      this.Col01 = new DataGridViewTextBoxColumn();
      this.Col02 = new DataGridViewTextBoxColumn();
      this.Col03 = new DataGridViewTextBoxColumn();
      this.Col04 = new DataGridViewTextBoxColumn();
      this.Col05 = new DataGridViewTextBoxColumn();
      this.Col06 = new DataGridViewTextBoxColumn();
      this.Col07 = new DataGridViewTextBoxColumn();
      this.Col08 = new DataGridViewTextBoxColumn();
      this.Col09 = new DataGridViewTextBoxColumn();
      this.Col0a = new DataGridViewTextBoxColumn();
      this.Col0b = new DataGridViewTextBoxColumn();
      this.Col0c = new DataGridViewTextBoxColumn();
      this.Col0d = new DataGridViewTextBoxColumn();
      this.Col0e = new DataGridViewTextBoxColumn();
      this.Col0f = new DataGridViewTextBoxColumn();
      this.panel1.SuspendLayout();
      ((ISupportInitialize) this.dataGridViewMemory).BeginInit();
      this.SuspendLayout();
      this.zennerCoroprateDesign2.Dock = DockStyle.Fill;
      this.zennerCoroprateDesign2.Location = new Point(0, 0);
      this.zennerCoroprateDesign2.Name = "zennerCoroprateDesign2";
      this.zennerCoroprateDesign2.Size = new Size(961, 477);
      this.zennerCoroprateDesign2.TabIndex = 15;
      this.panel1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.panel1.Controls.Add((Control) this.buttonEraseFlash);
      this.panel1.Controls.Add((Control) this.buttonWriteChanges);
      this.panel1.Controls.Add((Control) this.buttonClearAll);
      this.panel1.Controls.Add((Control) this.buttonReadMemory);
      this.panel1.Controls.Add((Control) this.comboBoxLocation);
      this.panel1.Controls.Add((Control) this.label1);
      this.panel1.Controls.Add((Control) this.textBoxStartAddress);
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.textBoxNumberOfBytes);
      this.panel1.Controls.Add((Control) this.labelLocation);
      this.panel1.Controls.Add((Control) this.dataGridViewMemory);
      this.panel1.Location = new Point(2, 41);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(958, 435);
      this.panel1.TabIndex = 16;
      this.buttonEraseFlash.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonEraseFlash.BackColor = SystemColors.Control;
      this.buttonEraseFlash.ImeMode = ImeMode.NoControl;
      this.buttonEraseFlash.Location = new Point(779, 370);
      this.buttonEraseFlash.Name = "buttonEraseFlash";
      this.buttonEraseFlash.Size = new Size(168, 24);
      this.buttonEraseFlash.TabIndex = 27;
      this.buttonEraseFlash.Text = "Erase Flash";
      this.buttonEraseFlash.UseVisualStyleBackColor = false;
      this.buttonEraseFlash.Click += new System.EventHandler(this.buttonEraseFlash_Click);
      this.buttonWriteChanges.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonWriteChanges.ImeMode = ImeMode.NoControl;
      this.buttonWriteChanges.Location = new Point(779, 400);
      this.buttonWriteChanges.Name = "buttonWriteChanges";
      this.buttonWriteChanges.Size = new Size(168, 24);
      this.buttonWriteChanges.TabIndex = 28;
      this.buttonWriteChanges.Text = "Write Changes";
      this.buttonWriteChanges.Click += new System.EventHandler(this.buttonWriteChanges_Click);
      this.buttonClearAll.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonClearAll.ImeMode = ImeMode.NoControl;
      this.buttonClearAll.Location = new Point(779, 310);
      this.buttonClearAll.Name = "buttonClearAll";
      this.buttonClearAll.Size = new Size(168, 24);
      this.buttonClearAll.TabIndex = 26;
      this.buttonClearAll.Text = "Clear All";
      this.buttonClearAll.Click += new System.EventHandler(this.buttonClearAll_Click);
      this.buttonReadMemory.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonReadMemory.ImeMode = ImeMode.NoControl;
      this.buttonReadMemory.Location = new Point(779, 340);
      this.buttonReadMemory.Name = "buttonReadMemory";
      this.buttonReadMemory.Size = new Size(168, 24);
      this.buttonReadMemory.TabIndex = 26;
      this.buttonReadMemory.Text = "Read Memory";
      this.buttonReadMemory.Click += new System.EventHandler(this.buttonReadMemory_Click);
      this.comboBoxLocation.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.comboBoxLocation.FormattingEnabled = true;
      this.comboBoxLocation.Location = new Point(826, 65);
      this.comboBoxLocation.Name = "comboBoxLocation";
      this.comboBoxLocation.Size = new Size(121, 21);
      this.comboBoxLocation.TabIndex = 25;
      this.label1.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label1.ImeMode = ImeMode.NoControl;
      this.label1.Location = new Point(731, 14);
      this.label1.Name = "label1";
      this.label1.Size = new Size(88, 16);
      this.label1.TabIndex = 24;
      this.label1.Text = "StartAddress";
      this.label1.TextAlign = ContentAlignment.MiddleRight;
      this.textBoxStartAddress.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxStartAddress.Location = new Point(827, 14);
      this.textBoxStartAddress.Name = "textBoxStartAddress";
      this.textBoxStartAddress.Size = new Size(120, 20);
      this.textBoxStartAddress.TabIndex = 20;
      this.textBoxStartAddress.Text = "0x200";
      this.textBoxStartAddress.WordWrap = false;
      this.label2.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label2.ImeMode = ImeMode.NoControl;
      this.label2.Location = new Point(731, 40);
      this.label2.Name = "label2";
      this.label2.Size = new Size(88, 16);
      this.label2.TabIndex = 23;
      this.label2.Text = "NumberOfBytes";
      this.label2.TextAlign = ContentAlignment.MiddleRight;
      this.textBoxNumberOfBytes.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxNumberOfBytes.Location = new Point(827, 40);
      this.textBoxNumberOfBytes.Name = "textBoxNumberOfBytes";
      this.textBoxNumberOfBytes.Size = new Size(120, 20);
      this.textBoxNumberOfBytes.TabIndex = 21;
      this.textBoxNumberOfBytes.Text = "100";
      this.textBoxNumberOfBytes.WordWrap = false;
      this.labelLocation.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.labelLocation.ImeMode = ImeMode.NoControl;
      this.labelLocation.Location = new Point(731, 66);
      this.labelLocation.Name = "labelLocation";
      this.labelLocation.Size = new Size(88, 16);
      this.labelLocation.TabIndex = 22;
      this.labelLocation.Text = "Location";
      this.labelLocation.TextAlign = ContentAlignment.MiddleRight;
      this.dataGridViewMemory.AllowUserToDeleteRows = false;
      this.dataGridViewMemory.AllowUserToResizeColumns = false;
      this.dataGridViewMemory.AllowUserToResizeRows = false;
      this.dataGridViewMemory.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.dataGridViewMemory.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dataGridViewMemory.Columns.AddRange((DataGridViewColumn) this.Address, (DataGridViewColumn) this.Col00, (DataGridViewColumn) this.Col01, (DataGridViewColumn) this.Col02, (DataGridViewColumn) this.Col03, (DataGridViewColumn) this.Col04, (DataGridViewColumn) this.Col05, (DataGridViewColumn) this.Col06, (DataGridViewColumn) this.Col07, (DataGridViewColumn) this.Col08, (DataGridViewColumn) this.Col09, (DataGridViewColumn) this.Col0a, (DataGridViewColumn) this.Col0b, (DataGridViewColumn) this.Col0c, (DataGridViewColumn) this.Col0d, (DataGridViewColumn) this.Col0e, (DataGridViewColumn) this.Col0f);
      this.dataGridViewMemory.Location = new Point(4, 4);
      this.dataGridViewMemory.Name = "dataGridViewMemory";
      this.dataGridViewMemory.Size = new Size(704, 428);
      this.dataGridViewMemory.TabIndex = 0;
      this.dataGridViewMemory.CellEndEdit += new DataGridViewCellEventHandler(this.dataGridViewMemory_CellEndEdit);
      this.dataGridViewMemory.CellEnter += new DataGridViewCellEventHandler(this.dataGridViewMemory_CellEnter);
      this.Address.HeaderText = "Address";
      this.Address.Name = "Address";
      this.Address.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col00.HeaderText = "00";
      this.Col00.Name = "Col00";
      this.Col00.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col00.Width = 30;
      this.Col01.HeaderText = "01";
      this.Col01.Name = "Col01";
      this.Col01.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col01.Width = 30;
      this.Col02.HeaderText = "02";
      this.Col02.Name = "Col02";
      this.Col02.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col02.Width = 30;
      this.Col03.HeaderText = "03";
      this.Col03.Name = "Col03";
      this.Col03.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col03.Width = 30;
      this.Col04.HeaderText = "04";
      this.Col04.Name = "Col04";
      this.Col04.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col04.Width = 30;
      this.Col05.HeaderText = "05";
      this.Col05.Name = "Col05";
      this.Col05.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col05.Width = 30;
      this.Col06.HeaderText = "06";
      this.Col06.Name = "Col06";
      this.Col06.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col06.Width = 30;
      this.Col07.HeaderText = "07";
      this.Col07.Name = "Col07";
      this.Col07.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col07.Width = 30;
      this.Col08.HeaderText = "08";
      this.Col08.Name = "Col08";
      this.Col08.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col08.Width = 30;
      this.Col09.HeaderText = "09";
      this.Col09.Name = "Col09";
      this.Col09.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col09.Width = 30;
      this.Col0a.HeaderText = "0a";
      this.Col0a.Name = "Col0a";
      this.Col0a.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col0a.Width = 30;
      this.Col0b.HeaderText = "0b";
      this.Col0b.Name = "Col0b";
      this.Col0b.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col0b.Width = 30;
      this.Col0c.HeaderText = "0c";
      this.Col0c.Name = "Col0c";
      this.Col0c.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col0c.Width = 30;
      this.Col0d.HeaderText = "0d";
      this.Col0d.Name = "Col0d";
      this.Col0d.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col0d.Width = 30;
      this.Col0e.HeaderText = "0e";
      this.Col0e.Name = "Col0e";
      this.Col0e.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col0e.Width = 30;
      this.Col0f.HeaderText = "0f";
      this.Col0f.Name = "Col0f";
      this.Col0f.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.Col0f.Width = 30;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(961, 477);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.zennerCoroprateDesign2);
      this.Name = nameof (MemoryAccess);
      this.Text = nameof (MemoryAccess);
      this.Load += new System.EventHandler(this.MemoryAccess_Load);
      this.FormClosing += new FormClosingEventHandler(this.MemoryAccess_FormClosing);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      ((ISupportInitialize) this.dataGridViewMemory).EndInit();
      this.ResumeLayout(false);
    }
  }
}


--- MinoConnectTest.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MinoConnectTest
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MinoConnectTest : Form
  {
    private DeviceCollectorFunctions myFunctions;
    private AsyncFunctions TestAsyncCom;
    private bool breakLoop = false;
    private IContainer components = (IContainer) null;
    private Button buttonStart;
    private Button buttonTestAsyncCom;
    private TextBox textBoxState;
    private TextBox textBoxNumberOfBytes;
    private Label label1;
    private TextBox textBoxStartBytes;
    private Label label2;
    private TextBox textBoxTestCom;
    private Label label3;
    private RadioButton radioButtonTransmit;
    private RadioButton radioButtonReceive;
    private RadioButton radioButtonRandom;

    public MinoConnectTest(DeviceCollectorFunctions myFunctions)
    {
      this.myFunctions = myFunctions;
      this.InitializeComponent();
      this.buttonStart.Enabled = false;
    }

    private void buttonTestAsyncCom_Click(object sender, EventArgs e)
    {
      if (this.TestAsyncCom == null)
        this.TestAsyncCom = new AsyncFunctions();
      int num = int.Parse(this.textBoxTestCom.Text);
      this.TestAsyncCom.SingleParameter(CommParameter.TestEcho, "false");
      this.TestAsyncCom.SingleParameter(CommParameter.Port, "COM" + num.ToString());
      this.TestAsyncCom.SingleParameter(CommParameter.Baudrate, this.myFunctions.MyCom.SingleParameter(CommParameter.Baudrate, (string) null));
      this.TestAsyncCom.SingleParameter(CommParameter.Parity, this.myFunctions.MyCom.SingleParameter(CommParameter.Parity, (string) null));
      this.TestAsyncCom.ShowComWindow();
      this.buttonStart.Enabled = true;
    }

    private void buttonStart_Click(object sender, EventArgs e)
    {
      AsyncFunctions transmitAsyncCom = this.myFunctions.MyCom as AsyncFunctions;
      AsyncFunctions asyncFunctions = this.TestAsyncCom;
      if (this.radioButtonReceive.Checked)
      {
        transmitAsyncCom = this.TestAsyncCom;
        asyncFunctions = this.myFunctions.MyCom as AsyncFunctions;
      }
      if (this.buttonStart.Text == "break")
      {
        this.breakLoop = true;
      }
      else
      {
        try
        {
          this.buttonStart.Text = "break";
          this.breakLoop = false;
          int num1 = 0;
          ZR_ClassLibMessages.ClearErrors();
          int.Parse(this.textBoxTestCom.Text);
          int length = int.Parse(this.textBoxStartBytes.Text);
          int num2 = int.Parse(this.textBoxNumberOfBytes.Text);
          this.textBoxState.Text = "Starting test. Open coms.";
          if (!asyncFunctions.Open())
            ZR_ClassLibMessages.ShowAndClearErrors();
          else if (!transmitAsyncCom.Open())
          {
            asyncFunctions.Close();
            ZR_ClassLibMessages.ShowAndClearErrors();
          }
          else
          {
            asyncFunctions.ClearCom();
            transmitAsyncCom.ClearCom();
            this.textBoxState.AppendText("\r\nComs open!");
            Random random = new Random(DateTime.Now.Millisecond);
            Queue<byte> byteQueue = new Queue<byte>();
            byte[] buffer1 = new byte[1];
            DateTime now1 = DateTime.Now;
            DateTime now2 = DateTime.Now;
            List<byte> byteList = new List<byte>();
            this.textBoxState.AppendText("\r\nStart transmitting");
            int bytePerSecound = int.Parse(this.myFunctions.MyCom.SingleParameter(CommParameter.Baudrate, (string) null)) / 11;
            byte[] numArray = new byte[length];
            random.NextBytes(numArray);
            for (int index = 0; index < length; ++index)
              byteQueue.Enqueue(numArray[index]);
            this.LoopTransmitBlock(numArray, transmitAsyncCom, bytePerSecound);
            int num3 = length;
            int num4 = 0;
            int num5 = 0;
            int num6 = 0;
            double num7 = 0.0;
            int num8 = 0;
            while (!this.breakLoop && num5 < num2 && num1 < 10)
            {
              if (num7 > 1000.0 || num8 > 10 || this.breakLoop)
              {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.AppendLine();
                stringBuilder.AppendLine("!!!!!!! Timeout !!!!!!!   " + num5.ToString() + " received");
                stringBuilder.AppendLine("Additional send bytes:");
                while (byteQueue.Count > 0)
                {
                  stringBuilder.AppendLine();
                  for (int index = 0; index < 50 && byteQueue.Count > 0; ++index)
                  {
                    byte num9 = byteQueue.Dequeue();
                    stringBuilder.Append(num9.ToString("x02") + " ");
                    if ((char) num9 == '#')
                      stringBuilder.Append('#');
                  }
                }
                this.textBoxState.AppendText(stringBuilder.ToString());
                break;
              }
              DateTime now3 = DateTime.Now;
              byte[] buffer2;
              bool block = asyncFunctions.TryReceiveBlock(out buffer2);
              double num10 = num7;
              DateTime now4 = DateTime.Now;
              TimeSpan timeSpan1 = now4.Subtract(now3);
              double totalMilliseconds1 = timeSpan1.TotalMilliseconds;
              num7 = num10 + totalMilliseconds1;
              if (block)
              {
                byteList.Clear();
                int num11 = num3;
                for (int index = 0; index < buffer2.Length; ++index)
                {
                  ++num5;
                  byte num12 = byteQueue.Dequeue();
                  if ((int) num12 != (int) buffer2[index])
                  {
                    TextBox textBoxState = this.textBoxState;
                    string[] strArray = new string[11];
                    strArray[0] = "\r\nByte error on byte:";
                    strArray[1] = num5.ToString("d06");
                    strArray[2] = " send=0x";
                    strArray[3] = num12.ToString("x02");
                    strArray[4] = "'";
                    char ch = (char) num12;
                    strArray[5] = ch.ToString();
                    strArray[6] = "' rec=0x";
                    strArray[7] = buffer2[index].ToString("x02");
                    strArray[8] = "'";
                    ch = (char) buffer2[index];
                    strArray[9] = ch.ToString();
                    strArray[10] = "'";
                    string text = string.Concat(strArray);
                    textBoxState.AppendText(text);
                    ++num8;
                  }
                  num7 = 0.0;
                  if (num11 < num2)
                  {
                    random.NextBytes(buffer1);
                    byteQueue.Enqueue(buffer1[0]);
                    byteList.Add(buffer1[0]);
                    ++num11;
                  }
                  if (this.breakLoop || num8 > 10)
                    break;
                }
                Application.DoEvents();
                now4 = DateTime.Now;
                timeSpan1 = now4.Subtract(now2);
                double totalMilliseconds2 = timeSpan1.TotalMilliseconds;
                int num13 = 0;
                if (totalMilliseconds2 > 0.0 && totalMilliseconds2 < (double) int.MaxValue)
                  num13 = Convert.ToInt32(totalMilliseconds2);
                int num14 = num5 - num6;
                int num15 = num3 - num4;
                int num16 = num3 - num5;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.AppendLine();
                stringBuilder.Append("msTimeDiff:" + num13.ToString());
                stringBuilder.Append("  Transmitted: " + num15.ToString() + " (" + num3.ToString() + ")");
                stringBuilder.Append("  Received:" + num14.ToString() + " (" + num5.ToString() + ")");
                stringBuilder.Append("  On the way:" + num16.ToString());
                this.textBoxState.AppendText(stringBuilder.ToString());
                num4 = num3;
                num6 = num5;
                now2 = DateTime.Now;
                if (num5 == num2)
                {
                  this.textBoxState.AppendText("\r\nok! All bytes received");
                  now4 = DateTime.Now;
                  TimeSpan timeSpan2 = now4.Subtract(now1);
                  double num17 = double.Parse(this.myFunctions.MyCom.SingleParameter(CommParameter.Baudrate, (string) null));
                  double num18 = (double) num2 * 11.0 / num17;
                  this.textBoxState.AppendText("\r\nUsed time[s]: " + timeSpan2.TotalSeconds.ToString() + "   extimated time[s]: " + num18.ToString());
                }
                else
                {
                  this.LoopTransmitBlock(byteList.ToArray(), transmitAsyncCom, bytePerSecound);
                  num3 += byteList.Count;
                }
              }
            }
            transmitAsyncCom.Close();
            asyncFunctions.Close();
            this.textBoxState.AppendText("\r\nComs closed!");
          }
        }
        catch (Exception ex)
        {
          ZR_ClassLibMessages.AddException(ex);
          ZR_ClassLibMessages.ShowAndClearErrors();
        }
        finally
        {
          this.buttonStart.Text = "Start";
          ZR_ClassLibMessages.ShowAndClearErrors();
          if (this.breakLoop)
          {
            this.textBoxState.AppendText("\r\nmanual break");
            this.breakLoop = false;
          }
        }
      }
    }

    private void LoopTransmitBlock(
      byte[] completeBlock,
      AsyncFunctions transmitAsyncCom,
      int bytePerSecound)
    {
      int num = 0;
      while (num < completeBlock.Length)
      {
        int length = completeBlock.Length - num;
        if (length > bytePerSecound)
          length = bytePerSecound;
        byte[] byteList = new byte[length];
        for (int index = 0; index < length; ++index)
          byteList[index] = completeBlock[index + num];
        transmitAsyncCom.PureTransmit(byteList);
        num += length;
        this.textBoxState.AppendText("\r\nBytes transmitted: " + num.ToString());
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.buttonStart = new Button();
      this.buttonTestAsyncCom = new Button();
      this.textBoxState = new TextBox();
      this.textBoxNumberOfBytes = new TextBox();
      this.label1 = new Label();
      this.textBoxStartBytes = new TextBox();
      this.label2 = new Label();
      this.textBoxTestCom = new TextBox();
      this.label3 = new Label();
      this.radioButtonTransmit = new RadioButton();
      this.radioButtonReceive = new RadioButton();
      this.radioButtonRandom = new RadioButton();
      this.SuspendLayout();
      this.buttonStart.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonStart.Location = new Point(998, 601);
      this.buttonStart.Margin = new Padding(4);
      this.buttonStart.Name = "buttonStart";
      this.buttonStart.Size = new Size(164, 28);
      this.buttonStart.TabIndex = 0;
      this.buttonStart.Text = "Start";
      this.buttonStart.UseVisualStyleBackColor = true;
      this.buttonStart.Click += new System.EventHandler(this.buttonStart_Click);
      this.buttonTestAsyncCom.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.buttonTestAsyncCom.Location = new Point(16, 605);
      this.buttonTestAsyncCom.Margin = new Padding(4);
      this.buttonTestAsyncCom.Name = "buttonTestAsyncCom";
      this.buttonTestAsyncCom.Size = new Size(164, 28);
      this.buttonTestAsyncCom.TabIndex = 0;
      this.buttonTestAsyncCom.Text = "InitTestAsyncCom";
      this.buttonTestAsyncCom.UseVisualStyleBackColor = true;
      this.buttonTestAsyncCom.Click += new System.EventHandler(this.buttonTestAsyncCom_Click);
      this.textBoxState.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.textBoxState.Font = new Font("Courier New", 8f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.textBoxState.Location = new Point(16, 206);
      this.textBoxState.Margin = new Padding(4);
      this.textBoxState.Multiline = true;
      this.textBoxState.Name = "textBoxState";
      this.textBoxState.ScrollBars = ScrollBars.Both;
      this.textBoxState.Size = new Size(1145, 387);
      this.textBoxState.TabIndex = 1;
      this.textBoxState.WordWrap = false;
      this.textBoxNumberOfBytes.Location = new Point(169, 44);
      this.textBoxNumberOfBytes.Margin = new Padding(4);
      this.textBoxNumberOfBytes.Name = "textBoxNumberOfBytes";
      this.textBoxNumberOfBytes.Size = new Size(132, 22);
      this.textBoxNumberOfBytes.TabIndex = 2;
      this.textBoxNumberOfBytes.Text = "10000";
      this.label1.AutoSize = true;
      this.label1.Location = new Point(19, 46);
      this.label1.Margin = new Padding(4, 0, 4, 0);
      this.label1.Name = "label1";
      this.label1.Size = new Size(106, 16);
      this.label1.TabIndex = 3;
      this.label1.Text = "Number of bytes";
      this.textBoxStartBytes.Location = new Point(169, 76);
      this.textBoxStartBytes.Margin = new Padding(4);
      this.textBoxStartBytes.Name = "textBoxStartBytes";
      this.textBoxStartBytes.Size = new Size(132, 22);
      this.textBoxStartBytes.TabIndex = 2;
      this.textBoxStartBytes.Text = "500";
      this.label2.AutoSize = true;
      this.label2.Location = new Point(19, 78);
      this.label2.Margin = new Padding(4, 0, 4, 0);
      this.label2.Name = "label2";
      this.label2.Size = new Size(71, 16);
      this.label2.TabIndex = 3;
      this.label2.Text = "Start bytes";
      this.textBoxTestCom.Location = new Point(169, 12);
      this.textBoxTestCom.Margin = new Padding(4);
      this.textBoxTestCom.Name = "textBoxTestCom";
      this.textBoxTestCom.Size = new Size(132, 22);
      this.textBoxTestCom.TabIndex = 2;
      this.textBoxTestCom.Text = "1";
      this.label3.AutoSize = true;
      this.label3.Location = new Point(19, 14);
      this.label3.Margin = new Padding(4, 0, 4, 0);
      this.label3.Name = "label3";
      this.label3.Size = new Size(68, 16);
      this.label3.TabIndex = 3;
      this.label3.Text = "Test COM";
      this.radioButtonTransmit.AutoSize = true;
      this.radioButtonTransmit.Checked = true;
      this.radioButtonTransmit.Location = new Point(374, 13);
      this.radioButtonTransmit.Name = "radioButtonTransmit";
      this.radioButtonTransmit.Size = new Size(177, 20);
      this.radioButtonTransmit.TabIndex = 4;
      this.radioButtonTransmit.TabStop = true;
      this.radioButtonTransmit.Text = "Transmit by MinoConnect";
      this.radioButtonTransmit.UseVisualStyleBackColor = true;
      this.radioButtonReceive.AutoSize = true;
      this.radioButtonReceive.Location = new Point(374, 39);
      this.radioButtonReceive.Name = "radioButtonReceive";
      this.radioButtonReceive.Size = new Size(176, 20);
      this.radioButtonReceive.TabIndex = 4;
      this.radioButtonReceive.Text = "Receive by MinoConnect";
      this.radioButtonReceive.UseVisualStyleBackColor = true;
      this.radioButtonRandom.AutoSize = true;
      this.radioButtonRandom.Location = new Point(374, 65);
      this.radioButtonRandom.Name = "radioButtonRandom";
      this.radioButtonRandom.Size = new Size(126, 20);
      this.radioButtonRandom.TabIndex = 4;
      this.radioButtonRandom.Text = "random direction";
      this.radioButtonRandom.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(8f, 16f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1182, 648);
      this.Controls.Add((Control) this.radioButtonRandom);
      this.Controls.Add((Control) this.radioButtonReceive);
      this.Controls.Add((Control) this.radioButtonTransmit);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.textBoxStartBytes);
      this.Controls.Add((Control) this.textBoxTestCom);
      this.Controls.Add((Control) this.textBoxNumberOfBytes);
      this.Controls.Add((Control) this.textBoxState);
      this.Controls.Add((Control) this.buttonTestAsyncCom);
      this.Controls.Add((Control) this.buttonStart);
      this.Margin = new Padding(4);
      this.Name = nameof (MinoConnectTest);
      this.Text = nameof (MinoConnectTest);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- MinolDevice.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MinolDevice
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public sealed class MinolDevice : MBusDevice
  {
    private const int LONG_WACKEUP_SEQUENCE = 1920;
    private const int SHORT_WACKEUP_SEQUENCE = 64;
    private static Logger logger = LogManager.GetLogger("DeviceCollector.MinolDevice");
    private byte[] savedReceivedProtocol;
    private int lengthOfWakeUpSequence;
    private int[] CodeTable = new int[8]
    {
      18463,
      21893,
      3673,
      27814,
      18154,
      29022,
      9735,
      15054
    };

    public MinolDevice(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.DeviceType = DeviceTypes.Minol_Device;
      this.Info.Manufacturer = "MINOL";
      this.Info.ParameterOk = true;
      this.lengthOfWakeUpSequence = 1920;
      this.UseOnlyLongWakeUpSequence = false;
    }

    public bool UseOnlyLongWakeUpSequence { get; set; }

    internal bool ReadMemory(
      MemoryLocation Location,
      int mbusAddress,
      int NumberOfBytes,
      out ByteField MemoryData)
    {
      MemoryData = (ByteField) null;
      if (this.MyBus.BreakRequest)
        return false;
      try
      {
        this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMemoryBlock);
        this.lengthOfWakeUpSequence = !this.UseOnlyLongWakeUpSequence ? 64 : 1920;
        int num = 0;
        int maxRequestRepeat = this.MyBus.MaxRequestRepeat;
        if (maxRequestRepeat == 1)
          ++maxRequestRepeat;
        while (this.MyBus.BusState.TestRepeatCounter(maxRequestRepeat))
        {
          ++num;
          if (MinolDevice.logger.IsTraceEnabled)
            MinolDevice.logger.Trace("Read {0} address {1} wake-up {2} IrDaPuls {3} attempt {4}/{5}", new object[6]
            {
              (object) Location,
              (object) mbusAddress,
              (object) this.lengthOfWakeUpSequence,
              (object) this.MyBus.MyCom.MinoConnectIrDaPulseLength,
              (object) num,
              (object) maxRequestRepeat
            });
          if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoHead)
          {
            this.TransmitBuffer = new ByteField(5);
            this.TransmitBuffer.Add(0);
            this.TransmitBuffer.Add((byte) 12);
            this.TransmitBuffer.Add((byte) this.lengthOfWakeUpSequence);
            this.TransmitBuffer.Add((byte) ((this.lengthOfWakeUpSequence & 65280) >> 8));
            this.TransmitBuffer.Add((byte) mbusAddress);
          }
          else
          {
            this.TransmitBuffer = new ByteField(this.lengthOfWakeUpSequence + 5);
            for (int index = 0; index < this.lengthOfWakeUpSequence; ++index)
              this.TransmitBuffer.Add(85);
            byte Byte = (byte) mbusAddress;
            this.TransmitBuffer.Add(16);
            this.TransmitBuffer.Add(75);
            this.TransmitBuffer.Add(Byte);
            this.TransmitBuffer.Add((byte) (75U + (uint) Byte));
            this.TransmitBuffer.Add(22);
          }
          string message = "Read address " + mbusAddress.ToString();
          if (num > 2)
            message = message + " Attemp: " + num.ToString() + " of " + maxRequestRepeat.ToString();
          this.MyBus.SendMessage(new GMM_EventArgs(message));
          if (this.MyBus.BreakRequest)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.OperationCancelled);
            return false;
          }
          LogManager.DisableLogging();
          if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
            return false;
          LogManager.EnableLogging();
          if (!this.ReceiveHeader())
          {
            if (ZR_ClassLibMessages.GetLastError() == ZR_ClassLibMessages.LastErrors.Timeout)
              this.lengthOfWakeUpSequence = 1920;
          }
          else
          {
            MemoryData = new ByteField(this.ReceiveBuffer.Count + this.FrameEndLen);
            for (int index = 0; index < this.ReceiveBuffer.Count; ++index)
              MemoryData.Add(this.ReceiveBuffer.Data[index]);
            if (this.MyBus.BreakRequest)
            {
              ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.OperationCancelled);
              return false;
            }
            if (!this.ReceiveLongframeEnd())
            {
              this.MyBus.MyCom.ClearCom();
              if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoConnect)
                this.MyBus.MyCom.ResetEarliestTransmitTime();
              if (ZR_ClassLibMessages.GetLastError() == ZR_ClassLibMessages.LastErrors.Timeout)
                this.lengthOfWakeUpSequence = 1920;
            }
            else
            {
              for (int index = 0; index < this.ReceiveBuffer.Count; ++index)
                MemoryData.Add(this.ReceiveBuffer.Data[index]);
              this.savedReceivedProtocol = MemoryData.Data;
              ZR_ClassLibMessages.ClearErrors();
              return true;
            }
          }
        }
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Read memory failed! The number of attempts: " + num.ToString());
        return false;
      }
      catch (Exception ex)
      {
        string str = "Read memory failed! Error:" + ex.Message + " Trace: " + ex.StackTrace;
        MinolDevice.logger.Error(ex, str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
        return false;
      }
    }

    internal bool WriteMemory(MemoryLocation Location, int StartAddress, ByteField WriteData)
    {
      BusDevice.CheckReadOnlyRight();
      try
      {
        if (!this.MyBus.MyCom.IsOpen && this.MyBus.MyCom.Open())
          return false;
        if (MinolDevice.logger.IsDebugEnabled)
          MinolDevice.logger.Debug("Write: " + Location.ToString() + " Address: " + StartAddress.ToString() + " Buffer: " + Util.ByteArrayToHexString(WriteData.Data));
        this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMemoryBlock);
        int num = 0;
        int maxRequestRepeat = this.MyBus.MaxRequestRepeat;
        if (maxRequestRepeat == 1)
          ++maxRequestRepeat;
        while (num < maxRequestRepeat)
        {
          ++num;
          if (!this.ReadMemory(MemoryLocation.RAM, 0, 0, out ByteField _))
            return false;
          this.lengthOfWakeUpSequence = num <= 1 ? 64 : 1920;
          int writePassword = this.GetWritePassword();
          byte Byte = Location == MemoryLocation.RAM ? (byte) 0 : (byte) 1;
          this.TransmitBuffer = new ByteField(14 + WriteData.Count);
          this.TransmitBuffer.Add(104);
          this.TransmitBuffer.Add(0);
          this.TransmitBuffer.Add(0);
          this.TransmitBuffer.Add(104);
          this.TransmitBuffer.Add(67);
          this.TransmitBuffer.Add(Byte);
          this.TransmitBuffer.Add(178);
          this.TransmitBuffer.Add((byte) writePassword);
          this.TransmitBuffer.Add((byte) (writePassword >> 8));
          this.TransmitBuffer.Add((byte) WriteData.Count);
          this.TransmitBuffer.Add((byte) StartAddress);
          this.TransmitBuffer.Add((byte) (StartAddress >> 8));
          for (int index = 0; index < WriteData.Count; ++index)
            this.TransmitBuffer.Add(WriteData.Data[index]);
          this.FinishLongFrame();
          string message = "Write at address " + Byte.ToString();
          if (this.MyBus.BusState.RepeadCounter > 1)
            message = message + " Attemp: " + num.ToString() + " of " + this.MyBus.MaxRequestRepeat.ToString();
          this.MyBus.SendMessage(new GMM_EventArgs(message));
          if (this.MyBus.BreakRequest)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.OperationCancelled);
            return false;
          }
          if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoHead)
          {
            this.lengthOfWakeUpSequence = 1920;
            ByteField DataBlock1 = new ByteField(4);
            DataBlock1.Add(0);
            DataBlock1.Add((byte) 4);
            DataBlock1.Add((byte) this.lengthOfWakeUpSequence);
            DataBlock1.Add((byte) ((this.lengthOfWakeUpSequence & 65280) >> 8));
            MinolDevice.logger.Trace("Set MinoHead lp2SetWakeupParams: {0}", this.lengthOfWakeUpSequence);
            this.MyBus.MyCom.TransmitBlock(ref DataBlock1);
            Util.Wait(200L, "while MinoHead send command.", (ICancelable) this.MyBus, MinolDevice.logger);
            if (this.MyBus.BreakRequest)
              return false;
            this.MyBus.MyCom.ClearCom();
            List<byte> byteList = new List<byte>();
            byteList.Add((byte) 0);
            byteList.Add((byte) 8);
            byteList.AddRange((IEnumerable<byte>) this.TransmitBuffer.Data);
            ByteField DataBlock2 = new ByteField(byteList.ToArray());
            this.MyBus.MyCom.TransmitBlock(ref DataBlock2);
            this.MyBus.BusState.IncrementTransmitBlockCounter();
            if (!Util.Wait(700L, "while MinoHead send command.", (ICancelable) this.MyBus, MinolDevice.logger))
              return false;
            this.MyBus.MyCom.ClearCom();
            ZR_ClassLibMessages.ClearErrors();
            return true;
          }
          ByteField DataBlock3 = new ByteField(14 + WriteData.Count + this.lengthOfWakeUpSequence);
          for (int index = 0; index < this.lengthOfWakeUpSequence; ++index)
            DataBlock3.Add(85);
          DataBlock3.Add(this.TransmitBuffer);
          this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteMemory);
          this.MyBus.MyCom.ResetEarliestTransmitTime();
          if (!this.MyBus.MyCom.TransmitBlock(ref DataBlock3))
            return false;
          this.MyBus.BusState.IncrementTransmitBlockCounter();
          ByteField DataBlock4 = new ByteField(1);
          bool block = this.MyBus.MyCom.ReceiveBlock(ref DataBlock4, 1, true);
          if (block && DataBlock4.Count == 1 && DataBlock4.Data[0] == (byte) 229)
          {
            ZR_ClassLibMessages.ClearErrors();
            return true;
          }
          if (block)
          {
            MinolDevice.logger.Error("Received wrong byte! Expected 0xE5, Actual 0x" + DataBlock4.Data[0].ToString("X2"));
            if (!Util.Wait(600L, "before clear input buffer", (ICancelable) this.MyBus, MinolDevice.logger))
              return false;
            this.MyBus.MyCom.ClearCom();
          }
          else if (ZR_ClassLibMessages.GetLastError() == ZR_ClassLibMessages.LastErrors.Timeout)
            this.lengthOfWakeUpSequence = 1920;
        }
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Write memory failed! The number of attempts: " + num.ToString());
        return false;
      }
      catch (Exception ex)
      {
        string str = "Write memory failed! Error: " + ex.Message;
        MinolDevice.logger.Error(ex, str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
        return false;
      }
    }

    internal override bool EraseFlash(int StartAddress, int NumberOfBytes)
    {
      BusDevice.CheckReadOnlyRight();
      MinolDevice.logger.Debug("Start EraseFlash");
      bool flag = this.WriteMemory(MemoryLocation.FLASH, 4096, new ByteField(0));
      if (!flag)
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Failed to erase the FLASH memory!");
      MinolDevice.logger.Debug("End EraseFlash");
      return flag;
    }

    private int GetWritePassword()
    {
      if (this.savedReceivedProtocol == null && this.savedReceivedProtocol.Length > 15)
        return -1;
      int StartOffset = 7;
      int num1 = (int) this.savedReceivedProtocol[1];
      int num2 = (int) this.savedReceivedProtocol[13];
      int num3 = (int) this.savedReceivedProtocol[17] + ((int) this.savedReceivedProtocol[18] << 8);
      if (num1 == 175 && num2 == 1 && num3 == 0)
        StartOffset = 163;
      short fromByteArrayShort1 = ParameterService.GetFromByteArray_short(this.savedReceivedProtocol, ref StartOffset);
      short fromByteArrayShort2 = ParameterService.GetFromByteArray_short(this.savedReceivedProtocol, ref StartOffset);
      byte num4 = this.savedReceivedProtocol[15];
      return (int) fromByteArrayShort2 ^ (int) fromByteArrayShort1 ^ ((int) num4 << 8) + (int) num4 ^ this.CodeTable[(int) num4 & 7];
    }

    public static InputUnitsIndex ConvertMinolUnitToInputUnitsIndex(byte minotelContactIndex)
    {
      minotelContactIndex &= (byte) 15;
      switch (minotelContactIndex)
      {
        case 1:
          return InputUnitsIndex.ImpUnit_0L;
        case 2:
          return InputUnitsIndex.ImpUnit_0qm;
        case 3:
          return InputUnitsIndex.ImpUnit_0Wh;
        case 4:
          return InputUnitsIndex.ImpUnit_0kWh;
        case 5:
          return InputUnitsIndex.ImpUnit_0MWh;
        case 6:
          return InputUnitsIndex.ImpUnit_0J;
        case 7:
          return InputUnitsIndex.ImpUnit_0kJ;
        case 8:
          return InputUnitsIndex.ImpUnit_0MJ;
        case 9:
          return InputUnitsIndex.ImpUnit_0GJ;
        default:
          return InputUnitsIndex.ImpUnit_0;
      }
    }
  }
}


--- Minomat.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.Minomat
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public abstract class Minomat
  {
    protected ulong _minomatSerial;
    protected ulong _minomatPassword;

    public virtual string minomatPassword
    {
      set => this.getUserPassword(value, ref this._minomatPassword);
    }

    public virtual string minomatSerial
    {
      set => this.getSerialNo(value, ref this._minomatSerial, true, false);
    }

    internal abstract bool GetDateTime(out DateTime dateTime);

    internal abstract bool SetDateTime(DateTime dateTime);

    internal abstract bool Read(
      byte dataType,
      byte slaveIndex,
      int months,
      int monthOffset,
      out Dictionary<string, Minomat.MinomatDeviceValue> processedMinomatDevices,
      out Dictionary<string, byte> hkveSerialNumbersAsStrings);

    internal abstract bool GetAllRegisteredDevices(
      out List<MinomatDevice> deviceList,
      byte startAddress,
      byte endAddress);

    internal virtual bool FillDevicesWithDetails(List<MinomatDevice> devices) => false;

    internal abstract bool GetSystemStatus(out object systemStatus);

    internal abstract bool FindHKVE(ulong serialOfHKVE, out string answer);

    internal abstract bool RegisterHKVE(List<MinomatDevice> deviceList);

    internal bool DeRegisterHKVE(MinomatDevice device)
    {
      if (device == null)
        return false;
      return this.DeRegisterHKVE(new List<MinomatDevice>()
      {
        device
      });
    }

    internal abstract bool DeRegisterHKVE(List<MinomatDevice> deviceList);

    internal abstract bool CheckHKVERegistration(byte index, out ulong serialNo);

    internal abstract bool GetConfiguration(out object config);

    internal abstract bool StopReception();

    internal abstract bool SystemInit();

    internal abstract bool StartHKVEReceptionWindow();

    internal abstract bool Connect();

    internal abstract bool SetConfiguration(MinomatV2.Configuration configuration);

    internal virtual bool getSerialNo(
      string input,
      ref ulong serialNo,
      bool useBCDEncoding,
      bool addZeroes)
    {
      string str = input;
      serialNo = 0UL;
      if (addZeroes)
      {
        if (str.Length < 8)
        {
          int num = 8 - str.Length;
          for (int index = 0; index < num; ++index)
            str = "0" + str;
        }
      }
      else if (str.Length != 8)
        return false;
      if (useBCDEncoding)
      {
        long num = Util.ToLong((object) str);
        serialNo = (ulong) Util.ConvertInt64ToBcdInt64(num);
        return serialNo > 0UL;
      }
      return str == "00000000";
    }

    internal virtual bool getUserPassword(string input, ref ulong userPassword)
    {
      string str = input;
      if (str.Length != 4)
        return false;
      userPassword = (ulong) ((int) (byte) str[0] << 24 | (int) (byte) str[1] << 16 | (int) (byte) str[2] << 8 | (int) (byte) str[3]);
      return true;
    }

    public class MinomatInfo
    {
      public object systemStatus;
      public object configuration;
      public DateTime systemTime;
    }

    protected class EventDataset
    {
      public Minomat.CCommandDate date1;
      public ulong eventReading1;
      public Minomat.CCommandDate date2;
      public ulong eventReading2;
      public ulong hkveSerialNo;

      public EventDataset()
      {
        this.eventReading1 = 0UL;
        this.eventReading2 = 0UL;
      }

      public bool isEmpty()
      {
        return this.eventReading1 == 0UL && this.eventReading2 == 0UL && this.date1.getEncodedDate() == (ushort) 0 && this.date2.getEncodedDate() == (ushort) 0;
      }
    }

    protected class DailyDataset
    {
      public Minomat.CCommandDate date;
      public ulong dailyReading;

      public DailyDataset() => this.dailyReading = 0UL;
    }

    protected class MonthlyDataset
    {
      public ulong hkveSerialNo;
      public byte status;
      public Minomat.CCommandDate date;
      public ushort fieldForceSum;
      public ushort hkveProtocols;
      public byte deviceType;
      public ulong fullMonthReading;
      public ushort factor;
      public ulong halfMonthReading;

      public MonthlyDataset()
      {
        this.hkveSerialNo = 0UL;
        this.status = (byte) 0;
        this.fieldForceSum = (ushort) 0;
        this.hkveProtocols = (ushort) 0;
        this.deviceType = (byte) 0;
        this.fullMonthReading = 0UL;
        this.factor = (ushort) 0;
        this.halfMonthReading = 0UL;
      }
    }

    public enum DataType
    {
      EventData = 1,
      MonthlyData = 2,
      DailyData = 4,
      HalfMonthlyData = 8,
    }

    public class MinomatDeviceValue
    {
      public SortedList<DateTime, List<Minomat.ProcessedData>> readoutValues = new SortedList<DateTime, List<Minomat.ProcessedData>>();
      public SortedList<OverrideID, ConfigurationParameter> configValues = new SortedList<OverrideID, ConfigurationParameter>();
    }

    public class ProcessedData
    {
      public Minomat.DataType DataType;
      public string ParameterName;
      public string ParameterValue;

      public ProcessedData(string parameterName, string parameterValue, Minomat.DataType dataType)
      {
        this.ParameterName = parameterName;
        this.ParameterValue = parameterValue;
        this.DataType = dataType;
      }
    }

    public class CCommandTime
    {
      private byte m_hours;
      private byte m_minutes;
      private byte m_seconds;

      public CCommandTime(byte hours, byte minutes, byte seconds)
      {
        this.m_hours = hours;
        this.m_minutes = minutes;
        this.m_seconds = seconds;
      }

      public byte getHours() => this.m_hours;

      public byte getMinutes() => this.m_minutes;

      public byte getSeconds() => this.m_seconds;

      public bool isValid()
      {
        return this.m_hours >= (byte) 0 && this.m_hours <= (byte) 23 && this.m_minutes >= (byte) 0 && this.m_minutes <= (byte) 59 && this.m_seconds >= (byte) 0 && this.m_seconds <= (byte) 59;
      }

      public override string ToString()
      {
        return this.m_hours.ToString() + ":" + this.m_minutes.ToString() + ":" + this.m_seconds.ToString();
      }
    }

    public class CCommandDate
    {
      private byte m_day;
      private byte m_month;
      private byte m_year;

      internal CCommandDate(byte day, byte month, byte year)
      {
        this.m_day = day;
        this.m_month = month;
        this.m_year = year;
      }

      internal CCommandDate(ushort encodedDate)
      {
        if (encodedDate == (ushort) 0)
        {
          this.m_year = this.m_month = this.m_day = (byte) 0;
        }
        else
        {
          this.m_year = (byte) (((int) encodedDate >> 12 & 15) << 3 | (int) encodedDate >> 5 & 7);
          this.m_month = (byte) ((int) encodedDate >> 8 & 15);
          this.m_day = (byte) ((uint) encodedDate & 31U);
        }
      }

      public byte getDay() => this.m_day;

      public byte getMonth() => this.m_month;

      public byte getYear() => this.m_year;

      internal void setDay(byte day) => this.m_day = day;

      internal void setMonth(byte month) => this.m_month = month;

      internal void setYear(byte year) => this.m_year = year;

      internal ushort getEncodedDate()
      {
        return this.m_year == (byte) 0 && this.m_month == (byte) 0 && this.m_day == (byte) 0 ? (ushort) 0 : (ushort) ((uint) ((int) this.m_year << 9 & 61440 | (int) this.m_month << 8 | (int) this.m_year << 5 & 224) | (uint) this.m_day);
      }

      public override string ToString()
      {
        return this.m_day.ToString() + "." + this.m_month.ToString() + "." + this.m_year.ToString();
      }
    }
  }
}


--- MinomatDevice.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MinomatDevice
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MinomatDevice : BusDevice
  {
    private string LastErrorString = "";
    internal SortedList<DateTime, List<Minomat.ProcessedData>> readoutValues = new SortedList<DateTime, List<Minomat.ProcessedData>>();
    internal SortedList<OverrideID, ConfigurationParameter> configValues;
    public byte PrimaryDeviceAddress;
    public bool PrimaryAddressOk;
    public bool PrimaryAddressKnown;
    public uint Serialnumber;

    public MinomatDevice(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.DeviceType = DeviceTypes.MinomatDevice;
      this.Info.Manufacturer = "MINOL";
      this.Info.ManufacturerCode = (short) 3570;
      this.Info.ParameterOk = true;
    }

    public MinomatDevice(MBusDevice TheMBusDevice)
      : base(TheMBusDevice.MyBus)
    {
      this.Info = TheMBusDevice.Info;
      this.Info.Manufacturer = "MINOL";
      this.Info.ManufacturerCode = (short) 3570;
      this.Info.Medium = (byte) 7;
      this.Info.LastReadingDate = SystemValues.DateTimeNow;
      this.LastErrorString = string.Empty;
      this.Info.ParameterOk = true;
      this.DeviceType = DeviceTypes.MinomatDevice;
    }

    internal bool ReadParameters()
    {
      this.Info.ParameterList.Clear();
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("RTIME", this.Info.LastReadingDate.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern)));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", this.Info.MeterNumber));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("MAN", this.Info.Manufacturer));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("GEN", this.Info.Version.ToString()));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("RADR", this.PrimaryDeviceAddress.ToString()));
      ((MinomatList) this.MyBus.MyDeviceList).ReadMinomat();
      if (this.configValues == null)
        return true;
      for (int index = 0; index < this.configValues.Count; ++index)
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct(this.configValues.Keys[index].ToString(), this.configValues.Values[index].ParameterValue.ToString()));
      SortedList<DateTime, int> sortedList = new SortedList<DateTime, int>();
      int num1 = 0;
      if (this.readoutValues == null)
        return true;
      for (int index1 = 0; index1 < this.readoutValues.Count; ++index1)
      {
        List<Minomat.ProcessedData> valuesIn = this.readoutValues.Values[index1];
        List<Minomat.ProcessedData> valuesOut;
        if (this.GetParameterFromList(ref valuesIn, "ewWert", out valuesOut))
        {
          if (!sortedList.ContainsKey(this.readoutValues.Keys[index1]))
            sortedList.Add(this.readoutValues.Keys[index1], num1++);
          int num2 = sortedList[this.readoutValues.Keys[index1]];
          for (int index2 = 0; index2 < valuesOut.Count; ++index2)
          {
            switch (valuesOut[index2].DataType)
            {
              case Minomat.DataType.EventData:
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_ST[" + num2.ToString() + "]", valuesOut[index2].ParameterValue));
                break;
              case Minomat.DataType.MonthlyData:
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_MO[" + num2.ToString() + "]", valuesOut[index2].ParameterValue));
                break;
              case Minomat.DataType.HalfMonthlyData:
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_HMO[" + num2.ToString() + "]", valuesOut[index2].ParameterValue));
                break;
            }
          }
        }
        if (this.GetParameterFromList(ref valuesIn, "ewFieldForceSum", out valuesOut))
        {
          if (!sortedList.ContainsKey(this.readoutValues.Keys[index1]))
            sortedList.Add(this.readoutValues.Keys[index1], num1++);
          int num3 = sortedList[this.readoutValues.Keys[index1]];
          string parameterValue = valuesOut[0].ParameterValue;
          string strValue = string.Empty;
          if (this.GetParameterFromList(ref valuesIn, "ewNumberOfReceivedHKVEFrames", out valuesOut))
            strValue = valuesOut[0].ParameterValue;
          int num4 = 0;
          int num5 = 0;
          int num6 = 0;
          if (Util.TryParseToInt32(parameterValue, out num5) && Util.TryParseToInt32(strValue, out num6) && num6 > 0)
            num4 = num5 / num6;
          this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_RSSI[" + num3.ToString() + "]", num4.ToString()));
        }
        if (this.GetParameterFromList(ref valuesIn, "ewStatus", out valuesOut))
        {
          if (!sortedList.ContainsKey(this.readoutValues.Keys[index1]))
            sortedList.Add(this.readoutValues.Keys[index1], num1++);
          int num7 = sortedList[this.readoutValues.Keys[index1]];
          for (int index3 = 0; index3 < valuesOut.Count; ++index3)
          {
            switch (valuesOut[index3].DataType)
            {
              case Minomat.DataType.EventData:
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_ST_STATUS[" + num7.ToString() + "]", valuesOut[index3].ParameterValue));
                break;
              case Minomat.DataType.MonthlyData:
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_MO_STATUS[" + num7.ToString() + "]", valuesOut[index3].ParameterValue));
                break;
              case Minomat.DataType.HalfMonthlyData:
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_HMO_STATUS[" + num7.ToString() + "]", valuesOut[index3].ParameterValue));
                break;
            }
          }
        }
        if (this.GetParameterFromList(ref valuesIn, "ewStatusDetail", out valuesOut))
        {
          if (!sortedList.ContainsKey(this.readoutValues.Keys[index1]))
            sortedList.Add(this.readoutValues.Keys[index1], num1++);
          int num8 = sortedList[this.readoutValues.Keys[index1]];
          for (int index4 = 0; index4 < valuesOut.Count; ++index4)
          {
            switch (valuesOut[index4].DataType)
            {
              case Minomat.DataType.EventData:
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_ST_STATUSDETAIL[" + num8.ToString() + "]", valuesOut[index4].ParameterValue));
                break;
              case Minomat.DataType.MonthlyData:
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_MO_STATUSDETAIL[" + num8.ToString() + "]", valuesOut[index4].ParameterValue));
                break;
              case Minomat.DataType.HalfMonthlyData:
                this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("M_HMO_STATUSDETAIL[" + num8.ToString() + "]", valuesOut[index4].ParameterValue));
                break;
            }
          }
        }
      }
      for (int index = 0; index < sortedList.Count; ++index)
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("TIMP[" + sortedList.Values[index].ToString() + "]", sortedList.Keys[index].ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern)));
      return true;
    }

    private bool GetParameterFromList(
      ref List<Minomat.ProcessedData> valuesIn,
      string name,
      out List<Minomat.ProcessedData> valuesOut)
    {
      valuesOut = new List<Minomat.ProcessedData>();
      for (int index = 0; index < valuesIn.Count; ++index)
      {
        if (valuesIn[index].ParameterName == name)
          valuesOut.Add(valuesIn[index]);
      }
      return valuesOut.Count > 0;
    }

    internal bool GetDeviceConfiguration(
      out SortedList<OverrideID, ConfigurationParameter> ConfigParamList)
    {
      ConfigParamList = (SortedList<OverrideID, ConfigurationParameter>) null;
      if (this.configValues == null)
        return false;
      ConfigParamList = this.configValues;
      return true;
    }
  }
}


--- MinomatList.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MinomatList
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using GmmDbLib;
using NLog;
using StartupLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MinomatList : DeviceList
  {
    public Minomat _minomat;
    private static Logger logger = LogManager.GetLogger(nameof (MinomatList));
    private bool _readoutDataValid = false;
    private byte _lastRequestedDataType = 0;
    private DateTime _lastStartDate = SystemValues.DateTimeNow;
    private DateTime _lastStopDate = SystemValues.DateTimeNow;
    private bool _minomatConnectionIsOpen;
    private bool _listIsValid;
    private string _minomatSerial;

    public bool IsConnected => this._minomatConnectionIsOpen;

    public MinomatList(DeviceCollectorFunctions BusRef)
    {
      this.MyBus = BusRef;
      this.bus = new ArrayList();
      this.FaultyDevices = new List<MBusDevice>();
      this._minomatConnectionIsOpen = false;
    }

    public bool ConnectToMinomat()
    {
      this.MyBus.BreakRequest = false;
      if (string.IsNullOrEmpty(this.MyBus.DaKonId) && this._minomatSerial == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "DaKonId is missing!");
        return false;
      }
      if (this.MyBus.DaKonId != this._minomatSerial)
      {
        this._minomatSerial = this.MyBus.DaKonId;
        this._minomat = (Minomat) new MinomatV2(this.MyBus);
        this._minomat.minomatSerial = this._minomatSerial;
        this._minomat.minomatPassword = "3414";
        this._minomatConnectionIsOpen = false;
      }
      this.MyBus.SendProgressMessage((object) this, "Wake up ...");
      if (this.MyBus.MyCom.Transceiver == TransceiverDevice.MinoConnect && this.MyBus.MyCom.IsOpen && this._minomat.Connect())
        return true;
      if (!this.MyBus.MyCom.Open())
        return false;
      if (this.MyBus.MyCom.Transceiver != TransceiverDevice.MinoConnect)
        this.MyBus.MyCom.CallTransceiverFunction(TransceiverDeviceFunction.TransparentModeOn);
      this._minomatConnectionIsOpen = this._minomat.Connect();
      if (!this._minomatConnectionIsOpen)
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, Ot.Gtm(Tg.CommunicationLogic, "FailedConnectToMinoat", "Could not connect to Minomat"));
      return this._minomatConnectionIsOpen;
    }

    public void DisconnectFromMinomat()
    {
      this._minomatConnectionIsOpen = false;
      this._readoutDataValid = false;
    }

    private bool GetMinomatRTC(out DateTime systemTime)
    {
      systemTime = new DateTime();
      return this.ConnectToMinomat() && this._minomat.GetDateTime(out systemTime);
    }

    internal bool SetMinomatRTC(DateTime dateTime)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      if (!this.ConnectToMinomat())
        return false;
      this._minomat.SetDateTime(dateTime);
      return true;
    }

    private bool GetMinomatStatus(out object status)
    {
      status = (object) null;
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      return this.ConnectToMinomat() && this._minomat.GetSystemStatus(out status);
    }

    private bool GetMinomatConfiguration(out object config)
    {
      config = (object) null;
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      return this.ConnectToMinomat() && this._minomat.GetConfiguration(out config);
    }

    public bool ReadMinomat()
    {
      if (this._readoutDataValid && this._minomatSerial == this.MyBus.DaKonId && this._lastStartDate == this.MyBus.ReadFromTime && this._lastStopDate == this.MyBus.ReadToTime && this._lastRequestedDataType == (byte) 3)
        return true;
      DateTime readFromTime = this.MyBus.ReadFromTime;
      DateTime dateTime = this.MyBus.ReadToTime;
      byte requestedDataType = 3;
      if (dateTime > SystemValues.DateTimeNow + TimeSpan.FromDays(31.0))
        dateTime = SystemValues.DateTimeNow + TimeSpan.FromDays(31.0);
      if (readFromTime > dateTime)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Illegal reading time span");
        return false;
      }
      MinomatList.logger.Debug<DateTime, DateTime>("Read values from {0} until {1}", readFromTime, dateTime);
      int months = dateTime.Month - readFromTime.Month + (dateTime.Year - readFromTime.Year) * 12;
      int month1 = dateTime.Month;
      DateTime dateTimeNow = SystemValues.DateTimeNow;
      int month2 = dateTimeNow.Month;
      int num1 = month1 - month2;
      int year1 = dateTime.Year;
      dateTimeNow = SystemValues.DateTimeNow;
      int year2 = dateTimeNow.Year;
      int num2 = (year1 - year2) * 12;
      int monthOffset = num1 + num2;
      if (monthOffset > 0)
        monthOffset = 0;
      if (months > 18)
        months = 18;
      if (months == 0)
        months = 1;
      MinomatList.logger.Debug("months: " + months.ToString() + " monthOffset: " + monthOffset.ToString());
      this._readoutDataValid = this.ReadMinomat(requestedDataType, months, monthOffset);
      if (this._readoutDataValid)
      {
        ZR_ClassLibMessages.ClearErrors();
        this._lastStartDate = this.MyBus.ReadFromTime;
        this._lastStopDate = this.MyBus.ReadToTime;
        this._lastRequestedDataType = requestedDataType;
      }
      return this._readoutDataValid;
    }

    private bool ReadMinomat(byte requestedDataType, int months, int monthOffset)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      if (!this.ConnectToMinomat())
        return false;
      byte slaveIndex = 0;
      Dictionary<string, Minomat.MinomatDeviceValue> processedMinomatDevices;
      Dictionary<string, byte> hkveSerialNumbersAsStrings;
      if (!this._minomat.Read(requestedDataType, slaveIndex, months, monthOffset, out processedMinomatDevices, out hkveSerialNumbersAsStrings))
        return false;
      if (hkveSerialNumbersAsStrings == null)
        return true;
      foreach (KeyValuePair<string, byte> keyValuePair in hkveSerialNumbersAsStrings)
      {
        Minomat.MinomatDeviceValue minomatDeviceValue;
        if (processedMinomatDevices.TryGetValue(keyValuePair.Key, out minomatDeviceValue))
        {
          MinomatDevice minomatDevice1 = (MinomatDevice) null;
          for (int index = 0; index < this.MyBus.MyDeviceList.bus.Count; ++index)
          {
            if (((BusDevice) this.MyBus.MyDeviceList.bus[index]).Info.MeterNumber == keyValuePair.Key)
            {
              minomatDevice1 = (MinomatDevice) this.MyBus.MyDeviceList.bus[index];
              break;
            }
          }
          if (minomatDevice1 == null)
          {
            MinomatDevice minomatDevice2 = new MinomatDevice(this.MyBus);
            minomatDevice2.PrimaryDeviceAddress = keyValuePair.Value;
            minomatDevice2.PrimaryAddressOk = true;
            minomatDevice2.PrimaryAddressKnown = true;
            minomatDevice2.Info.MeterNumber = keyValuePair.Key;
            if (minomatDeviceValue.configValues.ContainsKey(OverrideID.DiagnosticString) && minomatDeviceValue.configValues[OverrideID.DiagnosticString].ParameterValue != null)
            {
              string str = minomatDeviceValue.configValues[OverrideID.DiagnosticString].ParameterValue.ToString();
              if (!string.IsNullOrEmpty(str))
              {
                int num1 = str.IndexOf("Status=");
                if (num1 >= 0)
                {
                  int startIndex = num1 + 7;
                  if (startIndex + 2 <= str.Length)
                  {
                    string strValue = str.Substring(startIndex, 2);
                    byte num2 = 0;
                    if (ZR_ClassLibrary.Util.TryParseToByte(strValue, out num2))
                      minomatDevice2.Info.Status = num2;
                  }
                }
              }
            }
            minomatDevice2.readoutValues = minomatDeviceValue.readoutValues;
            minomatDevice2.configValues = minomatDeviceValue.configValues;
            this.bus.Add((object) minomatDevice2);
          }
          else if (minomatDeviceValue.readoutValues.Count > minomatDevice1.readoutValues.Count || minomatDeviceValue.configValues.Count > minomatDevice1.configValues.Count)
            MinomatList.logger.Debug("Error! ReadMinomat -> Got more readoutvalues than expected!");
        }
      }
      return true;
    }

    public bool SystemInit()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      return this.ConnectToMinomat() && this._minomat.SystemInit();
    }

    public bool StartHKVEReceptionWindow()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      return this.ConnectToMinomat() && this._minomat.StartHKVEReceptionWindow();
    }

    internal bool StopHKVEReceptionWindow()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      return this.ConnectToMinomat() && this._minomat.StopReception();
    }

    public bool RegisterHKVE(List<MinomatDevice> deviceList)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      return this.ConnectToMinomat() && this._minomat.RegisterHKVE(deviceList);
    }

    public bool DeRegisterHKVE(List<MinomatDevice> deviceList)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      return this.ConnectToMinomat() && this._minomat.DeRegisterHKVE(deviceList);
    }

    internal bool SetConfiguration(MinomatV2.Configuration configuration)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return false;
      }
      return this.ConnectToMinomat() && this._minomat.SetConfiguration(configuration);
    }

    internal MinomatV2.Configuration GetConfiguration()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return (MinomatV2.Configuration) null;
      }
      object config;
      return !this.ConnectToMinomat() || !this._minomat.GetConfiguration(out config) ? (MinomatV2.Configuration) null : (MinomatV2.Configuration) config;
    }

    internal MinomatV2.SystemStatus GetSystemStatus()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV2))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatV2!");
        return (MinomatV2.SystemStatus) null;
      }
      object systemStatus;
      return !this.ConnectToMinomat() || !this._minomat.GetSystemStatus(out systemStatus) ? (MinomatV2.SystemStatus) null : (MinomatV2.SystemStatus) systemStatus;
    }

    internal void SendStatusMessage(string message, int id, GMM_EventArgs.MessageType TheEvent)
    {
      this.MyBus.SendMessage(message, id, TheEvent);
    }

    internal bool GetAllRegisteredDevices(
      out List<MinomatDevice> devices,
      byte startAddress,
      byte endAddress)
    {
      devices = (List<MinomatDevice>) null;
      if (this._listIsValid)
        return true;
      return this.ConnectToMinomat() && this._minomat.GetAllRegisteredDevices(out devices, startAddress, endAddress);
    }

    internal override bool AddDevice(DeviceTypes NewType, bool select)
    {
      if (NewType != DeviceTypes.MinomatDevice)
        throw new NotImplementedException();
      object obj = (object) new MinomatDevice(this.MyBus);
      bool flag = false;
      for (int index = 0; index < this.bus.Count; ++index)
      {
        if (((BusDevice) this.bus[index]).Info.MeterNumber == ((BusDevice) obj).Info.MeterNumber)
        {
          flag = true;
          break;
        }
      }
      if (!flag)
        this.bus.Add(obj);
      if (select)
        this.SelectedDevice = (BusDevice) this.bus[this.bus.Count - 1];
      return true;
    }

    internal override bool AddDevice(object NewDevice, bool select)
    {
      bool flag = false;
      for (int index = 0; index < this.bus.Count; ++index)
      {
        if (((BusDevice) this.bus[index]).Info.MeterNumber == ((BusDevice) NewDevice).Info.MeterNumber)
        {
          flag = true;
          break;
        }
      }
      if (!flag)
        this.bus.Add(NewDevice);
      if (select)
        this.SelectedDevice = (BusDevice) this.bus[this.bus.Count - 1];
      return true;
    }

    internal override bool ScanFromAddress(int ScanAddress) => this.ReadMinomat();

    internal override bool SearchSingleDeviceByPrimaryAddress(int SearchAddress)
    {
      if (SearchAddress < 0 || SearchAddress > 250 && SearchAddress != 254)
        return false;
      bool flag = false;
      this.MyBus.BreakRequest = false;
      List<MinomatDevice> devices;
      if (this.GetAllRegisteredDevices(out devices, (byte) SearchAddress, (byte) SearchAddress))
      {
        for (int index = 0; index < devices.Count; ++index)
          this.AddDevice((object) devices[index], true);
        flag = true;
      }
      return flag;
    }

    internal override bool SearchSingleDeviceBySerialNumber(string SearchSerialNumber)
    {
      long serialOfHKVE = 0;
      bool flag1 = true;
      bool flag2 = true;
      if (flag1)
      {
        if (SearchSerialNumber.Length < 8)
        {
          int num = 8 - SearchSerialNumber.Length;
          for (int index = 0; index < num; ++index)
            SearchSerialNumber = "0" + SearchSerialNumber;
        }
      }
      else if (SearchSerialNumber.Length < 8)
        return false;
      if (flag2)
      {
        int[] numArray = new int[8]
        {
          28,
          24,
          20,
          16,
          12,
          8,
          4,
          0
        };
        for (int index = 0; index < 8; ++index)
        {
          if (SearchSerialNumber[index] < '0' || SearchSerialNumber[index] > '9')
            return false;
          long num = (long) ((int) SearchSerialNumber[index] - 48);
          serialOfHKVE |= num << numArray[index];
        }
      }
      else
        serialOfHKVE = long.Parse(SearchSerialNumber);
      string answer;
      if (this._minomat.FindHKVE((ulong) serialOfHKVE, out answer))
      {
        int num1 = (int) MessageBox.Show(answer);
      }
      else
      {
        int num2 = (int) MessageBox.Show("error");
      }
      return true;
    }

    internal override void DeleteBusList()
    {
      this._listIsValid = false;
      this._readoutDataValid = false;
      base.DeleteBusList();
    }

    internal override bool DeleteSelectedDevice()
    {
      if (!(this.SelectedDevice is MinomatDevice selectedDevice))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.OperationCancelled, "No device is selected!");
        return false;
      }
      if (!this.ConnectToMinomat())
        return false;
      bool flag = this._minomat.DeRegisterHKVE(selectedDevice);
      this.bus.Remove((object) this.SelectedDevice);
      this.SelectedDevice = (BusDevice) null;
      return flag;
    }

    internal override bool GetDeviceCollectorInfo(out object InfoObject)
    {
      InfoObject = (object) new Minomat.MinomatInfo();
      return this.GetMinomatConfiguration(out ((Minomat.MinomatInfo) InfoObject).configuration) && this.GetMinomatStatus(out ((Minomat.MinomatInfo) InfoObject).systemStatus) && this.GetMinomatRTC(out ((Minomat.MinomatInfo) InfoObject).systemTime);
    }

    public enum MinomatReadMode
    {
      EventData,
      MonthlyData,
      DailyData,
    }
  }
}


--- MinomatV2.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.MinomatV2
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using NLog;
using System;
using System.Collections.Generic;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class MinomatV2 : Minomat
  {
    private static Logger logger = LogManager.GetLogger(nameof (MinomatV2));
    private DeviceCollectorFunctions MyBus;
    private MinomatV2.CCommunication _communication;
    private MinomatV2.CCommandArray MyCCommandArray = new MinomatV2.CCommandArray();
    private static byte[] FRAME_PREFIX = new byte[5]
    {
      (byte) 85,
      (byte) 85,
      (byte) 85,
      (byte) 85,
      (byte) 15
    };
    private const byte NUMBER_OF_DEVICES_CONNECTED_TO_DAKON_SLAVE = 200;
    private const byte NUMBER_OF_SLAVES_CONNECTED_TO_DAKON_MASTER = 20;
    private const int M5P_F_KFACTOR = 1000;
    private const int PERS_FIELDSTRENGTHDATA = 1;
    private const int PERS_INTERMEDIATEDATA = 2;
    private const int PERS_KEYDATEDATA = 4;
    private const int PERS_MONTHLYDATA = 8;

    public MinomatV2(DeviceCollectorFunctions SerialBus)
    {
      this.MyBus = SerialBus;
      this._communication = (MinomatV2.CCommunication) new MinomatV2.CSerialCommunication(this.MyBus);
      this.MyCCommandArray = new MinomatV2.CCommandArray();
    }

    internal override bool GetDateTime(out DateTime dateTime)
    {
      dateTime = new DateTime();
      MinomatV2.logger.Debug("GetDateTime() called");
      MinomatV2.CCommandGetTime ccommandGetTime = new MinomatV2.CCommandGetTime(this._minomatSerial, this._minomatPassword);
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) ccommandGetTime);
      if (this._communication.sendCommands(ref this.MyCCommandArray) && ccommandGetTime.hasReceivedResponse())
      {
        Minomat.CCommandTime time = ccommandGetTime.getTime();
        Minomat.CCommandDate date = ccommandGetTime.getDate();
        dateTime = new DateTime((int) date.getYear() + 2000, (int) date.getMonth(), (int) date.getDay(), (int) time.getHours(), (int) time.getMinutes(), (int) time.getSeconds());
        MinomatV2.logger.Debug(string.Format("GetDateTime() successfull: dateTime is {0}", (object) dateTime.ToString()));
        return true;
      }
      MinomatV2.logger.Error("GetDateTime() failed");
      return false;
    }

    internal override bool SetDateTime(DateTime dateTime)
    {
      MinomatV2.logger.Debug("Try to set the device clock: " + dateTime.ToShortDateString() + " " + dateTime.ToLongTimeString());
      MinomatV2.CCommandSetTime ccommandSetTime = new MinomatV2.CCommandSetTime(this._minomatSerial, this._minomatPassword, new Minomat.CCommandTime((byte) dateTime.Hour, (byte) dateTime.Minute, (byte) dateTime.Second), new Minomat.CCommandDate((byte) dateTime.Day, (byte) dateTime.Month, byte.Parse(dateTime.ToString("yy"))));
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) ccommandSetTime);
      if (!this._communication.sendCommands(ref this.MyCCommandArray, false))
      {
        string str = "Failed set the device clock!";
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
        MinomatV2.logger.Error(str);
        return false;
      }
      MinomatV2.logger.Debug("The device clock was successfully updated!");
      return true;
    }

    internal override bool SetConfiguration(MinomatV2.Configuration configuration)
    {
      MinomatV2.logger.Debug<MinomatV2.Configuration>("SetConfiguration: {0}", configuration);
      MinomatV2.CCommandSetConfiguration setConfiguration = new MinomatV2.CCommandSetConfiguration(this._minomatSerial, this._minomatPassword, configuration);
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) setConfiguration);
      if (!this._communication.sendCommands(ref this.MyCCommandArray, false))
      {
        string str = "Failed to set configuration!";
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
        MinomatV2.logger.Error(str);
        return false;
      }
      MinomatV2.logger.Debug("The device configuration was successfully updated!");
      return true;
    }

    internal override bool StopReception()
    {
      MinomatV2.logger.Debug("StopReception() called");
      MinomatV2.CCommandStopReception ccommandStopReception = new MinomatV2.CCommandStopReception(this._minomatSerial, this._minomatPassword);
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) ccommandStopReception);
      if (this._communication.sendCommands(ref this.MyCCommandArray))
      {
        MinomatV2.logger.Debug("StopReception() successfull");
        return true;
      }
      MinomatV2.logger.Error("StopReception() failed");
      return false;
    }

    internal override bool Read(
      byte dataType,
      byte slaveIndex,
      int months,
      int monthOffset,
      out Dictionary<string, Minomat.MinomatDeviceValue> processedMinomatDevices,
      out Dictionary<string, byte> hkveSerialNumbersAsStrings)
    {
      hkveSerialNumbersAsStrings = new Dictionary<string, byte>();
      processedMinomatDevices = new Dictionary<string, Minomat.MinomatDeviceValue>();
      byte startAddress = 0;
      List<MinomatDevice> deviceList = new List<MinomatDevice>();
      this.MyBus.SendProgressMessage((object) this, "Read list of registered devices...");
      if (!this.GetAllRegisteredDevices(out deviceList, startAddress, (byte) 200))
        return false;
      if (deviceList.Count == 0)
        return true;
      byte primaryDeviceAddress1 = deviceList[0].PrimaryDeviceAddress;
      byte primaryDeviceAddress2 = deviceList[deviceList.Count - 1].PrimaryDeviceAddress;
      if (MinomatV2.logger.IsTraceEnabled)
        MinomatV2.logger.Trace(string.Format("Read Minomat: startAddress->{0}, endAddress->{1}, months->{2}, monthOffset->{3}", (object) primaryDeviceAddress1, (object) primaryDeviceAddress2, (object) months, (object) monthOffset));
      MinomatV2.CCommandArray CommandArray = new MinomatV2.CCommandArray();
      MinomatV2.CCommandArray ccommandArray = new MinomatV2.CCommandArray();
      MinomatV2.CCommandArray commArray1 = new MinomatV2.CCommandArray();
      MinomatV2.CCommandArray commArray2 = new MinomatV2.CCommandArray();
      byte startBlock1 = (byte) Util.RoundDown((int) primaryDeviceAddress1, 4);
      byte endBlock1 = (byte) Util.RoundUp((int) primaryDeviceAddress2, 4);
      if (((int) dataType & 2) == 2 || ((int) dataType & 1) == 1)
        this.fillCommandArrayMonthlyDataDakon(ref commArray1, slaveIndex, startBlock1, endBlock1, months, monthOffset);
      byte startBlock2 = (byte) Util.RoundDown((int) primaryDeviceAddress1, 5);
      byte endBlock2 = (byte) Util.RoundUp((int) primaryDeviceAddress2, 5);
      if (((int) dataType & 1) == 1)
        this.fillCommandArrayEventDataDakon(ref commArray2, slaveIndex, startBlock2, endBlock2);
      for (int index = 0; index < commArray1.CCommands.Count; ++index)
        CommandArray.CCommands.Add(commArray1.CCommands[index]);
      for (int index = 0; index < commArray2.CCommands.Count; ++index)
        CommandArray.CCommands.Add(commArray2.CCommands[index]);
      bool flag = this._communication.sendCommands(ref CommandArray);
      if (flag)
      {
        MinomatV2.logger.Debug("Received {0} responces", CommandArray.CCommands.Count);
        if (((int) dataType & 2) == 2 || ((int) dataType & 1) == 1)
          this.processMonthlyDataDakon(commArray1, startBlock1, endBlock1, months, monthOffset, processedMinomatDevices, hkveSerialNumbersAsStrings);
        if (((int) dataType & 1) == 1)
          this.processEventDataDakon(commArray2, processedMinomatDevices, hkveSerialNumbersAsStrings, startBlock2, endBlock2);
      }
      else
        MinomatV2.logger.Error("sendCommands failed.");
      return flag;
    }

    internal override bool GetAllRegisteredDevices(
      out List<MinomatDevice> deviceList,
      byte startAddress,
      byte endAddress)
    {
      deviceList = new List<MinomatDevice>();
      MinomatV2.logger.Debug("Get all registered devices...");
      this.MyCCommandArray.CCommands.Clear();
      for (byte index = startAddress; (int) index < (int) endAddress; ++index)
        this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) new MinomatV2.CCommandCheckHKVERegistration(this._minomatSerial, this._minomatPassword, index));
      if (this._communication.sendCommands(ref this.MyCCommandArray))
      {
        for (int index = 0; index < this.MyCCommandArray.CCommands.Count; ++index)
        {
          if (this.MyCCommandArray.CCommands[index].hasReceivedResponse() && !this.MyCCommandArray.CCommands[index].hasError())
          {
            ulong num = ((MinomatV2.CCommandCheckHKVERegistration) this.MyCCommandArray.CCommands[index]).getSerialNoAnswer() & (ulong) uint.MaxValue;
            if (num != 0UL)
            {
              ((MinomatV2.CCommandCheckHKVERegistration) this.MyCCommandArray.CCommands[index]).getIndex();
              MinomatDevice minomatDevice = new MinomatDevice(this.MyBus);
              minomatDevice.PrimaryDeviceAddress = ((MinomatV2.CCommandCheckHKVERegistration) this.MyCCommandArray.CCommands[index]).getIndex();
              minomatDevice.Info.A_Field = minomatDevice.PrimaryDeviceAddress;
              minomatDevice.PrimaryAddressOk = true;
              minomatDevice.PrimaryAddressKnown = true;
              minomatDevice.Info.MeterNumber = ParameterService.ConvertInt32ToHexString((int) num);
              deviceList.Add(minomatDevice);
              if (MinomatV2.logger.IsDebugEnabled)
                MinomatV2.logger.Debug(string.Format("ID: {0}\tAddress: {1}", (object) minomatDevice.Info.MeterNumber, (object) minomatDevice.PrimaryDeviceAddress));
            }
          }
        }
        return true;
      }
      MinomatV2.logger.Error("GetAllRegisteredDevices() failed");
      return false;
    }

    internal override bool GetSystemStatus(out object systemStatus)
    {
      MinomatV2.logger.Debug("GetSystemStatus() called");
      systemStatus = (object) null;
      MinomatV2.CCommandGetSystemStatus ccommandGetSystemStatus = new MinomatV2.CCommandGetSystemStatus(this._minomatSerial, this._minomatPassword);
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) ccommandGetSystemStatus);
      if (this._communication.sendCommands(ref this.MyCCommandArray) && !ccommandGetSystemStatus.hasError())
      {
        systemStatus = (object) ccommandGetSystemStatus.getSystemStatus();
        MinomatV2.logger.Debug("GetSystemStatus() succeeded: " + systemStatus.ToString());
        return true;
      }
      MinomatV2.logger.Error("GetSystemStatus() failed");
      return false;
    }

    internal override bool FindHKVE(ulong serialOfHKVE, out string answer)
    {
      MinomatV2.logger.Debug(string.Format("FindHKVE() for SN{0} called", (object) serialOfHKVE.ToString()));
      MinomatV2.CCommandFindHKVE ccommandFindHkve = new MinomatV2.CCommandFindHKVE(this._minomatSerial, this._minomatPassword, serialOfHKVE);
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) ccommandFindHkve);
      answer = MinomatV2.CCommandFindHKVE.Answer.NOT_FOUND.ToString();
      if (this._communication.sendCommands(ref this.MyCCommandArray) && !ccommandFindHkve.hasError() && ccommandFindHkve.getAnswer() != 0)
      {
        MinomatV2.logger.Debug("FindHKVE() succeeded: " + answer);
        answer = ccommandFindHkve.getAnswer().ToString();
        return true;
      }
      MinomatV2.logger.Error("FindHKVE() failed");
      return false;
    }

    internal override bool RegisterHKVE(List<MinomatDevice> deviceList)
    {
      bool flag = true;
      foreach (MinomatDevice device in deviceList)
      {
        if (!Util.IsInteger(device.Info.MeterNumber))
        {
          string str = "Can not register the device! The serial number " + device.Info.MeterNumber + " is not valid!";
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, str);
          MinomatV2.logger.Error(str);
        }
        else
        {
          uint uint32 = ParameterService.ConvertHexStringToUInt32(device.Info.MeterNumber);
          if (uint32 == 0U)
          {
            string str = "Can not register the device! The serial number " + device.Info.MeterNumber + " is not valid!";
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, str);
            MinomatV2.logger.Error(str);
          }
          else
          {
            MinomatV2.CCommand command = (MinomatV2.CCommand) new MinomatV2.CCommandRegisterHKVE(this._minomatSerial, this._minomatPassword, (ulong) uint32, MinomatV2.CCommandRegisterHKVE.RegistrationType.REGISTER);
            if (!this._communication.sendCommand(ref command, true) & command.hasError())
            {
              string str = "Failed register the serial number " + device.Info.MeterNumber + "!";
              ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
              MinomatV2.logger.Error(str);
              flag = false;
            }
            else
            {
              switch (((MinomatV2.CCommandRegisterHKVE) command).getAnswer())
              {
                case MinomatV2.CCommandRegisterHKVE.Answer.OK:
                  MinomatV2.logger.Debug("Register {0} succeeded.", device.Info.MeterNumber);
                  break;
                case MinomatV2.CCommandRegisterHKVE.Answer.ALREADY_REGISTERED:
                  if (!this.DeRegisterHKVE(device))
                    return false;
                  if (!this._communication.sendCommand(ref command, true) & command.hasError())
                  {
                    string str = "Failed register the serial number " + device.Info.MeterNumber + "!";
                    ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
                    MinomatV2.logger.Error(str);
                    flag = false;
                    continue;
                  }
                  if (((MinomatV2.CCommandRegisterHKVE) command).getAnswer() != MinomatV2.CCommandRegisterHKVE.Answer.OK)
                  {
                    string str = "Can not register the serial number: " + device.Info.MeterNumber + " The device is already registered!";
                    ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, str);
                    MinomatV2.logger.Debug(str);
                    flag = false;
                    break;
                  }
                  break;
                default:
                  throw new NotImplementedException();
              }
            }
          }
        }
      }
      return flag;
    }

    internal override bool DeRegisterHKVE(List<MinomatDevice> deviceList)
    {
      bool flag = true;
      foreach (MinomatDevice device in deviceList)
      {
        uint uint32 = ParameterService.ConvertHexStringToUInt32(device.Info.MeterNumber);
        if (uint32 == 0U)
        {
          string str = "Can not deregister a device! The serial number " + device.Info.MeterNumber + " is not valid!";
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, str);
          MinomatV2.logger.Error(str);
          flag = false;
        }
        else
        {
          MinomatV2.CCommand command = (MinomatV2.CCommand) new MinomatV2.CCommandRegisterHKVE(this._minomatSerial, this._minomatPassword, (ulong) uint32, MinomatV2.CCommandRegisterHKVE.RegistrationType.REMOVE);
          if (!this._communication.sendCommand(ref command, true) & command.hasError())
          {
            string str = "Failed deregister the serialnumber " + device.Info.MeterNumber + "!";
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
            MinomatV2.logger.Error(str);
            flag = false;
          }
          else
          {
            switch (((MinomatV2.CCommandRegisterHKVE) command).getAnswer())
            {
              case MinomatV2.CCommandRegisterHKVE.Answer.OK:
                if (MinomatV2.logger.IsDebugEnabled)
                {
                  MinomatV2.logger.Debug("Deregister {0} succeeded.", device.Info.MeterNumber);
                  goto case MinomatV2.CCommandRegisterHKVE.Answer.NOT_FOUND;
                }
                else
                  goto case MinomatV2.CCommandRegisterHKVE.Answer.NOT_FOUND;
              case MinomatV2.CCommandRegisterHKVE.Answer.NOT_FOUND:
                continue;
              default:
                throw new NotImplementedException();
            }
          }
        }
      }
      return flag;
    }

    internal override bool CheckHKVERegistration(byte index, out ulong serialNo)
    {
      MinomatV2.logger.Debug(string.Format("CheckHKVERegistration() for index{0} called", (object) index));
      serialNo = 0UL;
      MinomatV2.CCommandCheckHKVERegistration hkveRegistration = new MinomatV2.CCommandCheckHKVERegistration(this._minomatSerial, this._minomatPassword, index);
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) hkveRegistration);
      if (this._communication.sendCommands(ref this.MyCCommandArray) && !hkveRegistration.hasError() && hkveRegistration.hasReceivedResponse())
      {
        MinomatV2.logger.Debug("CheckHKVERegistration() succeeded, serial is " + serialNo.ToString());
        serialNo = hkveRegistration.getSerialNoAnswer();
        return true;
      }
      MinomatV2.logger.Error("CheckHKVERegistration() failed");
      return false;
    }

    internal override bool GetConfiguration(out object config)
    {
      MinomatV2.logger.Debug("GetConfiguration() called");
      config = (object) null;
      MinomatV2.CCommandGetConfiguration getConfiguration = new MinomatV2.CCommandGetConfiguration(this._minomatSerial, this._minomatPassword);
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) getConfiguration);
      if (this._communication.sendCommands(ref this.MyCCommandArray) && !getConfiguration.hasError() && getConfiguration.hasReceivedResponse())
      {
        config = (object) getConfiguration.getConfiguration();
        return true;
      }
      MinomatV2.logger.Error("GetConfiguration() failed");
      return false;
    }

    public int RecTime_BeforFirstByte
    {
      get
      {
        if (this.MyBus.MyCom == null)
          return 2000;
        SortedList<AsyncComSettings, object> asyncComSettings = this.MyBus.MyCom.GetAsyncComSettings();
        return !asyncComSettings.ContainsKey(AsyncComSettings.RecTime_BeforFirstByte) || string.IsNullOrEmpty(asyncComSettings[AsyncComSettings.RecTime_BeforFirstByte].ToString()) ? 2000 : Convert.ToInt32(asyncComSettings[AsyncComSettings.RecTime_BeforFirstByte]);
      }
      set
      {
        if (this.MyBus.MyCom == null)
          return;
        this.MyBus.MyCom.SingleParameter(CommParameter.RecTime_BeforFirstByte, value.ToString());
      }
    }

    internal override bool SystemInit()
    {
      MinomatV2.logger.Debug("SystemInit called");
      MinomatV2.CCommandSystemInit ccommandSystemInit = new MinomatV2.CCommandSystemInit(this._minomatSerial, this._minomatPassword, 51647890UL);
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) ccommandSystemInit);
      bool flag = false;
      int timeBeforFirstByte = this.RecTime_BeforFirstByte;
      if (timeBeforFirstByte < 6000)
        this.RecTime_BeforFirstByte = 6000;
      try
      {
        flag = this._communication.sendCommands(ref this.MyCCommandArray, true);
      }
      finally
      {
        this.RecTime_BeforFirstByte = timeBeforFirstByte;
      }
      if (flag && ccommandSystemInit.hasReceivedResponse())
      {
        if (ccommandSystemInit.isInvalidDeleteCode())
        {
          string str = "SystemInit failed! The delete code is invalid.";
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, str);
          MinomatV2.logger.Error(str);
          return false;
        }
        if (!ccommandSystemInit.hasError())
          return true;
        string str1 = "SystemInit failed! Unknown error.";
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, str1);
        MinomatV2.logger.Error(str1);
        return false;
      }
      MinomatV2.logger.Error("SystemInit failed");
      return false;
    }

    internal override bool StartHKVEReceptionWindow()
    {
      MinomatV2.logger.Debug("StartHKVEReceptionWindow() called");
      MinomatV2.CCommandStartHKVEReceptionWindow hkveReceptionWindow = new MinomatV2.CCommandStartHKVEReceptionWindow(this._minomatSerial, this._minomatPassword);
      this.MyCCommandArray.CCommands.Clear();
      this.MyCCommandArray.CCommands.Add((MinomatV2.CCommand) hkveReceptionWindow);
      if (this._communication.sendCommands(ref this.MyCCommandArray) && !hkveReceptionWindow.hasError() && hkveReceptionWindow.hasReceivedResponse())
      {
        MinomatV2.logger.Debug("StartHKVEReceptionWindow() succeeded, no Error and hasReceivedResponse");
        return true;
      }
      MinomatV2.logger.Error("StartHKVEReceptionWindow() failed");
      return false;
    }

    internal override bool Connect()
    {
      return this._communication.Connect(this._minomatSerial, this._minomatPassword);
    }

    private bool fillCommandArrayMonthlyDataDakon(
      ref MinomatV2.CCommandArray commArray,
      byte slaveIndex,
      byte startBlock,
      byte endBlock,
      int months,
      int monthOffset)
    {
      MinomatV2.logger.Debug<byte, byte>("startBlock->{0} endBlock->{1}", startBlock, endBlock);
      byte num1 = startBlock;
      int num2 = months;
      int num3 = monthOffset;
      SortedList<byte, string> sortedList = new SortedList<byte, string>();
      for (; (int) num1 <= (int) endBlock; ++num1)
      {
        DateTime dateTimeNow = SystemValues.DateTimeNow;
        Minomat.CCommandDate date = dateTimeNow.Month + num3 != 0 ? new Minomat.CCommandDate((byte) dateTimeNow.Day, (byte) (dateTimeNow.Month + num3), (byte) (dateTimeNow.Year - 2000)) : new Minomat.CCommandDate((byte) dateTimeNow.Day, (byte) 12, (byte) (dateTimeNow.Year - 2000 - 1));
        for (int index1 = 0; index1 < num2; ++index1)
        {
          byte primaryAddress;
          byte index2;
          if (slaveIndex > (byte) 0)
          {
            if (num1 < (byte) 25)
            {
              primaryAddress = slaveIndex;
              index2 = num1;
            }
            else
            {
              primaryAddress = (byte) ((uint) slaveIndex + 20U);
              index2 = (byte) ((uint) num1 - 25U);
            }
          }
          else
          {
            primaryAddress = (byte) 0;
            index2 = num1;
          }
          MinomatV2.CCommandGetMonthlyData ccommandGetMonthlyData = new MinomatV2.CCommandGetMonthlyData(this._minomatSerial, this._minomatPassword, ref date, primaryAddress, index2);
          commArray.CCommands.Add((MinomatV2.CCommand) ccommandGetMonthlyData);
          if (date.getMonth() == (byte) 1)
          {
            date.setYear((byte) ((uint) date.getYear() - 1U));
            date.setMonth((byte) 12);
          }
          else
            date.setMonth((byte) ((uint) date.getMonth() - 1U));
        }
      }
      return true;
    }

    private bool fillCommandArrayEventDataDakon(
      ref MinomatV2.CCommandArray commArray,
      byte slaveIndex,
      byte startBlock,
      byte endBlock)
    {
      string[] strArray1 = new string[2];
      string[] strArray2 = new string[2];
      string[] strArray3 = new string[2];
      string[] strArray4 = new string[2];
      for (byte index = startBlock; (int) index <= (int) endBlock; ++index)
      {
        MinomatV2.CCommandGetEventData ccommandGetEventData = new MinomatV2.CCommandGetEventData(this._minomatSerial, this._minomatPassword, slaveIndex, index);
        commArray.CCommands.Add((MinomatV2.CCommand) ccommandGetEventData);
      }
      return true;
    }

    private bool processMonthlyDataDakon(
      MinomatV2.CCommandArray commArray,
      byte startBlock,
      byte endBlock,
      int months,
      int monthOffset,
      Dictionary<string, Minomat.MinomatDeviceValue> processedMinomatDevices,
      Dictionary<string, byte> deviceSerialNumbersAsStrings)
    {
      byte num1 = startBlock;
      int num2 = months;
      int num3 = monthOffset;
      int num4 = 0;
      for (; (int) num1 <= (int) endBlock; ++num1)
      {
        DateTime dateTimeNow1 = SystemValues.DateTimeNow;
        Minomat.CCommandDate ccommandDate = dateTimeNow1.Month + num3 != 0 ? new Minomat.CCommandDate((byte) 0, (byte) (dateTimeNow1.Month + num3), (byte) (dateTimeNow1.Year - 2000)) : new Minomat.CCommandDate((byte) 0, (byte) 12, (byte) (dateTimeNow1.Year - 2000 - 1));
        for (int index1 = 0; index1 < num2; ++index1)
        {
          MinomatV2.CCommandGetMonthlyData ccommand = (MinomatV2.CCommandGetMonthlyData) commArray.CCommands[num4++];
          for (int index2 = 0; index2 < 4; ++index2)
          {
            Minomat.MonthlyDataset dataset = ccommand.getDataset(index2);
            if (dataset.hkveSerialNo != 0UL)
            {
              string str = this.getSerialNoFromBCDValue(dataset.hkveSerialNo).ToString();
              byte num5 = (byte) (4 * (int) num1 + index2);
              string StringValue = num5.ToString();
              if (!deviceSerialNumbersAsStrings.ContainsKey(str))
              {
                deviceSerialNumbersAsStrings.Add(str, num5);
                processedMinomatDevices.Add(str, (Minomat.MinomatDeviceValue) null);
              }
              else if (MinomatV2.logger.IsDebugEnabled && (int) deviceSerialNumbersAsStrings[str] != (int) num5)
                MinomatV2.logger.Debug(string.Format("WARNING: serial {0} exists on multiple adresses ({1}, {2}) within minomat", (object) str, (object) deviceSerialNumbersAsStrings[str], (object) num5));
              Minomat.MinomatDeviceValue minomatDeviceValue;
              if (processedMinomatDevices[str] == null)
              {
                minomatDeviceValue = new Minomat.MinomatDeviceValue();
                processedMinomatDevices[str] = minomatDeviceValue;
              }
              else
                minomatDeviceValue = processedMinomatDevices[str];
              this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.SerialNumber, new ConfigurationParameter(OverrideID.SerialNumber, str, true), false);
              this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.DaKonSerialNumber, new ConfigurationParameter(OverrideID.DaKonSerialNumber, this.getSerialNoFromBCDValue(this._minomatSerial).ToString(), true), false);
              this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.DaKonRegisterNumber, new ConfigurationParameter(OverrideID.DaKonRegisterNumber, StringValue, true), false);
              int num6;
              if (((MinomatV2.CCommandGetMonthlyData) commArray.CCommands[index1]).isDatasetMissing(index2))
              {
                this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.DiagnosticString, new ConfigurationParameter(OverrideID.DiagnosticString, string.Format("Status={0:x2}", (object) dataset.status), true), false);
                if (((int) dataset.status & 1) == 0)
                  this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.DeviceHasError, new ConfigurationParameter(OverrideID.DeviceHasError, "false", true), false);
                else
                  this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.DeviceHasError, new ConfigurationParameter(OverrideID.DeviceHasError, "true", true), false);
              }
              else
              {
                this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.DiagnosticString, new ConfigurationParameter(OverrideID.DiagnosticString, string.Format("Status={0:x2} Factor={1:x2}", (object) dataset.status, (object) dataset.factor), true), false);
                if (((int) dataset.status & 32) == 32)
                  this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.Manipulation, new ConfigurationParameter(OverrideID.Manipulation, "true", true), false);
                else
                  this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.Manipulation, new ConfigurationParameter(OverrideID.Manipulation, "false", true), false);
                if (((int) dataset.status & 16) == 0)
                  this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.DeviceHasError, new ConfigurationParameter(OverrideID.DeviceHasError, "false", true), false);
                else
                  this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.DeviceHasError, new ConfigurationParameter(OverrideID.DeviceHasError, "true", true), false);
                if (str.IndexOf("8") == 0)
                {
                  if (dataset.factor == (ushort) 1000)
                    this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.HCA_Scale, new ConfigurationParameter(OverrideID.HCA_Scale, HCA_Scale.Uniform.ToString(), true), false);
                  else
                    this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.HCA_Scale, new ConfigurationParameter(OverrideID.HCA_Scale, HCA_Scale.Product.ToString(), true), false);
                  float num7 = (float) ((int) dataset.factor / 1000);
                  this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.HCA_Factor_Weighting, new ConfigurationParameter(OverrideID.HCA_Factor_Weighting, num7.ToString((IFormatProvider) FixedFormates.TheFormates), true), false);
                  if (((int) dataset.status & 128) == 0)
                    this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.HCA_SensorMode, new ConfigurationParameter(OverrideID.HCA_SensorMode, HCA_SensorMode.Single.ToString(), true), false);
                  else
                    this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.HCA_SensorMode, new ConfigurationParameter(OverrideID.HCA_SensorMode, HCA_SensorMode.Double.ToString(), true), false);
                }
                else
                {
                  num6 = (int) dataset.factor >> 4;
                  num6.ToString((IFormatProvider) FixedFormates.TheFormates);
                  this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.HCA_SensorMode, new ConfigurationParameter(OverrideID.HCA_SensorMode, HCA_SensorMode.Double.ToString(), true), false);
                  this.AddValueToList(ref minomatDeviceValue.configValues, OverrideID.DeviceUnit, new ConfigurationParameter(OverrideID.DeviceUnit, this.getPulseUnit((ushort) ((uint) dataset.factor & 15U)), true), false);
                }
              }
              string[] strArray1 = new string[2];
              string[] strArray2 = new string[2];
              string[] strArray3 = new string[2];
              string[] strArray4 = new string[2];
              string deviceSerialNumber1 = str;
              long fullMonthReading = (long) dataset.fullMonthReading;
              long halfMonthReading1 = (long) dataset.halfMonthReading;
              DateTime dateTimeNow2 = SystemValues.DateTimeNow;
              num6 = dateTimeNow2.Month;
              string readingName1 = "FULLMONTHREADING: " + num6.ToString();
              Minomat.CCommandDate date1 = dataset.date;
              Minomat.CCommandDate requestedMonth1 = ccommandDate;
              int num8 = ccommand.hasChecksumError(index2) ? 1 : 0;
              int num9 = ccommand.isDatasetMissing(index2) ? 1 : 0;
              ref string local1 = ref strArray1[0];
              ref string local2 = ref strArray2[0];
              ref string local3 = ref strArray3[0];
              ref string local4 = ref strArray4[0];
              this.validateDataEntryDakon(deviceSerialNumber1, (ulong) fullMonthReading, (ulong) halfMonthReading1, readingName1, date1, requestedMonth1, num8 != 0, num9 != 0, ref local1, ref local2, ref local3, ref local4);
              if (strArray3[0] == "NOT_AVAILABLE" && strArray2[0] == "NO_DATA" || dataset.halfMonthReading == 0UL)
              {
                strArray1[1] = strArray1[0];
                strArray2[1] = "NO_DATA";
                strArray3[1] = "NOT_AVAILABLE";
                strArray4[1] = "NO_DATA";
              }
              else
              {
                string deviceSerialNumber2 = str;
                long halfMonthReading2 = (long) dataset.halfMonthReading;
                dateTimeNow2 = SystemValues.DateTimeNow;
                num6 = dateTimeNow2.Month;
                string readingName2 = "HALFMONTHREADING: " + num6.ToString();
                Minomat.CCommandDate date2 = dataset.date;
                Minomat.CCommandDate requestedMonth2 = ccommandDate;
                int num10 = ccommand.hasChecksumError(index2) ? 1 : 0;
                int num11 = ccommand.isDatasetMissing(index2) ? 1 : 0;
                ref string local5 = ref strArray1[1];
                ref string local6 = ref strArray2[1];
                ref string local7 = ref strArray3[1];
                ref string local8 = ref strArray4[1];
                this.validateDataEntryDakon(deviceSerialNumber2, (ulong) halfMonthReading2, 0UL, readingName2, date2, requestedMonth2, num10 != 0, num11 != 0, ref local5, ref local6, ref local7, ref local8);
              }
              DateTime key = new DateTime();
              bool flag1;
              try
              {
                key = DateTime.Parse(strArray1[0]);
                flag1 = true;
              }
              catch
              {
                flag1 = false;
              }
              if (flag1)
              {
                List<Minomat.ProcessedData> values;
                if (minomatDeviceValue.readoutValues.ContainsKey(key))
                {
                  values = minomatDeviceValue.readoutValues[key];
                }
                else
                {
                  values = new List<Minomat.ProcessedData>();
                  minomatDeviceValue.readoutValues.Add(key, values);
                }
                this.AddValueToList(ref values, "ewFunkId", str, Minomat.DataType.MonthlyData, false);
                this.AddValueToList(ref values, "ewName", "FULLMONTHREADING", Minomat.DataType.MonthlyData, false);
                this.AddValueToList(ref values, "ewDakonSNr", StringValue, Minomat.DataType.MonthlyData, false);
                this.AddValueToList(ref values, "ewDatum", strArray1[0], Minomat.DataType.MonthlyData, false);
                this.AddValueToList(ref values, "ewWert", strArray2[0], Minomat.DataType.MonthlyData, false);
                this.AddValueToList(ref values, "ewStatus", strArray3[0], Minomat.DataType.MonthlyData, false);
                this.AddValueToList(ref values, "ewStatusDetail", strArray4[0], Minomat.DataType.MonthlyData, false);
                this.AddValueToList(ref values, "ewFieldForceSum", dataset.fieldForceSum.ToString((IFormatProvider) FixedFormates.TheFormates), Minomat.DataType.MonthlyData, false);
                this.AddValueToList(ref values, "ewNumberOfReceivedHKVEFrames", dataset.hkveProtocols.ToString((IFormatProvider) FixedFormates.TheFormates), Minomat.DataType.MonthlyData, false);
              }
              bool flag2;
              try
              {
                key = DateTime.Parse(strArray1[1]);
                flag2 = true;
              }
              catch
              {
                flag2 = false;
              }
              if (flag2)
              {
                List<Minomat.ProcessedData> values;
                if (minomatDeviceValue.readoutValues.ContainsKey(key))
                {
                  values = minomatDeviceValue.readoutValues[key];
                }
                else
                {
                  values = new List<Minomat.ProcessedData>();
                  minomatDeviceValue.readoutValues.Add(key, values);
                }
                this.AddValueToList(ref values, "ewFunkId", str, Minomat.DataType.HalfMonthlyData, false);
                this.AddValueToList(ref values, "ewName", "HALFMONTHREADING", Minomat.DataType.HalfMonthlyData, false);
                this.AddValueToList(ref values, "ewDakonSNr", StringValue, Minomat.DataType.HalfMonthlyData, false);
                this.AddValueToList(ref values, "ewDatum", strArray1[1], Minomat.DataType.HalfMonthlyData, false);
                this.AddValueToList(ref values, "ewWert", strArray2[1], Minomat.DataType.HalfMonthlyData, false);
                this.AddValueToList(ref values, "ewStatus", strArray3[1], Minomat.DataType.HalfMonthlyData, false);
                this.AddValueToList(ref values, "ewStatusDetail", strArray4[1], Minomat.DataType.HalfMonthlyData, false);
                this.AddValueToList(ref values, "ewFieldForceSum", dataset.fieldForceSum.ToString((IFormatProvider) FixedFormates.TheFormates), Minomat.DataType.HalfMonthlyData, false);
                this.AddValueToList(ref values, "ewNumberOfReceivedHKVEFrames", dataset.hkveProtocols.ToString((IFormatProvider) FixedFormates.TheFormates), Minomat.DataType.HalfMonthlyData, false);
              }
            }
          }
          if (ccommandDate.getMonth() == (byte) 1)
          {
            ccommandDate.setYear((byte) ((uint) ccommandDate.getYear() - 1U));
            ccommandDate.setMonth((byte) 12);
          }
          else
            ccommandDate.setMonth((byte) ((uint) ccommandDate.getMonth() - 1U));
        }
      }
      return true;
    }

    private void AddValueToList(
      ref List<Minomat.ProcessedData> values,
      string name,
      string value,
      Minomat.DataType dataType,
      bool overrideValue)
    {
      for (int index = 0; index < values.Count; ++index)
      {
        Minomat.ProcessedData processedData = values[index];
        if (processedData.ParameterName == name && processedData.DataType == dataType)
        {
          if (processedData.ParameterValue == value || !overrideValue)
            return;
          processedData.ParameterValue = value;
          return;
        }
      }
      values.Add(new Minomat.ProcessedData(name, value, dataType));
    }

    private void AddValueToList(
      ref SortedList<OverrideID, ConfigurationParameter> values,
      OverrideID name,
      ConfigurationParameter value,
      bool overrideValue)
    {
      if (values.ContainsKey(name))
      {
        if (!overrideValue)
          return;
        values[name] = value;
      }
      else
        values.Add(name, value);
    }

    private bool processEventDataDakon(
      MinomatV2.CCommandArray commArray,
      Dictionary<string, Minomat.MinomatDeviceValue> processedMinomatDevices,
      Dictionary<string, byte> hkveSerialNumbersAsStrings,
      byte startBlock,
      byte endBlock)
    {
      string[] strArray1 = new string[2];
      string[] strArray2 = new string[2];
      string[] strArray3 = new string[2];
      string[] strArray4 = new string[2];
      int num1 = 0;
      GMM_EventArgs e = new GMM_EventArgs(GMM_EventArgs.MessageType.MessageAndProgressPercentage);
      for (byte index1 = startBlock; (int) index1 <= (int) endBlock; ++index1)
      {
        int num2 = (int) index1 * 100 / (int) endBlock;
        if (num1 != num2)
        {
          num1 = num2;
          e.EventMessage = "Progress encode " + num2.ToString() + "%";
          e.ProgressPercentage = num2;
          this.MyBus.SendMessage(e);
        }
        if (this.MyBus.BreakRequest)
        {
          MinomatV2.logger.Info("Break requested.");
          return false;
        }
        MinomatV2.CCommandGetEventData ccommand = (MinomatV2.CCommandGetEventData) commArray.CCommands[(int) index1 - (int) startBlock];
        for (byte index2 = 0; index2 < (byte) 5; ++index2)
        {
          Minomat.EventDataset dataset = ccommand.getDataset((int) index2);
          if (dataset != null && !dataset.isEmpty())
          {
            byte num3 = (byte) ((uint) index1 * 5U + (uint) index2);
            string str = string.Empty;
            if (hkveSerialNumbersAsStrings.ContainsValue(num3))
            {
              foreach (KeyValuePair<string, byte> serialNumbersAsString in hkveSerialNumbersAsStrings)
              {
                if ((int) serialNumbersAsString.Value == (int) num3)
                {
                  str = serialNumbersAsString.Key;
                  break;
                }
              }
            }
            if (processedMinomatDevices.ContainsKey(str))
            {
              this.validateDataEntryDakon(str, dataset.eventReading1, 0UL, "ST1", dataset.date1, (Minomat.CCommandDate) null, ccommand.hasChecksumError((int) index2), ccommand.isDatasetMissing((int) index2), ref strArray1[0], ref strArray2[0], ref strArray3[0], ref strArray4[0]);
              this.validateDataEntryDakon(str, dataset.eventReading2, 0UL, "ST2", dataset.date2, (Minomat.CCommandDate) null, ccommand.hasChecksumError((int) index2), ccommand.isDatasetMissing((int) index2), ref strArray1[1], ref strArray2[1], ref strArray3[1], ref strArray4[1]);
              if (strArray3[0] == "READING_VALID")
              {
                Minomat.MinomatDeviceValue minomatDeviceValue;
                if (processedMinomatDevices[str] == null)
                {
                  minomatDeviceValue = new Minomat.MinomatDeviceValue();
                  processedMinomatDevices[str] = minomatDeviceValue;
                }
                else
                  minomatDeviceValue = processedMinomatDevices[str];
                DateTime key = new DateTime();
                bool flag;
                try
                {
                  key = DateTime.Parse(strArray1[0]);
                  flag = true;
                }
                catch
                {
                  flag = false;
                }
                if (flag)
                {
                  List<Minomat.ProcessedData> values;
                  if (minomatDeviceValue.readoutValues.ContainsKey(key))
                  {
                    values = minomatDeviceValue.readoutValues[key];
                  }
                  else
                  {
                    values = new List<Minomat.ProcessedData>();
                    minomatDeviceValue.readoutValues.Add(key, values);
                  }
                  this.AddValueToList(ref values, "ewFunkId", str, Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewName", "DUEDATEREADING", Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewDatum", strArray1[0], Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewWert", strArray2[0], Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewStatus", strArray3[0], Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewStatusDetail", strArray4[0], Minomat.DataType.EventData, false);
                }
              }
              if (strArray3[1] == "READING_VALID")
              {
                Minomat.MinomatDeviceValue minomatDeviceValue;
                if (processedMinomatDevices[str] == null)
                {
                  minomatDeviceValue = new Minomat.MinomatDeviceValue();
                  processedMinomatDevices[str] = minomatDeviceValue;
                }
                else
                  minomatDeviceValue = processedMinomatDevices[str];
                DateTime key = new DateTime();
                bool flag;
                try
                {
                  key = DateTime.Parse(strArray1[1]);
                  flag = true;
                }
                catch
                {
                  flag = false;
                }
                if (flag)
                {
                  List<Minomat.ProcessedData> values;
                  if (minomatDeviceValue.readoutValues.ContainsKey(key))
                  {
                    values = minomatDeviceValue.readoutValues[key];
                  }
                  else
                  {
                    values = new List<Minomat.ProcessedData>();
                    minomatDeviceValue.readoutValues.Add(key, values);
                  }
                  this.AddValueToList(ref values, "ewFunkId", str, Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewName", "DUEDATEREADING", Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewDatum", strArray1[1], Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewWert", strArray2[1], Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewStatus", strArray3[1], Minomat.DataType.EventData, false);
                  this.AddValueToList(ref values, "ewStatusDetail", strArray4[1], Minomat.DataType.EventData, false);
                }
                else if (MinomatV2.logger.IsTraceEnabled)
                  MinomatV2.logger.Trace("date is invalid");
              }
            }
            else if (MinomatV2.logger.IsTraceEnabled)
              MinomatV2.logger.Trace(string.Format("processedMinomatDevices did not contain serialnumber, skipping."));
          }
        }
      }
      return true;
    }

    private void writeDataEntryDakon(
      string deviceSerialNumber,
      string readingName,
      string valueDate,
      string valueValue,
      string valueState,
      string valueStateDetail,
      string dakonSNrAsString)
    {
      if (!MinomatV2.logger.IsTraceEnabled)
        return;
      MinomatV2.logger.Trace(string.Format("{0};{1};{2};{3};{4};{5}", (object) deviceSerialNumber, (object) readingName, (object) valueDate, (object) valueValue, (object) valueState, (object) valueStateDetail));
    }

    private ulong getSerialNoFromBCDValue(ulong serialNoBCD)
    {
      ulong serialNoFromBcdValue = 0;
      byte[] numArray = new byte[8]
      {
        (byte) 28,
        (byte) 24,
        (byte) 20,
        (byte) 16,
        (byte) 12,
        (byte) 8,
        (byte) 4,
        (byte) 0
      };
      for (int index = 0; index < 8; ++index)
        serialNoFromBcdValue = (ulong) (10L * (long) serialNoFromBcdValue + ((long) (serialNoBCD >> (int) numArray[index]) & 15L));
      return serialNoFromBcdValue;
    }

    private void validateDataEntryDakon(
      string deviceSerialNumber,
      ulong readingValue,
      ulong hmReadingValue,
      string readingName,
      Minomat.CCommandDate readingDate,
      Minomat.CCommandDate requestedMonth,
      bool hasChecksumError,
      bool isDatasetMissing,
      ref string valueDate,
      ref string valueValue,
      ref string valueState,
      ref string valueStateDetail)
    {
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      bool flag4 = false;
      if (requestedMonth != null && readingDate.getDay() > (byte) 15)
        flag4 = true;
      valueState = string.Empty;
      valueStateDetail = string.Empty;
      bool flag5;
      if (isDatasetMissing || readingValue == 0UL && readingDate.getDay() == (byte) 0 && readingDate.getMonth() == (byte) 0 && readingDate.getYear() == (byte) 0)
      {
        valueState = "NOT_AVAILABLE";
        valueStateDetail = "NO_RECEPTION";
        if (requestedMonth != null)
          this.adjustMonthlyReadingDateToRequestedMonth(readingDate, requestedMonth, readingName);
        flag5 = this.isDateValid(readingDate);
      }
      else if (hasChecksumError)
      {
        valueState = "NOT_AVAILABLE";
        valueStateDetail = "CHECKSUM_ERROR";
        if (requestedMonth != null)
          this.adjustMonthlyReadingDateToRequestedMonth(readingDate, requestedMonth, readingName);
        flag5 = this.isDateValid(readingDate);
      }
      else if (deviceSerialNumber.IndexOf("8") == 0 && readingValue == (ulong) ushort.MaxValue || deviceSerialNumber.IndexOf("8") != 0 && readingValue == (ulong) uint.MaxValue)
      {
        flag1 = true;
        valueState = "NOT_AVAILABLE";
        valueStateDetail = "NO_MEASUREMENT";
        if (requestedMonth != null)
          this.adjustMonthlyReadingDateToRequestedMonth(readingDate, requestedMonth, readingName);
        flag5 = this.isDateValid(readingDate);
        flag3 = !flag5;
      }
      else
      {
        flag2 = true;
        valueState = "READING_VALID";
        if (requestedMonth != null)
          this.adjustMonthlyReadingDateToRequestedMonth(readingDate, requestedMonth, readingName);
        flag5 = this.isDateValid(readingDate);
        flag3 = !flag5;
      }
      valueDate = string.Empty;
      valueDate = !flag5 ? new DateTime(1899, 12, 30, 12, 30, 0).ToString() : new DateTime((int) readingDate.getYear() + 2000, (int) readingDate.getMonth(), (int) readingDate.getDay(), 12, 0, 0).ToString();
      valueValue = string.Empty;
      bool flag6 = false;
      bool flag7 = false;
      if (flag2)
      {
        if (deviceSerialNumber.IndexOf("8") == 0)
        {
          valueValue = ((double) readingValue / 4.0).ToString((IFormatProvider) FixedFormates.TheFormates);
          if (readingValue > (ulong) ushort.MaxValue)
            flag6 = true;
        }
        else
        {
          valueValue = MinomatV2.TranslateBcdToBin((long) readingValue).ToString((IFormatProvider) FixedFormates.TheFormates);
          bool flag8;
          try
          {
            int.Parse(valueValue, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
            flag8 = true;
          }
          catch
          {
            flag8 = false;
          }
          if (!flag8)
            flag6 = true;
        }
        if (((readingValue != 0UL ? 0 : (hmReadingValue > 0UL ? 1 : 0)) | (flag4 ? 1 : 0)) != 0)
          flag7 = true;
      }
      else
        valueValue = "NO_DATA";
      if (flag1 | flag2)
      {
        if (!(flag6 | flag7 | flag3))
          return;
        valueState = "NOT_VALID";
        if (flag6 | flag7)
        {
          if (flag6)
          {
            string str = string.Format("Ungueltiger Messwert: {0:x}", (object) readingValue);
            if (valueStateDetail.Length > 0)
              valueStateDetail += ",";
            valueStateDetail += str;
          }
          if (flag7)
          {
            string str = string.Format("Halbmonatstest fehlgeschlagen: {0:s}", (object) valueValue);
            if (valueStateDetail.Length > 0)
              valueStateDetail += ",";
            valueStateDetail += str;
          }
          valueValue = "NO_DATA";
        }
        if (flag3)
          string.Format("Ungueltiges Datum: {0,2:d}.{1,2:d}.{2,4:d}", (object) readingDate.getDay(), (object) readingDate.getMonth(), (object) ((int) readingDate.getYear() + 2000));
      }
      else
        valueValue = "NO_DATA";
    }

    private static long TranslateBcdToBin(long InValue)
    {
      long num = 1;
      long bin = 0;
      for (; InValue > 0L; InValue >>= 4)
      {
        bin += (InValue & 15L) * num;
        num *= 10L;
      }
      return bin;
    }

    private bool isDateValid(Minomat.CCommandDate date)
    {
      if (date.getMonth() < (byte) 1 || date.getMonth() > (byte) 12 || date.getDay() < (byte) 1 || date.getDay() > (byte) 31)
        return false;
      DateTime dateTime;
      try
      {
        dateTime = new DateTime((int) date.getYear() + 2000, (int) date.getMonth(), (int) date.getDay(), 12, 0, 0);
      }
      catch
      {
        return false;
      }
      return dateTime.Year == (int) date.getYear() + 2000 && dateTime.Month == (int) date.getMonth() && dateTime.Day == (int) date.getDay();
    }

    private void adjustMonthlyReadingDateToRequestedMonth(
      Minomat.CCommandDate readingDate,
      Minomat.CCommandDate requestedMonth,
      string readingName)
    {
      string str1 = "FULLMONTHREADING";
      string str2 = "HALFMONTHREADING";
      if (readingName.IndexOf(str1) == 0)
      {
        readingDate.setDay((byte) 1);
        if (requestedMonth.getMonth() == (byte) 12)
        {
          readingDate.setYear((byte) ((uint) requestedMonth.getYear() + 1U));
          readingDate.setMonth((byte) 1);
        }
        else
        {
          readingDate.setYear(requestedMonth.getYear());
          readingDate.setMonth((byte) ((uint) requestedMonth.getMonth() + 1U));
        }
      }
      else
      {
        if (readingName.IndexOf(str2) != 0)
          return;
        readingDate.setYear(requestedMonth.getYear());
        readingDate.setMonth(requestedMonth.getMonth());
        readingDate.setDay((byte) 15);
      }
    }

    private string getPulseUnit(ushort pulseUnit)
    {
      switch (pulseUnit)
      {
        case 0:
          return "?";
        case 1:
          return "l";
        case 2:
          return "m3";
        case 3:
          return "Wh";
        case 4:
          return "kWh";
        case 5:
          return "MWh";
        case 6:
          return "J";
        case 7:
          return "kJ";
        case 8:
          return "MJ";
        case 9:
          return "GJ";
        case 10:
          return "min";
        case 11:
          return "h";
        default:
          return "?";
      }
    }

    public sealed class SystemStatus
    {
      public ulong IrdaHandheldDisturbance;
      public ulong RfHandheldDisturbance;
      public ulong HkveReceivePowerConsumption;
      public ulong MasterReceivePowerConsumption;
      public ushort FirmwareVersion;
      public ulong IrdaRFCheckPowerConsumption;
      public ulong IrdaHandheldPowerConsumption;
      public ulong RfHandheldPowerConsumption;
      public byte MinimumTemperature;
      public byte MaximumTemperature;
      public ushort BatteryVoltage;
      public byte CommSubsystem;
      public byte CommSubsystemVariant;
      public string CommSubsystemDetails;
      public MinomatV2.SystemStatus.ErrStatus ErrorStatus = new MinomatV2.SystemStatus.ErrStatus();

      public string FirmwareVersionAsString
      {
        get
        {
          ushort firmwareVersion = this.FirmwareVersion;
          return string.Format("{0:#}.{1:##}", (object) (((int) firmwareVersion >> 12 & 15) * 10 + ((int) firmwareVersion >> 8 & 15)), (object) (((int) firmwareVersion >> 4 & 15) * 10 + ((int) firmwareVersion & 15)));
        }
      }

      public SystemStatus()
      {
        this.ErrorStatus.hasFLASHBurnError = true;
        this.ErrorStatus.hasUARTReceptionError = true;
        this.ErrorStatus.hasChecksumError = true;
        this.ErrorStatus.hasClockError = true;
        this.ErrorStatus.hasEmptyBattery = true;
        this.ErrorStatus.hasTemperatureError = true;
        this.ErrorStatus.hasHKVEStackOverflow = true;
        this.ErrorStatus.hasGSMReceiveBufferOverflow = true;
        this.ErrorStatus.hasIRDAReceiveBufferOverflow = true;
        this.ErrorStatus.hasRFReceiveBufferOverflow = true;
        this.ErrorStatus.hasCC1020CalibrationError = true;
        this.ErrorStatus.hasPowerFailure = true;
      }

      public struct ErrStatus
      {
        public bool hasFLASHBurnError;
        public bool hasUARTReceptionError;
        public bool hasChecksumError;
        public bool hasClockError;
        public bool hasEmptyBattery;
        public bool hasTemperatureError;
        public bool hasHKVEStackOverflow;
        public bool hasGSMReceiveBufferOverflow;
        public bool hasIRDAReceiveBufferOverflow;
        public bool hasRFReceiveBufferOverflow;
        public bool hasCC1020CalibrationError;
        public bool hasPowerFailure;
      }
    }

    public sealed class Configuration
    {
      public string SerialNo;
      public byte PrimaryAddress = 0;
      public MinomatV2.Configuration.HKVE hkve = new MinomatV2.Configuration.HKVE();
      public MinomatV2.Configuration.Master master = new MinomatV2.Configuration.Master();
      public byte HandTerminalCycleDuration = 30;
      public DateTime EventDay;
      public string UserPassword;

      public sealed class HKVE
      {
        public byte WindowStart = 6;
        public byte NoOfWindowsAfterEvent = 6;
        public byte WindowGapAfterEvent = 4;
        public byte NoOfWindowsDailyData = 1;
        public byte WindowGapDailyData = 4;
      }

      public sealed class Master
      {
        public byte WindowStartDailyData = 7;
        public byte WindowDurationDailyData = 0;
        public byte WindowStartEvent = 31;
        public byte WindowDurationEvent = 9;
      }
    }

    private class CCommandArray
    {
      public List<MinomatV2.CCommand> CCommands = new List<MinomatV2.CCommand>();
    }

    private class CCommandDataArray
    {
      public byte[] DataArray;

      public void SetSize(uint Size)
      {
        if (Size < 0U || Size >= 1000U)
          return;
        this.DataArray = new byte[(int) Size];
      }
    }

    private class ResponseStatus
    {
      internal bool hasFlashError = true;
      internal bool hasParameterError = true;
      internal bool hasRTCError = true;
      internal bool hasGSMConnection = true;
      internal bool hasIrDAHandheldConnection = true;
      internal bool hasRFHandheldConnection = true;
      internal bool hasOpenMasterWindow = true;
      internal bool hasOpenHKVEWindow = true;

      public ResponseStatus()
      {
        this.hasFlashError = false;
        this.hasParameterError = false;
        this.hasRTCError = false;
        this.hasGSMConnection = false;
        this.hasIrDAHandheldConnection = false;
        this.hasRFHandheldConnection = false;
        this.hasOpenMasterWindow = false;
        this.hasOpenHKVEWindow = false;
      }
    }

    private class CCommandGetTime : MinomatV2.CCommand
    {
      private const int NUMBER = 0;
      private const int REACTION_TIME = 100;
      private Minomat.CCommandTime m_time = new Minomat.CCommandTime((byte) 0, (byte) 0, (byte) 0);
      private Minomat.CCommandDate m_date = new Minomat.CCommandDate((byte) 0, (byte) 0, (byte) 0);
      private bool m_rtcError;

      public CCommandGetTime(ulong serialNo, ulong userPassword)
        : base(serialNo, userPassword, 0U, 100U)
      {
        this.m_rtcError = false;
      }

      public Minomat.CCommandTime getTime() => this.m_time;

      public Minomat.CCommandDate getDate() => this.m_date;

      public bool isClockDefect() => this.m_rtcError;

      protected CCommandGetTime(ref MinomatV2.CCommandDataArray encodedReq)
        : base(ref encodedReq)
      {
      }

      protected override uint getResponseContainerSize() => MinomatV2.CCommand.BLOCK_SIZE;

      protected override bool decodeResponseContainerData(ref MinomatV2.CCommandDataArray resp)
      {
        this.m_time = new Minomat.CCommandTime(resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE], resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 1], resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 2]);
        this.m_rtcError = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 3] > (byte) 0;
        this.m_date = new Minomat.CCommandDate((ushort) ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 4] << 8 | (uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5]));
        return true;
      }
    }

    private class CCommandSetTime : MinomatV2.CCommand
    {
      private const int NUMBER = 1;
      private const int REACTION_TIME = 300;
      private Minomat.CCommandTime m_time = new Minomat.CCommandTime((byte) 0, (byte) 0, (byte) 0);
      private Minomat.CCommandDate m_date = new Minomat.CCommandDate((byte) 0, (byte) 0, (byte) 0);
      private bool m_useCurrentDate;

      public CCommandSetTime(ulong serialNo, ulong userPassword)
        : base(serialNo, userPassword, 1U, 300U)
      {
        this.m_useCurrentDate = true;
      }

      public CCommandSetTime(
        ulong serialNo,
        ulong userPassword,
        Minomat.CCommandTime time,
        Minomat.CCommandDate date)
        : base(serialNo, userPassword, 1U, 300U)
      {
        this.m_useCurrentDate = false;
        this.m_time = time;
        this.m_date = date;
      }

      protected override void encodeRequestContainerData(ref MinomatV2.CCommandDataArray req)
      {
        if (this.m_useCurrentDate)
        {
          req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE] = (byte) SystemValues.DateTimeNow.Hour;
          req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 1] = (byte) SystemValues.DateTimeNow.Minute;
          byte[] dataArray = req.DataArray;
          int index = (int) MinomatV2.CCommand.REQUEST_SIZE + 2;
          DateTime dateTimeNow1 = SystemValues.DateTimeNow;
          int second = (int) (byte) dateTimeNow1.Second;
          dataArray[index] = (byte) second;
          dateTimeNow1 = SystemValues.DateTimeNow;
          int day = (int) (byte) dateTimeNow1.Day;
          DateTime dateTimeNow2 = SystemValues.DateTimeNow;
          int month = (int) (byte) dateTimeNow2.Month;
          dateTimeNow2 = SystemValues.DateTimeNow;
          int year = (int) (byte) (dateTimeNow2.Year - 1970);
          Minomat.CCommandDate ccommandDate = new Minomat.CCommandDate((byte) day, (byte) month, (byte) year);
          req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 4] = (byte) ((uint) ccommandDate.getEncodedDate() >> 8);
          req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] = (byte) ((uint) ccommandDate.getEncodedDate() & (uint) byte.MaxValue);
        }
        else
        {
          req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE] = this.m_time.getHours();
          req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 1] = this.m_time.getMinutes();
          req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 2] = this.m_time.getSeconds();
          req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 4] = (byte) ((uint) this.m_date.getEncodedDate() >> 8);
          req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] = (byte) ((uint) this.m_date.getEncodedDate() & (uint) byte.MaxValue);
        }
        this.generateChecksum(ref req, MinomatV2.CCommand.REQUEST_SIZE);
      }

      protected override uint getResponseContainerSize() => MinomatV2.CCommand.BLOCK_SIZE;

      protected override uint getRequestContainerSize() => MinomatV2.CCommand.BLOCK_SIZE;
    }

    private class CCommandGetSystemStatus : MinomatV2.CCommand
    {
      private const int NUMBER = 16;
      private const int REACTION_TIME = 100;
      private MinomatV2.SystemStatus m_systemStatus = new MinomatV2.SystemStatus();

      public CCommandGetSystemStatus(ulong serialNo, ulong userPassword)
        : base(serialNo, userPassword, 16U, 100U)
      {
      }

      public string getFirmwareVersionAsString()
      {
        ushort firmwareVersion = this.getSystemStatus().FirmwareVersion;
        return string.Format("{0:#}.{1:##}", (object) (((int) firmwareVersion >> 12 & 15) * 10 + ((int) firmwareVersion >> 8 & 15)), (object) (((int) firmwareVersion >> 4 & 15) * 10 + ((int) firmwareVersion & 15)));
      }

      public MinomatV2.SystemStatus getSystemStatus() => this.m_systemStatus;

      protected CCommandGetSystemStatus(ref MinomatV2.CCommandDataArray encodedReq)
        : base(ref encodedReq)
      {
      }

      protected override uint getResponseContainerSize() => 7U * MinomatV2.CCommand.BLOCK_SIZE;

      protected override bool decodeResponseContainerData(ref MinomatV2.CCommandDataArray resp)
      {
        this.m_systemStatus.IrdaHandheldDisturbance = (ulong) ((int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE] << 24 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 1] << 16 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 2] << 8 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 3]);
        this.m_systemStatus.ErrorStatus.hasFLASHBurnError = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] & 1U) > 0U;
        this.m_systemStatus.ErrorStatus.hasUARTReceptionError = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] & 2U) > 0U;
        this.m_systemStatus.ErrorStatus.hasChecksumError = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] & 4U) > 0U;
        this.m_systemStatus.ErrorStatus.hasClockError = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] & 8U) > 0U;
        this.m_systemStatus.ErrorStatus.hasEmptyBattery = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] & 16U) > 0U;
        this.m_systemStatus.ErrorStatus.hasTemperatureError = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] & 32U) > 0U;
        this.m_systemStatus.ErrorStatus.hasHKVEStackOverflow = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] & 64U) > 0U;
        this.m_systemStatus.ErrorStatus.hasGSMReceiveBufferOverflow = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 5] & 128U) > 0U;
        this.m_systemStatus.ErrorStatus.hasIRDAReceiveBufferOverflow = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 4] & 1U) > 0U;
        this.m_systemStatus.ErrorStatus.hasRFReceiveBufferOverflow = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 4] & 2U) > 0U;
        this.m_systemStatus.ErrorStatus.hasCC1020CalibrationError = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 4] & 4U) > 0U;
        this.m_systemStatus.ErrorStatus.hasPowerFailure = ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 4] & 8U) > 0U;
        this.m_systemStatus.RfHandheldDisturbance = (ulong) ((int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE] << 24 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 1] << 16 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 2] << 8 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 3]);
        this.m_systemStatus.MinimumTemperature = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 4];
        this.m_systemStatus.MaximumTemperature = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 5];
        this.m_systemStatus.HkveReceivePowerConsumption = (ulong) ((int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2] << 24 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 1] << 16 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 2] << 8 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 3]);
        this.m_systemStatus.BatteryVoltage = (ushort) ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 4] << 8 | (uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 5]);
        this.m_systemStatus.MasterReceivePowerConsumption = (ulong) ((int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3] << 24 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3 + 1] << 16 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3 + 2] << 8 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3 + 3]);
        this.m_systemStatus.FirmwareVersion = (ushort) ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3 + 4] << 8 | (uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3 + 5]);
        this.m_systemStatus.IrdaRFCheckPowerConsumption = (ulong) ((int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 4] << 24 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 4 + 1] << 16 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 4 + 2] << 8 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 4 + 3]);
        this.m_systemStatus.IrdaHandheldPowerConsumption = (ulong) ((int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 5] << 24 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 5 + 1] << 16 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 5 + 2] << 8 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 5 + 3]);
        this.m_systemStatus.RfHandheldPowerConsumption = (ulong) ((int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 6] << 24 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 6 + 1] << 16 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 6 + 2] << 8 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 6 + 3]);
        if ((uint) resp.DataArray[4] > 7U * MinomatV2.CCommand.BLOCK_SIZE + MinomatV2.CCommand.REQUEST_SIZE)
        {
          this.m_systemStatus.CommSubsystem = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 8];
          this.m_systemStatus.CommSubsystemVariant = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 8 + 1];
          uint num1 = 0;
          uint num2 = MinomatV2.CCommand.BLOCK_SIZE * 9U;
          uint num3 = 1;
          for (; num1 < 17U * MinomatV2.CCommand.BLOCK_SIZE && resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) num2] != (byte) 0; ++num2)
          {
            this.m_systemStatus.CommSubsystemDetails += resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) num2].ToString();
            if (num3 == 6U)
            {
              num2 += 2U;
              num3 = 1U;
            }
            else
              ++num3;
            ++num1;
          }
        }
        else
        {
          this.m_systemStatus.CommSubsystem = (byte) 0;
          this.m_systemStatus.CommSubsystemVariant = (byte) 0;
          this.m_systemStatus.CommSubsystemDetails = string.Empty;
        }
        return true;
      }

      protected override bool isResponseSizeValid(ref MinomatV2.CCommandDataArray resp)
      {
        return (int) resp.DataArray[4] == 25 * (int) MinomatV2.CCommand.BLOCK_SIZE + (int) MinomatV2.CCommand.REQUEST_SIZE || (int) resp.DataArray[4] == 7 * (int) MinomatV2.CCommand.BLOCK_SIZE + (int) MinomatV2.CCommand.REQUEST_SIZE;
      }
    }

    private class CCommandGetEventData : MinomatV2.CCommand
    {
      private const int NUMBER = 4;
      private const int REACTION_TIME = 300;
      private byte m_primaryAddress;
      private byte m_index;
      private const byte NO_OF_DATASETS = 5;
      internal bool[] checksumErrors = new bool[5];
      internal bool[] datasetMissing = new bool[5];
      private Minomat.EventDataset[] datasets = new Minomat.EventDataset[5];

      public CCommandGetEventData(
        ulong serialNo,
        ulong userPassword,
        byte primaryAddress,
        byte index)
        : base(serialNo, userPassword, 4U, 300U)
      {
        this.m_primaryAddress = primaryAddress;
        this.m_index = index;
      }

      public bool hasChecksumError(int index)
      {
        return index >= 0 && index < 5 && this.checksumErrors[index];
      }

      public bool isDatasetMissing(int index)
      {
        return index >= 0 && index < 5 && this.datasetMissing[index];
      }

      public Minomat.EventDataset getDataset(int index)
      {
        return index >= 0 && index < 5 ? this.datasets[index] : (Minomat.EventDataset) null;
      }

      protected CCommandGetEventData(ref MinomatV2.CCommandDataArray encodedReq)
        : base(ref encodedReq)
      {
      }

      protected override ulong getLongParam() => (ulong) ((int) this.m_primaryAddress << 16);

      protected override byte getByteParam() => this.m_index;

      protected override uint getResponseContainerSize()
      {
        return (uint) (5 * (int) MinomatV2.CCommand.BLOCK_SIZE * 2);
      }

      protected override bool decodeResponseContainerData(ref MinomatV2.CCommandDataArray resp)
      {
        uint index1 = 0;
        uint index2 = MinomatV2.CCommand.REQUEST_SIZE;
        for (; index1 < 5U; ++index1)
        {
          this.datasets[(int) index1] = new Minomat.EventDataset();
          this.datasets[(int) index1].date1 = new Minomat.CCommandDate((ushort) ((uint) resp.DataArray[(int) index2] << 8 | (uint) resp.DataArray[(int) index2 + 1]));
          uint index3 = index2 + 2U;
          this.datasets[(int) index1].eventReading1 = (ulong) ((int) resp.DataArray[(int) index3] << 24 | (int) resp.DataArray[(int) index3 + 1] << 16 | (int) resp.DataArray[(int) index3 + 2] << 8 | (int) resp.DataArray[(int) index3 + 3]);
          uint index4 = index3 + 6U;
          this.datasets[(int) index1].date2 = new Minomat.CCommandDate((ushort) ((uint) resp.DataArray[(int) index4] << 8 | (uint) resp.DataArray[(int) index4 + 1]));
          uint index5 = index4 + 2U;
          this.datasets[(int) index1].eventReading2 = (ulong) ((int) resp.DataArray[(int) index5] << 24 | (int) resp.DataArray[(int) index5 + 1] << 16 | (int) resp.DataArray[(int) index5 + 2] << 8 | (int) resp.DataArray[(int) index5 + 3]);
          index2 = index5 + 6U;
          this.datasetMissing[(int) index1] = this.datasets[(int) index1].isEmpty();
        }
        return true;
      }

      protected override bool decodeLongParam(ulong longParam)
      {
        uint index = 0;
        uint num = 1;
        while (index < 5U)
        {
          this.checksumErrors[(int) index] = (longParam & (ulong) num) > 0UL;
          ++index;
          num <<= 1;
        }
        return true;
      }
    }

    private class CCommandGetDailyData : MinomatV2.CCommand
    {
      private const int NUMBER = 3;
      private const int REACTION_TIME = 300;
      private Minomat.CCommandDate m_date;
      private byte m_primaryAddress;
      private byte m_index;
      private const byte NO_OF_DATASETS = 5;
      internal bool[] checksumErrors = new bool[5];
      internal bool[] datasetMissing = new bool[5];
      private Minomat.DailyDataset[] datasets = new Minomat.DailyDataset[5];

      public CCommandGetDailyData(
        ulong serialNo,
        ulong userPassword,
        ref Minomat.CCommandDate date,
        byte primaryAddress,
        byte index)
        : base(serialNo, userPassword, 3U, 300U)
      {
        this.m_date = new Minomat.CCommandDate(date.getDay(), date.getMonth(), date.getYear());
        this.m_primaryAddress = primaryAddress;
        this.m_index = index;
      }

      public bool hasChecksumError(int index)
      {
        return index >= 0 && index < 5 && this.checksumErrors[index];
      }

      public bool isDatasetMissing(int index)
      {
        return index >= 0 && index < 5 && this.datasetMissing[index];
      }

      public Minomat.DailyDataset getDataset(int index)
      {
        return index >= 0 && index < 5 ? this.datasets[index] : (Minomat.DailyDataset) null;
      }

      protected CCommandGetDailyData(ref MinomatV2.CCommandDataArray encodedReq)
        : base(ref encodedReq)
      {
      }

      protected override ulong getLongParam() => (ulong) ((int) this.m_primaryAddress << 16);

      protected override byte getByteParam() => this.m_index;

      protected override uint getResponseContainerSize()
      {
        return (uint) (5 * (int) MinomatV2.CCommand.BLOCK_SIZE * 2);
      }

      protected override bool decodeResponseContainerData(ref MinomatV2.CCommandDataArray resp)
      {
        uint index1 = 0;
        uint index2 = MinomatV2.CCommand.REQUEST_SIZE;
        for (; index1 < 5U; ++index1)
        {
          this.datasets[(int) index1] = new Minomat.DailyDataset();
          this.datasets[(int) index1].date = new Minomat.CCommandDate((ushort) ((uint) resp.DataArray[(int) index2] << 8 | (uint) resp.DataArray[(int) index2 + 1]));
          uint index3 = index2 + 2U;
          this.datasets[(int) index1].dailyReading = (ulong) ((int) resp.DataArray[(int) index3] << 24 | (int) resp.DataArray[(int) index3 + 1] << 16 | (int) resp.DataArray[(int) index3 + 2] << 8 | (int) resp.DataArray[(int) index3 + 3]);
          index2 = index3 + 6U;
        }
        return true;
      }

      protected override bool decodeLongParam(ulong longParam)
      {
        uint index = 0;
        uint num = 1;
        while (index < 5U)
        {
          this.checksumErrors[(int) index] = (longParam & (ulong) ushort.MaxValue & (ulong) num) > 0UL;
          this.datasetMissing[(int) index] = (longParam & 4294901760UL & (ulong) num) > 0UL;
          ++index;
          num <<= 1;
        }
        return true;
      }
    }

    private class CCommandGetMonthlyData : MinomatV2.CCommand
    {
      private const int NUMBER = 2;
      private const int REACTION_TIME = 300;
      private Minomat.CCommandDate m_date;
      private byte m_primaryAddress;
      private byte m_index;
      private const byte NO_OF_DATASETS = 4;
      internal bool[] checksumErrors = new bool[4];
      internal bool[] datasetMissing = new bool[4];
      private Minomat.MonthlyDataset[] datasets = new Minomat.MonthlyDataset[4];

      public CCommandGetMonthlyData(
        ulong serialNo,
        ulong userPassword,
        ref Minomat.CCommandDate date,
        byte primaryAddress,
        byte index)
        : base(serialNo, userPassword, 2U, 300U)
      {
        this.m_date = new Minomat.CCommandDate(date.getDay(), date.getMonth(), date.getYear());
        this.m_primaryAddress = primaryAddress;
        this.m_index = index;
      }

      public bool hasChecksumError(int index)
      {
        return index >= 0 && index < 4 && this.checksumErrors[index];
      }

      public bool isDatasetMissing(int index)
      {
        return index >= 0 && index < 4 && this.datasetMissing[index];
      }

      public Minomat.MonthlyDataset getDataset(int index)
      {
        return index >= 0 && index < 4 ? this.datasets[index] : (Minomat.MonthlyDataset) null;
      }

      protected CCommandGetMonthlyData(ref MinomatV2.CCommandDataArray encodedReq)
        : base(ref encodedReq)
      {
      }

      protected override ulong getLongParam()
      {
        return (ulong) ((int) this.m_primaryAddress << 16 | (int) this.m_date.getEncodedDate());
      }

      protected override byte getByteParam() => this.m_index;

      protected override uint getResponseContainerSize()
      {
        return (uint) (4 * (int) MinomatV2.CCommand.BLOCK_SIZE * 4);
      }

      protected override bool decodeResponseContainerData(ref MinomatV2.CCommandDataArray resp)
      {
        uint index1 = 0;
        uint index2 = MinomatV2.CCommand.REQUEST_SIZE;
        for (; index1 < 4U; ++index1)
        {
          this.datasets[(int) index1] = new Minomat.MonthlyDataset();
          this.datasets[(int) index1].hkveSerialNo = (ulong) ((int) resp.DataArray[(int) index2] << 24 | (int) resp.DataArray[(int) index2 + 1] << 16 | (int) resp.DataArray[(int) index2 + 2] << 8 | (int) resp.DataArray[(int) index2 + 3]);
          uint index3 = index2 + 4U;
          this.datasets[(int) index1].status = resp.DataArray[(int) index3];
          uint index4 = index3 + 4U;
          this.datasets[(int) index1].fieldForceSum = (ushort) ((uint) resp.DataArray[(int) index4] << 8 | (uint) resp.DataArray[(int) index4 + 1]);
          uint index5 = index4 + 2U;
          this.datasets[(int) index1].hkveProtocols = (ushort) ((uint) resp.DataArray[(int) index5] << 8 | (uint) resp.DataArray[(int) index5 + 1]);
          uint index6 = index5 + 2U;
          this.datasets[(int) index1].deviceType = resp.DataArray[(int) index6];
          uint index7 = index6 + 4U;
          this.datasets[(int) index1].fullMonthReading = (ulong) ((int) resp.DataArray[(int) index7] << 24 | (int) resp.DataArray[(int) index7 + 1] << 16 | (int) resp.DataArray[(int) index7 + 2] << 8 | (int) resp.DataArray[(int) index7 + 3]);
          uint index8 = index7 + 4U;
          this.datasets[(int) index1].factor = (ushort) ((uint) resp.DataArray[(int) index8] << 8 | (uint) resp.DataArray[(int) index8 + 1]);
          uint index9 = index8 + 4U;
          this.datasets[(int) index1].halfMonthReading = (ulong) ((int) resp.DataArray[(int) index9] << 24 | (int) resp.DataArray[(int) index9 + 1] << 16 | (int) resp.DataArray[(int) index9 + 2] << 8 | (int) resp.DataArray[(int) index9 + 3]);
          uint index10 = index9 + 4U;
          this.datasets[(int) index1].date = new Minomat.CCommandDate((ushort) ((uint) resp.DataArray[(int) index10] << 8 | (uint) resp.DataArray[(int) index10 + 1]));
          index2 = index10 + 4U;
        }
        return true;
      }

      protected override bool decodeLongParam(ulong longParam)
      {
        uint index = 0;
        uint num = 1;
        while (index < 4U)
        {
          this.checksumErrors[(int) index] = (longParam & (ulong) ushort.MaxValue & (ulong) num) > 0UL;
          this.datasetMissing[(int) index] = (longParam & 4294901760UL & (ulong) num) > 0UL;
          ++index;
          num <<= 1;
        }
        return true;
      }
    }

    private class CCommandFindHKVE : MinomatV2.CCommand
    {
      private const int NUMBER = 18;
      private const int REACTION_TIME = 100;
      private ulong m_serialNoParam;
      private MinomatV2.CCommandFindHKVE.Answer answer;

      public CCommandFindHKVE(ulong serialNo, ulong userPassword, ulong serialNoParam)
        : base(serialNo, userPassword, 18U, 100U)
      {
        this.m_serialNoParam = serialNoParam;
      }

      public MinomatV2.CCommandFindHKVE.Answer getAnswer() => this.answer;

      protected override ulong getLongParam() => this.m_serialNoParam;

      protected override bool decodeLongParam(ulong LongParam)
      {
        switch ((int) LongParam)
        {
          case 0:
            this.answer = MinomatV2.CCommandFindHKVE.Answer.NOT_FOUND;
            break;
          case 1:
            this.answer = MinomatV2.CCommandFindHKVE.Answer.REGISTERED;
            break;
          case 2:
            this.answer = MinomatV2.CCommandFindHKVE.Answer.SELF_REGISTERED;
            break;
          default:
            return false;
        }
        return true;
      }

      protected CCommandFindHKVE(ref MinomatV2.CCommandDataArray encodedReq)
        : base(ref encodedReq)
      {
      }

      public enum Answer
      {
        NOT_FOUND,
        REGISTERED,
        SELF_REGISTERED,
      }
    }

    private class CCommandRegisterHKVE : MinomatV2.CCommand
    {
      private const int NUMBER = 5;
      private const int REACTION_TIME = 100;
      private ulong m_serialNoParam;
      private MinomatV2.CCommandRegisterHKVE.Answer answer;
      private MinomatV2.CCommandRegisterHKVE.RegistrationType m_registrationType;

      public CCommandRegisterHKVE(
        ulong serialNo,
        ulong userPassword,
        ulong serialNoParam,
        MinomatV2.CCommandRegisterHKVE.RegistrationType registrationType)
        : base(serialNo, userPassword, 5U, 100U)
      {
        this.m_serialNoParam = serialNoParam;
        this.m_registrationType = registrationType;
      }

      public MinomatV2.CCommandRegisterHKVE.Answer getAnswer() => this.answer;

      protected override ulong getLongParam() => this.m_serialNoParam;

      protected override bool decodeLongParam(ulong LongParam)
      {
        switch ((int) LongParam)
        {
          case 0:
            this.answer = MinomatV2.CCommandRegisterHKVE.Answer.OK;
            break;
          case 1:
            this.answer = MinomatV2.CCommandRegisterHKVE.Answer.ALREADY_REGISTERED;
            break;
          case 2:
            this.answer = MinomatV2.CCommandRegisterHKVE.Answer.NOT_FOUND;
            break;
          default:
            return false;
        }
        return true;
      }

      protected override byte getByteParam() => (byte) this.m_registrationType;

      protected CCommandRegisterHKVE(ref MinomatV2.CCommandDataArray encodedReq)
        : base(ref encodedReq)
      {
      }

      public enum Answer
      {
        OK,
        ALREADY_REGISTERED,
        NOT_FOUND,
      }

      public enum RegistrationType
      {
        REMOVE,
        REGISTER,
        SELF_REGISTERED,
      }
    }

    private class CCommandCheckHKVERegistration : MinomatV2.CCommand
    {
      private const int NUMBER = 6;
      private const int REACTION_TIME = 100;
      private byte m_index;
      private ulong m_serialNoAnswer;

      public CCommandCheckHKVERegistration(ulong serialNo, ulong userPassword, byte index)
        : base(serialNo, userPassword, 6U, 100U)
      {
        this.m_index = index;
      }

      public ulong getSerialNoAnswer() => this.m_serialNoAnswer;

      public byte getIndex() => this.m_index;

      protected override byte getByteParam() => this.m_index;

      protected override bool decodeLongParam(ulong LongParam)
      {
        this.m_serialNoAnswer = LongParam;
        return true;
      }
    }

    private class CCommandSystemInit : MinomatV2.CCommand
    {
      private const int NUMBER = 11;
      private const int REACTION_TIME = 0;
      private ulong m_deleteCode;

      public CCommandSystemInit(ulong serialNo, ulong userPassword, ulong deleteCode)
        : base(serialNo, userPassword, 11U, 0U)
      {
        this.m_deleteCode = deleteCode;
      }

      public bool isInvalidDeleteCode() => this.getResponseStatus().hasParameterError;

      protected override ulong getLongParam() => this.m_deleteCode;
    }

    private class CCommandStartHKVEReceptionWindow(ulong serialNo, ulong userPassword) : 
      MinomatV2.CCommand(serialNo, userPassword, 20U, 100U)
    {
      private const int NUMBER = 20;
      private const int REACTION_TIME = 100;
    }

    private class CCommandStopReception(ulong serialNo, ulong userPassword) : MinomatV2.CCommand(serialNo, userPassword, 13U, 100U)
    {
      private const int NUMBER = 13;
      private const int REACTION_TIME = 100;
    }

    private class CCommandGetConfiguration : MinomatV2.CCommand
    {
      private const int NUMBER = 15;
      private const int REACTION_TIME = 100;
      private MinomatV2.Configuration m_configuration = new MinomatV2.Configuration();

      public CCommandGetConfiguration(ulong serialNo, ulong userPassword)
        : base(serialNo, userPassword, 15U, 100U)
      {
      }

      public MinomatV2.Configuration getConfiguration() => this.m_configuration;

      protected CCommandGetConfiguration(ref MinomatV2.CCommandDataArray encodedReq)
        : base(ref encodedReq)
      {
      }

      protected override uint getResponseContainerSize() => 5U * MinomatV2.CCommand.BLOCK_SIZE;

      protected override bool decodeResponseContainerData(ref MinomatV2.CCommandDataArray resp)
      {
        Util.ByteArrayToHexString(resp.DataArray);
        this.m_configuration.SerialNo = ((ulong) ((int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE] << 24 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 1] << 16 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 2] << 8 | (int) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 3])).ToString("X8");
        this.m_configuration.PrimaryAddress = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 4];
        this.m_configuration.hkve.WindowStart = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE];
        this.m_configuration.master.WindowStartDailyData = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 1];
        this.m_configuration.master.WindowDurationDailyData = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 2];
        this.m_configuration.master.WindowStartEvent = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 3];
        this.m_configuration.master.WindowDurationEvent = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 4];
        this.m_configuration.hkve.NoOfWindowsAfterEvent = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2];
        this.m_configuration.hkve.WindowGapAfterEvent = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 1];
        this.m_configuration.hkve.NoOfWindowsDailyData = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 2];
        this.m_configuration.hkve.WindowGapDailyData = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 3];
        this.m_configuration.HandTerminalCycleDuration = resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 4];
        Minomat.CCommandDate ccommandDate = new Minomat.CCommandDate((ushort) ((uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3] << 8 | (uint) resp.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3 + 1]));
        this.m_configuration.EventDay = new DateTime(ccommandDate.getYear() == (byte) 0 ? 2000 : (int) ccommandDate.getYear() + 2000, (int) ccommandDate.getMonth(), (int) ccommandDate.getDay());
        this.m_configuration.UserPassword = Encoding.ASCII.GetString(resp.DataArray, (int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 4, 4);
        return true;
      }
    }

    private class CCommandSetConfiguration : MinomatV2.CCommand
    {
      private const int NUMBER = 12;
      private const int REACTION_TIME = 0;
      private MinomatV2.Configuration configuration;

      public CCommandSetConfiguration(
        ulong serialNo,
        ulong userPassword,
        MinomatV2.Configuration configuration)
        : base(serialNo, userPassword, 12U, 0U)
      {
        this.configuration = configuration;
      }

      protected override void encodeRequestContainerData(ref MinomatV2.CCommandDataArray req)
      {
        long bcdInt64 = Util.ConvertInt64ToBcdInt64(Convert.ToInt64(this.configuration.SerialNo));
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE] = (byte) (bcdInt64 >> 24);
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 1] = (byte) (bcdInt64 >> 16);
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 2] = (byte) (bcdInt64 >> 8);
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 3] = (byte) bcdInt64;
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + 4] = this.configuration.PrimaryAddress;
        this.generateChecksum(ref req, MinomatV2.CCommand.REQUEST_SIZE);
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE] = this.configuration.hkve.WindowStart;
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 1] = this.configuration.master.WindowStartDailyData;
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 2] = this.configuration.master.WindowDurationDailyData;
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 3] = this.configuration.master.WindowStartEvent;
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE + 4] = this.configuration.master.WindowDurationEvent;
        this.generateChecksum(ref req, MinomatV2.CCommand.REQUEST_SIZE + MinomatV2.CCommand.BLOCK_SIZE);
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2] = this.configuration.hkve.NoOfWindowsAfterEvent;
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 1] = this.configuration.hkve.WindowGapAfterEvent;
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 2] = this.configuration.hkve.NoOfWindowsDailyData;
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 3] = this.configuration.hkve.WindowGapDailyData;
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 2 + 4] = this.configuration.HandTerminalCycleDuration;
        this.generateChecksum(ref req, MinomatV2.CCommand.REQUEST_SIZE + MinomatV2.CCommand.BLOCK_SIZE * 2U);
        ushort encodedDate = new Minomat.CCommandDate((byte) this.configuration.EventDay.Day, (byte) this.configuration.EventDay.Month, (byte) (this.configuration.EventDay.Year - 2000)).getEncodedDate();
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3] = (byte) ((uint) encodedDate >> 8);
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 3 + 1] = (byte) encodedDate;
        this.generateChecksum(ref req, MinomatV2.CCommand.REQUEST_SIZE + MinomatV2.CCommand.BLOCK_SIZE * 3U);
        byte[] bytes = Encoding.ASCII.GetBytes(this.configuration.UserPassword);
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 4] = bytes[0];
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 4 + 1] = bytes[1];
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 4 + 2] = bytes[2];
        req.DataArray[(int) MinomatV2.CCommand.REQUEST_SIZE + (int) MinomatV2.CCommand.BLOCK_SIZE * 4 + 3] = bytes[3];
        this.generateChecksum(ref req, MinomatV2.CCommand.REQUEST_SIZE + MinomatV2.CCommand.BLOCK_SIZE * 4U);
        Util.ByteArrayToHexString(req.DataArray);
      }

      protected override uint getRequestContainerSize() => 5U * MinomatV2.CCommand.BLOCK_SIZE;

      protected override uint getResponseContainerSize() => 5U * MinomatV2.CCommand.BLOCK_SIZE;
    }

    private class CCommunication
    {
      private static int SEND_REPEAT = 3;
      private bool m_isLastCommandSuccessful;
      private ulong m_connectSerialNo;
      private ulong m_connectUserPassword;
      internal DeviceCollectorFunctions MyBus;

      public CCommunication(DeviceCollectorFunctions SerialBus) => this.MyBus = SerialBus;

      public bool sendCommands(ref MinomatV2.CCommandArray CommandArray)
      {
        return this.sendCommands(ref CommandArray, true);
      }

      public bool sendCommands(ref MinomatV2.CCommandArray CommandArray, bool waitForAnswer)
      {
        bool flag = true;
        int num1 = 0;
        this.MyBus.SendMessage("Start sending commands.", 0, GMM_EventArgs.MessageType.StandardMessage);
        int num2 = 0;
        GMM_EventArgs e = new GMM_EventArgs(GMM_EventArgs.MessageType.MessageAndProgressPercentage);
        for (int index = 0; index < CommandArray.CCommands.Count; ++index)
        {
          ++num1;
          Type type = CommandArray.CCommands[index].GetType();
          this.MyBus.SendProgressMessage((object) this, "Perform '" + type.Name.Replace("CCommand", "") + "' command " + index.ToString() + "/" + CommandArray.CCommands.Count.ToString());
          int num3;
          int num4;
          if (type == typeof (MinomatV2.CCommandCheckHKVERegistration))
          {
            num3 = 33;
            num4 = 17;
          }
          else
          {
            num3 = 50;
            num4 = 50;
          }
          int progress = num1 * num4 / CommandArray.CCommands.Count + num3;
          if (num2 != progress)
          {
            num2 = progress;
            e.EventMessage = string.Format("Download {0}%", (object) progress);
            e.ProgressPercentage = progress;
            this.MyBus.SendMessage(e);
            this.MyBus.SendProgress((object) this, progress);
          }
          MinomatV2.CCommand ccommand = CommandArray.CCommands[index];
          int num5;
          if (!this.sendCommand(ref ccommand, waitForAnswer))
          {
            MinomatV2.logger.Error("sendCommands() stopped: Error in Communication");
            DeviceCollectorFunctions bus = this.MyBus;
            int MessageInt = num1;
            num5 = MessageInt + 1;
            bus.SendMessage("Error in Communication.", MessageInt, GMM_EventArgs.MessageType.MinomatErrorMessage);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "sendCommand error");
            return false;
          }
          if (this.MyBus.BreakRequest)
          {
            DeviceCollectorFunctions bus = this.MyBus;
            int MessageInt = num1;
            num5 = MessageInt + 1;
            bus.SendMessage("Break requested. ", MessageInt, GMM_EventArgs.MessageType.EndMessage);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.OperationCancelled);
            return false;
          }
        }
        this.MyBus.SendMessage("Sending finished.", 0, GMM_EventArgs.MessageType.StandardMessage);
        return flag;
      }

      public bool Connect(ulong serialNo, ulong userPassword)
      {
        this.m_connectSerialNo = serialNo;
        this.m_connectUserPassword = userPassword;
        return this.RunConnect();
      }

      private bool RunConnect()
      {
        this.MyBus.SendProgressMessage((object) this, "Check wake up ...");
        if (this.CheckIfMinomatIsAlive())
          return true;
        ZR_ClassLibMessages.ClearErrors();
        MinomatV2.logger.Trace("Send a stop command before trying to connect.");
        MinomatV2.CCommand command1 = (MinomatV2.CCommand) new MinomatV2.CCommandStopReception(this.m_connectSerialNo, this.m_connectUserPassword);
        if (!this.sendCommand(ref command1, false))
          return false;
        MinomatV2.CCommand command2 = (MinomatV2.CCommand) new MinomatV2.CCommandGetTime(this.m_connectSerialNo, this.m_connectUserPassword);
        this.MyBus.SendProgressMessage((object) this, "Wake up ...");
        MinomatV2.logger.Trace("Start wake up...");
        GMM_EventArgs e = new GMM_EventArgs(GMM_EventArgs.MessageType.MessageAndProgressPercentage);
        DateTime dateTimeNow = SystemValues.DateTimeNow;
        try
        {
          MinomatV2.logger.Factory.SuspendLogging();
          MinomatV2.logger.Factory.ReconfigExistingLoggers();
          int num = 0;
          while ((SystemValues.DateTimeNow - dateTimeNow).TotalSeconds < 30.0)
          {
            if (!this.sendCommand(ref command2, false))
            {
              MinomatV2.logger.Error("Failed to send wake up sequence!");
              return false;
            }
            int progress = (int) ((SystemValues.DateTimeNow - dateTimeNow).TotalSeconds * 33.0) / 30;
            if (num != progress)
            {
              num = progress;
              e.EventMessage = "Wake-up progress " + progress.ToString() + "%";
              e.ProgressPercentage = progress;
              this.MyBus.SendMessage(e);
              this.MyBus.SendProgress((object) this, progress);
            }
            if (this.MyBus.BreakRequest)
            {
              MinomatV2.logger.Info("Break requested.");
              return false;
            }
          }
        }
        finally
        {
          MinomatV2.logger.Factory.ResumeLogging();
          MinomatV2.logger.Factory.ReconfigExistingLoggers();
        }
        MinomatV2.logger.Trace("End wake up");
        if (!Util.Wait(2000L, "after wake-up sequence", (ICancelable) this.MyBus, MinomatV2.logger))
          return false;
        this.MyBus.MyCom.ClearCom();
        if (this.CheckIfMinomatIsAlive())
        {
          ZR_ClassLibMessages.ClearErrors();
          return true;
        }
        MinomatV2.logger.Trace("Send a stop command.");
        if (!this.sendCommand(ref command1, false))
          return false;
        this.MyBus.SendMessage("Connection failed.", 0, GMM_EventArgs.MessageType.MinomatErrorMessage);
        return false;
      }

      private bool CheckIfMinomatIsAlive()
      {
        MinomatV2.CCommand command = (MinomatV2.CCommand) new MinomatV2.CCommandGetTime(this.m_connectSerialNo, this.m_connectUserPassword);
        int sendRepeat = MinomatV2.CCommunication.SEND_REPEAT;
        MinomatV2.CCommunication.SEND_REPEAT = 2;
        bool flag = this.sendCommand(ref command, true);
        MinomatV2.CCommunication.SEND_REPEAT = sendRepeat;
        MinomatV2.logger.Trace("Minomat is alive: {0}", flag);
        return flag;
      }

      internal bool sendCommand(ref MinomatV2.CCommand command, bool waitForAnswer)
      {
        MinomatV2.CCommandDataArray ccommandDataArray = new MinomatV2.CCommandDataArray();
        int sendRepeat = MinomatV2.CCommunication.SEND_REPEAT;
        try
        {
          do
          {
            uint num = command.encodeRequest(ref ccommandDataArray);
            this.m_isLastCommandSuccessful = this.internalSendCommand(ref ccommandDataArray);
            if (!waitForAnswer)
              return true;
            if (this.m_isLastCommandSuccessful)
            {
              ccommandDataArray.SetSize(num);
              this.m_isLastCommandSuccessful = (int) this.internalReceiveCommand(ref ccommandDataArray, num, command.getReactionTime()) == (int) num;
            }
          }
          while (!this.m_isLastCommandSuccessful && --sendRepeat > 0);
          try
          {
            command.decodeResponse(this.m_isLastCommandSuccessful, ref ccommandDataArray);
          }
          catch (Exception ex)
          {
            string str = "Error in MinomatV2: decodeResponse " + ex.Message;
            MinomatV2.logger.Error(ex, str);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FramingError, str);
            return false;
          }
        }
        catch (Exception ex)
        {
          string str = "Error in MinomatV2: sendCommands " + ex.Message;
          MinomatV2.logger.Error(ex, str);
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
          return false;
        }
        return this.m_isLastCommandSuccessful;
      }

      protected virtual void internalClearBuffers() => this.MyBus.MyCom.ClearCom();

      protected virtual bool internalSendCommand(ref MinomatV2.CCommandDataArray commandData)
      {
        return false;
      }

      protected virtual uint internalReceiveCommand(
        ref MinomatV2.CCommandDataArray commandData,
        uint responseLength,
        uint reactionTime)
      {
        return 0;
      }
    }

    private class CSerialCommunication(DeviceCollectorFunctions SerialBus) : MinomatV2.CCommunication(SerialBus)
    {
      protected override bool internalSendCommand(ref MinomatV2.CCommandDataArray commandData)
      {
        ByteField DataBlock = new ByteField(commandData.DataArray.Length + MinomatV2.FRAME_PREFIX.Length);
        for (int index = 0; index < MinomatV2.FRAME_PREFIX.Length; ++index)
          DataBlock.Add(MinomatV2.FRAME_PREFIX[index]);
        for (int index = 0; index < commandData.DataArray.Length; ++index)
          DataBlock.Add(commandData.DataArray[index]);
        return this.MyBus.MyCom.SendBlock(ref DataBlock);
      }

      protected override uint internalReceiveCommand(
        ref MinomatV2.CCommandDataArray commandData,
        uint responseLength,
        uint reactionTime)
      {
        int length = MinomatV2.FRAME_PREFIX.Length;
        ByteField DataBlock = new ByteField((int) ((long) responseLength + (long) length));
        if (this.MyBus.MyCom.ReceiveBlock(ref DataBlock, (int) ((long) responseLength + (long) length), true))
        {
          int count = DataBlock.Count;
          int num1 = 0;
          for (int index = 0; index < count; ++index)
          {
            if (DataBlock.Data[index] == (byte) 85)
            {
              num1 = index;
              break;
            }
          }
          int index1 = num1 + length + 4;
          if (index1 >= DataBlock.Data.Length)
            return 0;
          uint num2 = (uint) DataBlock.Data[index1];
          if ((long) num2 + (long) length == (long) (DataBlock.Count - num1))
          {
            commandData.SetSize(responseLength);
            for (int index2 = 0; (long) index2 < (long) num2; ++index2)
              commandData.DataArray[index2] = DataBlock.Data[index2 + length + num1];
            return responseLength;
          }
        }
        return 0;
      }
    }

    private abstract class CCommand
    {
      protected static uint BLOCK_SIZE = 8;
      protected static uint REQUEST_SIZE = MinomatV2.CCommand.BLOCK_SIZE * 4U;
      private uint m_number;
      private uint m_reactionTime;
      private ulong m_serialNo;
      private ulong m_userPassword;
      private MinomatV2.CCommandDataArray m_encodedReq = new MinomatV2.CCommandDataArray();
      private bool m_hasReceivedResponse;
      private MinomatV2.ResponseStatus m_responseStatus = new MinomatV2.ResponseStatus();

      protected CCommand(ulong serialNo, ulong userPassword, uint number, uint reactionTime)
      {
        this.m_serialNo = serialNo;
        this.m_userPassword = userPassword;
        this.m_number = number;
        this.m_reactionTime = reactionTime;
        this.m_hasReceivedResponse = false;
      }

      protected CCommand(ref MinomatV2.CCommandDataArray encodedReq)
      {
        if (this.m_encodedReq == null)
          this.m_encodedReq = new MinomatV2.CCommandDataArray();
        this.m_encodedReq = encodedReq;
        if ((long) this.m_encodedReq.DataArray.Length < (long) MinomatV2.CCommand.REQUEST_SIZE)
          return;
        byte index = 8;
        byte num = 24;
        while (index < (byte) 12)
        {
          this.m_serialNo |= (ulong) this.m_encodedReq.DataArray[(int) index] << (int) num;
          ++index;
          num -= (byte) 8;
        }
      }

      protected void generateChecksum(ref MinomatV2.CCommandDataArray req, uint index)
      {
        ushort checksumReversed = CRC.calculateChecksumReversed(ref req.DataArray, 6U, index);
        req.DataArray[(int) index + 6 + 1] = (byte) ((uint) checksumReversed >> 8);
        req.DataArray[(int) index + 6] = (byte) ((uint) checksumReversed & (uint) byte.MaxValue);
      }

      private void decodeResponseStatus(ushort byteParam)
      {
        this.m_responseStatus.hasFlashError = ((int) byteParam & 1) == 1;
        this.m_responseStatus.hasParameterError = ((int) byteParam & 2) == 2;
        this.m_responseStatus.hasRTCError = ((int) byteParam & 4) == 4;
        this.m_responseStatus.hasGSMConnection = ((int) byteParam & 8) == 8;
        this.m_responseStatus.hasIrDAHandheldConnection = ((int) byteParam & 16) == 16;
        this.m_responseStatus.hasRFHandheldConnection = ((int) byteParam & 32) == 32;
        this.m_responseStatus.hasOpenMasterWindow = ((int) byteParam & 64) == 64;
        this.m_responseStatus.hasOpenHKVEWindow = ((int) byteParam & 128) == 128;
      }

      private static int getIntFromHexChar(char Value) => Convert.ToInt32(Value.ToString(), 16);

      public uint getNumber() => this.m_number;

      public uint getReactionTime() => this.m_reactionTime;

      public ulong getSerialNo() => this.m_serialNo;

      public ulong getUserpassword() => this.m_userPassword;

      public bool hasReceivedResponse() => this.m_hasReceivedResponse;

      public MinomatV2.ResponseStatus getResponseStatus() => this.m_responseStatus;

      public bool hasError()
      {
        return !this.hasReceivedResponse() || this.m_responseStatus.hasFlashError || this.m_responseStatus.hasParameterError || this.m_responseStatus.hasRTCError;
      }

      public uint encodeRequest(ref MinomatV2.CCommandDataArray req)
      {
        uint requestContainerSize = this.getRequestContainerSize();
        req.SetSize(MinomatV2.CCommand.REQUEST_SIZE + requestContainerSize);
        this.m_encodedReq.SetSize(0U);
        if (this.m_encodedReq.DataArray.Length == 0)
        {
          int num1 = 0;
          byte[] dataArray1 = req.DataArray;
          int index1 = num1;
          int num2 = index1 + 1;
          int num3 = (int) (byte) (this.m_userPassword >> 24);
          dataArray1[index1] = (byte) num3;
          byte[] dataArray2 = req.DataArray;
          int index2 = num2;
          int num4 = index2 + 1;
          int num5 = (int) (byte) (this.m_userPassword >> 16);
          dataArray2[index2] = (byte) num5;
          byte[] dataArray3 = req.DataArray;
          int index3 = num4;
          int num6 = index3 + 1;
          int num7 = (int) (byte) (this.m_userPassword >> 8);
          dataArray3[index3] = (byte) num7;
          byte[] dataArray4 = req.DataArray;
          int index4 = num6;
          int num8 = index4 + 1;
          int num9 = (int) (byte) (this.m_userPassword & (ulong) byte.MaxValue);
          dataArray4[index4] = (byte) num9;
          byte[] dataArray5 = req.DataArray;
          int index5 = num8;
          int num10 = index5 + 1;
          int length = (int) (byte) req.DataArray.Length;
          dataArray5[index5] = (byte) length;
          byte[] dataArray6 = req.DataArray;
          int index6 = num10;
          int num11 = index6 + 1;
          int number = (int) (byte) this.m_number;
          dataArray6[index6] = (byte) number;
          this.generateChecksum(ref req, 0U);
          int num12 = num11 + 2;
          byte[] dataArray7 = req.DataArray;
          int index7 = num12;
          int num13 = index7 + 1;
          int num14 = (int) (byte) (this.m_serialNo >> 24);
          dataArray7[index7] = (byte) num14;
          byte[] dataArray8 = req.DataArray;
          int index8 = num13;
          int num15 = index8 + 1;
          int num16 = (int) (byte) (this.m_serialNo >> 16);
          dataArray8[index8] = (byte) num16;
          byte[] dataArray9 = req.DataArray;
          int index9 = num15;
          int num17 = index9 + 1;
          int num18 = (int) (byte) (this.m_serialNo >> 8);
          dataArray9[index9] = (byte) num18;
          byte[] dataArray10 = req.DataArray;
          int index10 = num17;
          int num19 = index10 + 1;
          int num20 = (int) (byte) (this.m_serialNo & (ulong) byte.MaxValue);
          dataArray10[index10] = (byte) num20;
          byte[] dataArray11 = req.DataArray;
          int index11 = num19;
          int num21 = index11 + 1;
          dataArray11[index11] = (byte) 0;
          byte[] dataArray12 = req.DataArray;
          int index12 = num21;
          int num22 = index12 + 1;
          dataArray12[index12] = (byte) 0;
          this.generateChecksum(ref req, MinomatV2.CCommand.BLOCK_SIZE);
          int num23 = num22 + 2;
          for (int index13 = 0; index13 < 6; ++index13)
            req.DataArray[num23++] = (byte) 0;
          this.generateChecksum(ref req, MinomatV2.CCommand.BLOCK_SIZE * 2U);
          int num24 = num23 + 2;
          byte[] dataArray13 = req.DataArray;
          int index14 = num24;
          int num25 = index14 + 1;
          dataArray13[index14] = byte.MaxValue;
          ulong longParam = this.getLongParam();
          byte[] dataArray14 = req.DataArray;
          int index15 = num25;
          int num26 = index15 + 1;
          int num27 = (int) (byte) (longParam >> 24);
          dataArray14[index15] = (byte) num27;
          byte[] dataArray15 = req.DataArray;
          int index16 = num26;
          int num28 = index16 + 1;
          int num29 = (int) (byte) (longParam >> 16);
          dataArray15[index16] = (byte) num29;
          byte[] dataArray16 = req.DataArray;
          int index17 = num28;
          int num30 = index17 + 1;
          int num31 = (int) (byte) (longParam >> 8);
          dataArray16[index17] = (byte) num31;
          byte[] dataArray17 = req.DataArray;
          int index18 = num30;
          int num32 = index18 + 1;
          int num33 = (int) (byte) (longParam & (ulong) byte.MaxValue);
          dataArray17[index18] = (byte) num33;
          byte[] dataArray18 = req.DataArray;
          int index19 = num32;
          int num34 = index19 + 1;
          int byteParam = (int) this.getByteParam();
          dataArray18[index19] = (byte) byteParam;
          this.generateChecksum(ref req, MinomatV2.CCommand.BLOCK_SIZE * 3U);
          int num35 = num34 + 2;
          if (requestContainerSize > 0U)
            this.encodeRequestContainerData(ref req);
        }
        return MinomatV2.CCommand.REQUEST_SIZE + this.getResponseContainerSize();
      }

      public void decodeResponse(bool hasReceivedResponse, ref MinomatV2.CCommandDataArray resp)
      {
        if (!hasReceivedResponse || (long) resp.DataArray.Length != (long) (MinomatV2.CCommand.REQUEST_SIZE + this.getResponseContainerSize()))
          return;
        int num = (int) ((long) resp.DataArray.Length / (long) MinomatV2.CCommand.BLOCK_SIZE);
        for (uint index = 0; (long) index < (long) num; ++index)
        {
          if (!CRC.correctErrorReversed(ref resp.DataArray, MinomatV2.CCommand.BLOCK_SIZE, index * MinomatV2.CCommand.BLOCK_SIZE))
            return;
        }
        byte index1 = (byte) (MinomatV2.CCommand.BLOCK_SIZE * 3U);
        this.decodeResponseStatus((ushort) resp.DataArray[(int) index1 + 5]);
        bool flag = (long) resp.DataArray[0] == ((long) (this.m_userPassword >> 24) & (long) byte.MaxValue) && (long) resp.DataArray[1] == ((long) (this.m_userPassword >> 16) & (long) byte.MaxValue) && (long) resp.DataArray[2] == ((long) (this.m_userPassword >> 8) & (long) byte.MaxValue) && (long) resp.DataArray[3] == ((long) this.m_userPassword & (long) byte.MaxValue);
        if (!flag)
          flag = resp.DataArray[0] == (byte) 51 && resp.DataArray[1] == (byte) 52 && resp.DataArray[2] == (byte) 49 && resp.DataArray[3] == (byte) 52;
        if (!flag || !this.isResponseSizeValid(ref resp) || (int) resp.DataArray[5] != (int) this.m_number || (long) ((int) resp.DataArray[(int) MinomatV2.CCommand.BLOCK_SIZE] << 24 | (int) resp.DataArray[(int) MinomatV2.CCommand.BLOCK_SIZE + 1] << 16 | (int) resp.DataArray[(int) MinomatV2.CCommand.BLOCK_SIZE + 2] << 8 | (int) resp.DataArray[(int) MinomatV2.CCommand.BLOCK_SIZE + 3]) != (long) this.m_serialNo || resp.DataArray[(int) index1] != byte.MaxValue || !this.decodeLongParam((ulong) ((int) resp.DataArray[(int) index1 + 1] << 24 | (int) resp.DataArray[(int) index1 + 2] << 16 | (int) resp.DataArray[(int) index1 + 3] << 8 | (int) resp.DataArray[(int) index1 + 4])) || !this.decodeResponseContainerData(ref resp))
          return;
        this.m_hasReceivedResponse = true;
      }

      protected virtual ulong getLongParam() => 0;

      protected virtual bool decodeLongParam(ulong LongParam) => true;

      protected virtual byte getByteParam() => 0;

      protected virtual uint getRequestContainerSize() => 0;

      protected virtual void encodeRequestContainerData(ref MinomatV2.CCommandDataArray resp)
      {
      }

      protected virtual uint getResponseContainerSize() => 0;

      protected virtual bool decodeResponseContainerData(ref MinomatV2.CCommandDataArray resp)
      {
        return true;
      }

      protected virtual bool isResponseSizeValid(ref MinomatV2.CCommandDataArray resp)
      {
        return (int) resp.DataArray[4] == resp.DataArray.Length;
      }
    }
  }
}


--- OpticalInterfaceState.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.OpticalInterfaceState
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

#nullable disable
namespace DeviceCollector
{
  public enum OpticalInterfaceState
  {
    Default,
    ZVEI_On,
    IrDa_On,
  }
}


--- PDC.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.PDC
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using NLog;
using System;
using System.Collections.Generic;
using System.Threading;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class PDC : Serie3MBus
  {
    private static Logger logger = LogManager.GetLogger(nameof (PDC));
    private const byte CommIDVersionPDC = 0;
    private const byte CommIDUpdate = 1;
    private const byte CommIDEventLogRead = 2;
    private const byte CommIDEventLogClear = 3;
    private const byte CommIDSystemLogRead = 4;
    private const byte CommIDSystemLogClear = 5;
    private const byte CommIDRadioDisable = 6;
    private const byte CommIDRadioMode = 7;
    private const byte CommIDRadioBaseTime = 8;
    private const byte CommIDRadioNormal = 9;
    private const byte CommIDRadioReceive = 10;
    private const byte CommIDRadioTransmit = 11;
    private const byte CommIDRadioOOK = 12;
    private const byte CommIDRadioPN9 = 13;
    private const byte CommIDTime = 14;
    private const byte CommIDPulseSettings = 15;
    private const byte CommIDPulseDisable = 16;
    private const byte CommIDPulseEnable = 17;
    private const byte CommIDPulseTest = 18;
    private const byte CommIDPowerCheck = 19;
    private const byte CommIDLogHeaders = 20;
    private const byte CommIDListQuery = 21;
    private const byte CommIDRadioList = 22;
    private const byte CommIDConfigFlags = 23;
    private const byte CommIDRadioFlags = 24;
    private const byte CommIDKeyDate = 25;
    private const byte CommIDResetToDelivery = 26;
    private const byte CommIDStatusFlags = 32;
    private const byte CommIDMeterValue = 33;
    private const byte CommIDVif = 34;
    private const byte CommIDExponent = 35;
    private const byte CommIDMantissa = 36;
    private const byte CommIDFlowBlock = 37;
    private const byte CommIDFlowLeak = 38;
    private const byte CommIDFlowBurst = 39;
    private const byte CommIDFlowOversize = 40;
    private const byte CommIDFlowUndersize = 41;
    private const byte CommIDSerial = 48;
    private const byte CommIDMBusAddress = 49;
    private const byte CommIDMBusVersion = 50;
    private const byte CommIDMBusMedium = 51;
    private const byte CommIDMBusManid = 52;
    private const byte CommIDObisCode = 53;
    private const byte CommIDDepassivate = 64;
    private const byte CommIDDepassSettings = 65;
    private const byte CommIDMBusBreak = 66;
    private const byte CommIDMBusStatus = 67;

    public PDC(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.BaseConstructor();
    }

    public PDC(MBusDevice TheMBusDevice)
      : base(TheMBusDevice)
    {
      this.BaseConstructor();
    }

    private void BaseConstructor() => this.DeviceType = DeviceTypes.PDC;

    public int ReadTimeout_RecTime_OffsetPerBlock
    {
      get
      {
        if (this.MyBus.AsyncCom == null)
          return 800;
        SortedList<AsyncComSettings, object> asyncComSettings = this.MyBus.AsyncCom.GetAsyncComSettings();
        return !asyncComSettings.ContainsKey(AsyncComSettings.RecTime_OffsetPerBlock) || string.IsNullOrEmpty(asyncComSettings[AsyncComSettings.RecTime_OffsetPerBlock].ToString()) ? 800 : Convert.ToInt32(asyncComSettings[AsyncComSettings.RecTime_OffsetPerBlock]);
      }
      set
      {
        if (this.MyBus.AsyncCom == null)
          return;
        this.MyBus.AsyncCom.SingleParameter(CommParameter.RecTime_OffsetPerBlock, value.ToString());
      }
    }

    public new bool ReadVersion(out ReadVersionData versionData)
    {
      return base.ReadVersion(out versionData);
    }

    public bool ReadMemory(ushort startAddress, int size, out byte[] buffer)
    {
      buffer = (byte[]) null;
      this.StartAddress = (int) startAddress;
      this.NumberOfBytes = size;
      if (!this.ReadMemory())
      {
        PDC.logger.Error<ushort, int>("Read memory error at address: 0x{0:X4}, Size: {1}", startAddress, size);
        return false;
      }
      buffer = this.DataBuffer.Data;
      return true;
    }

    public bool RunRAMBackup()
    {
      PDC.logger.Info(nameof (RunRAMBackup));
      return this.RunBackup();
    }

    public new bool ResetDevice()
    {
      int timeOffsetPerBlock = this.ReadTimeout_RecTime_OffsetPerBlock;
      if (timeOffsetPerBlock < 2000)
        this.ReadTimeout_RecTime_OffsetPerBlock = 2000;
      try
      {
        this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ResetDevice);
        if (!this.MyBus.MyCom.Open())
          return false;
        this.GenerateSendDataHeader();
        this.TransmitBuffer.Add(15);
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(4);
        this.FinishLongFrame();
        while (!this.MyBus.BreakRequest && this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
        {
          PDC.logger.Info(nameof (ResetDevice));
          this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusDeviceReset);
          if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
            return false;
          this.MyBus.BusState.IncrementTransmitBlockCounter();
          if (!this.ReceiveOkNok())
          {
            if (PDC.logger.IsWarnEnabled && this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
              PDC.logger.Warn("--> ResetDevice error. Repeat command!");
          }
          else
          {
            Thread.Sleep(300);
            return true;
          }
        }
        return false;
      }
      finally
      {
        this.ReadTimeout_RecTime_OffsetPerBlock = timeOffsetPerBlock;
      }
    }

    public bool UpdateModeEnter()
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return false;
      if (this.UpdateModeReadFlash(38400U, (byte) 128) != null)
        return true;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 1);
      this.FinishLongFrame();
      PDC.logger.Debug("Enters the update mode");
      this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
      this.MyBus.BusState.IncrementTransmitBlockCounter();
      ByteField DataBlock = new ByteField(1);
      if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
      {
        Thread.Sleep(200);
        this.MyBus.MyCom.ResetLastTransmitEndTime();
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(200);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            return false;
        }
      }
      return DataBlock != null && DataBlock.Count == 1 && DataBlock.Data[0] == (byte) 229;
    }

    public bool UpdateModeExit()
    {
      List<byte> buffer = new List<byte>();
      buffer.Add((byte) 5);
      buffer.Add((byte) 0);
      ushort num = Util.CalculatesCRC16_CC430(buffer);
      buffer.AddRange((IEnumerable<byte>) BitConverter.GetBytes(num));
      byte[] stuffedBuffer = this.GetStuffedBuffer(buffer);
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 170);
      byteList.AddRange((IEnumerable<byte>) stuffedBuffer);
      byteList.Add((byte) 205);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return false;
      bool wakeupTemporaryOff = this.MyBus.AsyncCom.WakeupTemporaryOff;
      try
      {
        PDC.logger.Debug("Exit the update mode");
        this.MyBus.AsyncCom.WakeupTemporaryOff = true;
        this.MyBus.MyCom.TransmitBlock(byteList.ToArray());
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        Thread.Sleep(2000);
        this.MyBus.MyCom.ResetLastTransmitEndTime();
        ByteField DataBlock = new ByteField(1);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(100);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(300);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
              return false;
          }
        }
        this.MyBus.MyCom.ClearCom();
        return DataBlock != null && DataBlock.Count == 1 && DataBlock.Data[0] == (byte) 229;
      }
      finally
      {
        this.MyBus.AsyncCom.WakeupTemporaryOff = wakeupTemporaryOff;
      }
    }

    public bool UpdateModeEraseFlash(uint address)
    {
      byte[] bytes = BitConverter.GetBytes(address);
      List<byte> buffer1 = new List<byte>();
      buffer1.Add((byte) 7);
      buffer1.Add((byte) 0);
      buffer1.AddRange((IEnumerable<byte>) bytes);
      ushort num1 = Util.CalculatesCRC16_CC430(buffer1);
      buffer1.AddRange((IEnumerable<byte>) BitConverter.GetBytes(num1));
      byte[] stuffedBuffer = this.GetStuffedBuffer(buffer1);
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 170);
      byteList.AddRange((IEnumerable<byte>) stuffedBuffer);
      byteList.Add((byte) 205);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return false;
      bool wakeupTemporaryOff = this.MyBus.AsyncCom.WakeupTemporaryOff;
      try
      {
        PDC.logger.Debug("Erase 512 bytes flash at address 0x" + address.ToString("X4"));
        this.MyBus.AsyncCom.WakeupTemporaryOff = true;
        this.MyBus.MyCom.TransmitBlock(byteList.ToArray());
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        List<byte> buffer2 = new List<byte>();
        ByteField DataBlock = new ByteField(1);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(300);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(300);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(300);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                return false;
            }
          }
        }
        byte num2 = DataBlock.Data[0];
        buffer2.Add(num2);
        if (num2 != (byte) 170)
          return false;
        byte num3;
        do
        {
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(100);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(300);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
              {
                Thread.Sleep(300);
                this.MyBus.MyCom.ResetLastTransmitEndTime();
                if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                  return false;
              }
            }
          }
          num3 = DataBlock.Data[0];
          buffer2.Add(num3);
        }
        while (num3 != (byte) 205);
        byte[] unstuffedBuffer = this.GetUnstuffedBuffer(buffer2);
        if (unstuffedBuffer.Length < 10)
          return false;
        byte[] numArray = new byte[unstuffedBuffer.Length - 4];
        Buffer.BlockCopy((Array) unstuffedBuffer, 1, (Array) numArray, 0, numArray.Length);
        ushort num4 = Util.CalculatesCRC16_CC430(new List<byte>((IEnumerable<byte>) numArray));
        ushort uint16 = BitConverter.ToUInt16(unstuffedBuffer, 7);
        return unstuffedBuffer != null && unstuffedBuffer[1] == (byte) 135 && unstuffedBuffer[2] == (byte) 0 && (int) unstuffedBuffer[3] == (int) bytes[0] && (int) unstuffedBuffer[4] == (int) bytes[1] && (int) unstuffedBuffer[5] == (int) bytes[2] && (int) unstuffedBuffer[6] == (int) bytes[3] && (int) uint16 == (int) num4;
      }
      finally
      {
        this.MyBus.AsyncCom.WakeupTemporaryOff = wakeupTemporaryOff;
      }
    }

    public bool UpdateModeWriteFlash(uint address, byte[] memory_128byte)
    {
      byte[] bytes = BitConverter.GetBytes(address);
      List<byte> buffer1 = new List<byte>();
      buffer1.Add((byte) 6);
      buffer1.Add((byte) 0);
      buffer1.AddRange((IEnumerable<byte>) bytes);
      buffer1.AddRange((IEnumerable<byte>) memory_128byte);
      ushort num1 = Util.CalculatesCRC16_CC430(buffer1);
      buffer1.AddRange((IEnumerable<byte>) BitConverter.GetBytes(num1));
      byte[] stuffedBuffer = this.GetStuffedBuffer(buffer1);
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 170);
      byteList.AddRange((IEnumerable<byte>) stuffedBuffer);
      byteList.Add((byte) 205);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return false;
      bool wakeupTemporaryOff = this.MyBus.AsyncCom.WakeupTemporaryOff;
      try
      {
        PDC.logger.Debug("Write 128 bytes flash at address 0x" + address.ToString("X4"));
        this.MyBus.AsyncCom.WakeupTemporaryOff = true;
        this.MyBus.MyCom.TransmitBlock(byteList.ToArray());
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        this.MyBus.MyCom.ResetLastTransmitEndTime();
        List<byte> buffer2 = new List<byte>();
        ByteField DataBlock = new ByteField(1);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(200);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(200);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(200);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                return false;
            }
          }
        }
        byte num2 = DataBlock.Data[0];
        buffer2.Add(num2);
        if (num2 != (byte) 170)
          return false;
        byte num3;
        do
        {
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(200);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(200);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
              {
                Thread.Sleep(200);
                this.MyBus.MyCom.ResetLastTransmitEndTime();
                if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                  return false;
              }
            }
          }
          num3 = DataBlock.Data[0];
          buffer2.Add(num3);
        }
        while (num3 != (byte) 205);
        byte[] unstuffedBuffer = this.GetUnstuffedBuffer(buffer2);
        if (unstuffedBuffer.Length < 10)
          return false;
        byte[] numArray = new byte[unstuffedBuffer.Length - 4];
        Buffer.BlockCopy((Array) unstuffedBuffer, 1, (Array) numArray, 0, numArray.Length);
        ushort num4 = Util.CalculatesCRC16_CC430(new List<byte>((IEnumerable<byte>) numArray));
        ushort uint16 = BitConverter.ToUInt16(unstuffedBuffer, 7);
        return unstuffedBuffer != null && unstuffedBuffer[1] == (byte) 134 && unstuffedBuffer[2] == (byte) 0 && (int) unstuffedBuffer[3] == (int) bytes[0] && (int) unstuffedBuffer[4] == (int) bytes[1] && (int) unstuffedBuffer[5] == (int) bytes[2] && (int) unstuffedBuffer[6] == (int) bytes[3] && (int) uint16 == (int) num4;
      }
      finally
      {
        this.MyBus.AsyncCom.WakeupTemporaryOff = wakeupTemporaryOff;
      }
    }

    public byte[] UpdateModeReadFlash(uint address, byte count)
    {
      byte[] bytes = BitConverter.GetBytes(address);
      List<byte> buffer1 = new List<byte>();
      buffer1.Add((byte) 8);
      buffer1.Add((byte) 0);
      buffer1.AddRange((IEnumerable<byte>) bytes);
      buffer1.Add(count);
      ushort num1 = Util.CalculatesCRC16_CC430(buffer1);
      buffer1.AddRange((IEnumerable<byte>) BitConverter.GetBytes(num1));
      byte[] stuffedBuffer = this.GetStuffedBuffer(buffer1);
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 170);
      byteList.AddRange((IEnumerable<byte>) stuffedBuffer);
      byteList.Add((byte) 205);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.UpdateMode);
      if (!this.MyBus.MyCom.Open())
        return (byte[]) null;
      bool wakeupTemporaryOff = this.MyBus.AsyncCom.WakeupTemporaryOff;
      try
      {
        PDC.logger.Debug("Read " + count.ToString() + " bytes flash at address 0x" + address.ToString("X4"));
        this.MyBus.AsyncCom.WakeupTemporaryOff = true;
        this.MyBus.MyCom.TransmitBlock(byteList.ToArray());
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        List<byte> buffer2 = new List<byte>();
        ByteField DataBlock = new ByteField(1);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
        {
          Thread.Sleep(200);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(400);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
              return (byte[]) null;
          }
        }
        buffer2.AddRange((IEnumerable<byte>) DataBlock.Data);
        if (buffer2[0] != (byte) 170)
          return (byte[]) null;
        while (buffer2[buffer2.Count - 1] != (byte) 205)
        {
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          {
            Thread.Sleep(200);
            this.MyBus.MyCom.ResetLastTransmitEndTime();
            if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
            {
              Thread.Sleep(200);
              this.MyBus.MyCom.ResetLastTransmitEndTime();
              if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
                return (byte[]) null;
            }
          }
          buffer2.Add(DataBlock.Data[0]);
        }
        byte[] unstuffedBuffer = this.GetUnstuffedBuffer(buffer2);
        byte[] numArray = new byte[unstuffedBuffer.Length - 4];
        Buffer.BlockCopy((Array) unstuffedBuffer, 1, (Array) numArray, 0, numArray.Length);
        ushort num2 = Util.CalculatesCRC16_CC430(new List<byte>((IEnumerable<byte>) numArray));
        ushort uint16 = BitConverter.ToUInt16(unstuffedBuffer, unstuffedBuffer.Length - 3);
        if (unstuffedBuffer == null || unstuffedBuffer[1] != (byte) 136 || unstuffedBuffer[2] != (byte) 0 || (int) unstuffedBuffer[3] != (int) bytes[0] || (int) unstuffedBuffer[4] != (int) bytes[1] || (int) unstuffedBuffer[5] != (int) bytes[2] || (int) unstuffedBuffer[6] != (int) bytes[3] || (int) uint16 != (int) num2)
          return (byte[]) null;
        byte[] dst = new byte[(int) count];
        Buffer.BlockCopy((Array) unstuffedBuffer, 7, (Array) dst, 0, dst.Length);
        return dst;
      }
      finally
      {
        this.MyBus.AsyncCom.WakeupTemporaryOff = wakeupTemporaryOff;
      }
    }

    private byte[] GetStuffedBuffer(List<byte> buffer)
    {
      List<byte> byteList = new List<byte>();
      foreach (byte num1 in buffer)
      {
        int num2;
        switch (num1)
        {
          case 170:
          case 205:
            num2 = 1;
            break;
          default:
            num2 = num1 == (byte) 92 ? 1 : 0;
            break;
        }
        if (num2 != 0)
        {
          byteList.Add((byte) 92);
          byteList.Add(~num1);
        }
        else
          byteList.Add(num1);
      }
      return byteList.ToArray();
    }

    private byte[] GetUnstuffedBuffer(List<byte> buffer)
    {
      List<byte> byteList = new List<byte>();
      for (int index = 0; index < buffer.Count; ++index)
      {
        if (buffer[index] == (byte) 92)
        {
          ++index;
          byteList.Add(~buffer[index]);
        }
        else
          byteList.Add(buffer[index]);
      }
      return byteList.ToArray();
    }

    public bool PulseDisable()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand((byte) 16) && this.ReceiveACK_NACK((byte) 16);
    }

    public bool PulseEnable()
    {
      return this.ExecuteSimpleCommand((byte) 17) && this.ReceiveACK_NACK((byte) 17);
    }

    public uint? PulseSettingsRead()
    {
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 15);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: PulseSettingsRead");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run PulseSettingsRead");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run PulseSettingsRead");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 6));
        }
      }
      return new uint?();
    }

    public uint? PulseSettingsWrite(ushort period, byte ontime)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 15);
      this.TransmitBuffer.Add((int) period);
      this.TransmitBuffer.Add(ontime);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: PulseSettingsWrite");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run PulseSettingsWrite");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run PulseSettingsWrite");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 6));
        }
      }
      return new uint?();
    }

    public bool RadioDisable()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand((byte) 6) && this.ReceiveACK_NACK((byte) 6);
    }

    public bool RadioNormal()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand((byte) 9) && this.ReceiveACK_NACK((byte) 9);
    }

    private bool ExecuteSimpleCommand(byte cmd)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add(cmd);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: 0x" + cmd.ToString("X2"));
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run 0x" + cmd.ToString("X2"));
        }
        else
        {
          if (this.ReceiveLongframeEnd())
            return true;
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run 0x" + cmd.ToString("X2"));
        }
      }
      return false;
    }

    public bool StartVolumeMonitor()
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.MyCom.BreakRequest = false;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.StartVolumeMonitor);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 18);
      this.FinishLongFrame();
      PDC.logger.Info("Send cmd: StartVolumeMonitor");
      this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
      this.MyBus.BusState.IncrementTransmitBlockCounter();
      Thread.Sleep(1200);
      this.MyBus.MyCom.ResetLastTransmitEndTime();
      if (this.MyBus.AsyncCom.InputBufferLength > 0L)
      {
        PDC.logger.Info("ok");
        return true;
      }
      PDC.logger.Error("Failed to start the volume monitor.");
      return false;
    }

    public bool StopVolumeMonitor_SendE5()
    {
      this.MyBus.MyCom.BreakRequest = false;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.StopVolumeMonitor);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.MyCom.WakeupTemporaryOff = true;
      ByteField DataBlock = new ByteField(new byte[1]
      {
        (byte) 229
      });
      PDC.logger.Info("Send cmd: StopVolumeMonitor_SendE5");
      this.MyBus.MyCom.TransmitBlock(ref DataBlock);
      this.MyBus.MyCom.TransmitBlock(ref DataBlock);
      this.MyBus.MyCom.TransmitBlock(ref DataBlock);
      this.MyBus.BusState.IncrementTransmitBlockCounter();
      Thread.Sleep(600);
      this.MyBus.MyCom.ResetLastTransmitEndTime();
      LogManager.DisableLogging();
      try
      {
        this.MyBus.MyCom.ClearCom();
      }
      finally
      {
        LogManager.EnableLogging();
      }
      ZR_ClassLibMessages.ClearErrorText();
      return true;
    }

    public bool WriteRAM(ushort address, byte[] buffer)
    {
      BusDevice.CheckReadOnlyRight();
      int timeOffsetPerBlock = this.ReadTimeout_RecTime_OffsetPerBlock;
      if (timeOffsetPerBlock < 1000)
        this.ReadTimeout_RecTime_OffsetPerBlock = 1000;
      try
      {
        bool flag = this.Write(MemoryLocation.RAM, address, buffer);
        if (flag)
          Thread.Sleep(100);
        return flag;
      }
      finally
      {
        this.ReadTimeout_RecTime_OffsetPerBlock = timeOffsetPerBlock;
      }
    }

    public bool WriteFLASH(ushort address, byte[] buffer)
    {
      BusDevice.CheckReadOnlyRight();
      int timeOffsetPerBlock = this.ReadTimeout_RecTime_OffsetPerBlock;
      if (timeOffsetPerBlock < 1000)
        this.ReadTimeout_RecTime_OffsetPerBlock = 1000;
      try
      {
        bool flag = this.Write(MemoryLocation.FLASH, address, buffer);
        if (flag)
          Thread.Sleep(200);
        return flag;
      }
      finally
      {
        this.ReadTimeout_RecTime_OffsetPerBlock = timeOffsetPerBlock;
      }
    }

    private bool Write(MemoryLocation location, ushort address, byte[] buffer)
    {
      BusDevice.CheckReadOnlyRight();
      if (location != MemoryLocation.FLASH && location != MemoryLocation.RAM)
        return false;
      if (buffer == null || buffer.Length == 0)
        return true;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMemoryBlock);
      if (!this.MyBus.MyCom.Open())
        return false;
      int IntToByte = 3;
      if (location == MemoryLocation.FLASH)
      {
        IntToByte = 1;
        if (buffer.Length % 4 != 0)
          throw new Exception("Internally PDC Handler Bug: FLASH write. Write buffer is not multiple of 4!");
      }
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(BitConverter.GetBytes(address));
      this.TransmitBuffer.Add((byte) buffer.Length);
      this.TransmitBuffer.Add(IntToByte);
      this.TransmitBuffer.Add(buffer);
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Info("Write " + location.ToString() + " 0x" + address.ToString("X4"));
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveOkNok())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run write " + location.ToString());
        }
        else
        {
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
      }
      return flag;
    }

    public bool SendSND_NKE()
    {
      this.SND_NKE_Broadcast();
      return true;
    }

    public bool RadioOOK()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand((byte) 12) && this.ReceiveACK_NACK((byte) 12);
    }

    public bool RadioOOK(RadioMode mode, short offset, ushort timeoutInSeconds)
    {
      return this.RadioTest((byte) 12, mode, offset, timeoutInSeconds);
    }

    public bool RadioPN9()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand((byte) 13) && this.ReceiveACK_NACK((byte) 13);
    }

    public bool RadioPN9(RadioMode mode, short offset, ushort timeoutInSeconds)
    {
      return this.RadioTest((byte) 13, mode, offset, timeoutInSeconds);
    }

    private bool RadioTest(byte cmd, RadioMode mode, short offset, ushort timeoutInSeconds)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add(cmd);
      this.TransmitBuffer.Add((byte) mode);
      this.TransmitBuffer.Add(BitConverter.GetBytes(offset));
      this.TransmitBuffer.Add(BitConverter.GetBytes(timeoutInSeconds));
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: 0x" + cmd.ToString("X2"));
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run 0x" + cmd.ToString("X2"));
        }
        else
        {
          if (this.ReceiveLongframeEnd())
            return this.ReceiveACK_NACK(cmd);
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run 0x" + cmd.ToString("X2"));
        }
      }
      return flag;
    }

    public DateTime? ReadSystemTime()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMemoryBlock);
      if (!this.MyBus.MyCom.Open())
        return new DateTime?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 14);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadSystemTime");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadSystemTime");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadSystemTime");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 12 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown EDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          byte num = this.ReceiveBuffer.Data[6];
          byte month = this.ReceiveBuffer.Data[7];
          byte day = this.ReceiveBuffer.Data[8];
          byte hour = this.ReceiveBuffer.Data[9];
          byte minute = this.ReceiveBuffer.Data[10];
          byte second = this.ReceiveBuffer.Data[11];
          if (month > (byte) 12 || day > (byte) 31 || hour > (byte) 23 || minute > (byte) 59 || second > (byte) 59)
            return new DateTime?(new DateTime(2000, 1, 1));
          if (month == (byte) 0 || day == (byte) 0)
            return new DateTime?(new DateTime(2000, 1, 1));
          try
          {
            return new DateTime?(new DateTime((int) num + 2000, (int) month, (int) day, (int) hour, (int) minute, (int) second));
          }
          catch
          {
            return new DateTime?(new DateTime(2000, 1, 1));
          }
        }
      }
      return new DateTime?();
    }

    public bool WriteSystemTime(DateTime value)
    {
      BusDevice.CheckReadOnlyRight();
      if (value.Year < 2000)
        throw new ArgumentOutOfRangeException("Can not write system time! The year should be greater or equal to 2000. Value: " + value.ToLongDateString());
      if (value.Year > 2255)
        throw new ArgumentOutOfRangeException("Can not write system time! The year should be smaller as 2255. Value: " + value.ToLongDateString());
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMemoryBlock);
      byte Byte = (byte) (value.Year - 2000);
      byte month = (byte) value.Month;
      byte day = (byte) value.Day;
      byte hour = (byte) value.Hour;
      byte minute = (byte) value.Minute;
      byte second = (byte) value.Second;
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 14);
      this.TransmitBuffer.Add(Byte);
      this.TransmitBuffer.Add(month);
      this.TransmitBuffer.Add(day);
      this.TransmitBuffer.Add(hour);
      this.TransmitBuffer.Add(minute);
      this.TransmitBuffer.Add(second);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Info("WriteSystemTime(" + value.ToString("g") + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadSystemTime");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadSystemTime");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 12 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown EDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (int) Byte == (int) this.ReceiveBuffer.Data[6] && (int) month == (int) this.ReceiveBuffer.Data[7] && (int) day == (int) this.ReceiveBuffer.Data[8] && (int) hour == (int) this.ReceiveBuffer.Data[9] && (int) minute == (int) this.ReceiveBuffer.Data[10];
        }
      }
      return false;
    }

    internal bool ReceiveACK_NACK(byte cmd)
    {
      ZR_ClassLibMessages.ClearErrors();
      if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
        throw new Exception("Unknown EDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
      if (this.ReceiveBuffer.Data[5] == byte.MaxValue)
        throw new Exception("Invalid command was send to EDC device! CMD: " + this.ReceiveBuffer.Data[6].ToString());
      if (this.ReceiveBuffer.Data[5] == (byte) 251 || this.ReceiveBuffer.Data[5] == (byte) 252 || this.ReceiveBuffer.Data[5] == (byte) 253 || this.ReceiveBuffer.Data[5] == (byte) 254)
        throw new Exception("Invalid responce was received! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
      if (this.ReceiveBuffer.Data[5] == (byte) 250 && (int) this.ReceiveBuffer.Data[6] == (int) cmd)
      {
        PDC.logger.Debug("... successful ");
        return true;
      }
      if ((int) this.ReceiveBuffer.Data[5] != ((int) cmd | 128))
        return false;
      PDC.logger.Debug("... successful ");
      return true;
    }

    public bool EraseFLASHSegment(ushort address)
    {
      BusDevice.CheckReadOnlyRight();
      PDC.logger.Info("Erase FLASH 0x" + address.ToString("X4"));
      int timeOffsetPerBlock = this.ReadTimeout_RecTime_OffsetPerBlock;
      if (timeOffsetPerBlock < 1000)
        this.ReadTimeout_RecTime_OffsetPerBlock = 1000;
      try
      {
        bool flag = this.EraseFlash((int) address, 0);
        if (flag)
          Thread.Sleep(200);
        return flag;
      }
      finally
      {
        this.ReadTimeout_RecTime_OffsetPerBlock = timeOffsetPerBlock;
      }
    }

    public bool RadioReceive(
      out RadioPacket packet,
      out byte[] buffer,
      out int rssi_dBm,
      out int lqi,
      uint timeout)
    {
      BusDevice.CheckReadOnlyRight();
      packet = (RadioPacket) null;
      buffer = (byte[]) null;
      rssi_dBm = 0;
      lqi = 0;
      DateTime now1 = DateTime.Now;
      try
      {
        if (!this.PulseDisable())
          throw new Exception("Can not disable radio!");
        if (!this.ExecuteSimpleCommand((byte) 10))
          throw new Exception("Can not start radio receiver!");
        if (!this.ReceiveACK_NACK((byte) 10))
          throw new Exception("Missing OK after start radio receiver!");
        DateTime now2 = DateTime.Now;
        while ((DateTime.Now - now2).TotalMilliseconds < (double) timeout && this.MyBus.MyCom.InputBufferLength < 19L)
        {
          if (this.MyBus.BreakRequest)
            throw new Exception("Function was canceled!");
          PDC.logger.Trace("Wait 100 ms");
          Thread.Sleep(100);
          this.MyBus.MyCom.ResetLastTransmitEndTime();
        }
        if ((DateTime.Now - now2).TotalMilliseconds > (double) timeout)
        {
          string TheDescription = "Timeout " + timeout.ToString() + " ms expired. The timeout period elapsed prior to completion of the operation or the device is not responding.";
          if (this.MyBus.MyCom.InputBufferLength > 0L)
            TheDescription = TheDescription + "Invalid buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data, 0);
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.Timeout, TheDescription);
          return false;
        }
        this.MyBus.MyCom.ResetLastTransmitEndTime();
        if (!this.ReceiveHeader())
          throw new Exception("Can not encode header!");
        if (!this.ReceiveLongframeEnd())
          throw new Exception("Can not encode M-Bus long frame!");
        if (!this.ReceiveACK_NACK((byte) 10))
          throw new Exception("Can not receive OK after successfully radio receive!");
        if (this.ReceiveBuffer.Data.Length < 7 || this.ReceiveBuffer.Data[6] > (byte) 0)
          throw new Exception("Failed to receive radio packet! Error number: " + this.ReceiveBuffer.Data[6].ToString());
        buffer = new byte[this.ReceiveBuffer.Data.Length - 7 - 2];
        Buffer.BlockCopy((Array) this.ReceiveBuffer.Data, 7, (Array) buffer, 0, buffer.Length);
        packet = RadioPacket.Parse(buffer, true);
        rssi_dBm = Util.RssiToRssi_dBm(buffer[buffer.Length - 2]);
        lqi = (int) buffer[buffer.Length - 1];
        return true;
      }
      finally
      {
        ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
        this.RadioDisable();
        if (lastError != 0)
          ZR_ClassLibMessages.AddErrorDescription(lastError);
      }
    }

    public bool StartRadioReceiver()
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.PulseDisable())
        throw new Exception("Failed to start the radio receiver! Can not disable the coil sampling.");
      if (!this.ExecuteSimpleCommand((byte) 10))
        throw new Exception("Can not start radio receiver!");
      if (!this.ReceiveACK_NACK((byte) 10))
        throw new Exception("Missing OK after start radio receiver!");
      return true;
    }

    public bool EventLogClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand((byte) 3) && this.ReceiveACK_NACK((byte) 3);
    }

    public bool SystemLogClear()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand((byte) 5) && this.ReceiveACK_NACK((byte) 5);
    }

    public bool WriteMeterValue(byte channel, uint value)
    {
      BusDevice.CheckReadOnlyRight();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMeterValue);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 33);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(BitConverter.GetBytes(value));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Info("WriteMeterValue(" + value.ToString() + ")");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMeterValue");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMeterValue");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown EDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return (long) BitConverter.ToInt32(this.ReceiveBuffer.Data, 7) == (long) value;
        }
      }
      return false;
    }

    public int? ReadMeterValue(byte channel)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMeterValue);
      if (!this.MyBus.MyCom.Open())
        return new int?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 33);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadMeterValue");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMeterValue");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMeterValue");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown EDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new int?(BitConverter.ToInt32(this.ReceiveBuffer.Data, 7));
        }
      }
      return new int?();
    }

    public bool DeliveryState()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand((byte) 26) && this.ReceiveACK_NACK((byte) 26);
    }

    public uint? ListQuery()
    {
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 21);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ListQuery");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ListQuery");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ListQuery");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 6));
        }
      }
      return new uint?();
    }

    public byte? ReadRadioList()
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 22);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: Read RadioList");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run Read RadioList");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run Read RadioList");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[6]);
        }
      }
      return new byte?();
    }

    public byte? WriteRadioList(byte list)
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 22);
      this.TransmitBuffer.Add(list);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: Read RadioList");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run Read RadioList");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run Read RadioList");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC response detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[6]);
        }
      }
      return new byte?();
    }

    public byte? ReadVIF(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 34);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadVIF");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadVIF");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadVIF");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public byte? WriteVIF(byte channel, byte code)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 34);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(code);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteVIF");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteVIF");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteVIF");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public sbyte? ReadExponent(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new sbyte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 35);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadExponent");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadExponent");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadExponent");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new sbyte?((sbyte) this.ReceiveBuffer.Data[7]);
        }
      }
      return new sbyte?();
    }

    public sbyte? WriteExponent(byte channel, sbyte code)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new sbyte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 35);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(BitConverter.GetBytes((short) code));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteExponent");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteExponent");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteExponent");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new sbyte?((sbyte) this.ReceiveBuffer.Data[7]);
        }
      }
      return new sbyte?();
    }

    public ushort? ReadMantissa(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 36);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadMantissa");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMantissa");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMantissa");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ushort?();
    }

    public ushort? WriteMantissa(byte channel, ushort code)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 36);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(BitConverter.GetBytes(code));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteMantissa");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMantissa");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMantissa");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ushort?();
    }

    public ushort? ReadFlowBlock(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 37);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadFlowBlock");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowBlock");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowBlock");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ushort?();
    }

    public ushort? WriteFlowBlock(byte channel, ushort code)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 37);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(BitConverter.GetBytes(code));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteFlowBlock");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowBlock");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowBlock");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ushort?();
    }

    public ulong? ReadFlowLeak(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new ulong?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 38);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadFlowLeak");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowLeak");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowLeak");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ulong?(BitConverter.ToUInt64(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ulong?();
    }

    public ulong? WriteFlowLeak(
      byte channel,
      ushort leak,
      ushort unleak,
      ushort upper,
      ushort lower)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new ulong?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 38);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(BitConverter.GetBytes(leak));
      this.TransmitBuffer.Add(BitConverter.GetBytes(unleak));
      this.TransmitBuffer.Add(BitConverter.GetBytes(upper));
      this.TransmitBuffer.Add(BitConverter.GetBytes(lower));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteFlowLeak");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowLeak");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowLeak");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ulong?(BitConverter.ToUInt64(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ulong?();
    }

    public uint? ReadFlowBurst(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 39);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadFlowBurst");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowBurst");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowBurst");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7));
        }
      }
      return new uint?();
    }

    public uint? WriteFlowBurst(byte channel, ushort diff, ushort limit)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 39);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(BitConverter.GetBytes(diff));
      this.TransmitBuffer.Add(BitConverter.GetBytes(limit));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteFlowBurst");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowBurst");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowBurst");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7));
        }
      }
      return new uint?();
    }

    public uint? ReadFlowOversize(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 40);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadFlowOversize");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowOversize");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowOversize");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7));
        }
      }
      return new uint?();
    }

    public uint? WriteFlowOversize(byte channel, ushort diff, ushort limit)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 40);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(BitConverter.GetBytes(diff));
      this.TransmitBuffer.Add(BitConverter.GetBytes(limit));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteFlowOversize");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowOversize");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowOversize");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7));
        }
      }
      return new uint?();
    }

    public uint? ReadFlowUndersize(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 41);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadFlowUndersize");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowUndersize");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadFlowUndersize");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7));
        }
      }
      return new uint?();
    }

    public uint? WriteFlowUndersize(byte channel, ushort diff, ushort limit)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 41);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(BitConverter.GetBytes(diff));
      this.TransmitBuffer.Add(BitConverter.GetBytes(limit));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteFlowUndersize");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowUndersize");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteFlowUndersize");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7));
        }
      }
      return new uint?();
    }

    public ushort? ReadConfigFlags()
    {
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 23);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadConfigFlags");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadConfigFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadConfigFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 6));
        }
      }
      return new ushort?();
    }

    public ushort? WriteConfigFlags(ushort flags)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 23);
      this.TransmitBuffer.Add((int) flags & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) flags >> 8 & (int) byte.MaxValue);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteConfigFlags");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteConfigFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteConfigFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 6));
        }
      }
      return new ushort?();
    }

    public ushort? ModifyConfigFlags(ushort flagsSet, ushort flagsReset)
    {
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 23);
      this.TransmitBuffer.Add((int) flagsSet & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) flagsSet >> 8 & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) flagsReset & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) flagsReset >> 8 & (int) byte.MaxValue);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ModifyConfigFlags");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ModifyConfigFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ModifyConfigFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 6));
        }
      }
      return new ushort?();
    }

    public byte? ReadRadioFlags()
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 24);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadRadioFlags");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadRadioFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadRadioFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[6]);
        }
      }
      return new byte?();
    }

    public byte? WriteRadioFlags(byte flags)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 24);
      this.TransmitBuffer.Add(flags);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteRadioFlags");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteRadioFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteRadioFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[6]);
        }
      }
      return new byte?();
    }

    public byte? ModifyRadioFlags(byte flagsSet, byte flagsReset)
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 24);
      this.TransmitBuffer.Add(flagsSet);
      this.TransmitBuffer.Add(flagsReset);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ModifyRadioFlags");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ModifyRadioFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ModifyRadioFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[6]);
        }
      }
      return new byte?();
    }

    public ushort? StatusFlagsRead(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 32);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: StatusFlags");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run StatusFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run StatusFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ushort?();
    }

    public ushort? StatusFlagsClear(byte channel, ushort flags)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 32);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(BitConverter.GetBytes(flags));
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: StatusFlags");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run StatusFlags");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run StatusFlags");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ushort?();
    }

    public ushort? ReadKeyDate()
    {
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 25);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: KeyDate");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run KeyDate");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run KeyDate");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 6));
        }
      }
      return new ushort?();
    }

    public ushort? WriteKeyDate(byte month, byte day)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 25);
      this.TransmitBuffer.Add(month);
      this.TransmitBuffer.Add(day);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteKeyDate");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteKeyDate");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteKeyDate");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 6));
        }
      }
      return new ushort?();
    }

    public uint? ReadSerial(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 48);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadSerial");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadSerial");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadSerial");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7));
        }
      }
      return new uint?();
    }

    public uint? WriteSerial(byte channel, uint serial)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 48);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add((byte) (serial & (uint) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (serial >> 8 & (uint) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (serial >> 16 & (uint) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (serial >> 24 & (uint) byte.MaxValue));
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteSerial");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteSerial");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteSerial");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 7));
        }
      }
      return new uint?();
    }

    public byte? ReadMBusAddress(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 49);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadMBusAddress");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMBusAddress");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMBusAddress");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public byte? WriteMBusAddress(byte channel, byte address)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 49);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(address);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteMBusAddress");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusAddress");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusAddress");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public byte? ReadMBusVersion(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 50);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadMBusVersion");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMBusVersion");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMBusVersion");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public byte? WriteMBusVersion(byte channel, byte version)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 50);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(version);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteMBusVersion");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusVersion");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusVersion");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public byte? ReadMBusMedium(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 51);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: CommIDMBusMedium");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run CommIDMBusMedium");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run CommIDMBusMedium");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public byte? WriteMBusMedium(byte channel, byte medium)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 51);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(medium);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteMBusMedium");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusMedium");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusMedium");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public ushort? ReadMBusManid(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 52);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadMBusManid");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMBusManid");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMBusManid");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ushort?();
    }

    public ushort? WriteMBusManid(byte channel, ushort manid)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 52);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add((int) manid & (int) byte.MaxValue);
      this.TransmitBuffer.Add((int) manid >> 8 & (int) byte.MaxValue);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteMBusManid");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusManid");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusManid");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 10 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new ushort?(BitConverter.ToUInt16(this.ReceiveBuffer.Data, 7));
        }
      }
      return new ushort?();
    }

    public byte? ReadObisCode(byte channel)
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 53);
      this.TransmitBuffer.Add(channel);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadObisCode");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadObisCode");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadObisCode");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128 || (int) this.ReceiveBuffer.Data[6] != (int) channel)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public byte? WriteObisCode(byte channel, byte obis)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 53);
      this.TransmitBuffer.Add(channel);
      this.TransmitBuffer.Add(obis);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteObisCode");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteObisCode");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteObisCode");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[7]);
        }
      }
      return new byte?();
    }

    public bool Depassivate()
    {
      BusDevice.CheckReadOnlyRight();
      return this.ExecuteSimpleCommand((byte) 64) && this.ReceiveACK_NACK((byte) 64);
    }

    public uint? ReadDepass()
    {
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 65);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadDepass");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadDepass");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadDepass");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 6));
        }
      }
      return new uint?();
    }

    public uint? WriteDepass(ushort timeout, ushort period)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new uint?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 65);
      this.TransmitBuffer.Add(BitConverter.GetBytes(timeout));
      this.TransmitBuffer.Add(BitConverter.GetBytes(period));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteDepass");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteDepass");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteDepass");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new uint?(BitConverter.ToUInt32(this.ReceiveBuffer.Data, 6));
        }
      }
      return new uint?();
    }

    public bool? MBusBreak(ushort count)
    {
      if (!this.MyBus.MyCom.Open())
        return new bool?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 66);
      this.TransmitBuffer.Add(BitConverter.GetBytes(count));
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      return new bool?(true);
    }

    public byte? ReadMBusStatus()
    {
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 67);
      this.FinishLongFrame();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: ReadMBusStatus");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMBusStatus");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run ReadMBusStatus");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[6]);
        }
      }
      return new byte?();
    }

    public byte? WriteMBusStatus(byte state)
    {
      BusDevice.CheckReadOnlyRight();
      if (!this.MyBus.MyCom.Open())
        return new byte?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(65);
      this.TransmitBuffer.Add((byte) 67);
      this.TransmitBuffer.Add(state);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        PDC.logger.Debug("Send cmd: WriteMBusStatus");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusStatus");
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            PDC.logger.Warn(" ... repeat run WriteMBusStatus");
        }
        else
        {
          if (this.ReceiveBuffer.Count < 8 || this.ReceiveBuffer.Data[0] != (byte) 15 || this.ReceiveBuffer.Data[1] != (byte) 0 || this.ReceiveBuffer.Data[2] != (byte) 0 || this.ReceiveBuffer.Data[3] != (byte) 0 || this.ReceiveBuffer.Data[4] != (byte) 65 || ((int) this.ReceiveBuffer.Data[5] & 128) != 128)
            throw new Exception("Unknown PDC responce detected! Buffer: " + Util.ByteArrayToHexString(this.ReceiveBuffer.Data));
          return new byte?(this.ReceiveBuffer.Data[6]);
        }
      }
      return new byte?();
    }
  }
}


--- PlugInAnchor.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.PlugInAnchor
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using PlugInLib;
using StartupLib;
using ZENNER.CommonLibrary;

#nullable disable
namespace DeviceCollector
{
  [ComponentPath("Reading")]
  public class PlugInAnchor : GmmPlugIn, IReadoutConfig
  {
    private DeviceCollectorFunctions MyFunctions;
    internal static string[] UsedRights = new string[5]
    {
      "DeviceCollector",
      "Designer",
      "Configurator",
      "Developer",
      "ZennerDefaultKey"
    };

    public PlugInAnchor()
    {
      if (!PlugInLoader.IsPluginLoaderInitialised())
        return;
      this.MyFunctions = new DeviceCollectorFunctions();
    }

    public override void Dispose() => this.MyFunctions.GMM_Dispose();

    public override string ShowMainWindow() => this.MyFunctions.ShowBusWindow("");

    public override PlugInInfo GetPluginInfo()
    {
      return new PlugInInfo("DeviceCollector", "Communication", "Ãbertragungsprotokolle", "Datentelegramme, je nach angeschlossenem GerÃ¤ten.", new string[1]
      {
        "AsyncCom"
      }, PlugInAnchor.UsedRights, (object) this.MyFunctions);
    }

    public void SetReadoutConfiguration(ConfigList configList)
    {
      this.MyFunctions.SetReadoutConfiguration(configList);
    }

    public ConfigList GetReadoutConfiguration() => this.MyFunctions.GetReadoutConfiguration();
  }
}


--- RadioDataSet.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioDataSet
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public sealed class RadioDataSet
  {
    public byte? RSSI_Min { get; private set; }

    public byte? RSSI_Max { get; private set; }

    public RadioPacket LastRadioPacket { get; private set; }

    public int PacketsCount { get; private set; }

    public SortedList<long, SortedList<DateTime, ReadingValue>> Data { get; private set; }

    public int? RSSI_dBm_Average
    {
      get
      {
        return this.RSSI_Average.HasValue ? new int?(Util.RssiToRssi_dBm(this.RSSI_Average.Value)) : new int?();
      }
    }

    public byte? RSSI_Average
    {
      get
      {
        byte? rssiAverage;
        int num1;
        if (this.RSSI_Min.HasValue)
        {
          rssiAverage = this.RSSI_Max;
          num1 = rssiAverage.HasValue ? 1 : 0;
        }
        else
          num1 = 0;
        if (num1 != 0)
        {
          rssiAverage = this.RSSI_Max;
          byte num2 = rssiAverage.Value;
          rssiAverage = this.RSSI_Min;
          byte num3 = rssiAverage.Value;
          return (int) num2 > (int) num3 ? new byte?((byte) ((uint) num3 + (uint) (((int) num2 - (int) num3) / 2))) : new byte?((byte) ((uint) num2 + (uint) (((int) num3 - (int) num2) / 2)));
        }
        rssiAverage = new byte?();
        return rssiAverage;
      }
    }

    internal bool UpdateData(RadioPacket packet)
    {
      if (packet == null)
        return false;
      this.LastRadioPacket = packet;
      ++this.PacketsCount;
      byte? nullable1 = this.RSSI_Max;
      int num;
      if (nullable1.HasValue)
      {
        nullable1 = this.RSSI_Min;
        num = nullable1.HasValue ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        nullable1 = this.RSSI_Max;
        int? nullable2 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        nullable1 = packet.RSSI;
        int? nullable3 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        if (nullable2.GetValueOrDefault() < nullable3.GetValueOrDefault() & nullable2.HasValue & nullable3.HasValue)
          this.RSSI_Max = packet.RSSI;
        nullable1 = this.RSSI_Min;
        nullable3 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        nullable1 = packet.RSSI;
        nullable2 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
        if (nullable3.GetValueOrDefault() > nullable2.GetValueOrDefault() & nullable3.HasValue & nullable2.HasValue)
          this.RSSI_Min = packet.RSSI;
      }
      else
      {
        this.RSSI_Max = packet.RSSI;
        this.RSSI_Min = packet.RSSI;
      }
      packet.RSSI = this.RSSI_Average;
      this.Data = packet.Merge(this.Data);
      return this.Data != null;
    }

    public bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      List<long> filter = (List<long>) null;
      if (valueList != null && valueList.Count > 0)
      {
        filter = new List<long>();
        filter.AddRange((IEnumerable<long>) valueList.Keys);
      }
      valueList = ValueIdent.FilterMeterValues(this.Data, filter);
      ValueIdent.CleanUpEmptyValueIdents(valueList);
      return true;
    }
  }
}


--- RadioDevice.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioDevice
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public sealed class RadioDevice : BusDevice
  {
    private RadioList walkByList;
    public RadioPacket Device;
    public List<DeviceInfo> DeviceInfoList;

    public RadioDataSet ReceivedRadioDataSet
    {
      get
      {
        if (this.walkByList == null || this.walkByList.ReceivedData == null)
          return (RadioDataSet) null;
        long key = Util.ToLong((object) this.Info.MeterNumber);
        return !this.walkByList.ReceivedData.ContainsKey(key) ? (RadioDataSet) null : this.walkByList.ReceivedData[key];
      }
    }

    public RadioDevice(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.walkByList = TheBus.MyDeviceList as RadioList;
    }

    public RadioDevice(DeviceCollectorFunctions TheBus, RadioPacket packet)
      : base(TheBus)
    {
      this.walkByList = TheBus.MyDeviceList as RadioList;
      this.Device = packet;
      this.DeviceType = packet.DeviceType;
      this.DeviceInfoList = new List<DeviceInfo>();
    }
  }
}


--- RadioDevicePacket.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioDevicePacket
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  [Serializable]
  public abstract class RadioDevicePacket : RadioPacket
  {
    private static Logger logger = LogManager.GetLogger(nameof (RadioDevicePacket));
    public const long MinoConnectTestFunkId = 0;

    public bool IsManipulated { get; protected set; }

    public bool IsDeviceError { get; protected set; }

    public DateTime TimePoint { get; protected set; }

    public long GetValueIdentOfDueDateValue(bool scaleFactorAreAvailable, InputUnitsIndex? unit)
    {
      return ValueIdent.GetValueIdForValueEnum(this.GetValueIdPart_PhysicalQuantity(scaleFactorAreAvailable, unit), this.GetValueIdPart_MeterType(), ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.DueDate, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
    }

    public long GetValueIdentOfCurrentValue(bool scaleFactorAreAvailable, InputUnitsIndex? unit)
    {
      return ValueIdent.GetValueIdForValueEnum(this.GetValueIdPart_PhysicalQuantity(scaleFactorAreAvailable, unit), this.GetValueIdPart_MeterType(), ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
    }

    public long GetValueIdentOfHalfMonthValue(bool scaleFactorAreAvailable, InputUnitsIndex? unit)
    {
      return ValueIdent.GetValueIdForValueEnum(this.GetValueIdPart_PhysicalQuantity(scaleFactorAreAvailable, unit), this.GetValueIdPart_MeterType(), ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.HalfMonth, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
    }

    public long GetValueIdentOfMonthValue(bool scaleFactorAreAvailable, InputUnitsIndex? unit)
    {
      return ValueIdent.GetValueIdForValueEnum(this.GetValueIdPart_PhysicalQuantity(scaleFactorAreAvailable, unit), this.GetValueIdPart_MeterType(), ValueIdent.ValueIdPart_Calculation.Accumulated, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.Month, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
    }

    public long GetValueIdentOfSignalStrengthValue()
    {
      return ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.SignalStrength, this.GetValueIdPart_MeterType(), ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
    }

    public ValueIdent.ValueIdPart_MeterType GetValueIdPart_MeterType()
    {
      ValueIdent.ValueIdPart_MeterType valueIdPartMeterType = ValueIdent.ValueIdPart_MeterType.Any;
      switch (this.DeviceType)
      {
        case DeviceTypes.ZR_Serie1:
        case DeviceTypes.ZR_Serie2:
        case DeviceTypes.ZR_Serie3:
          valueIdPartMeterType = ValueIdent.ValueIdPart_MeterType.ChangeOverHeat;
          break;
        case DeviceTypes.EHCA_M5:
        case DeviceTypes.EHCA_M5p:
        case DeviceTypes.EHCA_M6:
        case DeviceTypes.EHCA_M6_Radio3:
          valueIdPartMeterType = ValueIdent.ValueIdPart_MeterType.HeatCostAllocator;
          break;
        case DeviceTypes.MinotelContact:
        case DeviceTypes.MinotelContactRadio3:
        case DeviceTypes.PDC:
          valueIdPartMeterType = ValueIdent.ValueIdPart_MeterType.PulseCounter;
          break;
        case DeviceTypes.Aqua:
        case DeviceTypes.AquaMicro:
        case DeviceTypes.AquaMicroRadio3:
        case DeviceTypes.ISF:
        case DeviceTypes.EDC:
          valueIdPartMeterType = ValueIdent.ValueIdPart_MeterType.Water;
          break;
        case DeviceTypes.SmokeDetector:
          valueIdPartMeterType = ValueIdent.ValueIdPart_MeterType.SmokeDetector;
          break;
        case DeviceTypes.TemperatureSensor:
          valueIdPartMeterType = ValueIdent.ValueIdPart_MeterType.Thermometer;
          break;
        case DeviceTypes.HumiditySensor:
          valueIdPartMeterType = ValueIdent.ValueIdPart_MeterType.Hygrometer;
          break;
      }
      return valueIdPartMeterType;
    }

    public ValueIdent.ValueIdPart_PhysicalQuantity GetValueIdPart_PhysicalQuantity(
      bool scaleFactorAreAvailable,
      InputUnitsIndex? unit)
    {
      switch (this.DeviceType)
      {
        case DeviceTypes.EHCA_M5:
        case DeviceTypes.EHCA_M5p:
        case DeviceTypes.EHCA_M6:
        case DeviceTypes.EHCA_M6_Radio3:
          return scaleFactorAreAvailable ? ValueIdent.ValueIdPart_PhysicalQuantity.HCA_Weighted : ValueIdent.ValueIdPart_PhysicalQuantity.HCA;
        case DeviceTypes.MinotelContact:
        case DeviceTypes.MinotelContactRadio3:
        case DeviceTypes.Aqua:
        case DeviceTypes.AquaMicro:
        case DeviceTypes.AquaMicroRadio3:
        case DeviceTypes.ISF:
        case DeviceTypes.EDC:
        case DeviceTypes.PDC:
          if (!unit.HasValue)
            return ValueIdent.ValueIdPart_PhysicalQuantity.Pulse;
          switch (unit.Value)
          {
            case InputUnitsIndex.ImpUnit_0_000:
            case InputUnitsIndex.ImpUnit_0_00:
            case InputUnitsIndex.ImpUnit_0_0:
            case InputUnitsIndex.ImpUnit_0:
              return ValueIdent.ValueIdPart_PhysicalQuantity.Pulse;
            case InputUnitsIndex.ImpUnit_0_000Wh:
            case InputUnitsIndex.ImpUnit_0_00Wh:
            case InputUnitsIndex.ImpUnit_0_0Wh:
            case InputUnitsIndex.ImpUnit_0Wh:
            case InputUnitsIndex.ImpUnit_0_000kWh:
            case InputUnitsIndex.ImpUnit_0_00kWh:
            case InputUnitsIndex.ImpUnit_0_0kWh:
            case InputUnitsIndex.ImpUnit_0kWh:
            case InputUnitsIndex.ImpUnit_0_000MWh:
            case InputUnitsIndex.ImpUnit_0_00MWh:
            case InputUnitsIndex.ImpUnit_0_0MWh:
            case InputUnitsIndex.ImpUnit_0MWh:
            case InputUnitsIndex.ImpUnit_0_000GWh:
            case InputUnitsIndex.ImpUnit_0_00GWh:
            case InputUnitsIndex.ImpUnit_0_0GWh:
            case InputUnitsIndex.ImpUnit_0GWh:
              return ValueIdent.ValueIdPart_PhysicalQuantity.Power;
            case InputUnitsIndex.ImpUnit_0_000J:
            case InputUnitsIndex.ImpUnit_0_00J:
            case InputUnitsIndex.ImpUnit_0_0J:
            case InputUnitsIndex.ImpUnit_0J:
            case InputUnitsIndex.ImpUnit_0_000kJ:
            case InputUnitsIndex.ImpUnit_0_00kJ:
            case InputUnitsIndex.ImpUnit_0_0kJ:
            case InputUnitsIndex.ImpUnit_0kJ:
            case InputUnitsIndex.ImpUnit_0_000MJ:
            case InputUnitsIndex.ImpUnit_0_00MJ:
            case InputUnitsIndex.ImpUnit_0_0MJ:
            case InputUnitsIndex.ImpUnit_0MJ:
            case InputUnitsIndex.ImpUnit_0_000GJ:
            case InputUnitsIndex.ImpUnit_0_00GJ:
            case InputUnitsIndex.ImpUnit_0_0GJ:
            case InputUnitsIndex.ImpUnit_0GJ:
              return ValueIdent.ValueIdPart_PhysicalQuantity.Energy;
            case InputUnitsIndex.ImpUnit_0_000L:
            case InputUnitsIndex.ImpUnit_0_00L:
            case InputUnitsIndex.ImpUnit_0_0L:
            case InputUnitsIndex.ImpUnit_0L:
            case InputUnitsIndex.ImpUnit_0_000qm:
            case InputUnitsIndex.ImpUnit_0_00qm:
            case InputUnitsIndex.ImpUnit_0_0qm:
            case InputUnitsIndex.ImpUnit_0qm:
              return ValueIdent.ValueIdPart_PhysicalQuantity.Volume;
          }
          break;
        case DeviceTypes.SmokeDetector:
          return ValueIdent.ValueIdPart_PhysicalQuantity.StatusNumber;
        case DeviceTypes.TemperatureSensor:
          return ValueIdent.ValueIdPart_PhysicalQuantity.Temperature;
        case DeviceTypes.HumiditySensor:
          return ValueIdent.ValueIdPart_PhysicalQuantity.Percent;
      }
      return ValueIdent.ValueIdPart_PhysicalQuantity.Any;
    }

    public Decimal? GetDecimalValue(byte byte1, byte byte2)
    {
      if (byte1 == byte.MaxValue && byte2 == byte.MaxValue)
        return new Decimal?();
      if (byte1 == (byte) 0 && byte2 == (byte) 0)
        return new Decimal?(0M);
      if (this.DeviceType == DeviceTypes.HumiditySensor || this.DeviceType == DeviceTypes.TemperatureSensor)
        return new Decimal?((Decimal) (short) ((int) (short) ((int) byte1 << 8) | (int) byte2) / 10M);
      long num1 = (long) ((int) byte1 << 8) | (long) byte2;
      byte num2 = (byte) ((ulong) num1 & 3UL);
      Decimal num3 = (Decimal) (num1 >> 2);
      switch (num2)
      {
        case 0:
          return new Decimal?(num3);
        case 1:
          return new Decimal?(num3 + 0.25M);
        case 2:
          return new Decimal?(num3 + 0.50M);
        case 3:
          return new Decimal?(num3 + 0.75M);
        default:
          throw new NotImplementedException();
      }
    }

    protected Decimal? GetDecimalValueFromBCD(byte byte1, byte byte2, byte byte3)
    {
      if (byte1 == byte.MaxValue && byte2 == byte.MaxValue && byte3 == byte.MaxValue)
        return new Decimal?();
      return byte1 == (byte) 0 && byte2 == (byte) 0 && byte3 == (byte) 0 ? new Decimal?(0M) : new Decimal?((Decimal) Util.ConvertBcdInt64ToInt64((long) byte1 << 16 | (long) byte2 << 8 | (long) byte3));
    }

    protected Decimal? GetDecimalValueFromBCD(byte byte1, byte byte2, byte byte3, byte byte4)
    {
      if (byte1 == byte.MaxValue && byte2 == byte.MaxValue && byte3 == byte.MaxValue && byte4 == byte.MaxValue)
        return new Decimal?();
      return byte1 == (byte) 0 && byte2 == (byte) 0 && byte3 == (byte) 0 && byte4 == (byte) 0 ? new Decimal?(0M) : new Decimal?((Decimal) Util.ConvertBcdInt64ToInt64((long) byte1 << 24 | (long) byte2 << 16 | (long) byte3 << 8 | (long) byte4));
    }

    protected static void MergeMeterValues(
      SortedList<long, SortedList<DateTime, ReadingValue>> oldMeterValues,
      SortedList<long, SortedList<DateTime, ReadingValue>> newMeterValues,
      long valueIdent)
    {
      if (!newMeterValues.ContainsKey(valueIdent))
        return;
      SortedList<DateTime, ReadingValue> newMeterValue = newMeterValues[valueIdent];
      if (oldMeterValues.ContainsKey(valueIdent))
      {
        SortedList<DateTime, ReadingValue> oldMeterValue = oldMeterValues[valueIdent];
        for (int index = 0; index < newMeterValue.Count; ++index)
        {
          DateTime key = newMeterValue.Keys[index];
          ReadingValue readingValue = newMeterValue.Values[index];
          if (oldMeterValue.ContainsKey(key))
            oldMeterValue[key] = readingValue;
          else
            oldMeterValue.Add(key, readingValue);
        }
      }
      else
        oldMeterValues.Add(valueIdent, newMeterValue);
    }
  }
}


--- RadioList.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioList
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  internal class RadioList : DeviceList
  {
    private static Logger logger = LogManager.GetLogger(nameof (RadioList));
    public List<long> ExpectedDevices;
    private int countOfFoundExpectedDevices;
    private int countOfFoundUnexpectedDevices;

    public bool HasAllExpectedDevicesFound
    {
      get
      {
        return this.ExpectedDevices.Count > 0 && this.countOfFoundExpectedDevices == this.ExpectedDevices.Count;
      }
    }

    public DeviceInfo DeviceInfoOfLastReceivedPacket { get; set; }

    public Dictionary<long, RadioDataSet> ReceivedData { get; private set; }

    public RadioList(DeviceCollectorFunctions busDevice)
    {
      this.MyBus = busDevice;
      this.bus = new ArrayList();
      this.FaultyDevices = new List<MBusDevice>();
      this.ExpectedDevices = new List<long>();
      this.ReceivedData = new Dictionary<long, RadioDataSet>();
    }

    public List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      List<GlobalDeviceId> globalDeviceIdList = new List<GlobalDeviceId>();
      foreach (KeyValuePair<long, RadioDataSet> keyValuePair in this.ReceivedData)
      {
        GlobalDeviceId globalDeviceId = new GlobalDeviceId();
        globalDeviceId.Serialnumber = keyValuePair.Key.ToString();
        if (keyValuePair.Value.LastRadioPacket != null)
        {
          globalDeviceId.DeviceTypeName = keyValuePair.Value.LastRadioPacket.DeviceType.ToString();
          globalDeviceId.MeterType = ValueIdent.ConvertToMeterType(keyValuePair.Value.LastRadioPacket.DeviceType);
        }
        globalDeviceIdList.Add(globalDeviceId);
      }
      return globalDeviceIdList;
    }

    internal override bool SelectDeviceBySerialNumber(string SerialNumber)
    {
      long funkId = Util.ToLong((object) SerialNumber);
      if (this.bus.Count == 0)
        return false;
      this.SelectedDevice = (BusDevice) this.Find(funkId);
      return this.SelectedDevice != null;
    }

    internal override bool DeleteSelectedDevice()
    {
      if (this.SelectedDevice == null)
        return false;
      long funkId = ((RadioDevice) this.SelectedDevice).Device.FunkId;
      int index;
      if (this.Find(funkId, out index) != null && index != -1)
      {
        this.bus.RemoveAt(index);
        this.ReceivedData.Remove(funkId);
      }
      return true;
    }

    internal override string GetAllParameters()
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (object bu in this.bus)
      {
        foreach (DeviceInfo deviceInfo in (bu as RadioDevice).DeviceInfoList)
          stringBuilder.Append(deviceInfo.GetZDFParameterString()).Append(ZR_Constants.SystemNewLine);
      }
      return stringBuilder.ToString();
    }

    internal override bool AddDevice(DeviceTypes t, bool select)
    {
      this.bus.Add((object) new RadioDevice(this.MyBus));
      return true;
    }

    internal bool ReadRadio()
    {
      if (this.MyBus.RadioReader == null)
        return false;
      if (this.MyBus.MyBusMode == BusMode.MinomatRadioTest)
      {
        if (this.MyBus.DaKonId == null || string.IsNullOrEmpty(this.MyBus.DaKonId.Trim()))
          return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Invalid NetworkID!", RadioList.logger);
        long funkId;
        try
        {
          funkId = long.Parse(this.MyBus.DaKonId);
        }
        catch
        {
          return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Invalid NetworkID!", RadioList.logger);
        }
        this.ClearExpectedDevices();
        if (!this.AddExpectedDevice(funkId))
          return false;
      }
      this.ClearReceivedPackets();
      this.MyBus.RadioReader.OnPacketReceived += new EventHandler<RadioPacket>(this.RadioReader_OnPacketReceived);
      try
      {
        if (this.MyBus.RadioReader.Read() == null)
          return false;
      }
      finally
      {
        this.MyBus.RadioReader.OnPacketReceived -= new EventHandler<RadioPacket>(this.RadioReader_OnPacketReceived);
      }
      return true;
    }

    private void RadioReader_OnPacketReceived(object sender, RadioPacket e)
    {
      this.AddRadioDevice(e);
    }

    internal void AddPacket(RadioPacket packet)
    {
      if (!this.ReceivedData.ContainsKey(packet.FunkId))
      {
        this.ReceivedData.Add(packet.FunkId, new RadioDataSet());
        this.AddRadioDevice(packet);
        if (this.ExpectedDevices.Contains(packet.FunkId))
          ++this.countOfFoundExpectedDevices;
        else
          ++this.countOfFoundUnexpectedDevices;
        if (this.ExpectedDevices.Count > 0)
        {
          GMM_EventArgs e = new GMM_EventArgs(GMM_EventArgs.MessageType.MessageAndProgressPercentage);
          e.EventMessage = "Found new " + packet.DeviceType.ToString() + " device! ID: " + packet.FunkId.ToString();
          e.deviceListStatus.FoundExpectedDevices = this.countOfFoundExpectedDevices;
          e.deviceListStatus.FoundUnexpectedDevices = this.countOfFoundUnexpectedDevices;
          e.deviceListStatus.DevicesMissing = this.ExpectedDevices.Count - this.countOfFoundExpectedDevices;
          e.ProgressPercentage = this.GetProgress();
          this.MyBus.SendMessage(e);
          if (RadioList.logger.IsInfoEnabled)
          {
            Logger logger = RadioList.logger;
            string[] strArray = new string[11];
            int num = e.ProgressPercentage;
            strArray[0] = num.ToString();
            strArray[1] = "%\tExpected(";
            strArray[2] = this.countOfFoundExpectedDevices.ToString();
            strArray[3] = "/";
            num = this.ExpectedDevices.Count;
            strArray[4] = num.ToString();
            strArray[5] = ")\tUnexpected(";
            strArray[6] = this.countOfFoundUnexpectedDevices.ToString();
            strArray[7] = ")\t";
            strArray[8] = packet.FunkId.ToString();
            strArray[9] = "\t";
            strArray[10] = packet.DeviceType.ToString();
            string message = string.Concat(strArray);
            logger.Info(message);
          }
        }
      }
      this.ReceivedData[packet.FunkId].UpdateData(packet);
    }

    public int GetProgress() => this.countOfFoundExpectedDevices * 100 / this.ExpectedDevices.Count;

    public void AddRadioDevice(RadioPacket packet)
    {
      DeviceInfo deviceInfo = new DeviceInfo();
      deviceInfo.Manufacturer = "MINOL";
      deviceInfo.LastReadingDate = packet.ReceivedAt;
      deviceInfo.DeviceType = packet.DeviceType;
      deviceInfo.MeterNumber = packet.FunkId.ToString("00000000");
      if (this.MyBus.MyBusMode == BusMode.Radio2)
      {
        RadioPacketRadio2 radioPacketRadio2 = packet as RadioPacketRadio2;
        if (!radioPacketRadio2.IsCrcOk)
          return;
        List<DeviceInfo.MBusParamStruct> parameterList1 = deviceInfo.ParameterList;
        DateTime dateTime = SystemValues.DateTimeNow;
        DeviceInfo.MBusParamStruct mbusParamStruct1 = new DeviceInfo.MBusParamStruct("RTIME", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
        parameterList1.Add(mbusParamStruct1);
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", radioPacketRadio2.FunkId.ToString()));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MAN", deviceInfo.Manufacturer));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("GEN", "2"));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MED", radioPacketRadio2.DeviceType.ToString()));
        int? rssiDBm = radioPacketRadio2.RSSI_dBm;
        if (rssiDBm.HasValue)
        {
          List<DeviceInfo.MBusParamStruct> parameterList2 = deviceInfo.ParameterList;
          rssiDBm = radioPacketRadio2.RSSI_dBm;
          DeviceInfo.MBusParamStruct mbusParamStruct2 = new DeviceInfo.MBusParamStruct("RSSI_dBm", rssiDBm.Value.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
          parameterList2.Add(mbusParamStruct2);
        }
        else
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("RSSI_dBm", "NULL"));
        List<DeviceInfo.MBusParamStruct> parameterList3 = deviceInfo.ParameterList;
        dateTime = radioPacketRadio2.TimePoint;
        DeviceInfo.MBusParamStruct mbusParamStruct3 = new DeviceInfo.MBusParamStruct("TimePoint", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
        parameterList3.Add(mbusParamStruct3);
        Decimal num;
        if (radioPacketRadio2.CurrentValue.HasValue)
        {
          List<DeviceInfo.MBusParamStruct> parameterList4 = deviceInfo.ParameterList;
          num = radioPacketRadio2.CurrentValue.Value;
          DeviceInfo.MBusParamStruct mbusParamStruct4 = new DeviceInfo.MBusParamStruct("CurrentValue", num.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
          parameterList4.Add(mbusParamStruct4);
        }
        else
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("CurrentValue", "NULL"));
        if (radioPacketRadio2.DueDate != DateTime.MinValue)
        {
          List<DeviceInfo.MBusParamStruct> parameterList5 = deviceInfo.ParameterList;
          dateTime = radioPacketRadio2.DueDate;
          DeviceInfo.MBusParamStruct mbusParamStruct5 = new DeviceInfo.MBusParamStruct("DueDate", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
          parameterList5.Add(mbusParamStruct5);
        }
        else
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("DueDate", "NULL"));
        if (radioPacketRadio2.DueDateValue.HasValue)
        {
          List<DeviceInfo.MBusParamStruct> parameterList6 = deviceInfo.ParameterList;
          num = radioPacketRadio2.DueDateValue.Value;
          DeviceInfo.MBusParamStruct mbusParamStruct6 = new DeviceInfo.MBusParamStruct("DueDateValue", num.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
          parameterList6.Add(mbusParamStruct6);
        }
        else
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("DueDateValue", "NULL"));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MonthIndex", radioPacketRadio2.MonthIndex.ToString()));
        Decimal? dynamicValue = radioPacketRadio2.DynamicValue;
        if (dynamicValue.HasValue)
        {
          List<DeviceInfo.MBusParamStruct> parameterList7 = deviceInfo.ParameterList;
          dateTime = radioPacketRadio2.DynamicDate;
          DeviceInfo.MBusParamStruct mbusParamStruct7 = new DeviceInfo.MBusParamStruct("DynamicDate", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
          parameterList7.Add(mbusParamStruct7);
          List<DeviceInfo.MBusParamStruct> parameterList8 = deviceInfo.ParameterList;
          dynamicValue = radioPacketRadio2.DynamicValue;
          num = dynamicValue.Value;
          DeviceInfo.MBusParamStruct mbusParamStruct8 = new DeviceInfo.MBusParamStruct("DynamicValue", num.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
          parameterList8.Add(mbusParamStruct8);
        }
        if (radioPacketRadio2.IsHeatCostAllocator)
        {
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SensorMode", radioPacketRadio2.SensorMode.ToString()));
          List<DeviceInfo.MBusParamStruct> parameterList9 = deviceInfo.ParameterList;
          num = radioPacketRadio2.Exponent2F;
          DeviceInfo.MBusParamStruct mbusParamStruct9 = new DeviceInfo.MBusParamStruct("Exponent2F", num.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
          parameterList9.Add(mbusParamStruct9);
          List<DeviceInfo.MBusParamStruct> parameterList10 = deviceInfo.ParameterList;
          num = (Decimal) radioPacketRadio2.K / 1000M;
          DeviceInfo.MBusParamStruct mbusParamStruct10 = new DeviceInfo.MBusParamStruct("HCA_Factor_Weighting", num.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
          parameterList10.Add(mbusParamStruct10);
        }
        else
        {
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("ScaleFactor", radioPacketRadio2.ScaleFactor.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat)));
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Unit", radioPacketRadio2.Unit.ToString()));
        }
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsDeviceError", radioPacketRadio2.IsDeviceError.ToString()));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsManipulated", radioPacketRadio2.IsManipulated.ToString()));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsMeasurementEnabled", radioPacketRadio2.IsMeasurementEnabled.ToString()));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsSummerTime", radioPacketRadio2.IsSummerTime.ToString()));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MeasurementError", radioPacketRadio2.MeasurementError.ToString()));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MCT", radioPacketRadio2.MCT.ToString()));
      }
      else if (this.MyBus.MyBusMode == BusMode.Radio4)
      {
        RadioPacketRadio3 radioPacketRadio3 = packet as RadioPacketRadio3;
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("RTIME", SystemValues.DateTimeNow.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern)));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", radioPacketRadio3.FunkId.ToString()));
      }
      else if (this.MyBus.MyBusMode == BusMode.Radio3 || this.MyBus.MyBusMode == BusMode.Radio3_868_95_RUSSIA)
      {
        RadioPacketRadio3 radioPacketRadio3 = packet as RadioPacketRadio3;
        if (!radioPacketRadio3.IsCrcOk)
          return;
        List<DeviceInfo.MBusParamStruct> parameterList11 = deviceInfo.ParameterList;
        DateTime dateTime = SystemValues.DateTimeNow;
        DeviceInfo.MBusParamStruct mbusParamStruct11 = new DeviceInfo.MBusParamStruct("RTIME", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
        parameterList11.Add(mbusParamStruct11);
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", radioPacketRadio3.FunkId.ToString()));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MAN", deviceInfo.Manufacturer));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("GEN", "3"));
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MED", radioPacketRadio3.DeviceType.ToString()));
        int? nullable = radioPacketRadio3.RSSI_dBm;
        int num1;
        if (nullable.HasValue)
        {
          List<DeviceInfo.MBusParamStruct> parameterList12 = deviceInfo.ParameterList;
          nullable = radioPacketRadio3.RSSI_dBm;
          num1 = nullable.Value;
          DeviceInfo.MBusParamStruct mbusParamStruct12 = new DeviceInfo.MBusParamStruct("RSSI_dBm", num1.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
          parameterList12.Add(mbusParamStruct12);
        }
        else
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("RSSI_dBm", "NULL"));
        if (radioPacketRadio3.RadioTestPacket != null)
        {
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("TestPacketVersion", radioPacketRadio3.RadioTestPacket.TestPacketVersion.ToString()));
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MeterID", radioPacketRadio3.RadioTestPacket.MeterID.ToString()));
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SapNumber", radioPacketRadio3.RadioTestPacket.SapNumber.ToString()));
        }
        else
        {
          List<DeviceInfo.MBusParamStruct> parameterList13 = deviceInfo.ParameterList;
          dateTime = radioPacketRadio3.TimePoint;
          DeviceInfo.MBusParamStruct mbusParamStruct13 = new DeviceInfo.MBusParamStruct("TimePoint", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
          parameterList13.Add(mbusParamStruct13);
          if (radioPacketRadio3.DeviceType == DeviceTypes.SmokeDetector)
          {
            DateTime? ofFirstActivation = radioPacketRadio3.SmokeDetector.DateOfFirstActivation;
            if (ofFirstActivation.HasValue)
            {
              List<DeviceInfo.MBusParamStruct> parameterList14 = deviceInfo.ParameterList;
              ofFirstActivation = radioPacketRadio3.SmokeDetector.DateOfFirstActivation;
              dateTime = ofFirstActivation.Value;
              DeviceInfo.MBusParamStruct mbusParamStruct14 = new DeviceInfo.MBusParamStruct("DateOfFirstActivation", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
              parameterList14.Add(mbusParamStruct14);
            }
            else
              deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("DateOfFirstActivation", "NULL"));
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsDeviceError", radioPacketRadio3.IsDeviceError.ToString()));
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsManipulated", radioPacketRadio3.IsManipulated.ToString()));
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsAccuDefect", radioPacketRadio3.IsAccuDefect.ToString()));
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("PacketNr", radioPacketRadio3.PacketNr.ToString()));
            SmokeDetectorEvent?[] monthlyEvents = radioPacketRadio3.SmokeDetector.MonthlyEvents;
            for (int index = 0; index < monthlyEvents.Length; ++index)
            {
              if (monthlyEvents[index].HasValue)
                deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("M[" + index.ToString() + "]", monthlyEvents[index].Value.ToString()));
            }
            SmokeDetectorEvent?[] dailyEvents = radioPacketRadio3.SmokeDetector.DailyEvents;
            for (int index = 0; index < dailyEvents.Length; ++index)
            {
              if (dailyEvents[index].HasValue)
                deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("D[" + index.ToString() + "]", dailyEvents[index].Value.ToString()));
            }
          }
          else if (radioPacketRadio3.DeviceType == DeviceTypes.TemperatureSensor || radioPacketRadio3.DeviceType == DeviceTypes.HumiditySensor)
          {
            if (radioPacketRadio3.DeviceType == DeviceTypes.HumiditySensor)
              deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Unit", "% "));
            else
              deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Unit", radioPacketRadio3.TemperaturUnit.ToString()));
            Decimal num2;
            if (radioPacketRadio3.CurrentValue.HasValue)
            {
              List<DeviceInfo.MBusParamStruct> parameterList15 = deviceInfo.ParameterList;
              num2 = radioPacketRadio3.CurrentValue.Value;
              DeviceInfo.MBusParamStruct mbusParamStruct15 = new DeviceInfo.MBusParamStruct("CurrentValue", num2.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
              parameterList15.Add(mbusParamStruct15);
            }
            else
              deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("CurrentValue", "NULL"));
            if (radioPacketRadio3.DeviceErrorDate.HasValue)
            {
              List<DeviceInfo.MBusParamStruct> parameterList16 = deviceInfo.ParameterList;
              dateTime = radioPacketRadio3.DeviceErrorDate.Value;
              DeviceInfo.MBusParamStruct mbusParamStruct16 = new DeviceInfo.MBusParamStruct("DeviceErrorDate", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
              parameterList16.Add(mbusParamStruct16);
            }
            if (radioPacketRadio3.ManipulationDate.HasValue)
            {
              List<DeviceInfo.MBusParamStruct> parameterList17 = deviceInfo.ParameterList;
              dateTime = radioPacketRadio3.ManipulationDate.Value;
              DeviceInfo.MBusParamStruct mbusParamStruct17 = new DeviceInfo.MBusParamStruct("ManipulationDate", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
              parameterList17.Add(mbusParamStruct17);
            }
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("PacketNr", radioPacketRadio3.PacketNr.ToString()));
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsDeviceError", radioPacketRadio3.IsDeviceError.ToString()));
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsManipulated", radioPacketRadio3.IsManipulated.ToString()));
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsAccuDefect", radioPacketRadio3.IsAccuDefect.ToString()));
            byte? scenarioNr = radioPacketRadio3.ScenarioNr;
            if (scenarioNr.HasValue)
            {
              List<DeviceInfo.MBusParamStruct> parameterList18 = deviceInfo.ParameterList;
              scenarioNr = radioPacketRadio3.ScenarioNr;
              DeviceInfo.MBusParamStruct mbusParamStruct18 = new DeviceInfo.MBusParamStruct("ScenarioNr", scenarioNr.ToString());
              parameterList18.Add(mbusParamStruct18);
            }
            else
              deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("ScenarioNr", "NULL"));
            if (radioPacketRadio3.Months != null)
            {
              foreach (KeyValuePair<int, RadioPacketRadio3.MonthValue> month in (Dictionary<int, RadioPacketRadio3.MonthValue>) radioPacketRadio3.Months)
              {
                if (month.Value.Value.HasValue)
                {
                  List<DeviceInfo.MBusParamStruct> parameterList19 = deviceInfo.ParameterList;
                  num1 = month.Key;
                  string DefStr1 = "MonthDate[" + num1.ToString() + "]";
                  dateTime = month.Value.TimePoint;
                  string ValStr1 = dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern);
                  DeviceInfo.MBusParamStruct mbusParamStruct19 = new DeviceInfo.MBusParamStruct(DefStr1, ValStr1);
                  parameterList19.Add(mbusParamStruct19);
                  List<DeviceInfo.MBusParamStruct> parameterList20 = deviceInfo.ParameterList;
                  num1 = month.Key;
                  string DefStr2 = "MonthValue[" + num1.ToString() + "]";
                  num2 = month.Value.Value.Value;
                  string ValStr2 = num2.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat);
                  DeviceInfo.MBusParamStruct mbusParamStruct20 = new DeviceInfo.MBusParamStruct(DefStr2, ValStr2);
                  parameterList20.Add(mbusParamStruct20);
                }
              }
            }
          }
          else
          {
            byte? scenarioNr = radioPacketRadio3.ScenarioNr;
            nullable = scenarioNr.HasValue ? new int?((int) scenarioNr.GetValueOrDefault()) : new int?();
            num1 = 5;
            int num3;
            if (!(nullable.GetValueOrDefault() == num1 & nullable.HasValue))
            {
              scenarioNr = radioPacketRadio3.ScenarioNr;
              nullable = scenarioNr.HasValue ? new int?((int) scenarioNr.GetValueOrDefault()) : new int?();
              num1 = 6;
              num3 = nullable.GetValueOrDefault() == num1 & nullable.HasValue ? 1 : 0;
            }
            else
              num3 = 1;
            Decimal num4;
            if (num3 != 0)
            {
              if (radioPacketRadio3.IsHeatCostAllocator)
              {
                deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Scale", radioPacketRadio3.Scale.ToString()));
                deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SensorMode", radioPacketRadio3.SensorMode.ToString()));
                if (radioPacketRadio3.K.HasValue)
                {
                  List<DeviceInfo.MBusParamStruct> parameterList21 = deviceInfo.ParameterList;
                  num4 = (Decimal) radioPacketRadio3.K.Value / 1000M;
                  DeviceInfo.MBusParamStruct mbusParamStruct21 = new DeviceInfo.MBusParamStruct("K", num4.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
                  parameterList21.Add(mbusParamStruct21);
                }
              }
              else if (radioPacketRadio3.K.HasValue)
              {
                deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("ScaleFactor", radioPacketRadio3.ScaleFactor.Value.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat)));
                deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Unit", radioPacketRadio3.Unit.ToString()));
              }
              if (radioPacketRadio3.CurrentValue.HasValue)
              {
                List<DeviceInfo.MBusParamStruct> parameterList22 = deviceInfo.ParameterList;
                num4 = radioPacketRadio3.CurrentValue.Value;
                DeviceInfo.MBusParamStruct mbusParamStruct22 = new DeviceInfo.MBusParamStruct("CurrentValue", num4.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
                parameterList22.Add(mbusParamStruct22);
              }
              else
                deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("CurrentValue", "NULL"));
              if (radioPacketRadio3.ResetDate.HasValue)
              {
                List<DeviceInfo.MBusParamStruct> parameterList23 = deviceInfo.ParameterList;
                dateTime = radioPacketRadio3.ResetDate.Value;
                DeviceInfo.MBusParamStruct mbusParamStruct23 = new DeviceInfo.MBusParamStruct("ResetDate", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
                parameterList23.Add(mbusParamStruct23);
              }
            }
            else
            {
              if (radioPacketRadio3.DueDate.HasValue)
              {
                List<DeviceInfo.MBusParamStruct> parameterList24 = deviceInfo.ParameterList;
                dateTime = radioPacketRadio3.DueDate.Value;
                DeviceInfo.MBusParamStruct mbusParamStruct24 = new DeviceInfo.MBusParamStruct("DueDate", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
                parameterList24.Add(mbusParamStruct24);
              }
              else
                deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("DueDate", "NULL"));
              if (radioPacketRadio3.DueDateValue.HasValue)
              {
                List<DeviceInfo.MBusParamStruct> parameterList25 = deviceInfo.ParameterList;
                num4 = radioPacketRadio3.DueDateValue.Value;
                DeviceInfo.MBusParamStruct mbusParamStruct25 = new DeviceInfo.MBusParamStruct("DueDateValue", num4.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat));
                parameterList25.Add(mbusParamStruct25);
              }
              else
                deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("DueDateValue", "NULL"));
            }
            if (radioPacketRadio3.DeviceErrorDate.HasValue)
            {
              List<DeviceInfo.MBusParamStruct> parameterList26 = deviceInfo.ParameterList;
              dateTime = radioPacketRadio3.DeviceErrorDate.Value;
              DeviceInfo.MBusParamStruct mbusParamStruct26 = new DeviceInfo.MBusParamStruct("DeviceErrorDate", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
              parameterList26.Add(mbusParamStruct26);
            }
            if (radioPacketRadio3.ManipulationDate.HasValue)
            {
              List<DeviceInfo.MBusParamStruct> parameterList27 = deviceInfo.ParameterList;
              dateTime = radioPacketRadio3.ManipulationDate.Value;
              DeviceInfo.MBusParamStruct mbusParamStruct27 = new DeviceInfo.MBusParamStruct("ManipulationDate", dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern));
              parameterList27.Add(mbusParamStruct27);
            }
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsDeviceError", radioPacketRadio3.IsDeviceError.ToString()));
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsManipulated", radioPacketRadio3.IsManipulated.ToString()));
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("IsAccuDefect", radioPacketRadio3.IsAccuDefect.ToString()));
            if (radioPacketRadio3.Months != null)
            {
              foreach (KeyValuePair<int, RadioPacketRadio3.MonthValue> month in (Dictionary<int, RadioPacketRadio3.MonthValue>) radioPacketRadio3.Months)
              {
                if (month.Value.Value.HasValue)
                {
                  List<DeviceInfo.MBusParamStruct> parameterList28 = deviceInfo.ParameterList;
                  num1 = month.Key;
                  string DefStr3 = "MonthDate[" + num1.ToString() + "]";
                  dateTime = month.Value.TimePoint;
                  string ValStr3 = dateTime.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern);
                  DeviceInfo.MBusParamStruct mbusParamStruct28 = new DeviceInfo.MBusParamStruct(DefStr3, ValStr3);
                  parameterList28.Add(mbusParamStruct28);
                  List<DeviceInfo.MBusParamStruct> parameterList29 = deviceInfo.ParameterList;
                  num1 = month.Key;
                  string DefStr4 = "MonthValue[" + num1.ToString() + "]";
                  num4 = month.Value.Value.Value;
                  string ValStr4 = num4.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat);
                  DeviceInfo.MBusParamStruct mbusParamStruct29 = new DeviceInfo.MBusParamStruct(DefStr4, ValStr4);
                  parameterList29.Add(mbusParamStruct29);
                }
              }
            }
            scenarioNr = radioPacketRadio3.ScenarioNr;
            if (scenarioNr.HasValue)
            {
              List<DeviceInfo.MBusParamStruct> parameterList30 = deviceInfo.ParameterList;
              scenarioNr = radioPacketRadio3.ScenarioNr;
              DeviceInfo.MBusParamStruct mbusParamStruct30 = new DeviceInfo.MBusParamStruct("ScenarioNr", scenarioNr.ToString());
              parameterList30.Add(mbusParamStruct30);
            }
            else
              deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("ScenarioNr", "NULL"));
          }
        }
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MCT", radioPacketRadio3.MCT.ToString()));
      }
      else if (this.MyBus.MyBusMode == BusMode.wMBusC1A || this.MyBus.MyBusMode == BusMode.wMBusC1B || this.MyBus.MyBusMode == BusMode.wMBusS1 || this.MyBus.MyBusMode == BusMode.wMBusS1M || this.MyBus.MyBusMode == BusMode.wMBusS2 || this.MyBus.MyBusMode == BusMode.wMBusT1 || this.MyBus.MyBusMode == BusMode.wMBusT2_meter || this.MyBus.MyBusMode == BusMode.wMBusT2_other)
      {
        RadioPacketWirelessMBus packetWirelessMbus = packet as RadioPacketWirelessMBus;
        if (!packetWirelessMbus.IsCrcOk)
          return;
        deviceInfo.Manufacturer = packetWirelessMbus.Manufacturer;
        deviceInfo.Medium = packetWirelessMbus.Medium;
        Dictionary<string, string> parametersAsList = ParameterService.GetAllParametersAsList(packetWirelessMbus.ZDF, ';');
        if (parametersAsList != null)
        {
          foreach (KeyValuePair<string, string> keyValuePair in parametersAsList)
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct(keyValuePair.Key, keyValuePair.Value));
        }
        deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MCT", packetWirelessMbus.MCT.ToString()));
      }
      else
      {
        if (this.MyBus.MyBusMode != BusMode.MinomatRadioTest && this.MyBus.MyBusMode != BusMode.RadioMS)
          throw new ArgumentException("MyBus.MyBusMode");
        RadioPacketMinomatV4 radioPacketMinomatV4 = packet as RadioPacketMinomatV4;
        if (radioPacketMinomatV4.Header != null && radioPacketMinomatV4.Data != null)
        {
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("RTIME", SystemValues.DateTimeNow.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern)));
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("NetworkID", radioPacketMinomatV4.FunkId.ToString()));
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Type", radioPacketMinomatV4.Header.Type.ToString()));
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Number", radioPacketMinomatV4.Header.Number.ToString()));
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Parent", radioPacketMinomatV4.Data.Parent.ToString()));
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Hops", radioPacketMinomatV4.Data.Hops.ToString()));
          List<DeviceInfo.MBusParamStruct> parameterList31 = deviceInfo.ParameterList;
          byte num5 = radioPacketMinomatV4.Data.Islot;
          DeviceInfo.MBusParamStruct mbusParamStruct31 = new DeviceInfo.MBusParamStruct("Islot", num5.ToString());
          parameterList31.Add(mbusParamStruct31);
          List<DeviceInfo.MBusParamStruct> parameterList32 = deviceInfo.ParameterList;
          ushort num6 = radioPacketMinomatV4.Data.Offset;
          DeviceInfo.MBusParamStruct mbusParamStruct32 = new DeviceInfo.MBusParamStruct("Offset", num6.ToString());
          parameterList32.Add(mbusParamStruct32);
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Secs", radioPacketMinomatV4.Data.Secs.ToString()));
          List<DeviceInfo.MBusParamStruct> parameterList33 = deviceInfo.ParameterList;
          num6 = radioPacketMinomatV4.Data.Millis;
          DeviceInfo.MBusParamStruct mbusParamStruct33 = new DeviceInfo.MBusParamStruct("Millis", num6.ToString());
          parameterList33.Add(mbusParamStruct33);
          List<DeviceInfo.MBusParamStruct> parameterList34 = deviceInfo.ParameterList;
          num6 = radioPacketMinomatV4.Data.FrameCounter;
          DeviceInfo.MBusParamStruct mbusParamStruct34 = new DeviceInfo.MBusParamStruct("FrameCounter", num6.ToString());
          parameterList34.Add(mbusParamStruct34);
          List<DeviceInfo.MBusParamStruct> parameterList35 = deviceInfo.ParameterList;
          num5 = radioPacketMinomatV4.Data.SetupCounter;
          DeviceInfo.MBusParamStruct mbusParamStruct35 = new DeviceInfo.MBusParamStruct("SetupCounter", num5.ToString());
          parameterList35.Add(mbusParamStruct35);
          List<DeviceInfo.MBusParamStruct> parameterList36 = deviceInfo.ParameterList;
          num5 = radioPacketMinomatV4.Data.SubTreeId;
          DeviceInfo.MBusParamStruct mbusParamStruct36 = new DeviceInfo.MBusParamStruct("SubTreeId", num5.ToString());
          parameterList36.Add(mbusParamStruct36);
          List<DeviceInfo.MBusParamStruct> parameterList37 = deviceInfo.ParameterList;
          num5 = radioPacketMinomatV4.Data.InquiryRssi.Count;
          DeviceInfo.MBusParamStruct mbusParamStruct37 = new DeviceInfo.MBusParamStruct("Rssi.Count", num5.ToString());
          parameterList37.Add(mbusParamStruct37);
          List<DeviceInfo.MBusParamStruct> parameterList38 = deviceInfo.ParameterList;
          num5 = radioPacketMinomatV4.Data.InquiryRssi.Remainder;
          DeviceInfo.MBusParamStruct mbusParamStruct38 = new DeviceInfo.MBusParamStruct("Rssi.Remainder", num5.ToString());
          parameterList38.Add(mbusParamStruct38);
          List<DeviceInfo.MBusParamStruct> parameterList39 = deviceInfo.ParameterList;
          num5 = radioPacketMinomatV4.Data.InquiryRssi.Value;
          DeviceInfo.MBusParamStruct mbusParamStruct39 = new DeviceInfo.MBusParamStruct("Rssi.Value", num5.ToString());
          parameterList39.Add(mbusParamStruct39);
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("Minomat RSSI_dBm", radioPacketMinomatV4.Data.InquiryRssi.RSSI_dBm.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat)));
          if (radioPacketMinomatV4.RSSI_dBm.HasValue)
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MinoConnect RSSI_dBm", radioPacketMinomatV4.RSSI_dBm.Value.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat)));
          else
            deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MinoConnect RSSI_dBm", "NULL"));
          deviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MCT", radioPacketMinomatV4.MCT.ToString()));
        }
      }
      RadioDevice radioDevice = this.Find(packet.FunkId);
      if (radioDevice == null)
      {
        RadioDevice e = new RadioDevice(this.MyBus, packet);
        e.Info = deviceInfo;
        e.DeviceInfoList.Add(deviceInfo);
        this.bus.Add((object) e);
        this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, (BusDevice) e);
      }
      else
      {
        radioDevice.Device = packet;
        radioDevice.Info = deviceInfo;
        radioDevice.DeviceInfoList.Add(deviceInfo);
      }
      this.DeviceInfoOfLastReceivedPacket = deviceInfo;
    }

    private RadioDevice Find(long funkId) => this.Find(funkId, out int _);

    private RadioDevice Find(long funkId, out int index)
    {
      index = -1;
      for (int index1 = 0; index1 < this.bus.Count; ++index1)
      {
        if (((RadioDevice) this.bus[index1]).Device.FunkId == funkId)
        {
          index = index1;
          return (RadioDevice) this.bus[index1];
        }
      }
      return (RadioDevice) null;
    }

    internal void ClearReceivedPackets()
    {
      this.countOfFoundExpectedDevices = 0;
      this.countOfFoundUnexpectedDevices = 0;
      this.ReceivedData.Clear();
      this.bus.Clear();
      this.MyBus.RaiseEventOnDeviceListChanged((DeviceList) this, (BusDevice) null);
    }

    internal override void DeleteBusList()
    {
      RadioList.logger.Trace("Clear bus list and expected devices");
      this.ExpectedDevices.Clear();
      this.ClearReceivedPackets();
      base.DeleteBusList();
    }

    internal bool AddExpectedDevice(long funkId)
    {
      if (!this.ExpectedDevices.Contains(funkId))
      {
        this.ExpectedDevices.Add(funkId);
        return true;
      }
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "This number already exists! Value: " + funkId.ToString());
      return false;
    }

    internal void ClearExpectedDevices()
    {
      if (this.ExpectedDevices == null)
        return;
      this.ExpectedDevices.Clear();
    }

    internal override bool WorkBusAddresses() => true;
  }
}


--- RadioPacket.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioPacket
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  [Serializable]
  public abstract class RadioPacket : EventArgs
  {
    private static Logger logger = LogManager.GetLogger(nameof (RadioPacket));

    public long FunkId { get; set; }

    public DeviceTypes DeviceType { get; protected set; }

    public byte[] Buffer { get; protected set; }

    public byte? RSSI { get; set; }

    public byte? LQI { get; protected set; }

    public DateTime ReceivedAt { get; protected set; }

    public bool IsCrcOk { get; protected set; }

    public RadioTestPacket RadioTestPacket { get; protected set; }

    public string Manufacturer { get; protected set; }

    public string Medium { get; protected set; }

    public string Version { get; protected set; }

    public DeviceCollectorFunctions MyFunctions { get; set; }

    public uint MCT { get; protected set; }

    public int? RSSI_dBm
    {
      get => this.RSSI.HasValue ? new int?(Util.RssiToRssi_dBm(this.RSSI.Value)) : new int?();
    }

    public abstract bool Parse(byte[] packet, DateTime receivedAt, bool hasRssi);

    public abstract SortedList<long, SortedList<DateTime, ReadingValue>> GetValues();

    internal abstract SortedList<long, SortedList<DateTime, ReadingValue>> Merge(
      SortedList<long, SortedList<DateTime, ReadingValue>> oldMeterValues);

    public static RadioPacket Parse(byte[] buffer, bool hasRssi)
    {
      try
      {
        RadioPacket radioPacket = (RadioPacket) new RadioPacketRadio2();
        if (radioPacket.Parse(buffer, DateTime.Now, hasRssi))
          return radioPacket;
      }
      catch
      {
      }
      try
      {
        RadioPacket radioPacket = (RadioPacket) new RadioPacketRadio3();
        if (radioPacket.Parse(buffer, DateTime.Now, hasRssi))
          return radioPacket;
      }
      catch
      {
      }
      try
      {
        RadioPacket radioPacket = (RadioPacket) new RadioPacketWirelessMBus();
        if (radioPacket.Parse(buffer, DateTime.Now, hasRssi))
          return radioPacket;
      }
      catch
      {
      }
      return (RadioPacket) null;
    }
  }
}


--- RadioPacketMinomatV4.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioPacketMinomatV4
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public sealed class RadioPacketMinomatV4 : RadioPacket
  {
    private static Logger logger = LogManager.GetLogger(nameof (RadioPacketMinomatV4));

    public RadioPacketMinomatV4.LpsrHeader Header { get; private set; }

    public RadioPacketMinomatV4.InfoData Data { get; private set; }

    public override bool Parse(byte[] packet, DateTime receivedAt, bool hasRssi)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MinomatV4))
        return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission of Minomat V4!");
      if (packet == null)
        throw new ArgumentNullException("Input parameter 'packet' can not be null!");
      this.ReceivedAt = receivedAt;
      if (RadioPacketMinomatV4.logger.IsTraceEnabled)
        RadioPacketMinomatV4.logger.Trace(Util.ByteArrayToHexString(packet));
      this.Buffer = packet;
      int offset = 0;
      this.Header = RadioPacketMinomatV4.LpsrHeader.Parse(this.Buffer, ref offset);
      if (this.Header.Type != (byte) 74)
        return false;
      this.Data = RadioPacketMinomatV4.InfoData.Parse(this.Buffer, ref offset);
      if (hasRssi)
      {
        byte[] buffer1 = this.Buffer;
        int index1 = offset;
        int num = index1 + 1;
        this.RSSI = new byte?(buffer1[index1]);
        byte[] buffer2 = this.Buffer;
        int index2 = num;
        int startIndex = index2 + 1;
        this.LQI = new byte?(buffer2[index2]);
        if (this.Buffer.Length >= startIndex + 4)
          this.MCT = BitConverter.ToUInt32(this.Buffer, startIndex);
        this.IsCrcOk = ((int) this.LQI.Value & 128) == 128;
        if (!this.IsCrcOk)
          return false;
      }
      else
        this.IsCrcOk = true;
      this.FunkId = (long) this.Header.NetworkId;
      this.DeviceType = DeviceTypes.MinomatDevice;
      return true;
    }

    public override string ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("NetworkID: ").Append(this.FunkId.ToString().PadRight(10));
      stringBuilder.Append("RSSI MinoConnect (dBm): ").Append(this.RSSI_dBm.ToString().PadRight(5));
      stringBuilder.Append("RSSI Minomat: (raw)").Append(this.Data.InquiryRssi.Value.ToString().PadRight(5));
      return stringBuilder.ToString();
    }

    public override SortedList<long, SortedList<DateTime, ReadingValue>> GetValues()
    {
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      long valueIdForValueEnum1 = ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.SignalStrength, ValueIdent.ValueIdPart_MeterType.Collector, ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.Current, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
      long valueIdForValueEnum2 = ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.SignalStrength, ValueIdent.ValueIdPart_MeterType.Transceiver, ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.Current, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
      if (this.RSSI_dBm.HasValue)
        ValueIdent.AddValueToValueIdentList(ref valueList, DateTime.Now, valueIdForValueEnum2, (object) this.RSSI_dBm.Value);
      if (this.Data != null && this.Data.InquiryRssi != null)
        ValueIdent.AddValueToValueIdentList(ref valueList, DateTime.Now, valueIdForValueEnum1, (object) this.Data.InquiryRssi.RSSI_dBm);
      return valueList;
    }

    internal override SortedList<long, SortedList<DateTime, ReadingValue>> Merge(
      SortedList<long, SortedList<DateTime, ReadingValue>> oldMeterValues)
    {
      return this.GetValues();
    }

    public sealed class LpsrHeader
    {
      public byte Length { get; set; }

      public byte NetworkId { get; set; }

      public byte Type { get; set; }

      public byte Number { get; set; }

      public ushort To { get; set; }

      public ushort From { get; set; }

      public static RadioPacketMinomatV4.LpsrHeader Parse(byte[] buffer, ref int offset)
      {
        if (buffer == null || offset < 0)
          return (RadioPacketMinomatV4.LpsrHeader) null;
        RadioPacketMinomatV4.LpsrHeader lpsrHeader = new RadioPacketMinomatV4.LpsrHeader();
        lpsrHeader.Length = buffer[offset++];
        lpsrHeader.NetworkId = buffer[offset++];
        lpsrHeader.Type = buffer[offset++];
        lpsrHeader.Number = buffer[offset++];
        lpsrHeader.To = BitConverter.ToUInt16(buffer, offset);
        offset += 2;
        lpsrHeader.From = BitConverter.ToUInt16(buffer, offset);
        offset += 2;
        return lpsrHeader;
      }
    }

    public sealed class RssiFilter
    {
      public byte Count { get; set; }

      public byte Remainder { get; set; }

      public byte Value { get; set; }

      public static RadioPacketMinomatV4.RssiFilter Parse(byte[] buffer, ref int offset)
      {
        if (buffer == null || offset < 0)
          return (RadioPacketMinomatV4.RssiFilter) null;
        return new RadioPacketMinomatV4.RssiFilter()
        {
          Count = buffer[offset++],
          Remainder = buffer[offset++],
          Value = buffer[offset++]
        };
      }

      public int RSSI_dBm => Util.RssiToRssi_dBm(this.Value);
    }

    public sealed class InfoData
    {
      public const int MAX_SAVLEN = 4;
      public const int INFO_DATA_SIZE = 28;

      public ushort Parent { get; private set; }

      public byte Hops { get; private set; }

      public byte Islot { get; private set; }

      public ushort[] SAV { get; private set; }

      public ushort Offset { get; private set; }

      public uint Secs { get; private set; }

      public ushort Millis { get; private set; }

      public ushort FrameCounter { get; private set; }

      public byte Tslot { get; private set; }

      public byte SetupCounter { get; private set; }

      public byte SubTreeId { get; private set; }

      public RadioPacketMinomatV4.RssiFilter InquiryRssi { get; private set; }

      public static RadioPacketMinomatV4.InfoData Parse(byte[] buffer, ref int offset)
      {
        if (buffer == null || offset < 0)
          return (RadioPacketMinomatV4.InfoData) null;
        if (buffer.Length < offset + 28)
          throw new IndexOutOfRangeException("Invalid size of InfoData buffer! Buffer: " + Util.ByteArrayToHexString(buffer));
        RadioPacketMinomatV4.InfoData infoData = new RadioPacketMinomatV4.InfoData();
        infoData.Parent = BitConverter.ToUInt16(buffer, offset);
        offset += 2;
        infoData.Hops = buffer[offset++];
        infoData.Islot = buffer[offset++];
        infoData.SAV = new ushort[4];
        for (int index = 0; index < 4; ++index)
        {
          infoData.SAV[index] = BitConverter.ToUInt16(buffer, offset);
          offset += 2;
        }
        infoData.Offset = BitConverter.ToUInt16(buffer, offset);
        offset += 2;
        infoData.Secs = BitConverter.ToUInt32(buffer, offset);
        offset += 4;
        infoData.Millis = BitConverter.ToUInt16(buffer, offset);
        offset += 2;
        infoData.FrameCounter = BitConverter.ToUInt16(buffer, offset);
        offset += 2;
        infoData.Tslot = buffer[offset++];
        infoData.SetupCounter = buffer[offset++];
        infoData.SubTreeId = buffer[offset++];
        infoData.InquiryRssi = RadioPacketMinomatV4.RssiFilter.Parse(buffer, ref offset);
        return infoData;
      }
    }
  }
}


--- RadioPacketRadio2.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioPacketRadio2
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  [Serializable]
  public sealed class RadioPacketRadio2 : RadioDevicePacket
  {
    private static Logger logger = LogManager.GetLogger(nameof (RadioPacketRadio2));
    public const int LENGTH_SHORT_TELEGRAM = 24;
    public const int LENGTH_LONG_TELEGRAM = 32;

    public byte MonthIndex { get; private set; }

    public Decimal Exponent2F { get; private set; }

    public bool MeasurementError { get; private set; }

    public bool IsMeasurementEnabled { get; private set; }

    public bool IsSummerTime { get; private set; }

    public Decimal? CurrentValue { get; private set; }

    public ushort K { get; private set; }

    public ushort ScaleFactor { get; private set; }

    public InputUnitsIndex? Unit { get; private set; }

    public bool IsShortPackage { get; private set; }

    public HCA_SensorMode SensorMode { get; private set; }

    public DateTime DueDate { get; private set; }

    public Decimal? DueDateValue { get; private set; }

    public DateTime DynamicDate { get; private set; }

    public Decimal? DynamicValue { get; private set; }

    public bool IsHeatCostAllocator
    {
      get => this.GetValueIdPart_MeterType() == ValueIdent.ValueIdPart_MeterType.HeatCostAllocator;
    }

    public override bool Parse(byte[] packet, DateTime receivedAt, bool hasRssi)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.WalkBy))
        return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission of radio2!");
      if (packet == null)
        throw new ArgumentNullException("Input parameter 'packet' can not be null!");
      this.ReceivedAt = receivedAt;
      if (packet.Length < 32)
        return false;
      this.Buffer = packet;
      if (!this.GetCRCValue(6) || !this.GetCRCValue(14) || !this.GetCRCValue(22))
        return false;
      bool crcValue = this.GetCRCValue(30);
      int num1 = 0;
      byte[] buffer1 = this.Buffer;
      int index1 = num1;
      int num2 = index1 + 1;
      this.MonthIndex = buffer1[index1];
      byte[] buffer2 = this.Buffer;
      int index2 = num2;
      int num3 = index2 + 1;
      byte num4 = buffer2[index2];
      this.SensorMode = HCA_SensorMode.Single;
      if (((int) num4 & 128) == 128)
        this.SensorMode = HCA_SensorMode.Double;
      this.Exponent2F = 1.15M;
      if (((int) num4 & 64) == 64)
        this.Exponent2F = 1.35M;
      this.IsManipulated = ((int) num4 & 32) == 32;
      this.IsDeviceError = ((int) num4 & 16) == 16;
      this.MeasurementError = ((int) num4 & 8) == 8;
      this.IsMeasurementEnabled = ((int) num4 & 4) != 4;
      this.IsSummerTime = ((int) num4 & 2) == 2;
      byte[] buffer3 = this.Buffer;
      int index3 = num3;
      int num5 = index3 + 1;
      long num6 = (long) buffer3[index3] << 24;
      byte[] buffer4 = this.Buffer;
      int index4 = num5;
      int num7 = index4 + 1;
      long num8 = (long) buffer4[index4] << 16;
      long num9 = num6 | num8;
      byte[] buffer5 = this.Buffer;
      int index5 = num7;
      int num10 = index5 + 1;
      long num11 = (long) buffer5[index5] << 8;
      long num12 = num9 | num11;
      byte[] buffer6 = this.Buffer;
      int index6 = num10;
      int num13 = index6 + 1;
      long num14 = (long) buffer6[index6];
      this.FunkId = Util.ConvertBcdInt64ToInt64(num12 | num14);
      this.DeviceType = NumberRanges.GetTypeOfMinolDevice(this.FunkId);
      int num15 = num13 + 1 + 1;
      byte[] buffer7 = this.Buffer;
      int index7 = num15;
      int num16 = index7 + 1;
      byte num17 = buffer7[index7];
      byte[] buffer8 = this.Buffer;
      int index8 = num16;
      int num18 = index8 + 1;
      byte num19 = buffer8[index8];
      int day1 = (int) num19 & 31;
      int month1 = (int) num17 & 15;
      int num20 = ((int) num19 & 224) >> 5 | ((int) num17 & 240) >> 1;
      int year1 = num20 < 80 ? num20 + 2000 : num20 + 1900;
      try
      {
        this.TimePoint = new DateTime(year1, month1, day1, 0, 0, 0);
      }
      catch
      {
        return false;
      }
      this.DueDate = DateTime.MinValue;
      byte[] buffer9 = this.Buffer;
      int index9 = num18;
      int num21 = index9 + 1;
      byte num22 = buffer9[index9];
      byte[] buffer10 = this.Buffer;
      int index10 = num21;
      int num23 = index10 + 1;
      byte num24 = buffer10[index10];
      if (num22 > (byte) 0 && num24 > (byte) 0 && num22 != byte.MaxValue && num24 != byte.MaxValue)
      {
        int day2 = (int) num24 & 31;
        int month2 = (int) num22 & 15;
        int num25 = ((int) num24 & 224) >> 5 | ((int) num22 & 240) >> 1;
        int year2 = num25 < 80 ? num25 + 2000 : num25 + 1900;
        try
        {
          this.DueDate = new DateTime(year2, month2, day2, 0, 0, 0);
        }
        catch
        {
          return false;
        }
      }
      byte[] buffer11 = this.Buffer;
      int index11 = num23;
      int num26 = index11 + 1;
      this.K = (ushort) ((uint) buffer11[index11] << 8);
      int k = (int) this.K;
      byte[] buffer12 = this.Buffer;
      int index12 = num26;
      int num27 = index12 + 1;
      int num28 = (int) buffer12[index12];
      this.K = (ushort) (k | num28);
      this.ScaleFactor = (ushort) ((uint) this.K >> 4);
      this.Unit = new InputUnitsIndex?(MinolDevice.ConvertMinolUnitToInputUnitsIndex((byte) this.K));
      int num29 = num27 + 1 + 1;
      this.IsShortPackage = false;
      if (this.DeviceType == DeviceTypes.EHCA_M6 || this.DeviceType == DeviceTypes.EHCA_M5p || this.DeviceType == DeviceTypes.EHCA_M6_Radio3)
        this.IsShortPackage = true;
      else if (this.DeviceType == DeviceTypes.None)
      {
        if (!crcValue)
          return false;
        this.IsShortPackage = false;
      }
      else
        this.IsShortPackage = false;
      int num30;
      if (this.IsShortPackage)
      {
        byte[] buffer13 = this.Buffer;
        int index13 = num29;
        int num31 = index13 + 1;
        byte byte1_1 = buffer13[index13];
        byte[] buffer14 = this.Buffer;
        int index14 = num31;
        int num32 = index14 + 1;
        byte byte2_1 = buffer14[index14];
        this.DynamicValue = this.GetDecimalValue(byte1_1, byte2_1);
        byte[] buffer15 = this.Buffer;
        int index15 = num32;
        int num33 = index15 + 1;
        byte byte1_2 = buffer15[index15];
        byte[] buffer16 = this.Buffer;
        int index16 = num33;
        int num34 = index16 + 1;
        byte byte2_2 = buffer16[index16];
        this.DueDateValue = this.GetDecimalValue(byte1_2, byte2_2);
        byte[] buffer17 = this.Buffer;
        int index17 = num34;
        int num35 = index17 + 1;
        byte byte1_3 = buffer17[index17];
        byte[] buffer18 = this.Buffer;
        int index18 = num35;
        int num36 = index18 + 1;
        byte byte2_3 = buffer18[index18];
        this.CurrentValue = this.GetDecimalValue(byte1_3, byte2_3);
        num30 = num36 + 1 + 1 + 8;
      }
      else
      {
        if (!crcValue)
          return false;
        byte[] buffer19 = this.Buffer;
        int index19 = num29;
        int num37 = index19 + 1;
        byte byte1_4 = buffer19[index19];
        byte[] buffer20 = this.Buffer;
        int index20 = num37;
        int num38 = index20 + 1;
        byte byte2_4 = buffer20[index20];
        byte[] buffer21 = this.Buffer;
        int index21 = num38;
        int num39 = index21 + 1;
        byte byte3_1 = buffer21[index21];
        byte[] buffer22 = this.Buffer;
        int index22 = num39;
        int num40 = index22 + 1;
        byte byte4_1 = buffer22[index22];
        this.DynamicValue = this.GetDecimalValueFromBCD(byte1_4, byte2_4, byte3_1, byte4_1);
        byte[] buffer23 = this.Buffer;
        int index23 = num40;
        int num41 = index23 + 1;
        byte byte1_5 = buffer23[index23];
        byte[] buffer24 = this.Buffer;
        int index24 = num41;
        int num42 = index24 + 1;
        byte byte2_5 = buffer24[index24];
        int num43 = num42 + 1 + 1;
        byte[] buffer25 = this.Buffer;
        int index25 = num43;
        int num44 = index25 + 1;
        byte byte3_2 = buffer25[index25];
        byte[] buffer26 = this.Buffer;
        int index26 = num44;
        int num45 = index26 + 1;
        byte byte4_2 = buffer26[index26];
        this.DueDateValue = this.GetDecimalValueFromBCD(byte1_5, byte2_5, byte3_2, byte4_2);
        byte[] buffer27 = this.Buffer;
        int index27 = num45;
        int num46 = index27 + 1;
        byte byte1_6 = buffer27[index27];
        byte[] buffer28 = this.Buffer;
        int index28 = num46;
        int num47 = index28 + 1;
        byte byte2_6 = buffer28[index28];
        byte[] buffer29 = this.Buffer;
        int index29 = num47;
        int num48 = index29 + 1;
        byte byte3_3 = buffer29[index29];
        byte[] buffer30 = this.Buffer;
        int index30 = num48;
        int num49 = index30 + 1;
        byte byte4_3 = buffer30[index30];
        this.CurrentValue = this.GetDecimalValueFromBCD(byte1_6, byte2_6, byte3_3, byte4_3);
        num30 = num49 + 1 + 1;
      }
      if ((uint) this.MonthIndex % 2U > 0U)
      {
        int num50 = ((int) this.MonthIndex - 1) / 2;
        DateTime dateTime = this.TimePoint;
        int year3 = dateTime.Year;
        dateTime = this.TimePoint;
        int month3 = dateTime.Month;
        dateTime = new DateTime(year3, month3, 1);
        this.DynamicDate = dateTime.AddMonths(-num50);
      }
      else
      {
        DateTime timePoint = this.TimePoint;
        int year4 = timePoint.Year;
        timePoint = this.TimePoint;
        int month4 = timePoint.Month;
        this.DynamicDate = new DateTime(year4, month4, 16);
        if (this.DynamicDate > this.TimePoint)
        {
          this.DynamicValue = new Decimal?();
          RadioPacketRadio2.logger.Warn("Wrong radio2 packet received! The dynamic half month date is greater as device system date.");
        }
      }
      this.Manufacturer = "MINOL";
      this.Version = "2";
      this.Medium = this.DeviceType.ToString();
      if (hasRssi && packet.Length >= 34)
      {
        byte[] buffer31 = this.Buffer;
        int index31 = num30;
        int num51 = index31 + 1;
        this.RSSI = new byte?(buffer31[index31]);
        byte[] buffer32 = this.Buffer;
        int index32 = num51;
        int startIndex = index32 + 1;
        this.LQI = new byte?(buffer32[index32]);
        if (this.Buffer.Length >= startIndex + 4)
          this.MCT = BitConverter.ToUInt32(this.Buffer, startIndex);
        this.IsCrcOk = true;
        return true;
      }
      this.IsCrcOk = true;
      return true;
    }

    private bool GetCRCValue(int index)
    {
      return ((int) this.Buffer[index] | (int) this.Buffer[index + 1] << 8) == (int) CRC.calculateChecksumReversed(this.Buffer, (uint) index, 0U);
    }

    public override string ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(this.FunkId.ToString().PadRight(10));
      stringBuilder.Append(this.RSSI_dBm.ToString().PadRight(5));
      stringBuilder.Append(this.DeviceType.ToString().PadRight(21));
      stringBuilder.Append("IsShortPackage: ").Append(this.IsShortPackage.ToString().PadRight(6));
      stringBuilder.Append("MonthIndex: ").Append(this.MonthIndex.ToString().PadRight(3));
      stringBuilder.Append("Exponent2F: ").Append(this.Exponent2F.ToString().PadRight(5));
      stringBuilder.Append("MeasurementError: ").Append(this.MeasurementError.ToString().PadRight(6));
      stringBuilder.Append("IsSummerTime: ").Append(this.IsSummerTime.ToString().PadRight(6));
      stringBuilder.Append("K: ").Append(this.K.ToString().PadRight(7));
      if (this.CurrentValue.HasValue)
        stringBuilder.Append("CurrentValue: ").Append(this.CurrentValue.ToString().PadRight(9));
      else
        stringBuilder.Append("CurrentValue: ").Append("".PadRight(9));
      stringBuilder.Append("MCT: ").Append(this.MCT.ToString().PadRight(12));
      return stringBuilder.ToString();
    }

    public override SortedList<long, SortedList<DateTime, ReadingValue>> GetValues()
    {
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      ValueIdent.ValueIdPart_MeterType valueIdPartMeterType = this.GetValueIdPart_MeterType();
      DateTime dateTime;
      if (this.IsDeviceError)
      {
        ref SortedList<long, SortedList<DateTime, ReadingValue>> local1 = ref valueList;
        int year = this.TimePoint.Year;
        int month = this.TimePoint.Month;
        dateTime = this.TimePoint;
        int day = dateTime.Day;
        DateTime timePoint = new DateTime(year, month, day);
        long valueIdentOfError = ValueIdent.GetValueIdentOfError(valueIdPartMeterType, ValueIdent.ValueIdentError.DeviceError);
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (System.ValueType) 1;
        ValueIdent.AddValueToValueIdentList(ref local1, timePoint, valueIdentOfError, (object) local2);
      }
      if (this.IsManipulated)
      {
        ref SortedList<long, SortedList<DateTime, ReadingValue>> local3 = ref valueList;
        dateTime = this.TimePoint;
        int year = dateTime.Year;
        dateTime = this.TimePoint;
        int month = dateTime.Month;
        dateTime = this.TimePoint;
        int day = dateTime.Day;
        DateTime timePoint = new DateTime(year, month, day);
        long valueIdentOfError = ValueIdent.GetValueIdentOfError(valueIdPartMeterType, ValueIdent.ValueIdentError.Manipulation);
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (System.ValueType) 1;
        ValueIdent.AddValueToValueIdentList(ref local3, timePoint, valueIdentOfError, (object) local4);
      }
      if (this.CurrentValue.HasValue)
      {
        if (this.GetValueIdPart_MeterType() != 0)
        {
          if (this.IsHeatCostAllocator)
            ValueIdent.AddValueToValueIdentList(ref valueList, this.TimePoint, this.GetValueIdentOfCurrentValue(true, new InputUnitsIndex?()), (object) (this.CurrentValue.Value * ((Decimal) this.K / 1000M)));
          else if (this.Unit.Value == InputUnitsIndex.ImpUnit_0L)
            ValueIdent.AddValueToValueIdentList(ref valueList, this.TimePoint, this.GetValueIdentOfCurrentValue(true, this.Unit), (object) (this.CurrentValue.Value / 1000M * (Decimal) this.ScaleFactor));
        }
        ValueIdent.AddValueToValueIdentList(ref valueList, this.TimePoint, this.GetValueIdentOfCurrentValue(false, new InputUnitsIndex?()), (object) this.CurrentValue.Value);
      }
      if (this.DueDateValue.HasValue)
      {
        if (this.GetValueIdPart_MeterType() != 0)
        {
          if (this.IsHeatCostAllocator)
            ValueIdent.AddValueToValueIdentList(ref valueList, this.DueDate, this.GetValueIdentOfDueDateValue(true, new InputUnitsIndex?()), (object) (this.DueDateValue.Value * ((Decimal) this.K / 1000M)));
          else if (this.Unit.Value == InputUnitsIndex.ImpUnit_0L)
            ValueIdent.AddValueToValueIdentList(ref valueList, this.DueDate, this.GetValueIdentOfDueDateValue(true, this.Unit), (object) (this.DueDateValue.Value / 1000M * (Decimal) this.ScaleFactor));
        }
        ValueIdent.AddValueToValueIdentList(ref valueList, this.DueDate, this.GetValueIdentOfDueDateValue(false, new InputUnitsIndex?()), (object) this.DueDateValue.Value);
      }
      int num1;
      if (this.DynamicValue.HasValue)
      {
        dateTime = this.DynamicDate;
        num1 = dateTime.Day == 1 ? 1 : 0;
      }
      else
        num1 = 0;
      Decimal? nullable1;
      Decimal? nullable2;
      Decimal num2;
      if (num1 != 0)
      {
        if (this.GetValueIdPart_MeterType() != 0)
        {
          if (this.IsHeatCostAllocator)
          {
            ref SortedList<long, SortedList<DateTime, ReadingValue>> local5 = ref valueList;
            DateTime dynamicDate = this.DynamicDate;
            long identOfMonthValue = this.GetValueIdentOfMonthValue(true, new InputUnitsIndex?());
            nullable1 = this.DynamicValue;
            Decimal num3 = (Decimal) this.K / 1000M;
            // ISSUE: variable of a boxed type
            __Boxed<Decimal?> local6 = (System.ValueType) (nullable1.HasValue ? new Decimal?(nullable1.GetValueOrDefault() * num3) : new Decimal?());
            ValueIdent.AddValueToValueIdentList(ref local5, dynamicDate, identOfMonthValue, (object) local6);
          }
          else if (this.Unit.Value == InputUnitsIndex.ImpUnit_0L)
          {
            ref SortedList<long, SortedList<DateTime, ReadingValue>> local7 = ref valueList;
            DateTime dynamicDate = this.DynamicDate;
            long identOfMonthValue = this.GetValueIdentOfMonthValue(true, this.Unit);
            nullable2 = this.DynamicValue;
            num2 = 1000M;
            nullable1 = nullable2.HasValue ? new Decimal?(nullable2.GetValueOrDefault() / num2) : new Decimal?();
            Decimal scaleFactor = (Decimal) this.ScaleFactor;
            Decimal? nullable3;
            if (!nullable1.HasValue)
            {
              nullable2 = new Decimal?();
              nullable3 = nullable2;
            }
            else
              nullable3 = new Decimal?(nullable1.GetValueOrDefault() * scaleFactor);
            // ISSUE: variable of a boxed type
            __Boxed<Decimal?> local8 = (System.ValueType) nullable3;
            ValueIdent.AddValueToValueIdentList(ref local7, dynamicDate, identOfMonthValue, (object) local8);
          }
        }
        ValueIdent.AddValueToValueIdentList(ref valueList, this.DynamicDate, this.GetValueIdentOfMonthValue(false, new InputUnitsIndex?()), (object) this.DynamicValue);
      }
      nullable1 = this.DynamicValue;
      int num4;
      if (nullable1.HasValue)
      {
        dateTime = this.DynamicDate;
        num4 = dateTime.Day == 16 ? 1 : 0;
      }
      else
        num4 = 0;
      if (num4 != 0)
      {
        if (this.GetValueIdPart_MeterType() != 0)
        {
          if (this.IsHeatCostAllocator)
          {
            ref SortedList<long, SortedList<DateTime, ReadingValue>> local9 = ref valueList;
            DateTime dynamicDate = this.DynamicDate;
            long ofHalfMonthValue = this.GetValueIdentOfHalfMonthValue(true, new InputUnitsIndex?());
            nullable1 = this.DynamicValue;
            Decimal num5 = (Decimal) this.K / 1000M;
            Decimal? nullable4;
            if (!nullable1.HasValue)
            {
              nullable2 = new Decimal?();
              nullable4 = nullable2;
            }
            else
              nullable4 = new Decimal?(nullable1.GetValueOrDefault() * num5);
            // ISSUE: variable of a boxed type
            __Boxed<Decimal?> local10 = (System.ValueType) nullable4;
            ValueIdent.AddValueToValueIdentList(ref local9, dynamicDate, ofHalfMonthValue, (object) local10);
          }
          else if (this.Unit.Value == InputUnitsIndex.ImpUnit_0L)
          {
            ref SortedList<long, SortedList<DateTime, ReadingValue>> local11 = ref valueList;
            DateTime dynamicDate = this.DynamicDate;
            long ofHalfMonthValue = this.GetValueIdentOfHalfMonthValue(true, this.Unit);
            nullable2 = this.DynamicValue;
            num2 = 1000M;
            nullable1 = nullable2.HasValue ? new Decimal?(nullable2.GetValueOrDefault() / num2) : new Decimal?();
            Decimal scaleFactor = (Decimal) this.ScaleFactor;
            Decimal? nullable5;
            if (!nullable1.HasValue)
            {
              nullable2 = new Decimal?();
              nullable5 = nullable2;
            }
            else
              nullable5 = new Decimal?(nullable1.GetValueOrDefault() * scaleFactor);
            // ISSUE: variable of a boxed type
            __Boxed<Decimal?> local12 = (System.ValueType) nullable5;
            ValueIdent.AddValueToValueIdentList(ref local11, dynamicDate, ofHalfMonthValue, (object) local12);
          }
        }
        ValueIdent.AddValueToValueIdentList(ref valueList, this.DynamicDate, this.GetValueIdentOfHalfMonthValue(false, new InputUnitsIndex?()), (object) this.DynamicValue);
      }
      if (this.RSSI_dBm.HasValue)
        ValueIdent.AddValueToValueIdentList(ref valueList, this.TimePoint, this.GetValueIdentOfSignalStrengthValue(), (object) this.RSSI_dBm.Value);
      return valueList;
    }

    internal override SortedList<long, SortedList<DateTime, ReadingValue>> Merge(
      SortedList<long, SortedList<DateTime, ReadingValue>> oldMeterValues)
    {
      SortedList<long, SortedList<DateTime, ReadingValue>> values = this.GetValues();
      if (values == null)
        return oldMeterValues;
      if (oldMeterValues == null)
        return values;
      long identOfCurrentValue1 = this.GetValueIdentOfCurrentValue(false, new InputUnitsIndex?());
      if (oldMeterValues.ContainsKey(identOfCurrentValue1) && values.ContainsKey(identOfCurrentValue1))
        oldMeterValues[identOfCurrentValue1] = values[identOfCurrentValue1];
      else if (!oldMeterValues.ContainsKey(identOfCurrentValue1) && values.ContainsKey(identOfCurrentValue1))
        oldMeterValues.Add(identOfCurrentValue1, values[identOfCurrentValue1]);
      long identOfDueDateValue1 = this.GetValueIdentOfDueDateValue(false, new InputUnitsIndex?());
      if (oldMeterValues.ContainsKey(identOfDueDateValue1) && values.ContainsKey(identOfDueDateValue1))
        oldMeterValues[identOfDueDateValue1] = values[identOfDueDateValue1];
      else if (!oldMeterValues.ContainsKey(identOfDueDateValue1) && values.ContainsKey(identOfDueDateValue1))
        oldMeterValues.Add(identOfDueDateValue1, values[identOfDueDateValue1]);
      long identOfMonthValue1 = this.GetValueIdentOfMonthValue(false, new InputUnitsIndex?());
      RadioDevicePacket.MergeMeterValues(oldMeterValues, values, identOfMonthValue1);
      long ofHalfMonthValue1 = this.GetValueIdentOfHalfMonthValue(false, new InputUnitsIndex?());
      RadioDevicePacket.MergeMeterValues(oldMeterValues, values, ofHalfMonthValue1);
      if (this.GetValueIdPart_MeterType() != 0)
      {
        long identOfCurrentValue2 = this.GetValueIdentOfCurrentValue(true, this.IsHeatCostAllocator ? new InputUnitsIndex?() : this.Unit);
        if (oldMeterValues.ContainsKey(identOfCurrentValue2) && values.ContainsKey(identOfCurrentValue2))
          oldMeterValues[identOfCurrentValue2] = values[identOfCurrentValue2];
        else if (!oldMeterValues.ContainsKey(identOfCurrentValue2) && values.ContainsKey(identOfCurrentValue2))
          oldMeterValues.Add(identOfCurrentValue2, values[identOfCurrentValue2]);
        long identOfDueDateValue2 = this.GetValueIdentOfDueDateValue(true, this.IsHeatCostAllocator ? new InputUnitsIndex?() : this.Unit);
        if (oldMeterValues.ContainsKey(identOfDueDateValue2) && values.ContainsKey(identOfDueDateValue2))
          oldMeterValues[identOfDueDateValue2] = values[identOfDueDateValue2];
        else if (!oldMeterValues.ContainsKey(identOfDueDateValue2) && values.ContainsKey(identOfDueDateValue2))
          oldMeterValues.Add(identOfDueDateValue2, values[identOfDueDateValue2]);
        long identOfMonthValue2 = this.GetValueIdentOfMonthValue(true, this.IsHeatCostAllocator ? new InputUnitsIndex?() : this.Unit);
        RadioDevicePacket.MergeMeterValues(oldMeterValues, values, identOfMonthValue2);
        long ofHalfMonthValue2 = this.GetValueIdentOfHalfMonthValue(true, this.IsHeatCostAllocator ? new InputUnitsIndex?() : this.Unit);
        RadioDevicePacket.MergeMeterValues(oldMeterValues, values, ofHalfMonthValue2);
      }
      long signalStrengthValue = this.GetValueIdentOfSignalStrengthValue();
      if (oldMeterValues.ContainsKey(signalStrengthValue) && values.ContainsKey(signalStrengthValue))
        oldMeterValues[signalStrengthValue] = values[signalStrengthValue];
      else if (!oldMeterValues.ContainsKey(signalStrengthValue) && values.ContainsKey(signalStrengthValue))
        oldMeterValues.Add(signalStrengthValue, values[signalStrengthValue]);
      return oldMeterValues;
    }
  }
}


--- RadioPacketRadio3.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioPacketRadio3
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  [Serializable]
  public sealed class RadioPacketRadio3 : RadioDevicePacket
  {
    private static Logger logger = LogManager.GetLogger(nameof (RadioPacketRadio3));
    public const int COUNT_OF_MONTHS = 12;
    public const int HEADER_SIZE = 13;

    public byte LengthOfPacket { get; private set; }

    public byte PacketNr { get; private set; }

    public byte? ScenarioNr { get; private set; }

    public HCA_Scale Scale { get; private set; }

    public bool IsAccuDefect { get; private set; }

    public RadioPacketRadio3.MonthValueCollection Months { get; private set; }

    private RadioPacketRadio3.EncodingType ValueEncodingType { get; set; }

    private RadioPacketRadio3.RadioPacketType PacketType { get; set; }

    public HCA_SensorMode SensorMode { get; private set; }

    public TemperaturUnit TemperaturUnit { get; private set; }

    public DateTime? DueDate { get; private set; }

    public Decimal? DueDateValue { get; private set; }

    public RadioPacketRadio3SmokeDetector SmokeDetector { get; private set; }

    public ushort? K { get; private set; }

    public ushort? ScaleFactor { get; private set; }

    public InputUnitsIndex? Unit { get; private set; }

    public Decimal? CurrentValue { get; private set; }

    public DateTime? ResetDate { get; private set; }

    public DateTime? DeviceErrorDate { get; private set; }

    public DateTime? ManipulationDate { get; private set; }

    public bool IsHeatCostAllocator
    {
      get => this.GetValueIdPart_MeterType() == ValueIdent.ValueIdPart_MeterType.HeatCostAllocator;
    }

    public override bool Parse(byte[] packet, DateTime receivedAt, bool hasRssi)
    {
      if (!UserManager.CheckPermission(UserRights.Rights.Radio3))
        return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission of radio3!");
      if (packet == null)
        throw new ArgumentNullException("Input parameter 'packet' can not be null!");
      if (this.MyFunctions == null)
        throw new ArgumentNullException("DeviceCollectorHandler can not be null!");
      this.ReceivedAt = receivedAt;
      if (packet.Length > 6 && packet[1] == (byte) 47 && packet[2] == (byte) 47 && packet[3] == (byte) 47 && packet[4] == (byte) 47 && packet[5] == (byte) 47 && packet[6] == (byte) 47)
      {
        this.RadioTestPacket = RadioTestPacket.Parse(packet);
        this.LengthOfPacket = packet[0];
        this.Buffer = packet;
        this.FunkId = (long) this.RadioTestPacket.SerialNumber;
        if (hasRssi)
        {
          this.RSSI = new byte?(this.Buffer[(int) this.LengthOfPacket + 1]);
          this.LQI = new byte?(this.Buffer[(int) this.LengthOfPacket + 2]);
          if (this.Buffer.Length >= (int) this.LengthOfPacket + 3 + 4)
            this.MCT = BitConverter.ToUInt32(this.Buffer, (int) this.LengthOfPacket + 3);
          this.IsCrcOk = ((int) this.LQI.Value & 128) == 128;
          if (!this.IsCrcOk)
            return false;
        }
        return true;
      }
      if (packet.Length < 13 || !this.IsValid(packet))
        return false;
      this.Buffer = packet;
      if (!this.DecodeHeader())
        return false;
      int offset = 0;
      if (this.DeviceType == DeviceTypes.SmokeDetector)
      {
        if (this.MyFunctions.MyBusMode == BusMode.Radio4)
          return true;
        if (!this.ParseSmokeDetector(out offset))
          return false;
      }
      else
      {
        if (!this.DecodeDueDateValue(out offset))
          return false;
        if (this.DeviceType == DeviceTypes.TemperatureSensor || this.DeviceType == DeviceTypes.HumiditySensor)
        {
          if (this.IsDeviceError)
          {
            this.DeviceErrorDate = this.DueDate;
            this.DueDate = new DateTime?();
          }
          else if (this.IsManipulated)
          {
            this.ManipulationDate = this.DueDate;
            this.DueDate = new DateTime?();
          }
        }
        else if (this.IsDeviceError && (uint) this.PacketNr % 2U > 0U)
        {
          this.DeviceErrorDate = this.DueDate;
          this.DueDate = new DateTime?();
          this.DueDateValue = new Decimal?();
        }
        else if (this.IsManipulated && (uint) this.PacketNr % 2U > 0U)
        {
          this.ManipulationDate = this.DueDate;
          this.DueDate = new DateTime?();
          this.DueDateValue = new Decimal?();
        }
        byte? scenarioNr = this.ScenarioNr;
        int? nullable = scenarioNr.HasValue ? new int?((int) scenarioNr.GetValueOrDefault()) : new int?();
        int num1 = 5;
        int num2;
        if (!(nullable.GetValueOrDefault() == num1 & nullable.HasValue))
        {
          scenarioNr = this.ScenarioNr;
          nullable = scenarioNr.HasValue ? new int?((int) scenarioNr.GetValueOrDefault()) : new int?();
          int num3 = 6;
          if (!(nullable.GetValueOrDefault() == num3 & nullable.HasValue) && this.DeviceType != DeviceTypes.TemperatureSensor)
          {
            num2 = this.DeviceType == DeviceTypes.HumiditySensor ? 1 : 0;
            goto label_38;
          }
        }
        num2 = 1;
label_38:
        if (num2 != 0)
        {
          this.CurrentValue = this.DueDateValue;
          this.DueDateValue = new Decimal?();
          if (this.DueDate.HasValue && (this.DeviceType == DeviceTypes.TemperatureSensor || this.DeviceType == DeviceTypes.HumiditySensor))
          {
            this.DueDate = new DateTime?();
            RadioPacketRadio3.logger.Fatal("T&H: Invalid packet detected. DueDate has value: " + Util.ByteArrayToHexString(this.Buffer));
          }
          else
          {
            this.ResetDate = this.DueDate;
            this.DueDate = new DateTime?();
          }
        }
        switch (this.LengthOfPacket)
        {
          case 32:
          case 47:
            if (!this.DecodeScenario1Data(ref offset))
              return false;
            offset = (int) this.LengthOfPacket + 1;
            break;
          case 38:
          case 53:
            if (!this.DecodeWalkByData(ref offset))
              return false;
            break;
          case 44:
          case 54:
            if (!this.DecodeScenario2Data(ref offset))
              return false;
            offset = (int) this.LengthOfPacket + 1;
            break;
          default:
            return false;
        }
      }
      this.Manufacturer = "MINOL";
      this.Version = "3";
      this.Medium = this.DeviceType.ToString();
      if (hasRssi)
      {
        byte[] buffer1 = this.Buffer;
        int index1 = offset;
        int num = index1 + 1;
        this.RSSI = new byte?(buffer1[index1]);
        byte[] buffer2 = this.Buffer;
        int index2 = num;
        int startIndex = index2 + 1;
        this.LQI = new byte?(buffer2[index2]);
        if (this.Buffer.Length >= startIndex + 4)
          this.MCT = BitConverter.ToUInt32(this.Buffer, startIndex);
        this.IsCrcOk = true;
      }
      else
        this.IsCrcOk = true;
      return true;
    }

    private bool DecodeHeader()
    {
      int num1 = 0;
      byte[] buffer1 = this.Buffer;
      int index1 = num1;
      int num2 = index1 + 1;
      this.LengthOfPacket = buffer1[index1];
      switch (this.LengthOfPacket)
      {
        case 32:
        case 38:
        case 44:
        case 47:
        case 53:
        case 54:
          this.PacketType = (RadioPacketRadio3.RadioPacketType) Enum.ToObject(typeof (RadioPacketRadio3.RadioPacketType), this.LengthOfPacket);
          byte[] buffer2 = this.Buffer;
          int index2 = num2;
          int num3 = index2 + 1;
          byte num4 = buffer2[index2];
          this.PacketNr = (byte) ((uint) num4 & 7U);
          this.ValueEncodingType = ((int) num4 & 24) != 0 ? (((int) num4 & 24) != 8 ? RadioPacketRadio3.EncodingType.Unknown : RadioPacketRadio3.EncodingType.BCD_4Byte) : RadioPacketRadio3.EncodingType.Binary_2Byte;
          if (((int) num4 & 224) == 0)
            this.ScenarioNr = new byte?((byte) 1);
          else if (((int) num4 & 224) == 32)
          {
            this.ScenarioNr = new byte?((byte) 2);
          }
          else
          {
            if (((int) num4 & 224) != 64)
              return false;
            this.ScenarioNr = this.MyFunctions.MyBusMode != BusMode.Radio3_868_95_RUSSIA ? new byte?((byte) 6) : new byte?((byte) 5);
          }
          byte[] buffer3 = this.Buffer;
          int index3 = num3;
          int num5 = index3 + 1;
          long num6 = (long) buffer3[index3] << 24;
          byte[] buffer4 = this.Buffer;
          int index4 = num5;
          int num7 = index4 + 1;
          long num8 = (long) buffer4[index4] << 16;
          long num9 = num6 | num8;
          byte[] buffer5 = this.Buffer;
          int index5 = num7;
          int num10 = index5 + 1;
          long num11 = (long) buffer5[index5] << 8;
          long num12 = num9 | num11;
          byte[] buffer6 = this.Buffer;
          int index6 = num10;
          int num13 = index6 + 1;
          long num14 = (long) buffer6[index6];
          this.FunkId = Util.ConvertBcdInt64ToInt64(num12 | num14);
          this.DeviceType = NumberRanges.GetTypeOfMinolDevice(this.FunkId);
          byte[] buffer7 = this.Buffer;
          int index7 = num13;
          int num15 = index7 + 1;
          byte num16 = buffer7[index7];
          this.Scale = HCA_Scale.Uniform;
          if (((int) num16 & 4) == 4)
            this.Scale = HCA_Scale.Product;
          this.SensorMode = HCA_SensorMode.Single;
          this.TemperaturUnit = TemperaturUnit.C;
          if (((int) num16 & 8) == 8)
          {
            this.SensorMode = HCA_SensorMode.Double;
            this.TemperaturUnit = TemperaturUnit.F;
          }
          this.IsAccuDefect = ((int) num16 & 32) == 32;
          this.IsManipulated = ((int) num16 & 64) == 64;
          this.IsDeviceError = ((int) num16 & 128) == 128;
          if (this.MyFunctions.MyBusMode == BusMode.Radio4)
            return true;
          int hour = 0;
          int minute = 0;
          byte? scenarioNr = this.ScenarioNr;
          int? nullable1 = scenarioNr.HasValue ? new int?((int) scenarioNr.GetValueOrDefault()) : new int?();
          int num17 = 5;
          int num18;
          if (!(nullable1.GetValueOrDefault() == num17 & nullable1.HasValue))
          {
            scenarioNr = this.ScenarioNr;
            nullable1 = scenarioNr.HasValue ? new int?((int) scenarioNr.GetValueOrDefault()) : new int?();
            int num19 = 6;
            num18 = nullable1.GetValueOrDefault() == num19 & nullable1.HasValue ? 1 : 0;
          }
          else
            num18 = 1;
          int num20;
          if (num18 != 0)
          {
            byte[] buffer8 = this.Buffer;
            int index8 = num15;
            int num21 = index8 + 1;
            this.K = new ushort?((ushort) ((uint) buffer8[index8] << 8));
            ushort? k = this.K;
            nullable1 = k.HasValue ? new int?((int) k.GetValueOrDefault()) : new int?();
            byte[] buffer9 = this.Buffer;
            int index9 = num21;
            num20 = index9 + 1;
            int num22 = (int) buffer9[index9];
            this.K = new ushort?((ushort) (nullable1.HasValue ? new int?(nullable1.GetValueOrDefault() | num22) : new int?()).Value);
            k = this.K;
            int? nullable2;
            if (!k.HasValue)
            {
              nullable1 = new int?();
              nullable2 = nullable1;
            }
            else
              nullable2 = new int?((int) k.GetValueOrDefault() >> 4);
            nullable1 = nullable2;
            this.ScaleFactor = new ushort?((ushort) nullable1.Value);
            k = this.K;
            this.Unit = new InputUnitsIndex?(MinolDevice.ConvertMinolUnitToInputUnitsIndex((byte) k.Value));
          }
          else
          {
            byte[] buffer10 = this.Buffer;
            int index10 = num15;
            int num23 = index10 + 1;
            hour = (int) buffer10[index10];
            byte[] buffer11 = this.Buffer;
            int index11 = num23;
            num20 = index11 + 1;
            minute = (int) buffer11[index11];
          }
          byte[] buffer12 = this.Buffer;
          int index12 = num20;
          int num24 = index12 + 1;
          byte num25 = buffer12[index12];
          byte[] buffer13 = this.Buffer;
          int index13 = num24;
          int num26 = index13 + 1;
          byte num27 = buffer13[index13];
          int day1 = (int) num27 & 31;
          int month1 = (int) num25 & 15;
          int num28 = ((int) num27 & 224) >> 5 | ((int) num25 & 240) >> 1;
          int year1 = num28 < 80 ? num28 + 2000 : num28 + 1900;
          try
          {
            this.TimePoint = new DateTime(year1, month1, day1, hour, minute, 0);
          }
          catch
          {
            return false;
          }
          byte[] buffer14 = this.Buffer;
          int index14 = num26;
          int num29 = index14 + 1;
          byte num30 = buffer14[index14];
          byte[] buffer15 = this.Buffer;
          int index15 = num29;
          int num31 = index15 + 1;
          byte num32 = buffer15[index15];
          if ((num30 != (byte) 0 || num32 != (byte) 0) && (num30 != byte.MaxValue || num32 != byte.MaxValue))
          {
            int day2 = (int) num32 & 31;
            int month2 = (int) num30 & 15;
            int num33 = ((int) num32 & 224) >> 5 | ((int) num30 & 240) >> 1;
            int year2 = num33 < 80 ? num33 + 2000 : num33 + 1900;
            try
            {
              this.DueDate = new DateTime?(new DateTime(year2, month2, day2, 0, 0, 0));
            }
            catch
            {
              return false;
            }
          }
          return num31 == 13;
        default:
          return false;
      }
    }

    private bool DecodeDueDateValue(out int offset)
    {
      offset = 13;
      if (this.ValueEncodingType == RadioPacketRadio3.EncodingType.Binary_2Byte)
      {
        this.DueDateValue = this.GetDecimalValue(this.Buffer[offset], this.Buffer[offset + 1]);
        offset += 2;
      }
      else
      {
        if (this.ValueEncodingType != RadioPacketRadio3.EncodingType.BCD_4Byte)
          return false;
        this.DueDateValue = this.GetDecimalValueFromBCD(this.Buffer[offset], this.Buffer[offset + 1], this.Buffer[offset + 2], this.Buffer[offset + 3]);
        offset += 4;
      }
      return true;
    }

    private bool DecodeWalkByData(ref int offset)
    {
      DateTime timePoint = this.TimePoint;
      int year = timePoint.Year;
      timePoint = this.TimePoint;
      int month = timePoint.Month;
      this.Months = new RadioPacketRadio3.MonthValueCollection(12, new DateTime(year, month, 1));
      if (this.ValueEncodingType == RadioPacketRadio3.EncodingType.Binary_2Byte)
      {
        for (int key = 0; key < 12; ++key)
        {
          this.Months[key].Value = this.GetDecimalValue(this.Buffer[offset], this.Buffer[offset + 1]);
          offset += 2;
        }
      }
      else
      {
        if (this.ValueEncodingType != RadioPacketRadio3.EncodingType.BCD_4Byte)
          return false;
        this.Months[0].Value = this.GetDecimalValueFromBCD(this.Buffer[offset], this.Buffer[offset + 1], this.Buffer[offset + 2], this.Buffer[offset + 3]);
        offset += 4;
        for (int key = 1; key < 12; ++key)
        {
          this.Months[key].Value = this.Convert3ByteBCDDiffValueToMonthValue(this.Months[key - 1].Value, offset);
          offset += 3;
        }
      }
      return true;
    }

    private bool DecodeScenario1Data(ref int offset)
    {
      DateTime timePoint = this.TimePoint;
      int year = timePoint.Year;
      timePoint = this.TimePoint;
      int month = timePoint.Month;
      this.Months = new RadioPacketRadio3.MonthValueCollection(1, new DateTime(year, month, 1));
      if (this.ValueEncodingType == RadioPacketRadio3.EncodingType.Binary_2Byte)
      {
        this.Months[0].Value = this.GetDecimalValue(this.Buffer[offset], this.Buffer[offset + 1]);
        offset += 2;
      }
      else
      {
        if (this.ValueEncodingType != RadioPacketRadio3.EncodingType.BCD_4Byte)
          return false;
        this.Months[0].Value = this.GetDecimalValueFromBCD(this.Buffer[offset], this.Buffer[offset + 1], this.Buffer[offset + 2], this.Buffer[offset + 3]);
        offset += 4;
      }
      return true;
    }

    private bool DecodeScenario2Data(ref int offset)
    {
      DateTime timePoint = this.TimePoint;
      int year = timePoint.Year;
      timePoint = this.TimePoint;
      int month = timePoint.Month;
      this.Months = new RadioPacketRadio3.MonthValueCollection(18, new DateTime(year, month, 1));
      if (this.ValueEncodingType == RadioPacketRadio3.EncodingType.Binary_2Byte)
      {
        this.Months[0].Value = this.GetDecimalValue(this.Buffer[offset], this.Buffer[offset + 1]);
        offset += 2;
        this.Months[(int) this.PacketNr + 1].Value = this.GetDecimalValue(this.Buffer[offset], this.Buffer[offset + 1]);
        offset += 2;
        if (this.PacketNr <= (byte) 5)
          this.Months[(int) this.PacketNr + 9].Value = this.GetDecimalValue(this.Buffer[offset], this.Buffer[offset + 1]);
        else
          this.Months[(int) this.PacketNr + 10].Value = this.GetDecimalValue(this.Buffer[offset], this.Buffer[offset + 1]);
        offset += 2;
      }
      else
      {
        if (this.ValueEncodingType != RadioPacketRadio3.EncodingType.BCD_4Byte)
          return false;
        this.Months[0].Value = this.GetDecimalValueFromBCD(this.Buffer[offset], this.Buffer[offset + 1], this.Buffer[offset + 2], this.Buffer[offset + 3]);
        offset += 4;
      }
      return true;
    }

    private Decimal? Convert3ByteBCDDiffValueToMonthValue(Decimal? valueOfPreviousMonth, int offset)
    {
      if (!valueOfPreviousMonth.HasValue)
        return new Decimal?();
      Decimal? decimalValueFromBcd = this.GetDecimalValueFromBCD(this.Buffer[offset], this.Buffer[offset + 1], this.Buffer[offset + 2]);
      if (!decimalValueFromBcd.HasValue)
        return new Decimal?();
      if (decimalValueFromBcd.Value >= 999000M)
      {
        RadioPacketRadio3.logger.Info("RÃ¼cklauf entdekt!");
        Decimal? nullable1 = valueOfPreviousMonth;
        Decimal num1 = decimalValueFromBcd.Value;
        Decimal? nullable2 = nullable1.HasValue ? new Decimal?(nullable1.GetValueOrDefault() - num1) : new Decimal?();
        Decimal num2 = (Decimal) 1000000;
        Decimal? monthValue;
        if (!nullable2.HasValue)
        {
          nullable1 = new Decimal?();
          monthValue = nullable1;
        }
        else
          monthValue = new Decimal?(nullable2.GetValueOrDefault() + num2);
        return monthValue;
      }
      Decimal? nullable3 = valueOfPreviousMonth;
      Decimal? nullable4 = decimalValueFromBcd;
      return nullable3.HasValue & nullable4.HasValue ? new Decimal?(nullable3.GetValueOrDefault() - nullable4.GetValueOrDefault()) : new Decimal?();
    }

    public override string ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(this.FunkId.ToString().PadRight(10));
      stringBuilder.Append(this.RSSI_dBm.ToString().PadRight(5));
      stringBuilder.Append(this.DeviceType.ToString().PadRight(21));
      stringBuilder.Append("Packet: ").Append(this.PacketNr.ToString().PadRight(2));
      stringBuilder.Append("Length: ").Append(this.LengthOfPacket.ToString().PadRight(3));
      stringBuilder.Append("Type: ").Append(this.PacketType.ToString().PadRight(14));
      if (this.ScenarioNr.HasValue)
        stringBuilder.Append("Scenario: ").Append(this.ScenarioNr.ToString().PadRight(2));
      else
        stringBuilder.Append("Scenario: ").Append("".ToString().PadRight(2));
      stringBuilder.Append("HCA_Scale: ").Append(this.Scale.ToString().PadRight(9));
      stringBuilder.Append("IsAccuDefect: ").Append(this.IsAccuDefect.ToString().PadRight(6));
      stringBuilder.Append("ValueEncodingType: ").Append(this.ValueEncodingType.ToString().PadRight(14));
      stringBuilder.Append("MCT: ").Append(this.MCT.ToString().PadRight(12));
      return stringBuilder.ToString();
    }

    public override SortedList<long, SortedList<DateTime, ReadingValue>> GetValues()
    {
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      ValueIdent.ValueIdPart_MeterType valueIdPartMeterType = this.GetValueIdPart_MeterType();
      DateTime timePoint1;
      DateTime? nullable1;
      if (this.IsDeviceError)
      {
        DateTime dateTime;
        if (!this.DeviceErrorDate.HasValue)
        {
          int year = this.TimePoint.Year;
          timePoint1 = this.TimePoint;
          int month = timePoint1.Month;
          timePoint1 = this.TimePoint;
          int day = timePoint1.Day;
          dateTime = new DateTime(year, month, day);
        }
        else
        {
          nullable1 = this.DeviceErrorDate;
          dateTime = nullable1.Value;
        }
        DateTime timePoint2 = dateTime;
        long valueIdentOfError = ValueIdent.GetValueIdentOfError(valueIdPartMeterType, ValueIdent.ValueIdentError.DeviceError);
        ValueIdent.AddValueToValueIdentList(ref valueList, timePoint2, valueIdentOfError, (object) 1);
      }
      if (this.IsManipulated)
      {
        nullable1 = this.ManipulationDate;
        DateTime dateTime;
        if (!nullable1.HasValue)
        {
          timePoint1 = this.TimePoint;
          int year = timePoint1.Year;
          timePoint1 = this.TimePoint;
          int month = timePoint1.Month;
          timePoint1 = this.TimePoint;
          int day = timePoint1.Day;
          dateTime = new DateTime(year, month, day);
        }
        else
        {
          nullable1 = this.ManipulationDate;
          dateTime = nullable1.Value;
        }
        DateTime timePoint3 = dateTime;
        long valueIdentOfError = ValueIdent.GetValueIdentOfError(valueIdPartMeterType, ValueIdent.ValueIdentError.Manipulation);
        ValueIdent.AddValueToValueIdentList(ref valueList, timePoint3, valueIdentOfError, (object) 1);
      }
      if (this.DeviceType == DeviceTypes.SmokeDetector)
      {
        if (this.SmokeDetector == null)
          return valueList;
        long identCurrentState = this.GetValueIdentCurrentState();
        ref SortedList<long, SortedList<DateTime, ReadingValue>> local1 = ref valueList;
        timePoint1 = this.TimePoint;
        int year1 = timePoint1.Year;
        timePoint1 = this.TimePoint;
        int month1 = timePoint1.Month;
        timePoint1 = this.TimePoint;
        int day1 = timePoint1.Day;
        DateTime timePoint4 = new DateTime(year1, month1, day1);
        long valueIdent = identCurrentState;
        // ISSUE: variable of a boxed type
        __Boxed<ushort> local2 = (System.ValueType) (ushort) this.SmokeDetector.DailyEvents[1].Value;
        ValueIdent.AddValueToValueIdentList(ref local1, timePoint4, valueIdent, (object) local2);
        long identMonthlyState = this.GetValueIdentMonthlyState();
        SmokeDetectorEvent? nullable2;
        for (int index = 1; index < this.SmokeDetector.MonthlyEvents.Length; ++index)
        {
          if (this.SmokeDetector.MonthlyEvents[index].HasValue)
          {
            nullable2 = this.SmokeDetector.MonthlyEvents[index];
            SmokeDetectorEvent smokeDetectorEvent = ~(SmokeDetectorEvent.BatteryForewarning | SmokeDetectorEvent.BatteryFault | SmokeDetectorEvent.BatteryWarningRadio | SmokeDetectorEvent.SmokeChamberPollutionForewarning | SmokeDetectorEvent.SmokeChamberPollutionWarning | SmokeDetectorEvent.PushButtonFailure | SmokeDetectorEvent.HornFailure | SmokeDetectorEvent.RemovingDetection | SmokeDetectorEvent.TestAlarmReleased | SmokeDetectorEvent.SmokeAlarmReleased | SmokeDetectorEvent.IngressAperturesObstructionDetected | SmokeDetectorEvent.ObjectInSurroundingAreaDetected | SmokeDetectorEvent.LED_Failure | SmokeDetectorEvent.Bit13_undefined | SmokeDetectorEvent.Bit14_undefined | SmokeDetectorEvent.Bit15_undefined);
            if (!(nullable2.GetValueOrDefault() == smokeDetectorEvent & nullable2.HasValue))
            {
              SmokeDetectorEvent? monthlyEvent = this.SmokeDetector.MonthlyEvents[index];
              DateTime timePoint5;
              ref DateTime local3 = ref timePoint5;
              timePoint1 = this.TimePoint;
              int year2 = timePoint1.Year;
              timePoint1 = this.TimePoint;
              int month2 = timePoint1.Month;
              local3 = new DateTime(year2, month2, 1);
              int num = index - 1;
              timePoint5 = timePoint5.AddMonths(-num);
              ValueIdent.AddValueToValueIdentList(ref valueList, timePoint5, identMonthlyState, (object) (ushort) monthlyEvent.Value);
            }
          }
        }
        long valueIdentDailyState = this.GetValueIdentDailyState();
        for (int index = 1; index < this.SmokeDetector.DailyEvents.Length; ++index)
        {
          if (this.SmokeDetector.DailyEvents[index].HasValue)
          {
            nullable2 = this.SmokeDetector.DailyEvents[index];
            SmokeDetectorEvent smokeDetectorEvent = ~(SmokeDetectorEvent.BatteryForewarning | SmokeDetectorEvent.BatteryFault | SmokeDetectorEvent.BatteryWarningRadio | SmokeDetectorEvent.SmokeChamberPollutionForewarning | SmokeDetectorEvent.SmokeChamberPollutionWarning | SmokeDetectorEvent.PushButtonFailure | SmokeDetectorEvent.HornFailure | SmokeDetectorEvent.RemovingDetection | SmokeDetectorEvent.TestAlarmReleased | SmokeDetectorEvent.SmokeAlarmReleased | SmokeDetectorEvent.IngressAperturesObstructionDetected | SmokeDetectorEvent.ObjectInSurroundingAreaDetected | SmokeDetectorEvent.LED_Failure | SmokeDetectorEvent.Bit13_undefined | SmokeDetectorEvent.Bit14_undefined | SmokeDetectorEvent.Bit15_undefined);
            if (!(nullable2.GetValueOrDefault() == smokeDetectorEvent & nullable2.HasValue))
            {
              SmokeDetectorEvent? dailyEvent = this.SmokeDetector.DailyEvents[index];
              DateTime timePoint6;
              ref DateTime local4 = ref timePoint6;
              timePoint1 = this.TimePoint;
              int year3 = timePoint1.Year;
              timePoint1 = this.TimePoint;
              int month3 = timePoint1.Month;
              timePoint1 = this.TimePoint;
              int day2 = timePoint1.Day;
              local4 = new DateTime(year3, month3, day2);
              int num = index - 1;
              timePoint6 = timePoint6.AddDays((double) -num);
              ValueIdent.AddValueToValueIdentList(ref valueList, timePoint6, valueIdentDailyState, (object) (ushort) dailyEvent.Value);
            }
          }
        }
      }
      else
      {
        int num1;
        if (this.DueDateValue.HasValue)
        {
          nullable1 = this.DueDate;
          num1 = nullable1.HasValue ? 1 : 0;
        }
        else
          num1 = 0;
        ushort? nullable3;
        if (num1 != 0)
        {
          if (this.GetValueIdPart_MeterType() != 0 && this.ScaleFactor.HasValue)
          {
            if (this.IsHeatCostAllocator)
            {
              ref SortedList<long, SortedList<DateTime, ReadingValue>> local5 = ref valueList;
              nullable1 = this.DueDate;
              DateTime timePoint7 = nullable1.Value;
              long identOfDueDateValue = this.GetValueIdentOfDueDateValue(true, new InputUnitsIndex?());
              Decimal num2 = this.DueDateValue.Value;
              nullable3 = this.K;
              Decimal num3 = (Decimal) nullable3.Value / 1000M;
              // ISSUE: variable of a boxed type
              __Boxed<Decimal> local6 = (System.ValueType) (num2 * num3);
              ValueIdent.AddValueToValueIdentList(ref local5, timePoint7, identOfDueDateValue, (object) local6);
            }
            else if (this.Unit.Value == InputUnitsIndex.ImpUnit_0L)
            {
              ref SortedList<long, SortedList<DateTime, ReadingValue>> local7 = ref valueList;
              nullable1 = this.DueDate;
              DateTime timePoint8 = nullable1.Value;
              long identOfDueDateValue = this.GetValueIdentOfDueDateValue(true, this.Unit);
              // ISSUE: variable of a boxed type
              __Boxed<Decimal> local8 = (System.ValueType) (this.DueDateValue.Value / 1000M * (Decimal) this.ScaleFactor.Value);
              ValueIdent.AddValueToValueIdentList(ref local7, timePoint8, identOfDueDateValue, (object) local8);
            }
          }
          ref SortedList<long, SortedList<DateTime, ReadingValue>> local9 = ref valueList;
          nullable1 = this.DueDate;
          DateTime timePoint9 = nullable1.Value;
          long identOfDueDateValue1 = this.GetValueIdentOfDueDateValue(false, new InputUnitsIndex?());
          // ISSUE: variable of a boxed type
          __Boxed<Decimal> local10 = (System.ValueType) this.DueDateValue.Value;
          ValueIdent.AddValueToValueIdentList(ref local9, timePoint9, identOfDueDateValue1, (object) local10);
        }
        if (this.CurrentValue.HasValue)
        {
          if (this.GetValueIdPart_MeterType() != 0)
          {
            nullable3 = this.ScaleFactor;
            if (nullable3.HasValue)
            {
              if (this.IsHeatCostAllocator)
              {
                ref SortedList<long, SortedList<DateTime, ReadingValue>> local11 = ref valueList;
                DateTime timePoint10 = this.TimePoint;
                long identOfCurrentValue = this.GetValueIdentOfCurrentValue(true, new InputUnitsIndex?());
                Decimal num4 = this.CurrentValue.Value;
                nullable3 = this.K;
                Decimal num5 = (Decimal) nullable3.Value / 1000M;
                // ISSUE: variable of a boxed type
                __Boxed<Decimal> local12 = (System.ValueType) (num4 * num5);
                ValueIdent.AddValueToValueIdentList(ref local11, timePoint10, identOfCurrentValue, (object) local12);
              }
              else if (this.Unit.Value == InputUnitsIndex.ImpUnit_0L)
              {
                ref SortedList<long, SortedList<DateTime, ReadingValue>> local13 = ref valueList;
                DateTime timePoint11 = this.TimePoint;
                long identOfCurrentValue = this.GetValueIdentOfCurrentValue(true, this.Unit);
                Decimal num6 = this.CurrentValue.Value / 1000M;
                nullable3 = this.ScaleFactor;
                Decimal num7 = (Decimal) nullable3.Value;
                // ISSUE: variable of a boxed type
                __Boxed<Decimal> local14 = (System.ValueType) (num6 * num7);
                ValueIdent.AddValueToValueIdentList(ref local13, timePoint11, identOfCurrentValue, (object) local14);
              }
            }
          }
          ValueIdent.AddValueToValueIdentList(ref valueList, this.TimePoint, this.GetValueIdentOfCurrentValue(false, new InputUnitsIndex?()), (object) this.CurrentValue.Value);
        }
        nullable1 = this.ResetDate;
        if (nullable1.HasValue)
        {
          long identOfResetDate = this.GetValueIdentOfResetDate();
          ref SortedList<long, SortedList<DateTime, ReadingValue>> local = ref valueList;
          nullable1 = this.ResetDate;
          DateTime timePoint12 = nullable1.Value;
          long valueIdent = identOfResetDate;
          nullable1 = this.ResetDate;
          timePoint1 = nullable1.Value;
          // ISSUE: variable of a boxed type
          __Boxed<double> oaDate = (System.ValueType) timePoint1.ToOADate();
          ValueIdent.AddValueToValueIdentList(ref local, timePoint12, valueIdent, (object) oaDate);
        }
        if (this.Months != null && this.Months.Count > 0)
        {
          for (int key = 0; key < this.Months.Count; ++key)
          {
            Decimal? nullable4 = this.Months[key].Value;
            if (nullable4.HasValue)
            {
              if (this.GetValueIdPart_MeterType() != 0)
              {
                nullable3 = this.ScaleFactor;
                Decimal? nullable5;
                if (nullable3.HasValue)
                {
                  if (this.IsHeatCostAllocator)
                  {
                    ref SortedList<long, SortedList<DateTime, ReadingValue>> local15 = ref valueList;
                    DateTime timePoint13 = this.Months[key].TimePoint;
                    long identOfMonthValue = this.GetValueIdentOfMonthValue(true, new InputUnitsIndex?());
                    nullable4 = this.Months[key].Value;
                    nullable3 = this.K;
                    Decimal num8 = (Decimal) nullable3.Value / 1000M;
                    Decimal? nullable6;
                    if (!nullable4.HasValue)
                    {
                      nullable5 = new Decimal?();
                      nullable6 = nullable5;
                    }
                    else
                      nullable6 = new Decimal?(nullable4.GetValueOrDefault() * num8);
                    // ISSUE: variable of a boxed type
                    __Boxed<Decimal?> local16 = (System.ValueType) nullable6;
                    ValueIdent.AddValueToValueIdentList(ref local15, timePoint13, identOfMonthValue, (object) local16);
                  }
                  else if (this.Unit.Value == InputUnitsIndex.ImpUnit_0L)
                  {
                    ref SortedList<long, SortedList<DateTime, ReadingValue>> local17 = ref valueList;
                    DateTime timePoint14 = this.Months[key].TimePoint;
                    long identOfMonthValue = this.GetValueIdentOfMonthValue(true, this.Unit);
                    nullable5 = this.Months[key].Value;
                    Decimal num9 = 1000M;
                    nullable4 = nullable5.HasValue ? new Decimal?(nullable5.GetValueOrDefault() / num9) : new Decimal?();
                    nullable3 = this.ScaleFactor;
                    Decimal num10 = (Decimal) nullable3.Value;
                    Decimal? nullable7;
                    if (!nullable4.HasValue)
                    {
                      nullable5 = new Decimal?();
                      nullable7 = nullable5;
                    }
                    else
                      nullable7 = new Decimal?(nullable4.GetValueOrDefault() * num10);
                    // ISSUE: variable of a boxed type
                    __Boxed<Decimal?> local18 = (System.ValueType) nullable7;
                    ValueIdent.AddValueToValueIdentList(ref local17, timePoint14, identOfMonthValue, (object) local18);
                  }
                }
              }
              ValueIdent.AddValueToValueIdentList(ref valueList, this.Months[key].TimePoint, this.GetValueIdentOfMonthValue(false, new InputUnitsIndex?()), (object) this.Months[key].Value);
            }
          }
        }
      }
      if (this.RSSI_dBm.HasValue)
        ValueIdent.AddValueToValueIdentList(ref valueList, this.TimePoint, this.GetValueIdentOfSignalStrengthValue(), (object) this.RSSI_dBm.Value);
      return valueList;
    }

    internal override SortedList<long, SortedList<DateTime, ReadingValue>> Merge(
      SortedList<long, SortedList<DateTime, ReadingValue>> oldMeterValues)
    {
      SortedList<long, SortedList<DateTime, ReadingValue>> values = this.GetValues();
      if (values == null)
        return oldMeterValues;
      if (oldMeterValues == null)
        return values;
      if (this.DeviceType == DeviceTypes.SmokeDetector)
      {
        long valueIdentOfError1 = ValueIdent.GetValueIdentOfError(this.GetValueIdPart_MeterType(), ValueIdent.ValueIdentError.DeviceError);
        RadioDevicePacket.MergeMeterValues(oldMeterValues, values, valueIdentOfError1);
        long valueIdentOfError2 = ValueIdent.GetValueIdentOfError(this.GetValueIdPart_MeterType(), ValueIdent.ValueIdentError.Manipulation);
        RadioDevicePacket.MergeMeterValues(oldMeterValues, values, valueIdentOfError2);
        long identCurrentState = this.GetValueIdentCurrentState();
        RadioDevicePacket.MergeMeterValues(oldMeterValues, values, identCurrentState);
        long identMonthlyState = this.GetValueIdentMonthlyState();
        RadioDevicePacket.MergeMeterValues(oldMeterValues, values, identMonthlyState);
        long valueIdentDailyState = this.GetValueIdentDailyState();
        RadioDevicePacket.MergeMeterValues(oldMeterValues, values, valueIdentDailyState);
      }
      else
      {
        long valueIdentOfError3 = ValueIdent.GetValueIdentOfError(this.GetValueIdPart_MeterType(), ValueIdent.ValueIdentError.DeviceError);
        if (oldMeterValues.ContainsKey(valueIdentOfError3) && values.ContainsKey(valueIdentOfError3))
          oldMeterValues[valueIdentOfError3] = values[valueIdentOfError3];
        else if (!oldMeterValues.ContainsKey(valueIdentOfError3) && values.ContainsKey(valueIdentOfError3))
          oldMeterValues.Add(valueIdentOfError3, values[valueIdentOfError3]);
        long valueIdentOfError4 = ValueIdent.GetValueIdentOfError(this.GetValueIdPart_MeterType(), ValueIdent.ValueIdentError.Manipulation);
        if (oldMeterValues.ContainsKey(valueIdentOfError4) && values.ContainsKey(valueIdentOfError4))
          oldMeterValues[valueIdentOfError4] = values[valueIdentOfError4];
        else if (!oldMeterValues.ContainsKey(valueIdentOfError4) && values.ContainsKey(valueIdentOfError4))
          oldMeterValues.Add(valueIdentOfError4, values[valueIdentOfError4]);
        long identOfDueDateValue1 = this.GetValueIdentOfDueDateValue(false, new InputUnitsIndex?());
        if (oldMeterValues.ContainsKey(identOfDueDateValue1) && values.ContainsKey(identOfDueDateValue1))
          oldMeterValues[identOfDueDateValue1] = values[identOfDueDateValue1];
        else if (!oldMeterValues.ContainsKey(identOfDueDateValue1) && values.ContainsKey(identOfDueDateValue1))
          oldMeterValues.Add(identOfDueDateValue1, values[identOfDueDateValue1]);
        long identOfCurrentValue1 = this.GetValueIdentOfCurrentValue(false, new InputUnitsIndex?());
        if (oldMeterValues.ContainsKey(identOfCurrentValue1) && values.ContainsKey(identOfCurrentValue1))
          oldMeterValues[identOfCurrentValue1] = values[identOfCurrentValue1];
        else if (!oldMeterValues.ContainsKey(identOfCurrentValue1) && values.ContainsKey(identOfCurrentValue1))
          oldMeterValues.Add(identOfCurrentValue1, values[identOfCurrentValue1]);
        long identOfResetDate = this.GetValueIdentOfResetDate();
        if (oldMeterValues.ContainsKey(identOfResetDate) && values.ContainsKey(identOfResetDate))
          oldMeterValues[identOfResetDate] = values[identOfResetDate];
        else if (!oldMeterValues.ContainsKey(identOfResetDate) && values.ContainsKey(identOfResetDate))
          oldMeterValues.Add(identOfResetDate, values[identOfResetDate]);
        long identOfMonthValue1 = this.GetValueIdentOfMonthValue(false, new InputUnitsIndex?());
        RadioDevicePacket.MergeMeterValues(oldMeterValues, values, identOfMonthValue1);
        if (this.GetValueIdPart_MeterType() != 0)
        {
          long identOfDueDateValue2 = this.GetValueIdentOfDueDateValue(true, this.IsHeatCostAllocator ? new InputUnitsIndex?() : this.Unit);
          if (oldMeterValues.ContainsKey(identOfDueDateValue2) && values.ContainsKey(identOfDueDateValue2))
            oldMeterValues[identOfDueDateValue2] = values[identOfDueDateValue2];
          else if (!oldMeterValues.ContainsKey(identOfDueDateValue2) && values.ContainsKey(identOfDueDateValue2))
            oldMeterValues.Add(identOfDueDateValue2, values[identOfDueDateValue2]);
          long identOfCurrentValue2 = this.GetValueIdentOfCurrentValue(true, this.IsHeatCostAllocator ? new InputUnitsIndex?() : this.Unit);
          if (oldMeterValues.ContainsKey(identOfCurrentValue2) && values.ContainsKey(identOfCurrentValue2))
            oldMeterValues[identOfCurrentValue2] = values[identOfCurrentValue2];
          else if (!oldMeterValues.ContainsKey(identOfCurrentValue2) && values.ContainsKey(identOfCurrentValue2))
            oldMeterValues.Add(identOfCurrentValue2, values[identOfCurrentValue2]);
          long identOfMonthValue2 = this.GetValueIdentOfMonthValue(true, this.IsHeatCostAllocator ? new InputUnitsIndex?() : this.Unit);
          RadioDevicePacket.MergeMeterValues(oldMeterValues, values, identOfMonthValue2);
        }
      }
      long signalStrengthValue = this.GetValueIdentOfSignalStrengthValue();
      if (oldMeterValues.ContainsKey(signalStrengthValue) && values.ContainsKey(signalStrengthValue))
        oldMeterValues[signalStrengthValue] = values[signalStrengthValue];
      else if (!oldMeterValues.ContainsKey(signalStrengthValue) && values.ContainsKey(signalStrengthValue))
        oldMeterValues.Add(signalStrengthValue, values[signalStrengthValue]);
      return oldMeterValues;
    }

    private bool ParseSmokeDetector(out int offset)
    {
      offset = 13;
      this.SmokeDetector = new RadioPacketRadio3SmokeDetector();
      this.SmokeDetector.DateOfFirstActivation = this.DueDate;
      this.DueDate = new DateTime?(DateTime.MinValue);
      this.SmokeDetector.DailyEvents[1] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      this.SmokeDetector.MonthlyEvents[1] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      this.SmokeDetector.MonthlyEvents[(int) this.PacketNr + 2] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      this.SmokeDetector.MonthlyEvents[this.PacketNr <= (byte) 5 ? (int) this.PacketNr + 10 : (int) this.PacketNr + 11] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      this.SmokeDetector.DailyEvents[this.PacketNr <= (byte) 3 ? (int) this.PacketNr + 1 : (int) this.PacketNr - 3] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      this.SmokeDetector.DailyEvents[this.PacketNr <= (byte) 3 ? (int) this.PacketNr + 5 : (int) this.PacketNr + 1] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      this.SmokeDetector.DailyEvents[this.PacketNr <= (byte) 3 ? (int) this.PacketNr + 9 : (int) this.PacketNr + 5] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      this.SmokeDetector.DailyEvents[this.PacketNr <= (byte) 3 ? (int) this.PacketNr + 13 : (int) this.PacketNr + 9] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      this.SmokeDetector.DailyEvents[(int) this.PacketNr + 17] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      this.SmokeDetector.DailyEvents[(int) this.PacketNr + 25] = new SmokeDetectorEvent?((SmokeDetectorEvent) BitConverter.ToUInt16(new byte[2]
      {
        this.Buffer[offset + 1],
        this.Buffer[offset]
      }, 0));
      offset += 2;
      return true;
    }

    private long GetValueIdentCurrentState()
    {
      return ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.StatusNumber, ValueIdent.ValueIdPart_MeterType.SmokeDetector, ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.BitCompression, (object) ValueIdent.ValueIdPart_Index.Any);
    }

    private long GetValueIdentMonthlyState()
    {
      return ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.StatusNumber, ValueIdent.ValueIdPart_MeterType.SmokeDetector, ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.Month, ValueIdent.ValueIdPart_Creation.BitCompression, (object) ValueIdent.ValueIdPart_Index.Any);
    }

    private long GetValueIdentDailyState()
    {
      return ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.StatusNumber, ValueIdent.ValueIdPart_MeterType.SmokeDetector, ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.Day, ValueIdent.ValueIdPart_Creation.BitCompression, (object) ValueIdent.ValueIdPart_Index.Any);
    }

    private long GetValueIdentOfResetDate()
    {
      return ValueIdent.GetValueIdForValueEnum(ValueIdent.ValueIdPart_PhysicalQuantity.DateTime, this.GetValueIdPart_MeterType(), ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.DueDate, ValueIdent.ValueIdPart_StorageInterval.DueDate, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
    }

    private bool IsValid(byte[] packet)
    {
      if ((int) packet[0] != (int) packet[6] || (int) packet[1] != (int) packet[7] || (int) packet[2] != (int) packet[8] || (int) packet[3] != (int) packet[9] || (int) packet[4] != (int) packet[10] || (int) packet[5] != (int) packet[11])
        return true;
      RadioPacketRadio3.logger.Fatal("INVALID PACKET: " + Util.ByteArrayToHexString(packet));
      return false;
    }

    public enum EncodingType
    {
      Unknown,
      Binary_2Byte,
      BCD_4Byte,
    }

    private enum RadioPacketType : byte
    {
      Scenario1Short = 32, // 0x20
      WalkByShort = 38, // 0x26
      Scenario2Short = 44, // 0x2C
      Scenario1Long = 47, // 0x2F
      WalkByLong = 53, // 0x35
      Scenario2Long = 54, // 0x36
    }

    public sealed class MonthValue
    {
      public DateTime TimePoint { get; set; }

      public Decimal? Value { get; set; }
    }

    public sealed class MonthValueCollection : Dictionary<int, RadioPacketRadio3.MonthValue>
    {
      public MonthValueCollection(int count, DateTime dateOfCurrentMonth)
      {
        for (int key = 0; key < count; ++key)
          this.Add(key, new RadioPacketRadio3.MonthValue()
          {
            TimePoint = dateOfCurrentMonth.AddMonths(-key)
          });
      }
    }
  }
}


--- RadioPacketRadio3SmokeDetector.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioPacketRadio3SmokeDetector
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;

#nullable disable
namespace DeviceCollector
{
  public sealed class RadioPacketRadio3SmokeDetector
  {
    public DateTime? DateOfFirstActivation { get; set; }

    public SmokeDetectorEvent?[] MonthlyEvents { get; set; }

    public SmokeDetectorEvent?[] DailyEvents { get; set; }

    public RadioPacketRadio3SmokeDetector()
    {
      this.MonthlyEvents = new SmokeDetectorEvent?[19];
      this.DailyEvents = new SmokeDetectorEvent?[33];
    }
  }
}


--- RadioPacketWirelessMBus.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioPacketWirelessMBus
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NLog;
using StartupLib;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public sealed class RadioPacketWirelessMBus : RadioDevicePacket
  {
    private static int HEADER_SIZE = 10;
    private static Logger logger = LogManager.GetLogger(nameof (RadioPacketWirelessMBus));
    private byte lengthOfPacket;
    private byte controlField;
    private byte protocolValue;

    public RadioPacketWirelessMBus.PacketType ControlFieldType { get; private set; }

    public new string Manufacturer { get; private set; }

    public byte VersionNumber { get; private set; }

    public byte Medium { get; private set; }

    public string MediumString => MBusDevice.GetMediaString(this.Medium);

    public RadioPacketWirelessMBus.ProtocolType Protocol { get; set; }

    public byte? ACC { get; set; }

    public byte? STS { get; set; }

    public ushort? ConfWord { get; set; }

    public byte[] Data { get; set; }

    public string ZDF { get; set; }

    public long? FunkIdSecundary { get; set; }

    public string ManufacturerSecundary { get; set; }

    public byte? VersionNumberSecundary { get; set; }

    public byte? MediumSecundary { get; set; }

    public bool? Synchronous { get; set; }

    public override bool Parse(byte[] packet, DateTime receivedAt, bool hasRssi)
    {
      this.ZDF = string.Empty;
      if (!UserManager.CheckPermission(UserRights.Rights.WirelessMBus))
        return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission of wireless M-Bus!");
      if (packet == null)
        throw new ArgumentNullException("Input parameter 'packet' can not be null!");
      this.ReceivedAt = receivedAt;
      this.ZDF = this.ZDF + "RTIME;" + receivedAt.ToString(FixedFormates.TheFormates.DateTimeFormat.FullDateTimePattern) + ";";
      RadioPacketWirelessMBus.logger.Trace(Util.ByteArrayToHexString(packet));
      this.Buffer = packet;
      if (!this.DecodeHeader())
        return false;
      this.ZDF = this.ZDF + "SID;" + this.FunkId.ToString() + ";";
      this.ZDF = this.ZDF + "MAN;" + this.Manufacturer + ";";
      this.ZDF = this.ZDF + "GEN;" + this.VersionNumber.ToString() + ";";
      this.ZDF = this.ZDF + "MED;" + this.MediumString + ";";
      base.Manufacturer = this.Manufacturer;
      this.Version = this.VersionNumber.ToString();
      this.Medium = this.MediumString;
      if (this.Buffer.Length == RadioPacketWirelessMBus.HEADER_SIZE)
        return true;
      int headerSize = RadioPacketWirelessMBus.HEADER_SIZE;
      this.protocolValue = this.Buffer[headerSize];
      byte[] buffer1 = this.Buffer;
      int index1 = headerSize;
      int num1 = index1 + 1;
      this.Protocol = this.DecodeProtocolType(buffer1[index1]);
      if (!this.DecodeData())
        return false;
      int num2 = (int) this.lengthOfPacket + 1;
      if (hasRssi && this.Buffer.Length >= num2 + 2)
      {
        byte[] buffer2 = this.Buffer;
        int index2 = num2;
        int num3 = index2 + 1;
        this.RSSI = new byte?(buffer2[index2]);
        this.ZDF = this.ZDF + "RSSI;" + this.RSSI_dBm.ToString() + ";";
        byte[] buffer3 = this.Buffer;
        int index3 = num3;
        int startIndex = index3 + 1;
        this.LQI = new byte?(buffer3[index3]);
        if (this.Buffer.Length >= startIndex + 4)
          this.MCT = BitConverter.ToUInt32(this.Buffer, startIndex);
        this.IsCrcOk = ((int) this.LQI.Value & 128) == 128;
        if (!this.IsCrcOk)
          return false;
      }
      else
        this.IsCrcOk = true;
      return true;
    }

    private bool DecodeHeader()
    {
      if (this.Buffer == null)
        throw new ArgumentNullException("Buffer can not be null!");
      if (this.Buffer.Length < RadioPacketWirelessMBus.HEADER_SIZE)
        return false;
      int num1 = 0;
      byte[] buffer1 = this.Buffer;
      int index1 = num1;
      int index2 = index1 + 1;
      this.lengthOfPacket = buffer1[index1];
      this.controlField = this.Buffer[index2];
      byte[] buffer2 = this.Buffer;
      int index3 = index2;
      int startIndex1 = index3 + 1;
      this.ControlFieldType = this.DecodePacketType(buffer2[index3]);
      this.Manufacturer = MBusDevice.GetManufacturer(BitConverter.ToInt16(this.Buffer, startIndex1));
      int startIndex2 = startIndex1 + 2;
      this.FunkId = Util.ConvertBcdInt64ToInt64((long) BitConverter.ToUInt32(this.Buffer, startIndex2));
      int num2 = startIndex2 + 4;
      byte[] buffer3 = this.Buffer;
      int index4 = num2;
      int num3 = index4 + 1;
      this.VersionNumber = buffer3[index4];
      byte[] buffer4 = this.Buffer;
      int index5 = num3;
      int num4 = index5 + 1;
      this.Medium = buffer4[index5];
      return true;
    }

    private bool DecodeData()
    {
      if ((int) this.lengthOfPacket <= RadioPacketWirelessMBus.HEADER_SIZE)
        return false;
      int startIndex1 = RadioPacketWirelessMBus.HEADER_SIZE + 1;
      long? funkIdSecundary;
      if (this.Protocol == RadioPacketWirelessMBus.ProtocolType.MBusWithFullHeader)
      {
        this.FunkIdSecundary = new long?(Util.ConvertBcdInt64ToInt64((long) BitConverter.ToUInt32(this.Buffer, startIndex1)));
        int startIndex2 = startIndex1 + 4;
        string zdf = this.ZDF;
        funkIdSecundary = this.FunkIdSecundary;
        string str = funkIdSecundary.ToString();
        this.ZDF = zdf + "SEC_ID;" + str + ";";
        funkIdSecundary = this.FunkIdSecundary;
        this.FunkId = funkIdSecundary.Value;
        this.ManufacturerSecundary = MBusDevice.GetManufacturer(BitConverter.ToInt16(this.Buffer, startIndex2));
        int num1 = startIndex2 + 2;
        this.ZDF = this.ZDF + "SEC_MAN;" + this.ManufacturerSecundary + ";";
        byte[] buffer1 = this.Buffer;
        int index1 = num1;
        int num2 = index1 + 1;
        this.VersionNumberSecundary = new byte?(buffer1[index1]);
        byte[] buffer2 = this.Buffer;
        int index2 = num2;
        startIndex1 = index2 + 1;
        this.MediumSecundary = new byte?(buffer2[index2]);
        this.ZDF = this.ZDF + "SEC_VER;" + this.VersionNumberSecundary.ToString() + ";";
        this.ZDF = this.ZDF + "SEC_MED;" + MBusDevice.GetMediaString(this.MediumSecundary.Value) + ";";
      }
      byte[] buffer3 = this.Buffer;
      int index3 = startIndex1;
      int num3 = index3 + 1;
      this.ACC = new byte?(buffer3[index3]);
      byte[] buffer4 = this.Buffer;
      int index4 = num3;
      int num4 = index4 + 1;
      this.STS = new byte?(buffer4[index4]);
      byte[] buffer5 = this.Buffer;
      int index5 = num4;
      int num5 = index5 + 1;
      this.ConfWord = new ushort?((ushort) buffer5[index5]);
      ushort? nullable1 = this.ConfWord;
      int? nullable2 = nullable1.HasValue ? new int?((int) nullable1.GetValueOrDefault()) : new int?();
      byte[] buffer6 = this.Buffer;
      int index6 = num5;
      int srcOffset1 = index6 + 1;
      int num6 = (int) (ushort) ((uint) buffer6[index6] << 8);
      ushort? nullable3;
      if (!nullable2.HasValue)
      {
        nullable1 = new ushort?();
        nullable3 = nullable1;
      }
      else
        nullable3 = new ushort?((ushort) (nullable2.GetValueOrDefault() | num6));
      this.ConfWord = nullable3;
      nullable1 = this.ConfWord;
      int? nullable4;
      if (!nullable1.HasValue)
      {
        nullable2 = new int?();
        nullable4 = nullable2;
      }
      else
        nullable4 = new int?(((int) nullable1.GetValueOrDefault() & 3840) >> 8);
      int? nullable5 = nullable4;
      nullable1 = this.ConfWord;
      int? nullable6;
      if (!nullable1.HasValue)
      {
        nullable2 = new int?();
        nullable6 = nullable2;
      }
      else
        nullable6 = new int?((((int) nullable1.GetValueOrDefault() & 240) >> 4) * 16);
      nullable2 = nullable6;
      int length = nullable2.Value;
      nullable1 = this.ConfWord;
      int? nullable7;
      if (!nullable1.HasValue)
      {
        nullable2 = new int?();
        nullable7 = nullable2;
      }
      else
        nullable7 = new int?(((int) nullable1.GetValueOrDefault() & 8192) >> 13);
      this.Synchronous = new bool?(Convert.ToBoolean((object) nullable7));
      this.ZDF = this.ZDF + "SYNCHRONOUS;" + this.Synchronous.ToString() + ";";
      string zdf1 = this.ZDF;
      nullable2 = nullable5;
      string str1 = nullable2.ToString();
      this.ZDF = zdf1 + "ENCRYPTMODE;" + str1 + ";";
      byte num7 = this.Buffer[srcOffset1];
      byte num8 = this.Buffer[srcOffset1 + 1];
      if (num7 == (byte) 47 && num8 == (byte) 47)
      {
        int srcOffset2 = srcOffset1 + 1 + 1;
        this.Data = new byte[(int) this.lengthOfPacket - srcOffset2 + 1];
        System.Buffer.BlockCopy((Array) this.Buffer, srcOffset2, (Array) this.Data, 0, this.Data.Length);
        this.ZDF += MBusDevice.ParseMBusDifVif(this.Data);
      }
      else
      {
        byte num9 = this.ACC.Value;
        byte[] bytes1;
        byte[] bytes2;
        byte versionNumber;
        byte medium;
        if (this.Protocol == RadioPacketWirelessMBus.ProtocolType.MBusWithFullHeader)
        {
          funkIdSecundary = this.FunkIdSecundary;
          bytes1 = BitConverter.GetBytes(Util.ConvertUnt32ToBcdUInt32((uint) funkIdSecundary.Value));
          bytes2 = BitConverter.GetBytes(MBusDevice.GetManufacturerCode(this.ManufacturerSecundary));
          versionNumber = this.VersionNumberSecundary.Value;
          medium = this.MediumSecundary.Value;
        }
        else
        {
          bytes1 = BitConverter.GetBytes(Util.ConvertUnt32ToBcdUInt32((uint) this.FunkId));
          bytes2 = BitConverter.GetBytes(MBusDevice.GetManufacturerCode(this.Manufacturer));
          versionNumber = this.VersionNumber;
          medium = this.Medium;
        }
        nullable2 = nullable5;
        int num10 = 5;
        if (nullable2.GetValueOrDefault() == num10 & nullable2.HasValue)
        {
          byte[] IV = new byte[16]
          {
            bytes2[0],
            bytes2[1],
            bytes1[0],
            bytes1[1],
            bytes1[2],
            bytes1[3],
            versionNumber,
            medium,
            num9,
            num9,
            num9,
            num9,
            num9,
            num9,
            num9,
            num9
          };
          try
          {
            this.Data = new byte[length];
            System.Buffer.BlockCopy((Array) this.Buffer, srcOffset1, (Array) this.Data, 0, this.Data.Length);
            byte[] key = (byte[]) null;
            if (UserManager.CheckPermission("ZennerDefaultKey"))
              key = Util.HexStringToByteArray("5A8470C4806F4A87CEF4D5F2D985AB18");
            if (key == null)
            {
              this.ZDF = this.ZDF + "AES;" + Util.ByteArrayToHexString(this.Data) + ";";
            }
            else
            {
              this.Data = Util.DecryptCBC_AES_128(key, IV, this.Data);
              if (this.Data[0] == (byte) 47 && this.Data[1] == (byte) 47)
              {
                List<byte> byteList = new List<byte>((IEnumerable<byte>) this.Data);
                byteList.RemoveAt(0);
                byteList.RemoveAt(0);
                this.Data = byteList.ToArray();
                this.ZDF += MBusDevice.ParseMBusDifVif(this.Data);
              }
              else
                this.ZDF = this.ZDF + "AES;" + Util.ByteArrayToHexString(this.Data) + ";";
            }
          }
          catch (Exception ex)
          {
            RadioPacketWirelessMBus.logger.Error("Error occurred while decrypt the AES data! " + ex.Message);
            this.ZDF = this.ZDF + "AES;" + Util.ByteArrayToHexString(this.Data) + ";";
          }
        }
      }
      return true;
    }

    private RadioPacketWirelessMBus.PacketType DecodePacketType(byte value)
    {
      return Enum.IsDefined(typeof (RadioPacketWirelessMBus.PacketType), (object) value) ? (RadioPacketWirelessMBus.PacketType) Enum.ToObject(typeof (RadioPacketWirelessMBus.PacketType), value) : RadioPacketWirelessMBus.PacketType.S2;
    }

    private RadioPacketWirelessMBus.ProtocolType DecodeProtocolType(byte value)
    {
      if (Enum.IsDefined(typeof (RadioPacketWirelessMBus.ProtocolType), (object) value))
        return (RadioPacketWirelessMBus.ProtocolType) Enum.ToObject(typeof (RadioPacketWirelessMBus.ProtocolType), value);
      return value >= (byte) 160 || value <= (byte) 183 ? RadioPacketWirelessMBus.ProtocolType.ManufacturerSpecific : RadioPacketWirelessMBus.ProtocolType.Unknown;
    }

    public override string ToString() => this.ZDF.ToString();

    public override SortedList<long, SortedList<DateTime, ReadingValue>> GetValues()
    {
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      TranslationRulesManager.Instance?.TryParse(this.ZDF, 0, ref valueList);
      if (this.RSSI_dBm.HasValue)
        ValueIdent.AddValueToValueIdentList(ref valueList, this.ReceivedAt, this.GetValueIdentOfSignalStrengthValue(), (object) this.RSSI_dBm.Value);
      return valueList;
    }

    internal override SortedList<long, SortedList<DateTime, ReadingValue>> Merge(
      SortedList<long, SortedList<DateTime, ReadingValue>> oldMeterValues)
    {
      return this.GetValues();
    }

    public enum PacketType : byte
    {
      S2_Install = 6,
      S2 = 7,
      SendNoReply = 68, // 0x44
      InstallationTransmit = 70, // 0x46
    }

    public enum ProtocolType : byte
    {
      ReadoutDeviceToMeter = 81, // 0x51
      AlarmReport = 113, // 0x71
      MBusWithFullHeader = 114, // 0x72
      MBusWithoutHeader = 120, // 0x78
      MBusWithShortHeader = 122, // 0x7A
      Repeater = 129, // 0x81
      ForFutureUse = 130, // 0x82
      ManufacturerSpecific = 131, // 0x83
      Unknown = 132, // 0x84
    }
  }
}


--- RadioReader.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioReader
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using CommunicationPort.Functions;
using CommunicationPort.UserInterface;
using NLog;
using PlugInLib;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public sealed class RadioReader
  {
    private static Logger logger = LogManager.GetLogger(nameof (RadioReader));
    private DateTime receiveStartTime;
    private CommunicationByMinoConnect micon;
    private DeviceCollectorFunctions deviceCollector;
    private readonly GMM_EventArgs WAIT_EVENT = new GMM_EventArgs(GMM_EventArgs.MessageType.Wait);

    private CommunicationByMinoConnect GetMicon()
    {
      if (this.micon != null)
        return this.micon;
      SortedList<string, string> sortedList = this.deviceCollector != null ? this.deviceCollector.GetAsyncComSettings() : throw new ArgumentNullException("deviceCollector");
      this.deviceCollector.ComClose();
      GmmPlugIn plugIn = PlugInLoader.GetPlugIn("CommunicationPort");
      if (plugIn != null)
      {
        CommunicationPortWindowFunctions portWindowFunctions = plugIn.GetPluginInfo().Interface as CommunicationPortWindowFunctions;
        portWindowFunctions.SetReadoutConfiguration(sortedList);
        this.micon = portWindowFunctions.portFunctions.GetCommunicationByMinoConnect();
      }
      else
      {
        CommunicationPortFunctions communicationPortFunctions = new CommunicationPortFunctions();
        communicationPortFunctions.SetReadoutConfiguration(sortedList);
        this.micon = communicationPortFunctions.GetCommunicationByMinoConnect();
      }
      return this.micon;
    }

    public event EventHandler<RadioPacket> OnPacketReceived;

    public event EventHandlerEx<int> OnProgress;

    public event System.EventHandler ConnectionLost;

    public bool IsBusy { get; private set; }

    public RadioReader(DeviceCollectorFunctions deviceCollector)
    {
      this.deviceCollector = deviceCollector;
      this.IsBusy = false;
    }

    public Dictionary<long, RadioDataSet> ReceivedData { get; private set; }

    public void Open() => this.GetMicon().Open();

    public void Close() => this.GetMicon().Close();

    public List<GlobalDeviceId> Read()
    {
      return this.deviceCollector.MyBusMode == BusMode.MinomatRadioTest ? this.Read(new int?(16)) : this.Read(new int?());
    }

    public List<GlobalDeviceId> Read(int? timeoutInSec)
    {
      if (this.IsBusy)
      {
        RadioReader.logger.Error("Abort an asynchronous method call! The WalkByReader is busy.");
        return (List<GlobalDeviceId>) null;
      }
      this.receiveStartTime = DateTime.Now;
      radioList = (RadioList) null;
      try
      {
        this.IsBusy = true;
        ZR_ClassLibMessages.ClearErrors();
        this.deviceCollector.BreakRequest = false;
        if (!(this.deviceCollector.GetDeviceListForBusMode() is RadioList radioList))
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Wrong DeviceList by radio!");
          return (List<GlobalDeviceId>) null;
        }
        radioList.ClearReceivedPackets();
        this.ReceivedData = radioList.ReceivedData;
        if (!this.StartRadio())
          return (List<GlobalDeviceId>) null;
        CommunicationByMinoConnect micon = this.GetMicon();
        micon.DiscardInBuffer();
        int e = 0;
        while (!this.deviceCollector.BreakRequest)
        {
          if (this.OnProgress != null)
          {
            if (radioList.ExpectedDevices != null && radioList.ExpectedDevices.Count > 0)
            {
              this.OnProgress((object) this, radioList.GetProgress());
            }
            else
            {
              if (e >= 100)
                e = 0;
              e += 5;
              this.OnProgress((object) this, e);
            }
          }
          if (timeoutInSec.HasValue)
          {
            if (DateTime.Now.Subtract(this.receiveStartTime).TotalSeconds > (double) timeoutInSec.Value)
              break;
          }
          RadioPacket radioPacket;
          try
          {
            radioPacket = this.TryReceiveRadioPacket(timeoutInSec);
          }
          catch (Exception ex)
          {
            string str = "Failed to receive a radio packet! Stop WalkBy. Error: " + ex.Message;
            RadioReader.logger.Error(ex, str);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, str);
            return radioList.GetGlobalDeviceIdList();
          }
          if (radioPacket == null)
          {
            if (this.deviceCollector.BreakRequest || !micon.IsOpen)
            {
              RadioReader.logger.Info("Stop radio");
              return radioList.GetGlobalDeviceIdList();
            }
          }
          else
          {
            if (radioList.ExpectedDevices != null && radioList.ExpectedDevices.Count > 0)
            {
              if (radioList.ExpectedDevices.Contains(radioPacket.FunkId))
              {
                if (this.OnPacketReceived != null)
                  this.OnPacketReceived((object) this, radioPacket);
                radioList.AddPacket(radioPacket);
              }
            }
            else if (this.OnPacketReceived != null)
              this.OnPacketReceived((object) this, radioPacket);
            else
              radioList.AddPacket(radioPacket);
            string str = "?";
            if (radioList.ReceivedData.ContainsKey(radioPacket.FunkId))
              str = radioList.ReceivedData[radioPacket.FunkId].PacketsCount.ToString();
            this.deviceCollector.SendMessage(new GMM_EventArgs(radioPacket.FunkId == 0L ? "MinoConnect test packet received (" + str + ")" : radioPacket.FunkId.ToString() + " (" + str + ")")
            {
              TheMessageType = GMM_EventArgs.MessageType.WalkByPacketReceived
            });
            if (radioList.HasAllExpectedDevicesFound)
            {
              RadioReader.logger.Info("All devices was successful found!");
              ZR_ClassLibMessages.ClearErrors();
              break;
            }
            Application.DoEvents();
            if (this.deviceCollector.BreakRequest)
            {
              RadioReader.logger.Info("Cancel...");
              return radioList.GetGlobalDeviceIdList();
            }
          }
        }
      }
      finally
      {
        try
        {
          this.StopRadio();
        }
        catch (Exception ex)
        {
          string message = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
          RadioReader.logger.Error(ex, message);
        }
        this.deviceCollector.BreakRequest = false;
        this.IsBusy = false;
      }
      return radioList.GetGlobalDeviceIdList();
    }

    private RadioPacket TryReceiveRadioPacket(int? timeoutInSec)
    {
      Application.DoEvents();
      if (this.deviceCollector.BreakRequest)
        return (RadioPacket) null;
      ZR_ClassLibMessages.ClearErrors();
      bool hasRssi = this.deviceCollector.MyCom.Transceiver == TransceiverDevice.MinoConnect;
      RadioPacket radioPacket;
      byte[] numArray;
      if (this.deviceCollector.MyBusMode == BusMode.Radio2)
      {
        radioPacket = (RadioPacket) new RadioPacketRadio2();
        if (this.deviceCollector.MyCom.Transceiver != TransceiverDevice.MinoConnect)
          throw new NotImplementedException();
        numArray = this.TryReceiveRadioTelegramByMinoConnect(timeoutInSec);
      }
      else if (this.deviceCollector.MyBusMode == BusMode.Radio3 || this.deviceCollector.MyBusMode == BusMode.Radio4 || this.deviceCollector.MyBusMode == BusMode.Radio3_868_95_RUSSIA)
      {
        radioPacket = (RadioPacket) new RadioPacketRadio3();
        if (this.deviceCollector.MyCom.Transceiver != TransceiverDevice.MinoConnect)
          throw new NotImplementedException("Unknown transceiver! Value: " + this.deviceCollector.MyCom.Transceiver.ToString());
        numArray = this.TryReceiveRadioTelegramByMinoConnect(timeoutInSec);
      }
      else if (this.deviceCollector.MyBusMode == BusMode.wMBusC1A || this.deviceCollector.MyBusMode == BusMode.wMBusC1B || this.deviceCollector.MyBusMode == BusMode.wMBusS1 || this.deviceCollector.MyBusMode == BusMode.wMBusS1M || this.deviceCollector.MyBusMode == BusMode.wMBusS2 || this.deviceCollector.MyBusMode == BusMode.wMBusT1 || this.deviceCollector.MyBusMode == BusMode.wMBusT2_meter || this.deviceCollector.MyBusMode == BusMode.wMBusT2_other)
      {
        radioPacket = (RadioPacket) new RadioPacketWirelessMBus();
        if (this.deviceCollector.MyCom.Transceiver == TransceiverDevice.MinoConnect)
        {
          numArray = this.TryReceiveRadioTelegramByMinoConnect(timeoutInSec);
        }
        else
        {
          if (this.deviceCollector.MyCom.Transceiver != TransceiverDevice.None)
            throw new NotImplementedException();
          CommunicationByMinoConnect micon = this.GetMicon();
          do
          {
            numArray = micon.ReadExisting();
          }
          while (!this.deviceCollector.BreakRequest && numArray.Length == 0);
        }
      }
      else
      {
        if (this.deviceCollector.MyBusMode != BusMode.RadioMS && this.deviceCollector.MyBusMode != BusMode.MinomatRadioTest)
          throw new NotImplementedException();
        radioPacket = (RadioPacket) new RadioPacketMinomatV4();
        if (this.deviceCollector.MyCom.Transceiver != TransceiverDevice.MinoConnect)
          throw new NotImplementedException();
        numArray = this.TryReceiveRadioTelegramByMinoConnect(timeoutInSec);
      }
      if (this.deviceCollector.BreakRequest || numArray == null)
        return (RadioPacket) null;
      radioPacket.MyFunctions = this.deviceCollector;
      try
      {
        if (!radioPacket.Parse(numArray, SystemValues.DateTimeNow, hasRssi))
          return (RadioPacket) null;
      }
      catch (Exception ex)
      {
        RadioReader.logger.Error<string, string>("Failed to parse the radio packet! Error: {0}, Buffer: {1}", ex.Message, ZR_ClassLibrary.Util.ByteArrayToHexString(numArray));
        return (RadioPacket) null;
      }
      return radioPacket;
    }

    public RadioPacket ReceiveOnePacket(long funkId, int timeout)
    {
      if (this.IsBusy)
        return (RadioPacket) null;
      this.deviceCollector.BreakRequest = false;
      if (!(this.deviceCollector.GetDeviceListForBusMode() is RadioList deviceListForBusMode))
        return (RadioPacket) null;
      deviceListForBusMode.ClearExpectedDevices();
      if (!deviceListForBusMode.AddExpectedDevice(funkId))
        return (RadioPacket) null;
      if (this.deviceCollector.MyBusMode == BusMode.MinomatRadioTest)
        this.deviceCollector.DaKonId = funkId.ToString();
      return this.Read(new int?(timeout)) == null || this.ReceivedData == null || !this.ReceivedData.ContainsKey(funkId) ? (RadioPacket) null : this.ReceivedData[funkId].LastRadioPacket;
    }

    private bool StartRadio()
    {
      ZR_ClassLibMessages.ClearErrors();
      CommunicationByMinoConnect micon = this.GetMicon();
      if (this.deviceCollector.MyCom.Transceiver != TransceiverDevice.MinoConnect)
        micon.Close();
      micon.Open();
      micon.ConnectionLost += new System.EventHandler(this.micon_ConnectionLost);
      return this.StartRadio(this.deviceCollector.MyBusMode);
    }

    private void micon_ConnectionLost(object sender, EventArgs e)
    {
      if (this.ConnectionLost == null)
        return;
      this.ConnectionLost(sender, e);
    }

    private bool StartRadio(BusMode mode)
    {
      CommunicationByMinoConnect micon = this.GetMicon();
      switch (mode)
      {
        case BusMode.MinomatRadioTest:
          if (!UserManager.CheckPermission(UserRights.Rights.MinomatV4))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for MinomatRadioTest!");
          if (string.IsNullOrEmpty(this.deviceCollector.DaKonId))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Wrong NetworkID for MinomatRadioTest!");
          byte networkID;
          try
          {
            networkID = byte.Parse(this.deviceCollector.DaKonId);
          }
          catch
          {
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Wrong NetworkID for MinomatRadioTest!");
          }
          return micon.StartMinomatRadioTest(networkID);
        case BusMode.Radio2:
          if (!UserManager.CheckPermission(UserRights.Rights.WalkBy))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for Radio2!");
          micon.StartRadio2();
          return true;
        case BusMode.Radio3:
          if (!UserManager.CheckPermission(UserRights.Rights.Radio3))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for Radio3!");
          micon.StartRadio3();
          return true;
        case BusMode.Radio4:
          if (!UserManager.CheckPermission(UserRights.Rights.Radio3))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for Radio4!");
          micon.StartRadio4();
          return true;
        case BusMode.wMBusS1:
          if (!UserManager.CheckPermission(UserRights.Rights.WirelessMBus))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for WirelessMBus!");
          micon.Start_wMBusS1();
          return true;
        case BusMode.wMBusS1M:
          if (!UserManager.CheckPermission(UserRights.Rights.WirelessMBus))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for WirelessMBus!");
          micon.Start_wMBusS1M();
          return true;
        case BusMode.wMBusS2:
          if (!UserManager.CheckPermission(UserRights.Rights.WirelessMBus))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for WirelessMBus!");
          micon.Start_wMBusS2();
          return true;
        case BusMode.wMBusT1:
          if (!UserManager.CheckPermission(UserRights.Rights.WirelessMBus))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for WirelessMBus!");
          micon.Start_wMBusT1();
          return true;
        case BusMode.wMBusT2_meter:
          if (!UserManager.CheckPermission(UserRights.Rights.WirelessMBus))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for WirelessMBus!");
          micon.Start_wMBusT2_meter();
          return true;
        case BusMode.wMBusT2_other:
          if (!UserManager.CheckPermission(UserRights.Rights.WirelessMBus))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for WirelessMBus!");
          micon.Start_wMBusT2_other();
          return true;
        case BusMode.wMBusC1A:
          if (!UserManager.CheckPermission(UserRights.Rights.WirelessMBus))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for WirelessMBus!");
          micon.Start_wMBusC1A();
          return true;
        case BusMode.wMBusC1B:
          if (!UserManager.CheckPermission(UserRights.Rights.WirelessMBus))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for WirelessMBus!");
          micon.Start_wMBusC1B();
          return true;
        case BusMode.Radio3_868_95_RUSSIA:
          if (!UserManager.CheckPermission(UserRights.Rights.Radio3))
            return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for Radio3 (RUSSIA)!");
          micon.StartRadio3_868_95_RUSSIA();
          return true;
        case BusMode.RadioMS:
          return !UserManager.CheckPermission(UserRights.Rights.MinomatV4) ? ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for RadioMS!") : micon.Start_RadioMS();
        default:
          throw new ArgumentException("Invalid radio mode! Value: " + mode.ToString());
      }
    }

    private void StopRadio()
    {
      CommunicationByMinoConnect micon = this.GetMicon();
      micon.ConnectionLost -= new System.EventHandler(this.micon_ConnectionLost);
      try
      {
        if (micon.IsOpen)
        {
          micon.StopRadio();
          micon.DiscardCurrentInBuffer();
        }
      }
      catch (Exception ex)
      {
        RadioReader.logger.Trace(ex.Message);
      }
      micon.Close();
    }

    private bool CheckScgiHeader(byte[] buffer)
    {
      if (buffer[0] != (byte) 170)
      {
        if (RadioReader.logger.IsTraceEnabled)
          RadioReader.logger.Trace("Invalid SyncByte in SCGI header! Expected: 0xAA, Actual: 0x" + buffer[0].ToString("X2"));
        return false;
      }
      if (buffer[1] <= (byte) 0)
        return true;
      if (RadioReader.logger.IsTraceEnabled)
        RadioReader.logger.Trace("Invalid Version in SCGI header! Expected: 0x00, Actual: 0x" + buffer[1].ToString("X2"));
      return false;
    }

    private byte[] TryReceiveRadioTelegramByMinoConnect(int? timeoutInSec)
    {
      try
      {
        byte[] numArray1 = (byte[]) null;
        Application.DoEvents();
        CommunicationByMinoConnect micon = this.GetMicon();
        DateTime now;
        while (!this.deviceCollector.BreakRequest && micon.BytesToRead < 6)
        {
          if (!micon.IsOpen)
          {
            RadioReader.logger.Error("The serial port was closed!");
            return (byte[]) null;
          }
          if (numArray1 == null)
          {
            if (timeoutInSec.HasValue)
            {
              now = DateTime.Now;
              if (now.Subtract(this.receiveStartTime).TotalSeconds > (double) timeoutInSec.Value)
                return (byte[]) null;
            }
            if (!ZR_ClassLibrary.Util.Wait(700L, "while receive SCGI header of the radio packet", (ICancelable) this.deviceCollector))
              return (byte[]) null;
            this.deviceCollector.SendMessage(this.WAIT_EVENT);
          }
          else
            break;
        }
        Application.DoEvents();
        if (this.deviceCollector.BreakRequest)
          return (byte[]) null;
        byte[] numArray2 = micon.ReadHeader(6);
        if (numArray2 == null)
          return (byte[]) null;
        if (!this.CheckScgiHeader(numArray2))
        {
          RadioReader.logger.Error("Invalid SCGI header!");
          micon.DiscardInBuffer();
          return (byte[]) null;
        }
        Application.DoEvents();
        if (this.deviceCollector.BreakRequest)
          return (byte[]) null;
        int count = ((int) numArray2[2] & (int) sbyte.MaxValue) * 2 + 1;
        int num1 = 5;
        while (!this.deviceCollector.BreakRequest && micon.BytesToRead < count)
        {
          --num1;
          Application.DoEvents();
          if (this.deviceCollector.BreakRequest)
            return (byte[]) null;
          if (timeoutInSec.HasValue)
          {
            now = DateTime.Now;
            if (now.Subtract(this.receiveStartTime).TotalSeconds > (double) timeoutInSec.Value)
              return (byte[]) null;
          }
          if (!micon.IsOpen)
          {
            RadioReader.logger.Error("The serial port is closed!");
            return (byte[]) null;
          }
          if (!ZR_ClassLibrary.Util.Wait(500L, "while receive residue of SCGI frame", (ICancelable) this.deviceCollector))
            return (byte[]) null;
          if (num1 == 0)
          {
            micon.DiscardInBuffer();
            return (byte[]) null;
          }
        }
        byte[] b = micon.ReadHeader(count);
        if (b == null)
          return (byte[]) null;
        Application.DoEvents();
        if (this.deviceCollector.BreakRequest)
          return (byte[]) null;
        byte[] sourceArray = ZR_ClassLibrary.Util.Combine(numArray2, b);
        byte num2 = 0;
        for (int index = 1; index < sourceArray.Length - 1; ++index)
          num2 += sourceArray[index];
        if ((int) num2 != (int) sourceArray[sourceArray.Length - 1])
          return (byte[]) null;
        byte[] destinationArray = new byte[sourceArray.Length - 6 - 1];
        Array.Copy((Array) sourceArray, 6, (Array) destinationArray, 0, destinationArray.Length);
        return destinationArray;
      }
      catch (Exception ex)
      {
        string message = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        RadioReader.logger.Error(ex, message);
        return (byte[]) null;
      }
    }
  }
}


--- RadioScannerForm.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioScannerForm
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using CorporateDesign;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class RadioScannerForm : Form
  {
    private DeviceCollectorFunctions MyFunctions;
    private bool isStoped;
    private Stopwatch stopwatch;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Panel panel1;
    private Label label1;
    private Button btnStartScanning;
    private Label label3;
    private TextBox txtTransceiver;
    private Button btnStopScanning;
    private TextBox txtBusMode;
    private StatusStrip statusStrip1;
    private ToolStripStatusLabel txtStatus;
    private RichTextBox txtOutput;
    private Button btnClear;
    private Timer timer;
    private Label label5;
    private NumericUpDown txtInterval;
    private CheckBox ckbTimeInfo;
    private GroupBox groupBox2;
    private GroupBox groupBox1;
    private GroupBox groupBox3;
    private Label label9;
    private Label label8;
    private TextBox txtbxTransmitterQuarzError;
    private Label label6;
    private TextBox txtbxReceiverQuarzError;
    private Label label7;
    private Label label4;
    private Label label2;
    private TextBox txtFilterBySerialNumber;

    public RadioScannerForm(DeviceCollectorFunctions MyFunctions)
    {
      this.MyFunctions = MyFunctions;
      this.isStoped = false;
      this.stopwatch = new Stopwatch();
      this.InitializeComponent();
    }

    private void RadioScannerForm_Load(object sender, EventArgs e)
    {
      this.txtTransceiver.Text = this.MyFunctions.MyCom.Transceiver.ToString();
      this.txtBusMode.Text = this.MyFunctions.GetBaseMode().ToString();
      this.MyFunctions.OnMessage += new EventHandler<GMM_EventArgs>(this.DeviceCollector_OnMessage);
      this.MyFunctions.RadioReader.OnPacketReceived += new EventHandler<RadioPacket>(this.RadioReader_OnPacketReceived);
    }

    private void RadioScannerForm_FormClosing(object sender, FormClosingEventArgs e)
    {
      this.isStoped = true;
    }

    private void RadioScannerForm_FormClosed(object sender, FormClosedEventArgs e)
    {
      this.timer.Enabled = false;
      this.MyFunctions.OnMessage -= new EventHandler<GMM_EventArgs>(this.DeviceCollector_OnMessage);
      this.MyFunctions.RadioReader.OnPacketReceived -= new EventHandler<RadioPacket>(this.RadioReader_OnPacketReceived);
    }

    private void btnStartScanning_Click(object sender, EventArgs e)
    {
      this.isStoped = false;
      this.btnStartScanning.Enabled = false;
      this.btnStopScanning.Enabled = true;
      this.timer.Enabled = true;
      this.stopwatch.Start();
      if (this.MyFunctions.RadioReader.Read() != null)
        return;
      ZR_ClassLibMessages.ShowAndClearErrors(this.Name, (string) null);
      this.btnStopScanning_Click((object) null, (EventArgs) null);
    }

    private void btnStopScanning_Click(object sender, EventArgs e)
    {
      this.timer.Enabled = false;
      this.isStoped = true;
      this.btnStartScanning.Enabled = true;
      this.btnStopScanning.Enabled = false;
    }

    private void btnClear_Click(object sender, EventArgs e) => this.txtOutput.Clear();

    private void DeviceCollector_OnMessage(object sender, GMM_EventArgs e)
    {
      e.Cancel = this.isStoped;
      if (string.IsNullOrEmpty(e.EventMessage))
        return;
      this.txtStatus.Text = e.EventMessage;
    }

    private void RadioReader_OnPacketReceived(object sender, RadioPacket e)
    {
      if (!(e is RadioDevicePacket))
        return;
      RadioDevicePacket radioDevicePacket = e as RadioDevicePacket;
      int? rssiDBm = radioDevicePacket.RSSI_dBm;
      int num1 = 0;
      if (rssiDBm.GetValueOrDefault() == num1 & rssiDBm.HasValue && this.MyFunctions.MyCom.Transceiver != TransceiverDevice.MinoHead || !string.IsNullOrEmpty(this.txtFilterBySerialNumber.Text) && !radioDevicePacket.FunkId.ToString().StartsWith(this.txtFilterBySerialNumber.Text.Trim()))
        return;
      this.stopwatch.Stop();
      string text1 = string.Empty;
      string text2 = string.Empty;
      if (this.MyFunctions.RadioReader.ReceivedData != null && this.MyFunctions.RadioReader.ReceivedData.ContainsKey(radioDevicePacket.FunkId))
      {
        RadioDataSet radioDataSet = this.MyFunctions.RadioReader.ReceivedData[radioDevicePacket.FunkId];
        if (radioDataSet.LastRadioPacket != null)
        {
          if (!(radioDataSet.LastRadioPacket is RadioDevicePacket lastRadioPacket))
            return;
          double num2 = (double) (radioDevicePacket.MCT - lastRadioPacket.MCT) / 1800.0 / ((1.0 + (double) Convert.ToInt16(this.txtbxTransmitterQuarzError.Text) / 1000000.0) * (1.0 + (double) Convert.ToInt16(this.txtbxReceiverQuarzError.Text) / 1000000.0));
          double totalSeconds = (radioDevicePacket.ReceivedAt - lastRadioPacket.ReceivedAt).TotalSeconds;
          byte? acc;
          int num3;
          if (radioDevicePacket is RadioPacketWirelessMBus)
          {
            acc = ((RadioPacketWirelessMBus) radioDevicePacket).ACC;
            num3 = acc.HasValue ? 1 : 0;
          }
          else
            num3 = 0;
          if (num3 != 0)
          {
            double num4 = (double) lastRadioPacket.MCT / 1800.0;
            double num5 = (double) radioDevicePacket.MCT / 1800.0;
            acc = ((RadioPacketWirelessMBus) radioDevicePacket).ACC;
            double num6 = (double) acc.Value;
            acc = ((RadioPacketWirelessMBus) lastRadioPacket).ACC;
            double num7 = (double) acc.Value;
            double num8 = Convert.ToDouble(this.txtInterval.Value);
            double num9 = (1.0 + (Math.Abs(num7 - 128.0) - 64.0) / 2048.0) * num8;
            double num10 = num2 - num9;
            text1 = string.Format("ACC: {0} Tnom: {1} Actual MiCon: {2:0.0000} Actual PC: {3:0.0000} Expected interval: {4:0.0000} Difference: {5:0.0000} sec -> {6:0.0000} % ", (object) num6, (object) num8, (object) num2, (object) totalSeconds, (object) num9, (object) num10, (object) (num2 * 100.0 / num9 - 100.0));
            if (this.ckbTimeInfo.Checked)
              text2 = string.Format("ID: {0:00000000} | ACC: {1:000} | Sync.: {2} | Tnom: {3} | MiConDiff: {4:0.00000} | Expected: {5:0.00000} | Diff: {6:0.00000}", (object) radioDevicePacket.FunkId, (object) num6, (object) ((RadioPacketWirelessMBus) radioDevicePacket).Synchronous, (object) num8, (object) num2, (object) num9, (object) (num2 - num9));
          }
        }
      }
      if (!this.ckbTimeInfo.Checked)
      {
        this.txtOutput.AppendText(SystemValues.DateTimeNow.ToString("g"));
        this.txtOutput.AppendText(" ");
        this.txtOutput.AppendText(radioDevicePacket.ToString());
        this.txtOutput.AppendText(text1);
        this.txtOutput.AppendText("\n");
      }
      else
      {
        this.txtOutput.AppendText(SystemValues.DateTimeNow.ToString("g"));
        this.txtOutput.AppendText(" ");
        this.txtOutput.AppendText(text2);
        this.txtOutput.AppendText("\n");
      }
      this.stopwatch.Reset();
      this.stopwatch.Start();
    }

    private void timer_Tick(object sender, EventArgs e)
    {
      if (string.IsNullOrEmpty(this.txtFilterBySerialNumber.Text) || !this.stopwatch.IsRunning || this.stopwatch.Elapsed.TotalSeconds <= (double) this.txtInterval.Value)
        return;
      this.txtOutput.AppendText(SystemValues.DateTimeNow.ToString("HH:mm:ss"));
      this.txtOutput.AppendText("   ");
      this.txtOutput.AppendText("Kein_Empfang\n");
      this.stopwatch.Reset();
      this.stopwatch.Start();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (RadioScannerForm));
      this.panel1 = new Panel();
      this.groupBox2 = new GroupBox();
      this.ckbTimeInfo = new CheckBox();
      this.txtInterval = new NumericUpDown();
      this.label5 = new Label();
      this.btnClear = new Button();
      this.txtOutput = new RichTextBox();
      this.btnStopScanning = new Button();
      this.btnStartScanning = new Button();
      this.txtBusMode = new TextBox();
      this.label3 = new Label();
      this.txtTransceiver = new TextBox();
      this.label1 = new Label();
      this.statusStrip1 = new StatusStrip();
      this.txtStatus = new ToolStripStatusLabel();
      this.timer = new Timer(this.components);
      this.groupBox1 = new GroupBox();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.txtFilterBySerialNumber = new TextBox();
      this.label2 = new Label();
      this.label7 = new Label();
      this.txtbxReceiverQuarzError = new TextBox();
      this.label6 = new Label();
      this.txtbxTransmitterQuarzError = new TextBox();
      this.label8 = new Label();
      this.label9 = new Label();
      this.groupBox3 = new GroupBox();
      this.label4 = new Label();
      this.panel1.SuspendLayout();
      this.groupBox2.SuspendLayout();
      this.txtInterval.BeginInit();
      this.statusStrip1.SuspendLayout();
      this.groupBox1.SuspendLayout();
      this.groupBox3.SuspendLayout();
      this.SuspendLayout();
      this.panel1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.panel1.Controls.Add((Control) this.groupBox2);
      this.panel1.Controls.Add((Control) this.btnClear);
      this.panel1.Controls.Add((Control) this.txtOutput);
      this.panel1.Controls.Add((Control) this.btnStopScanning);
      this.panel1.Controls.Add((Control) this.btnStartScanning);
      this.panel1.Location = new Point(1, 41);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(886, 483);
      this.panel1.TabIndex = 2;
      this.groupBox2.Controls.Add((Control) this.groupBox3);
      this.groupBox2.Controls.Add((Control) this.label4);
      this.groupBox2.Controls.Add((Control) this.label2);
      this.groupBox2.Controls.Add((Control) this.txtFilterBySerialNumber);
      this.groupBox2.Controls.Add((Control) this.txtInterval);
      this.groupBox2.Controls.Add((Control) this.label5);
      this.groupBox2.Location = new Point(274, 0);
      this.groupBox2.Name = "groupBox2";
      this.groupBox2.Size = new Size(411, 94);
      this.groupBox2.TabIndex = 22;
      this.groupBox2.TabStop = false;
      this.groupBox2.Text = "Settings";
      this.ckbTimeInfo.AutoSize = true;
      this.ckbTimeInfo.Location = new Point(8, 68);
      this.ckbTimeInfo.Name = "ckbTimeInfo";
      this.ckbTimeInfo.RightToLeft = RightToLeft.Yes;
      this.ckbTimeInfo.Size = new Size(130, 17);
      this.ckbTimeInfo.TabIndex = 17;
      this.ckbTimeInfo.Text = "Time informations only";
      this.ckbTimeInfo.UseVisualStyleBackColor = true;
      this.txtInterval.Location = new Point(86, 59);
      this.txtInterval.Maximum = new Decimal(new int[4]
      {
        10000,
        0,
        0,
        0
      });
      this.txtInterval.Name = "txtInterval";
      this.txtInterval.Size = new Size(46, 20);
      this.txtInterval.TabIndex = 14;
      this.txtInterval.Value = new Decimal(new int[4]
      {
        180,
        0,
        0,
        0
      });
      this.label5.AutoSize = true;
      this.label5.Location = new Point(138, 63);
      this.label5.Name = "label5";
      this.label5.Size = new Size(24, 13);
      this.label5.TabIndex = 16;
      this.label5.Text = "sec";
      this.btnClear.Location = new Point(11, 65);
      this.btnClear.Name = "btnClear";
      this.btnClear.Size = new Size(67, 23);
      this.btnClear.TabIndex = 13;
      this.btnClear.Text = "Clear";
      this.btnClear.UseVisualStyleBackColor = true;
      this.btnClear.Click += new System.EventHandler(this.btnClear_Click);
      this.txtOutput.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtOutput.Font = new Font("Courier New", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.txtOutput.Location = new Point(11, 94);
      this.txtOutput.Name = "txtOutput";
      this.txtOutput.Size = new Size(863, 386);
      this.txtOutput.TabIndex = 12;
      this.txtOutput.Text = "";
      this.btnStopScanning.Enabled = false;
      this.btnStopScanning.Location = new Point(11, 39);
      this.btnStopScanning.Name = "btnStopScanning";
      this.btnStopScanning.Size = new Size(67, 23);
      this.btnStopScanning.TabIndex = 8;
      this.btnStopScanning.Text = "Stop";
      this.btnStopScanning.UseVisualStyleBackColor = true;
      this.btnStopScanning.Click += new System.EventHandler(this.btnStopScanning_Click);
      this.btnStartScanning.Location = new Point(11, 13);
      this.btnStartScanning.Name = "btnStartScanning";
      this.btnStartScanning.Size = new Size(67, 23);
      this.btnStartScanning.TabIndex = 1;
      this.btnStartScanning.Text = "Start";
      this.btnStartScanning.UseVisualStyleBackColor = true;
      this.btnStartScanning.Click += new System.EventHandler(this.btnStartScanning_Click);
      this.txtBusMode.Location = new Point(77, 16);
      this.txtBusMode.Name = "txtBusMode";
      this.txtBusMode.ReadOnly = true;
      this.txtBusMode.Size = new Size(94, 20);
      this.txtBusMode.TabIndex = 9;
      this.txtBusMode.TabStop = false;
      this.label3.AutoSize = true;
      this.label3.Location = new Point(5, 43);
      this.label3.Name = "label3";
      this.label3.Size = new Size(66, 13);
      this.label3.TabIndex = 7;
      this.label3.Text = "Transceiver:";
      this.txtTransceiver.Location = new Point(77, 42);
      this.txtTransceiver.Name = "txtTransceiver";
      this.txtTransceiver.ReadOnly = true;
      this.txtTransceiver.Size = new Size(94, 20);
      this.txtTransceiver.TabIndex = 6;
      this.txtTransceiver.TabStop = false;
      this.label1.AutoSize = true;
      this.label1.Location = new Point(5, 18);
      this.label1.Name = "label1";
      this.label1.Size = new Size(57, 13);
      this.label1.TabIndex = 2;
      this.label1.Text = "Bus mode:";
      this.statusStrip1.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.txtStatus
      });
      this.statusStrip1.Location = new Point(0, 527);
      this.statusStrip1.Name = "statusStrip1";
      this.statusStrip1.Size = new Size(887, 22);
      this.statusStrip1.TabIndex = 3;
      this.statusStrip1.Text = "statusStrip1";
      this.txtStatus.Name = "txtStatus";
      this.txtStatus.Size = new Size(0, 17);
      this.timer.Tick += new System.EventHandler(this.timer_Tick);
      this.groupBox1.Controls.Add((Control) this.txtTransceiver);
      this.groupBox1.Controls.Add((Control) this.label1);
      this.groupBox1.Controls.Add((Control) this.label3);
      this.groupBox1.Controls.Add((Control) this.txtBusMode);
      this.groupBox1.Controls.Add((Control) this.ckbTimeInfo);
      this.groupBox1.Location = new Point(85, 41);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.Size = new Size(184, 94);
      this.groupBox1.TabIndex = 22;
      this.groupBox1.TabStop = false;
      this.groupBox1.Text = "Info";
      this.zennerCoroprateDesign1.Dock = DockStyle.Fill;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(887, 549);
      this.zennerCoroprateDesign1.TabIndex = 1;
      this.txtFilterBySerialNumber.Location = new Point(86, 32);
      this.txtFilterBySerialNumber.Name = "txtFilterBySerialNumber";
      this.txtFilterBySerialNumber.Size = new Size(120, 20);
      this.txtFilterBySerialNumber.TabIndex = 11;
      this.label2.AutoSize = true;
      this.label2.Location = new Point(9, 35);
      this.label2.Name = "label2";
      this.label2.Size = new Size(71, 13);
      this.label2.TabIndex = 10;
      this.label2.Text = "Serialnumber:";
      this.label7.AutoSize = true;
      this.label7.Location = new Point(7, 47);
      this.label7.Name = "label7";
      this.label7.Size = new Size(62, 13);
      this.label7.TabIndex = 19;
      this.label7.Text = "Transmitter:";
      this.txtbxReceiverQuarzError.Location = new Point(72, 16);
      this.txtbxReceiverQuarzError.Name = "txtbxReceiverQuarzError";
      this.txtbxReceiverQuarzError.Size = new Size(49, 20);
      this.txtbxReceiverQuarzError.TabIndex = 20;
      this.txtbxReceiverQuarzError.Text = "0";
      this.txtbxReceiverQuarzError.TextAlign = HorizontalAlignment.Right;
      this.label6.AutoSize = true;
      this.label6.Location = new Point(7, 19);
      this.label6.Name = "label6";
      this.label6.Size = new Size(53, 13);
      this.label6.TabIndex = 18;
      this.label6.Text = "Receiver:";
      this.txtbxTransmitterQuarzError.Location = new Point(72, 43);
      this.txtbxTransmitterQuarzError.Name = "txtbxTransmitterQuarzError";
      this.txtbxTransmitterQuarzError.Size = new Size(49, 20);
      this.txtbxTransmitterQuarzError.TabIndex = 21;
      this.txtbxTransmitterQuarzError.Text = "0";
      this.txtbxTransmitterQuarzError.TextAlign = HorizontalAlignment.Right;
      this.label8.AutoSize = true;
      this.label8.Location = new Point((int) sbyte.MaxValue, 19);
      this.label8.Name = "label8";
      this.label8.Size = new Size(27, 13);
      this.label8.TabIndex = 22;
      this.label8.Text = "ppm";
      this.label9.AutoSize = true;
      this.label9.Location = new Point((int) sbyte.MaxValue, 46);
      this.label9.Name = "label9";
      this.label9.Size = new Size(27, 13);
      this.label9.TabIndex = 23;
      this.label9.Text = "ppm";
      this.groupBox3.Controls.Add((Control) this.label9);
      this.groupBox3.Controls.Add((Control) this.label8);
      this.groupBox3.Controls.Add((Control) this.txtbxTransmitterQuarzError);
      this.groupBox3.Controls.Add((Control) this.label6);
      this.groupBox3.Controls.Add((Control) this.txtbxReceiverQuarzError);
      this.groupBox3.Controls.Add((Control) this.label7);
      this.groupBox3.Location = new Point(212, 16);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.Size = new Size(189, 70);
      this.groupBox3.TabIndex = 23;
      this.groupBox3.TabStop = false;
      this.groupBox3.Text = "Quarz offset error";
      this.label4.AutoSize = true;
      this.label4.Location = new Point(9, 63);
      this.label4.Name = "label4";
      this.label4.Size = new Size(45, 13);
      this.label4.TabIndex = 15;
      this.label4.Text = "Interval:";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(887, 549);
      this.Controls.Add((Control) this.groupBox1);
      this.Controls.Add((Control) this.statusStrip1);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (RadioScannerForm);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "Radio Scanner";
      this.FormClosing += new FormClosingEventHandler(this.RadioScannerForm_FormClosing);
      this.FormClosed += new FormClosedEventHandler(this.RadioScannerForm_FormClosed);
      this.Load += new System.EventHandler(this.RadioScannerForm_Load);
      this.panel1.ResumeLayout(false);
      this.groupBox2.ResumeLayout(false);
      this.groupBox2.PerformLayout();
      this.txtInterval.EndInit();
      this.statusStrip1.ResumeLayout(false);
      this.statusStrip1.PerformLayout();
      this.groupBox1.ResumeLayout(false);
      this.groupBox1.PerformLayout();
      this.groupBox3.ResumeLayout(false);
      this.groupBox3.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- RadioTestMode.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioTestMode
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

#nullable disable
namespace DeviceCollector
{
  public enum RadioTestMode
  {
    Radio2Center = 22, // 0x00000016
    Radio2_PN9 = 23, // 0x00000017
    Radio3Center = 24, // 0x00000018
    Radio3_PN9 = 25, // 0x00000019
    WMBus_S_Center = 26, // 0x0000001A
    WMBus_S_PN9 = 27, // 0x0000001B
    WMBus_T_Center = 28, // 0x0000001C
    WMBus_T_PN9 = 29, // 0x0000001D
    Radio3_Packet = 32, // 0x00000020
  }
}


--- RadioTestPacket.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RadioTestPacket
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;

#nullable disable
namespace DeviceCollector
{
  public sealed class RadioTestPacket
  {
    public byte TestPacketVersion { get; set; }

    public uint MeterID { get; set; }

    public uint SapNumber { get; set; }

    public uint SerialNumber { get; set; }

    internal static RadioTestPacket Parse(byte[] packet)
    {
      if (packet.Length < 20)
        return (RadioTestPacket) null;
      return new RadioTestPacket()
      {
        TestPacketVersion = packet[7],
        MeterID = BitConverter.ToUInt32(packet, 8),
        SapNumber = BitConverter.ToUInt32(packet, 12),
        SerialNumber = Convert.ToUInt32(BitConverter.ToUInt32(packet, 16).ToString("X8"))
      };
    }
  }
}


--- RDM_Bus.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RDM_Bus
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class RDM_Bus : MBusDevice
  {
    private const int MaxReadBlockSize = 32;
    private const int MaxWriteBlockSize = 8;

    public RDM_Bus(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.DeviceType = DeviceTypes.ZR_RDM;
    }

    public RDM_Bus(MBusDevice TheMBusDevice)
      : base(TheMBusDevice.MyBus)
    {
      this.Info = TheMBusDevice.Info;
      this.DeviceType = DeviceTypes.ZR_RDM;
    }

    internal bool ReadVersion(ref long Version)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadVersion);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateLongframeStart();
      this.TransmitBuffer.Add(6);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSendREQ_Version);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveLongframeStart() && this.ReceiveLongframeEnd())
        {
          Version = ((long) this.ReceiveBuffer.Data[0] << 16) + ((long) this.ReceiveBuffer.Data[1] << 24);
          return true;
        }
      }
      return false;
    }

    internal bool DeleteMeterKey(int MeterKey)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.DeleteMeterKey);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateLongframeStart();
      this.TransmitBuffer.Add(7);
      this.TransmitBuffer.Add((byte) (MeterKey & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (MeterKey >> 8 & (int) byte.MaxValue));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
      }
      return false;
    }

    internal bool SetNewPin(int Pin)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SetNewPin);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateLongframeStart();
      this.TransmitBuffer.Add(8);
      this.TransmitBuffer.Add((byte) (Pin & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (Pin >> 8 & (int) byte.MaxValue));
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
      }
      return false;
    }

    internal bool TransmitRadioFrame()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.TransmitRadioFrame);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateLongframeStart();
      this.TransmitBuffer.Add(5);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
      }
      return false;
    }

    internal bool ReadMemory(int StartAddress, int NumberOfBytes, out ByteField OutData)
    {
      int num = StartAddress;
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartReadMemory);
      OutData = new ByteField(NumberOfBytes);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.BreakRequest = false;
      do
      {
        int BlockSize = NumberOfBytes - (num - StartAddress);
        if (BlockSize > 32)
          BlockSize = 32;
        this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.PrimaryAddressMessage);
        if (this.MyBus.BreakRequest)
        {
          this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.EndMessage);
          return false;
        }
        if (!this.ReadMemoryBlock(num, BlockSize))
        {
          this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.EndMessage);
          return false;
        }
        for (int index = 0; index < this.ReceiveBuffer.Count - 2; ++index)
          OutData.Add(this.ReceiveBuffer.Data[index]);
        num += BlockSize;
      }
      while (num - StartAddress < NumberOfBytes);
      this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.EndMessage);
      return true;
    }

    private bool ReadMemoryBlock(int BlockStartAddress, int BlockSize)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMemoryBlock);
      this.GenerateLongframeStart();
      this.TransmitBuffer.Add(1);
      this.TransmitBuffer.Add((byte) (BlockStartAddress & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (BlockStartAddress >> 8 & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) BlockSize);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartReadBlock);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveLongframeStart() && this.ReceiveLongframeEnd())
        {
          if (this.ReceiveBuffer.Count - 2 == BlockSize)
            return true;
          this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusReadWrongBlockLength);
        }
      }
      return false;
    }

    internal bool WriteMemory(int StartAddress, ref ByteField WriteData)
    {
      if (!this.MyBus.MyCom.Open())
        return false;
      int num = StartAddress;
      int DataStartOffset = 0;
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteMemory);
      this.MyBus.BreakRequest = false;
      do
      {
        int BlockSize = WriteData.Count - (num - StartAddress);
        if (BlockSize > 8)
          BlockSize = 8;
        this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.PrimaryAddressMessage);
        if (this.MyBus.BreakRequest)
        {
          this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.EndMessage);
          return false;
        }
        if (!this.WriteMemoryBlock(num, BlockSize, ref DataStartOffset, ref WriteData))
        {
          this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.EndMessage);
          return false;
        }
        num += BlockSize;
      }
      while (num - StartAddress < WriteData.Count);
      this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.EndMessage);
      return true;
    }

    private bool WriteMemoryBlock(
      int BlockStartAddress,
      int BlockSize,
      ref int DataStartOffset,
      ref ByteField WriteData)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMemoryBlock);
      this.GenerateLongframeStart();
      this.TransmitBuffer.Add(2);
      this.TransmitBuffer.Add((byte) (BlockStartAddress & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (BlockStartAddress >> 8 & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) BlockSize);
      while (BlockSize-- > 0)
        this.TransmitBuffer.Add(WriteData.Data[DataStartOffset++]);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteBlock);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
      }
      return false;
    }
  }
}


--- ReadVersionData.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.ReadVersionData
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class ReadVersionData
  {
    private short mBusManufacturer;
    public string ManufacturerString = string.Empty;
    public byte mBusMedium;
    public string MBusMediumString;
    public byte MBusGeneration;
    public uint MBusSerialNr;
    private uint version;
    public uint hardwareIdentification;
    public string HardwareIdentificationString = string.Empty;
    public uint BuildRevision;
    public DateTime BuildTime = DateTime.MinValue;
    public ushort FirmwareSignature;

    public short MBusManufacturer
    {
      get => this.mBusManufacturer;
      set
      {
        this.mBusManufacturer = value;
        this.ManufacturerString = MBusDevice.GetManufacturer(this.mBusManufacturer);
      }
    }

    public byte MBusMedium
    {
      get => this.mBusMedium;
      set
      {
        this.mBusMedium = value;
        this.MBusMediumString = MBusDevice.GetMediaString(value);
      }
    }

    public uint Version
    {
      get => this.version;
      set => this.version = value;
    }

    public int? PacketSizeOfResponceByGetVersionCommand { get; set; }

    public string GetVersionString()
    {
      return this.PacketSizeOfResponceByGetVersionCommand.HasValue ? ParameterService.GetVersionString((long) this.Version, this.PacketSizeOfResponceByGetVersionCommand.Value) : string.Empty;
    }

    public uint HardwareIdentification
    {
      get => this.hardwareIdentification;
      set
      {
        this.hardwareIdentification = value;
        string versionString = this.GetVersionString();
        if (versionString.IndexOf("C5") <= -1 && versionString.IndexOf("WR4") <= -1)
          return;
        this.HardwareIdentificationString = ParameterService.GetHardwareString(value);
      }
    }
  }
}


--- Receiver.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.Receiver
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class Receiver
  {
    private DeviceCollectorFunctions MyBus;
    internal string ReceiverVersion = "";
    internal string ReceiverType = "";
    internal int ReceiverLevel = 0;
    public DeviceInfo TheDeviceInfo = (DeviceInfo) null;
    private string RecString;
    private ByteField RecData;
    private int ReceiveCounter;
    private static readonly char[] RotateCharacters = new char[4]
    {
      '-',
      '\\',
      '|',
      '/'
    };
    private int RotateIndex = 0;

    public Receiver(DeviceCollectorFunctions TheBus) => this.MyBus = TheBus;

    internal bool InitCom()
    {
      this.MyBus.MyCom.Close();
      this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, "9600");
      this.MyBus.MyCom.SingleParameter(CommParameter.Parity, "no");
      return this.MyBus.MyCom.Open();
    }

    internal bool ConnectReceiver()
    {
      for (int index = 0; index < 3 && this.InitCom(); ++index)
      {
        Thread.Sleep(1000);
        this.MyBus.MyCom.TransmitBlock("pwr 0\r");
        Thread.Sleep(200);
        this.MyBus.MyCom.ClearCom();
        this.MyBus.MyCom.TransmitBlock("ver\r");
        Thread.Sleep(300);
        this.MyBus.MyCom.ReceiveLine(out this.RecString);
        string[] strArray = this.RecString.Split(' ');
        if (strArray.Length == 2 && strArray[0] == "RS232RCV")
        {
          this.ReceiverType = strArray[0];
          this.ReceiverVersion = strArray[1];
          return true;
        }
      }
      return false;
    }

    internal bool StartReceiver()
    {
      if (!this.ConnectReceiver())
        return false;
      this.MyBus.MyCom.TransmitBlock("pwr 1\r");
      Thread.Sleep(100);
      int num = 97;
      if (this.ReceiverLevel > 0)
        num = this.ReceiverLevel;
      this.MyBus.MyCom.TransmitBlock("pgl " + num.ToString() + "\r");
      this.MyBus.MyCom.ReceiveLine(out string _);
      this.MyBus.MyCom.ClearCom();
      this.ReceiveCounter = 0;
      this.MyBus.BreakRequest = false;
      return true;
    }

    internal bool StopReceiver()
    {
      this.MyBus.BreakRequest = true;
      this.MyBus.MyCom.SetHandshakeState(HandshakeStates.RTS_OFF_DTR_OFF);
      Thread.Sleep(500);
      this.MyBus.MyCom.TransmitBlock("pwr -1\r");
      Thread.Sleep(10);
      this.MyBus.MyCom.TransmitBlock("pwr -1\r");
      return true;
    }

    internal bool ReceiveTelegram()
    {
      int num = 1000;
      while (!this.MyBus.BreakRequest)
      {
        if (!this.MyBus.MyCom.ReceiveLine(out this.RecString))
        {
          if (num++ >= 2)
          {
            num = 0;
            this.MyBus.SendMessage("Receive data[" + this.GetRotateChar().ToString() + "]. Received: ", this.ReceiveCounter, GMM_EventArgs.MessageType.StandardMessage);
          }
          Application.DoEvents();
          Thread.Sleep(100);
        }
        else
        {
          ++this.ReceiveCounter;
          return this.RecString.IndexOf("RSSI-on") > 0 ? this.DecodeTelegramRSSI() : this.DecodeTelegram();
        }
      }
      return false;
    }

    private bool DecodeTelegram()
    {
      int offset = 0;
      int hexByte1 = this.GetHexByte(ref offset);
      int hexByte2 = this.GetHexByte(ref offset);
      int hexByte3 = this.GetHexByte(ref offset);
      int num1 = hexByte3 & 31;
      if (num1 < 1 || hexByte3 >> 5 != hexByte1)
        return false;
      int num2 = 0;
      byte[] ProtocolData = new byte[num1 - 1];
      for (int index = 0; index < ProtocolData.Length; ++index)
      {
        ProtocolData[index] = (byte) this.GetHexByte(ref offset);
        num2 += (int) ProtocolData[index];
      }
      int hexByte4 = this.GetHexByte(ref offset);
      int hexByte5 = this.GetHexByte(ref offset);
      int hexByte6 = this.GetHexByte(ref offset);
      if (this.RecString.Substring(offset) != "OK")
        return false;
      int num3 = num2 + hexByte1 + hexByte2 + hexByte3 + hexByte4 + hexByte5 + hexByte6 & (int) byte.MaxValue;
      int num4 = 0;
      for (int index = 0; index < hexByte2 - 4; ++index)
        num4 += (int) this.RecString[index];
      this.TheDeviceInfo = new DeviceInfo();
      this.TheDeviceInfo.ParameterList = new List<DeviceInfo.MBusParamStruct>();
      this.TheDeviceInfo.LastReadingDate = ParameterService.GetNow();
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("RTIME", this.TheDeviceInfo.LastReadingDate.ToString("dd.MM.yyyy HH:mm:ss")));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("RCL", hexByte5.ToString()));
      bool flag = false;
      switch (hexByte3)
      {
        case 80:
          flag = this.DecodeTelegramm_0x50(ProtocolData);
          break;
        case 86:
          flag = this.DecodeTelegramm_0x56(ProtocolData);
          break;
        case 90:
          flag = this.DecodeTelegramm_0x5a(ProtocolData);
          break;
      }
      if (!flag)
        return false;
      IdentDevice NewDevice = new IdentDevice(this.MyBus);
      NewDevice.Info = this.TheDeviceInfo;
      this.MyBus.MyDeviceList.AddDevice((object) NewDevice, true);
      return true;
    }

    private bool DecodeTelegramm_0x50(byte[] ProtocolData)
    {
      if (ProtocolData.Length != 15)
        return false;
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MED", "HCA_R"));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("GEN", "48"));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MAN", "ZR_"));
      this.TheDeviceInfo.MeterNumber = MBusDevice.TranslateBcdToBin((long) ProtocolData[0] + ((long) ProtocolData[1] << 8) + ((long) ProtocolData[2] << 16) + ((long) ProtocolData[3] << 24)).ToString();
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", this.TheDeviceInfo.MeterNumber));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("HCA", ((uint) ((int) ProtocolData[4] + ((int) ProtocolData[5] << 8) + ((int) ProtocolData[6] << 16) + ((int) ProtocolData[7] << 24))).ToString("d08")));
      int num = (int) ProtocolData[12] + ((int) ProtocolData[13] << 8);
      if (num > 0)
      {
        int day = num & 31;
        int month = (num & 480) >> 5;
        int year = ((num & 65024) >> 9) + 2000;
        try
        {
          this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("TIMP[8]", new DateTime(year, month, day).ToString("dd.MM.yyyy")));
        }
        catch
        {
        }
        this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("HCA[8]", ((long) ProtocolData[8] + ((long) ProtocolData[9] << 8) + ((long) ProtocolData[10] << 16) + ((long) ProtocolData[11] << 24)).ToString("d08")));
      }
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("FLAGS", ProtocolData[14].ToString("x02")));
      return true;
    }

    private double GetDouble(uint Value)
    {
      uint num1 = Value & 8388607U;
      uint num2 = (Value & 2139095040U) >> 23;
      uint num3 = Value & 2147483648U;
      double y = (double) num2 - 128.0;
      double num4 = ((double) num1 / 8388608.0 + 1.0) * Math.Pow(2.0, y);
      if (num3 > 0U)
        num4 *= -1.0;
      return num4;
    }

    private bool DecodeTelegramm_0x56(byte[] ProtocolData)
    {
      if (ProtocolData.Length != 21)
        return false;
      this.TheDeviceInfo.MeterNumber = MBusDevice.TranslateBcdToBin((long) ProtocolData[3] + ((long) ProtocolData[2] << 8) + ((long) ProtocolData[1] << 16) + ((long) ProtocolData[0] << 24)).ToString();
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", this.TheDeviceInfo.MeterNumber));
      this.TheDeviceInfo.Medium = ProtocolData[4];
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MED", MBusDevice.GetMediaString(this.TheDeviceInfo.Medium)));
      this.TheDeviceInfo.Version = ProtocolData[5];
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("GEN", this.TheDeviceInfo.Version.ToString()));
      this.TheDeviceInfo.Manufacturer = MBusDevice.GetManufacturer((short) ((int) ProtocolData[6] + ((int) ProtocolData[7] << 8)));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MAN", this.TheDeviceInfo.Manufacturer));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("TYPE", ((long) ProtocolData[8] + ((long) ProtocolData[9] << 8) + ((long) ProtocolData[10] << 16) + ((long) ProtocolData[11] << 24)).ToString("x08")));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("VARIANCE", ((int) ProtocolData[12] + ((int) ProtocolData[13] << 8)).ToString()));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("CYCLE", ((int) ProtocolData[14] + ((int) ProtocolData[15] << 8)).ToString()));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("START_H", ProtocolData[16].ToString()));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("STOP_H", ProtocolData[17].ToString()));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("T_MASK", ((int) ProtocolData[18] + ((int) ProtocolData[19] << 8) + ((int) ProtocolData[20] << 16)).ToString("x06")));
      return true;
    }

    private bool DecodeTelegramm_0x5a(byte[] ProtocolData)
    {
      if (ProtocolData.Length != 25)
        return false;
      this.TheDeviceInfo.MeterNumber = MBusDevice.TranslateBcdToBin((long) ProtocolData[0] + ((long) ProtocolData[1] << 8) + ((long) ProtocolData[2] << 16) + ((long) ProtocolData[3] << 24)).ToString();
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", this.TheDeviceInfo.MeterNumber));
      this.TheDeviceInfo.Medium = ProtocolData[4];
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MED", MBusDevice.GetMediaString(this.TheDeviceInfo.Medium) + "_R"));
      this.TheDeviceInfo.Version = ProtocolData[5];
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("GEN", this.TheDeviceInfo.Version.ToString()));
      this.TheDeviceInfo.Manufacturer = MBusDevice.GetManufacturer((short) ((int) ProtocolData[6] + ((int) ProtocolData[7] << 8)));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MAN", this.TheDeviceInfo.Manufacturer));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("TYPE", ((long) ProtocolData[8] + ((long) ProtocolData[9] << 8) + ((long) ProtocolData[10] << 16) + ((long) ProtocolData[11] << 24)).ToString("x08")));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("VARIANCE", ((int) ProtocolData[12] + ((int) ProtocolData[13] << 8)).ToString()));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("CYCLE", ((int) ProtocolData[14] + ((int) ProtocolData[15] << 8)).ToString()));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("START_H", ProtocolData[16].ToString()));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("STOP_H", ProtocolData[17].ToString()));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("T_MASK", ((int) ProtocolData[18] + ((int) ProtocolData[19] << 8) + ((int) ProtocolData[20] << 16)).ToString("x06")));
      uint num1 = (uint) ((int) ProtocolData[21] + ((int) ProtocolData[23] << 8) + ((int) ProtocolData[22] << 16) + ((int) ProtocolData[24] << 24));
      int second = (int) num1 & 63;
      int minute = (int) ((num1 & 16515072U) >> 18);
      int hour = (int) ((num1 & 253952U) >> 13);
      int day = (int) ((num1 & 7936U) >> 8);
      int month = (int) ((num1 & 4026531840U) >> 28);
      int num2 = (int) ((num1 & 251658240U) >> 24);
      int year1 = SystemValues.DateTimeNow.Year;
      int num3 = year1 / 10 * 10;
      int year2 = num2 + num3;
      if (year2 - year1 > 5)
        year2 -= 10;
      if (year2 - year1 < -5)
        year2 += 10;
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("TIMP", new DateTime(year2, month, day, hour, minute, second).ToString("dd.MM.yyyy HH:mm:ss")));
      return true;
    }

    private bool DecodeTelegramRSSI()
    {
      this.RecData = new ByteField(32);
      int offset = 0;
      for (int index = 0; index < 16; ++index)
      {
        int hexByte = this.GetHexByte(ref offset);
        if (hexByte < 0)
          return false;
        this.RecData.Add(hexByte);
      }
      int num1 = this.RecString.IndexOf("RSSI-on");
      if (num1 <= 0)
        return false;
      int startIndex = num1 + 7;
      int num2 = this.RecString.IndexOf("OK", startIndex);
      if (num2 <= 0)
        return false;
      int num3 = int.Parse(this.RecString.Substring(startIndex, num2 - startIndex));
      if (num3 < 0)
        return false;
      this.TheDeviceInfo = new DeviceInfo();
      this.TheDeviceInfo.ParameterList = new List<DeviceInfo.MBusParamStruct>();
      this.TheDeviceInfo.LastReadingDate = ParameterService.GetNow();
      this.TheDeviceInfo.Manufacturer = "ZR_";
      this.TheDeviceInfo.Medium = (byte) 7;
      this.TheDeviceInfo.MeterNumber = this.GetParam(2, 4).ToString();
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("RTIME", this.TheDeviceInfo.LastReadingDate.ToString("dd.MM.yyyy HH:mm:ss")));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", this.TheDeviceInfo.MeterNumber));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MAN", this.TheDeviceInfo.Manufacturer));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("GEN", this.TheDeviceInfo.Version.ToString()));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MED", MBusDevice.GetMediaString(this.TheDeviceInfo.Medium)));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("MPC", this.GetParam(1, 1).ToString()));
      StringBuilder PValue = new StringBuilder(this.GetParam(6, 4).ToString(), 30);
      MBusDevice.SetStringExpo(ref PValue, -2);
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("CNT", PValue.ToString()));
      PValue.Length = 0;
      PValue.Append(this.GetParam(10, 4).ToString());
      MBusDevice.SetStringExpo(ref PValue, -2);
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("CNT[1]", PValue.ToString()));
      TimeSpan timeSpan1 = new TimeSpan(0, 0, (int) this.GetParam(14, 2), 0);
      DateTime dateTime1;
      ref DateTime local = ref dateTime1;
      DateTime dateTimeNow = SystemValues.DateTimeNow;
      int year = dateTimeNow.Year;
      dateTimeNow = SystemValues.DateTimeNow;
      int month = dateTimeNow.Month;
      local = new DateTime(year, month, 1);
      DateTime dateTime2 = dateTime1.AddMonths(-1);
      DateTime dateTime3 = dateTime1.AddMonths(1);
      dateTime2 = dateTime2.Add(timeSpan1);
      dateTime1 = dateTime1.Add(timeSpan1);
      DateTime dateTime4 = dateTime3.Add(timeSpan1);
      TimeSpan timeSpan2 = SystemValues.DateTimeNow - dateTime2;
      TimeSpan timeSpan3 = SystemValues.DateTimeNow - dateTime1;
      TimeSpan timeSpan4 = SystemValues.DateTimeNow - dateTime4;
      timeSpan2 = timeSpan2.Duration();
      timeSpan3 = timeSpan3.Duration();
      timeSpan4 = timeSpan4.Duration();
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("TIMP", (!(timeSpan2 < timeSpan3) ? (!(timeSpan4 < timeSpan3) ? dateTime1 : dateTime4) : (!(timeSpan2 < timeSpan4) ? dateTime4 : dateTime2)).ToString("dd.MM.yyyy HH:mm:ss")));
      this.TheDeviceInfo.ParameterList.Add(new DeviceInfo.MBusParamStruct("RCL", num3.ToString()));
      IdentDevice NewDevice = new IdentDevice(this.MyBus);
      NewDevice.Info = this.TheDeviceInfo;
      this.MyBus.MyDeviceList.AddDevice((object) NewDevice, true);
      return true;
    }

    private uint GetParam(int BytePosition, int ByteSize)
    {
      uint num = 0;
      for (int index = 0; index < ByteSize; ++index)
        num = (num << 8) + (uint) this.RecData.Data[BytePosition + index];
      return num;
    }

    private int GetHexByte(ref int offset)
    {
      while (this.RecString.Length > offset && this.RecString[offset] == ' ')
        ++offset;
      int hexByte = -1;
      if (this.RecString.Length > offset)
      {
        hexByte = this.GetHexValue(this.RecString[offset++]);
        if (hexByte < 0)
          return -1;
      }
      if (this.RecString.Length <= offset)
        return -1;
      if (this.RecString[offset] == ' ')
      {
        ++offset;
        return hexByte;
      }
      int hexValue = this.GetHexValue(this.RecString[offset++]);
      return hexValue < 0 ? -1 : hexValue + (hexByte << 4);
    }

    private int GetHexValue(char CharIn)
    {
      CharIn = char.ToUpper(CharIn);
      if (CharIn < '0')
        return -1;
      if (CharIn <= '9')
        return (int) CharIn - 48;
      return CharIn < 'A' || CharIn > 'F' ? -1 : (int) CharIn - 65 + 10;
    }

    private char GetRotateChar()
    {
      if (this.RotateIndex > 3)
        this.RotateIndex = 0;
      return Receiver.RotateCharacters[this.RotateIndex++];
    }
  }
}


--- RelayAsyncFunctions.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RelayAsyncFunctions
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using System;
using System.Collections;
using System.Collections.Generic;
using ZENNER.CommonLibrary;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  internal sealed class RelayAsyncFunctions : 
    IAsyncFunctions,
    I_ZR_Component,
    ILockable,
    ICancelable,
    IReadoutConfig
  {
    private int offset;

    public MbusTelegram MbusTelegramToRead { get; set; }

    public bool BreakRequest { get; set; }

    public bool Open() => true;

    public bool Close()
    {
      this.MbusTelegramToRead = (MbusTelegram) null;
      this.offset = 0;
      return true;
    }

    public bool TransmitBlock(ref ByteField DataBlock)
    {
      this.offset = 0;
      return this.MbusTelegramToRead != null;
    }

    public bool ReceiveBlock(ref ByteField DataBlock, int MinByteNb, bool first)
    {
      if (this.MbusTelegramToRead == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.Timeout, "RelayAsyncFunction simulate time out exception!");
        return false;
      }
      for (int offset = this.offset; offset < MinByteNb + this.offset; ++offset)
        DataBlock.Add(this.MbusTelegramToRead.Buffer[offset]);
      this.offset += DataBlock.Count;
      return true;
    }

    public event System.EventHandler ConnectionLost;

    public event System.EventHandler BatterieLow;

    public void ResetLastTransmitEndTime()
    {
    }

    public long InputBufferLength => 0;

    public bool GetCurrentInputBuffer(out byte[] buffer)
    {
      buffer = (byte[]) null;
      return false;
    }

    public SortedList<AsyncComSettings, object> GetAsyncComSettings()
    {
      return (SortedList<AsyncComSettings, object>) null;
    }

    public string GetAsyncComSettingsAsString() => "";

    public bool SendMinoConnectCommand(string cmd) => false;

    public bool TransmitBlock(byte[] buffer) => false;

    public bool TransmitBlock(byte[] buffer, bool isLogDisabled) => false;

    public Dictionary<string, string> LoadAvailableCOMservers()
    {
      throw new NotImplementedException();
    }

    public bool IsOpen => true;

    public bool UpdateTransceiverFirmware(string pathToFirmware)
    {
      throw new NotImplementedException();
    }

    public DateTime FirstCalculatedEarliestTransmitTime { get; set; }

    public ZR_ClassLibrary.TransceiverDevice Transceiver { get; set; }

    public bool TryReceiveBlock(out byte[] buffer) => throw new NotImplementedException();

    public bool TryReceiveBlock(out byte[] buffer, int numberOfBytesToReceive)
    {
      throw new NotImplementedException();
    }

    public string ShowComWindow(string ComponentList) => throw new NotImplementedException();

    public void ShowComWindow() => throw new NotImplementedException();

    public bool ShowComWindowChanged() => throw new NotImplementedException();

    public void ClearCom() => throw new NotImplementedException();

    public bool SetBreak() => throw new NotImplementedException();

    public bool ClearBreak() => throw new NotImplementedException();

    public bool CallTransceiverFunction(TransceiverDeviceFunction function)
    {
      throw new NotImplementedException();
    }

    public bool CallTransceiverFunction(TransceiverDeviceFunction function, object param1)
    {
      throw new NotImplementedException();
    }

    public bool CallTransceiverFunction(
      TransceiverDeviceFunction function,
      object param1,
      object param2)
    {
      throw new NotImplementedException();
    }

    public bool GetComPortIds(out string strComPortIds, bool ForceRefresh)
    {
      throw new NotImplementedException();
    }

    public string GetTranceiverDeviceInfo() => throw new NotImplementedException();

    public void ShowErrorMessageBox(bool on) => throw new NotImplementedException();

    public string SingleParameter(string ParameterName, string ParameterValue)
    {
      throw new NotImplementedException();
    }

    public string SingleParameter(CommParameter Parameter, string ParameterValue) => string.Empty;

    public void GetCommParameter(ref ArrayList ParameterList)
    {
    }

    public bool SetCommParameter(ArrayList ParameterList) => true;

    public bool SetCommParameter(ArrayList ParameterList, bool ComWindowRefresh)
    {
      throw new NotImplementedException();
    }

    public void WaitToEarliestTransmitTime()
    {
    }

    public void ResetEarliestTransmitTime()
    {
    }

    public void ClearWakeup()
    {
    }

    public void TriggerWakeup()
    {
    }

    public bool SetHandshakeState(HandshakeStates HandshakeState)
    {
      throw new NotImplementedException();
    }

    public void SetAnswerOffsetTime(int NewAnswerOffsetTime) => throw new NotImplementedException();

    public bool TransmitBlock(string DataString) => throw new NotImplementedException();

    public bool SendBlock(ref ByteField DataBlock) => throw new NotImplementedException();

    public bool TransmitString(string DataString) => throw new NotImplementedException();

    public bool ReceiveString(out string DataString) => throw new NotImplementedException();

    public bool ReceiveBlock(ref ByteField DataBlock) => throw new NotImplementedException();

    public bool ReceiveLine(out string ReceivedData) => throw new NotImplementedException();

    public bool ReceiveCRLF_Line(out string ReceivedData) => throw new NotImplementedException();

    public bool ReceiveBlockToChar(ref ByteField DataBlock, byte EndChar)
    {
      throw new NotImplementedException();
    }

    public void ComWriteLoggerEvent(EventLogger.LoggerEvent Event)
    {
    }

    public void ComWriteLoggerData(EventLogger.LoggerEvent Event, ref ByteField data)
    {
      throw new NotImplementedException();
    }

    public event EventHandler<GMM_EventArgs> OnAsyncComMessage;

    public bool ChangeParameterAtList(
      ArrayList ParameterList,
      string ParameterName,
      string NewParameter)
    {
      throw new NotImplementedException();
    }

    public string GetParameterFromList(ArrayList ParameterList, string ParameterName)
    {
      throw new NotImplementedException();
    }

    public string CreateParameterString(ArrayList ParameterList)
    {
      throw new NotImplementedException();
    }

    public ArrayList CreateParameterList(string ParameterString)
    {
      throw new NotImplementedException();
    }

    public void GMM_Dispose()
    {
    }

    public bool IsLocked => false;

    public void Lock(string owner) => throw new NotImplementedException();

    public void Unlock() => throw new NotImplementedException();

    public bool ChangeDriverSettings() => throw new NotImplementedException();

    public bool WakeupTemporaryOff { get; set; }

    public string Owner => throw new NotImplementedException();

    public int MinoConnectIrDaPulseLength { get; set; }

    public bool SetAsyncComSettings(SortedList<string, string> asyncComSettings)
    {
      throw new NotImplementedException();
    }

    public void SetReadoutConfiguration(ConfigList configList)
    {
    }

    public ConfigList GetReadoutConfiguration() => (ConfigList) null;
  }
}


--- RelayDevice.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RelayDevice
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using NLog;
using StartupLib;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  internal sealed class RelayDevice
  {
    private static Logger logger = LogManager.GetLogger(nameof (RelayDevice));
    private IAsyncFunctions channel;
    private DeviceCollectorFunctions theBus;
    private const int RETRY_LIMIT_LOGIN = 12;
    private const int RETRY_LIMIT_LOGOUT = 1;
    private const string DEFAULT_SERVICE_PASSWORD = "1767";
    private const string FILE_NAME = "ZENTRALE.BIN_";

    public event System.EventHandler ReadStorageCompleted;

    public RelayDevice(DeviceCollectorFunctions theBus)
    {
      this.MBusTelegrams = new MbusTelegramCollection();
      this.theBus = theBus;
      this.channel = theBus.MyCom;
      this.Password = "1767";
      SortedList<DeviceCollectorSettings, object> collectorSettings = theBus.GetDeviceCollectorSettings();
      if (collectorSettings == null || !collectorSettings.ContainsKey(DeviceCollectorSettings.Password))
        return;
      string str = collectorSettings[DeviceCollectorSettings.Password] as string;
      if (!string.IsNullOrEmpty(str))
        this.Password = str;
    }

    public string Password { get; private set; }

    public byte[] ActualPacketData { get; private set; }

    public byte[] ReceivedFile { get; set; }

    public MbusTelegramCollection MBusTelegrams { get; private set; }

    public MbusTelegramCollection Read()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MBus))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for M-Bus!");
        return (MbusTelegramCollection) null;
      }
      this.theBus.BreakRequest = false;
      if (!this.channel.Open())
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Can not open connection to the Relay device!");
        return (MbusTelegramCollection) null;
      }
      if (!this.Login())
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Login to the Relay Central Unit device failed!");
        return (MbusTelegramCollection) null;
      }
      if (this.theBus.BreakRequest)
        return (MbusTelegramCollection) null;
      if (!this.ReadDataStorage())
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Can not read data stored by the Relay Central Unit!");
        return (MbusTelegramCollection) null;
      }
      return !this.SplitRelayTelegrams() ? (MbusTelegramCollection) null : this.MBusTelegrams;
    }

    private bool Login()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MBus))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for M-Bus!");
        return false;
      }
      ByteField DataBlock1 = new ByteField();
      string message = nameof (Login);
      int num = 0;
      while (num < 12 && !this.theBus.BreakRequest)
      {
        this.theBus.SendMessage(new GMM_EventArgs(message));
        ByteField DataBlock2 = new ByteField(4);
        DataBlock2.Add(27);
        DataBlock2.Add(27);
        DataBlock2.Add(27);
        DataBlock2.Add(1);
        this.channel.TransmitBlock(ref DataBlock2);
        if (!Util.Wait(300L, nameof (Login), (ICancelable) this.theBus, RelayDevice.logger))
          return false;
        this.channel.ReceiveBlock(ref DataBlock1);
        if (!Util.Wait(1000L, nameof (Login), (ICancelable) this.theBus, RelayDevice.logger))
          return false;
        if (this.ContainsByteSequence(DataBlock1.Data, DataBlock1.Count, new byte[4]
        {
          (byte) 27,
          (byte) 27,
          (byte) 27,
          (byte) 240
        }))
        {
          this.theBus.SendMessage(new GMM_EventArgs("The login was successful!"));
          return true;
        }
        message += ".";
        this.theBus.SendMessage(new GMM_EventArgs(message));
        ByteField DataBlock3 = new ByteField(4);
        DataBlock3.Add(27);
        DataBlock3.Add(27);
        DataBlock3.Add(27);
        DataBlock3.Add(2);
        this.channel.TransmitBlock(ref DataBlock3);
        for (int index = 0; index < this.Password.Length; ++index)
        {
          ByteField DataBlock4 = new ByteField(1);
          DataBlock4.Add((byte) this.Password[index]);
          this.channel.TransmitBlock(ref DataBlock4);
          if (!Util.Wait(300L, "Send password", (ICancelable) this.theBus, RelayDevice.logger))
            return false;
          this.channel.ReceiveBlock(ref DataBlock1);
        }
        ByteField DataBlock5 = new ByteField(1);
        DataBlock5.Add(13);
        this.channel.TransmitBlock(ref DataBlock5);
        if (!Util.Wait(500L, "Receive password", (ICancelable) this.theBus, RelayDevice.logger))
          return false;
        this.channel.ReceiveBlock(ref DataBlock1);
        if (!Util.Wait(500L, "After password", (ICancelable) this.theBus, RelayDevice.logger))
          return false;
        if (this.ContainsByteSequence(DataBlock1.Data, DataBlock1.Count, new byte[4]
        {
          (byte) 27,
          (byte) 27,
          (byte) 27,
          (byte) 2
        }))
        {
          this.theBus.SendMessage(new GMM_EventArgs("The login was successful!"));
          return true;
        }
        if (this.ContainsByteSequence(DataBlock1.Data, DataBlock1.Count, new byte[4]
        {
          (byte) 27,
          (byte) 27,
          (byte) 27,
          (byte) 240
        }))
        {
          this.theBus.SendMessage(new GMM_EventArgs("The login was successful!"));
          return true;
        }
        ++num;
        if (num > 3)
        {
          this.theBus.SendMessage(new GMM_EventArgs("Login attempt was not successful. Try again (" + num.ToString() + " attempt)."));
        }
        else
        {
          message += ".";
          this.theBus.SendMessage(new GMM_EventArgs(message));
        }
        if (!Util.Wait(4000L, nameof (Login), (ICancelable) this.theBus, RelayDevice.logger))
          return false;
      }
      return false;
    }

    private bool Logout()
    {
      this.theBus.SendMessage(new GMM_EventArgs(nameof (Logout)));
      ByteField DataBlock1 = new ByteField(new byte[5]
      {
        (byte) 27,
        (byte) 27,
        (byte) 27,
        (byte) 3,
        (byte) 13
      });
      int num = 0;
      while (num < 1 && !this.theBus.BreakRequest)
      {
        this.channel.TransmitBlock(ref DataBlock1);
        ByteField DataBlock2 = new ByteField();
        try
        {
          if (!Util.Wait(400L, nameof (Logout), (ICancelable) this.theBus, RelayDevice.logger))
            return false;
          this.channel.ReceiveBlock(ref DataBlock2);
          if (this.ContainsByteSequence(DataBlock2.Data, DataBlock2.Count, new byte[4]
          {
            (byte) 27,
            (byte) 27,
            (byte) 27,
            (byte) 3
          }))
          {
            this.theBus.SendMessage(new GMM_EventArgs("The logout was successful!"));
            return true;
          }
        }
        catch (TimeoutException ex)
        {
        }
        ++num;
        this.theBus.SendMessage(new GMM_EventArgs("Logout attempt was not successful. Try again (" + num.ToString() + " attempt)."));
        if (!Util.Wait(1000L, nameof (Logout), (ICancelable) this.theBus, RelayDevice.logger))
          return false;
      }
      return false;
    }

    private bool ReadDataStorage()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.MBus))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for M-Bus!");
        return false;
      }
      ByteField DataBlock1 = new ByteField(new byte[4]
      {
        (byte) 27,
        (byte) 27,
        (byte) 27,
        (byte) 19
      });
      this.channel.TransmitBlock(ref DataBlock1);
      if (!Util.Wait(600L, nameof (ReadDataStorage), (ICancelable) this.theBus, RelayDevice.logger))
        return false;
      ByteField DataBlock2 = new ByteField();
      this.channel.ReceiveBlock(ref DataBlock2);
      if (this.ContainsByteSequence(DataBlock2.Data, DataBlock2.Count, new byte[4]
      {
        (byte) 27,
        (byte) 27,
        (byte) 27,
        (byte) 19
      }))
      {
        RelayDevice.logger.Debug("The device has changed to the Y-Modem mode successfully.");
        YModem ymodem = new YModem(this.channel);
        ymodem.PacketReceived += new System.EventHandler(this.Ymodem_PacketReceived);
        byte[] numArray = ymodem.Receive(true);
        if (numArray == null)
          return false;
        this.ReceivedFile = numArray;
        if (this.ReadStorageCompleted != null)
          this.ReadStorageCompleted((object) this, (EventArgs) null);
        ymodem.Receive(true);
        if (!Util.Wait(500L, "Read data", (ICancelable) this.theBus, RelayDevice.logger))
          return false;
        this.channel.ReceiveBlock(ref DataBlock2);
        if (this.ContainsByteSequence(DataBlock2.Data, DataBlock2.Count, new byte[4]
        {
          (byte) 27,
          (byte) 27,
          (byte) 27,
          (byte) 17
        }))
          RelayDevice.logger.Debug("The Y-Modem-mode has been successfully exited.");
        else
          RelayDevice.logger.Debug("The Y-Modem-mode has been failed to exited.");
        return true;
      }
      RelayDevice.logger.Debug("Can not change to Y-Modem-mode.");
      return false;
    }

    private bool SplitRelayTelegrams()
    {
      if (this.ReceivedFile == null)
        return false;
      this.MBusTelegrams.Clear();
      for (int sourceIndex = 10; sourceIndex + 4 < this.ReceivedFile.Length; ++sourceIndex)
      {
        bool flag1 = this.ReceivedFile[sourceIndex] == (byte) 104 && this.ReceivedFile[sourceIndex + 3] == (byte) 104;
        bool flag2 = (int) this.ReceivedFile[sourceIndex + 1] == (int) this.ReceivedFile[sourceIndex + 2] && this.ReceivedFile[sourceIndex + 1] > (byte) 0;
        if (flag1 && flag2)
        {
          string str = Encoding.ASCII.GetString(this.ReceivedFile, sourceIndex - 10, 10);
          DateTime timePoint = DateTime.Parse(string.Format("{0}/{1}/20{2} {3}:{4}:00", (object) str.Substring(0, 2), (object) str.Substring(2, 2), (object) str.Substring(4, 2), (object) str.Substring(6, 2), (object) str.Substring(8, 2)), (IFormatProvider) FixedFormates.TheFormates.DateTimeFormat);
          byte primaryAddress = this.ReceivedFile[sourceIndex + 5];
          byte[] numArray = new byte[(int) this.ReceivedFile[sourceIndex + 1] + 6];
          Array.Copy((Array) this.ReceivedFile, sourceIndex, (Array) numArray, 0, numArray.Length);
          long int64 = Util.ConvertBcdInt64ToInt64((long) numArray[7] + ((long) numArray[8] << 8) + ((long) numArray[9] << 16) + ((long) numArray[10] << 24));
          this.MBusTelegrams.Add(primaryAddress, int64, timePoint, numArray);
        }
      }
      return true;
    }

    private bool ContainsByteSequence(byte[] src, int length, byte[] part)
    {
      for (int index1 = 0; index1 < length; ++index1)
      {
        if ((int) src[index1] == (int) part[0] && length - index1 >= part.Length)
        {
          bool flag = true;
          int index2 = 0;
          while (index2 < part.Length)
          {
            if ((int) src[index1] != (int) part[index2])
            {
              flag = false;
              break;
            }
            ++index2;
            ++index1;
          }
          if (flag)
            return true;
        }
      }
      return false;
    }

    private void Ymodem_PacketReceived(object sender, EventArgs e)
    {
      if (!(sender is YModem ymodem))
        return;
      this.ActualPacketData = ymodem.ActualPacketData;
      if (ymodem.ExpectedPackets > 0L && ymodem.ExpectedPackets >= (long) ymodem.ActualPacketNumber)
      {
        int num = (int) ((long) (ymodem.ActualPacketNumber * 100) / ymodem.ExpectedPackets);
        GMM_EventArgs e1 = new GMM_EventArgs(GMM_EventArgs.MessageType.MessageAndProgressPercentage);
        e1.EventMessage = string.Format("Progress {0} %", (object) num);
        e1.ProgressPercentage = num;
        try
        {
          this.theBus.SendMessage(e1);
        }
        catch
        {
        }
      }
      if (!this.theBus.BreakRequest)
        return;
      ymodem.IsCanceled = true;
    }

    private void SaveFile(byte[] buffer)
    {
      using (FileStream output = new FileStream(Path.Combine(SystemValues.LoggDataPath, "ZENTRALE.BIN_" + SystemValues.DateTimeNow.Millisecond.ToString()), FileMode.Create, FileAccess.Write))
      {
        using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
          binaryWriter.Write(buffer);
      }
    }

    private byte[] LoadFile()
    {
      string[] files = Directory.GetFiles(SystemValues.LoggDataPath);
      string path1 = string.Empty;
      long num1 = 0;
      foreach (string path2 in files)
      {
        string fileName = Path.GetFileName(path2);
        if (fileName.StartsWith("ZENTRALE.BIN_"))
        {
          try
          {
            long num2 = long.Parse(fileName.Substring("ZENTRALE.BIN_".Length));
            if (num1 < num2)
            {
              num1 = num2;
              path1 = path2;
            }
          }
          catch
          {
          }
        }
      }
      if (!File.Exists(path1))
        return (byte[]) null;
      using (FileStream input = new FileStream(path1, FileMode.Open, FileAccess.Read))
      {
        using (BinaryReader binaryReader = new BinaryReader((Stream) input))
          return binaryReader.ReadBytes((int) input.Length);
      }
    }
  }
}


--- RelayList.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RelayList
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using System.Collections;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  internal class RelayList : MBusList
  {
    private RelayDevice relayDevice;
    private static IAsyncFunctions asyncComOriginal;
    private RelayAsyncFunctions asyncComDummy;

    public RelayList(DeviceCollectorFunctions busDevice)
      : base(busDevice)
    {
      this.MyBus = busDevice;
      this.bus = new ArrayList();
      this.FaultyDevices = new List<MBusDevice>();
    }

    internal override bool ScanFromAddress(int scanAddress)
    {
      if (this.MyBus.MyCom is RelayAsyncFunctions)
        this.MyBus.MyCom = RelayList.asyncComOriginal;
      if (this.relayDevice == null)
        this.relayDevice = new RelayDevice(this.MyBus);
      MbusTelegramCollection telegramCollection = this.relayDevice.Read();
      if (telegramCollection == null)
        return false;
      RelayList.asyncComOriginal = this.MyBus.MyCom;
      this.asyncComDummy = new RelayAsyncFunctions();
      this.MyBus.MyCom = (IAsyncFunctions) this.asyncComDummy;
      foreach (MBusTelegramSet mbusTelegramSet in (List<MBusTelegramSet>) telegramCollection)
      {
        if (mbusTelegramSet.MBusTelegrams.Count != 0)
        {
          MbusTelegram mbusTelegram = mbusTelegramSet.MBusTelegrams[0];
          this.bus.Add((object) this.ReadMBusTelegram(mbusTelegramSet.PrimaryAddress, mbusTelegram));
        }
      }
      this.MyBus.MyCom = RelayList.asyncComOriginal;
      return true;
    }

    internal List<DeviceInfo> GetAllParametersOfSelectedDevice()
    {
      if (this.asyncComDummy == null || this.relayDevice == null || this.relayDevice.MBusTelegrams == null || this.relayDevice.MBusTelegrams.Count == 0)
        return (List<DeviceInfo>) null;
      DeviceInfo info = this.MyBus.GetSelectedDevice().Info;
      MBusTelegramSet telegramsOfMbusDevice = this.relayDevice.MBusTelegrams.GetTelegramsOfMBusDevice(info.A_Field, long.Parse(info.MeterNumber));
      if (telegramsOfMbusDevice == null || telegramsOfMbusDevice.MBusTelegrams == null || telegramsOfMbusDevice.MBusTelegrams.Count == 0)
        return (List<DeviceInfo>) null;
      try
      {
        this.MyBus.MyCom = (IAsyncFunctions) this.asyncComDummy;
        List<DeviceInfo> ofSelectedDevice = new List<DeviceInfo>(telegramsOfMbusDevice.MBusTelegrams.Count);
        foreach (MbusTelegram mbusTelegram in telegramsOfMbusDevice.MBusTelegrams)
        {
          MBusDevice mbusDevice = this.ReadMBusTelegram(telegramsOfMbusDevice.PrimaryAddress, mbusTelegram);
          if (mbusDevice != null && mbusDevice.Info != null)
            ofSelectedDevice.Add(mbusDevice.Info);
        }
        return ofSelectedDevice;
      }
      catch
      {
        return (List<DeviceInfo>) null;
      }
      finally
      {
        this.MyBus.MyCom = RelayList.asyncComOriginal;
      }
    }

    private MBusDevice ReadMBusTelegram(byte primaryAddress, MbusTelegram telegramToRead)
    {
      MBusDevice mbusDevice = new MBusDevice(this.MyBus);
      mbusDevice.PrimaryAddressKnown = true;
      mbusDevice.PrimaryAddressOk = true;
      mbusDevice.PrimaryDeviceAddress = primaryAddress;
      this.asyncComDummy.MbusTelegramToRead = telegramToRead;
      ByteField DataBlock = (ByteField) null;
      this.MyBus.MyCom.TransmitBlock(ref DataBlock);
      if (!mbusDevice.ReceiveHeader() || !mbusDevice.ReceiveLongframeEnd(telegramToRead.TimePoint))
        return (MBusDevice) null;
      mbusDevice.GenerateParameterList(true);
      mbusDevice.Info.ParameterOk = true;
      return mbusDevice;
    }
  }
}


--- RuntimeThread.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.RuntimeThread
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  internal class RuntimeThread
  {
    private DeviceCollectorFunctions MyBusFunctions;

    public event RuntimeThread.FunctionDone OnFunctionDone;

    public void FunctionDoneNotify()
    {
      this.MyBusFunctions.RunningFunction = DeviceCollectorFunctions.Functions.NoFunction;
      if (this.OnFunctionDone == null)
        return;
      this.OnFunctionDone((object) this, 0);
    }

    internal void TestloopReadEEProm(ref DeviceCollectorFunctions BusRef)
    {
      this.MyBusFunctions = BusRef;
      while (!this.MyBusFunctions.BreakRequest)
      {
        ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).Location = 0;
        ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).StartAddress = 10;
        ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).NumberOfBytes = 210;
        ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).ReadMemory();
      }
    }

    internal void TestloopWriteReadEEProm(ref DeviceCollectorFunctions BusRef)
    {
      Random random = new Random((int) SystemValues.DateTimeNow.Ticks);
      byte[] numArray = new byte[2048];
      this.MyBusFunctions = BusRef;
      while (!this.MyBusFunctions.BreakRequest)
      {
        ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).Location = 0;
        ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).StartAddress = 0;
        ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).NumberOfBytes = 2048;
        ByteField byteField = new ByteField(2048);
        for (int index = 0; index < 2048; ++index)
        {
          byte Byte;
          do
          {
            Byte = (byte) random.Next((int) byte.MaxValue);
          }
          while (Byte == (byte) 219);
          numArray[index] = Byte;
          byteField.Add(Byte);
        }
        ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).DataBuffer = byteField;
        if (!((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).WriteMemory())
        {
          int num1 = (int) MessageBox.Show("EEProm write error", "Error");
        }
        else if (!((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).ReadMemory())
        {
          int num2 = (int) MessageBox.Show("EEProm read error", "Error");
        }
        else
        {
          string text = "";
          if (((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).DataBuffer.Count != 2048)
          {
            text = "Read size to slow";
          }
          else
          {
            for (int index = 0; index < 2048; ++index)
            {
              if ((int) numArray[index] != (int) ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).DataBuffer.Data[index])
                text = text + index.ToString("x04") + "; w:" + numArray[index].ToString("x02") + "; r:" + ((Serie2MBus) this.MyBusFunctions.MyDeviceList.SelectedDevice).DataBuffer.Data[index].ToString("x02") + "\r\n";
            }
          }
          if (text != "")
          {
            int num3 = (int) MessageBox.Show(text, "Error");
          }
        }
      }
    }

    public delegate void FunctionDone(object sender, int DummyParameter);

    internal delegate void Start(ref DeviceCollectorFunctions BusFkt);
  }
}


--- Serie1MBus.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.Serie1MBus
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class Serie1MBus : MBusDevice
  {
    private const long S1B_F_O_OutPu1 = 32509943;
    private const long S1B_F_O_OutPu2 = 15732727;

    public Serie1MBus(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.DeviceType = DeviceTypes.ZR_Serie1;
    }

    public Serie1MBus(MBusDevice TheMBusDevice)
      : base(TheMBusDevice.MyBus)
    {
      this.Info = TheMBusDevice.Info;
      this.PrimaryAddressKnown = TheMBusDevice.PrimaryAddressKnown;
      this.PrimaryAddressOk = TheMBusDevice.PrimaryAddressOk;
      this.PrimaryDeviceAddress = TheMBusDevice.PrimaryDeviceAddress;
      this.DeviceType = DeviceTypes.ZR_Serie1;
    }

    internal override bool SelectParameterList(int ListNumber, int function) => false;

    public void ReadVersion()
    {
    }

    internal bool WriteBit(long Address, bool SetBitTo1)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteBit);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(6);
      this.TransmitBuffer.Add((int) sbyte.MaxValue);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(5);
      this.TransmitBuffer.Add((byte) ((ulong) Address & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add((byte) ((ulong) (Address >> 8) & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add((byte) ((ulong) (Address >> 16) & (ulong) byte.MaxValue));
      byte Byte = (byte) ((ulong) (Address >> 24) & 15UL);
      if (SetBitTo1)
        Byte |= (byte) 16;
      this.TransmitBuffer.Add(Byte);
      this.WorkTransparentChecksum();
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteBlock);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
      }
      return false;
    }

    internal bool WriteNibble(long Address, byte NibbleData)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteNibble);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(6);
      this.TransmitBuffer.Add((int) sbyte.MaxValue);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(6);
      this.TransmitBuffer.Add((byte) ((ulong) Address & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add((byte) ((ulong) (Address >> 8) & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add((byte) ((ulong) (Address >> 16) & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add((byte) ((uint) (byte) ((ulong) (Address >> 24) & 15UL) | (uint) (byte) (((int) NibbleData & 15) << 4)));
      this.WorkTransparentChecksum();
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteBlock);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
      }
      return false;
    }

    internal bool WriteByte(long Address, byte ByteData)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteByte);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(6);
      this.TransmitBuffer.Add((int) sbyte.MaxValue);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(7);
      this.TransmitBuffer.Add((byte) ((ulong) Address & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add((byte) ((ulong) (Address >> 8) & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add((byte) ((ulong) (Address >> 16) & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add(ByteData);
      this.WorkTransparentChecksum();
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteBlock);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
      }
      return false;
    }

    private void WorkTransparentChecksum()
    {
      byte num = 0;
      for (int index = 10; index <= 14; ++index)
        num = (byte) ((uint) (byte) ((uint) num + (uint) (byte) ((uint) this.TransmitBuffer.Data[index] & 15U)) + (uint) (byte) ((int) this.TransmitBuffer.Data[index] >> 4 & 15));
      this.TransmitBuffer.Data[10] |= (byte) (((int) num & 15) << 4);
    }

    internal bool ReadMemory(long FullStartAddress, int NumberOfBytes, ref ByteField MemoryData)
    {
      return this.ReadMemoryBlock(FullStartAddress, NumberOfBytes, ref MemoryData);
    }

    private bool ReadMemoryBlock(long StartAddress, int NumberOfBytes, ref ByteField MemoryData)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMemoryBlock);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(6);
      this.TransmitBuffer.Add((int) sbyte.MaxValue);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(4);
      this.TransmitBuffer.Add((byte) ((ulong) StartAddress & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add((byte) ((ulong) (StartAddress >> 8) & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add((byte) ((ulong) (StartAddress >> 16) & (ulong) byte.MaxValue));
      this.TransmitBuffer.Add(NumberOfBytes);
      this.WorkTransparentChecksum();
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.SendMessage((int) (StartAddress & (long) ushort.MaxValue), GMM_EventArgs.MessageType.PrimaryAddressMessage);
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteBlock);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          this.GenerateREQ_UD2();
          this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
          this.MyBus.BusState.IncrementTransmitBlockCounter();
          if (this.ReceiveHeader() && this.ReceiveLongframeEnd())
          {
            this.MyBus.SendMessage((int) (StartAddress & (long) ((int) ushort.MaxValue + NumberOfBytes)), GMM_EventArgs.MessageType.PrimaryAddressMessage);
            if (this.ReceiveBuffer.Data[0] == (byte) 15 && this.ReceiveBuffer.Count == NumberOfBytes + 5)
            {
              for (int index = 1; index <= NumberOfBytes; ++index)
                MemoryData.Add(this.ReceiveBuffer.Data[index]);
              this.MyBus.SendMessage(0, GMM_EventArgs.MessageType.EndMessage);
              return true;
            }
          }
        }
      }
      this.MyBus.SendMessage(0, GMM_EventArgs.MessageType.EndMessage);
      return false;
    }

    internal bool SetOutput(int Port, bool State)
    {
      bool SetBitTo1 = !State;
      if (Port == 1)
        return this.WriteBit(32509943L, SetBitTo1);
      return Port == 2 && this.WriteBit(15732727L, SetBitTo1);
    }

    internal bool GetInput(int Port, out bool State)
    {
      State = false;
      if (!this.REQ_UD2())
        return false;
      for (int index = 0; index < this.Info.ParameterList.Count; ++index)
      {
        if (this.Info.ParameterList[index].DefineString == "DIGI_IN")
        {
          if (this.Info.ParameterList[index].ValueString.Length != 8)
            return false;
          switch (Port)
          {
            case 1:
              if (this.Info.ParameterList[index].ValueString[1] == '0')
              {
                State = true;
                break;
              }
              break;
            case 2:
              if (this.Info.ParameterList[index].ValueString[2] == '0')
                State = true;
              break;
          }
          return true;
        }
      }
      return false;
    }

    internal new virtual bool ResetDevice()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ResetDevice);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.MyCom.SetAnswerOffsetTime(1500);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(6);
      this.TransmitBuffer.Add((int) sbyte.MaxValue);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(2);
      this.TransmitBuffer.Add(165);
      this.TransmitBuffer.Add(90);
      this.TransmitBuffer.Add(175);
      this.TransmitBuffer.Add(254);
      this.WorkTransparentChecksum();
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          flag = true;
          break;
        }
      }
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      return flag;
    }
  }
}


--- Serie2MBus.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.Serie2MBus
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using NLog;
using System;
using System.Globalization;
using System.Threading;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class Serie2MBus : MBusDevice
  {
    protected static Logger Serie2_3_Logger = LogManager.GetLogger("Serie2_3_MBus");
    internal long DeviceVersion;
    internal int HardwareTypeId;
    internal int HardwareMask;
    internal int SubversionRevision;
    internal DateTime BuildTime;
    public const int ZrMaxReadBlockSize = 200;
    internal const int MaxWriteBlockSizeLow = 16;
    internal const long HighBlockSizeVersion = 17104897;
    internal const int MaxWriteBlockSizeHigh = 32;
    internal const int MaxWriteBlockSizeSerie3 = 150;
    internal const int MaxWriteBlockSizeSerie3LowBaud = 16;
    internal const long Baud38400Version = 17104897;
    public static int[] AllBaudrates = new int[5]
    {
      2400,
      4800,
      9600,
      38400,
      300
    };
    public static int[] All_C2_Baudrates = new int[2]
    {
      2400,
      4800
    };
    public static int[] All_WR3_Baudrates = new int[4]
    {
      2400,
      9600,
      38400,
      300
    };
    internal int MaxWriteBlockSize;
    internal int Location = 0;
    internal int StartAddress = 0;
    internal int NumberOfBytes = 0;
    internal byte AndMask = 0;
    internal byte OrMask = 0;
    internal ByteField DataBuffer;
    internal ByteField OldDataBuffer;

    public Serie2MBus(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.BaseConstructor();
    }

    public Serie2MBus(MBusDevice TheMBusDevice)
      : base(TheMBusDevice.MyBus)
    {
      this.Info = TheMBusDevice.Info;
      this.PrimaryAddressKnown = TheMBusDevice.PrimaryAddressKnown;
      this.PrimaryAddressOk = TheMBusDevice.PrimaryAddressOk;
      this.PrimaryDeviceAddress = TheMBusDevice.PrimaryDeviceAddress;
      this.IsSelectedOnBus = TheMBusDevice.IsSelectedOnBus;
      this.BaseConstructor();
    }

    private void BaseConstructor()
    {
      this.DeviceType = DeviceTypes.ZR_Serie2;
      this.MaxWriteBlockSize = 16;
    }

    internal override bool SelectParameterList(int ListNumber, int function) => false;

    internal bool ReadVersion(int[] Baudrates)
    {
      this.MyBus.BreakRequest = false;
      this.HardwareTypeId = 0;
      this.HardwareMask = 0;
      string[] strArray;
      if (Baudrates == null)
      {
        strArray = new string[1]
        {
          this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, "")
        };
      }
      else
      {
        strArray = new string[Baudrates.Length];
        for (int index = 0; index < Baudrates.Length; ++index)
          strArray[index] = Baudrates[index].ToString();
      }
      this.MaxWriteBlockSize = 16;
      int index1 = 0;
      string ParameterValue = this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, "");
      for (int index2 = 0; index2 < strArray.Length; ++index2)
      {
        if (strArray[index2] == ParameterValue)
        {
          index1 = index2;
          break;
        }
      }
      ByteField data = new ByteField(3);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(6);
      this.FinishLongFrame();
      if (!this.MyBus.MyCom.Open())
        return false;
      int num1 = this.MyBus.MaxRequestRepeat * strArray.Length;
      int num2 = 1;
      bool flag = true;
      while (num1-- > 0 && !this.MyBus.BreakRequest)
      {
        if (!flag)
          Serie2MBus.Serie2_3_Logger.Warn("Repeate read version");
        else
          flag = false;
        string str1 = "Read version! Try:" + num2.ToString() + "  Baud:";
        Serie2MBus.Serie2_3_Logger.Debug(str1);
        this.MyBus.SendMessage(str1, int.Parse(strArray[index1]), GMM_EventArgs.MessageType.StandardMessage);
        data.Count = 0;
        string str2 = strArray[index1].PadLeft(6, '0');
        data.Add(byte.Parse(str2.Substring(0, 2), NumberStyles.HexNumber));
        data.Add(byte.Parse(str2.Substring(2, 2), NumberStyles.HexNumber));
        data.Add(byte.Parse(str2.Substring(4, 2), NumberStyles.HexNumber));
        this.MyBus.MyCom.ComWriteLoggerData(EventLogger.LoggerEvent.BusSendREQ_Version, ref data);
        ++this.MyBus.BusState.TransmitBlockCounter;
        if (this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
        {
          if (!this.ReceiveHeader() || !this.ReceiveLongframeEnd())
          {
            Serie2MBus.Serie2_3_Logger.Trace("Read version NOK");
            ++index1;
            if (index1 >= strArray.Length)
            {
              index1 = 0;
              ++num2;
            }
            this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, strArray[index1]);
          }
          else
          {
            Serie2MBus.Serie2_3_Logger.Trace("Read version OK");
            if (this.ReceiveBuffer.Count == 5)
            {
              this.DeviceVersion = (long) this.ReceiveBuffer.Data[1] << 16;
              this.DeviceVersion += (long) this.ReceiveBuffer.Data[2] << 24;
            }
            else if (this.ReceiveBuffer.Count >= 7)
            {
              this.DeviceVersion = (long) this.ReceiveBuffer.Data[1];
              this.DeviceVersion += (long) this.ReceiveBuffer.Data[2] << 8;
              this.DeviceVersion += (long) this.ReceiveBuffer.Data[3] << 16;
              this.DeviceVersion += (long) this.ReceiveBuffer.Data[4] << 24;
              if (this.DeviceVersion >= 17104897L)
                this.MaxWriteBlockSize = 32;
              if (this.ReceiveBuffer.Count == 11 || this.ReceiveBuffer.Count == 13)
              {
                this.HardwareTypeId = (int) this.ReceiveBuffer.Data[5];
                this.HardwareTypeId += (int) this.ReceiveBuffer.Data[6] << 8;
                this.HardwareTypeId += (int) this.ReceiveBuffer.Data[7] << 16;
                this.HardwareTypeId += (int) this.ReceiveBuffer.Data[8] << 24;
                this.MaxWriteBlockSize = !(str2 != "115200") ? 150 : 16;
                if (this.ReceiveBuffer.Count == 13)
                {
                  this.HardwareMask = (int) this.ReceiveBuffer.Data[9];
                  this.HardwareMask += (int) this.ReceiveBuffer.Data[10] << 8;
                }
              }
              if (this.UseMaxBaudrate)
              {
                string str3 = this.DeviceVersion < 17104897L ? "4800" : "38400";
                if (strArray[index1] != str3)
                {
                  Serie2MBus.Serie2_3_Logger.Debug("Read version send change baudrate");
                  if (this.SetBaudrate(int.Parse(str3)))
                    this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, str3);
                  else
                    break;
                }
              }
            }
            else
              continue;
            ZR_ClassLibMessages.ClearErrorText();
            return true;
          }
        }
      }
      this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, ParameterValue);
      return false;
    }

    internal override bool ResetDevice(int AfterResetBaudrate)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ResetDeviceBaudChange);
      string str = this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, "");
      string ParameterValue = AfterResetBaudrate.ToString();
      if (str == ParameterValue)
        return this.ResetDevice();
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.MyCom.SetAnswerOffsetTime(5000);
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.GenerateSendDataHeader();
        this.TransmitBuffer.Add(15);
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(4);
        this.FinishLongFrame();
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusDeviceReset);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        Thread.Sleep(80);
        this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, ParameterValue);
        if (!this.ReceiveOkNok())
        {
          if (this.ReadVersion((int[]) null))
          {
            if (this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, "") == ParameterValue)
            {
              flag = true;
              break;
            }
          }
          else
            break;
        }
        else
        {
          flag = true;
          ZR_ClassLibMessages.ClearErrorText();
          break;
        }
      }
      if (this.MyBus.BusState.RepeadCounter == 1)
        Thread.Sleep(500);
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      return flag;
    }

    internal override bool ResetDevice()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ResetDevice);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.MyCom.SetAnswerOffsetTime(5000);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(4);
      this.FinishLongFrame();
      bool flag = false;
      if (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusDeviceReset);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveOkNok())
        {
          this.MyBus.MyCom.SetAnswerOffsetTime(0);
          if (!this.ReadVersion((int[]) null))
            goto label_6;
        }
        flag = true;
        ZR_ClassLibMessages.ClearErrorText();
      }
label_6:
      if (this.MyBus.BusState.RepeadCounter == 1)
        Thread.Sleep(500);
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      return flag;
    }

    internal bool RunBackup()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.RunBackup);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.MyCom.SetAnswerOffsetTime(1000);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(8);
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Debug("Send run backup");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveOkNok())
        {
          Serie2MBus.Serie2_3_Logger.Warn(" ... repeat run backup ");
        }
        else
        {
          Serie2MBus.Serie2_3_Logger.Debug("... run backup done");
          flag = true;
          ZR_ClassLibMessages.ClearErrorText();
          break;
        }
      }
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      Application.DoEvents();
      Thread.Sleep(100);
      Application.DoEvents();
      Thread.Sleep(100);
      return flag;
    }

    internal bool SetEmergencyMode()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.SetEmergencyMode);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(10);
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Info("Send set emergency mode");
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveOkNok())
        {
          Serie2MBus.Serie2_3_Logger.Warn("--> Repeat: Set emergency mode");
        }
        else
        {
          flag = true;
          ZR_ClassLibMessages.ClearErrorText();
          break;
        }
      }
      if (flag)
        Serie2MBus.Serie2_3_Logger.Info("--> Set emergency mode done");
      else
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Set emergency mode error", Serie2MBus.Serie2_3_Logger);
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      return flag;
    }

    internal bool DeleteMeterKey(int MeterKey)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.DeleteMeterKey);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(7);
      this.TransmitBuffer.Add(MeterKey & (int) byte.MaxValue);
      this.TransmitBuffer.Add(MeterKey >> 8 & (int) byte.MaxValue);
      this.TransmitBuffer.Add(MeterKey >> 16 & (int) byte.MaxValue);
      this.TransmitBuffer.Add(MeterKey >> 24 & (int) byte.MaxValue);
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          flag = true;
          ZR_ClassLibMessages.ClearErrorText();
          break;
        }
      }
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      return flag;
    }

    internal virtual bool ReadMemory()
    {
      if (!this.MyBus.MyCom.Open())
        return false;
      int startAddress = this.StartAddress;
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartReadMemory);
      this.DataBuffer = new ByteField(this.NumberOfBytes);
      do
      {
        int BlockSize = this.NumberOfBytes - (startAddress - this.StartAddress);
        if (BlockSize > 200)
          BlockSize = 200;
        this.MyBus.SendMessage(startAddress, GMM_EventArgs.MessageType.PrimaryAddressMessage);
        if (this.MyBus.BreakRequest)
        {
          this.MyBus.SendMessage(startAddress, GMM_EventArgs.MessageType.EndMessage);
          return false;
        }
        if (!this.ReadMemoryBlock(startAddress, BlockSize))
        {
          this.MyBus.SendMessage(startAddress, GMM_EventArgs.MessageType.EndMessage);
          return false;
        }
        for (int index = 1; index < this.ReceiveBuffer.Count - 2; ++index)
          this.DataBuffer.Add(this.ReceiveBuffer.Data[index]);
        startAddress += BlockSize;
      }
      while (startAddress - this.StartAddress < this.NumberOfBytes);
      this.MyBus.SendMessage(startAddress, GMM_EventArgs.MessageType.EndMessage);
      return true;
    }

    private bool ReadMemoryBlock(int BlockStartAddress, int BlockSize)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ReadMemoryBlock);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) (BlockStartAddress & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (BlockStartAddress >> 8 & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) BlockSize);
      if (this.Location == 0)
        this.TransmitBuffer.Add(0);
      else
        this.TransmitBuffer.Add(2);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        if (Serie2MBus.Serie2_3_Logger.IsDebugEnabled)
          Serie2MBus.Serie2_3_Logger.Debug("Read memory 0x" + BlockStartAddress.ToString("X4") + " Size: " + BlockSize.ToString());
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveHeader() && this.ReceiveLongframeEnd())
        {
          if (this.ReceiveBuffer.Count - 3 != BlockSize)
          {
            Serie2MBus.Serie2_3_Logger.Error("--> !!! Wrong block size received !!!");
          }
          else
          {
            ZR_ClassLibMessages.ClearErrorText();
            return true;
          }
        }
      }
      return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Read memory block error", Serie2MBus.Serie2_3_Logger);
    }

    internal bool UpdateMemory()
    {
      if (!this.MyBus.MyCom.Open())
        return false;
      int num = this.StartAddress;
      int DataStartOffset = 0;
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartUpdateMemory);
      while (true)
      {
        while (DataStartOffset >= this.DataBuffer.Count || (int) this.DataBuffer.Data[DataStartOffset] != (int) this.OldDataBuffer.Data[DataStartOffset])
        {
          if (DataStartOffset < this.DataBuffer.Count)
          {
            int BlockSize = this.DataBuffer.Count - DataStartOffset;
            if (BlockSize > this.MaxWriteBlockSize)
              BlockSize = this.MaxWriteBlockSize;
            for (; BlockSize > 1; --BlockSize)
            {
              int index = DataStartOffset + BlockSize - 1;
              if ((int) this.DataBuffer.Data[index] != (int) this.OldDataBuffer.Data[index])
                break;
            }
            num = this.StartAddress + DataStartOffset;
            this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.PrimaryAddressMessage);
            if (this.MyBus.BreakRequest)
            {
              this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.EndMessage);
              return false;
            }
            if (!this.WriteMemoryBlock(num, BlockSize, ref DataStartOffset))
            {
              this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.EndMessage);
              return false;
            }
            if (DataStartOffset < this.DataBuffer.Count)
              continue;
          }
          this.MyBus.SendMessage(num, GMM_EventArgs.MessageType.EndMessage);
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
        ++DataStartOffset;
      }
    }

    internal virtual bool WriteMemory()
    {
      if (!this.MyBus.MyCom.Open())
        return false;
      int startAddress = this.StartAddress;
      int DataStartOffset = 0;
      DeviceCollectorFunctions.logger.Trace("Write memory. Address: 0x" + this.StartAddress.ToString("x04"));
      this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteMemory);
      do
      {
        int BlockSize = this.DataBuffer.Count - (startAddress - this.StartAddress);
        if (BlockSize > this.MaxWriteBlockSize)
          BlockSize = this.MaxWriteBlockSize;
        this.MyBus.SendMessage(startAddress, GMM_EventArgs.MessageType.PrimaryAddressMessage);
        if (this.MyBus.BreakRequest)
        {
          this.MyBus.SendMessage(startAddress, GMM_EventArgs.MessageType.EndMessage);
          return false;
        }
        if (!this.WriteMemoryBlock(startAddress, BlockSize, ref DataStartOffset))
        {
          this.MyBus.SendMessage(startAddress, GMM_EventArgs.MessageType.EndMessage);
          return false;
        }
        startAddress += BlockSize;
        Serie2MBus.Serie2_3_Logger.Debug("write block at " + startAddress.ToString("x4") + " - bytes " + BlockSize.ToString("x4"));
      }
      while (startAddress - this.StartAddress < this.DataBuffer.Count);
      this.MyBus.SendMessage(startAddress, GMM_EventArgs.MessageType.EndMessage);
      ZR_ClassLibMessages.ClearErrorText();
      return true;
    }

    private bool WriteMemoryBlock(int BlockStartAddress, int BlockSize, ref int DataStartOffset)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMemoryBlock);
      if (this.WatchNumberOfBytes > 0)
      {
        bool flag = false;
        if (this.WatchMemoryLocation == (MemoryLocation) this.Location)
        {
          int num1 = this.WatchStartAddress + this.WatchNumberOfBytes - 1;
          int num2 = BlockStartAddress + BlockSize - 1;
          if (this.WatchStartAddress >= BlockStartAddress)
          {
            if (num2 >= this.WatchStartAddress)
              flag = true;
          }
          else if (num1 >= BlockStartAddress)
            flag = true;
          if (flag)
          {
            byte[] data = new byte[BlockSize];
            for (int index = 0; index < BlockSize; ++index)
              data[index] = this.DataBuffer.Data[DataStartOffset + index];
            this.MyBus.MemoryWriteWatch(BlockStartAddress, ref data);
          }
        }
      }
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) (BlockStartAddress & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (BlockStartAddress >> 8 & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) BlockSize);
      if (this.Location == 0)
        this.TransmitBuffer.Add(1);
      else if (this.Location == 1)
        this.TransmitBuffer.Add(3);
      else if (this.Location == 3)
      {
        this.TransmitBuffer.Add(1);
      }
      else
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal memory location");
        return false;
      }
      for (int index = 0; index < BlockSize; ++index)
        this.TransmitBuffer.Add(this.DataBuffer.Data[DataStartOffset++]);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        if (Serie2MBus.Serie2_3_Logger.IsDebugEnabled)
        {
          Serie2MBus.Serie2_3_Logger.Debug("Write memory block. Address: 0x" + BlockStartAddress.ToString("x04") + " Bytes: 0x" + BlockSize.ToString("x04"));
          Serie2MBus.Serie2_3_Logger.Debug("--> " + BitConverter.ToString(this.TransmitBuffer.GetByteArray()));
        }
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveOkNok())
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> Write memory error");
        }
        else
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> Write memory done");
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
      }
      return false;
    }

    internal bool WriteBitfield()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteBitField);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) (this.StartAddress & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (this.StartAddress >> 8 & (int) byte.MaxValue));
      this.TransmitBuffer.Add(1);
      this.TransmitBuffer.Add(9);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(this.AndMask);
      this.TransmitBuffer.Add(this.OrMask);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteBlock);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
        {
          ZR_ClassLibMessages.ClearErrorText();
          return true;
        }
      }
      return false;
    }

    internal bool DigitalInputsAndOutputs(
      uint NewOutputMask,
      uint NewOutputState,
      ref uint OldOutputState,
      ref uint OldInputState)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.DigitalInputsAndOutputs);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) NewOutputMask);
      this.TransmitBuffer.Add((byte) NewOutputState);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(12);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusSendREQ_Version);
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        ++this.MyBus.BusState.TransmitBlockCounter;
        if (this.ReceiveHeader() && this.ReceiveLongframeEnd())
        {
          if (this.ReceiveBuffer.Count - 3 != 2)
          {
            this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusReadWrongBlockLength);
          }
          else
          {
            OldOutputState = (uint) this.ReceiveBuffer.Data[1];
            OldInputState = (uint) this.ReceiveBuffer.Data[2];
            ZR_ClassLibMessages.ClearErrorText();
            return true;
          }
        }
      }
      return false;
    }

    internal bool StartMeterMonitor(int SampleTime)
    {
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) SampleTime);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(5);
      this.FinishLongFrame();
      this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
      return true;
    }

    internal override bool GetMeterMonitorData(out ByteField Buffer)
    {
      Buffer = new ByteField(200);
      return this.MyBus.MyCom.ReceiveBlock(ref Buffer);
    }
  }
}


--- Serie3MBus.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.Serie3MBus
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using HandlerLib;
using System;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class Serie3MBus : Serie2MBus
  {
    public Serie3MBus(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.BaseConstructor();
    }

    public Serie3MBus(MBusDevice TheMBusDevice)
      : base(TheMBusDevice)
    {
      this.BaseConstructor();
    }

    private void BaseConstructor() => this.DeviceType = DeviceTypes.ZR_Serie3;

    internal override bool ResetDevice() => this.ResetDevice(false);

    internal override bool ReadVersion(out ReadVersionData versionData)
    {
      versionData = new ReadVersionData();
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      string str = this.MyBus.MyCom.SingleParameter(CommParameter.Baudrate, "");
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.BreakRequest = false;
      this.MaxWriteBlockSize = 16;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(6);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        if (this.MyBus.BusState.RepeadCounter > 1)
          Serie2MBus.Serie2_3_Logger.Warn("Repeat read version");
        else
          Serie2MBus.Serie2_3_Logger.Debug("Read version");
        if (this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
        {
          this.MyBus.BusState.IncrementTransmitBlockCounter();
          if (!this.ReceiveHeader() || !this.ReceiveLongframeEnd())
          {
            Serie2MBus.Serie2_3_Logger.Trace("Read version NOK");
          }
          else
          {
            Serie2MBus.Serie2_3_Logger.Trace("Read version OK");
            versionData.MBusManufacturer = this.Info.ManufacturerCode;
            versionData.MBusMedium = this.Info.Medium;
            versionData.MBusGeneration = this.Info.Version;
            versionData.MBusSerialNr = uint.Parse(this.Info.MeterNumber);
            versionData.PacketSizeOfResponceByGetVersionCommand = new int?(this.ReceiveBuffer.Count);
            if (this.ReceiveBuffer.Count == 5)
            {
              versionData.Version = (uint) this.ReceiveBuffer.Data[1] << 16;
              versionData.Version += (uint) this.ReceiveBuffer.Data[2] << 24;
            }
            else if (this.ReceiveBuffer.Count >= 7 && this.ReceiveBuffer.Count < 22)
            {
              uint num = (uint) this.ReceiveBuffer.Data[1] + ((uint) this.ReceiveBuffer.Data[2] << 8) + ((uint) this.ReceiveBuffer.Data[3] << 16) + ((uint) this.ReceiveBuffer.Data[4] << 24);
              versionData.Version = num;
              if (num >= 17104897U)
                this.MaxWriteBlockSize = 32;
              if (this.ReceiveBuffer.Count == 11 || this.ReceiveBuffer.Count == 13 || this.ReceiveBuffer.Count == 21)
              {
                if (str != "115200")
                  this.MaxWriteBlockSize = 16;
                else
                  this.MaxWriteBlockSize = 150;
                if (this.ReceiveBuffer.Count == 11 || this.ReceiveBuffer.Count == 13)
                {
                  versionData.BuildRevision = (uint) this.ReceiveBuffer.Data[5];
                  versionData.BuildRevision += (uint) this.ReceiveBuffer.Data[6] << 8;
                  versionData.BuildRevision += (uint) this.ReceiveBuffer.Data[7] << 16;
                  versionData.BuildRevision += (uint) this.ReceiveBuffer.Data[8] << 24;
                  if (this.ReceiveBuffer.Count == 13)
                  {
                    versionData.HardwareIdentification = (uint) this.ReceiveBuffer.Data[9];
                    versionData.HardwareIdentification += (uint) this.ReceiveBuffer.Data[10] << 8;
                  }
                }
                else if (this.ReceiveBuffer.Count == 21)
                {
                  versionData.HardwareIdentification = (uint) this.ReceiveBuffer.Data[5];
                  versionData.HardwareIdentification += (uint) this.ReceiveBuffer.Data[6] << 8;
                  versionData.HardwareIdentification += (uint) this.ReceiveBuffer.Data[7] << 16;
                  versionData.HardwareIdentification += (uint) this.ReceiveBuffer.Data[8] << 24;
                  versionData.BuildRevision = (uint) this.ReceiveBuffer.Data[9];
                  versionData.BuildRevision += (uint) this.ReceiveBuffer.Data[10] << 8;
                  versionData.BuildRevision += (uint) this.ReceiveBuffer.Data[11] << 16;
                  versionData.BuildRevision += (uint) this.ReceiveBuffer.Data[12] << 24;
                  DateTime? mbusDateTime = MBusDifVif.GetMBusDateTime(this.ReceiveBuffer.Data, 13);
                  if (mbusDateTime.HasValue)
                    versionData.BuildTime = mbusDateTime.Value;
                  versionData.FirmwareSignature = (ushort) this.ReceiveBuffer.Data[17];
                  versionData.FirmwareSignature += (ushort) ((uint) this.ReceiveBuffer.Data[18] << 8);
                }
              }
            }
            else
            {
              if (this.ReceiveBuffer.Count != 22)
                return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Read version with wrong number of bytes.", Serie2MBus.Serie2_3_Logger);
              uint num = (uint) this.ReceiveBuffer.Data[2] + ((uint) this.ReceiveBuffer.Data[3] << 8) + ((uint) this.ReceiveBuffer.Data[4] << 16) + ((uint) this.ReceiveBuffer.Data[5] << 24);
              versionData.Version = num;
              versionData.HardwareIdentification = (uint) this.ReceiveBuffer.Data[6];
              versionData.HardwareIdentification += (uint) this.ReceiveBuffer.Data[7] << 8;
              versionData.HardwareIdentification += (uint) this.ReceiveBuffer.Data[8] << 16;
              versionData.HardwareIdentification += (uint) this.ReceiveBuffer.Data[9] << 24;
              versionData.BuildRevision = (uint) this.ReceiveBuffer.Data[10];
              versionData.BuildRevision += (uint) this.ReceiveBuffer.Data[11] << 8;
              versionData.BuildRevision += (uint) this.ReceiveBuffer.Data[12] << 16;
              versionData.BuildRevision += (uint) this.ReceiveBuffer.Data[13] << 24;
              DateTime? mbusDateTime = MBusDifVif.GetMBusDateTime(this.ReceiveBuffer.Data, 14);
              if (mbusDateTime.HasValue)
                versionData.BuildTime = mbusDateTime.Value;
              versionData.FirmwareSignature = (ushort) this.ReceiveBuffer.Data[18];
              versionData.FirmwareSignature += (ushort) ((uint) this.ReceiveBuffer.Data[19] << 8);
            }
            ZR_ClassLibMessages.ClearErrorText();
            return true;
          }
        }
      }
      return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Read version error.", Serie2MBus.Serie2_3_Logger);
    }

    internal override bool ResetDevice(bool loadBackup)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.ResetDevice);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.MyCom.SetAnswerOffsetTime(500);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      if (loadBackup)
      {
        this.TransmitBuffer.Add(1);
        this.TransmitBuffer.Add(4);
        this.TransmitBuffer.Add(0);
      }
      else
      {
        this.TransmitBuffer.Add(0);
        this.TransmitBuffer.Add(4);
      }
      this.FinishLongFrame();
      bool flag = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Info("Send ResetDevice");
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusDeviceReset);
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
          return false;
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        this.MyBus.MyCom.ClearWakeup();
        if (!this.ReceiveOkNok())
        {
          if (Serie2MBus.Serie2_3_Logger.IsWarnEnabled && this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            Serie2MBus.Serie2_3_Logger.Warn("--> ResetDevice error. Repeat command!");
        }
        else
        {
          flag = true;
          break;
        }
      }
      if (flag)
      {
        this.IsSelectedOnBus = false;
        Serie2MBus.Serie2_3_Logger.Debug("--> ResetDevice done");
      }
      else
        Serie2MBus.Serie2_3_Logger.Error("--> ResetDevice error");
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      return flag;
    }

    internal override byte[] RunIoTest(IoTestFunctions theFunction)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return (byte[]) null;
      if (theFunction == IoTestFunctions.IoTest_Run)
        this.MyBus.MyCom.SetAnswerOffsetTime(500);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add((byte) theFunction);
      this.TransmitBuffer.Add(21);
      this.FinishLongFrame();
      bool flag = false;
      byte[] numArray = new byte[1];
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Info("Send IoTest" + theFunction.ToString());
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
        {
          flag = false;
          break;
        }
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (theFunction == IoTestFunctions.IoTest_Run)
        {
          if (!this.ReceiveHeader())
          {
            Serie2MBus.Serie2_3_Logger.Debug("--> !!! Receive header error !!!");
            continue;
          }
          if (!this.ReceiveLongframeEnd())
          {
            Serie2MBus.Serie2_3_Logger.Debug("--> !!! Receive longframe end error !!!");
            continue;
          }
          if (this.ReceiveBuffer.Count != 7)
          {
            Serie2MBus.Serie2_3_Logger.Debug("--> !!! Wrong block size received !!!");
            continue;
          }
          numArray = new byte[4];
          for (int index = 0; index < 4; ++index)
            numArray[index] = this.ReceiveBuffer.Data[index + 1];
        }
        else if (!this.ReceiveOkNok())
        {
          if (Serie2MBus.Serie2_3_Logger.IsWarnEnabled && this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
          {
            Serie2MBus.Serie2_3_Logger.Warn("--> Send IoTest: ACK not received. Repeat command!");
            continue;
          }
          continue;
        }
        flag = true;
        break;
      }
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      if (flag)
      {
        Serie2MBus.Serie2_3_Logger.Debug("--> Read Ok");
        return numArray;
      }
      Serie2MBus.Serie2_3_Logger.Error("--> Read error");
      return (byte[]) null;
    }

    internal override bool EraseFlash(int StartAddress, int NumberOfBytes)
    {
      int num1 = NumberOfBytes / 128;
      if ((StartAddress & 63) != 0)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal erase flash start address");
        return false;
      }
      if ((NumberOfBytes & 63) != 0 || num1 > (int) byte.MaxValue)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal number of bytes by erase flash");
        return false;
      }
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) (StartAddress & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) (StartAddress >> 8 & (int) byte.MaxValue));
      this.TransmitBuffer.Add((byte) num1);
      this.TransmitBuffer.Add(14);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.ComWriteLoggerEvent(EventLogger.LoggerEvent.BusStartWriteBlock);
        Serie2MBus.Serie2_3_Logger.Debug("Erase flash");
        if (Serie2MBus.Serie2_3_Logger.IsInfoEnabled)
        {
          int num2 = StartAddress + num1 * 128 - 1;
          Serie2MBus.Serie2_3_Logger.Debug("Send EraseFlash. Adr.from-to: 0x" + StartAddress.ToString("x04") + " - 0x" + num2.ToString("x04"));
        }
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
          return false;
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveOkNok())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            Serie2MBus.Serie2_3_Logger.Warn("--> Erase flash error. Repeat command!");
        }
        else
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> Erase flash done");
          return true;
        }
      }
      Serie2MBus.Serie2_3_Logger.Error("--> Erase flash error");
      return false;
    }

    internal override bool ReadMemory()
    {
      this.Location = 1;
      return base.ReadMemory();
    }

    internal override bool WriteMemory() => this.CheckMemoryLocation() && base.WriteMemory();

    private bool CheckMemoryLocation()
    {
      if (this.Location == 1 || this.Location == 3)
        return true;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal memory location");
      return false;
    }

    internal override bool SelectParameterList(int ListNumber, int function)
    {
      return this.SelectParameterListWork(ListNumber, function);
    }

    internal override ParameterListInfo ReadParameterList()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return (ParameterListInfo) null;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(37);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Debug("Read ParameterList Information");
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
          return (ParameterListInfo) null;
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
          Serie2MBus.Serie2_3_Logger.Debug("--> !!! Receive header error !!!");
        else if (!this.ReceiveLongframeEnd())
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> !!! Receive longframe end error !!!");
        }
        else
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> Read Ok");
          return ParameterListInfo.Parse(this.TotalReceiveBuffer.ToArray());
        }
      }
      return (ParameterListInfo) null;
    }

    internal ImpulseInputCounters ReadInputCounters()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return (ImpulseInputCounters) null;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(41);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Debug(nameof (ReadInputCounters));
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
          return (ImpulseInputCounters) null;
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
          Serie2MBus.Serie2_3_Logger.Debug("--> !!! Receive header error !!!");
        else if (!this.ReceiveLongframeEnd())
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> !!! Receive longframe end error !!!");
        }
        else
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> Read Ok");
          if (this.ReceiveBuffer.Count != 14)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal number of bytes by ReadInputCounters");
            return (ImpulseInputCounters) null;
          }
          return new ImpulseInputCounters()
          {
            ImputState = ((WR4_VOL_INPUT_STATE) this.ReceiveBuffer.Data[1]).ToString(),
            HardwareCounter = BitConverter.ToUInt16(this.ReceiveBuffer.Data, 2),
            VolumePulseCounter = BitConverter.ToInt16(this.ReceiveBuffer.Data, 4),
            Input0Counter = BitConverter.ToUInt16(this.ReceiveBuffer.Data, 6),
            Input1Counter = BitConverter.ToUInt16(this.ReceiveBuffer.Data, 8),
            Input2Counter = BitConverter.ToUInt16(this.ReceiveBuffer.Data, 10)
          };
        }
      }
      return (ImpulseInputCounters) null;
    }

    internal override bool SetOptoTimeoutSeconds(int Seconds)
    {
      uint OptionByte = (uint) (Seconds / 16 + 3);
      if (OptionByte < 4U)
        OptionByte = 0U;
      if (OptionByte > (uint) byte.MaxValue)
        OptionByte = (uint) byte.MaxValue;
      bool flag = this.S3Command((byte) 13, (byte) OptionByte, "Send opto timeout seconds");
      if (flag && OptionByte > 4U)
        this.MyBus.MyCom.WakeupTemporaryOff = true;
      else
        this.MyBus.MyCom.ClearWakeup();
      return flag;
    }

    internal override bool FlyingTestActivate()
    {
      return this.S3Command((byte) 17, "Send Flying test activate");
    }

    internal override bool FlyingTestStart()
    {
      return this.S3CommandNoAnswer((byte) 18, "Send Flying test start");
    }

    internal override bool FlyingTestStop()
    {
      return this.S3CommandNoAnswer((byte) 19, "Send Flying test stop");
    }

    internal override bool FlyingTestReadVolume(out float volume, out MBusDeviceState state)
    {
      volume = 0.0f;
      state = MBusDeviceState.AnyError;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(20);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Debug("Send Flying test read volume");
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
          return false;
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
          Serie2MBus.Serie2_3_Logger.Debug("--> !!! Receive header error !!!");
        else if (!this.ReceiveLongframeEnd())
          Serie2MBus.Serie2_3_Logger.Debug("--> !!! Receive longframe end error !!!");
        else if (this.ReceiveBuffer.Count != 6)
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> !!! Wron block size received !!!");
        }
        else
        {
          state = (MBusDeviceState) this.Info.Status;
          volume = BitConverter.ToSingle(this.ReceiveBuffer.Data, 0);
          Serie2MBus.Serie2_3_Logger.Debug("--> Read Ok");
          return true;
        }
      }
      return false;
    }

    internal override bool AdcTestActivate() => this.S3Command((byte) 16, "Send ADC test activate");

    internal override bool CapacityOfTestActivate()
    {
      return this.S3Command((byte) 38, "Send capacity off test activate");
    }

    internal override bool RadioTest(RadioTestMode testMode)
    {
      return this.S3Command((byte) testMode, "Set radio test mode: " + testMode.ToString());
    }

    internal override bool Start512HzRtcCalibration()
    {
      return this.S3Command((byte) 36, "STart RTC 512Hz calibration mode");
    }

    internal override bool AdcTestCycleWithSimulatedVolume(float simulationVolume)
    {
      byte[] bytes = BitConverter.GetBytes(simulationVolume);
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(4);
      this.TransmitBuffer.Add(11);
      for (int index = 0; index < bytes.Length; ++index)
        this.TransmitBuffer.Add(bytes[index]);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Debug("Send simmulated volume + ADC cycle");
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
          return false;
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveOkNok())
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> !!! ACK not received !!!");
        }
        else
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> ACK received");
          return true;
        }
      }
      return false;
    }

    internal override bool TestDone(long dispValueId)
    {
      switch (dispValueId)
      {
        case -1:
          return this.S3Command((byte) 15, (byte) 3, "Send test done. LCD: Sleep");
        case 272769346:
          return this.S3Command((byte) 15, (byte) 0, "Send test done. LCD: HeadEnergy");
        case 272769355:
          return this.S3Command((byte) 15, (byte) 1, "Send test done. LCD: CoolingEnergy");
        default:
          return this.S3Command((byte) 15, (byte) 2, "Send test done. LCD: SegmentTest");
      }
    }

    internal bool S3Command(byte CommandByte, string NlogString)
    {
      return this.S3Command(CommandByte, (byte) 0, NlogString);
    }

    internal bool S3Command(byte CommandByte, byte OptionByte, string NlogString)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(OptionByte);
      this.TransmitBuffer.Add(CommandByte);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Debug(NlogString);
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
          return false;
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveOkNok())
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> !!! ACK not received !!!");
        }
        else
        {
          Serie2MBus.Serie2_3_Logger.Debug("--> ACK received");
          return true;
        }
      }
      return false;
    }

    internal bool S3CommandNoAnswer(byte CommandByte, string NlogString)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(CommandByte);
      this.FinishLongFrame();
      Serie2MBus.Serie2_3_Logger.Debug(NlogString);
      if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
        return false;
      this.MyBus.MyCom.ResetEarliestTransmitTime();
      return true;
    }

    internal override bool GetMeterMonitorData(out ByteField Buffer)
    {
      Buffer = new ByteField(504);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(5);
      this.FinishLongFrame();
      this.MyBus.MyCom.SetAnswerOffsetTime(2000);
      bool meterMonitorData = false;
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        Serie2MBus.Serie2_3_Logger.Debug("Send read volume monitor data");
        if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
          return false;
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.MyBus.MyCom.ReceiveBlock(ref Buffer, 504, true))
        {
          ZR_ClassLibMessages.LastErrors lastError = ZR_ClassLibMessages.GetLastError();
          Serie2MBus.Serie2_3_Logger.Error("Failed receive volume monitor data: " + lastError.ToString());
          if (MBusDevice.MBusDeviceLogger.IsTraceEnabled)
          {
            MBusDevice.MBusDeviceLogger.Trace("Received data: {0}", Util.ByteArrayToHexString(Buffer.Data, 0, Buffer.Count));
            MBusDevice.MBusDeviceLogger.Trace("Received size: {0}", Buffer.Count);
            MBusDevice.MBusDeviceLogger.Trace("Required size: {0}", 504);
          }
          this.MyBus.MyCom.ClearWakeup();
          ++this.MyBus.BusState.TotalErrorCounter;
        }
        else
        {
          meterMonitorData = true;
          break;
        }
      }
      this.MyBus.MyCom.SetAnswerOffsetTime(0);
      if (meterMonitorData)
      {
        Serie2MBus.Serie2_3_Logger.Debug("--> Read Ok");
        this.MyBus.MyCom.ResetEarliestTransmitTime();
      }
      else
        Serie2MBus.Serie2_3_Logger.Error("--> Read volume monitor data error");
      return meterMonitorData;
    }

    internal override bool DeviceProtectionGet()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) 0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(7);
      this.FinishLongFrame();
      Serie2MBus.Serie2_3_Logger.Debug("Get device protection");
      if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
        return false;
      if (!this.ReceiveOkNok())
      {
        this.MyBus.MyCom.ClearWakeup();
        return false;
      }
      Serie2MBus.Serie2_3_Logger.Debug("--> ACK received");
      return true;
    }

    internal override bool DeviceProtectionSet()
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) 1);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(7);
      this.FinishLongFrame();
      Serie2MBus.Serie2_3_Logger.Debug("Set device protection");
      if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
        return false;
      if (!this.ReceiveOkNok())
      {
        this.MyBus.MyCom.ClearWakeup();
        return false;
      }
      Serie2MBus.Serie2_3_Logger.Debug("--> ACK received");
      return true;
    }

    internal override bool DeviceProtectionReset(uint meterKey)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) 2);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(4);
      this.TransmitBuffer.Add(7);
      for (int index = 0; index < 4; ++index)
      {
        this.TransmitBuffer.Add((byte) meterKey);
        meterKey >>= 8;
      }
      this.FinishLongFrame();
      Serie2MBus.Serie2_3_Logger.Debug("Reset device protection");
      if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
        return false;
      if (!this.ReceiveOkNok())
      {
        this.MyBus.MyCom.ClearWakeup();
        return false;
      }
      Serie2MBus.Serie2_3_Logger.Debug("--> ACK received");
      return true;
    }

    internal override bool DeviceProtectionSetKey(uint meterKey)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Serie3Command);
      if (!this.MyBus.MyCom.Open())
        return false;
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add((byte) 3);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(4);
      this.TransmitBuffer.Add(7);
      for (int index = 0; index < 4; ++index)
      {
        this.TransmitBuffer.Add((byte) meterKey);
        meterKey >>= 8;
      }
      this.FinishLongFrame();
      Serie2MBus.Serie2_3_Logger.Debug("Set protection key");
      if (!this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer))
        return false;
      if (!this.ReceiveOkNok())
      {
        this.MyBus.MyCom.ClearWakeup();
        return false;
      }
      Serie2MBus.Serie2_3_Logger.Debug("--> ACK received");
      return true;
    }

    private enum DeviceProtectionCommands
    {
      IsProtected,
      SetProtection,
      ResetProtection,
      SetKey,
    }
  }
}


--- SetupProfiles.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.SetupProfiles
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using CorporateDesign;
using GmmDbLib;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace DeviceCollector
{
  public class SetupProfiles : Form
  {
    private DbBasis MyTypedDB;
    private IDbConnection MyDbConnection;
    private List<string> SetupProfilesList;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign2;
    private Button buttonOk;
    private Button buttonCancel;
    private ListBox listBoxProfiles;
    private PictureBox pictureBox1;
    private Button buttonShowParameter;

    public SetupProfiles(DeviceCollectorFunctions TheBus)
    {
      this.InitializeComponent();
      this.MyTypedDB = DbBasis.PrimaryDB;
      this.MyDbConnection = this.MyTypedDB.GetDbConnection();
      this.SetupProfilesList = new List<string>();
      this.SetupProfilesList.Add("Bluetooth / MinoConnect / IrCombiHead / Single MBus device");
      this.SetupProfilesList.Add("Bluetooth / MinoConnect / IrCombiHead / Single Serie1-MBus device");
      this.SetupProfilesList.Add("Bluetooth / MinoConnect / IrCombiHead / Single Serie2-MBus device");
      this.SetupProfilesList.Add("Bluetooth / MinoConnect / IrCombiHead / Minol device");
      this.SetupProfilesList.Add("COM interface / Optical head / Single MBus device");
      this.SetupProfilesList.Add("COM interface / Optical head / Single Serie1-MBus device");
      this.SetupProfilesList.Add("COM interface / Optical head / Single Serie2-MBus device");
      this.SetupProfilesList.Add("COM interface / MBus converter / Single MBus device");
      this.SetupProfilesList.Add("COM interface / MBus converter / Single Serie1-MBus device");
      this.SetupProfilesList.Add("COM interface / MBus converter / Single Serie2-MBus device");
      this.SetupProfilesList.Add("COM interface / MBus converter / MBus / MBus device");
      this.SetupProfilesList.Add("COM interface / MBus converter / MBus / Serie2-MBus device");
      this.SetupProfilesList.Add("MeterVPN / ComServer / MBus converter / Single MBus device");
      this.SetupProfilesList.Add("MeterVPN / ComServer / MBus converter / Single Serie2-MBus device");
      this.SetupProfilesList.Add("MeterVPN / ComServer / MBus converter / MBus / MBus device");
      this.SetupProfilesList.Add("MeterVPN / ComServer / MBus converter / MBus / Serie2-MBus device");
      this.listBoxProfiles.DataSource = (object) this.SetupProfilesList;
    }

    private void buttonOk_Click(object sender, EventArgs e)
    {
      if (this.listBoxProfiles.SelectedIndex < 0)
        return;
      int num = (int) MessageBox.Show(this.listBoxProfiles.SelectedValue.ToString());
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (SetupProfiles));
      this.zennerCoroprateDesign2 = new ZennerCoroprateDesign();
      this.buttonOk = new Button();
      this.buttonCancel = new Button();
      this.listBoxProfiles = new ListBox();
      this.pictureBox1 = new PictureBox();
      this.buttonShowParameter = new Button();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      this.SuspendLayout();
      this.zennerCoroprateDesign2.Dock = DockStyle.Fill;
      this.zennerCoroprateDesign2.Location = new Point(0, 0);
      this.zennerCoroprateDesign2.Name = "zennerCoroprateDesign2";
      this.zennerCoroprateDesign2.Size = new Size(663, 458);
      this.zennerCoroprateDesign2.TabIndex = 15;
      this.buttonOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonOk.DialogResult = DialogResult.OK;
      this.buttonOk.Location = new Point(559, 423);
      this.buttonOk.Name = "buttonOk";
      this.buttonOk.Size = new Size(92, 23);
      this.buttonOk.TabIndex = 1;
      this.buttonOk.Text = "Ok";
      this.buttonOk.UseVisualStyleBackColor = true;
      this.buttonOk.Click += new EventHandler(this.buttonOk_Click);
      this.buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonCancel.DialogResult = DialogResult.Cancel;
      this.buttonCancel.Location = new Point(456, 423);
      this.buttonCancel.Name = "buttonCancel";
      this.buttonCancel.Size = new Size(97, 23);
      this.buttonCancel.TabIndex = 2;
      this.buttonCancel.Text = "Cancel";
      this.buttonCancel.UseVisualStyleBackColor = true;
      this.listBoxProfiles.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.listBoxProfiles.FormattingEnabled = true;
      this.listBoxProfiles.Location = new Point(12, 248);
      this.listBoxProfiles.Name = "listBoxProfiles";
      this.listBoxProfiles.ScrollAlwaysVisible = true;
      this.listBoxProfiles.Size = new Size(638, 160);
      this.listBoxProfiles.TabIndex = 0;
      this.pictureBox1.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.pictureBox1.Location = new Point(12, 60);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(637, 179);
      this.pictureBox1.TabIndex = 18;
      this.pictureBox1.TabStop = false;
      this.buttonShowParameter.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.buttonShowParameter.Location = new Point(12, 423);
      this.buttonShowParameter.Name = "buttonShowParameter";
      this.buttonShowParameter.Size = new Size(128, 23);
      this.buttonShowParameter.TabIndex = 3;
      this.buttonShowParameter.Text = "Show parameter";
      this.buttonShowParameter.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(663, 458);
      this.Controls.Add((Control) this.pictureBox1);
      this.Controls.Add((Control) this.listBoxProfiles);
      this.Controls.Add((Control) this.buttonShowParameter);
      this.Controls.Add((Control) this.buttonCancel);
      this.Controls.Add((Control) this.buttonOk);
      this.Controls.Add((Control) this.zennerCoroprateDesign2);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MinimumSize = new Size(500, 400);
      this.Name = nameof (SetupProfiles);
      this.Text = "Setup profiles";
      ((ISupportInitialize) this.pictureBox1).EndInit();
      this.ResumeLayout(false);
    }
  }
}


--- SmokeDetector.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.SmokeDetector
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using NLog;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class SmokeDetector : MBusDevice
  {
    private static Logger logger = LogManager.GetLogger(nameof (SmokeDetector));
    private byte lastAccessNumber = 0;
    private uint lastSerialAsBCD = 0;

    public SmokeDetector(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      this.DeviceType = DeviceTypes.SmokeDetector;
    }

    public int ReadTimeout_RecTime_OffsetPerBlock
    {
      get
      {
        if (this.MyBus.AsyncCom == null)
          return 800;
        SortedList<AsyncComSettings, object> asyncComSettings = this.MyBus.AsyncCom.GetAsyncComSettings();
        return !asyncComSettings.ContainsKey(AsyncComSettings.RecTime_OffsetPerBlock) || string.IsNullOrEmpty(asyncComSettings[AsyncComSettings.RecTime_OffsetPerBlock].ToString()) ? 800 : Convert.ToInt32(asyncComSettings[AsyncComSettings.RecTime_OffsetPerBlock]);
      }
      set
      {
        if (this.MyBus.AsyncCom == null)
          return;
        this.MyBus.AsyncCom.SingleParameter(CommParameter.RecTime_OffsetPerBlock, value.ToString());
      }
    }

    public bool ReadVersion(
      out uint serialnumber,
      out string manufacturer,
      out byte generation,
      out byte medium,
      out byte status,
      out byte[] buffer)
    {
      SmokeDetector.logger.Info("Read version");
      serialnumber = 0U;
      manufacturer = (string) null;
      generation = (byte) 0;
      medium = (byte) 0;
      status = (byte) 0;
      buffer = (byte[]) null;
      if (!this.SND_UD((ushort) 0, (byte) 10, (byte) 6) || this.ReceiveBuffer.Count != 13)
        return false;
      byte[] dst = new byte[10];
      Buffer.BlockCopy((Array) this.ReceiveBuffer.Data, 1, (Array) dst, 0, dst.Length);
      serialnumber = Convert.ToUInt32(this.Info.MeterNumber);
      manufacturer = this.Info.Manufacturer;
      generation = this.Info.Version;
      medium = this.Info.Medium;
      status = this.Info.Status;
      buffer = dst;
      return true;
    }

    public byte[] ReadParameter(ushort address)
    {
      SmokeDetector.logger.Info("Read parameter at address: 0x" + address.ToString("X4"));
      if (!this.SND_UD(address, (byte) 29, (byte) 48) || this.ReceiveBuffer.Count <= 0)
        return (byte[]) null;
      byte[] dst = new byte[this.ReceiveBuffer.Count - 3];
      Buffer.BlockCopy((Array) this.ReceiveBuffer.Data, 1, (Array) dst, 0, dst.Length);
      return dst;
    }

    public byte[] ReadEventMemory(ushort address)
    {
      SmokeDetector.logger.Info("Read event memory at address: 0x" + address.ToString("X4"));
      if (!this.SND_UD(address, (byte) 166, (byte) 48) || this.ReceiveBuffer.Count <= 0)
        return (byte[]) null;
      byte[] dst = new byte[this.ReceiveBuffer.Count - 3];
      Buffer.BlockCopy((Array) this.ReceiveBuffer.Data, 1, (Array) dst, 0, dst.Length);
      return dst;
    }

    private bool SND_UD(ushort address, byte count, byte cmd)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      byte[] bytes = BitConverter.GetBytes(address);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(bytes[0]);
      this.TransmitBuffer.Add(bytes[1]);
      this.TransmitBuffer.Add(count);
      this.TransmitBuffer.Add(cmd);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (!this.ReceiveHeader())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            SmokeDetector.logger.Warn(" ... repeat run");
          this.MyBus.AsyncCom.ClearWakeup();
        }
        else if (!this.ReceiveLongframeEnd())
        {
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            SmokeDetector.logger.Warn(" ... repeat run");
        }
        else
        {
          this.lastAccessNumber = this.Info.AccessNb;
          this.lastSerialAsBCD = this.Info.MeterNumberOriginal;
          return true;
        }
      }
      return false;
    }

    public byte[] Read(int numberOfBytesToReceive)
    {
      byte[] buffer;
      return this.MyBus.MyCom.TryReceiveBlock(out buffer, numberOfBytesToReceive) ? buffer : (byte[]) null;
    }

    private byte[] Send(ushort address, byte cmd, byte[] buffer = null)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return (byte[]) null;
      byte[] bytes = BitConverter.GetBytes(address);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(bytes[0]);
      this.TransmitBuffer.Add(bytes[1]);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(cmd);
      if (buffer != null && buffer.Length != 0)
        this.TransmitBuffer.Add(buffer);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        ByteField DataBlock1 = new ByteField(4);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock1, 4, true))
        {
          this.MyBus.MyCom.ClearWakeup();
          ++this.MyBus.BusState.TotalErrorCounter;
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            SmokeDetector.logger.Warn("Repeat to read M-Bus header! Reason: No response.");
        }
        else if (DataBlock1.Data[0] != (byte) 104 || DataBlock1.Data[3] != (byte) 104 || (int) DataBlock1.Data[1] != (int) DataBlock1.Data[2] || DataBlock1.Data[1] < (byte) 3)
        {
          ++this.MyBus.BusState.TotalErrorCounter;
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            SmokeDetector.logger.Warn("Repeat to read M-Bus header! Reason: Invalid M-Bus header.");
        }
        else
        {
          byte index1 = DataBlock1.Data[1];
          ByteField DataBlock2 = new ByteField((int) index1 + 2);
          if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock2, (int) index1 + 2, false))
          {
            ++this.MyBus.BusState.TotalErrorCounter;
            if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
              SmokeDetector.logger.Warn("Repeat to read M-Bus data!");
          }
          else
          {
            byte num1 = DataBlock2.Data[(int) index1];
            byte num2 = 0;
            for (int index2 = 0; index2 < (int) index1; ++index2)
              num2 += DataBlock2.Data[index2];
            if ((int) num1 != (int) num2)
            {
              ++this.MyBus.BusState.TotalErrorCounter;
              if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
                SmokeDetector.logger.Warn("Repeat to read M-Bus header! Reason: Invalid M-Bus checksum.");
            }
            else
            {
              byte[] dst = new byte[(int) index1 - 3];
              Buffer.BlockCopy((Array) DataBlock2.Data, 3, (Array) dst, 0, dst.Length);
              ZR_ClassLibMessages.ClearErrors();
              return dst;
            }
          }
        }
      }
      return (byte[]) null;
    }

    private ushort CalculatePSW()
    {
      return (ushort) ((int) (ushort) (this.lastSerialAsBCD >> 16) ^ (int) (ushort) this.lastSerialAsBCD ^ ((int) this.lastAccessNumber << 8) + (int) this.lastAccessNumber ^ new int[8]
      {
        18463,
        21893,
        3673,
        27814,
        18154,
        29022,
        9735,
        15054
      }[(int) this.lastAccessNumber & 7]);
    }

    public bool WriteDevice(int address, byte[] buffer)
    {
      BusDevice.CheckReadOnlyRight();
      if (buffer == null)
        throw new ArgumentNullException("The 'buffer' can not be null!");
      if (buffer.Length == 0)
        throw new ArgumentNullException("The length of the 'buffer' can not be 0!");
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.WriteMemoryBlock);
      if (!this.MyBus.MyCom.Open() || !this.ReadVersion(out uint _, out string _, out byte _, out byte _, out byte _, out byte[] _))
        return false;
      byte[] bytes1 = BitConverter.GetBytes(address);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(bytes1[0]);
      this.TransmitBuffer.Add(bytes1[1]);
      this.TransmitBuffer.Add(buffer.Length);
      this.TransmitBuffer.Add(49);
      byte[] bytes2 = BitConverter.GetBytes(this.CalculatePSW());
      this.TransmitBuffer.Add(bytes2[0]);
      this.TransmitBuffer.Add(bytes2[1]);
      foreach (byte Byte in buffer)
        this.TransmitBuffer.Add(Byte);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        ByteField DataBlock = new ByteField(1);
        if (this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 1, true))
          return DataBlock != null && DataBlock.Count == 1 && DataBlock.Data[0] == (byte) 229;
        SmokeDetector.logger.Warn(" ... repeat run");
        this.MyBus.MyCom.ClearWakeup();
      }
      return false;
    }

    private bool ExecuteSimpleCommandAndCheck_E5(ushort address, byte cmd)
    {
      return this.ExecuteSimpleCommandAndCheck_E5(address, cmd, (byte[]) null);
    }

    private bool ExecuteSimpleCommandAndCheck_E5(ushort address, byte cmd, byte[] buffer)
    {
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      byte[] bytes = BitConverter.GetBytes(address);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(bytes[0]);
      this.TransmitBuffer.Add(bytes[1]);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(cmd);
      if (buffer != null && buffer.Length != 0)
        this.TransmitBuffer.Add(buffer);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        if (this.ReceiveOkNok())
          return true;
        if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
          SmokeDetector.logger.Warn("Repeat command!");
        this.MyBus.AsyncCom.ClearWakeup();
      }
      return false;
    }

    public bool TC_EnterTestMode()
    {
      BusDevice.CheckReadOnlyRight();
      SmokeDetector.logger.Info("(Test command) EnterTestMode");
      return this.ExecuteSimpleCommandAndCheck_E5((ushort) 192, (byte) 48);
    }

    public bool TC_ExitTestMode()
    {
      SmokeDetector.logger.Info("(Test command) ExitTestMode");
      return this.ExecuteSimpleCommandAndCheck_E5((ushort) 203, (byte) 48);
    }

    public bool TC_TransmitterLedInSmokeChamberVoltageReferenceTL431()
    {
      SmokeDetector.logger.Info("(Test command) TC_TransmitterLedInSmokeChamberVoltageReferenceTL431");
      return this.ExecuteSimpleCommandAndCheck_E5((ushort) 194, (byte) 48);
    }

    public bool TC_PiezoTestHighSoundPressure(byte duration = 0)
    {
      SmokeDetector.logger.Info("(Test command) TC_PiezoTestHighSoundPressure, Duration: " + duration.ToString());
      return duration != (byte) 1 ? this.ExecuteSimpleCommandAndCheck_E5(BitConverter.ToUInt16(new byte[2]
      {
        (byte) 195,
        duration
      }, 0), (byte) 48) : throw new Exception("Duration is not allowed. Please use TC_PiezoAdjustValueHighSound");
    }

    public byte TC_PiezoAdjustValueHighSound()
    {
      SmokeDetector.logger.Info("(Test command) TC_PiezoAdjustValueHighSound");
      return this.Send((ushort) 451, (byte) 48)[0];
    }

    public bool TC_PiezoTestLowSoundPressure()
    {
      SmokeDetector.logger.Info("(Test command) TC_PiezoTestLowSoundPressure");
      return this.ExecuteSimpleCommandAndCheck_E5((ushort) 196, (byte) 48);
    }

    public bool TC_SetDeliveryState()
    {
      SmokeDetector.logger.Info("(Test command) TC_SetDeliveryState");
      bool flag = this.ExecuteSimpleCommandAndCheck_E5(ushort.MaxValue, (byte) 50);
      if (flag)
      {
        Thread.Sleep(3000);
        this.MyBus.MyCom.ClearCom();
      }
      return flag;
    }

    public bool TC_ButtonFunction()
    {
      SmokeDetector.logger.Info("(Test command) TC_ButtonFunction");
      return this.ExecuteSimpleCommandAndCheck_E5((ushort) byte.MaxValue, (byte) 51);
    }

    public bool TC_ResetDevice()
    {
      SmokeDetector.logger.Info("(Test command) TC_ResetDevice");
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return false;
      byte[] bytes = BitConverter.GetBytes((int) byte.MaxValue);
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(bytes[0]);
      this.TransmitBuffer.Add(bytes[1]);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(4);
      this.FinishLongFrame();
      bool flag = this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
      if (flag)
      {
        Thread.Sleep(3000);
        this.MyBus.MyCom.ClearCom();
      }
      return flag;
    }

    public SmokeDetector.HardwareState TC_Check_LED_Battery_Voltage_TemperatureSensor_Piezo()
    {
      SmokeDetector.logger.Info("(Test command) TC_Check_LED_Battery_Voltage_TemperatureSensor_Piezo");
      byte[] buffer = this.Send((ushort) 449, (byte) 48);
      return buffer == null ? (SmokeDetector.HardwareState) null : SmokeDetector.HardwareState.Parse(buffer);
    }

    public bool TC_ButtonTest()
    {
      SmokeDetector.logger.Info("(Test command) TC_ButtonTest");
      byte[] buffer = this.Send((ushort) 197, (byte) 48);
      if (buffer == null)
        return false;
      if (buffer == null)
        throw new ArgumentNullException("Can not parse! The buffer is null.");
      if (buffer.Length != 1)
        throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Expected 1 byte. Buffer: " + Util.ByteArrayToHexString(buffer));
      if (buffer[0] != (byte) 0 && buffer[0] != (byte) 1)
        throw new ArgumentException("Can not parse! Invalid value of 'Button test' result. Buffer: " + Util.ByteArrayToHexString(buffer));
      return !Convert.ToBoolean(buffer[0]);
    }

    public SmokeDetector.EepromState? TC_EepromState()
    {
      SmokeDetector.logger.Info("(Test command) TC_EepromState");
      byte[] buffer = this.Send((ushort) 198, (byte) 48);
      if (buffer == null)
        return new SmokeDetector.EepromState?();
      if (buffer == null)
        throw new ArgumentNullException("Can not parse! The buffer is null.");
      if (buffer.Length != 1)
        throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Expected 1 byte. Buffer: " + Util.ByteArrayToHexString(buffer));
      return buffer[0] <= (byte) 7 ? new SmokeDetector.EepromState?((SmokeDetector.EepromState) buffer[0]) : throw new ArgumentException("Can not parse! Invalid value of 'EEPROM test' result. Buffer: " + Util.ByteArrayToHexString(buffer));
    }

    public SmokeDetector.TestData TC_TestData()
    {
      SmokeDetector.logger.Info("(Test command) TC_TestData");
      byte[] buffer = this.Send((ushort) 200, (byte) 48);
      return buffer == null ? (SmokeDetector.TestData) null : SmokeDetector.TestData.Parse(buffer);
    }

    public SmokeDetector.ObstructionState TC_ObstructionCheck()
    {
      SmokeDetector.logger.Info("(Test command) TC_ObstructionCheck");
      byte[] buffer = this.Send((ushort) 204, (byte) 48);
      return buffer == null ? (SmokeDetector.ObstructionState) null : SmokeDetector.ObstructionState.Parse(buffer);
    }

    public bool TC_ObstructionCalibrationWrite(SmokeDetector.ObstructionState state)
    {
      SmokeDetector.logger.Info("TC_ObstructionCalibrationWrite: " + state?.ToString());
      List<byte> byteList = new List<byte>();
      byteList.Add((byte) 0);
      byteList.Add((byte) 0);
      byteList.Add((byte) 0);
      byteList.AddRange(state.ToByteArray());
      return this.ExecuteSimpleCommandAndCheck_E5((ushort) 204, (byte) 49, byteList.ToArray());
    }

    public SmokeDetector.ObstructionState TC_ObstructionCalibrationRead()
    {
      SmokeDetector.logger.Info(nameof (TC_ObstructionCalibrationRead));
      byte[] buffer = this.Send((ushort) 204, (byte) 49, new byte[3]
      {
        (byte) 0,
        (byte) 0,
        (byte) 1
      });
      return buffer == null ? (SmokeDetector.ObstructionState) null : SmokeDetector.ObstructionState.Parse(buffer);
    }

    public bool TC_SurroundingAreaMonitoringCheckTransmitter(SmokeDetector.Check led)
    {
      SmokeDetector.logger.Info("(Test command) TC_SurroundingAreaMonitoringCheckTransmitter(" + led.ToString() + ")");
      return this.ExecuteSimpleCommandAndCheck_E5((ushort) 205, (byte) 49, new byte[3]
      {
        (byte) 0,
        (byte) 0,
        (byte) led
      });
    }

    public bool TC_SurroundingAreaMonitoringCheckReceiver()
    {
      SmokeDetector.logger.Info("(Test command) TC_SurroundingAreaMonitoringCheckReceiver");
      return this.ExecuteSimpleCommandAndCheck_E5((ushort) 461, (byte) 48);
    }

    public byte? TC_SurroundingAreaMonitoringCheckReceiverTestResult()
    {
      SmokeDetector.logger.Info("(Test command) TC_SurroundingAreaMonitoringCheckReceiverTestResult");
      byte[] buffer = this.Send((ushort) 717, (byte) 48);
      if (buffer == null)
        return new byte?();
      if (buffer == null)
        throw new ArgumentNullException("Can not parse! The buffer is null.");
      return buffer.Length == 1 ? new byte?(buffer[0]) : throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Expected 1 byte. Buffer: " + Util.ByteArrayToHexString(buffer));
    }

    public DateTime? TC_ClearTestRecordT1()
    {
      SmokeDetector.logger.Info("(Test command) TC_ClearTestRecordT1");
      byte[] buffer = this.Send((ushort) 202, (byte) 48);
      if (buffer == null)
        return new DateTime?();
      byte second = buffer.Length == 6 ? buffer[0] : throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Expected 6 bytes. Buffer: " + Util.ByteArrayToHexString(buffer));
      byte minute = buffer[1];
      byte hour = buffer[2];
      byte day = buffer[3];
      byte month = buffer[4];
      byte num = buffer[5];
      try
      {
        return new DateTime?(new DateTime(2000 + (int) num, (int) month, (int) day, (int) hour, (int) minute, (int) second));
      }
      catch
      {
        return new DateTime?();
      }
    }

    public DateTime? TC_EraseEEPROM()
    {
      SmokeDetector.logger.Info("(Test command) TC_EraseEEPROM");
      int timeOffsetPerBlock = this.ReadTimeout_RecTime_OffsetPerBlock;
      if (timeOffsetPerBlock < 10000)
        this.ReadTimeout_RecTime_OffsetPerBlock = 10000;
      byte[] buffer = (byte[]) null;
      try
      {
        buffer = this.Send((ushort) 458, (byte) 48);
      }
      finally
      {
        this.ReadTimeout_RecTime_OffsetPerBlock = timeOffsetPerBlock;
      }
      if (buffer == null)
        return new DateTime?();
      byte second = buffer.Length == 6 ? buffer[0] : throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Expected 6 bytes. Buffer: " + Util.ByteArrayToHexString(buffer));
      byte minute = buffer[1];
      byte hour = buffer[2];
      byte day = buffer[3];
      byte month = buffer[4];
      byte num = buffer[5];
      try
      {
        return new DateTime?(new DateTime(2000 + (int) num, (int) month, (int) day, (int) hour, (int) minute, (int) second));
      }
      catch
      {
        return new DateTime?();
      }
    }

    public bool? TC_CauseTestAlarm()
    {
      SmokeDetector.logger.Info("(Test command) TC_CauseTestAlarm");
      return new bool?(this.ExecuteSimpleCommandAndCheck_E5((ushort) 162, (byte) 48));
    }

    public SmokeDetector.SmokeDensityAndSensitivity TC_ReadSmokeDensityAndSensitivity()
    {
      SmokeDetector.logger.Info("(Test command) TC_ReadSmokeDensityAndSensitivity");
      byte[] buffer = this.Send((ushort) 193, (byte) 48);
      return buffer == null ? (SmokeDetector.SmokeDensityAndSensitivity) null : SmokeDetector.SmokeDensityAndSensitivity.Parse(buffer);
    }

    public ushort? TC_WriteSmokeDensityThreshold_C_Value(byte value)
    {
      SmokeDetector.logger.Info("(Test command) TC_WriteSmokeDensityThreshold_C_Value");
      this.MyBus.BusState.StartBusFunctionTask(BusStatusClass.BusFunctionTasks.Dummy);
      if (!this.MyBus.MyCom.Open())
        return new ushort?();
      this.GenerateSendDataHeader();
      this.TransmitBuffer.Add(15);
      this.TransmitBuffer.Add(160);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(49);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(0);
      this.TransmitBuffer.Add(value);
      this.FinishLongFrame();
      while (this.MyBus.BusState.TestRepeatCounter(this.MyBus.MaxRequestRepeat))
      {
        this.MyBus.MyCom.TransmitBlock(ref this.TransmitBuffer);
        this.MyBus.BusState.IncrementTransmitBlockCounter();
        ByteField DataBlock = new ByteField(2);
        if (!this.MyBus.MyCom.ReceiveBlock(ref DataBlock, 2, true))
        {
          this.MyBus.MyCom.ClearWakeup();
          ++this.MyBus.BusState.TotalErrorCounter;
          if (this.MyBus.BusState.RepeadCounter < this.MyBus.MaxRequestRepeat)
            SmokeDetector.logger.Warn("Repeat to read C value! Reason: No response.");
        }
        else
        {
          ZR_ClassLibMessages.ClearErrors();
          this.MyBus.MyCom.ClearWakeup();
          return new ushort?(BitConverter.ToUInt16(new byte[2]
          {
            DataBlock.Data[1],
            DataBlock.Data[0]
          }, 0));
        }
      }
      return new ushort?();
    }

    public bool TC_ReadSmokeDensityAndSensitivity_90_times()
    {
      SmokeDetector.logger.Info("(Test command) TC_ReadSmokeDensityAndSensitivity_90_times()");
      return this.ExecuteSimpleCommandAndCheck_E5((ushort) 161, (byte) 48);
    }

    public byte[] TC_Set_A_B()
    {
      SmokeDetector.logger.Info("(Test command) TC_Set_A_B()");
      return this.Send((ushort) 161, (byte) 49);
    }

    public sealed class HardwareState
    {
      public ushort RedLED { get; set; }

      public ushort YellowLED { get; set; }

      public ushort BatteryVoltage { get; set; }

      public byte TemperatureSensor { get; set; }

      public bool HasPiezoError { get; set; }

      public static SmokeDetector.HardwareState Parse(byte[] buffer)
      {
        if (buffer == null)
          throw new ArgumentNullException("Can not parse! The buffer is null.");
        if (buffer.Length != 8)
          throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Expected 8 bytes. Buffer: " + Util.ByteArrayToHexString(buffer));
        return buffer[7] == (byte) 0 || buffer[7] == (byte) 1 ? new SmokeDetector.HardwareState()
        {
          RedLED = BitConverter.ToUInt16(new byte[2]
          {
            buffer[1],
            buffer[0]
          }, 0),
          YellowLED = BitConverter.ToUInt16(new byte[2]
          {
            buffer[3],
            buffer[2]
          }, 0),
          BatteryVoltage = BitConverter.ToUInt16(new byte[2]
          {
            buffer[5],
            buffer[4]
          }, 0),
          TemperatureSensor = buffer[6],
          HasPiezoError = Convert.ToBoolean(buffer[7])
        } : throw new ArgumentException("Can not parse! Invalid value of piezo state. Buffer: " + Util.ByteArrayToHexString(buffer));
      }

      public override string ToString()
      {
        string newLine = Environment.NewLine;
        return string.Format("RedLED={0},{1}YellowLED={2},{3}BatteryVoltage={4},{5}TemperatureSensor={6},{7}HasPiezoError={8}", (object) this.RedLED, (object) newLine, (object) this.YellowLED, (object) newLine, (object) this.BatteryVoltage, (object) newLine, (object) this.TemperatureSensor, (object) newLine, (object) this.HasPiezoError);
      }
    }

    public enum EepromState : byte
    {
      NoError,
      HeadPartBroken,
      MiddlePartBroken,
      HeadAndMiddlePartBroken,
      EndPartBroken,
      HeadAndEndPartBroken,
      MiddleAndEndPartBroken,
      AllPartsBroken,
    }

    [Flags]
    public enum OPE : byte
    {
      None = 0,
      Radio = 1,
      ObstructionDetection = 2,
      SurroundingAreaMonitoring = 4,
      IrDa = 8,
      Piezo = 16, // 0x10
      RTC = 32, // 0x20
      EEPROM = 64, // 0x40
      Button = 128, // 0x80
    }

    public enum WinsoeCode : byte
    {
      M01041 = 1,
      M01042 = 2,
      M01043 = 3,
      M01048 = 4,
      M01049 = 5,
      M01050 = 6,
    }

    public sealed class SerialNumberInfo
    {
      public SmokeDetector.WinsoeCode WinsoeCode { get; set; }

      public int FactoryYear { get; set; }

      public int FactoryWeek { get; set; }

      public ushort SerialNumber { get; set; }

      internal static SmokeDetector.SerialNumberInfo Parse(uint serialNumber)
      {
        byte[] bytes = BitConverter.GetBytes(serialNumber);
        uint num = BitConverter.ToUInt32(bytes, 0) & 4095U;
        return new SmokeDetector.SerialNumberInfo()
        {
          WinsoeCode = (SmokeDetector.WinsoeCode) Enum.ToObject(typeof (SmokeDetector.WinsoeCode), (int) bytes[0] >> 4),
          FactoryYear = (int) (num / 100U) + 2000,
          FactoryWeek = (int) num - (int) (num / 100U) * 100,
          SerialNumber = BitConverter.ToUInt16(bytes, 2)
        };
      }

      public override string ToString()
      {
        StringBuilder stringBuilder = new StringBuilder();
        int totalWidth = 25;
        stringBuilder.Append("WinsoeCode: ".PadRight(totalWidth)).AppendLine(this.WinsoeCode.ToString());
        stringBuilder.Append("FactoryYear: ".PadRight(totalWidth)).AppendLine(this.FactoryYear.ToString());
        stringBuilder.Append("FactoryWeek: ".PadRight(totalWidth)).AppendLine(this.FactoryWeek.ToString());
        stringBuilder.Append("Serial number: ".PadRight(totalWidth)).AppendLine(this.SerialNumber.ToString());
        return stringBuilder.ToString();
      }
    }

    public sealed class SmokeDensityAndSensitivity
    {
      public ushort A { get; set; }

      public ushort B { get; set; }

      public ushort C { get; set; }

      public ushort? A_EEPROM { get; set; }

      public ushort? B_EEPROM { get; set; }

      public ushort? C_MEASURED { get; set; }

      public static SmokeDetector.SmokeDensityAndSensitivity Parse(byte[] buffer)
      {
        if (buffer == null)
          throw new ArgumentNullException("Can not parse! The buffer is null.");
        SmokeDetector.SmokeDensityAndSensitivity densityAndSensitivity = new SmokeDetector.SmokeDensityAndSensitivity();
        if (buffer.Length == 6)
        {
          densityAndSensitivity.C = BitConverter.ToUInt16(new byte[2]
          {
            buffer[1],
            buffer[0]
          }, 0);
          densityAndSensitivity.A = BitConverter.ToUInt16(new byte[2]
          {
            buffer[3],
            buffer[2]
          }, 0);
          densityAndSensitivity.B = BitConverter.ToUInt16(new byte[2]
          {
            buffer[5],
            buffer[4]
          }, 0);
        }
        else if (buffer.Length == 17)
        {
          densityAndSensitivity.C = BitConverter.ToUInt16(new byte[2]
          {
            buffer[8],
            buffer[7]
          }, 0);
          densityAndSensitivity.A = BitConverter.ToUInt16(new byte[2]
          {
            buffer[10],
            buffer[9]
          }, 0);
          densityAndSensitivity.B = BitConverter.ToUInt16(new byte[2]
          {
            buffer[12],
            buffer[11]
          }, 0);
        }
        else
        {
          densityAndSensitivity.C = buffer.Length == 21 ? BitConverter.ToUInt16(new byte[2]
          {
            buffer[8],
            buffer[7]
          }, 0) : throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Buffer: " + Util.ByteArrayToHexString(buffer));
          densityAndSensitivity.A = BitConverter.ToUInt16(new byte[2]
          {
            buffer[10],
            buffer[9]
          }, 0);
          densityAndSensitivity.B = BitConverter.ToUInt16(new byte[2]
          {
            buffer[12],
            buffer[11]
          }, 0);
          densityAndSensitivity.C_MEASURED = new ushort?(BitConverter.ToUInt16(new byte[2]
          {
            buffer[14],
            buffer[13]
          }, 0));
          densityAndSensitivity.A_EEPROM = new ushort?(BitConverter.ToUInt16(new byte[2]
          {
            buffer[16],
            buffer[15]
          }, 0));
          densityAndSensitivity.B_EEPROM = new ushort?(BitConverter.ToUInt16(new byte[2]
          {
            buffer[18],
            buffer[17]
          }, 0));
        }
        return densityAndSensitivity;
      }

      public override string ToString()
      {
        StringBuilder stringBuilder = new StringBuilder();
        int totalWidth = 10;
        stringBuilder.Append("A: ".PadRight(totalWidth)).AppendLine(this.A.ToString());
        stringBuilder.Append("B: ".PadRight(totalWidth)).AppendLine(this.B.ToString());
        stringBuilder.Append("C: ".PadRight(totalWidth)).AppendLine(this.C.ToString());
        if (this.C_MEASURED.HasValue)
        {
          stringBuilder.Append("A_EEPROM: ".PadRight(totalWidth)).AppendLine(this.A_EEPROM.ToString());
          stringBuilder.Append("B_EEPROM: ".PadRight(totalWidth)).AppendLine(this.B_EEPROM.ToString());
          stringBuilder.Append("C_EEPROM: ".PadRight(totalWidth)).AppendLine(this.C_MEASURED.ToString());
        }
        return stringBuilder.ToString();
      }
    }

    public sealed class Smoke_A_B
    {
      public ushort A { get; set; }

      public ushort B { get; set; }

      public static SmokeDetector.Smoke_A_B Parse(byte[] buffer)
      {
        if (buffer == null)
          throw new ArgumentNullException("Can not parse! The buffer is null.");
        SmokeDetector.Smoke_A_B smokeAB = new SmokeDetector.Smoke_A_B();
        smokeAB.A = buffer.Length == 4 ? BitConverter.ToUInt16(new byte[2]
        {
          buffer[1],
          buffer[0]
        }, 0) : throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Buffer: " + Util.ByteArrayToHexString(buffer));
        smokeAB.B = BitConverter.ToUInt16(new byte[2]
        {
          buffer[3],
          buffer[2]
        }, 0);
        return smokeAB;
      }

      public override string ToString()
      {
        StringBuilder stringBuilder = new StringBuilder();
        int totalWidth = 10;
        stringBuilder.Append("A: ".PadRight(totalWidth)).AppendLine(this.A.ToString());
        stringBuilder.Append("B: ".PadRight(totalWidth)).AppendLine(this.B.ToString());
        return stringBuilder.ToString();
      }
    }

    public sealed class TestData
    {
      public uint SerialNumber { get; set; }

      public SmokeDetector.SerialNumberInfo SerialNumberInfo
      {
        get => SmokeDetector.SerialNumberInfo.Parse(this.SerialNumber);
      }

      public byte A { get; set; }

      public byte B { get; set; }

      public byte C { get; set; }

      public ushort RedLED { get; set; }

      public ushort YellowLED { get; set; }

      public ushort BatteryVoltage { get; set; }

      public byte TemperatureSensor { get; set; }

      public byte CurrentConsumption { get; set; }

      public byte TP_1_VoltageOfTestPoint { get; set; }

      public byte TL431 { get; set; }

      public SmokeDetector.OPE OPE { get; set; }

      public byte TP_2_VoltageOfPiezo { get; set; }

      public byte? Reserved { get; set; }

      public byte? P_IrDA { get; set; }

      public byte? P_LED { get; set; }

      public byte? P_AMP { get; set; }

      public byte? P_POWER { get; set; }

      public byte? P_BATT { get; set; }

      public byte? Basis { get; set; }

      public byte? Radio { get; set; }

      public static SmokeDetector.TestData Parse(byte[] buffer)
      {
        if (buffer == null)
          throw new ArgumentNullException("Can not parse! The buffer is null.");
        if (buffer.Length < 19)
          throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Buffer: " + Util.ByteArrayToHexString(buffer));
        SmokeDetector.TestData testData = new SmokeDetector.TestData();
        testData.SerialNumber = BitConverter.ToUInt32(buffer, 0);
        testData.A = buffer[4];
        testData.B = buffer[5];
        testData.C = buffer[6];
        testData.RedLED = BitConverter.ToUInt16(buffer, 7);
        testData.YellowLED = BitConverter.ToUInt16(buffer, 9);
        testData.BatteryVoltage = BitConverter.ToUInt16(buffer, 11);
        testData.TemperatureSensor = buffer[13];
        testData.CurrentConsumption = buffer[14];
        testData.TP_1_VoltageOfTestPoint = buffer[15];
        testData.TL431 = buffer[16];
        testData.OPE = (SmokeDetector.OPE) buffer[17];
        testData.TP_2_VoltageOfPiezo = buffer[18];
        if (buffer.Length == 20)
        {
          testData.Reserved = new byte?(buffer[19]);
        }
        else
        {
          testData.P_IrDA = buffer.Length == 26 ? new byte?(buffer[19]) : throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Buffer: " + Util.ByteArrayToHexString(buffer));
          testData.P_LED = new byte?(buffer[20]);
          testData.P_AMP = new byte?(buffer[21]);
          testData.P_POWER = new byte?(buffer[22]);
          testData.P_BATT = new byte?(buffer[23]);
          testData.Basis = new byte?(buffer[24]);
          testData.Radio = new byte?(buffer[25]);
        }
        return testData;
      }

      public override string ToString()
      {
        StringBuilder stringBuilder = new StringBuilder();
        int totalWidth = 25;
        stringBuilder.Append("Serial number (raw): ".PadRight(totalWidth)).AppendLine(this.SerialNumber.ToString());
        stringBuilder.Append(this.SerialNumberInfo.ToString());
        stringBuilder.Append("A: ".PadRight(totalWidth)).AppendLine(this.A.ToString());
        stringBuilder.Append("B: ".PadRight(totalWidth)).AppendLine(this.B.ToString());
        stringBuilder.Append("C: ".PadRight(totalWidth)).AppendLine(this.C.ToString());
        stringBuilder.Append("RedLED: ".PadRight(totalWidth)).AppendLine(this.RedLED.ToString());
        stringBuilder.Append("YellowLED: ".PadRight(totalWidth)).AppendLine(this.YellowLED.ToString());
        stringBuilder.Append("BatteryVoltage: ".PadRight(totalWidth)).AppendLine(this.BatteryVoltage.ToString());
        stringBuilder.Append("TemperatureSensor: ".PadRight(totalWidth)).AppendLine(this.TemperatureSensor.ToString());
        stringBuilder.Append("CurrentConsumption: ".PadRight(totalWidth)).AppendLine(this.CurrentConsumption.ToString());
        stringBuilder.Append("TP_1_VoltageOfTestPoint: ".PadRight(totalWidth)).AppendLine(this.TP_1_VoltageOfTestPoint.ToString());
        stringBuilder.Append("TL431: ".PadRight(totalWidth)).AppendLine(this.TL431.ToString());
        stringBuilder.Append("OPE: ".PadRight(totalWidth)).AppendLine(this.OPE.ToString());
        stringBuilder.Append("TP_2_VoltageOfPiezo: ".PadRight(totalWidth)).AppendLine(this.TP_2_VoltageOfPiezo.ToString());
        if (this.Reserved.HasValue)
          stringBuilder.Append("Reserved: ".PadRight(totalWidth)).AppendLine(this.Reserved.ToString());
        if (this.P_IrDA.HasValue)
          stringBuilder.Append("P_IrDA : ".PadRight(totalWidth)).AppendLine(this.P_IrDA.ToString());
        if (this.P_LED.HasValue)
          stringBuilder.Append("P_LED  : ".PadRight(totalWidth)).AppendLine(this.P_LED.ToString());
        if (this.P_AMP.HasValue)
          stringBuilder.Append("P_AMP  : ".PadRight(totalWidth)).AppendLine(this.P_AMP.ToString());
        if (this.P_POWER.HasValue)
          stringBuilder.Append("P_POWER: ".PadRight(totalWidth)).AppendLine(this.P_POWER.ToString());
        if (this.P_BATT.HasValue)
          stringBuilder.Append("P_BATT : ".PadRight(totalWidth)).AppendLine(this.P_BATT.ToString());
        if (this.Basis.HasValue)
          stringBuilder.Append("Basis  : ".PadRight(totalWidth)).AppendLine(this.Basis.ToString());
        if (this.Radio.HasValue)
          stringBuilder.Append("Radio  : ".PadRight(totalWidth)).AppendLine(this.Radio.ToString());
        return stringBuilder.ToString();
      }
    }

    public sealed class ObstructionState
    {
      public ushort Near1 { get; set; }

      public ushort Near2 { get; set; }

      public ushort Near3 { get; set; }

      public ushort Near4 { get; set; }

      public ushort Near5 { get; set; }

      public ushort Near6 { get; set; }

      public static SmokeDetector.ObstructionState Parse(byte[] buffer)
      {
        if (buffer == null)
          throw new ArgumentNullException("Can not parse! The buffer is null.");
        if (buffer.Length != 8)
          throw new ArgumentOutOfRangeException("Can not parse! Unknown size of buffer. Expected 8 bytes. Buffer: " + Util.ByteArrayToHexString(buffer));
        SmokeDetector.ObstructionState obstructionState = new SmokeDetector.ObstructionState();
        obstructionState.Near1 = (ushort) buffer[0];
        obstructionState.Near2 = (ushort) buffer[1];
        obstructionState.Near3 = (ushort) buffer[2];
        obstructionState.Near4 = (ushort) buffer[3];
        obstructionState.Near5 = (ushort) buffer[4];
        obstructionState.Near6 = (ushort) buffer[5];
        byte num1 = buffer[6];
        byte num2 = buffer[7];
        obstructionState.Near1 |= (ushort) (((int) num1 & 3) << 8);
        obstructionState.Near2 |= (ushort) (((int) num1 & 12) << 6);
        obstructionState.Near3 |= (ushort) (((int) num1 & 48) << 4);
        obstructionState.Near4 |= (ushort) (((int) num1 & 192) << 2);
        obstructionState.Near5 |= (ushort) (((int) num2 & 3) << 8);
        obstructionState.Near6 |= (ushort) (((int) num2 & 12) << 6);
        return obstructionState;
      }

      public override string ToString()
      {
        StringBuilder stringBuilder = new StringBuilder();
        int totalWidth = 8;
        stringBuilder.Append("Near1: ".PadRight(totalWidth)).AppendLine(this.Near1.ToString());
        stringBuilder.Append("Near2: ".PadRight(totalWidth)).AppendLine(this.Near2.ToString());
        stringBuilder.Append("Near3: ".PadRight(totalWidth)).AppendLine(this.Near3.ToString());
        stringBuilder.Append("Near4: ".PadRight(totalWidth)).AppendLine(this.Near4.ToString());
        stringBuilder.Append("Near5: ".PadRight(totalWidth)).AppendLine(this.Near5.ToString());
        stringBuilder.Append("Near6: ".PadRight(totalWidth)).AppendLine(this.Near6.ToString());
        return stringBuilder.ToString();
      }

      internal IEnumerable<byte> ToByteArray()
      {
        return (IEnumerable<byte>) new byte[8]
        {
          (byte) this.Near1,
          (byte) this.Near2,
          (byte) this.Near3,
          (byte) this.Near4,
          (byte) this.Near5,
          (byte) this.Near6,
          (byte) ((int) this.Near1 >> 8 & 3 | ((int) this.Near2 >> 8 & 3) << 2 | ((int) this.Near3 >> 8 & 3) << 4 | ((int) this.Near4 >> 8 & 3) << 6),
          (byte) ((int) this.Near5 >> 8 & 3 | ((int) this.Near6 >> 8 & 3) << 2)
        };
      }
    }

    public enum Check : byte
    {
      LED1_EAST = 1,
      LED2_WEST = 2,
      LED3_NORTH = 3,
      LED4_SOUTH = 4,
      LED5_MIDDLE = 5,
      LED6_EWSN = 6,
    }
  }
}


--- SmokeDetectorEvent.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.SmokeDetectorEvent
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System;

#nullable disable
namespace DeviceCollector
{
  [Flags]
  public enum SmokeDetectorEvent : ushort
  {
    BatteryForewarning = 1,
    BatteryFault = 2,
    BatteryWarningRadio = 4,
    SmokeChamberPollutionForewarning = 8,
    SmokeChamberPollutionWarning = 16, // 0x0010
    PushButtonFailure = 32, // 0x0020
    HornFailure = 64, // 0x0040
    RemovingDetection = 128, // 0x0080
    TestAlarmReleased = 256, // 0x0100
    SmokeAlarmReleased = 512, // 0x0200
    IngressAperturesObstructionDetected = 1024, // 0x0400
    ObjectInSurroundingAreaDetected = 2048, // 0x0800
    LED_Failure = 4096, // 0x1000
    Bit13_undefined = 8192, // 0x2000
    Bit14_undefined = 16384, // 0x4000
    Bit15_undefined = 32768, // 0x8000
  }
}


--- ThreadStarter.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.ThreadStarter
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System.Threading;

#nullable disable
namespace DeviceCollector
{
  internal class ThreadStarter
  {
    internal static Thread CreateThread(
      RuntimeThread.Start StartFktPara,
      DeviceCollectorFunctions BaseClassRef)
    {
      return new Thread(new ThreadStart(new ThreadStarter.Args()
      {
        BaseClassRef = BaseClassRef,
        StartFkt = StartFktPara
      }.StarterStartFkt));
    }

    private class Args
    {
      public DeviceCollectorFunctions BaseClassRef;
      public RuntimeThread.Start StartFkt;

      public void StarterStartFkt() => this.StartFkt(ref this.BaseClassRef);
    }
  }
}


--- WaveFlowDevice.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.WaveFlowDevice
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using NS.Plugin.Wavenis;
using StartupLib;
using System;
using System.Collections;
using System.Threading;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class WaveFlowDevice : BusDevice
  {
    private string[] Repeaters;
    private bool RepeatersAreActivated;
    private int IndexA;
    private int IndexB;
    private int IndexC;
    private int IndexD;
    private int NbCounters;
    private WaveFlow.OperationMode.DatalogMode LoggingMode;
    private bool WireCutDetect;
    private bool LowLeakDetect;
    private bool HighLeakDetect;
    private bool ReedDetect;
    private bool BatteryLife;
    private bool WireCutA;
    private bool WireCutB;
    private bool LowLeak;
    private bool HighLeak;
    private bool ReedFaultAORWireCutC;
    private bool ReedFaultBORWireCutD;
    private bool ReverseLeak;
    private byte PulseValueA;
    private WaveFlow.PulseWeight.PulseUnit PulseUnitA;
    private byte PulseValueB;
    private WaveFlow.PulseWeight.PulseUnit PulseUnitB;
    private byte PulseValueC;
    private WaveFlow.PulseWeight.PulseUnit PulseUnitC;
    private byte PulseValueD;
    private WaveFlow.PulseWeight.PulseUnit PulseUnitD;
    private string Firmware;
    private byte RSSI;
    private DateTime DeviceTime;
    private string LastErrorString;

    public WaveFlowDevice(DeviceCollectorFunctions TheBus)
      : base(TheBus)
    {
      if (this.MyBus.MyWavePort == null)
        this.MyBus.MyWavePort = new WavePortConnector(TheBus);
      this.DeviceType = DeviceTypes.WaveFlowDevice;
      this.Info.Manufacturer = "COR";
      this.Info.ManufacturerCode = (short) 3570;
      this.Info.Medium = (byte) 7;
      this.LastErrorString = string.Empty;
      this.Repeaters = new string[0];
      this.RepeatersAreActivated = false;
    }

    private string[] GetConvertedRepeaters()
    {
      if (!this.RepeatersAreActivated || this.Repeaters.Length == 0)
        return (string[]) null;
      string[] convertedRepeaters = new string[this.Repeaters.Length];
      for (int index = 0; index < this.Repeaters.Length; ++index)
        convertedRepeaters[index] = this.GetConvertedSN(this.FillSerialNumber(this.Repeaters[index]));
      return convertedRepeaters;
    }

    internal override bool SetRepeaters(string[] SerialNumbers, out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      if (SerialNumbers.Length < 1 || SerialNumbers.Length > 3)
      {
        this.LastErrorString = "Wrong number of SerialNumbers! (Min = 1, Max = 3)!";
        Fehlerstring = this.LastErrorString;
        return false;
      }
      for (int index = 0; index < SerialNumbers.Length; ++index)
      {
        if (this.GetConvertedSN(this.FillSerialNumber(SerialNumbers[index])) == string.Empty)
        {
          this.LastErrorString = "Wrong SerialNumber! (Pos: " + index.ToString() + ")!";
          Fehlerstring = this.LastErrorString;
          return false;
        }
      }
      this.Repeaters = new string[SerialNumbers.Length];
      for (int index = 0; index < SerialNumbers.Length; ++index)
        this.Repeaters[index] = this.FillSerialNumber(SerialNumbers[index]);
      return true;
    }

    internal override void ActivateRepeaters() => this.RepeatersAreActivated = true;

    internal override void DeactivateRepeaters() => this.RepeatersAreActivated = false;

    internal override string[] GetRepeaters() => this.Repeaters;

    internal override bool GetRepeatersAreActivated() => this.RepeatersAreActivated;

    private void ClearParameters()
    {
      this.IndexA = 0;
      this.IndexB = 0;
      this.IndexC = 0;
      this.IndexD = 0;
      this.NbCounters = 0;
      this.LoggingMode = (WaveFlow.OperationMode.DatalogMode) 0;
      this.WireCutDetect = false;
      this.LowLeakDetect = false;
      this.HighLeakDetect = false;
      this.ReedDetect = false;
      this.BatteryLife = false;
      this.WireCutA = false;
      this.WireCutB = false;
      this.LowLeak = false;
      this.HighLeak = false;
      this.ReedFaultAORWireCutC = false;
      this.ReedFaultBORWireCutD = false;
      this.ReverseLeak = false;
      this.PulseValueA = (byte) 0;
      this.PulseUnitA = (WaveFlow.PulseWeight.PulseUnit) 0;
      this.PulseValueB = (byte) 0;
      this.PulseUnitB = (WaveFlow.PulseWeight.PulseUnit) 0;
      this.PulseValueC = (byte) 0;
      this.PulseUnitC = (WaveFlow.PulseWeight.PulseUnit) 0;
      this.PulseValueD = (byte) 0;
      this.PulseUnitD = (WaveFlow.PulseWeight.PulseUnit) 0;
      this.Firmware = string.Empty;
      this.RSSI = (byte) 0;
      this.DeviceTime = new DateTime();
    }

    internal string GetParameterString()
    {
      return "IndexA = " + this.IndexA.ToString() + ZR_Constants.SystemNewLine + "IndexB = " + this.IndexB.ToString() + ZR_Constants.SystemNewLine + "IndexC = " + this.IndexC.ToString() + ZR_Constants.SystemNewLine + "IndexD = " + this.IndexD.ToString() + ZR_Constants.SystemNewLine + "NbCounters = " + this.NbCounters.ToString() + ZR_Constants.SystemNewLine + "LoggingMode = " + this.LoggingMode.ToString() + ZR_Constants.SystemNewLine + "WireCutDetect = " + this.WireCutDetect.ToString() + ZR_Constants.SystemNewLine + "LowLeakDetect = " + this.LowLeakDetect.ToString() + ZR_Constants.SystemNewLine + "HighLeakDetect = " + this.HighLeakDetect.ToString() + ZR_Constants.SystemNewLine + "ReedDetect = " + this.ReedDetect.ToString() + ZR_Constants.SystemNewLine + "BatteryLife = " + this.BatteryLife.ToString() + ZR_Constants.SystemNewLine + "WireCutA = " + this.WireCutA.ToString() + ZR_Constants.SystemNewLine + "WireCutB = " + this.WireCutB.ToString() + ZR_Constants.SystemNewLine + "LowLeak = " + this.LowLeak.ToString() + ZR_Constants.SystemNewLine + "HighLeak = " + this.HighLeak.ToString() + ZR_Constants.SystemNewLine + "ReedFaultAORWireCutC = " + this.ReedFaultAORWireCutC.ToString() + ZR_Constants.SystemNewLine + "ReedFaultBORWireCutD = " + this.ReedFaultBORWireCutD.ToString() + ZR_Constants.SystemNewLine + "ReverseLeak = " + this.ReverseLeak.ToString() + ZR_Constants.SystemNewLine + "PulseValueA = " + this.PulseValueA.ToString() + ZR_Constants.SystemNewLine + "PulseUnitA = " + this.PulseUnitA.ToString() + ZR_Constants.SystemNewLine + "PulseValueB = " + this.PulseValueB.ToString() + ZR_Constants.SystemNewLine + "PulseUnitB = " + this.PulseUnitB.ToString() + ZR_Constants.SystemNewLine + "PulseValueC = " + this.PulseValueC.ToString() + ZR_Constants.SystemNewLine + "PulseUnitC = " + this.PulseUnitC.ToString() + ZR_Constants.SystemNewLine + "PulseValueD = " + this.PulseValueD.ToString() + ZR_Constants.SystemNewLine + "PulseUnitD = " + this.PulseUnitD.ToString() + ZR_Constants.SystemNewLine + "Firmware = " + this.Firmware + ZR_Constants.SystemNewLine + "RSSI = " + this.RSSI.ToString() + ZR_Constants.SystemNewLine + "DeviceTime = " + this.DeviceTime.ToString() + ZR_Constants.SystemNewLine;
    }

    internal bool ReadParameters()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.Waveflow))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for Waveflow!");
        return false;
      }
      this.ClearParameters();
      this.MyBus.BreakRequest = false;
      this.Info.ParameterOk = false;
      this.Info.ParameterList.Clear();
      this.Info.LastReadingDate = ParameterService.GetNow();
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("RTIME", this.Info.LastReadingDate.ToString("dd.MM.yyyy HH:mm:ss")));
      this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("SID", this.Info.MeterNumber));
      object ParameterData1;
      if (!this.ReadParameterGroup(ParameterGroups.Indices, 3, out ParameterData1))
      {
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("R_ERR", "0"));
        return false;
      }
      try
      {
        SortedList sortedList1 = (SortedList) ParameterData1;
        this.NbCounters = (int) sortedList1[(object) WaveFlowDevice.ParameterNames.NbCounters];
        this.IndexA = (int) sortedList1[(object) WaveFlowDevice.ParameterNames.IndexA];
        if (this.NbCounters > 1)
          this.IndexB = (int) sortedList1[(object) WaveFlowDevice.ParameterNames.IndexB];
        if (this.NbCounters > 2)
          this.IndexC = (int) sortedList1[(object) WaveFlowDevice.ParameterNames.IndexC];
        if (this.NbCounters > 3)
          this.IndexD = (int) sortedList1[(object) WaveFlowDevice.ParameterNames.IndexD];
        this.LoggingMode = (WaveFlow.OperationMode.DatalogMode) sortedList1[(object) WaveFlowDevice.ParameterNames.LoggingMode];
        this.WireCutDetect = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.WireCutDetect];
        this.LowLeakDetect = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.LowLeakDetect];
        this.HighLeakDetect = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.HighLeakDetect];
        this.ReedDetect = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.ReedDetect];
        this.BatteryLife = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.BatteryLife];
        this.WireCutA = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.WireCutA];
        this.WireCutB = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.WireCutB];
        this.LowLeak = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.LowLeak];
        this.HighLeak = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.HighLeak];
        this.ReedFaultAORWireCutC = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.ReedFaultAORWireCutC];
        this.ReedFaultBORWireCutD = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.ReedFaultBORWireCutD];
        this.ReverseLeak = (bool) sortedList1[(object) WaveFlowDevice.ParameterNames.ReverseLeak];
        object ParameterData2 = new object();
        if (!this.ReadParameterGroup(ParameterGroups.PulseWeights, 3, out ParameterData2))
          return false;
        Application.DoEvents();
        if (this.MyBus.BreakRequest)
          return false;
        SortedList sortedList2 = (SortedList) ParameterData2;
        if (this.NbCounters > 0)
        {
          this.PulseValueA = (byte) sortedList2[(object) WaveFlowDevice.ParameterNames.PulseValueA];
          this.PulseUnitA = (WaveFlow.PulseWeight.PulseUnit) sortedList2[(object) WaveFlowDevice.ParameterNames.PulseUnitA];
        }
        if (this.NbCounters > 1)
        {
          this.PulseValueB = (byte) sortedList2[(object) WaveFlowDevice.ParameterNames.PulseValueB];
          this.PulseUnitB = (WaveFlow.PulseWeight.PulseUnit) sortedList2[(object) WaveFlowDevice.ParameterNames.PulseUnitB];
        }
        if (this.NbCounters > 2)
        {
          this.PulseValueC = (byte) sortedList2[(object) WaveFlowDevice.ParameterNames.PulseValueC];
          this.PulseUnitC = (WaveFlow.PulseWeight.PulseUnit) sortedList2[(object) WaveFlowDevice.ParameterNames.PulseUnitC];
        }
        if (this.NbCounters > 3)
        {
          this.PulseValueD = (byte) sortedList2[(object) WaveFlowDevice.ParameterNames.PulseValueD];
          this.PulseUnitD = (WaveFlow.PulseWeight.PulseUnit) sortedList2[(object) WaveFlowDevice.ParameterNames.PulseUnitD];
        }
        object ParameterData3;
        if (!this.ReadParameterGroup(ParameterGroups.Firmware, 3, out ParameterData3))
          return false;
        Application.DoEvents();
        if (this.MyBus.BreakRequest)
          return false;
        this.Firmware = (string) ((SortedList) ParameterData3)[(object) WaveFlowDevice.ParameterNames.Firmware];
        if (!this.ReadParameterGroup(ParameterGroups.RSSI, 3, out ParameterData3))
          return false;
        Application.DoEvents();
        if (this.MyBus.BreakRequest)
          return false;
        this.RSSI = (byte) ((SortedList) ParameterData3)[(object) WaveFlowDevice.ParameterNames.RSSI];
        if (!this.ReadParameterGroup(ParameterGroups.Date, 3, out ParameterData3))
          return false;
        Application.DoEvents();
        if (this.MyBus.BreakRequest)
          return false;
        this.DeviceTime = (DateTime) ((SortedList) ParameterData3)[(object) WaveFlowDevice.ParameterNames.Date];
        this.Info.Version = (byte) 1;
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("MAN", this.Info.Manufacturer));
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("MED", MBusDevice.GetMediaString(this.Info.Medium)));
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("GEN", this.Info.Version.ToString()));
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("RCL", this.RSSI.ToString()));
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("TIMP", this.DeviceTime.ToString("dd.MM.yyyy HH:mm:ss")));
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("NbCounters", this.NbCounters.ToString()));
        if (this.NbCounters > 0)
        {
          string QmIndexString;
          if (!this.GetQMIndexString(this.IndexA, this.PulseUnitA, this.PulseValueA, out QmIndexString))
            return false;
          this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("QM", QmIndexString));
        }
        if (this.NbCounters > 1)
        {
          string QmIndexString;
          if (!this.GetQMIndexString(this.IndexB, this.PulseUnitB, this.PulseValueB, out QmIndexString))
            return false;
          this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("QM[1]", QmIndexString));
        }
        if (this.NbCounters > 2)
        {
          string QmIndexString;
          if (!this.GetQMIndexString(this.IndexC, this.PulseUnitC, this.PulseValueC, out QmIndexString))
            return false;
          this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("QM[2]", QmIndexString));
        }
        if (this.NbCounters > 3)
        {
          string QmIndexString;
          if (!this.GetQMIndexString(this.IndexD, this.PulseUnitD, this.PulseValueD, out QmIndexString))
            return false;
          this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("QM[3]", QmIndexString));
        }
        this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("LoggingMode", this.LoggingMode.ToString()));
        if (this.WireCutDetect)
        {
          if (this.NbCounters > 0 && this.WireCutA)
            this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("WireCutA", "1"));
          if (this.NbCounters > 1 && this.WireCutB)
            this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("WireCutB", "1"));
        }
        if (this.BatteryLife)
          this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("BatteryLife", "1"));
        if (this.LowLeakDetect && this.LowLeak)
          this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("LowLeak", "1"));
        if (this.HighLeakDetect && this.HighLeak)
          this.Info.ParameterList.Add(new DeviceInfo.MBusParamStruct("HighLeak", "1"));
        this.Info.ParameterOk = true;
        return true;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    internal override bool ReadParameterGroup(
      ParameterGroups TheParameterGroup,
      out object ParameterData)
    {
      return this.ReadParameterGroup(TheParameterGroup, 1, out ParameterData);
    }

    internal override bool ReadParameterGroup(
      ParameterGroups TheParameterGroup,
      int Retries,
      out object ParameterData)
    {
      this.LastErrorString = string.Empty;
      ParameterData = (object) null;
      string convertedSn = this.GetConvertedSN(this.GetSerialNumber());
      int num = Retries;
      bool flag = false;
      SortedList TheList = new SortedList();
      if (!this.MyBus.ComOpen())
      {
        this.LastErrorString = "Can't open COM!";
        return false;
      }
      while (num-- > 0 && !flag)
      {
        switch (TheParameterGroup)
        {
          case ParameterGroups.RSSI:
            if (this.WF_GetRSSI(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.Date:
            if (this.WF_GetDate(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.BatteryLifeCounter:
            if (this.WF_GetBatteryLifeCounter(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.DateForEndOfBatteryLifeDetection:
            if (this.WF_GetDateForEndOfBatteryLifeDetection(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.Firmware:
            if (this.WF_GetFirmware(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.GroupNumber:
            if (this.WF_GetGroupNumber(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.OperationModes:
            if (this.WF_GetOperationModes(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.Status:
            if (this.WF_GetStatus(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.PulseWeights:
            if (this.WF_GetPulseWeights(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.DateForReedFailure:
            if (this.WF_GetDateForReedFailure(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.DateForWireCutDetection:
            if (this.WF_GetDateForeWireCutDetection(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.Indices:
            if (this.WF_GetIndices(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.ExtendedIndex:
            if (this.WF_GetExtendedIndex(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.WakeUpMode:
            if (this.WF_GetWakeUpMode(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.DatalogPeriod:
            if (this.WF_GetDatalogPeriod(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.WeeklyDatalog:
            if (this.WF_GetWeeklyDatalog(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.MonthlyDatalog:
            if (this.WF_GetMonthlyDatalog(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.DatalogAllInputs:
            if (this.WF_GetDatalogAllInputs(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.Datalog:
            if (this.WF_GetDatalog(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.ExtendedDatalog:
            if (this.WF_GetExtendedDatalog(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.LowLeak:
            if (this.WF_GetLowLeak(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.HighLeak:
            if (this.WF_GetHighLeak(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.LeakHistory:
            if (this.WF_GetLeakHistory(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.BackFlow:
            if (this.WF_GetBackFlow(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.BackflowHistory:
            if (this.WF_GetBackflowHistory(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.SpecialBackFlow:
            if (this.WF_GetSpecialBackFlow(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.AlarmConfiguration:
            if (this.WF_GetAlarmConfiguration(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.FactoryConfiguration:
            if (this.WF_GetFactoryConfiguration(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          case ParameterGroups.SolenoidState:
            if (this.WF_GetSolenoidState(convertedSn, ref TheList))
            {
              flag = true;
              break;
            }
            break;
          default:
            this.LastErrorString = "No read function available for this parametergroup" + TheParameterGroup.ToString() + " !";
            flag = false;
            break;
        }
        if (!flag)
          Thread.Sleep(500);
      }
      ParameterData = (object) TheList;
      if (flag)
        return true;
      this.LastErrorString = string.Format("Readparametergroup '{0}' readout failed {1} times.", (object) TheParameterGroup, (object) num);
      return false;
    }

    internal override bool WriteParameterGroup(
      ParameterGroups TheParameterGroup,
      object ParameterData)
    {
      this.LastErrorString = string.Empty;
      string convertedSn = this.GetConvertedSN(this.GetSerialNumber());
      if (!this.MyBus.ComOpen())
      {
        this.LastErrorString = "Can't open COM!";
        return false;
      }
      switch (TheParameterGroup)
      {
        case ParameterGroups.Date:
          if (!this.WF_SetDate(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.GroupNumber:
          if (!this.WF_SetGroupNumber(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.OperationModes:
          if (!this.WF_SetOperationModes(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.Status:
          if (!this.WF_SetStatus(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.PulseWeights:
          if (!this.WF_SetPulseWeights(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.Indices:
          if (!this.WF_SetIndices(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.WakeUpMode:
          if (!this.WF_SetWakeUpMode(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.DatalogPeriod:
          if (!this.WF_SetDatalogPeriod(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.WeeklyDatalog:
          if (!this.WF_SetWeeklyDatalog(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.MonthlyDatalog:
          if (!this.WF_SetMonthlyDatalog(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.LowLeak:
          if (!this.WF_SetLowLeak(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.HighLeak:
          if (!this.WF_SetHighLeak(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.BackFlow:
          if (!this.WF_SetBackFlow(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.SpecialBackFlow:
          if (!this.WF_SetSpecialBackFlow(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.AlarmConfiguration:
          if (!this.WF_SetAlarmConfiguration(convertedSn, ParameterData))
            return false;
          break;
        case ParameterGroups.SolenoidState:
          if (!this.WF_SetSolenoidState(convertedSn, ParameterData))
            return false;
          break;
        default:
          this.LastErrorString = "No write function available for this parametergroup" + TheParameterGroup.ToString() + " !";
          return false;
      }
      return true;
    }

    internal override bool ResetParameterGroup(ParameterGroups TheParameterGroup)
    {
      this.LastErrorString = string.Empty;
      string convertedSn = this.GetConvertedSN(this.GetSerialNumber());
      if (!this.MyBus.ComOpen())
      {
        this.LastErrorString = "Can't open COM!";
        return false;
      }
      switch (TheParameterGroup)
      {
        case ParameterGroups.DateForEndOfBatteryLifeDetection:
          if (!this.WF_ResetDateForEndOfBatteryLifeDetection(convertedSn))
            return false;
          break;
        case ParameterGroups.DateForReedFailure:
          if (!this.WF_ResetDateForReedFailure(convertedSn))
            return false;
          break;
        case ParameterGroups.DateForWireCutDetection:
          if (!this.WF_ResetDateForeWireCutDetection(convertedSn))
            return false;
          break;
        default:
          this.LastErrorString = "No reset function available for this parametergroup" + TheParameterGroup.ToString() + " !";
          return false;
      }
      return true;
    }

    internal string GetSerialNumber() => this.FillSerialNumber(this.Info.MeterNumber);

    internal string FillSerialNumber(string SerialNumber)
    {
      SerialNumber = SerialNumber.Trim();
      for (int length = SerialNumber.Length; length < 15; ++length)
        SerialNumber = "0" + SerialNumber;
      return SerialNumber;
    }

    internal string GetLastErrorString() => this.LastErrorString;

    internal override bool ReadAnswerString(string RequestString, out string AnswerString)
    {
      string convertedSn = this.GetConvertedSN(this.GetSerialNumber());
      AnswerString = string.Empty;
      if (!this.MyBus.ComOpen())
      {
        this.LastErrorString = "Can't open COM!";
        return false;
      }
      try
      {
        if (RequestString.Trim().Substring(0, 2) == "0x")
        {
          if (!this.MyBus.MyWavePort.StartRequest(convertedSn, this.GetConvertedRepeaters(), RequestString.Substring(2), out AnswerString, out this.LastErrorString))
            return false;
        }
        else
          AnswerString = "Noch nicht implementiert!";
        return true;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_GetRSSI(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      byte num;
      WaveCardRequest.Errors rssi = ((WaveBase) this.MyBus.MyWavePort.MyWaveFlow).GetRSSI(SerialNumber, this.GetConvertedRepeaters(), ref num);
      if (rssi > 0)
      {
        this.LastErrorString = rssi.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.RSSI] = (object) num;
      return true;
    }

    private bool WF_GetDate(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      DateTime dateTime;
      WaveCardRequest.Errors date = ((WaveBase) this.MyBus.MyWavePort.MyWaveFlow).GetDate(SerialNumber, this.GetConvertedRepeaters(), ref dateTime);
      if (date > 0)
      {
        this.LastErrorString = date.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.Date] = (object) dateTime;
      return true;
    }

    private bool WF_GetBatteryLifeCounter(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      ushort num;
      WaveCardRequest.Errors batteryLifeCounter = this.MyBus.MyWavePort.MyWaveFlow.GetBatteryLifeCounter(SerialNumber, this.GetConvertedRepeaters(), ref num);
      if (batteryLifeCounter > 0)
      {
        this.LastErrorString = batteryLifeCounter.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.BatteryLifeCounter] = (object) num;
      return true;
    }

    private bool WF_GetDateForEndOfBatteryLifeDetection(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      DateTime dateTime;
      WaveCardRequest.Errors batteryLifeDetection = this.MyBus.MyWavePort.MyWaveFlow.GetDateForEndOfBatteryLifeDetection(SerialNumber, this.GetConvertedRepeaters(), ref dateTime);
      if (batteryLifeDetection > 0)
      {
        this.LastErrorString = batteryLifeDetection.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.EndOfBatteryLifeDetection] = (object) dateTime;
      return true;
    }

    private bool WF_GetFirmware(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      string str;
      WaveCardRequest.Errors firmware = ((WaveBase) this.MyBus.MyWavePort.MyWaveFlow).GetFirmware(SerialNumber, this.GetConvertedRepeaters(), ref str);
      if (firmware > 0)
      {
        this.LastErrorString = firmware.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.Firmware] = (object) str;
      return true;
    }

    private bool WF_GetGroupNumber(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      try
      {
        byte num;
        WaveCardRequest.Errors groupNumber = this.MyBus.MyWavePort.MyWaveFlow.GetGroupNumber(SerialNumber, this.GetConvertedRepeaters(), ref num);
        if (groupNumber > 0)
        {
          this.LastErrorString = groupNumber.ToString();
          TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
          return false;
        }
        TheList[(object) WaveFlowDevice.ParameterNames.GroupNumberForPolls] = (object) num;
        return true;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_GetOperationModes(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.OperationMode operationMode1;
      WaveCardRequest.Errors operationMode2 = this.MyBus.MyWavePort.MyWaveFlow.GetOperationMode(SerialNumber, this.GetConvertedRepeaters(), ref operationMode1);
      if (operationMode2 > 0)
      {
        this.LastErrorString = operationMode2.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.NbCounters] = (object) operationMode1.NbCounters;
      TheList[(object) WaveFlowDevice.ParameterNames.LoggingMode] = (object) operationMode1.LoggingMode;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutDetect] = (object) operationMode1.WireCutDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDetect] = (object) operationMode1.LowLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDetect] = (object) operationMode1.HighLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedDetect] = (object) operationMode1.ReedDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionMethod] = (object) operationMode1.BackflowDetection;
      return true;
    }

    private bool WF_GetStatus(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.Status status1;
      WaveCardRequest.Errors status2 = this.MyBus.MyWavePort.MyWaveFlow.GetStatus(SerialNumber, this.GetConvertedRepeaters(), ref status1);
      if (status2 > 0)
      {
        this.LastErrorString = status2.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.BatteryLife] = (object) status1.BatteryLife;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutA] = (object) status1.WireCutA;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutB] = (object) status1.WireCutB;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeak] = (object) status1.LowLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeak] = (object) status1.HighLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultAORWireCutC] = (object) status1.ReedFaultAORWireCutC;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultBORWireCutD] = (object) status1.ReedFaultBORWireCutD;
      TheList[(object) WaveFlowDevice.ParameterNames.ReverseLeak] = (object) status1.ReverseLeak;
      return true;
    }

    private bool WF_GetPulseWeights(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.PulseWeight[] pulseWeightArray;
      WaveCardRequest.Errors pulseWeights = this.MyBus.MyWavePort.MyWaveFlow.GetPulseWeights(SerialNumber, this.GetConvertedRepeaters(), ref pulseWeightArray);
      if (pulseWeights > 0)
      {
        this.LastErrorString = pulseWeights.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      for (int index = 0; index < pulseWeightArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.PulseValueA] = (object) pulseWeightArray[index].Coefficient;
            TheList[(object) WaveFlowDevice.ParameterNames.PulseUnitA] = (object) pulseWeightArray[index].Unit;
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.PulseValueB] = (object) pulseWeightArray[index].Coefficient;
            TheList[(object) WaveFlowDevice.ParameterNames.PulseUnitB] = (object) pulseWeightArray[index].Unit;
            break;
          case 2:
            TheList[(object) WaveFlowDevice.ParameterNames.PulseValueC] = (object) pulseWeightArray[index].Coefficient;
            TheList[(object) WaveFlowDevice.ParameterNames.PulseUnitC] = (object) pulseWeightArray[index].Unit;
            break;
          case 3:
            TheList[(object) WaveFlowDevice.ParameterNames.PulseValueD] = (object) pulseWeightArray[index].Coefficient;
            TheList[(object) WaveFlowDevice.ParameterNames.PulseUnitD] = (object) pulseWeightArray[index].Unit;
            break;
        }
      }
      return true;
    }

    private bool WF_GetDateForReedFailure(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      DateTime[] dateTimeArray;
      WaveCardRequest.Errors dateForReedFailure = this.MyBus.MyWavePort.MyWaveFlow.GetDateForReedFailure(SerialNumber, this.GetConvertedRepeaters(), ref dateTimeArray);
      if (dateForReedFailure > 0)
      {
        this.LastErrorString = dateForReedFailure.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      for (int index = 0; index < dateTimeArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultADate] = (object) dateTimeArray[index];
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultBDate] = (object) dateTimeArray[index];
            break;
        }
      }
      return true;
    }

    private bool WF_GetDateForeWireCutDetection(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      DateTime[] dateTimeArray;
      WaveCardRequest.Errors wireCutDetection = this.MyBus.MyWavePort.MyWaveFlow.GetDateForWireCutDetection(SerialNumber, this.GetConvertedRepeaters(), ref dateTimeArray);
      if (wireCutDetection > 0)
      {
        this.LastErrorString = wireCutDetection.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      for (int index = 0; index < dateTimeArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.WireCutADate] = (object) dateTimeArray[index];
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.WireCutBDate] = (object) dateTimeArray[index];
            break;
          case 2:
            TheList[(object) WaveFlowDevice.ParameterNames.WireCutCDate] = (object) dateTimeArray[index];
            break;
          case 3:
            TheList[(object) WaveFlowDevice.ParameterNames.WireCutDDate] = (object) dateTimeArray[index];
            break;
        }
      }
      return true;
    }

    private bool WF_GetIndices(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.OperationMode operationMode;
      WaveFlow.Status status;
      int[] numArray;
      WaveCardRequest.Errors index = this.MyBus.MyWavePort.MyWaveFlow.GetIndex(SerialNumber, this.GetConvertedRepeaters(), ref operationMode, ref status, ref numArray);
      if (index > 0)
      {
        this.LastErrorString = index.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.IndexA] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.IndexB] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.IndexC] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.IndexD] = (object) null;
      if (numArray.Length != 0)
        TheList[(object) WaveFlowDevice.ParameterNames.IndexA] = (object) numArray[0];
      if (numArray.Length > 1)
        TheList[(object) WaveFlowDevice.ParameterNames.IndexB] = (object) numArray[1];
      if (numArray.Length > 2)
        TheList[(object) WaveFlowDevice.ParameterNames.IndexC] = (object) numArray[2];
      if (numArray.Length > 3)
        TheList[(object) WaveFlowDevice.ParameterNames.IndexD] = (object) numArray[3];
      TheList[(object) WaveFlowDevice.ParameterNames.NbCounters] = (object) operationMode.NbCounters;
      TheList[(object) WaveFlowDevice.ParameterNames.LoggingMode] = (object) operationMode.LoggingMode;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutDetect] = (object) operationMode.WireCutDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDetect] = (object) operationMode.LowLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDetect] = (object) operationMode.HighLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedDetect] = (object) operationMode.ReedDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionMethod] = (object) operationMode.BackflowDetection;
      TheList[(object) WaveFlowDevice.ParameterNames.BatteryLife] = (object) status.BatteryLife;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutA] = (object) status.WireCutA;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutB] = (object) status.WireCutB;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeak] = (object) status.LowLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeak] = (object) status.HighLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultAORWireCutC] = (object) status.ReedFaultAORWireCutC;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultBORWireCutD] = (object) status.ReedFaultBORWireCutD;
      TheList[(object) WaveFlowDevice.ParameterNames.ReverseLeak] = (object) status.ReverseLeak;
      return true;
    }

    private bool WF_GetExtendedIndex(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.OperationMode operationMode;
      WaveFlow.Status status;
      int[] numArray1;
      int[] numArray2;
      int[][] numArray3;
      DateTime dateTime;
      WaveBase.MeasurePeriod measurePeriod;
      WaveCardRequest.Errors extendedIndex = this.MyBus.MyWavePort.MyWaveFlow.GetExtendedIndex(SerialNumber, this.GetConvertedRepeaters(), ref operationMode, ref status, ref numArray1, ref numArray2, ref numArray3, ref dateTime, ref measurePeriod);
      if (extendedIndex > 0)
      {
        this.LastErrorString = extendedIndex.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      for (int index = 0; index < 4; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexLMEA] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA00] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA01] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA02] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA03] = (object) -1;
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexLMEB] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB00] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB01] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB02] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB03] = (object) -1;
            break;
          case 2:
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexLMEC] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC00] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC01] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC02] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC03] = (object) -1;
            break;
          case 3:
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexLMED] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD00] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD01] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD02] = (object) -1;
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD03] = (object) -1;
            break;
        }
      }
      for (int index = 0; index < numArray1.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA] = (object) numArray1[index];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexLMEA] = (object) numArray2[index];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA00] = (object) numArray3[index][0];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA01] = (object) numArray3[index][1];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA02] = (object) numArray3[index][2];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexA03] = (object) numArray3[index][3];
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB] = (object) numArray1[index];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexLMEB] = (object) numArray2[index];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB00] = (object) numArray3[index][0];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB01] = (object) numArray3[index][1];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB02] = (object) numArray3[index][2];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexB03] = (object) numArray3[index][3];
            break;
          case 2:
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC] = (object) numArray1[index];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexLMEC] = (object) numArray2[index];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC00] = (object) numArray3[index][0];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC01] = (object) numArray3[index][1];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC02] = (object) numArray3[index][2];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexC03] = (object) numArray3[index][3];
            break;
          case 3:
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD] = (object) numArray1[index];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexLMED] = (object) numArray2[index];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD00] = (object) numArray3[index][0];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD01] = (object) numArray3[index][1];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD02] = (object) numArray3[index][2];
            TheList[(object) WaveFlowDevice.ParameterNames.IndexD03] = (object) numArray3[index][3];
            break;
        }
      }
      TheList[(object) WaveFlowDevice.ParameterNames.LoggerDate] = (object) dateTime;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodUnit] = (object) measurePeriod.Unit;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodCoefficient] = (object) measurePeriod.Coefficient;
      TheList[(object) WaveFlowDevice.ParameterNames.NbCounters] = (object) operationMode.NbCounters;
      TheList[(object) WaveFlowDevice.ParameterNames.LoggingMode] = (object) operationMode.LoggingMode;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutDetect] = (object) operationMode.WireCutDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDetect] = (object) operationMode.LowLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDetect] = (object) operationMode.HighLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedDetect] = (object) operationMode.ReedDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionMethod] = (object) operationMode.BackflowDetection;
      TheList[(object) WaveFlowDevice.ParameterNames.BatteryLife] = (object) status.BatteryLife;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutA] = (object) status.WireCutA;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutB] = (object) status.WireCutB;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeak] = (object) status.LowLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeak] = (object) status.HighLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultAORWireCutC] = (object) status.ReedFaultAORWireCutC;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultBORWireCutD] = (object) status.ReedFaultBORWireCutD;
      TheList[(object) WaveFlowDevice.ParameterNames.ReverseLeak] = (object) status.ReverseLeak;
      return true;
    }

    private bool WF_GetWakeUpMode(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      TheList.Clear();
      WakeUpMode wakeUpMode1;
      byte num1;
      byte num2;
      byte num3;
      byte num4;
      byte num5;
      DayOfWeek dayOfWeek1;
      DayOfWeek dayOfWeek2;
      WaveCardRequest.Errors wakeUpMode2 = ((WaveBase) this.MyBus.MyWavePort.MyWaveFlow).GetWakeUpMode(SerialNumber, this.GetConvertedRepeaters(), ref wakeUpMode1, ref num1, ref num2, ref num3, ref num4, ref num5, ref dayOfWeek1, ref dayOfWeek2);
      if (wakeUpMode2 > 0)
      {
        this.LastErrorString = wakeUpMode2.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      try
      {
        TheList[(object) WaveFlowDevice.ParameterNames.WakeUpMode] = (object) wakeUpMode1;
        TheList[(object) WaveFlowDevice.ParameterNames.DefaultWakeupDuration] = (object) num1;
        TheList[(object) WaveFlowDevice.ParameterNames.HourFirstTimeFrameStarts] = (object) num2;
        TheList[(object) WaveFlowDevice.ParameterNames.FirstTimeFrameWakeupDuration] = (object) num3;
        TheList[(object) WaveFlowDevice.ParameterNames.HourSecondTimeFrameStarts] = (object) num4;
        TheList[(object) WaveFlowDevice.ParameterNames.SecondTimeFrameWakeupDuration] = (object) num5;
        TheList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnMonday] = (object) ((dayOfWeek1 & 1) == 1);
        TheList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnTuesday] = (object) ((dayOfWeek1 & 2) == 2);
        TheList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnWednesday] = (object) ((dayOfWeek1 & 4) == 4);
        TheList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnThursday] = (object) ((dayOfWeek1 & 8) == 8);
        TheList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnFriday] = (object) ((dayOfWeek1 & 16) == 16);
        TheList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnSaturday] = (object) ((dayOfWeek1 & 32) == 32);
        TheList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnSunday] = (object) ((dayOfWeek1 & 64) == 64);
        TheList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnMonday] = (object) ((dayOfWeek2 & 1) == 1);
        TheList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnTuesday] = (object) ((dayOfWeek2 & 2) == 2);
        TheList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnWednesday] = (object) ((dayOfWeek2 & 4) == 4);
        TheList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnThursday] = (object) ((dayOfWeek2 & 8) == 8);
        TheList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnFriday] = (object) ((dayOfWeek2 & 16) == 16);
        TheList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnSaturday] = (object) ((dayOfWeek2 & 32) == 32);
        TheList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnSunday] = (object) ((dayOfWeek2 & 64) == 64);
        return true;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_GetDatalogPeriod(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      byte num;
      WaveBase.MeasurePeriod measurePeriod;
      WaveCardRequest.Errors datalogPeriod = this.MyBus.MyWavePort.MyWaveFlow.GetDatalogPeriod(SerialNumber, this.GetConvertedRepeaters(), ref num, ref measurePeriod);
      if (datalogPeriod > 0)
      {
        this.LastErrorString = datalogPeriod.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogStart] = (object) num;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodUnit] = (object) measurePeriod.Unit;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodCoefficient] = (object) measurePeriod.Coefficient;
      return true;
    }

    private bool WF_GetWeeklyDatalog(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      DayOfWeek dayOfWeek;
      byte num;
      WaveCardRequest.Errors weeklyDatalog = this.MyBus.MyWavePort.MyWaveFlow.GetWeeklyDatalog(SerialNumber, this.GetConvertedRepeaters(), ref dayOfWeek, ref num);
      if (weeklyDatalog > 0)
      {
        this.LastErrorString = weeklyDatalog.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.TimeOfDatalogIf1PerMonthOrWeek] = (object) num;
      TheList[(object) WaveFlowDevice.ParameterNames.DayOfWeekOrMonth] = (object) (byte) dayOfWeek;
      return true;
    }

    private bool WF_GetMonthlyDatalog(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      byte num1;
      byte num2;
      WaveCardRequest.Errors monthlyDatalog = this.MyBus.MyWavePort.MyWaveFlow.GetMonthlyDatalog(SerialNumber, this.GetConvertedRepeaters(), ref num1, ref num2);
      if (monthlyDatalog > 0)
      {
        this.LastErrorString = monthlyDatalog.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.TimeOfDatalogIf1PerMonthOrWeek] = (object) num2;
      TheList[(object) WaveFlowDevice.ParameterNames.DayOfWeekOrMonth] = (object) num1;
      return true;
    }

    private bool WF_GetDatalogAllInputs(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      int[][] numArray;
      WaveFlow.Status status;
      WaveFlow.OperationMode operationMode;
      DateTime dateTime;
      WaveBase.MeasurePeriod measurePeriod;
      WaveCardRequest.Errors datalogAllInputs = this.MyBus.MyWavePort.MyWaveFlow.GetDatalogAllInputs(SerialNumber, this.GetConvertedRepeaters(), ref numArray, ref status, ref operationMode, ref dateTime, ref measurePeriod);
      if (datalogAllInputs > 0)
      {
        this.LastErrorString = datalogAllInputs.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      int num1 = -1;
      for (int index = 0; index < 24; ++index)
      {
        ++num1;
        WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "IndexA" + num1.ToString("00"), false);
        TheList[(object) key] = (object) null;
      }
      int num2 = -1;
      for (int index = 0; index < 12; ++index)
      {
        ++num2;
        WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "IndexB" + num2.ToString("00"), false);
        TheList[(object) key] = (object) null;
      }
      int num3 = -1;
      for (int index = 0; index < 12; ++index)
      {
        ++num3;
        WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "IndexC" + num3.ToString("00"), false);
        TheList[(object) key] = (object) null;
      }
      int num4 = -1;
      for (int index = 0; index < 12; ++index)
      {
        ++num4;
        WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "IndexD" + num4.ToString("00"), false);
        TheList[(object) key] = (object) null;
      }
      for (int index1 = 0; index1 < numArray.Length; ++index1)
      {
        string str;
        switch (index1)
        {
          case 0:
            str = "A";
            break;
          case 1:
            str = "B";
            break;
          case 2:
            str = "C";
            break;
          case 3:
            str = "D";
            break;
          default:
            this.LastErrorString = "Wrong Index!";
            return false;
        }
        int num5 = -1;
        for (int index2 = 0; index2 < numArray[index1].Length; ++index2)
        {
          ++num5;
          WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "Index" + str + num5.ToString("00"), false);
          TheList[(object) key] = (object) numArray[index1][index2];
        }
      }
      TheList[(object) WaveFlowDevice.ParameterNames.LoggerDate] = (object) dateTime;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodUnit] = (object) measurePeriod.Unit;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodCoefficient] = (object) measurePeriod.Coefficient;
      TheList[(object) WaveFlowDevice.ParameterNames.NbCounters] = (object) operationMode.NbCounters;
      TheList[(object) WaveFlowDevice.ParameterNames.LoggingMode] = (object) operationMode.LoggingMode;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutDetect] = (object) operationMode.WireCutDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDetect] = (object) operationMode.LowLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDetect] = (object) operationMode.HighLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedDetect] = (object) operationMode.ReedDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionMethod] = (object) operationMode.BackflowDetection;
      TheList[(object) WaveFlowDevice.ParameterNames.BatteryLife] = (object) status.BatteryLife;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutA] = (object) status.WireCutA;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutB] = (object) status.WireCutB;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeak] = (object) status.LowLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeak] = (object) status.HighLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultAORWireCutC] = (object) status.ReedFaultAORWireCutC;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultBORWireCutD] = (object) status.ReedFaultBORWireCutD;
      TheList[(object) WaveFlowDevice.ParameterNames.ReverseLeak] = (object) status.ReverseLeak;
      return true;
    }

    private bool WF_GetDatalog(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      int[][] numArray;
      WaveFlow.Status status;
      WaveFlow.OperationMode operationMode;
      DateTime dateTime;
      WaveBase.MeasurePeriod measurePeriod;
      WaveCardRequest.Errors datalog = this.MyBus.MyWavePort.MyWaveFlow.GetDatalog(SerialNumber, this.GetConvertedRepeaters(), ref numArray, ref status, ref operationMode, ref dateTime, ref measurePeriod);
      if (datalog > 0)
      {
        this.LastErrorString = datalog.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      int num1 = -1;
      for (int index = 0; index < 24; ++index)
      {
        ++num1;
        WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "IndexA" + num1.ToString("00"), false);
        TheList[(object) key] = (object) null;
      }
      int num2 = -1;
      for (int index = 0; index < 12; ++index)
      {
        ++num2;
        WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "IndexB" + num2.ToString("00"), false);
        TheList[(object) key] = (object) null;
      }
      for (int index1 = 0; index1 < numArray.Length; ++index1)
      {
        string str;
        switch (index1)
        {
          case 0:
            str = "A";
            break;
          case 1:
            str = "B";
            break;
          default:
            this.LastErrorString = "Wrong Index!";
            return false;
        }
        int num3 = -1;
        for (int index2 = 0; index2 < numArray[index1].Length; ++index2)
        {
          ++num3;
          WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "Index" + str + num3.ToString("00"), false);
          TheList[(object) key] = (object) numArray[index1][index2];
        }
      }
      TheList[(object) WaveFlowDevice.ParameterNames.LoggerDate] = (object) dateTime;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodUnit] = (object) measurePeriod.Unit;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodCoefficient] = (object) measurePeriod.Coefficient;
      TheList[(object) WaveFlowDevice.ParameterNames.NbCounters] = (object) operationMode.NbCounters;
      TheList[(object) WaveFlowDevice.ParameterNames.LoggingMode] = (object) operationMode.LoggingMode;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutDetect] = (object) operationMode.WireCutDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDetect] = (object) operationMode.LowLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDetect] = (object) operationMode.HighLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedDetect] = (object) operationMode.ReedDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionMethod] = (object) operationMode.BackflowDetection;
      TheList[(object) WaveFlowDevice.ParameterNames.BatteryLife] = (object) status.BatteryLife;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutA] = (object) status.WireCutA;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutB] = (object) status.WireCutB;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeak] = (object) status.LowLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeak] = (object) status.HighLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultAORWireCutC] = (object) status.ReedFaultAORWireCutC;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultBORWireCutD] = (object) status.ReedFaultBORWireCutD;
      TheList[(object) WaveFlowDevice.ParameterNames.ReverseLeak] = (object) status.ReverseLeak;
      return true;
    }

    private bool WF_GetExtendedDatalog(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.OperationMode operationMode;
      WaveFlow.Status status;
      DateTime dateTime;
      int[] numArray1;
      int[] numArray2;
      WaveBase.MeasurePeriod measurePeriod;
      WaveCardRequest.Errors extendedDatalog = this.MyBus.MyWavePort.MyWaveFlow.GetExtendedDatalog(SerialNumber, this.GetConvertedRepeaters(), ref operationMode, ref status, ref dateTime, ref numArray1, ref numArray2, ref measurePeriod);
      if (extendedDatalog > 0)
      {
        this.LastErrorString = extendedDatalog.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      int num1 = -1;
      for (int index = 0; index < 12; ++index)
      {
        ++num1;
        WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "IndexC" + num1.ToString("00"), false);
        if (index < numArray1.Length)
          TheList[(object) key] = (object) numArray1[index];
        else
          TheList[(object) key] = (object) null;
      }
      int num2 = -1;
      for (int index = 0; index < 12; ++index)
      {
        ++num2;
        WaveFlowDevice.ParameterNames key = (WaveFlowDevice.ParameterNames) Enum.Parse(typeof (WaveFlowDevice.ParameterNames), "IndexD" + num2.ToString("00"), false);
        if (index < numArray2.Length)
          TheList[(object) key] = (object) numArray2[index];
        else
          TheList[(object) key] = (object) null;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.LoggerDate] = (object) dateTime;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodUnit] = (object) measurePeriod.Unit;
      TheList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodCoefficient] = (object) measurePeriod.Coefficient;
      TheList[(object) WaveFlowDevice.ParameterNames.NbCounters] = (object) operationMode.NbCounters;
      TheList[(object) WaveFlowDevice.ParameterNames.LoggingMode] = (object) operationMode.LoggingMode;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutDetect] = (object) operationMode.WireCutDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDetect] = (object) operationMode.LowLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDetect] = (object) operationMode.HighLeakDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedDetect] = (object) operationMode.ReedDetect;
      TheList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionMethod] = (object) operationMode.BackflowDetection;
      TheList[(object) WaveFlowDevice.ParameterNames.BatteryLife] = (object) status.BatteryLife;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutA] = (object) status.WireCutA;
      TheList[(object) WaveFlowDevice.ParameterNames.WireCutB] = (object) status.WireCutB;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeak] = (object) status.LowLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeak] = (object) status.HighLeak;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultAORWireCutC] = (object) status.ReedFaultAORWireCutC;
      TheList[(object) WaveFlowDevice.ParameterNames.ReedFaultBORWireCutD] = (object) status.ReedFaultBORWireCutD;
      TheList[(object) WaveFlowDevice.ParameterNames.ReverseLeak] = (object) status.ReverseLeak;
      return true;
    }

    private bool WF_GetLowLeak(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.LeakSettings[] leakSettingsArray;
      byte num;
      WaveCardRequest.Errors lowLeak = this.MyBus.MyWavePort.MyWaveFlow.GetLowLeak(SerialNumber, this.GetConvertedRepeaters(), ref leakSettingsArray, ref num);
      if (lowLeak > 0)
      {
        this.LastErrorString = lowLeak.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdA] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationA] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdB] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationB] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdC] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationC] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdD] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationD] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.TimeBetweenMeasures] = (object) null;
      for (int index = 0; index < leakSettingsArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdA] = (object) leakSettingsArray[index].Threshold;
            TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationA] = (object) leakSettingsArray[index].Duration;
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdB] = (object) leakSettingsArray[index].Threshold;
            TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationB] = (object) leakSettingsArray[index].Duration;
            break;
          case 2:
            TheList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdC] = (object) leakSettingsArray[index].Threshold;
            TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationC] = (object) leakSettingsArray[index].Duration;
            break;
          case 3:
            TheList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdD] = (object) leakSettingsArray[index].Threshold;
            TheList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationD] = (object) leakSettingsArray[index].Duration;
            break;
          default:
            this.LastErrorString = "Wrong Index!";
            return false;
        }
      }
      TheList[(object) WaveFlowDevice.ParameterNames.TimeBetweenMeasures] = (object) num;
      return true;
    }

    private bool WF_GetHighLeak(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.LeakSettings[] leakSettingsArray;
      byte num;
      WaveCardRequest.Errors highLeak = this.MyBus.MyWavePort.MyWaveFlow.GetHighLeak(SerialNumber, this.GetConvertedRepeaters(), ref leakSettingsArray, ref num);
      if (highLeak > 0)
      {
        this.LastErrorString = highLeak.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdA] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationA] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdB] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationB] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdC] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationC] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdD] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationD] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.TimeBetweenMeasures] = (object) null;
      for (int index = 0; index < leakSettingsArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdA] = (object) leakSettingsArray[index].Threshold;
            TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationA] = (object) leakSettingsArray[index].Duration;
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdB] = (object) leakSettingsArray[index].Threshold;
            TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationB] = (object) leakSettingsArray[index].Duration;
            break;
          case 2:
            TheList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdC] = (object) leakSettingsArray[index].Threshold;
            TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationC] = (object) leakSettingsArray[index].Duration;
            break;
          case 3:
            TheList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdD] = (object) leakSettingsArray[index].Threshold;
            TheList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationD] = (object) leakSettingsArray[index].Duration;
            break;
          default:
            this.LastErrorString = "Wrong Index!";
            return false;
        }
      }
      TheList[(object) WaveFlowDevice.ParameterNames.TimeBetweenMeasures] = (object) num;
      return true;
    }

    private bool WF_GetLeakHistory(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.Leak[] leakArray;
      WaveCardRequest.Errors leakHistory = this.MyBus.MyWavePort.MyWaveFlow.GetLeakHistory(SerialNumber, this.GetConvertedRepeaters(), ref leakArray);
      if (leakHistory > 0)
      {
        this.LastErrorString = leakHistory.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance2] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance2] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak2] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak2] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime2] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput2] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow2] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance4] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance4] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak4] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak4] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime4] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput4] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow4] = (object) null;
      for (int index = 0; index < leakArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance0] = (object) leakArray[0].Appearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance0] = (object) leakArray[0].Disappearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak0] = (object) leakArray[0].HighLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak0] = (object) leakArray[0].LowLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime0] = (object) leakArray[0].DateTime;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput0] = (object) leakArray[0].Input;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow0] = (object) leakArray[0].Flow;
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance1] = (object) leakArray[1].Appearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance1] = (object) leakArray[1].Disappearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak1] = (object) leakArray[1].HighLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak1] = (object) leakArray[1].LowLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime1] = (object) leakArray[1].DateTime;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput1] = (object) leakArray[1].Input;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow1] = (object) leakArray[1].Flow;
            break;
          case 2:
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance2] = (object) leakArray[2].Appearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance2] = (object) leakArray[2].Disappearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak2] = (object) leakArray[2].HighLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak2] = (object) leakArray[2].LowLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime2] = (object) leakArray[2].DateTime;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput2] = (object) leakArray[2].Input;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow2] = (object) leakArray[2].Flow;
            break;
          case 3:
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance3] = (object) leakArray[3].Appearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance3] = (object) leakArray[3].Disappearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak3] = (object) leakArray[3].HighLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak3] = (object) leakArray[3].LowLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime3] = (object) leakArray[3].DateTime;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput3] = (object) leakArray[3].Input;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow3] = (object) leakArray[3].Flow;
            break;
          case 4:
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryAppearance4] = (object) leakArray[4].Appearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDisappearance4] = (object) leakArray[4].Disappearance;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryHighLeak4] = (object) leakArray[4].HighLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryLowLeak4] = (object) leakArray[4].LowLeak;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryDateTime4] = (object) leakArray[4].DateTime;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryInput4] = (object) leakArray[4].Input;
            TheList[(object) WaveFlowDevice.ParameterNames.LeakHistoryFlow4] = (object) leakArray[4].Flow;
            break;
        }
      }
      return true;
    }

    private bool WF_GetBackFlow(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.LeakSettings[] leakSettingsArray;
      WaveFlow.OperationMode.BackflowDetectionMethod backflowDetectionMethod;
      WaveCardRequest.Errors backFlow = this.MyBus.MyWavePort.MyWaveFlow.GetBackFlow(SerialNumber, this.GetConvertedRepeaters(), ref leakSettingsArray, ref backflowDetectionMethod);
      if (backFlow > 0)
      {
        this.LastErrorString = backFlow.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      for (int index = 0; index < leakSettingsArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowDurationA] = (object) leakSettingsArray[index].Duration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowThresholdA] = (object) leakSettingsArray[index].Threshold;
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowDurationB] = (object) leakSettingsArray[index].Duration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowThresholdB] = (object) leakSettingsArray[index].Threshold;
            break;
        }
        TheList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionMethod] = (object) backflowDetectionMethod;
      }
      return true;
    }

    private bool WF_GetSpecialBackFlow(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.LeakSettings[] leakSettingsArray;
      ushort[] numArray;
      WaveCardRequest.Errors specialBackFlow = this.MyBus.MyWavePort.MyWaveFlow.GetSpecialBackFlow(SerialNumber, this.GetConvertedRepeaters(), ref leakSettingsArray, ref numArray);
      if (specialBackFlow > 0)
      {
        this.LastErrorString = specialBackFlow.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      for (int index = 0; index < leakSettingsArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.SpecialBackFlowDurationA] = (object) leakSettingsArray[index].Duration;
            TheList[(object) WaveFlowDevice.ParameterNames.SpecialBackFlowThresholdA] = (object) leakSettingsArray[index].Threshold;
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.SpecialBackFlowDurationB] = (object) leakSettingsArray[index].Duration;
            TheList[(object) WaveFlowDevice.ParameterNames.SpecialBackFlowThresholdB] = (object) leakSettingsArray[index].Threshold;
            break;
        }
      }
      for (int index = 0; index < numArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.MonthlyFlagsOnReverseFlowA] = (object) numArray[index];
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.MonthlyFlagsOnReverseFlowB] = (object) numArray[index];
            break;
        }
      }
      return true;
    }

    private bool WF_GetBackflowHistory(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.BackFlow[] backFlowArray;
      WaveCardRequest.Errors backFlowHistory = this.MyBus.MyWavePort.MyWaveFlow.GetBackFlowHistory(SerialNumber, this.GetConvertedRepeaters(), ref backFlowArray);
      if (backFlowHistory > 0)
      {
        this.LastErrorString = backFlowHistory.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryBackFlowPresenceDuration0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTime0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTimeEnded0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDetectionDuration0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryFlow0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryInput0] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryBackFlowPresenceDuration1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTime1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTimeEnded1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDetectionDuration1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryFlow1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryInput1] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryBackFlowPresenceDuration3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTime3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTimeEnded3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDetectionDuration3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryFlow3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryInput3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryBackFlowPresenceDuration3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTime3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTimeEnded3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDetectionDuration3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryFlow3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryInput3] = (object) null;
      for (int index = 0; index < backFlowArray.Length; ++index)
      {
        switch (index)
        {
          case 0:
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryBackFlowPresenceDuration0] = (object) backFlowArray[0].BackFlowPresenceDuration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTime0] = (object) backFlowArray[0].DateTime;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTimeEnded0] = (object) backFlowArray[0].DateTimeEnded;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDetectionDuration0] = (object) backFlowArray[0].DetectionDuration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryFlow0] = (object) backFlowArray[0].Flow;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryInput0] = (object) backFlowArray[0].Input;
            break;
          case 1:
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryBackFlowPresenceDuration1] = (object) backFlowArray[1].BackFlowPresenceDuration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTime1] = (object) backFlowArray[1].DateTime;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTimeEnded1] = (object) backFlowArray[1].DateTimeEnded;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDetectionDuration1] = (object) backFlowArray[1].DetectionDuration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryFlow1] = (object) backFlowArray[1].Flow;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryInput1] = (object) backFlowArray[1].Input;
            break;
          case 2:
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryBackFlowPresenceDuration2] = (object) backFlowArray[2].BackFlowPresenceDuration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTime2] = (object) backFlowArray[2].DateTime;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTimeEnded2] = (object) backFlowArray[2].DateTimeEnded;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDetectionDuration2] = (object) backFlowArray[2].DetectionDuration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryFlow2] = (object) backFlowArray[2].Flow;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryInput2] = (object) backFlowArray[2].Input;
            break;
          case 3:
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryBackFlowPresenceDuration3] = (object) backFlowArray[3].BackFlowPresenceDuration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTime3] = (object) backFlowArray[3].DateTime;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDateTimeEnded3] = (object) backFlowArray[3].DateTimeEnded;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryDetectionDuration3] = (object) backFlowArray[3].DetectionDuration;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryFlow3] = (object) backFlowArray[3].Flow;
            TheList[(object) WaveFlowDevice.ParameterNames.BackFlowHistoryInput3] = (object) backFlowArray[3].Input;
            break;
        }
      }
      return true;
    }

    private bool WF_GetAlarmConfiguration(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.AlarmConfiguration alarmConfiguration1;
      string str;
      string[] strArray;
      WaveCardRequest.Errors alarmConfiguration2 = this.MyBus.MyWavePort.MyWaveFlow.GetAlarmConfiguration(SerialNumber, this.GetConvertedRepeaters(), ref alarmConfiguration1, ref str, ref strArray);
      if (alarmConfiguration2 > 0)
      {
        this.LastErrorString = alarmConfiguration2.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.AlarmWireCutAndReedFault] = (object) ((alarmConfiguration1 & 1) == 1);
      TheList[(object) WaveFlowDevice.ParameterNames.AlarmBatteryLife] = (object) ((alarmConfiguration1 & 2) == 2);
      TheList[(object) WaveFlowDevice.ParameterNames.AlarmLowLeak] = (object) ((alarmConfiguration1 & 4) == 4);
      TheList[(object) WaveFlowDevice.ParameterNames.AlarmHighLeak] = (object) ((alarmConfiguration1 & 8) == 8);
      TheList[(object) WaveFlowDevice.ParameterNames.AlarmReverseLeak] = (object) ((alarmConfiguration1 & 16) == 16);
      if (strArray.Length != 0)
        TheList[(object) WaveFlowDevice.ParameterNames.AlarmRouter1] = (object) strArray[0];
      else
        TheList[(object) WaveFlowDevice.ParameterNames.AlarmRouter1] = (object) null;
      if (strArray.Length > 2)
        TheList[(object) WaveFlowDevice.ParameterNames.AlarmRouter2] = (object) strArray[1];
      else
        TheList[(object) WaveFlowDevice.ParameterNames.AlarmRouter2] = (object) null;
      if (strArray.Length > 2)
        TheList[(object) WaveFlowDevice.ParameterNames.AlarmRouter3] = (object) strArray[2];
      else
        TheList[(object) WaveFlowDevice.ParameterNames.AlarmRouter3] = (object) null;
      TheList[(object) WaveFlowDevice.ParameterNames.AlarmDestination] = (object) str;
      return true;
    }

    private bool WF_GetFactoryConfiguration(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.FactoryConfiguration factoryConfiguration1;
      WaveCardRequest.Errors factoryConfiguration2 = this.MyBus.MyWavePort.MyWaveFlow.GetFactoryConfiguration(SerialNumber, this.GetConvertedRepeaters(), ref factoryConfiguration1);
      if (factoryConfiguration2 > 0)
      {
        this.LastErrorString = factoryConfiguration2.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionType] = (object) factoryConfiguration1.BackFlowDetectionType;
      TheList[(object) WaveFlowDevice.ParameterNames.IsFourInputs] = (object) factoryConfiguration1.IsFourInputs;
      TheList[(object) WaveFlowDevice.ParameterNames.SensorType] = (object) factoryConfiguration1.SensorType;
      TheList[(object) WaveFlowDevice.ParameterNames.Valve] = (object) factoryConfiguration1.Valve;
      return true;
    }

    private bool WF_GetSolenoidState(string SerialNumber, ref SortedList TheList)
    {
      TheList.Clear();
      WaveFlow.SolenoidState solenoidState1;
      WaveCardRequest.Errors solenoidState2 = this.MyBus.MyWavePort.MyWaveFlow.GetSolenoidState(SerialNumber, this.GetConvertedRepeaters(), ref solenoidState1);
      if (solenoidState2 > 0)
      {
        this.LastErrorString = solenoidState2.ToString();
        TheList[(object) WaveFlowDevice.ParameterNames.Error] = (object) this.LastErrorString;
        return false;
      }
      TheList[(object) WaveFlowDevice.ParameterNames.SolenoidState] = (object) solenoidState1;
      return true;
    }

    private bool WF_SetDate(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      try
      {
        DateTime dateTime = (DateTime) sortedList[(object) WaveFlowDevice.ParameterNames.Date];
        WaveCardRequest.Errors errors = ((WaveBase) this.MyBus.MyWavePort.MyWaveFlow).SetDate(SerialNumber, this.GetConvertedRepeaters(), dateTime);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetGroupNumber(string SerialNumber, object ParameterData)
    {
      try
      {
        byte num = (byte) ((SortedList) ParameterData)[(object) WaveFlowDevice.ParameterNames.GroupNumberForPolls];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetGroupNumber(SerialNumber, this.GetConvertedRepeaters(), num);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetOperationModes(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      WaveFlow.OperationMode operationMode = new WaveFlow.OperationMode((byte) 0);
      try
      {
        operationMode.NbCounters = (int) sortedList[(object) WaveFlowDevice.ParameterNames.NbCounters];
        operationMode.LoggingMode = (WaveFlow.OperationMode.DatalogMode) sortedList[(object) WaveFlowDevice.ParameterNames.LoggingMode];
        operationMode.WireCutDetect = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WireCutDetect];
        operationMode.LowLeakDetect = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakDetect];
        operationMode.HighLeakDetect = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakDetect];
        operationMode.ReedDetect = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.ReedDetect];
        operationMode.BackflowDetection = (WaveFlow.OperationMode.BackflowDetectionMethod) sortedList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionMethod];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetOperationMode(SerialNumber, this.GetConvertedRepeaters(), operationMode);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetStatus(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      WaveFlow.Status status = new WaveFlow.Status((byte) 0);
      try
      {
        status.BatteryLife = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.BatteryLife];
        status.HighLeak = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeak];
        status.LowLeak = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeak];
        status.ReedFaultAORWireCutC = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.ReedFaultAORWireCutC];
        status.ReedFaultBORWireCutD = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.ReedFaultBORWireCutD];
        status.ReverseLeak = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.ReverseLeak];
        status.WireCutA = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WireCutA];
        status.WireCutB = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WireCutB];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetStatus(SerialNumber, this.GetConvertedRepeaters(), status);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetPulseWeights(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      int length = 0;
      try
      {
        if (sortedList[(object) WaveFlowDevice.ParameterNames.PulseValueA] != null && sortedList[(object) WaveFlowDevice.ParameterNames.PulseUnitA] != null)
          ++length;
        if (sortedList[(object) WaveFlowDevice.ParameterNames.PulseValueB] != null && sortedList[(object) WaveFlowDevice.ParameterNames.PulseUnitB] != null)
          ++length;
        if (sortedList[(object) WaveFlowDevice.ParameterNames.PulseValueC] != null && sortedList[(object) WaveFlowDevice.ParameterNames.PulseUnitC] != null)
          ++length;
        if (sortedList[(object) WaveFlowDevice.ParameterNames.PulseValueD] != null && sortedList[(object) WaveFlowDevice.ParameterNames.PulseUnitD] != null)
          ++length;
        WaveFlow.PulseWeight[] pulseWeightArray = new WaveFlow.PulseWeight[length];
        if (length > 0)
          pulseWeightArray[0] = new WaveFlow.PulseWeight((byte) sortedList[(object) WaveFlowDevice.ParameterNames.PulseValueA], (WaveFlow.PulseWeight.PulseUnit) sortedList[(object) WaveFlowDevice.ParameterNames.PulseUnitA]);
        if (length > 1)
          pulseWeightArray[1] = new WaveFlow.PulseWeight((byte) sortedList[(object) WaveFlowDevice.ParameterNames.PulseValueB], (WaveFlow.PulseWeight.PulseUnit) sortedList[(object) WaveFlowDevice.ParameterNames.PulseUnitB]);
        if (length > 2)
          pulseWeightArray[2] = new WaveFlow.PulseWeight((byte) sortedList[(object) WaveFlowDevice.ParameterNames.PulseValueC], (WaveFlow.PulseWeight.PulseUnit) sortedList[(object) WaveFlowDevice.ParameterNames.PulseUnitC]);
        if (length > 3)
          pulseWeightArray[3] = new WaveFlow.PulseWeight((byte) sortedList[(object) WaveFlowDevice.ParameterNames.PulseValueD], (WaveFlow.PulseWeight.PulseUnit) sortedList[(object) WaveFlowDevice.ParameterNames.PulseUnitD]);
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetPulseWeights(SerialNumber, this.GetConvertedRepeaters(), pulseWeightArray);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetIndices(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      int[] numArray = new int[4];
      bool[] flagArray = new bool[4];
      try
      {
        if (sortedList[(object) WaveFlowDevice.ParameterNames.IndexA] == null)
        {
          numArray[0] = 0;
          flagArray[0] = false;
        }
        else
        {
          numArray[0] = (int) sortedList[(object) WaveFlowDevice.ParameterNames.IndexA];
          flagArray[0] = true;
        }
        if (sortedList[(object) WaveFlowDevice.ParameterNames.IndexB] == null)
        {
          numArray[1] = 0;
          flagArray[1] = false;
        }
        else
        {
          numArray[1] = (int) sortedList[(object) WaveFlowDevice.ParameterNames.IndexB];
          flagArray[1] = true;
        }
        if (sortedList[(object) WaveFlowDevice.ParameterNames.IndexC] == null)
        {
          numArray[2] = 0;
          flagArray[2] = false;
        }
        else
        {
          numArray[2] = (int) sortedList[(object) WaveFlowDevice.ParameterNames.IndexC];
          flagArray[2] = true;
        }
        if (sortedList[(object) WaveFlowDevice.ParameterNames.IndexD] == null)
        {
          numArray[3] = 0;
          flagArray[3] = false;
        }
        else
        {
          numArray[3] = (int) sortedList[(object) WaveFlowDevice.ParameterNames.IndexD];
          flagArray[3] = true;
        }
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetIndex(SerialNumber, this.GetConvertedRepeaters(), numArray, flagArray);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetWakeUpMode(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      try
      {
        WakeUpMode wakeUpMode = (WakeUpMode) sortedList[(object) WaveFlowDevice.ParameterNames.WakeUpMode];
        byte num1 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.DefaultWakeupDuration];
        byte num2 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.HourFirstTimeFrameStarts];
        byte num3 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.FirstTimeFrameWakeupDuration];
        byte num4 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.HourSecondTimeFrameStarts];
        byte num5 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.SecondTimeFrameWakeupDuration];
        bool flag1 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnMonday];
        bool flag2 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnTuesday];
        bool flag3 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnWednesday];
        bool flag4 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnThursday];
        bool flag5 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnFriday];
        bool flag6 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnSaturday];
        bool flag7 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.TimeFramesEnabledOnSunday];
        bool flag8 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnMonday];
        bool flag9 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnTuesday];
        bool flag10 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnWednesday];
        bool flag11 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnThursday];
        bool flag12 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnFriday];
        bool flag13 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnSaturday];
        bool flag14 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.WakeupDisabledOnSunday];
        DayOfWeek dayOfWeek1 = (DayOfWeek) 0;
        if (flag1)
          dayOfWeek1 = (DayOfWeek) (dayOfWeek1 | 1);
        if (flag2)
          dayOfWeek1 = (DayOfWeek) (dayOfWeek1 | 2);
        if (flag3)
          dayOfWeek1 = (DayOfWeek) (dayOfWeek1 | 4);
        if (flag4)
          dayOfWeek1 = (DayOfWeek) (dayOfWeek1 | 8);
        if (flag5)
          dayOfWeek1 = (DayOfWeek) (dayOfWeek1 | 16);
        if (flag6)
          dayOfWeek1 = (DayOfWeek) (dayOfWeek1 | 32);
        if (flag7)
          dayOfWeek1 = (DayOfWeek) (dayOfWeek1 | 64);
        DayOfWeek dayOfWeek2 = (DayOfWeek) 0;
        if (flag8)
          dayOfWeek2 = (DayOfWeek) (dayOfWeek2 | 1);
        if (flag9)
          dayOfWeek2 = (DayOfWeek) (dayOfWeek2 | 2);
        if (flag10)
          dayOfWeek2 = (DayOfWeek) (dayOfWeek2 | 4);
        if (flag11)
          dayOfWeek2 = (DayOfWeek) (dayOfWeek2 | 8);
        if (flag12)
          dayOfWeek2 = (DayOfWeek) (dayOfWeek2 | 16);
        if (flag13)
          dayOfWeek2 = (DayOfWeek) (dayOfWeek2 | 32);
        if (flag14)
          dayOfWeek2 = (DayOfWeek) (dayOfWeek2 | 64);
        WaveCardRequest.Errors errors = ((WaveBase) this.MyBus.MyWavePort.MyWaveFlow).SetWakeUpMode(SerialNumber, this.GetConvertedRepeaters(), wakeUpMode, num1, num2, num3, num4, num5, dayOfWeek1, dayOfWeek2);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetDatalogPeriod(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      bool[] flagArray = new bool[2];
      try
      {
        byte num = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.DatalogStart];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetDatalogPeriod(SerialNumber, this.GetConvertedRepeaters(), num, new WaveBase.MeasurePeriod((byte) 0)
        {
          Coefficient = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodCoefficient],
          Unit = (WaveBase.MeasurePeriod.Units) sortedList[(object) WaveFlowDevice.ParameterNames.DatalogMeasurePeriodUnit]
        });
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetWeeklyDatalog(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      try
      {
        byte num = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.TimeOfDatalogIf1PerMonthOrWeek];
        DayOfWeek dayOfWeek = (DayOfWeek) (byte) sortedList[(object) WaveFlowDevice.ParameterNames.DayOfWeekOrMonth];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetWeeklyDatalog(SerialNumber, this.GetConvertedRepeaters(), dayOfWeek, num);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetMonthlyDatalog(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      try
      {
        byte num1 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.TimeOfDatalogIf1PerMonthOrWeek];
        byte num2 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.DayOfWeekOrMonth];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetMonthlyDatalog(SerialNumber, this.GetConvertedRepeaters(), num2, num1);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetLowLeak(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      int length = 0;
      try
      {
        if (sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdA] != null)
          ++length;
        if (sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdB] != null)
          ++length;
        if (sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdC] != null)
          ++length;
        if (sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdD] != null)
          ++length;
        WaveFlow.LeakSettings[] leakSettingsArray = new WaveFlow.LeakSettings[length];
        for (int index = 0; index < length; ++index)
        {
          switch (index)
          {
            case 0:
              ushort num1 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdA];
              byte num2 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationA];
              leakSettingsArray[index] = new WaveFlow.LeakSettings(num1, num2);
              break;
            case 1:
              ushort num3 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdB];
              byte num4 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationB];
              leakSettingsArray[index] = new WaveFlow.LeakSettings(num3, num4);
              break;
            case 2:
              ushort num5 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdC];
              byte num6 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationC];
              leakSettingsArray[index] = new WaveFlow.LeakSettings(num5, num6);
              break;
            case 3:
              ushort num7 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakThresholdD];
              byte num8 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.LowLeakDurationD];
              leakSettingsArray[index] = new WaveFlow.LeakSettings(num7, num8);
              break;
          }
        }
        byte num = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.TimeBetweenMeasures];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetLowLeak(SerialNumber, this.GetConvertedRepeaters(), leakSettingsArray, num);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetHighLeak(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      int length = 0;
      try
      {
        if (sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdA] != null)
          ++length;
        if (sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdB] != null)
          ++length;
        if (sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdC] != null)
          ++length;
        if (sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdD] != null)
          ++length;
        WaveFlow.LeakSettings[] leakSettingsArray = new WaveFlow.LeakSettings[length];
        for (int index = 0; index < length; ++index)
        {
          switch (index)
          {
            case 0:
              ushort num1 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdA];
              byte num2 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationA];
              leakSettingsArray[index] = new WaveFlow.LeakSettings(num1, num2);
              break;
            case 1:
              ushort num3 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdB];
              byte num4 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationB];
              leakSettingsArray[index] = new WaveFlow.LeakSettings(num3, num4);
              break;
            case 2:
              ushort num5 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdC];
              byte num6 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationC];
              leakSettingsArray[index] = new WaveFlow.LeakSettings(num5, num6);
              break;
            case 3:
              ushort num7 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakThresholdD];
              byte num8 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.HighLeakDurationD];
              leakSettingsArray[index] = new WaveFlow.LeakSettings(num7, num8);
              break;
          }
        }
        byte num = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.TimeBetweenMeasures];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetHighLeak(SerialNumber, this.GetConvertedRepeaters(), leakSettingsArray, num);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetBackFlow(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      try
      {
        WaveFlow.LeakSettings[] leakSettingsArray = new WaveFlow.LeakSettings[2];
        ushort num1 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.BackFlowThresholdA];
        byte num2 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.BackFlowDurationA];
        leakSettingsArray[0] = new WaveFlow.LeakSettings(num1, num2);
        ushort num3 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.BackFlowThresholdB];
        byte num4 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.BackFlowDurationB];
        leakSettingsArray[1] = new WaveFlow.LeakSettings(num3, num4);
        WaveFlow.OperationMode.BackflowDetectionMethod backflowDetectionMethod = (WaveFlow.OperationMode.BackflowDetectionMethod) sortedList[(object) WaveFlowDevice.ParameterNames.BackflowDetectionMethod];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetBackFlow(SerialNumber, this.GetConvertedRepeaters(), leakSettingsArray, backflowDetectionMethod);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetSpecialBackFlow(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      try
      {
        WaveFlow.LeakSettings[] leakSettingsArray = new WaveFlow.LeakSettings[2];
        ushort[] numArray = new ushort[2];
        ushort num1 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.SpecialBackFlowThresholdA];
        byte num2 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.SpecialBackFlowDurationA];
        leakSettingsArray[0] = new WaveFlow.LeakSettings(num1, num2);
        ushort num3 = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.SpecialBackFlowThresholdB];
        byte num4 = (byte) sortedList[(object) WaveFlowDevice.ParameterNames.SpecialBackFlowDurationB];
        leakSettingsArray[1] = new WaveFlow.LeakSettings(num3, num4);
        numArray[0] = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.MonthlyFlagsOnReverseFlowA];
        numArray[1] = (ushort) sortedList[(object) WaveFlowDevice.ParameterNames.MonthlyFlagsOnReverseFlowB];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetSpecialBackFlow(SerialNumber, this.GetConvertedRepeaters(), leakSettingsArray, numArray);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetAlarmConfiguration(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      WaveFlow.Status status = new WaveFlow.Status((byte) 0);
      try
      {
        bool flag1 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.AlarmWireCutAndReedFault];
        bool flag2 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.AlarmBatteryLife];
        bool flag3 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.AlarmLowLeak];
        bool flag4 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.AlarmHighLeak];
        bool flag5 = (bool) sortedList[(object) WaveFlowDevice.ParameterNames.AlarmReverseLeak];
        WaveFlow.AlarmConfiguration alarmConfiguration = (WaveFlow.AlarmConfiguration) 0;
        if (flag1)
          alarmConfiguration = (WaveFlow.AlarmConfiguration) (alarmConfiguration | 1);
        if (flag2)
          alarmConfiguration = (WaveFlow.AlarmConfiguration) (alarmConfiguration | 2);
        if (flag3)
          alarmConfiguration = (WaveFlow.AlarmConfiguration) (alarmConfiguration | 4);
        if (flag4)
          alarmConfiguration = (WaveFlow.AlarmConfiguration) (alarmConfiguration | 8);
        if (flag5)
          alarmConfiguration = (WaveFlow.AlarmConfiguration) (alarmConfiguration | 16);
        string str1 = (string) sortedList[(object) WaveFlowDevice.ParameterNames.AlarmDestination];
        string str2 = ((string) sortedList[(object) WaveFlowDevice.ParameterNames.AlarmRouter1]).Trim();
        string str3 = ((string) sortedList[(object) WaveFlowDevice.ParameterNames.AlarmRouter2]).Trim();
        string str4 = ((string) sortedList[(object) WaveFlowDevice.ParameterNames.AlarmRouter3]).Trim();
        int length = 0;
        if (str2 != string.Empty)
        {
          ++length;
          if (str3 != string.Empty)
          {
            ++length;
            if (str4 != string.Empty)
              ++length;
          }
        }
        string[] strArray = new string[length];
        if (length > 0)
        {
          strArray[0] = str2;
          if (length > 1)
          {
            strArray[1] = str3;
            if (length > 2)
              strArray[2] = str4;
          }
        }
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetAlarmConfiguration(SerialNumber, this.GetConvertedRepeaters(), alarmConfiguration, str1, strArray);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_SetSolenoidState(string SerialNumber, object ParameterData)
    {
      SortedList sortedList = (SortedList) ParameterData;
      try
      {
        WaveFlow.SolenoidState solenoidState = (WaveFlow.SolenoidState) sortedList[(object) WaveFlowDevice.ParameterNames.SolenoidState];
        WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.SetSolenoidState(SerialNumber, this.GetConvertedRepeaters(), solenoidState);
        if (errors <= 0)
          return true;
        this.LastErrorString = errors.ToString();
        return false;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private bool WF_ResetDateForEndOfBatteryLifeDetection(string SerialNumber)
    {
      WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.ResetDateForEndOfBatteryLifeDetection(SerialNumber, this.GetConvertedRepeaters());
      if (errors <= 0)
        return true;
      this.LastErrorString = errors.ToString();
      return false;
    }

    private bool WF_ResetDateForReedFailure(string SerialNumber)
    {
      WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.ResetDateForReedFailure(SerialNumber, this.GetConvertedRepeaters());
      if (errors <= 0)
        return true;
      this.LastErrorString = errors.ToString();
      return false;
    }

    private bool WF_ResetDateForeWireCutDetection(string SerialNumber)
    {
      WaveCardRequest.Errors errors = this.MyBus.MyWavePort.MyWaveFlow.ResetDateForWireCutDetection(SerialNumber, this.GetConvertedRepeaters());
      if (errors <= 0)
        return true;
      this.LastErrorString = errors.ToString();
      return false;
    }

    private bool GetQMIndexString(
      int Index,
      WaveFlow.PulseWeight.PulseUnit Unit,
      byte Value,
      out string QmIndexString)
    {
      QmIndexString = string.Empty;
      try
      {
        double num = (double) Index * (double) Value * Math.Pow(10.0, (double) Unit) / 1000000.0;
        QmIndexString = num.ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat);
        return true;
      }
      catch (Exception ex)
      {
        this.LastErrorString = ex.ToString();
        return false;
      }
    }

    private string GetConvertedSN(string TheSerialNumber)
    {
      try
      {
        long num1 = long.Parse(TheSerialNumber.Substring(0, 5));
        long num2 = long.Parse(TheSerialNumber.Substring(5, 2));
        long num3 = long.Parse(TheSerialNumber.Substring(7, 8));
        return num1.ToString("x4") + num2.ToString("x2") + num3.ToString("x6");
      }
      catch
      {
        return string.Empty;
      }
    }

    public enum ParameterNames
    {
      Error = 0,
      RSSI = 1,
      Date = 2,
      BatteryLifeCounter = 3,
      EndOfBatteryLifeDetection = 4,
      NbCounters = 5,
      LoggingMode = 6,
      WireCutDetect = 7,
      HighLeakDetect = 8,
      LowLeakDetect = 9,
      ReedDetect = 10, // 0x0000000A
      BackflowDetectionMethod = 11, // 0x0000000B
      Firmware = 12, // 0x0000000C
      GroupNumberForPolls = 13, // 0x0000000D
      BatteryLife = 14, // 0x0000000E
      WireCutA = 15, // 0x0000000F
      WireCutB = 16, // 0x00000010
      LowLeak = 17, // 0x00000011
      HighLeak = 18, // 0x00000012
      ReedFaultAORWireCutC = 19, // 0x00000013
      ReedFaultBORWireCutD = 20, // 0x00000014
      ReverseLeak = 21, // 0x00000015
      PulseValueA = 22, // 0x00000016
      PulseValueB = 23, // 0x00000017
      PulseValueC = 24, // 0x00000018
      PulseValueD = 25, // 0x00000019
      PulseUnitA = 26, // 0x0000001A
      PulseUnitB = 27, // 0x0000001B
      PulseUnitC = 28, // 0x0000001C
      PulseUnitD = 29, // 0x0000001D
      ReedFaultADate = 30, // 0x0000001E
      ReedFaultBDate = 31, // 0x0000001F
      WireCutADate = 32, // 0x00000020
      WireCutBDate = 33, // 0x00000021
      WireCutCDate = 34, // 0x00000022
      WireCutDDate = 35, // 0x00000023
      IndexA = 44, // 0x0000002C
      IndexB = 45, // 0x0000002D
      IndexC = 46, // 0x0000002E
      IndexD = 47, // 0x0000002F
      IndexA00 = 48, // 0x00000030
      IndexA01 = 49, // 0x00000031
      IndexA02 = 50, // 0x00000032
      IndexA03 = 51, // 0x00000033
      IndexA04 = 52, // 0x00000034
      IndexA05 = 53, // 0x00000035
      IndexA06 = 54, // 0x00000036
      IndexA07 = 55, // 0x00000037
      IndexA08 = 56, // 0x00000038
      IndexA09 = 57, // 0x00000039
      IndexA10 = 58, // 0x0000003A
      IndexA11 = 59, // 0x0000003B
      IndexA12 = 60, // 0x0000003C
      IndexA13 = 61, // 0x0000003D
      IndexA14 = 62, // 0x0000003E
      IndexA15 = 63, // 0x0000003F
      IndexA16 = 64, // 0x00000040
      IndexA17 = 65, // 0x00000041
      IndexA18 = 66, // 0x00000042
      IndexA19 = 67, // 0x00000043
      IndexA20 = 68, // 0x00000044
      IndexA21 = 69, // 0x00000045
      IndexA22 = 70, // 0x00000046
      IndexA23 = 71, // 0x00000047
      IndexB00 = 72, // 0x00000048
      IndexB01 = 73, // 0x00000049
      IndexB02 = 74, // 0x0000004A
      IndexB03 = 75, // 0x0000004B
      IndexB04 = 76, // 0x0000004C
      IndexB05 = 77, // 0x0000004D
      IndexB06 = 78, // 0x0000004E
      IndexB07 = 79, // 0x0000004F
      IndexB08 = 80, // 0x00000050
      IndexB09 = 81, // 0x00000051
      IndexB10 = 82, // 0x00000052
      IndexB11 = 83, // 0x00000053
      IndexC00 = 84, // 0x00000054
      IndexC01 = 85, // 0x00000055
      IndexC02 = 86, // 0x00000056
      IndexC03 = 87, // 0x00000057
      IndexC04 = 88, // 0x00000058
      IndexC05 = 89, // 0x00000059
      IndexC06 = 90, // 0x0000005A
      IndexC07 = 91, // 0x0000005B
      IndexC08 = 92, // 0x0000005C
      IndexC09 = 93, // 0x0000005D
      IndexC10 = 94, // 0x0000005E
      IndexC11 = 95, // 0x0000005F
      IndexD00 = 96, // 0x00000060
      IndexD01 = 97, // 0x00000061
      IndexD02 = 98, // 0x00000062
      IndexD03 = 99, // 0x00000063
      IndexD04 = 100, // 0x00000064
      IndexD05 = 101, // 0x00000065
      IndexD06 = 102, // 0x00000066
      IndexD07 = 103, // 0x00000067
      IndexD08 = 104, // 0x00000068
      IndexD09 = 105, // 0x00000069
      IndexD10 = 106, // 0x0000006A
      IndexD11 = 107, // 0x0000006B
      LoggerDate = 108, // 0x0000006C
      WakeUpMode = 109, // 0x0000006D
      DefaultWakeupDuration = 110, // 0x0000006E
      HourFirstTimeFrameStarts = 111, // 0x0000006F
      FirstTimeFrameWakeupDuration = 112, // 0x00000070
      HourSecondTimeFrameStarts = 113, // 0x00000071
      SecondTimeFrameWakeupDuration = 114, // 0x00000072
      TimeFramesEnabledOnMonday = 115, // 0x00000073
      TimeFramesEnabledOnTuesday = 116, // 0x00000074
      TimeFramesEnabledOnWednesday = 117, // 0x00000075
      TimeFramesEnabledOnThursday = 118, // 0x00000076
      TimeFramesEnabledOnFriday = 119, // 0x00000077
      TimeFramesEnabledOnSaturday = 120, // 0x00000078
      TimeFramesEnabledOnSunday = 121, // 0x00000079
      WakeupDisabledOnMonday = 122, // 0x0000007A
      WakeupDisabledOnTuesday = 123, // 0x0000007B
      WakeupDisabledOnWednesday = 124, // 0x0000007C
      WakeupDisabledOnThursday = 125, // 0x0000007D
      WakeupDisabledOnFriday = 126, // 0x0000007E
      WakeupDisabledOnSaturday = 127, // 0x0000007F
      WakeupDisabledOnSunday = 128, // 0x00000080
      DatalogStart = 129, // 0x00000081
      DatalogMeasurePeriodUnit = 130, // 0x00000082
      DatalogMeasurePeriodCoefficient = 131, // 0x00000083
      TimeOfDatalogIf1PerMonthOrWeek = 132, // 0x00000084
      DayOfWeekOrMonth = 133, // 0x00000085
      LowLeakThresholdA = 134, // 0x00000086
      LowLeakDurationA = 135, // 0x00000087
      LowLeakThresholdB = 136, // 0x00000088
      LowLeakDurationB = 137, // 0x00000089
      LowLeakThresholdC = 138, // 0x0000008A
      LowLeakDurationC = 139, // 0x0000008B
      LowLeakThresholdD = 140, // 0x0000008C
      LowLeakDurationD = 141, // 0x0000008D
      HighLeakThresholdA = 142, // 0x0000008E
      HighLeakDurationA = 143, // 0x0000008F
      HighLeakThresholdB = 144, // 0x00000090
      HighLeakDurationB = 145, // 0x00000091
      HighLeakThresholdC = 146, // 0x00000092
      HighLeakDurationC = 147, // 0x00000093
      HighLeakThresholdD = 148, // 0x00000094
      HighLeakDurationD = 149, // 0x00000095
      TimeBetweenMeasures = 150, // 0x00000096
      BackFlowDurationA = 151, // 0x00000097
      BackFlowThresholdA = 152, // 0x00000098
      BackFlowDurationB = 153, // 0x00000099
      BackFlowThresholdB = 154, // 0x0000009A
      SpecialBackFlowDurationA = 155, // 0x0000009B
      SpecialBackFlowThresholdA = 156, // 0x0000009C
      SpecialBackFlowDurationB = 157, // 0x0000009D
      SpecialBackFlowThresholdB = 158, // 0x0000009E
      MonthlyFlagsOnReverseFlowA = 159, // 0x0000009F
      MonthlyFlagsOnReverseFlowB = 160, // 0x000000A0
      AlarmWireCutAndReedFault = 161, // 0x000000A1
      AlarmBatteryLife = 162, // 0x000000A2
      AlarmLowLeak = 163, // 0x000000A3
      AlarmHighLeak = 164, // 0x000000A4
      AlarmReverseLeak = 165, // 0x000000A5
      AlarmDestination = 166, // 0x000000A6
      AlarmRouter1 = 167, // 0x000000A7
      AlarmRouter2 = 168, // 0x000000A8
      AlarmRouter3 = 169, // 0x000000A9
      IndexLMEA = 170, // 0x000000AA
      IndexLMEB = 171, // 0x000000AB
      IndexLMEC = 172, // 0x000000AC
      IndexLMED = 173, // 0x000000AD
      LeakHistoryAppearance0 = 174, // 0x000000AE
      LeakHistoryDisappearance0 = 175, // 0x000000AF
      LeakHistoryHighLeak0 = 176, // 0x000000B0
      LeakHistoryLowLeak0 = 177, // 0x000000B1
      LeakHistoryDateTime0 = 178, // 0x000000B2
      LeakHistoryInput0 = 179, // 0x000000B3
      LeakHistoryFlow0 = 180, // 0x000000B4
      LeakHistoryAppearance1 = 181, // 0x000000B5
      LeakHistoryDisappearance1 = 182, // 0x000000B6
      LeakHistoryHighLeak1 = 183, // 0x000000B7
      LeakHistoryLowLeak1 = 184, // 0x000000B8
      LeakHistoryDateTime1 = 185, // 0x000000B9
      LeakHistoryInput1 = 186, // 0x000000BA
      LeakHistoryFlow1 = 187, // 0x000000BB
      LeakHistoryAppearance2 = 188, // 0x000000BC
      LeakHistoryDisappearance2 = 189, // 0x000000BD
      LeakHistoryHighLeak2 = 190, // 0x000000BE
      LeakHistoryLowLeak2 = 191, // 0x000000BF
      LeakHistoryDateTime2 = 192, // 0x000000C0
      LeakHistoryInput2 = 193, // 0x000000C1
      LeakHistoryFlow2 = 194, // 0x000000C2
      LeakHistoryAppearance3 = 195, // 0x000000C3
      LeakHistoryDisappearance3 = 196, // 0x000000C4
      LeakHistoryHighLeak3 = 197, // 0x000000C5
      LeakHistoryLowLeak3 = 198, // 0x000000C6
      LeakHistoryDateTime3 = 199, // 0x000000C7
      LeakHistoryInput3 = 200, // 0x000000C8
      LeakHistoryFlow3 = 201, // 0x000000C9
      LeakHistoryAppearance4 = 202, // 0x000000CA
      LeakHistoryDisappearance4 = 203, // 0x000000CB
      LeakHistoryHighLeak4 = 204, // 0x000000CC
      LeakHistoryLowLeak4 = 205, // 0x000000CD
      LeakHistoryDateTime4 = 206, // 0x000000CE
      LeakHistoryInput4 = 207, // 0x000000CF
      LeakHistoryFlow4 = 208, // 0x000000D0
      BackFlowHistoryBackFlowPresenceDuration0 = 209, // 0x000000D1
      BackFlowHistoryDateTime0 = 210, // 0x000000D2
      BackFlowHistoryDateTimeEnded0 = 211, // 0x000000D3
      BackFlowHistoryDetectionDuration0 = 212, // 0x000000D4
      BackFlowHistoryFlow0 = 213, // 0x000000D5
      BackFlowHistoryInput0 = 214, // 0x000000D6
      BackFlowHistoryBackFlowPresenceDuration1 = 215, // 0x000000D7
      BackFlowHistoryDateTime1 = 216, // 0x000000D8
      BackFlowHistoryDateTimeEnded1 = 217, // 0x000000D9
      BackFlowHistoryDetectionDuration1 = 218, // 0x000000DA
      BackFlowHistoryFlow1 = 219, // 0x000000DB
      BackFlowHistoryInput1 = 220, // 0x000000DC
      BackFlowHistoryBackFlowPresenceDuration2 = 221, // 0x000000DD
      BackFlowHistoryDateTime2 = 222, // 0x000000DE
      BackFlowHistoryDateTimeEnded2 = 223, // 0x000000DF
      BackFlowHistoryDetectionDuration2 = 224, // 0x000000E0
      BackFlowHistoryFlow2 = 225, // 0x000000E1
      BackFlowHistoryInput2 = 226, // 0x000000E2
      BackFlowHistoryBackFlowPresenceDuration3 = 227, // 0x000000E3
      BackFlowHistoryDateTime3 = 228, // 0x000000E4
      BackFlowHistoryDateTimeEnded3 = 229, // 0x000000E5
      BackFlowHistoryDetectionDuration3 = 230, // 0x000000E6
      BackFlowHistoryFlow3 = 231, // 0x000000E7
      BackFlowHistoryInput3 = 232, // 0x000000E8
      IsFourInputs = 233, // 0x000000E9
      SensorType = 234, // 0x000000EA
      BackflowDetectionType = 235, // 0x000000EB
      Valve = 236, // 0x000000EC
      SolenoidState = 237, // 0x000000ED
    }
  }
}


--- WaveFlowList.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.WaveFlowList
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using System.Collections;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  internal class WaveFlowList : DeviceList
  {
    public WaveFlowList(DeviceCollectorFunctions BusRef)
    {
      this.MyBus = BusRef;
      this.bus = new ArrayList();
      this.FaultyDevices = new List<MBusDevice>();
    }

    internal override bool DeleteSelectedDevice()
    {
      if (this.SelectedDevice == null)
        return false;
      int index;
      for (index = 0; index < this.bus.Count; ++index)
      {
        if (this.bus[index] == this.SelectedDevice)
        {
          this.bus.RemoveAt(index);
          break;
        }
      }
      if (this.bus.Count > 0)
      {
        if (index < this.bus.Count)
          this.SelectedDevice = (BusDevice) this.bus[index];
        else
          this.SelectedDevice = (BusDevice) this.bus[this.bus.Count - 1];
      }
      else
        this.SelectedDevice = (BusDevice) null;
      return false;
    }

    internal override bool AddDevice(DeviceTypes NewType, bool select)
    {
      if (NewType != DeviceTypes.WaveFlowDevice)
        return false;
      this.bus.Add((object) new WaveFlowDevice(this.MyBus));
      if (select)
        this.SelectedDevice = (BusDevice) this.bus[this.bus.Count - 1];
      return true;
    }

    internal override bool AddDevice(object NewDevice, bool select)
    {
      WaveFlowDevice waveFlowDevice = NewDevice as WaveFlowDevice;
      for (int index = 0; index < this.bus.Count; ++index)
      {
        if (waveFlowDevice.Info.MeterNumber == ((BusDevice) this.bus[index]).Info.MeterNumber)
          return true;
      }
      this.bus.Add((object) waveFlowDevice);
      this.WorkBusAddresses();
      if (select)
        this.SelectedDevice = (BusDevice) this.bus[this.bus.Count - 1];
      return true;
    }

    internal override bool SearchSingleDeviceBySerialNumber(string SearchSerialNumber)
    {
      WaveFlowDevice NewDevice = new WaveFlowDevice(this.MyBus);
      NewDevice.Info.MeterNumber = SearchSerialNumber;
      if (!NewDevice.ReadParameters())
        return false;
      for (int index = 0; index < this.bus.Count; ++index)
      {
        if (((BusDevice) this.bus[index]).Info != null && (int) ((BusDevice) this.bus[index]).Info.ManufacturerCode == (int) NewDevice.Info.ManufacturerCode && (int) ((BusDevice) this.bus[index]).Info.Medium == (int) NewDevice.Info.Medium && ((BusDevice) this.bus[index]).Info.MeterNumber == NewDevice.Info.MeterNumber)
          return true;
      }
      this.AddDevice((object) NewDevice, true);
      return true;
    }
  }
}


--- WavePortConnector.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.WavePortConnector
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

using AsyncCom;
using NLog;
using NS.Plugin.Wavenis;
using StartupLib;
using System;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Reflection;
using ZR_ClassLibrary;

#nullable disable
namespace DeviceCollector
{
  public class WavePortConnector
  {
    private static string InternalWavePortFirmwareVersionString;
    private static Logger logger = LogManager.GetLogger(nameof (WavePortConnector));
    private object MyWavePortObject;
    private object MyWaveFlowObject;
    internal bool PortIsOpen;
    private DeviceCollectorFunctions MyBus;

    internal WavePort MyWavePort
    {
      get => this.MyWavePortObject as WavePort;
      set => this.MyWavePortObject = (object) value;
    }

    internal WaveFlow MyWaveFlow
    {
      get => this.MyWaveFlowObject as WaveFlow;
      set => this.MyWaveFlowObject = (object) value;
    }

    public WavePortConnector(DeviceCollectorFunctions TheBus)
    {
      this.MyBus = TheBus;
      this.PortIsOpen = false;
    }

    public static bool GetWavePortVersion(
      out string WavePortFirmwareVersionString,
      out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      WavePortFirmwareVersionString = WavePortConnector.InternalWavePortFirmwareVersionString;
      if (!(WavePortFirmwareVersionString == string.Empty))
        return true;
      Fehlerstring = "Firmware Version not available!" + ZR_Constants.SystemNewLine + "Please first read any parameter!";
      return false;
    }

    internal bool StartRequest(
      string Address,
      string[] Repeaters,
      string ByteString,
      out string Response,
      out string Fehlerstring)
    {
      Fehlerstring = string.Empty;
      Response = string.Empty;
      if (!UserManager.CheckPermission(UserRights.Rights.Waveflow))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for Waveflow!");
        return false;
      }
      if (ByteString.Length % 2 != 0)
      {
        Fehlerstring = "Falscher Bytestring!";
        return false;
      }
      int length = ByteString.Length / 2;
      byte[] numArray = new byte[length];
      for (int index = 1; index <= length; ++index)
      {
        int startIndex = 2 * index - 2;
        string s = ByteString.Substring(startIndex, 2);
        numArray[index - 1] = byte.Parse(s, NumberStyles.HexNumber);
      }
      CompletionEventArgs completionEventArgs = this.MyWavePort.Do(new WaveCardRequest()
      {
        Address = Address,
        Buffer = numArray,
        Repeaters = Repeaters
      });
      if (completionEventArgs.Succeeded)
        Response = completionEventArgs.Response;
      else
        WavePortConnector.logger.Debug(completionEventArgs.Error.ToString());
      return true;
    }

    internal bool OpenPort()
    {
      if (!UserManager.CheckPermission(UserRights.Rights.Waveflow))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.NoPermission, "No permission for Waveflow!");
        return false;
      }
      if (this.PortIsOpen)
        return true;
      if (this.MyWavePort == null)
        this.MyWavePort = new WavePort();
      try
      {
        short num1 = short.Parse(this.MyBus.MyCom.SingleParameter(CommParameter.Port, string.Empty).ToUpper().Replace("COM", string.Empty));
        this.MyWavePort.LicenseKey = "TCasDbHHKJkVEKrn89ao9w==";
        this.MyWavePort.ConnectionSettings = new int[5]
        {
          (int) num1,
          9600,
          8,
          0,
          1
        };
        if (!this.MyWavePort.Connect())
        {
          this.PortIsOpen = false;
          return false;
        }
        if (!this.MyWavePort.SetRadioTimeout((byte) 40))
        {
          this.PortIsOpen = false;
          return false;
        }
        byte num2 = 0;
        this.MyWavePort.GetSwitchModeStatus(ref num2);
        if (num2 == (byte) 0)
          this.MyWavePort.SetSwitchModeStatus((byte) 1);
        this.MyWaveFlow = this.MyWavePort.Specifics.WaveFlow;
        WaveCard.PhysicalMode physicalMode = (WaveCard.PhysicalMode) 0;
        Version version;
        this.MyWavePort.GetVersion(ref physicalMode, ref version);
        WavePortConnector.InternalWavePortFirmwareVersionString = version.ToString();
        this.PortIsOpen = true;
        return true;
      }
      catch (Exception ex)
      {
        WavePortConnector.logger.Error(ex.Message);
        return false;
      }
    }

    internal void ClosePort()
    {
      if (!this.PortIsOpen)
        return;
      ((Component) this.MyWavePort).Dispose();
      this.MyWavePort = (WavePort) null;
      this.PortIsOpen = false;
    }

    public string GetAppPath()
    {
      return Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase);
    }
  }
}


--- WFParameterEntry.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.WFParameterEntry
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

#nullable disable
namespace DeviceCollector
{
  public class WFParameterEntry
  {
    public WaveFlowDevice.ParameterNames ParameterName;
    public string Entry;

    public WFParameterEntry(WaveFlowDevice.ParameterNames TheParameterName, string TheEntry)
    {
      this.ParameterName = TheParameterName;
      this.Entry = TheEntry;
    }
  }
}


--- WR4_VOL_INPUT_STATE.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: DeviceCollector.WR4_VOL_INPUT_STATE
// Assembly: DeviceCollector, Version=2.0.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FEEAFEA-5E87-41DE-B6A2-FE832F42FF58
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\DeviceCollector.dll

#nullable disable
namespace DeviceCollector
{
  public enum WR4_VOL_INPUT_STATE
  {
    Unknown,
    WaitSetCycle,
    SetCycle,
    WaitReceiveVolume,
    ReceiveVolume,
    WaitRequestID,
    RequestID,
  }
}

