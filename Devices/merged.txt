
--- AssemblyInfo.cs ---

﻿using System.Reflection;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle("Devices")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("zenner")]
[assembly: AssemblyProduct("Devices")]
[assembly: AssemblyCopyright("Copyright © zenner 2009")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: Guid("d026a6c8-a37e-406d-80fd-a1bde76ba978")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyVersion("1.0.0.0")]


--- BaseDevice.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.BaseDevice
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using HandlerLib;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using ZENNER.CommonLibrary;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class BaseDevice : IDisposable
  {
    protected DeviceManager MyDeviceManager;
    private bool typeMode;

    public virtual event EventHandlerEx<int> OnProgress;

    public virtual event EventHandlerEx<string> OnProgressMessage;

    public virtual event System.EventHandler ConnectionLost;

    public BaseDevice(DeviceManager MyDeviceManager) => this.MyDeviceManager = MyDeviceManager;

    public virtual bool Open() => this.MyDeviceManager.MyBus.ComOpen();

    public virtual bool Close() => this.MyDeviceManager.MyBus.ComClose();

    public virtual bool Print(string options)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool Connect(ref GlobalDeviceId Device)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return (List<GlobalDeviceId>) null;
    }

    public virtual bool SelectDevice(GlobalDeviceId device)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool BeginSearchDevices()
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool IsDevicesModified() => false;

    public virtual bool Read(StructureTreeNode structureTreeNode, List<long> filter)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool ReadAll(List<long> filter)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      ValueList = (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      string serialnumber)
    {
      ValueList = (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool GetValues(
      int valueGroup,
      out SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      ValueList = (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      int SubDeviceIndex)
    {
      ValueList = (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool GetValues(
      string zdf,
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      int SubDeviceIndex)
    {
      ValueList = (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual string GetZdfValues() => string.Empty;

    public virtual UniqueIdentification GetUniqueIdentification() => (UniqueIdentification) null;

    public virtual int UndoCount => 0;

    public virtual bool Undo() => false;

    public virtual bool ExecuteMethod(
      OverrideID overrideID,
      bool isSetMethod,
      out object result,
      object param1,
      object param2,
      object param3,
      object param4)
    {
      result = (object) null;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual async Task<int> ReadDeviceAsync(
      ProgressHandler progress,
      CancellationToken token,
      ReadPartsSelection readPartsSelection)
    {
      await Task.Delay(1);
      throw new NotImplementedException("ReadDeviceAsymc");
    }

    public virtual async Task WriteDeviceAsync(ProgressHandler progress, CancellationToken token)
    {
      await Task.Delay(1);
      throw new NotImplementedException(nameof (WriteDeviceAsync));
    }

    public SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType)
    {
      return this.GetConfigurationParameters(ConfigurationType, 0);
    }

    public virtual SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return (SortedList<OverrideID, ConfigurationParameter>) null;
    }

    public bool SetConfigurationParameters(OverrideID key, object value)
    {
      SortedList<OverrideID, ConfigurationParameter> configurationParameters = this.GetConfigurationParameters(ConfigurationParameter.ValueType.Complete);
      if (configurationParameters == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.OperationCancelled, "Please use ReadConfigurationParameters function first!");
        return false;
      }
      SortedList<OverrideID, ConfigurationParameter> parameterList = new SortedList<OverrideID, ConfigurationParameter>();
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> keyValuePair in configurationParameters)
      {
        if (keyValuePair.Key == key)
        {
          keyValuePair.Value.ParameterValue = value;
          parameterList.Add(key, keyValuePair.Value);
          break;
        }
      }
      if (parameterList.Count != 0)
        return this.SetConfigurationParameters(parameterList);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.OperationCancelled, "Unknown OverrideID!");
      return false;
    }

    public virtual bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList)
    {
      return this.SetConfigurationParameters(parameterList, 0);
    }

    public virtual bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList,
      int SubDevice)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual bool WriteChangedConfigurationParametersToDevice()
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public virtual string LoadType()
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return string.Empty;
    }

    public virtual bool ChangeType(
      SortedList<OverrideID, ConfigurationParameter> additionalConfigurationParameters)
    {
      return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
    }

    public virtual bool TypeMode
    {
      get => this.typeMode;
      set => this.typeMode = value;
    }

    public virtual void ClearDeviceList()
    {
      if (this.MyDeviceManager == null || this.MyDeviceManager.MyBus == null)
        return;
      this.MyDeviceManager.MyBus.DeleteBusInfo();
    }

    public virtual object GetHandler()
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return (object) null;
    }

    public virtual void Dispose()
    {
    }

    internal virtual void ShowHandlerWindow()
    {
    }

    public virtual DateTime? SaveMeter() => throw new NotImplementedException("Save meter backup");
  }
}


--- CommonHandlerWrapper.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.CommonHandlerWrapper
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using HandlerLib;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using ZENNER.CommonLibrary;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class CommonHandlerWrapper : BaseDevice
  {
    public HandlerFunctionsForProduction HandlerInterface;

    internal string HandlerName { get; private set; }

    public override event EventHandlerEx<int> OnProgress;

    public CommonHandlerWrapper(
      DeviceManager MyDeviceManager,
      HandlerFunctionsForProduction handlerInterface)
      : base(MyDeviceManager)
    {
      this.HandlerInterface = handlerInterface;
    }

    public static CommonHandlerWrapper CreateFromHandlerName(
      DeviceManager theDeviceManager,
      ConfigList configList,
      string handlerName,
      bool isPlugin)
    {
      if (theDeviceManager.MyCommunicationPort == null || theDeviceManager.MyCommunicationPort.portFunctions == null)
        throw new Exception("CommunicationPortFunctions not defined");
      HandlerFunctionsForProduction handlerInterface;
      if (isPlugin)
      {
        handlerInterface = ((IWindowFunctions) PlugInLoader.GetPlugIn(handlerName).GetPluginInfo().Interface).GetFunctions() as HandlerFunctionsForProduction;
      }
      else
      {
        handlerInterface = Activator.CreateInstance(((IEnumerable<Type>) Assembly.LoadFrom(handlerName + ".dll").GetTypes()).First<Type>((Func<Type, bool>) (x => x.BaseType == typeof (HandlerFunctionsForProduction))), (object) theDeviceManager.MyCommunicationPort.portFunctions, (object) StartupManager.Database.BaseDbConnection) as HandlerFunctionsForProduction;
        handlerInterface.SetReadoutConfiguration(configList);
      }
      return new CommonHandlerWrapper(theDeviceManager, handlerInterface)
      {
        HandlerName = handlerName
      };
    }

    public override bool Open()
    {
      this.HandlerInterface.Open();
      return true;
    }

    public override bool Close()
    {
      this.HandlerInterface.Close();
      return true;
    }

    public override async Task<int> ReadDeviceAsync(
      ProgressHandler progress,
      CancellationToken token,
      ReadPartsSelection readPartsSelection)
    {
      int num = await this.HandlerInterface.ReadDeviceAsync(progress, token, readPartsSelection);
      return num;
    }

    public override async Task WriteDeviceAsync(ProgressHandler progress, CancellationToken token)
    {
      await this.HandlerInterface.WriteDeviceAsync(progress, token);
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      SortedList<OverrideID, ConfigurationParameter> configurationParameters = this.HandlerInterface.GetConfigurationParameters(SubDevice);
      if (configurationParameters == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      for (int index = configurationParameters.Count - 1; index >= 0; --index)
      {
        if (configurationParameters.Values[index].ParameterID.ToString().StartsWith("MenuView"))
          configurationParameters.RemoveAt(index);
        if (!UserManager.IsConfigParamVisible(configurationParameters.Values[index].ParameterID))
          configurationParameters.RemoveAt(index);
      }
      return configurationParameters;
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> ConfigParameterList,
      int SubDevice)
    {
      this.HandlerInterface.SetConfigurationParameters(ConfigParameterList, SubDevice);
      return true;
    }

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      List<GlobalDeviceId> globalDeviceIdList = new List<GlobalDeviceId>();
      DeviceIdentification deviceIdentification1 = this.HandlerInterface.GetDeviceIdentification();
      GlobalDeviceId globalDeviceId = new GlobalDeviceId();
      globalDeviceId.Serialnumber = deviceIdentification1.PrintedSerialNumberAsString;
      globalDeviceId.FirmwareVersion = deviceIdentification1.GetFirmwareVersionString();
      globalDeviceIdList.Add(globalDeviceId);
      if (deviceIdentification1.SubChannels != null)
      {
        foreach (int subChannel in deviceIdentification1.SubChannels)
        {
          DeviceIdentification deviceIdentification2 = this.HandlerInterface.GetDeviceIdentification(subChannel);
          globalDeviceId.SubDevices.Add(new GlobalDeviceId()
          {
            Serialnumber = deviceIdentification2.PrintedSerialNumberAsString
          });
        }
      }
      return globalDeviceIdList;
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      ReadPartsSelection parts = ReadPartsSelection.AllWithoutLogger;
      if (this.HandlerName == "S4_Handler")
      {
        ConfigurationParameter.ActiveConfigurationLevel = ConfigurationLevel.Huge;
        parts |= ReadPartsSelection.SmartFunctions;
        parts |= ReadPartsSelection.ProtocolOnlyMode;
      }
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      AsyncHelpers.RunSync<int>((Func<Task<int>>) (() => this.ReadDeviceAsync(new ProgressHandler((Action<ProgressArg>) (x =>
      {
        if (this.OnProgress == null)
          return;
        this.OnProgress((object) this, Convert.ToInt32(x.ProgressPercentage));
      })), new CancellationTokenSource().Token, parts)));
      UpdatedDeviceIdentification = new GlobalDeviceId();
      return UpdatedDeviceIdentification != null;
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      AsyncHelpers.RunSync((Func<Task>) (() => this.WriteDeviceAsync(new ProgressHandler((Action<ProgressArg>) (x =>
      {
        if (this.OnProgress == null)
          return;
        this.OnProgress((object) this, Convert.ToInt32(x.ProgressPercentage));
      })), new CancellationTokenSource().Token)));
      return true;
    }
  }
}


--- CommunicationModels.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.CommunicationModels
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

#nullable disable
namespace Devices
{
  public enum CommunicationModels
  {
    DeviceCollector_AsyncCom,
    CommunicationPort,
  }
}


--- DatabaseAccess.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.DatabaseAccess
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using GmmDbLib;
using System.Data;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace Devices
{
  internal class DatabaseAccess
  {
    private IDbConnection myPrimaryConnection;
    internal ZRDataAdapter MBusTranslationsData_Adapter;
    internal Schema.MBusParameterTranslationDataTable MBusTranslationsTable;

    internal DatabaseAccess() => this.myPrimaryConnection = DbBasis.PrimaryDB.GetDbConnection();
  }
}


--- DeviceManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.DeviceManager
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using AsyncCom;
using CommunicationPort.UserInterface;
using DeviceCollector;
using NLog;
using ReadoutConfiguration;
using StartupLib;
using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;
using ZENNER.CommonLibrary;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class DeviceManager : IDisposable
  {
    private static Logger logger = LogManager.GetLogger(nameof (DeviceManager));
    public bool IsPlugin = false;
    public string CommonDeviceName = (string) null;
    private SortedList<string, string> SavedSettings;
    public BaseDevice SelectedHandler;
    private object databaseMutex = new object();
    private List<int> DeviceCollectorDeviceIndexFromConfiguratorIndex;
    private List<GlobalDeviceId> ConfiguratorDeviceList;

    public DeviceCollectorFunctions MyBus { get; private set; }

    public AsyncFunctions MyAsyncCom { get; private set; }

    public CommunicationPortWindowFunctions MyCommunicationPort { get; set; }

    public ConfigList ActiveConfigList { get; private set; }

    public event EventHandler<GMM_EventArgs> OnMessage;

    public event EventHandlerEx<Exception> OnError;

    public event EventHandler<ValueIdentSet> ValueIdentSetReceived;

    public event EventHandlerEx<int> OnProgress;

    public event System.EventHandler BatterieLow;

    public event EventHandlerEx<string> OnProgressMessage;

    public event System.EventHandler ConnectionLost;

    internal bool IsValueIdentSetReceivedEventEnabled => this.ValueIdentSetReceived != null;

    public ConfigurationParameter.ValueType ParameterType { get; set; }

    public DeviceManagerModes DeviceManagerMode { get; private set; }

    public bool BreakRequest
    {
      get => this.MyBus != null && this.MyBus.BreakRequest;
      set
      {
        if (this.MyBus == null)
          return;
        this.MyBus.BreakRequest = value;
      }
    }

    public GmmComponentInfo LoadedComponentInfo { get; private set; }

    public DeviceManager()
    {
    }

    public DeviceManager(DeviceCollectorFunctions deviceCollector)
    {
      this.MyBus = deviceCollector;
      this.MyBus.OnProgress += new EventHandlerEx<int>(this.deviceCollector_OnProgress);
      this.MyBus.OnProgressMessage += new EventHandlerEx<string>(this.deviceCollector_OnProgressMessage);
      this.ParameterType = ConfigurationParameter.ValueType.Direct;
    }

    public void Dispose()
    {
      this.BreakRequest = true;
      this.Close();
      this.DisposeHandler();
      if (this.MyAsyncCom != null)
        this.MyAsyncCom.BatterieLow -= new System.EventHandler(this.RaiseBatterieLow);
      if (this.MyBus != null)
      {
        this.MyBus.OnProgress -= new EventHandlerEx<int>(this.deviceCollector_OnProgress);
        this.MyBus.OnProgressMessage -= new EventHandlerEx<string>(this.deviceCollector_OnProgressMessage);
        this.MyBus.Dispose();
        this.MyBus.GMM_Dispose();
      }
      GC.Collect();
      GC.WaitForPendingFinalizers();
    }

    private void DisposeHandler()
    {
      if (this.SelectedHandler == null)
        return;
      this.SelectedHandler.Dispose();
      this.SelectedHandler.OnProgress -= new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
      this.SelectedHandler.OnProgressMessage -= new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
      this.SelectedHandler.ConnectionLost -= new System.EventHandler(this.SelectedHandler_ConnectionLost);
      this.SelectedHandler = (BaseDevice) null;
    }

    public void ClassicInitialisation()
    {
      ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.DeviceCollector);
      this.MyBus = (DeviceCollectorFunctions) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.DeviceCollector];
      this.MyBus.OnProgress += new EventHandlerEx<int>(this.deviceCollector_OnProgress);
      this.MyBus.OnProgressMessage += new EventHandlerEx<string>(this.deviceCollector_OnProgressMessage);
      this.ParameterType = ConfigurationParameter.ValueType.Direct;
    }

    public void PrepareCommunicationStructure(ConfigList configList)
    {
      this.ActiveConfigList = configList != null ? configList : throw new Exception("Configuration not defined");
      try
      {
        ConnectionProfile partialProfile = ReadoutConfigFunctions.GetPartialProfile(this.ActiveConfigList.ConnectionProfileID);
        if (partialProfile == null)
          throw new Exception("Profile with ProfileID = " + this.ActiveConfigList.ConnectionProfileID.ToString() + " not supported");
        string handlerName = "NoHandler";
        if (partialProfile.DeviceModel.Parameters != null)
        {
          if (partialProfile.DeviceModel.Parameters.ContainsKey(ConnectionProfileParameter.Handler))
          {
            handlerName = partialProfile.DeviceModel.Parameters[ConnectionProfileParameter.Handler];
          }
          else
          {
            string busMode1 = configList.BusMode;
            ZR_ClassLibrary.BusMode busMode2 = ZR_ClassLibrary.BusMode.MBus;
            string str1 = busMode2.ToString();
            int num;
            if (!(busMode1 == str1))
            {
              string busMode3 = configList.BusMode;
              busMode2 = ZR_ClassLibrary.BusMode.MBusPointToPoint;
              string str2 = busMode2.ToString();
              num = busMode3 == str2 ? 1 : 0;
            }
            else
              num = 1;
            if (num != 0)
              handlerName = configList.SelectedDeviceMBusType;
          }
        }
        GmmStructureInfo.Init(this.IsPlugin);
        this.LoadedComponentInfo = GmmStructureInfo.GetComponentInfo(handlerName);
        if (this.LoadedComponentInfo.CommunicationModel == CommunicationModels.DeviceCollector_AsyncCom)
        {
          if (this.MyCommunicationPort != null)
            this.MyCommunicationPort.Close();
          if (this.IsPlugin)
          {
            this.MyBus = (DeviceCollectorFunctions) PlugInLoader.GetPlugIn("DeviceCollector").GetPluginInfo().Interface;
            this.MyAsyncCom = (AsyncFunctions) PlugInLoader.GetPlugIn("AsyncCom").GetPluginInfo().Interface;
            this.MyAsyncCom.BatterieLow -= new System.EventHandler(this.RaiseBatterieLow);
            this.MyAsyncCom.BatterieLow += new System.EventHandler(this.RaiseBatterieLow);
          }
          else
          {
            if (this.MyAsyncCom == null)
            {
              this.MyAsyncCom = new AsyncFunctions();
              this.MyAsyncCom.BatterieLow += new System.EventHandler(this.RaiseBatterieLow);
            }
            if (this.MyBus == null)
            {
              this.MyBus = new DeviceCollectorFunctions((IAsyncFunctions) this.MyAsyncCom, false);
              this.MyBus.OnProgress += new EventHandlerEx<int>(this.deviceCollector_OnProgress);
              this.MyBus.OnProgressMessage += new EventHandlerEx<string>(this.deviceCollector_OnProgressMessage);
            }
          }
          SortedList<string, string> sortedList = this.ActiveConfigList.GetSortedList();
          this.MyBus.SetDeviceCollectorSettings(sortedList);
          this.MyAsyncCom.SetAsyncComSettings(sortedList);
          this.GarantDeviceCollectorObjectFromHandlerName(handlerName, this.ActiveConfigList);
          this.GarantHandlerLoaded();
        }
        else
        {
          if (this.MyAsyncCom != null)
            this.MyAsyncCom.Close();
          ConfigList configList1 = this.ActiveConfigList;
          if (this.IsPlugin)
          {
            this.MyCommunicationPort = (CommunicationPortWindowFunctions) PlugInLoader.GetPlugIn("CommunicationPort").GetPluginInfo().Interface;
            this.MyCommunicationPort.portFunctions.OnBatteryLow -= new System.EventHandler(this.RaiseBatterieLow);
            this.MyCommunicationPort.portFunctions.OnBatteryLow += new System.EventHandler(this.RaiseBatterieLow);
          }
          else if (this.MyCommunicationPort == null)
          {
            this.MyCommunicationPort = new CommunicationPortWindowFunctions();
            this.MyCommunicationPort.SetReadoutConfiguration(this.ActiveConfigList);
            this.MyCommunicationPort.portFunctions.OnBatteryLow += new System.EventHandler(this.RaiseBatterieLow);
          }
          else
          {
            configList1 = this.MyCommunicationPort.GetReadoutConfiguration();
            ConfigList configList2 = configList1;
            SortedList<string, string> sortedList = this.ActiveConfigList.GetSortedList();
            if (!configList2.Equal(sortedList))
              configList2.Reset(this.ActiveConfigList.GetSortedList());
          }
          if (this.SelectedHandler == null || this.SelectedHandler.GetType() != typeof (CommonHandlerWrapper) || ((CommonHandlerWrapper) this.SelectedHandler).HandlerName != handlerName)
          {
            CommonHandlerWrapper fromHandlerName = CommonHandlerWrapper.CreateFromHandlerName(this, configList1, handlerName, this.IsPlugin);
            fromHandlerName.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
            this.SelectedHandler = (BaseDevice) fromHandlerName;
          }
          else
          {
            ConfigList readoutConfiguration = ((CommonHandlerWrapper) this.SelectedHandler).HandlerInterface.GetReadoutConfiguration();
            SortedList<string, string> sortedList = this.ActiveConfigList.GetSortedList();
            if (!readoutConfiguration.Equal(sortedList))
              readoutConfiguration.Reset(sortedList);
          }
        }
      }
      catch (Exception ex)
      {
        this.LoadedComponentInfo = (GmmComponentInfo) null;
        throw ex;
      }
    }

    private void GarantDeviceCollectorObjectFromHandlerName(
      string handlerName,
      ConfigList configList)
    {
      this.MyBus.DeleteBusInfo();
      ZR_ClassLibMessages.ClearErrors();
      ZR_ClassLibrary.BusMode baseMode = this.MyBus.GetBaseMode();
      bool flag;
      switch (baseMode)
      {
        case ZR_ClassLibrary.BusMode.MBusPointToPoint:
        case ZR_ClassLibrary.BusMode.MBus:
          switch (handlerName)
          {
            case "EDC_Handler":
              flag = this.MyBus.AddDevice(DeviceTypes.EDC, (int) configList.PrimaryAddress, (long) configList.SecondaryAddress);
              break;
            case "TH_Handler":
              flag = this.MyBus.AddDevice(DeviceTypes.TemperatureSensor, (int) configList.PrimaryAddress, (long) configList.SecondaryAddress);
              break;
            case "MinolHandler":
              flag = this.MyBus.AddDevice(DeviceTypes.Minol_Device, (int) configList.PrimaryAddress, (long) configList.SecondaryAddress);
              break;
            case "PDC_Handler":
              flag = this.MyBus.AddDevice(DeviceTypes.PDC, (int) configList.PrimaryAddress, (long) configList.SecondaryAddress);
              break;
            case "GMM_Handler":
              flag = this.MyBus.AddDevice(DeviceTypes.ZR_Serie2, (int) configList.PrimaryAddress, (long) configList.SecondaryAddress);
              break;
            case "S3_Handler":
              flag = this.MyBus.AddDevice(DeviceTypes.ZR_Serie3, (int) configList.PrimaryAddress, (long) configList.SecondaryAddress);
              break;
            default:
              flag = this.MyBus.AddDevice(DeviceTypes.MBus, (int) configList.PrimaryAddress, (long) configList.SecondaryAddress);
              break;
          }
          break;
        case ZR_ClassLibrary.BusMode.MinomatV2:
          flag = true;
          break;
        case ZR_ClassLibrary.BusMode.MinomatV3:
        case ZR_ClassLibrary.BusMode.MinomatV4:
        case ZR_ClassLibrary.BusMode.Minol_Device:
        case ZR_ClassLibrary.BusMode.SmokeDetector:
          DeviceManager.logger.Debug("Expected device: " + configList.PrimaryAddress.ToString());
          flag = this.MyBus.AddDevice(DeviceTypes.Minol_Device, 0, (long) configList.PrimaryAddress);
          break;
        case ZR_ClassLibrary.BusMode.Radio2:
        case ZR_ClassLibrary.BusMode.Radio3:
        case ZR_ClassLibrary.BusMode.Radio4:
        case ZR_ClassLibrary.BusMode.wMBusS1:
        case ZR_ClassLibrary.BusMode.wMBusS1M:
        case ZR_ClassLibrary.BusMode.wMBusS2:
        case ZR_ClassLibrary.BusMode.wMBusT1:
        case ZR_ClassLibrary.BusMode.wMBusT2_meter:
        case ZR_ClassLibrary.BusMode.wMBusT2_other:
        case ZR_ClassLibrary.BusMode.wMBusC1A:
        case ZR_ClassLibrary.BusMode.wMBusC1B:
        case ZR_ClassLibrary.BusMode.Radio3_868_95_RUSSIA:
        case ZR_ClassLibrary.BusMode.RadioMS:
          flag = true;
          break;
        default:
          throw new Exception("The AddDevice method is not supported for this device! BusMode: " + baseMode.ToString());
      }
      if (!flag)
      {
        ZR_ClassLibMessages.LastErrorInfo errorAndClearError = ZR_ClassLibMessages.GetLastErrorAndClearError();
        DeviceManager.logger.Error("Failed add device to expected devices! Error: " + errorAndClearError.LastErrorDescription);
        throw new Exception("Error on add DeviceCollector device object!" + Environment.NewLine + "HandlerName: " + handlerName + "; BusMode: " + baseMode.ToString() + Environment.NewLine + errorAndClearError?.ToString());
      }
    }

    public void ShowHandlerWindow()
    {
      this.ParameterType = ConfigurationParameter.ValueType.Complete;
      if (!this.GarantHandlerLoaded() || this.SelectedHandler == null)
        return;
      Application.EnableVisualStyles();
      this.SelectedHandler.ShowHandlerWindow();
    }

    public static Dictionary<string, string> LoadAvailableCOMservers()
    {
      if (ZR_Component.CommonGmmInterface.DeviceManager == null)
      {
        DeviceManager deviceManager = new DeviceManager();
        deviceManager.ClassicInitialisation();
        ZR_Component.CommonGmmInterface.DeviceManager = (object) deviceManager;
      }
      return ((DeviceManager) ZR_Component.CommonGmmInterface.DeviceManager).MyBus.LoadAvailableCOMservers();
    }

    private void RaiseBatterieLow(object sender, EventArgs e)
    {
      if (this.BatterieLow == null)
        return;
      this.BatterieLow(sender, e);
    }

    private void deviceCollector_OnProgress(object sender, int e)
    {
      if (this.OnProgress == null)
        return;
      DeviceManager.logger.Trace("Start Event_OnProgress");
      this.OnProgress(sender, e);
      DeviceManager.logger.Trace("End Event_OnProgress");
    }

    private void deviceCollector_OnProgressMessage(object sender, string e)
    {
      if (this.OnProgressMessage == null)
        return;
      DeviceManager.logger.Trace("Start Event_OnProgressMessage");
      this.OnProgressMessage(sender, e);
      DeviceManager.logger.Trace("End Event_OnProgressMessage");
    }

    internal virtual void OnValueIdentSetReceived(object sender, ValueIdentSet e)
    {
      EventHandler<ValueIdentSet> identSetReceived = this.ValueIdentSetReceived;
      if (identSetReceived == null)
        return;
      DeviceManager.logger.Trace("Start Event_ValueIdentSetReceived");
      identSetReceived(sender, e);
      DeviceManager.logger.Trace("End Event_ValueIdentSetReceived");
    }

    internal void RaiseEvent(GMM_EventArgs eventMessage)
    {
      if (eventMessage == null || this.OnMessage == null)
        return;
      DeviceManager.logger.Trace("Start Event_OnMessage");
      this.OnMessage((object) this, eventMessage);
      DeviceManager.logger.Trace("End Event_OnMessage");
    }

    internal void RaiseEventError(Exception exception)
    {
      if (exception == null || this.OnError == null)
        return;
      DeviceManager.logger.Trace("Start Event_OnError");
      this.OnError((object) this, exception);
      DeviceManager.logger.Trace("End Event_OnError");
    }

    public bool SetDeviceCollectorSettings(string deviceCollectorSettings)
    {
      this.DisposeHandler();
      return this.MyBus == null || this.MyBus.SetDeviceCollectorSettings(deviceCollectorSettings);
    }

    public bool SetDeviceCollectorSettings(
      SortedList<DeviceCollectorSettings, object> deviceCollectorSettings)
    {
      this.Dispose();
      return this.MyBus == null || this.MyBus.SetDeviceCollectorSettings(deviceCollectorSettings);
    }

    public bool SetDeviceCollectorSettings(SortedList<string, string> deviceCollectorSettings)
    {
      this.DisposeHandler();
      if (deviceCollectorSettings.ContainsKey("UsedHandler"))
        this.SavedSettings = deviceCollectorSettings;
      else if (this.MyBus != null)
        return this.MyBus.SetDeviceCollectorSettings(deviceCollectorSettings);
      return true;
    }

    public void SetDeviceCollectorSettings2(SortedList<string, string> deviceCollectorSettings)
    {
      if (deviceCollectorSettings.ContainsKey("UsedHandler"))
      {
        this.SavedSettings = deviceCollectorSettings;
      }
      else
      {
        if (this.MyBus == null)
          return;
        this.MyBus.SetDeviceCollectorSettings(deviceCollectorSettings);
      }
    }

    public bool SetAsyncComSettings(string asyncComSettings)
    {
      if (string.IsNullOrEmpty(asyncComSettings))
        return false;
      string[] strArray = asyncComSettings.Split(';');
      if (strArray.Length == 0)
        return false;
      SortedList<string, string> asyncComSettings1 = new SortedList<string, string>();
      for (int index = 0; index + 1 < strArray.Length; index += 2)
      {
        if (!asyncComSettings1.ContainsKey(strArray[index]))
          asyncComSettings1.Add(strArray[index], strArray[index + 1]);
        else
          DeviceManager.logger.Error("Multiple AsyncComSettings detected: {0}={1} and {2}={3}", new object[4]
          {
            (object) strArray[index],
            (object) strArray[index + 1],
            (object) strArray[index],
            (object) asyncComSettings1[strArray[index]]
          });
      }
      return this.SetAsyncComSettings(asyncComSettings1);
    }

    public bool SetAsyncComSettings(
      SortedList<AsyncComSettings, object> asyncComSettings)
    {
      if (asyncComSettings == null)
        return false;
      SortedList<string, string> asyncComSettings1 = new SortedList<string, string>();
      foreach (KeyValuePair<AsyncComSettings, object> asyncComSetting in asyncComSettings)
        asyncComSettings1.Add(asyncComSetting.Key.ToString(), asyncComSetting.Value.ToString());
      return this.SetAsyncComSettings(asyncComSettings1);
    }

    public bool SetAsyncComSettings(SortedList<string, string> asyncComSettings)
    {
      try
      {
        this.DisposeHandler();
        if (this.MyBus == null)
        {
          ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.DeviceCollector);
          this.MyBus = (DeviceCollectorFunctions) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.DeviceCollector];
        }
        this.MyBus.SetAsyncComSettings(asyncComSettings);
      }
      catch (Exception ex)
      {
        string str = "SetAsyncComSettings error: " + ex.Message;
        DeviceManager.logger.Error(ex, str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
        return false;
      }
      return true;
    }

    public void SetAsyncComSettings2(SortedList<string, string> asyncComSettings)
    {
      this.MyBus.SetAsyncComSettings(asyncComSettings);
    }

    public SortedList<string, string> GetAsyncComSettings()
    {
      try
      {
        if (this.MyBus != null)
          return this.MyBus.GetAsyncComSettings();
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "No structure loaded");
        return (SortedList<string, string>) null;
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Get structure error: " + ex.Message);
        return (SortedList<string, string>) null;
      }
    }

    public void DeviceList_Clear()
    {
      try
      {
        this.GarantHandlerLoaded();
        if (this.SelectedHandler == null)
          return;
        this.SelectedHandler.ClearDeviceList();
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        DeviceManager.logger.Error(ex, str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, str);
      }
    }

    public bool GarantHandlerLoaded() => this.GarantHandlerLoaded(true);

    public bool GarantHandlerLoaded(bool addDymmyMBusDeviceIfSelectedDeviceNULL)
    {
      if (this.MyBus == null)
        return false;
      this.DeviceManagerMode = DeviceManagerModes.DeviceListConfiguratorControlled;
      ZR_ClassLibrary.BusMode baseMode = this.MyBus.GetBaseMode();
      switch (baseMode)
      {
        case ZR_ClassLibrary.BusMode.MBusPointToPoint:
          return this.InitializeMBusDeviceHandler(addDymmyMBusDeviceIfSelectedDeviceNULL);
        case ZR_ClassLibrary.BusMode.MBus:
          this.DeviceManagerMode = DeviceManagerModes.DeviceListBusControlled;
          return this.InitializeMBusDeviceHandler(addDymmyMBusDeviceIfSelectedDeviceNULL);
        case ZR_ClassLibrary.BusMode.MinomatV2:
        case ZR_ClassLibrary.BusMode.MinomatV3:
        case ZR_ClassLibrary.BusMode.MinomatV4:
          this.InitializeMinomatHandler();
          return true;
        case ZR_ClassLibrary.BusMode.MinomatRadioTest:
        case ZR_ClassLibrary.BusMode.Radio2:
        case ZR_ClassLibrary.BusMode.Radio3:
        case ZR_ClassLibrary.BusMode.Radio4:
        case ZR_ClassLibrary.BusMode.wMBusS1:
        case ZR_ClassLibrary.BusMode.wMBusS1M:
        case ZR_ClassLibrary.BusMode.wMBusS2:
        case ZR_ClassLibrary.BusMode.wMBusT1:
        case ZR_ClassLibrary.BusMode.wMBusT2_meter:
        case ZR_ClassLibrary.BusMode.wMBusT2_other:
        case ZR_ClassLibrary.BusMode.wMBusC1A:
        case ZR_ClassLibrary.BusMode.wMBusC1B:
        case ZR_ClassLibrary.BusMode.Radio3_868_95_RUSSIA:
        case ZR_ClassLibrary.BusMode.RadioMS:
          this.InitializeWalkByHandler();
          return true;
        case ZR_ClassLibrary.BusMode.Minol_Device:
          this.InitializeMinolDeviceHandler();
          return true;
        case ZR_ClassLibrary.BusMode.RelayDevice:
          this.InitializeRelayDeviceHandler();
          return true;
        case ZR_ClassLibrary.BusMode.SmokeDetector:
          this.InitializeSmokeDetectorHandler();
          return true;
        default:
          throw new ArgumentException("Can not initialize handler! Unknown bus mode: " + baseMode.ToString());
      }
    }

    public bool IsDeviceModified()
    {
      if (this.MyBus.IsDeviceModified())
        return true;
      return this.SelectedHandler != null && this.SelectedHandler.IsDevicesModified();
    }

    private void InitializeSmokeDetectorHandler()
    {
      if (this.SelectedHandler != null && !(this.SelectedHandler.GetType() != typeof (SmokeDetectorHandler)))
        return;
      this.SelectedHandler = (BaseDevice) new SmokeDetectorHandler(this);
      this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
      this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
    }

    private void InitializeWalkByHandler()
    {
      if (this.SelectedHandler != null && !(this.SelectedHandler.GetType() != typeof (WalkByHandler)))
        return;
      this.SelectedHandler = (BaseDevice) new WalkByHandler(this);
      this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
      this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
      this.SelectedHandler.ConnectionLost += new System.EventHandler(this.SelectedHandler_ConnectionLost);
    }

    private void InitializeRelayDeviceHandler()
    {
      if (this.SelectedHandler != null && !(this.SelectedHandler.GetType() != typeof (RelayDeviceHandler)))
        return;
      this.SelectedHandler = (BaseDevice) new RelayDeviceHandler(this);
      this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
      this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
    }

    private void InitializeMinomatHandler()
    {
      if (this.SelectedHandler != null && !(this.SelectedHandler.GetType() != typeof (MinomatHandler)))
        return;
      this.SelectedHandler = (BaseDevice) new MinomatHandler(this);
      this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
      this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
    }

    private void InitializeMinolDeviceHandler()
    {
      if (this.SelectedHandler != null && !(this.SelectedHandler.GetType() != typeof (MinolDeviceHandler)))
        return;
      this.SelectedHandler = (BaseDevice) new MinolDeviceHandler(this);
      this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
      this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
    }

    private bool InitializeMBusDeviceHandler(bool addDymmyMBusDeviceIfSelectedDeviceNULL)
    {
      BusDevice selectedDevice = this.MyBus.GetSelectedDevice();
      if (selectedDevice == null)
      {
        if (addDymmyMBusDeviceIfSelectedDeviceNULL && !this.MyBus.AddDevice(DeviceTypes.MBus, 0))
          return false;
        selectedDevice = this.MyBus.GetSelectedDevice();
        if (selectedDevice == null)
          return false;
      }
      if (selectedDevice.Info != null && (selectedDevice.Info.DeviceType == DeviceTypes.HumiditySensor || selectedDevice.Info.DeviceType == DeviceTypes.TemperatureSensor))
      {
        if (this.SelectedHandler == null || this.SelectedHandler.GetType() != typeof (ThHandler))
        {
          this.SelectedHandler = (BaseDevice) new ThHandler(this);
          this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
          this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
        }
        return true;
      }
      switch (selectedDevice)
      {
        case EDC _:
          if (this.SelectedHandler == null || this.SelectedHandler.GetType() != typeof (EdcHandler))
          {
            this.SelectedHandler = (BaseDevice) new EdcHandler(this);
            this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
            this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
            break;
          }
          break;
        case PDC _:
          if (this.SelectedHandler == null || this.SelectedHandler.GetType() != typeof (PdcHandler))
          {
            this.SelectedHandler = (BaseDevice) new PdcHandler(this);
            this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
            this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
            break;
          }
          break;
        case Serie3MBus _:
          if (this.ParameterType == ConfigurationParameter.ValueType.Complete)
          {
            if (this.SelectedHandler == null || !(this.SelectedHandler is Series3DeviceByHandler))
            {
              this.SelectedHandler = (BaseDevice) new Series3DeviceByHandler(this);
              this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
              this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
              break;
            }
            break;
          }
          if (this.SelectedHandler == null || this.SelectedHandler.GetType() != typeof (Series3Device))
          {
            this.SelectedHandler = (BaseDevice) new Series3Device(this);
            this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
            this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
          }
          break;
        case Serie2MBus _:
          if (this.ParameterType == ConfigurationParameter.ValueType.Complete)
          {
            if (this.SelectedHandler == null || this.SelectedHandler.GetType() != typeof (Series2DeviceByHandler))
            {
              this.SelectedHandler = (BaseDevice) new Series2DeviceByHandler(this);
              this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
              this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
              break;
            }
            break;
          }
          if (this.SelectedHandler == null || this.SelectedHandler.GetType() != typeof (Series2Device))
          {
            this.SelectedHandler = (BaseDevice) new Series2Device(this);
            this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
            this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
          }
          break;
        default:
          if (this.SelectedHandler == null || this.SelectedHandler.GetType() != typeof (MBusDeviceHandler))
          {
            this.SelectedHandler = (BaseDevice) new MBusDeviceHandler(this);
            this.SelectedHandler.OnProgress += new EventHandlerEx<int>(this.SelectedHandler_OnProgress);
            this.SelectedHandler.OnProgressMessage += new EventHandlerEx<string>(this.SelectedHandler_OnProgressMessage);
          }
          break;
      }
      return true;
    }

    public bool Open() => this.SelectedHandler != null && this.SelectedHandler.Open();

    public bool Close() => this.SelectedHandler != null && this.SelectedHandler.Close();

    public bool DeviceList_Read(StructureTreeNode structureTreeNode, List<long> filter)
    {
      try
      {
        this.GarantHandlerLoaded();
        this.BreakRequest = false;
        return this.SelectedHandler.Read(structureTreeNode, filter);
      }
      catch (AccessDeniedException ex)
      {
        throw ex;
      }
      catch (IOException ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        DeviceManager.logger.Error((Exception) ex, str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
        return false;
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        DeviceManager.logger.Error(ex, str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, str);
        return false;
      }
    }

    public bool DeviceList_ReadAll(List<long> filter)
    {
      try
      {
        if (!this.GarantHandlerLoaded())
          return false;
        this.BreakRequest = false;
        this.ParameterType = ConfigurationParameter.ValueType.Direct;
        if (DeviceManager.logger.IsTraceEnabled)
          DeviceManager.logger.Trace("ReadAll (Filter:" + ZR_ClassLibrary.Util.ArrayToString(filter, " ") + ")");
        return this.SelectedHandler.ReadAll(filter);
      }
      catch (IOException ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        DeviceManager.logger.Error((Exception) ex, str);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, str);
        return false;
      }
      catch (Exception ex)
      {
        string message = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        DeviceManager.logger.Error(ex, message);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.Message);
        return false;
      }
    }

    private void SelectedHandler_OnProgress(object sender, int e)
    {
      if (this.OnProgress == null)
        return;
      this.OnProgress(sender, e);
    }

    private void SelectedHandler_OnProgressMessage(object sender, string e)
    {
      if (this.OnProgressMessage == null)
        return;
      this.OnProgressMessage(sender, e);
    }

    private void SelectedHandler_ConnectionLost(object sender, EventArgs e)
    {
      if (this.ConnectionLost == null)
        return;
      DeviceManager.logger.Trace("Start Event_ConnectionLost");
      this.ConnectionLost(sender, e);
      DeviceManager.logger.Trace("End Event_ConnectionLost");
    }

    public List<GlobalDeviceId> DeviceList_ReadAllAndGetList(
      ChoiceDeviceList choiceDeviceList,
      List<long> filter)
    {
      return this.DeviceList_ReadAll(filter) ? this.DeviceList_GetList(choiceDeviceList) : (List<GlobalDeviceId>) null;
    }

    public bool DeviceList_StartHKVEReceptionWindow()
    {
      this.BreakRequest = false;
      return this.MyBus.GetBaseMode() == ZR_ClassLibrary.BusMode.MinomatV2 ? this.MyBus.StartHKVEReceptionWindow() : throw new NotImplementedException("Only avaliable for Minomat bus mode");
    }

    public bool BeginSearchDevices()
    {
      this.GarantHandlerLoaded();
      this.BreakRequest = false;
      return this.SelectedHandler.BeginSearchDevices();
    }

    public bool DeviceList_SystemInit()
    {
      this.BreakRequest = false;
      return this.MyBus.GetBaseMode() == ZR_ClassLibrary.BusMode.MinomatV2 ? this.MyBus.SystemInit() : throw new NotImplementedException("Only avaliable for Minomat bus mode");
    }

    public List<GlobalDeviceId> DeviceList_GetList()
    {
      return this.DeviceList_GetList(ChoiceDeviceList.Readout);
    }

    public List<GlobalDeviceId> DeviceList_GetList(ChoiceDeviceList choiceDeviceList)
    {
      this.GarantHandlerLoaded();
      ZR_ClassLibrary.BusMode baseMode = this.MyBus.GetBaseMode();
      switch (baseMode)
      {
        case ZR_ClassLibrary.BusMode.MBusPointToPoint:
        case ZR_ClassLibrary.BusMode.MinomatV3:
        case ZR_ClassLibrary.BusMode.MinomatV4:
        case ZR_ClassLibrary.BusMode.MinomatRadioTest:
        case ZR_ClassLibrary.BusMode.Minol_Device:
        case ZR_ClassLibrary.BusMode.Radio2:
        case ZR_ClassLibrary.BusMode.Radio3:
        case ZR_ClassLibrary.BusMode.Radio4:
        case ZR_ClassLibrary.BusMode.wMBusS1:
        case ZR_ClassLibrary.BusMode.wMBusS1M:
        case ZR_ClassLibrary.BusMode.wMBusS2:
        case ZR_ClassLibrary.BusMode.wMBusT1:
        case ZR_ClassLibrary.BusMode.wMBusT2_meter:
        case ZR_ClassLibrary.BusMode.wMBusT2_other:
        case ZR_ClassLibrary.BusMode.wMBusC1A:
        case ZR_ClassLibrary.BusMode.wMBusC1B:
        case ZR_ClassLibrary.BusMode.Radio3_868_95_RUSSIA:
        case ZR_ClassLibrary.BusMode.RadioMS:
        case ZR_ClassLibrary.BusMode.SmokeDetector:
          return this.SelectedHandler == null ? (List<GlobalDeviceId>) null : this.SelectedHandler.GetGlobalDeviceIdList();
        case ZR_ClassLibrary.BusMode.MBus:
          return this.DeviceManagerMode == DeviceManagerModes.DeviceListBusControlled ? this.GetMBusDeviceListForConfiguration(choiceDeviceList) : this.GetMBusDeviceList(choiceDeviceList);
        case ZR_ClassLibrary.BusMode.MinomatV2:
          if (choiceDeviceList == ChoiceDeviceList.Readout)
            return this.GetMBusDeviceList(choiceDeviceList);
          return new List<GlobalDeviceId>()
          {
            new GlobalDeviceId()
            {
              MeterType = ValueIdent.ValueIdPart_MeterType.Collector,
              DeviceTypeName = "MINOMAT",
              FirmwareVersion = "2",
              Manufacturer = "MINOL"
            }
          };
        case ZR_ClassLibrary.BusMode.RelayDevice:
          return this.GetMBusDeviceList(choiceDeviceList);
        default:
          throw new ArgumentException("Can not get list! Unknown bus mode: " + baseMode.ToString());
      }
    }

    private List<GlobalDeviceId> GetMBusDeviceListForConfiguration(ChoiceDeviceList choiceDeviceList)
    {
      this.ConfiguratorDeviceList = new List<GlobalDeviceId>();
      this.DeviceCollectorDeviceIndexFromConfiguratorIndex = new List<int>();
      int numberOfDevices = this.MyBus.GetNumberOfDevices();
      for (int DeviceListIndex = 0; DeviceListIndex < numberOfDevices; ++DeviceListIndex)
      {
        DeviceInfo Info;
        if (this.MyBus.GetParameter(out Info, DeviceListIndex))
        {
          ValueIdent.ValueIdPart_MeterType meterType = ValueIdent.ConvertToMeterType(Info.Medium);
          if (Info.DeviceType == DeviceTypes.ZR_Serie3)
          {
            if (meterType != ValueIdent.ValueIdPart_MeterType.Heat && meterType != ValueIdent.ValueIdPart_MeterType.ChangeOverHeat && meterType != ValueIdent.ValueIdPart_MeterType.Cooling)
              continue;
          }
          else if (Info.DeviceType != DeviceTypes.ZR_Serie2)
            continue;
          GlobalDeviceId globalDeviceId = new GlobalDeviceId();
          this.ConfiguratorDeviceList.Add(globalDeviceId);
          this.DeviceCollectorDeviceIndexFromConfiguratorIndex.Add(DeviceListIndex);
          globalDeviceId.Serialnumber = Info.MeterNumber;
          globalDeviceId.Address = (int) Info.A_Field;
          globalDeviceId.MeterType = meterType;
          globalDeviceId.DeviceTypeName = ValueIdent.GetTranslatedValueNameForPartOfValueId((Enum) globalDeviceId.MeterType);
          globalDeviceId.Manufacturer = Info.Manufacturer;
          globalDeviceId.MeterNumber = Convert.ToString(Info.A_Field);
          globalDeviceId.Generation = Info.Version.ToString();
          globalDeviceId.FirmwareVersion = Info.Signature.ToString();
        }
        else
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Device info not available.");
          return (List<GlobalDeviceId>) null;
        }
      }
      return this.ConfiguratorDeviceList;
    }

    [Obsolete]
    private List<GlobalDeviceId> GetMBusDeviceList(ChoiceDeviceList choiceDeviceList)
    {
      ZR_ClassLibrary.BusMode baseMode = this.MyBus.GetBaseMode();
      List<GlobalDeviceId> mbusDeviceList = new List<GlobalDeviceId>();
      int numberOfDevices = this.MyBus.GetNumberOfDevices();
      for (int DeviceListIndex = 0; DeviceListIndex < numberOfDevices; ++DeviceListIndex)
      {
        DeviceInfo Info;
        if (this.MyBus.GetParameter(out Info, DeviceListIndex))
        {
          GlobalDeviceId globalDeviceId = new GlobalDeviceId();
          globalDeviceId.Serialnumber = Info.MeterNumber;
          if (baseMode == ZR_ClassLibrary.BusMode.MBus || baseMode == ZR_ClassLibrary.BusMode.MBusPointToPoint || baseMode == ZR_ClassLibrary.BusMode.RelayDevice || baseMode == ZR_ClassLibrary.BusMode.wMBusC1A || baseMode == ZR_ClassLibrary.BusMode.wMBusC1B || baseMode == ZR_ClassLibrary.BusMode.wMBusS1 || baseMode == ZR_ClassLibrary.BusMode.wMBusS1M || baseMode == ZR_ClassLibrary.BusMode.wMBusS2 || baseMode == ZR_ClassLibrary.BusMode.wMBusT1 || baseMode == ZR_ClassLibrary.BusMode.wMBusT2_meter || baseMode == ZR_ClassLibrary.BusMode.wMBusT2_other)
          {
            globalDeviceId.MeterType = ValueIdent.ConvertToMeterType(Info.Medium);
          }
          else
          {
            int num;
            switch (baseMode)
            {
              case ZR_ClassLibrary.BusMode.MinomatV2:
                if (!string.IsNullOrEmpty(globalDeviceId.Serialnumber))
                {
                  long int64 = ZR_ClassLibrary.Util.ConvertBcdInt64ToInt64((long) ParameterService.ConvertHexStringToUInt32(Info.MeterNumber));
                  globalDeviceId.MeterType = int64 <= 0L ? ValueIdent.ValueIdPart_MeterType.Any : NumberRanges.GetValueIdPart_MeterTypeOfMinolDevice(int64);
                }
                globalDeviceId.IsRegistered = Info.A_Field != byte.MaxValue && Info.A_Field >= (byte) 0 && Info.A_Field < (byte) 100;
                goto label_11;
              case ZR_ClassLibrary.BusMode.Radio2:
              case ZR_ClassLibrary.BusMode.Radio3:
              case ZR_ClassLibrary.BusMode.Radio4:
                num = 1;
                break;
              default:
                num = baseMode == ZR_ClassLibrary.BusMode.Radio3_868_95_RUSSIA ? 1 : 0;
                break;
            }
            globalDeviceId.MeterType = num == 0 ? (baseMode != ZR_ClassLibrary.BusMode.MinomatRadioTest ? ValueIdent.ValueIdPart_MeterType.Any : ValueIdent.ValueIdPart_MeterType.Other) : ValueIdent.ConvertToMeterType(Info.DeviceType);
          }
label_11:
          globalDeviceId.DeviceTypeName = ValueIdent.GetTranslatedValueNameForPartOfValueId((Enum) globalDeviceId.MeterType);
          globalDeviceId.Manufacturer = Info.Manufacturer;
          globalDeviceId.MeterNumber = Convert.ToString(Info.A_Field);
          globalDeviceId.Generation = Info.Version.ToString();
          globalDeviceId.FirmwareVersion = Info.Signature.ToString();
          mbusDeviceList.Add(globalDeviceId);
          if (choiceDeviceList == ChoiceDeviceList.Readout)
          {
            List<GlobalDeviceId> subDevices = TranslationRulesManager.GetSubDevices(Info.GetZDFParameterString());
            if (subDevices != null)
              globalDeviceId.SubDevices.AddRange((IEnumerable<GlobalDeviceId>) subDevices);
          }
        }
        else
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Device info not available.");
          return (List<GlobalDeviceId>) null;
        }
      }
      return mbusDeviceList;
    }

    public bool DeviceList_AddDevice(GlobalDeviceId device)
    {
      return this.DeviceList_AddDeviceList(new List<GlobalDeviceId>()
      {
        device
      });
    }

    public bool DeviceList_AddDeviceList(List<GlobalDeviceId> deviceList)
    {
      if (this.LoadedComponentInfo.CommunicationModel != 0)
        return true;
      if (deviceList == null)
        return false;
      this.GarantHandlerLoaded(false);
      this.BreakRequest = false;
      ZR_ClassLibrary.BusMode baseMode = this.MyBus.GetBaseMode();
      switch (baseMode)
      {
        case ZR_ClassLibrary.BusMode.MBusPointToPoint:
        case ZR_ClassLibrary.BusMode.MBus:
          foreach (GlobalDeviceId device in deviceList)
          {
            bool flag1 = !string.IsNullOrEmpty(device.MeterNumber);
            bool flag2 = !string.IsNullOrEmpty(device.Serialnumber);
            DeviceTypes NewType = DeviceTypes.MBus;
            if (!string.IsNullOrEmpty(device.DeviceTypeName))
            {
              if (Enum.IsDefined(typeof (DeviceTypes), (object) device.DeviceTypeName))
                NewType = (DeviceTypes) Enum.Parse(typeof (DeviceTypes), device.DeviceTypeName, true);
              else
                DeviceManager.logger.Fatal("Invalid device type! Value: " + device.DeviceTypeName);
            }
            if (flag1 && !flag2)
            {
              if (!this.MyBus.AddDevice(NewType, int.Parse(device.MeterNumber)))
                return false;
            }
            else
            {
              int PrimaryAddress = string.IsNullOrEmpty(device.MeterNumber) ? 0 : int.Parse(device.MeterNumber);
              string SerialNumber = string.IsNullOrEmpty(device.Serialnumber) ? string.Empty : device.Serialnumber;
              if (!this.MyBus.AddDevice(NewType, PrimaryAddress, SerialNumber))
                return false;
            }
          }
          return true;
        case ZR_ClassLibrary.BusMode.MinomatV2:
          DeviceCollectorFunctions myBus = this.MyBus;
          List<DeviceCollector.MinomatDevice> deviceList1 = new List<DeviceCollector.MinomatDevice>();
          foreach (GlobalDeviceId device in deviceList)
          {
            DeviceCollector.MinomatDevice minomatDevice = new DeviceCollector.MinomatDevice(myBus);
            minomatDevice.Info.MeterNumber = device.Serialnumber;
            deviceList1.Add(minomatDevice);
          }
          return myBus.RegisterHKVE(deviceList1);
        case ZR_ClassLibrary.BusMode.MinomatV3:
        case ZR_ClassLibrary.BusMode.MinomatV4:
        case ZR_ClassLibrary.BusMode.Minol_Device:
        case ZR_ClassLibrary.BusMode.Radio2:
        case ZR_ClassLibrary.BusMode.Radio3:
        case ZR_ClassLibrary.BusMode.Radio4:
        case ZR_ClassLibrary.BusMode.wMBusS1:
        case ZR_ClassLibrary.BusMode.wMBusS1M:
        case ZR_ClassLibrary.BusMode.wMBusS2:
        case ZR_ClassLibrary.BusMode.wMBusT1:
        case ZR_ClassLibrary.BusMode.wMBusT2_meter:
        case ZR_ClassLibrary.BusMode.wMBusT2_other:
        case ZR_ClassLibrary.BusMode.wMBusC1A:
        case ZR_ClassLibrary.BusMode.wMBusC1B:
        case ZR_ClassLibrary.BusMode.Radio3_868_95_RUSSIA:
        case ZR_ClassLibrary.BusMode.RadioMS:
        case ZR_ClassLibrary.BusMode.SmokeDetector:
          foreach (GlobalDeviceId device in deviceList)
          {
            if (device.Serialnumber != null)
            {
              DeviceManager.logger.Debug("Expected device: " + device.Serialnumber);
              if (!this.MyBus.AddDevice(DeviceTypes.Minol_Device, 0, device.Serialnumber))
              {
                ZR_ClassLibMessages.LastErrorInfo errorAndClearError = ZR_ClassLibMessages.GetLastErrorAndClearError();
                DeviceManager.logger.Error("Failed add device to expected devices! Error: " + errorAndClearError.LastErrorDescription);
              }
            }
          }
          return true;
        default:
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented, "The AddDevice method is not supported for this device! BusMode: " + baseMode.ToString());
          return false;
      }
    }

    public bool DeviceList_DeleteSelectedDevice()
    {
      this.BreakRequest = false;
      return this.MyBus.DeleteSelectedDevice();
    }

    public int DeviceList_GetIndexOfSelectedDevice()
    {
      int ofSelectedDevice = this.MyBus.GetIndexOfSelectedDevice();
      if (this.DeviceManagerMode != DeviceManagerModes.DeviceListBusControlled)
        return ofSelectedDevice;
      if (this.DeviceCollectorDeviceIndexFromConfiguratorIndex != null)
      {
        for (int index = 0; index < this.DeviceCollectorDeviceIndexFromConfiguratorIndex.Count; ++index)
        {
          if (this.DeviceCollectorDeviceIndexFromConfiguratorIndex[index] == ofSelectedDevice)
            return index;
        }
      }
      return -1;
    }

    public bool DeviceList_SelectDevice(GlobalDeviceId device)
    {
      if (device == null || string.IsNullOrEmpty(device.Serialnumber))
        return false;
      this.GarantHandlerLoaded();
      this.BreakRequest = false;
      return this.SelectedHandler.SelectDevice(device);
    }

    public bool DeviceList_SelectDevice(int deviceIndex)
    {
      return this.DeviceManagerMode != DeviceManagerModes.DeviceListBusControlled ? this.MyBus.SetSelectedDeviceByIndex(deviceIndex) : this.MyBus.SetSelectedDeviceByIndex(this.DeviceCollectorDeviceIndexFromConfiguratorIndex[deviceIndex]);
    }

    internal ZR_ClassLibrary.BusMode? GetCurrentBusMode()
    {
      SortedList<DeviceCollectorSettings, object> collectorSettings = this.MyBus.GetDeviceCollectorSettings();
      if (collectorSettings == null)
        return new ZR_ClassLibrary.BusMode?();
      return !collectorSettings.ContainsKey(DeviceCollectorSettings.BusMode) ? new ZR_ClassLibrary.BusMode?() : new ZR_ClassLibrary.BusMode?((ZR_ClassLibrary.BusMode) collectorSettings[DeviceCollectorSettings.BusMode]);
    }

    public SortedList<long, SortedList<DateTime, ReadingValue>> SaveValuesToDatabase(
      int meterId,
      int nodeId,
      SortedList<long, SortedList<DateTime, ReadingValue>> values)
    {
      lock (this.databaseMutex)
        return MeterDatabase.SaveMeterValues(meterId, nodeId, values);
    }
  }
}


--- DeviceManagerModes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.DeviceManagerModes
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

#nullable disable
namespace Devices
{
  public enum DeviceManagerModes
  {
    DeviceListConfiguratorControlled,
    DeviceListBusControlled,
  }
}


--- EdcHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.EdcHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using EDC_Handler;
using NLog;
using StartupLib;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class EdcHandler(DeviceManager MyDeviceManager) : BaseDevice(MyDeviceManager)
  {
    private SortedList<OverrideID, ConfigurationParameter> newParameters;
    private static Logger logger = LogManager.GetLogger(nameof (EdcHandler));
    private EDC_HandlerFunctions edc;

    public override event EventHandlerEx<int> OnProgress;

    public override object GetHandler()
    {
      this.GarantHandlerLoaded();
      return (object) this.edc;
    }

    private void GarantHandlerLoaded()
    {
      if (this.edc != null)
        return;
      if (ZR_Component.CommonGmmInterface != null)
      {
        ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.EDC_Handler);
        this.edc = (EDC_HandlerFunctions) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.EDC_Handler];
      }
      else
        this.edc = new EDC_HandlerFunctions((IDeviceCollector) this.MyDeviceManager.MyBus);
      this.edc.OnProgress += new ValueEventHandler<int>(this.edc_OnProgress);
    }

    private void edc_OnProgress(object sender, int e)
    {
      if (this.OnProgress == null)
        return;
      this.OnProgress(sender, e);
    }

    internal override void ShowHandlerWindow()
    {
      this.GarantHandlerLoaded();
      this.edc.ShowHandlerWindow();
    }

    public override void Dispose()
    {
      if (this.edc == null)
        return;
      this.edc.OnProgress -= new ValueEventHandler<int>(this.edc_OnProgress);
      this.edc.GMM_Dispose();
      this.edc = (EDC_HandlerFunctions) null;
    }

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      this.GarantHandlerLoaded();
      if (this.edc.Meter == null || this.edc.Meter.Version == null)
        return (List<GlobalDeviceId>) null;
      return new List<GlobalDeviceId>()
      {
        new GlobalDeviceId()
        {
          Serialnumber = this.edc.Meter.GetSerialnumberSecondary().Value.ToString(),
          DeviceTypeName = this.edc.Meter.Version.Type.ToString(),
          Manufacturer = this.edc.Meter.GetManufacturerSecondary(),
          FirmwareVersion = this.edc.Meter.Version.ToString(),
          MeterType = ValueIdent.ValueIdPart_MeterType.Water
        }
      };
    }

    public override bool SelectDevice(GlobalDeviceId device)
    {
      this.GarantHandlerLoaded();
      return true;
    }

    public override bool Read(StructureTreeNode structureTreeNode, List<long> filter)
    {
      if (structureTreeNode == null)
        throw new NullReferenceException(nameof (structureTreeNode));
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.GarantHandlerLoaded();
      GMM_EventArgs eventMessage = new GMM_EventArgs("");
      try
      {
        eventMessage.EventMessage = "Read device";
        this.MyDeviceManager.RaiseEvent(eventMessage);
        return !eventMessage.Cancel && this.edc.ReadDevice();
      }
      catch (Exception ex)
      {
        eventMessage.EventMessage = "Can not read (SN: " + structureTreeNode.SerialNumber + ") Reason: " + ex.Message;
        this.MyDeviceManager.RaiseEvent(eventMessage);
      }
      return false;
    }

    public override bool ReadAll(List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.GarantHandlerLoaded();
      bool flag = this.edc.ReadDevice(true);
      if (flag)
        this.FireEventOnValueIdentSetReceived();
      return flag;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      string serialnumber)
    {
      return this.GetValues(ref ValueList);
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      if (this.edc == null)
        return false;
      List<long> filter = (List<long>) null;
      if (ValueList == null)
        ValueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      else if (ValueList.Count > 0)
      {
        filter = new List<long>();
        filter.AddRange((IEnumerable<long>) ValueList.Keys);
      }
      ValueList = this.edc.GetValues(filter);
      return true;
    }

    protected void AddValue(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      DateTime timePoint,
      long valueIdent,
      object obj)
    {
      ReadingValue readingValue = new ReadingValue();
      readingValue.value = Util.ToDouble(obj);
      readingValue.state = ReadingValueState.ok;
      if (valueList.ContainsKey(valueIdent))
      {
        if (valueList[valueIdent].ContainsKey(timePoint))
          return;
        valueList[valueIdent].Add(timePoint, readingValue);
      }
      else
        valueList.Add(valueIdent, new SortedList<DateTime, ReadingValue>()
        {
          {
            timePoint,
            readingValue
          }
        });
    }

    protected void AddErrorValue(
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      ValueIdent.ValueIdPart_MeterType meterType,
      ValueIdent.ValueIdentError error,
      DateTime? timepoint)
    {
      long valueIdentOfError = ValueIdent.GetValueIdentOfError(meterType, error);
      ReadingValue readingValue = new ReadingValue();
      readingValue.value = 1.0;
      SortedList<DateTime, ReadingValue> sortedList = new SortedList<DateTime, ReadingValue>();
      if (timepoint.HasValue)
      {
        sortedList.Add(timepoint.Value, readingValue);
      }
      else
      {
        DateTime now = DateTime.Now;
        sortedList.Add(new DateTime(now.Year, now.Month, now.Day), readingValue);
      }
      ValueList.Add(valueIdentOfError, sortedList);
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      this.newParameters = (SortedList<OverrideID, ConfigurationParameter>) null;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.GarantHandlerLoaded();
      if (!this.edc.ReadDevice())
        return false;
      List<GlobalDeviceId> globalDeviceIdList = this.GetGlobalDeviceIdList();
      if (globalDeviceIdList == null && globalDeviceIdList.Count != 1)
        return false;
      UpdatedDeviceIdentification = globalDeviceIdList[0];
      return true;
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      if (this.edc == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      if (SubDevice != 0)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "EDC device has no sub devices!");
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      }
      SortedList<OverrideID, ConfigurationParameter> r = new SortedList<OverrideID, ConfigurationParameter>();
      EDC_Meter meter = this.edc.Meter;
      if (meter == null || meter.Version == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      DeviceVersion version = meter.Version;
      if (UserManager.IsNewLicenseModel())
      {
        EdcHandler.AddParam(false, r, OverrideID.FirmwareVersion, (object) version.VersionString);
        EdcHandler.AddParam(false, r, OverrideID.SerialNumberFull, (object) meter.GetSerialnumberFull());
        EdcHandler.AddParam(false, r, OverrideID.Manufacturer, (object) meter.GetManufacturerPrimary());
        EdcHandler.AddParam(false, r, OverrideID.DeviceHasError, (object) meter.GetDeviceErrorState());
        EdcHandler.AddParam(false, r, OverrideID.SerialNumber, (object) meter.GetSerialnumberPrimary());
        EdcHandler.AddParam(false, r, OverrideID.MBusGeneration, (object) meter.GetMBusGenerationPrimary());
        EdcHandler.AddParam(false, r, OverrideID.DeviceClock, (object) meter.GetSystemTime());
        EdcHandler.AddParam(false, r, OverrideID.WarningInfo, (object) meter.GetWarnings());
        EdcHandler.AddParam(false, r, OverrideID.Manipulation, (object) meter.GetMagnetDetectionState());
        EdcHandler.AddParam(true, r, OverrideID.PulseMultiplier, (object) (Decimal) meter.GetPulseMultiplier().Value);
        EdcHandler.AddParam(true, r, OverrideID.PulseEnabled, (object) meter.GetCoilSampling());
        EdcHandler.AddParam(true, r, OverrideID.TimeZone, (object) (Decimal) meter.GetTimeZone().Value);
        EdcHandler.AddParam(true, r, OverrideID.MediumSecondary, (object) meter.GetMediumSecondary());
        EdcHandler.AddParam(true, r, OverrideID.SerialNumberSecondary, (object) meter.GetSerialnumberSecondary());
        EdcHandler.AddParam(true, r, OverrideID.MBusAddress, (object) meter.GetMBusAddressSecondary());
        EdcHandler.AddParam(true, r, OverrideID.ManufacturerSecondary, (object) meter.GetManufacturerSecondary());
        EdcHandler.AddParam(true, r, OverrideID.Medium, (object) meter.GetMediumPrimary());
        EdcHandler.AddParam(true, r, OverrideID.TotalVolumePulses, (object) meter.GetMeterValue());
        EdcHandler.AddParam(true, r, OverrideID.DueDate, new ConfigurationParameter(OverrideID.DueDate, (object) meter.GetDueDate())
        {
          Format = "{0:dd.MM}"
        });
        EdcHandler.AddParam(true, r, OverrideID.RegisterDigits, (object) meter.GetCogCount());
        EdcHandler.AddParam(true, r, OverrideID.PulseBlockLimit, (object) meter.GetPulseBlockLimit());
        EdcHandler.AddParam(true, r, OverrideID.PulseLeakLimit, (object) meter.GetPulseLeakLimit());
        EdcHandler.AddParam(true, r, OverrideID.PulseUnleakLimit, (object) meter.GetPulseUnleakLimit());
        EdcHandler.AddParam(true, r, OverrideID.PulseLeakLower, (object) meter.GetPulseLeakLower());
        EdcHandler.AddParam(true, r, OverrideID.PulseLeakUpper, (object) meter.GetPulseLeakUpper());
        EdcHandler.AddParam(true, r, OverrideID.PulseBackLimit, (object) meter.GetPulseBackLimit());
        EdcHandler.AddParam(true, r, OverrideID.PulseUnbackLimit, (object) meter.GetPulseUnbackLimit());
        EdcHandler.AddParam(true, r, OverrideID.OversizeDiff, (object) meter.GetOversizeDiff());
        EdcHandler.AddParam(true, r, OverrideID.OversizeLimit, (object) meter.GetOversizeLimit());
        EdcHandler.AddParam(true, r, OverrideID.UndersizeDiff, (object) meter.GetUndersizeDiff());
        EdcHandler.AddParam(true, r, OverrideID.UndersizeLimit, (object) meter.GetUndersizeLimit());
        EdcHandler.AddParam(true, r, OverrideID.BurstDiff, (object) meter.GetBurstDiff());
        EdcHandler.AddParam(true, r, OverrideID.BurstLimit, (object) meter.GetBurstLimit());
        EdcHandler.AddParam(true, r, OverrideID.ClearWarnings, (object) false, true, (string[]) null);
        EdcHandler.AddParam(true, r, OverrideID.ClearAllLoggers, (object) false, true, (string[]) null);
        EdcHandler.AddParam(true, r, OverrideID.SetPcTime, (object) false, true, (string[]) null);
        EdcHandler.AddParam(true, r, OverrideID.ClearManipulation, (object) false, true, (string[]) null);
        EdcHandler.AddParam(false, r, OverrideID.ListType, (object) meter.GetMBusListType());
        EdcHandler.AddParam(true, r, OverrideID.NominalFlow, (object) meter.GetNominalFlow(), false, meter.GetNominalFlowAllowedValues());
        if (meter.Version.Type == EDC_Hardware.EDC_Radio)
        {
          EdcHandler.AddParam(false, r, OverrideID.RadioMode, (object) meter.GetRadioMode());
          EdcHandler.AddParam(false, r, OverrideID.RadioSendInterval, (object) meter.GetRadioTransmitInterval());
          EdcHandler.AddParam(true, r, OverrideID.AESKey, (object) AES.AesKeyToString(meter.GetAESkey()));
          EdcHandler.AddParam(true, r, OverrideID.LongHeader, (object) meter.GetWMBusLongHeaderState());
          EdcHandler.AddParam(true, r, OverrideID.RadioEnabled, (object) meter.GetRadioState());
          EdcHandler.AddParam(true, r, OverrideID.Encryption, (object) meter.GetWMBusEncryptionState());
          int int32 = Convert.ToInt32(meter.GetVolumeAccumulatedNegativ());
          EdcHandler.AddParam(false, r, OverrideID.TotalVolumePulsesNegativ, (object) int32);
        }
        else if (meter.Version.Type == EDC_Hardware.EDC_mBus)
        {
          EdcHandler.AddParam(true, r, OverrideID.PulseoutMode, (object) meter.GetPulseoutMode());
          double num = Math.Round((double) meter.GetPulseoutWidth().Value * 2000.0 / 32768.0, 2);
          EdcHandler.AddParam(true, r, OverrideID.PulseoutWidth, (object) num);
          EdcHandler.AddParam(true, r, OverrideID.PulseoutResolution, (object) meter.GetPulseoutPPP());
          EdcHandler.AddParam(true, r, OverrideID.Baudrate, (object) meter.GetMbusBaud());
        }
        DeviceIdentification deviceIdentification = meter.GetDeviceIdentification();
        if (deviceIdentification != null)
          EdcHandler.AddParam(false, r, OverrideID.MeterID, (object) deviceIdentification.MeterID);
      }
      else
      {
        bool flag1 = false;
        if (UserRights.GlobalUserRights.PackageName == "ConfigurationManagerPro")
          flag1 = true;
        else if (UserRights.GlobalUserRights.PackageName == "ConfigurationManager" && UserRights.GlobalUserRights.OptionPackageName == "Professional")
          flag1 = true;
        bool flag2 = UserRights.GlobalUserRights.PackageName == "Designer";
        bool flag3 = UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer);
        r.Add(OverrideID.FirmwareVersion, new ConfigurationParameter(OverrideID.FirmwareVersion, (object) version.VersionString));
        r.Add(OverrideID.SerialNumberFull, new ConfigurationParameter(OverrideID.SerialNumberFull, (object) meter.GetSerialnumberFull()));
        r.Add(OverrideID.Manufacturer, new ConfigurationParameter(OverrideID.Manufacturer, (object) meter.GetManufacturerPrimary()));
        r.Add(OverrideID.DeviceHasError, new ConfigurationParameter(OverrideID.DeviceHasError, (object) meter.GetDeviceErrorState()));
        r.Add(OverrideID.SerialNumber, new ConfigurationParameter(OverrideID.SerialNumber, (object) meter.GetSerialnumberPrimary()));
        r.Add(OverrideID.MBusGeneration, new ConfigurationParameter(OverrideID.MBusGeneration, (object) meter.GetMBusGenerationPrimary()));
        r.Add(OverrideID.DeviceClock, new ConfigurationParameter(OverrideID.DeviceClock, (object) meter.GetSystemTime()));
        r.Add(OverrideID.WarningInfo, new ConfigurationParameter(OverrideID.WarningInfo, (object) meter.GetWarnings()));
        r.Add(OverrideID.Manipulation, new ConfigurationParameter(OverrideID.Manipulation, (object) meter.GetMagnetDetectionState()));
        r.Add(OverrideID.PulseMultiplier, new ConfigurationParameter(OverrideID.PulseMultiplier, (object) (Decimal) meter.GetPulseMultiplier().Value)
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.PulseEnabled, new ConfigurationParameter(OverrideID.PulseEnabled, (object) meter.GetCoilSampling())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.TimeZone, new ConfigurationParameter(OverrideID.TimeZone, (object) (Decimal) meter.GetTimeZone().Value)
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.MediumSecondary, new ConfigurationParameter(OverrideID.MediumSecondary, (object) meter.GetMediumSecondary())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.SerialNumberSecondary, new ConfigurationParameter(OverrideID.SerialNumberSecondary, (object) meter.GetSerialnumberSecondary())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.MBusAddress, new ConfigurationParameter(OverrideID.MBusAddress, (object) meter.GetMBusAddressSecondary())
        {
          HasWritePermission = true
        });
        if (flag2)
          r.Add(OverrideID.ManufacturerSecondary, new ConfigurationParameter(OverrideID.ManufacturerSecondary, (object) meter.GetManufacturerSecondary())
          {
            HasWritePermission = true
          });
        r.Add(OverrideID.Medium, new ConfigurationParameter(OverrideID.Medium, (object) meter.GetMediumPrimary())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.TotalVolumePulses, new ConfigurationParameter(OverrideID.TotalVolumePulses, (object) meter.GetMeterValue())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.DueDate, new ConfigurationParameter(OverrideID.DueDate, (object) meter.GetDueDate())
        {
          HasWritePermission = true,
          Format = "{0:dd.MM}"
        });
        r.Add(OverrideID.RegisterDigits, new ConfigurationParameter(OverrideID.RegisterDigits, (object) meter.GetCogCount())
        {
          HasWritePermission = true
        });
        if (flag1 | flag2 | flag3)
        {
          r.Add(OverrideID.PulseBlockLimit, new ConfigurationParameter(OverrideID.PulseBlockLimit, (object) meter.GetPulseBlockLimit())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseLeakLimit, new ConfigurationParameter(OverrideID.PulseLeakLimit, (object) meter.GetPulseLeakLimit())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseUnleakLimit, new ConfigurationParameter(OverrideID.PulseUnleakLimit, (object) meter.GetPulseUnleakLimit())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseLeakLower, new ConfigurationParameter(OverrideID.PulseLeakLower, (object) meter.GetPulseLeakLower())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseLeakUpper, new ConfigurationParameter(OverrideID.PulseLeakUpper, (object) meter.GetPulseLeakUpper())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseBackLimit, new ConfigurationParameter(OverrideID.PulseBackLimit, (object) meter.GetPulseBackLimit())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseUnbackLimit, new ConfigurationParameter(OverrideID.PulseUnbackLimit, (object) meter.GetPulseUnbackLimit())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.OversizeDiff, new ConfigurationParameter(OverrideID.OversizeDiff, (object) meter.GetOversizeDiff())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.OversizeLimit, new ConfigurationParameter(OverrideID.OversizeLimit, (object) meter.GetOversizeLimit())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.UndersizeDiff, new ConfigurationParameter(OverrideID.UndersizeDiff, (object) meter.GetUndersizeDiff())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.UndersizeLimit, new ConfigurationParameter(OverrideID.UndersizeLimit, (object) meter.GetUndersizeLimit())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.BurstDiff, new ConfigurationParameter(OverrideID.BurstDiff, (object) meter.GetBurstDiff())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.BurstLimit, new ConfigurationParameter(OverrideID.BurstLimit, (object) meter.GetBurstLimit())
          {
            HasWritePermission = true
          });
        }
        r.Add(OverrideID.NominalFlow, new ConfigurationParameter(OverrideID.NominalFlow, (object) meter.GetNominalFlow())
        {
          HasWritePermission = true,
          AllowedValues = meter.GetNominalFlowAllowedValues()
        });
        if (meter.Version.Type == EDC_Hardware.EDC_mBus)
        {
          r.Add(OverrideID.PulseoutResolution, new ConfigurationParameter(OverrideID.PulseoutResolution, (object) meter.GetPulseoutPPP())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseoutMode, new ConfigurationParameter(OverrideID.PulseoutMode, (object) meter.GetPulseoutMode())
          {
            HasWritePermission = true
          });
          double ParameterValue = Math.Round((double) meter.GetPulseoutWidth().Value * 2000.0 / 32768.0, 2);
          r.Add(OverrideID.PulseoutWidth, new ConfigurationParameter(OverrideID.PulseoutWidth, (object) ParameterValue)
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.Baudrate, new ConfigurationParameter(OverrideID.Baudrate, (object) meter.GetMbusBaud())
          {
            HasWritePermission = true
          });
        }
        r.Add(OverrideID.ClearWarnings, new ConfigurationParameter(OverrideID.ClearWarnings)
        {
          HasWritePermission = true,
          ParameterValue = (object) false
        });
        r.Add(OverrideID.ClearAllLoggers, new ConfigurationParameter(OverrideID.ClearAllLoggers)
        {
          HasWritePermission = true,
          ParameterValue = (object) false
        });
        r.Add(OverrideID.SetPcTime, new ConfigurationParameter(OverrideID.SetPcTime)
        {
          HasWritePermission = true,
          ParameterValue = (object) false
        });
        if (flag2 | flag1 | flag3)
          r.Add(OverrideID.ClearManipulation, new ConfigurationParameter(OverrideID.ClearManipulation)
          {
            HasWritePermission = true,
            ParameterValue = (object) false
          });
        DeviceIdentification deviceIdentification = meter.GetDeviceIdentification();
        if (deviceIdentification != null)
          r.Add(OverrideID.MeterID, new ConfigurationParameter(OverrideID.MeterID, (object) deviceIdentification.MeterID));
        r.Add(OverrideID.ListType, new ConfigurationParameter(OverrideID.ListType, (object) meter.GetMBusListType())
        {
          HasWritePermission = flag3
        });
        if (version.Type == EDC_Hardware.EDC_Radio)
        {
          r.Add(OverrideID.RadioMode, new ConfigurationParameter(OverrideID.RadioMode, (object) meter.GetRadioMode()));
          r.Add(OverrideID.RadioSendInterval, new ConfigurationParameter(OverrideID.RadioSendInterval, (object) meter.GetRadioTransmitInterval()));
          r.Add(OverrideID.AESKey, new ConfigurationParameter(OverrideID.AESKey, (object) AES.AesKeyToString(meter.GetAESkey()))
          {
            HasWritePermission = flag2 | flag1 | flag3
          });
          r.Add(OverrideID.LongHeader, new ConfigurationParameter(OverrideID.LongHeader, (object) meter.GetWMBusLongHeaderState())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.RadioEnabled, new ConfigurationParameter(OverrideID.RadioEnabled, (object) meter.GetRadioState())
          {
            HasWritePermission = true
          });
          int int32 = Convert.ToInt32(meter.GetVolumeAccumulatedNegativ());
          r.Add(OverrideID.TotalVolumePulsesNegativ, new ConfigurationParameter(OverrideID.TotalVolumePulsesNegativ, (object) int32));
          if (flag2 | flag1 | flag3)
            r.Add(OverrideID.Encryption, new ConfigurationParameter(OverrideID.Encryption, (object) meter.GetWMBusEncryptionState())
            {
              HasWritePermission = true
            });
        }
      }
      if (this.newParameters != null && this.newParameters.Count > 0)
      {
        foreach (KeyValuePair<OverrideID, ConfigurationParameter> newParameter in this.newParameters)
          r[newParameter.Key] = newParameter.Value;
      }
      return r;
    }

    private static void AddParam(
      bool canChanged,
      SortedList<OverrideID, ConfigurationParameter> r,
      OverrideID overrideID,
      object obj)
    {
      EdcHandler.AddParam(canChanged, r, overrideID, obj, false, (string[]) null);
    }

    private static void AddParam(
      bool canChanged,
      SortedList<OverrideID, ConfigurationParameter> r,
      OverrideID overrideID,
      object obj,
      bool isFunction,
      string[] allowedValues)
    {
      if (!UserManager.IsConfigParamVisible(overrideID))
        return;
      bool flag = false;
      if (canChanged)
        flag = UserManager.IsConfigParamEditable(overrideID);
      r.Add(overrideID, new ConfigurationParameter(overrideID, obj)
      {
        HasWritePermission = flag,
        AllowedValues = allowedValues,
        IsFunction = isFunction
      });
    }

    private static void AddParam(
      bool canChanged,
      SortedList<OverrideID, ConfigurationParameter> r,
      OverrideID overrideID,
      ConfigurationParameter p)
    {
      if (!UserManager.IsConfigParamVisible(overrideID))
        return;
      if (canChanged)
        p.HasWritePermission = UserManager.IsConfigParamEditable(overrideID);
      r.Add(overrideID, p);
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList,
      int SubDevice)
    {
      if (parameterList == null || this.edc == null || this.edc.Meter == null || this.edc.Meter.Version == null)
        return false;
      SortedList<OverrideID, ConfigurationParameter> sortedList = new SortedList<OverrideID, ConfigurationParameter>();
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> parameter in parameterList)
      {
        if (parameter.Value.HasWritePermission && parameter.Value.ParameterValue != null)
        {
          EDC_Meter meter = this.edc.Meter;
          switch (parameter.Key)
          {
            case OverrideID.MBusAddress:
              if (!meter.SetMBusAddressSecondary(Convert.ToByte(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.Baudrate:
              if (!meter.SetMbusBaud((MbusBaud) Enum.Parse(typeof (MbusBaud), parameter.Value.ParameterValue.ToString(), true)))
                return false;
              break;
            case OverrideID.Medium:
              if (!meter.SetMediumPrimary((MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), parameter.Value.ParameterValue.ToString(), true)))
                return false;
              break;
            case OverrideID.DueDate:
              if (!meter.SetDueDate(Convert.ToDateTime(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.Manipulation:
              if (!meter.SetMagnetDetectionState(Convert.ToBoolean(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.RadioEnabled:
              if (!meter.SetRadioState(Convert.ToBoolean(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.TimeZone:
              if (!meter.SetTimeZone(Convert.ToInt32(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.PulseMultiplier:
              if (!meter.SetPulseMultiplier(Convert.ToByte(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.RegisterDigits:
              if (!meter.SetCogCount(Convert.ToByte(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.AESKey:
              if (!meter.SetAESkey(parameter.Value.ParameterValue))
                return false;
              break;
            case OverrideID.PulseBlockLimit:
              if (!meter.SetPulseBlockLimit(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.PulseLeakLimit:
              if (!meter.SetPulseLeakLimit(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.PulseUnleakLimit:
              if (!meter.SetPulseUnleakLimit(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.PulseLeakLower:
              if (!meter.SetPulseLeakLower(Convert.ToInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.PulseLeakUpper:
              if (!meter.SetPulseLeakUpper(Convert.ToInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.PulseBackLimit:
              if (!meter.SetPulseBackLimit(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.PulseUnbackLimit:
              if (!meter.SetPulseUnbackLimit(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.OversizeDiff:
              if (!meter.SetOversizeDiff(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.OversizeLimit:
              if (!meter.SetOversizeLimit(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.UndersizeDiff:
              if (!meter.SetUndersizeDiff(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.UndersizeLimit:
              if (!meter.SetUndersizeLimit(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.BurstDiff:
              if (!meter.SetBurstDiff(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.BurstLimit:
              if (!meter.SetBurstLimit(Convert.ToUInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.SerialNumberSecondary:
              if (!meter.SetSerialnumberSecondary(Convert.ToUInt32(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.LongHeader:
              if (!meter.SetWMBusLongHeaderState(Convert.ToBoolean(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.MediumSecondary:
              if (!meter.SetMediumSecondary((MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), parameter.Value.ParameterValue.ToString(), true)))
                return false;
              break;
            case OverrideID.Encryption:
              if (!meter.SetWMBusEncryptionState(Convert.ToBoolean(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.ManufacturerSecondary:
              if (!meter.SetManufacturerSecondary(parameter.Value.ParameterValue.ToString()))
                return false;
              break;
            case OverrideID.PulseEnabled:
              if (!meter.SetCoilSampling(Convert.ToBoolean(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.PulseoutMode:
              if (!meter.SetPulseoutMode((PulseoutMode) Enum.Parse(typeof (PulseoutMode), parameter.Value.ParameterValue.ToString())))
                return false;
              break;
            case OverrideID.PulseoutWidth:
              ushort num = (ushort) (Convert.ToDouble(parameter.Value.ParameterValue) / 2000.0 * 32768.0);
              if (!meter.SetPulseoutWidth(num))
                return false;
              break;
            case OverrideID.PulseoutResolution:
              if (!meter.SetPulseoutPPP(Convert.ToInt16(parameter.Value.ParameterValue)))
                return false;
              break;
            case OverrideID.NominalFlow:
              meter.SetNominalFlow(parameter.Value.ParameterValue.ToString());
              break;
            default:
              sortedList.Add(parameter.Key, parameter.Value);
              break;
          }
        }
      }
      if (this.newParameters == null)
      {
        this.newParameters = sortedList;
      }
      else
      {
        foreach (KeyValuePair<OverrideID, ConfigurationParameter> keyValuePair in sortedList)
        {
          if (this.newParameters.ContainsKey(keyValuePair.Key))
            this.newParameters[keyValuePair.Key] = keyValuePair.Value;
          else
            this.newParameters.Add(keyValuePair.Key, keyValuePair.Value);
        }
      }
      return true;
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList)
    {
      return this.SetConfigurationParameters(parameterList, 0);
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      if (this.newParameters == null || this.edc == null)
        return false;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      try
      {
        EDC_Meter meter = this.edc.Meter;
        if (meter == null || meter.Version == null)
          return false;
        foreach (KeyValuePair<OverrideID, ConfigurationParameter> newParameter in this.newParameters)
        {
          if (newParameter.Value.HasWritePermission && newParameter.Value.ParameterValue != null)
          {
            switch (newParameter.Key)
            {
              case OverrideID.TotalVolumePulses:
                if (!this.edc.WriteMeterValue(Convert.ToUInt32(newParameter.Value.ParameterValue)))
                  return false;
                break;
              case OverrideID.ClearAllLoggers:
                if (Convert.ToBoolean(newParameter.Value.ParameterValue) && (!this.edc.LogClearAndDisableLog() || !this.edc.LogEnable() && !this.edc.LogEnable() && !this.edc.LogEnable()))
                  return false;
                continue;
              case OverrideID.SetPcTime:
                if (Convert.ToBoolean(newParameter.Value.ParameterValue) && !this.edc.WriteSystemTime(DateTime.Now))
                  return false;
                continue;
              case OverrideID.ClearWarnings:
                if (Convert.ToBoolean(newParameter.Value.ParameterValue))
                {
                  if (this.edc.Meter.Version.Type == EDC_Hardware.EDC_Radio)
                  {
                    if (!this.edc.RemovalFlagClear() || !this.edc.TamperFlagClear() || !this.edc.BackflowFlagClear() || !this.edc.LeakFlagClear() || !this.edc.BlockFlagClear() || !this.edc.OversizeFlagClear() || !this.edc.UndersizeFlagClear() || !this.edc.BurstFlagClear())
                      return false;
                    break;
                  }
                  if (this.edc.Meter.Version.Type == EDC_Hardware.EDC_mBus)
                  {
                    Warning? nullable = this.edc.Meter.GetWarnings();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TAMPER_A | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    nullable = nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.REMOVAL_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?();
                    if (!this.edc.Meter.SetWarnings((nullable.HasValue ? new Warning?(nullable.GetValueOrDefault() & (Warning.APP_BUSY | Warning.ABNORMAL | Warning.BATT_LOW | Warning.PERMANENT_ERROR | Warning.TEMPORARY_ERROR | Warning.TAMPER_A | Warning.LEAK | Warning.LEAK_A | Warning.UNDERSIZE | Warning.BLOCK_A | Warning.BACKFLOW | Warning.BACKFLOW_A | Warning.INTERFERE | Warning.OVERSIZE | Warning.BURST)) : new Warning?()).Value))
                      return false;
                    break;
                  }
                  break;
                }
                continue;
              case OverrideID.ClearManipulation:
                if (Convert.ToBoolean(newParameter.Value.ParameterValue) && !meter.SetMagnetDetectionState(false))
                  return false;
                continue;
              default:
                throw new ArgumentException("Ignored OverrideID found: " + newParameter.ToString());
            }
          }
        }
        if (!this.edc.WriteDevice())
          return false;
        this.newParameters = (SortedList<OverrideID, ConfigurationParameter>) null;
        return true;
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription("Failed to write device! " + ex.Message);
        return false;
      }
    }

    public override bool BeginSearchDevices()
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      return this.ReadAll((List<long>) null);
    }

    private void FireEventOnValueIdentSetReceived()
    {
      if (!this.MyDeviceManager.IsValueIdentSetReceivedEventEnabled || this.edc.Meter == null || this.edc.Meter.Version == null)
        return;
      uint? serialnumberSecondary = this.edc.Meter.GetSerialnumberSecondary();
      ValueIdentSet e = new ValueIdentSet();
      e.Manufacturer = this.edc.Meter.GetManufacturerSecondary();
      e.Version = this.edc.Meter.Version.VersionString;
      MBusDeviceType? mediumSecondary = this.edc.Meter.GetMediumSecondary();
      e.DeviceType = !mediumSecondary.HasValue ? MBusDeviceType.WATER.ToString() : mediumSecondary.Value.ToString();
      if (serialnumberSecondary.HasValue)
        e.SerialNumber = serialnumberSecondary.ToString();
      e.ZDF = "SID;" + e.SerialNumber + ";MAN;" + e.Manufacturer + ";MED;" + e.DeviceType;
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      if (this.GetValues(ref ValueList))
        e.AvailableValues = ValueList;
      this.MyDeviceManager.OnValueIdentSetReceived((object) this, e);
    }
  }
}


--- GmmComponentInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.GmmComponentInfo
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using System;

#nullable disable
namespace Devices
{
  public class GmmComponentInfo
  {
    public string HandlerName { get; internal set; }

    public string[] SupportedDevices { get; internal set; }

    public CommunicationModels CommunicationModel { get; internal set; }

    public Type WrapperType { get; internal set; }

    internal GmmComponentInfo(
      string handlerName,
      string[] supportedDevices,
      CommunicationModels communicationModel,
      Type wrapperType)
    {
      this.HandlerName = handlerName;
      this.SupportedDevices = supportedDevices;
      this.CommunicationModel = communicationModel;
      this.WrapperType = wrapperType;
    }
  }
}


--- GmmStructureInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.GmmStructureInfo
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using System;
using System.Collections.Generic;
using System.Linq;

#nullable disable
namespace Devices
{
  public static class GmmStructureInfo
  {
    public static List<GmmComponentInfo> ComponentInfos { get; private set; }

    public static void Init(bool isPlugin)
    {
      if (GmmStructureInfo.ComponentInfos != null && GmmStructureInfo.ComponentInfos.Count > 0)
        return;
      GmmStructureInfo.ComponentInfos = new List<GmmComponentInfo>();
      GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("M8_Handler", new string[1]
      {
        "M8"
      }, CommunicationModels.CommunicationPort, typeof (CommonHandlerWrapper)));
      GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("EDCL_Handler", new string[1]
      {
        "EDCL"
      }, CommunicationModels.CommunicationPort, typeof (CommonHandlerWrapper)));
      GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("NFCL_Handler", new string[1]
      {
        "NFCL"
      }, CommunicationModels.CommunicationPort, typeof (CommonHandlerWrapper)));
      GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("PDCL2_Handler", new string[1]
      {
        "PDCLL"
      }, CommunicationModels.CommunicationPort, typeof (CommonHandlerWrapper)));
      GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("S4_Handler", new string[1]
      {
        "IUW"
      }, CommunicationModels.CommunicationPort, typeof (CommonHandlerWrapper)));
      if (isPlugin)
        GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("S3_Handler", new string[2]
        {
          "C5",
          "WR4"
        }, CommunicationModels.CommunicationPort, typeof (Series3DeviceByHandler)));
      else
        GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("S3_Handler", new string[2]
        {
          "C5",
          "WR4"
        }, CommunicationModels.DeviceCollector_AsyncCom, typeof (Series3DeviceByHandler)));
      GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("MinolHandler", new string[1]
      {
        "M7"
      }, CommunicationModels.DeviceCollector_AsyncCom, typeof (MinolDeviceHandler)));
      GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("GMM_Handler", new string[3]
      {
        "C2",
        "C3",
        "WR3"
      }, CommunicationModels.DeviceCollector_AsyncCom, typeof (Series2DeviceByHandler)));
      GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("EDC", new string[1]
      {
        "EDC"
      }, CommunicationModels.DeviceCollector_AsyncCom, typeof (EdcHandler)));
      GmmStructureInfo.ComponentInfos.Add(new GmmComponentInfo("THL_Handler", new string[1]
      {
        "THL"
      }, CommunicationModels.CommunicationPort, typeof (CommonHandlerWrapper)));
    }

    public static GmmComponentInfo GetComponentInfo(string handlerName)
    {
      GmmComponentInfo gmmComponentInfo = (GmmComponentInfo) null;
      if (handlerName != null)
        gmmComponentInfo = GmmStructureInfo.ComponentInfos.FirstOrDefault<GmmComponentInfo>((Func<GmmComponentInfo, bool>) (x => x.HandlerName == handlerName));
      return gmmComponentInfo ?? new GmmComponentInfo((string) null, (string[]) null, CommunicationModels.DeviceCollector_AsyncCom, (Type) null);
    }

    public static string GetMainDeviceNameFromHandlerName(string handlerName)
    {
      return (GmmStructureInfo.ComponentInfos.FirstOrDefault<GmmComponentInfo>((Func<GmmComponentInfo, bool>) (x => x.HandlerName == handlerName)) ?? throw new Exception("Handler name not supported: " + handlerName)).SupportedDevices[0];
    }

    public static string[] GetDeviceNamesFromHandlerName(string handlerName)
    {
      return (GmmStructureInfo.ComponentInfos.FirstOrDefault<GmmComponentInfo>((Func<GmmComponentInfo, bool>) (x => x.HandlerName == handlerName)) ?? throw new Exception("Handler name not supported: " + handlerName)).SupportedDevices;
    }
  }
}


--- MBusDeviceHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.MBusDeviceHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using System;
using System.Collections.Generic;
using ZENNER.CommonLibrary;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class MBusDeviceHandler(DeviceManager MyDeviceManager) : BaseDevice(MyDeviceManager)
  {
    private SortedList<string, DateTime> valuesCanNotReadFromDevice;
    protected SortedList<OverrideID, ConfigurationParameter> ReadConfigParamList;
    protected SortedList<OverrideID, ConfigurationParameter> SetConfigParamList;

    public override event EventHandlerEx<int> OnProgress;

    public override event EventHandlerEx<string> OnProgressMessage;

    public override void Dispose()
    {
      this.valuesCanNotReadFromDevice = (SortedList<string, DateTime>) null;
      this.ReadConfigParamList = (SortedList<OverrideID, ConfigurationParameter>) null;
      this.SetConfigParamList = (SortedList<OverrideID, ConfigurationParameter>) null;
    }

    internal override void ShowHandlerWindow() => this.MyDeviceManager.MyBus.ShowBusWindow();

    public override object GetHandler() => (object) this.MyDeviceManager.MyBus;

    public override bool ReadAll(List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      if (this.valuesCanNotReadFromDevice == null)
        this.valuesCanNotReadFromDevice = new SortedList<string, DateTime>();
      this.valuesCanNotReadFromDevice.Clear();
      ZR_ClassLibrary.BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      ZR_ClassLibrary.BusMode? nullable1 = currentBusMode;
      ZR_ClassLibrary.BusMode busMode1 = ZR_ClassLibrary.BusMode.MBus;
      if (nullable1.GetValueOrDefault() == busMode1 & nullable1.HasValue)
      {
        List<GlobalDeviceId> list = this.MyDeviceManager.DeviceList_GetList();
        if (list == null)
          return false;
        if (list.Count == 1 && string.IsNullOrEmpty(list[0].Serialnumber))
          return this.BeginSearchDevices();
        int count = list.Count;
        GMM_EventArgs eventMessage = new GMM_EventArgs(count.ToString() + " devices available");
        this.MyDeviceManager.RaiseEvent(eventMessage);
        if (eventMessage.Cancel)
          return false;
        int num = 1;
        foreach (GlobalDeviceId device in list)
        {
          if (!this.SelectDevice(device))
            return false;
          string serialnumber = device.Serialnumber;
          GMM_EventArgs gmmEventArgs = eventMessage;
          string[] strArray = new string[7]
          {
            "Read ",
            num.ToString(),
            " of ",
            null,
            null,
            null,
            null
          };
          count = list.Count;
          strArray[3] = count.ToString();
          strArray[4] = " (SN: ";
          strArray[5] = serialnumber;
          strArray[6] = ")";
          string str = string.Concat(strArray);
          gmmEventArgs.EventMessage = str;
          this.MyDeviceManager.RaiseEvent(eventMessage);
          if (eventMessage.Cancel)
            return false;
          DeviceInfo Info;
          if (!this.MyDeviceManager.MyBus.ReadParameter(out Info))
          {
            if (!this.valuesCanNotReadFromDevice.ContainsKey(serialnumber))
              this.valuesCanNotReadFromDevice.Add(serialnumber, DateTime.Now);
            else
              this.valuesCanNotReadFromDevice[serialnumber] = DateTime.Now;
            Info = new DeviceInfo();
            Info.MeterNumber = device.Serialnumber;
          }
          if (Info != null)
            this.FireEventOnValueIdentSetReceived(Info, (DeviceInfo) null);
          ++num;
        }
        return true;
      }
      ZR_ClassLibrary.BusMode? nullable2 = currentBusMode;
      ZR_ClassLibrary.BusMode busMode2 = ZR_ClassLibrary.BusMode.MBusPointToPoint;
      if (!(nullable2.GetValueOrDefault() == busMode2 & nullable2.HasValue) || !this.MyDeviceManager.MyBus.ScanFromAddress(0))
        return false;
      DeviceInfo Info1;
      bool flag = this.MyDeviceManager.MyBus.ReadParameter(out Info1);
      if (flag)
        this.FireEventOnValueIdentSetReceived(Info1, (DeviceInfo) null);
      return flag;
    }

    public override bool Read(StructureTreeNode structureTreeNode, List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      SortedList<DeviceCollectorSettings, object> collectorSettings = this.MyDeviceManager.MyBus.GetDeviceCollectorSettings();
      bool flag = true;
      if (collectorSettings.ContainsKey(DeviceCollectorSettings.OnlySecondaryAddressing))
        flag = Convert.ToBoolean(collectorSettings[DeviceCollectorSettings.OnlySecondaryAddressing]);
      ZR_ClassLibrary.BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      ZR_ClassLibrary.BusMode? nullable = currentBusMode;
      ZR_ClassLibrary.BusMode busMode1 = ZR_ClassLibrary.BusMode.MBus;
      int num;
      if (!(nullable.GetValueOrDefault() == busMode1 & nullable.HasValue))
      {
        nullable = currentBusMode;
        ZR_ClassLibrary.BusMode busMode2 = ZR_ClassLibrary.BusMode.MBusPointToPoint;
        num = nullable.GetValueOrDefault() == busMode2 & nullable.HasValue ? 1 : 0;
      }
      else
        num = 1;
      if (num == 0)
        throw new ArgumentNullException("Wrong 'BusMode'! Please check the DeveiceCollector settings.");
      string nodeSettingsValue = structureTreeNode.GetNodeSettingsValue("RADR");
      if (string.IsNullOrEmpty(nodeSettingsValue))
        throw new ArgumentNullException("Parameter 'RADR' can not be null!");
      if (string.IsNullOrEmpty(structureTreeNode.SerialNumber))
        throw new ArgumentNullException("Parameter 'serailnumber' can not be null!");
      if (this.valuesCanNotReadFromDevice == null)
        this.valuesCanNotReadFromDevice = new SortedList<string, DateTime>();
      this.ClearDeviceList();
      int int32 = Convert.ToInt32(nodeSettingsValue);
      if (!flag ? this.MyDeviceManager.MyBus.SearchSingleDeviceByPrimaryAddress(int32) : (structureTreeNode.SubDeviceIndex != 0 ? this.MyDeviceManager.MyBus.SearchSingleDeviceBySerialNumber(structureTreeNode.Parent.SerialNumber) : this.MyDeviceManager.MyBus.SearchSingleDeviceBySerialNumber(structureTreeNode.SerialNumber)))
        return true;
      if (!this.valuesCanNotReadFromDevice.ContainsKey(structureTreeNode.SerialNumber))
        this.valuesCanNotReadFromDevice.Add(structureTreeNode.SerialNumber, ParameterService.GetNow());
      else
        this.valuesCanNotReadFromDevice[structureTreeNode.SerialNumber] = ParameterService.GetNow();
      return false;
    }

    public override bool SelectDevice(GlobalDeviceId device)
    {
      if (this.MyDeviceManager == null)
        throw new ArgumentNullException("Class member 'MyDeviceManager' can not be null!");
      return !string.IsNullOrEmpty(device.Serialnumber) ? this.MyDeviceManager.MyBus.SetSelectedDeviceBySerialNumber(device.Serialnumber) : this.MyDeviceManager.MyBus.SetSelectedDeviceByPrimaryAddress((int) byte.Parse(device.MeterNumber));
    }

    public override string GetZdfValues()
    {
      if (this.MyDeviceManager == null)
        throw new ArgumentNullException("Class member 'MyDeviceManager' can not be null!");
      DeviceInfo Info;
      return !this.MyDeviceManager.MyBus.GetParameter(out Info) ? string.Empty : Info.GetZDFParameterString();
    }

    public override UniqueIdentification GetUniqueIdentification()
    {
      return this.MyDeviceManager != null ? this.MyDeviceManager.MyBus.GetUniqueIdentificationOfSelectedDevice() : throw new ArgumentNullException("Class member 'MyDeviceManager' can not be null!");
    }

    public override bool BeginSearchDevices()
    {
      if (this.MyDeviceManager == null)
        throw new ArgumentNullException("Class member 'MyDeviceManager' can not be null!");
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.MyDeviceManager.MyBus.OnDeviceListChanged += new EventHandler<BusDevice>(this.MyBus_OnDeviceListChanged);
      this.MyDeviceManager.MyBus.OnProgress += new EventHandlerEx<int>(this.MyBus_OnProgress);
      this.MyDeviceManager.MyBus.OnProgressMessage += new EventHandlerEx<string>(this.MyBus_OnProgressMessage);
      try
      {
        this.MyDeviceManager.MyBus.DeleteBusInfo();
        SortedList<DeviceCollectorSettings, object> collectorSettings = this.MyDeviceManager.MyBus.GetDeviceCollectorSettings();
        if (!collectorSettings.ContainsKey(DeviceCollectorSettings.OnlySecondaryAddressing) || !Convert.ToBoolean(collectorSettings[DeviceCollectorSettings.OnlySecondaryAddressing]))
          return this.MyDeviceManager.MyBus.ScanFromAddress(0);
        string StartSerialnumber = "fffffff0";
        if (collectorSettings.ContainsKey(DeviceCollectorSettings.ScanStartSerialnumber))
          StartSerialnumber = collectorSettings[DeviceCollectorSettings.ScanStartSerialnumber].ToString();
        return this.MyDeviceManager.MyBus.ScanFromSerialNumber(StartSerialnumber);
      }
      finally
      {
        this.MyDeviceManager.MyBus.OnDeviceListChanged -= new EventHandler<BusDevice>(this.MyBus_OnDeviceListChanged);
        this.MyDeviceManager.MyBus.OnProgress -= new EventHandlerEx<int>(this.MyBus_OnProgress);
        this.MyDeviceManager.MyBus.OnProgressMessage -= new EventHandlerEx<string>(this.MyBus_OnProgressMessage);
      }
    }

    private void MyBus_OnProgress(object sender, int e)
    {
      if (this.OnProgress == null)
        return;
      this.OnProgress(sender, e);
    }

    private void MyBus_OnProgressMessage(object sender, string e)
    {
      if (this.OnProgressMessage == null)
        return;
      this.OnProgressMessage(sender, e);
    }

    private void MyBus_OnDeviceListChanged(object sender, BusDevice e)
    {
      if (e == null)
        return;
      this.FireEventOnValueIdentSetReceived(e.Info, (DeviceInfo) null);
    }

    private DeviceTypes ConvertToDeviceType(string type)
    {
      return string.IsNullOrEmpty(type) || !Enum.IsDefined(typeof (DeviceTypes), (object) type) ? DeviceTypes.None : (DeviceTypes) Enum.Parse(typeof (DeviceTypes), type, true);
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      string serialnumber)
    {
      if (valueList == null)
        valueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      if (string.IsNullOrEmpty(serialnumber))
        return false;
      ZR_ClassLibrary.BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      ZR_ClassLibrary.BusMode? nullable1 = currentBusMode;
      ZR_ClassLibrary.BusMode busMode1 = ZR_ClassLibrary.BusMode.MBus;
      int num;
      if (!(nullable1.GetValueOrDefault() == busMode1 & nullable1.HasValue))
      {
        ZR_ClassLibrary.BusMode? nullable2 = currentBusMode;
        ZR_ClassLibrary.BusMode busMode2 = ZR_ClassLibrary.BusMode.MBusPointToPoint;
        num = nullable2.GetValueOrDefault() == busMode2 & nullable2.HasValue ? 1 : 0;
      }
      else
        num = 1;
      if (num == 0)
        throw new ArgumentNullException("Wrong 'BusMode'! Please check the DeveiceCollector settings.");
      bool flag = this.MyDeviceManager.MyBus.SetSelectedDeviceBySerialNumber(serialnumber);
      DeviceInfo Info;
      bool parameter = this.MyDeviceManager.MyBus.GetParameter(out Info);
      if (!flag || !parameter)
      {
        if (this.valuesCanNotReadFromDevice == null)
          this.valuesCanNotReadFromDevice = new SortedList<string, DateTime>();
        if (!this.valuesCanNotReadFromDevice.ContainsKey(serialnumber))
          return false;
        long valueIdentOfWarninig = ValueIdent.GetValueIdentOfWarninig(ValueIdent.ValueIdPart_MeterType.Any, ValueIdent.ValueIdentWarning.FailedToRead, ValueIdent.ValueIdPart_Creation.ReadingSystem);
        valueList.Add(valueIdentOfWarninig, new SortedList<DateTime, ReadingValue>()
        {
          {
            this.valuesCanNotReadFromDevice[serialnumber],
            new ReadingValue() { value = 1.0 }
          }
        });
        return true;
      }
      if (!TranslationRulesManager.Instance.TryParse(Info.GetZDFParameterString(), 0, ref valueList))
        return false;
      ValueIdent.CleanUpEmptyValueIdents(valueList);
      return true;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      BusDevice selectedDevice = this.MyDeviceManager.MyBus.GetSelectedDevice();
      return selectedDevice != null && selectedDevice.Info != null && selectedDevice.Info.MeterNumber != null && this.GetValues(ref valueList, selectedDevice.Info.MeterNumber);
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      int subDeviceIndex)
    {
      string zdfValues = this.GetZdfValues();
      return !string.IsNullOrEmpty(zdfValues) && TranslationRulesManager.Instance.TryParse(zdfValues, subDeviceIndex, ref valueList);
    }

    public override bool GetValues(
      string zdf,
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      int subDeviceIndex)
    {
      return !string.IsNullOrEmpty(zdf) && TranslationRulesManager.Instance.TryParse(zdf, subDeviceIndex, ref valueList);
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.ReadConfigParamList = new SortedList<OverrideID, ConfigurationParameter>();
      DeviceInfo Info;
      if (!this.MyDeviceManager.MyBus.ReadParameter(out Info) || Info == null)
        return false;
      ConfigurationParameter configurationParameter1 = new ConfigurationParameter(OverrideID.DeviceName, (object) (Info.Manufacturer + " " + Info.DeviceType.ToString()));
      this.ReadConfigParamList.Add(configurationParameter1.ParameterID, configurationParameter1);
      ConfigurationParameter configurationParameter2 = new ConfigurationParameter(OverrideID.SerialNumber, (object) Info.MeterNumber);
      this.ReadConfigParamList.Add(configurationParameter2.ParameterID, configurationParameter2);
      ConfigurationParameter configurationParameter3 = new ConfigurationParameter(OverrideID.Medium, (object) Info.MediumString);
      this.ReadConfigParamList.Add(configurationParameter3.ParameterID, configurationParameter3);
      ConfigurationParameter configurationParameter4 = new ConfigurationParameter(OverrideID.FirmwareVersion, (object) Info.Version);
      this.ReadConfigParamList.Add(configurationParameter4.ParameterID, configurationParameter4);
      ConfigurationParameter configurationParameter5 = new ConfigurationParameter(OverrideID.DiagnosticString, (object) Info.GetZDFParameterString());
      this.ReadConfigParamList.Add(configurationParameter5.ParameterID, configurationParameter5);
      ConfigurationParameter configurationParameter6 = new ConfigurationParameter(OverrideID.MBusAddress, (object) (ulong) Info.A_Field);
      configurationParameter6.HasWritePermission = true;
      configurationParameter6.MaxParameterValue = (object) 249UL;
      configurationParameter6.MinParameterValue = (object) 0UL;
      this.ReadConfigParamList.Add(configurationParameter6.ParameterID, configurationParameter6);
      ConfigurationParameter configurationParameter7 = new ConfigurationParameter(OverrideID.Baudrate, (object) this.MyDeviceManager.GetAsyncComSettings()["Baudrate"]);
      configurationParameter7.HasWritePermission = true;
      configurationParameter7.IsEditable = true;
      configurationParameter7.AllowedValues = Constants.GetAvailableBaudrates().ConvertAll<string>((Converter<ValueItem, string>) (x => x.Value)).ToArray();
      this.ReadConfigParamList.Add(configurationParameter7.ParameterID, configurationParameter7);
      List<GlobalDeviceId> globalDeviceIdList = this.GetGlobalDeviceIdList();
      if (globalDeviceIdList == null)
        return false;
      UpdatedDeviceIdentification = globalDeviceIdList[0];
      return true;
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      this.MyDeviceManager.ParameterType = ConfigurationType;
      if (this.ReadConfigParamList == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      SortedList<OverrideID, ConfigurationParameter> configurationParameters = new SortedList<OverrideID, ConfigurationParameter>();
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> readConfigParam in this.ReadConfigParamList)
        configurationParameters.Add(readConfigParam.Key, new ConfigurationParameter(readConfigParam.Value));
      return configurationParameters;
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> ConfigParameterList,
      int SubDevice)
    {
      this.SetConfigParamList = ConfigParameterList;
      return true;
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      if (this.SetConfigParamList == null)
        return false;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      if (this.SetConfigParamList.ContainsKey(OverrideID.MBusAddress))
      {
        ConfigurationParameter readConfigParam = this.ReadConfigParamList[OverrideID.MBusAddress];
        ConfigurationParameter setConfigParam = this.SetConfigParamList[OverrideID.MBusAddress];
        if (readConfigParam.ParameterValue != setConfigParam.ParameterValue && !this.MyDeviceManager.MyBus.SetPrimaryAddress(Convert.ToInt32(setConfigParam.ParameterValue)))
          return false;
      }
      if (this.SetConfigParamList.ContainsKey(OverrideID.Baudrate))
      {
        ConfigurationParameter readConfigParam = this.ReadConfigParamList[OverrideID.Baudrate];
        ConfigurationParameter setConfigParam = this.SetConfigParamList[OverrideID.Baudrate];
        if (readConfigParam.ParameterValue != setConfigParam.ParameterValue && !this.MyDeviceManager.MyBus.SetBaudrate(Convert.ToInt32(setConfigParam.ParameterValue)))
          return false;
      }
      return true;
    }

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      List<GlobalDeviceId> globalDeviceIdList = new List<GlobalDeviceId>();
      int numberOfDevices = this.MyDeviceManager.MyBus.GetNumberOfDevices();
      for (int index = 0; index < numberOfDevices && this.MyDeviceManager.MyBus.SetSelectedDeviceByIndex(index); ++index)
      {
        GlobalDeviceId globalDeviceId = this.GetGlobalDeviceId();
        if (globalDeviceId == null)
          return globalDeviceIdList;
        globalDeviceIdList.Add(globalDeviceId);
      }
      return globalDeviceIdList;
    }

    private GlobalDeviceId GetGlobalDeviceId()
    {
      DeviceInfo Info;
      if (!this.MyDeviceManager.MyBus.GetParameter(out Info) || Info == null)
        return (GlobalDeviceId) null;
      return new GlobalDeviceId()
      {
        DeviceTypeName = Info.DeviceType.ToString(),
        Manufacturer = Info.Manufacturer,
        MeterNumber = Convert.ToString(Info.A_Field),
        Generation = Info.Version.ToString(),
        FirmwareVersion = Info.Signature.ToString(),
        Serialnumber = Info.MeterNumber,
        MeterType = ValueIdent.ConvertToMeterType(Info.Medium)
      };
    }

    private void FireEventOnValueIdentSetReceived(DeviceInfo device, DeviceInfo mainDevice)
    {
      if (device == null || !this.MyDeviceManager.IsValueIdentSetReceivedEventEnabled)
        return;
      ValueIdentSet e1 = new ValueIdentSet();
      if (mainDevice != null && device.SubDevices != null)
      {
        e1.MainDeviceSerialNumber = mainDevice.MeterNumber;
        e1.Channel = device.SubDevices.IndexOf(mainDevice);
      }
      e1.Manufacturer = device.Manufacturer;
      e1.Version = device.Version.ToString();
      e1.SerialNumber = device.MeterNumber;
      e1.DeviceType = device.MediumString;
      e1.ZDF = device.GetZDFParameterString();
      e1.PrimaryAddress = device.A_Field.ToString();
      this.GetValues(ref e1.AvailableValues, e1.SerialNumber);
      this.MyDeviceManager.OnValueIdentSetReceived((object) this, e1);
      if (device.SubDevices != null)
      {
        foreach (DeviceInfo subDevice in device.SubDevices)
          this.FireEventOnValueIdentSetReceived(subDevice, device);
      }
      List<GlobalDeviceId> subDevices = TranslationRulesManager.GetSubDevices(e1.ZDF);
      if (subDevices != null)
      {
        int num = 1;
        foreach (GlobalDeviceId globalDeviceId in subDevices)
        {
          ValueIdentSet e2 = new ValueIdentSet();
          e1.Manufacturer = globalDeviceId.Manufacturer;
          e1.Version = globalDeviceId.Generation;
          e2.SerialNumber = globalDeviceId.Serialnumber;
          e2.DeviceType = globalDeviceId.MeterType.ToString();
          e2.ZDF = e1.ZDF;
          e2.MainDeviceSerialNumber = device.MeterNumber;
          e2.PrimaryAddress = device.A_Field.ToString();
          e2.Channel = num++;
          SortedList<long, SortedList<DateTime, ReadingValue>> ValueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
          if (this.GetValues(e1.ZDF, ref ValueList, subDevices.IndexOf(globalDeviceId) + 1))
            e2.AvailableValues = ValueList;
          this.MyDeviceManager.OnValueIdentSetReceived((object) this, e2);
        }
      }
    }
  }
}


--- MinolDeviceHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.MinolDeviceHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using MinolHandler;
using NLog;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class MinolDeviceHandler(DeviceManager MyDeviceManager) : BaseDevice(MyDeviceManager)
  {
    private static Logger logger = LogManager.GetLogger("MinolDeviceByHandler");
    private MinolHandlerFunctions minolHandler;

    public override event EventHandlerEx<int> OnProgress;

    private void LoadMinolHandler()
    {
      if (this.minolHandler != null)
        return;
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable = currentBusMode;
      BusMode busMode = BusMode.Minol_Device;
      if (!(nullable.GetValueOrDefault() == busMode & nullable.HasValue))
        throw new ArgumentException("Can not load MinolHandlerFunctions! Reason: Wrong BusMode: " + currentBusMode.ToString());
      this.minolHandler = new MinolHandlerFunctions((IDeviceCollector) this.MyDeviceManager.MyBus);
      this.minolHandler.OnProgress += new EventHandlerEx<int>(this.minolHandler_OnProgress);
    }

    private void minolHandler_OnProgress(object sender, int e)
    {
      if (this.OnProgress == null)
        return;
      this.OnProgress(sender, e);
    }

    public override object GetHandler()
    {
      this.LoadMinolHandler();
      return (object) this.minolHandler;
    }

    internal override void ShowHandlerWindow()
    {
      this.LoadMinolHandler();
      this.minolHandler.ShowMinolHandlerWindow();
    }

    public override void Dispose()
    {
      if (this.minolHandler == null)
        return;
      this.minolHandler.OnProgress -= new EventHandlerEx<int>(this.minolHandler_OnProgress);
      this.minolHandler.GMM_Dispose();
      this.minolHandler = (MinolHandlerFunctions) null;
    }

    public override bool BeginSearchDevices()
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable = currentBusMode;
      BusMode busMode = BusMode.Minol_Device;
      if (!(nullable.GetValueOrDefault() == busMode & nullable.HasValue))
      {
        nullable = currentBusMode;
        throw new Exception("DeviceCollector settings are wrong! Invalid bus mode: " + nullable.ToString());
      }
      this.LoadMinolHandler();
      GlobalDeviceId UpdatedDeviceIdentification;
      if (!this.minolHandler.ReadValues(out UpdatedDeviceIdentification))
        return false;
      this.FireEventOnValueIdentSetReceived(UpdatedDeviceIdentification, 0);
      return true;
    }

    public override bool Read(StructureTreeNode structureTreeNode, List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode busMode = BusMode.Minol_Device;
      if (!(currentBusMode.GetValueOrDefault() == busMode & currentBusMode.HasValue))
        return false;
      this.LoadMinolHandler();
      if (!this.minolHandler.ReadValues(out GlobalDeviceId _))
        return false;
      GlobalDeviceId globalDeviceId = this.minolHandler.GetGlobalDeviceId();
      return globalDeviceId != null && globalDeviceId.Serialnumber == structureTreeNode.SerialNumber;
    }

    public override bool ReadAll(List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable = currentBusMode;
      BusMode busMode = BusMode.Minol_Device;
      if (!(nullable.GetValueOrDefault() == busMode & nullable.HasValue))
      {
        nullable = currentBusMode;
        throw new Exception("DeviceCollector settings are wrong! Invalid bus mode: " + nullable.ToString());
      }
      this.LoadMinolHandler();
      GlobalDeviceId UpdatedDeviceIdentification;
      bool flag = this.minolHandler.ReadValues(out UpdatedDeviceIdentification);
      if (flag)
        this.FireEventOnValueIdentSetReceived(UpdatedDeviceIdentification, 0);
      return flag;
    }

    public override bool Connect(ref GlobalDeviceId Device)
    {
      this.LoadMinolHandler();
      Device = this.minolHandler.GetGlobalDeviceId();
      return Device != null;
    }

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      this.LoadMinolHandler();
      List<GlobalDeviceId> globalDeviceIdList = new List<GlobalDeviceId>();
      GlobalDeviceId globalDeviceId = this.minolHandler.GetGlobalDeviceId();
      if (globalDeviceId != null)
        globalDeviceIdList.Add(globalDeviceId);
      return globalDeviceIdList;
    }

    public override bool SelectDevice(GlobalDeviceId device)
    {
      this.LoadMinolHandler();
      return this.minolHandler.SelectDevice(device);
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      string serialnumber)
    {
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable = currentBusMode;
      BusMode busMode = BusMode.Minol_Device;
      if (!(nullable.GetValueOrDefault() == busMode & nullable.HasValue))
        throw new Exception("DeviceCollector settings are wrong! Invalid bus mode: " + currentBusMode.ToString());
      this.LoadMinolHandler();
      GlobalDeviceId globalDeviceId = this.minolHandler.GetGlobalDeviceId();
      if (!this.minolHandler.GetValues(ref ValueList))
        return false;
      ValueIdent.CleanUpEmptyValueIdents(ValueList);
      return globalDeviceId.Serialnumber == serialnumber;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      this.LoadMinolHandler();
      if (!this.minolHandler.GetValues(ref ValueList))
        return false;
      ValueIdent.CleanUpEmptyValueIdents(ValueList);
      return true;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      int SubDevice)
    {
      this.LoadMinolHandler();
      if (!this.minolHandler.GetValues(ref ValueList, SubDevice))
        return false;
      ValueIdent.CleanUpEmptyValueIdents(ValueList);
      return true;
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      this.LoadMinolHandler();
      return this.minolHandler.GetConfigurationParameters(ConfigurationType, SubDevice);
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.LoadMinolHandler();
      return this.minolHandler.ReadConfigurationParameters(out UpdatedDeviceIdentification);
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList,
      int SubDevice)
    {
      this.LoadMinolHandler();
      return this.minolHandler.SetConfigurationParameters(parameterList, SubDevice);
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList)
    {
      this.LoadMinolHandler();
      return this.minolHandler.SetConfigurationParameters(parameterList);
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.LoadMinolHandler();
      return this.minolHandler.WriteChangesToDevice();
    }

    private void FireEventOnValueIdentSetReceived(GlobalDeviceId device, int subIndex)
    {
      if (!this.MyDeviceManager.IsValueIdentSetReceivedEventEnabled)
        return;
      DeviceTypes typeOfMinolDevice = NumberRanges.GetTypeOfMinolDevice(device.Serialnumber);
      ValueIdentSet e = new ValueIdentSet()
      {
        Version = device.Generation,
        SerialNumber = device.Serialnumber,
        Manufacturer = "MINOL",
        DeviceType = typeOfMinolDevice.ToString()
      };
      e.Manufacturer = NumberRanges.GetManufacturer(typeOfMinolDevice);
      e.ZDF = "SID;" + device.Serialnumber + ";MAN;" + e.Manufacturer + ";MED;" + e.DeviceType;
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      if (this.GetValues(ref ValueList, subIndex))
        e.AvailableValues = ValueList;
      this.MyDeviceManager.OnValueIdentSetReceived((object) this, e);
      if (device.SubDevices != null)
      {
        foreach (GlobalDeviceId subDevice in device.SubDevices)
          this.FireEventOnValueIdentSetReceived(subDevice, device.SubDevices.IndexOf(subDevice) + 1);
      }
    }
  }
}


--- MinomatHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.MinomatHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using MinomatHandler;
using NLog;
using StartupLib;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class MinomatHandler(DeviceManager MyDeviceManager) : BaseDevice(MyDeviceManager)
  {
    private SortedList<OverrideID, ConfigurationParameter> changedParameters;
    private Minomat.MinomatInfo minomatV2Info;
    private static Logger logger = LogManager.GetLogger(nameof (MinomatHandler));
    private MinomatV4 minomatV4;
    private MeasurementSet readedValues;
    private string selectedDevice;
    private GMM_EventArgs message = new GMM_EventArgs("");

    public override event EventHandlerEx<int> OnProgress;

    public override void Dispose()
    {
      if (this.minomatV4 != null)
      {
        this.minomatV4.OnMessage -= new EventHandler<MinomatV4.StateEventArgs>(this.MinomatV4_OnMessage);
        this.minomatV4.OnError -= new EventHandlerEx<Exception>(this.minomatV4_OnError);
        this.minomatV4.Dispose();
        this.minomatV4 = (MinomatV4) null;
      }
      this.readedValues = (MeasurementSet) null;
    }

    public override object GetHandler()
    {
      this.LoadMinomatHandler();
      return (object) this.minomatV4;
    }

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      List<GlobalDeviceId> globalDeviceIdList = new List<GlobalDeviceId>();
      int numberOfDevices = this.MyDeviceManager.MyBus.GetNumberOfDevices();
      for (int index = 0; index < numberOfDevices && this.MyDeviceManager.MyBus.SetSelectedDeviceByIndex(index); ++index)
      {
        DeviceInfo Info;
        if (!this.MyDeviceManager.MyBus.GetParameter(out Info) || Info == null)
          return (List<GlobalDeviceId>) null;
        globalDeviceIdList.Add(new GlobalDeviceId()
        {
          Serialnumber = Info.MeterNumber,
          DeviceTypeName = NumberRanges.GetTypeOfMinolDevice(Info.MeterNumber).ToString(),
          Manufacturer = "MINOL"
        });
      }
      return globalDeviceIdList;
    }

    public override bool SelectDevice(GlobalDeviceId device)
    {
      if (device == null)
        return false;
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable = currentBusMode;
      BusMode busMode1 = BusMode.MinomatV2;
      if (nullable.GetValueOrDefault() == busMode1 & nullable.HasValue)
        return this.MyDeviceManager.MyBus.SetSelectedDeviceBySerialNumber(device.Serialnumber);
      nullable = currentBusMode;
      BusMode busMode2 = BusMode.MinomatV3;
      int num;
      if (!(nullable.GetValueOrDefault() == busMode2 & nullable.HasValue))
      {
        nullable = currentBusMode;
        BusMode busMode3 = BusMode.MinomatV4;
        num = nullable.GetValueOrDefault() == busMode3 & nullable.HasValue ? 1 : 0;
      }
      else
        num = 1;
      if (num == 0)
        return false;
      this.selectedDevice = device.Serialnumber;
      return true;
    }

    public override bool Read(StructureTreeNode structureTreeNode, List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable = currentBusMode;
      BusMode busMode1 = BusMode.MinomatV3;
      int num;
      if (!(nullable.GetValueOrDefault() == busMode1 & nullable.HasValue))
      {
        nullable = currentBusMode;
        BusMode busMode2 = BusMode.MinomatV4;
        num = nullable.GetValueOrDefault() == busMode2 & nullable.HasValue ? 1 : 0;
      }
      else
        num = 1;
      if (num == 0)
        return false;
      if (this.readedValues == null)
        this.readedValues = new MeasurementSet();
      this.readedValues.Clear();
      return this.ReadValuesOfMinomatV4(structureTreeNode.SerialNumber, filter);
    }

    public override bool ReadAll(List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.LoadMinomatHandler();
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable = currentBusMode;
      BusMode busMode1 = BusMode.MinomatV3;
      int num;
      if (!(nullable.GetValueOrDefault() == busMode1 & nullable.HasValue))
      {
        nullable = currentBusMode;
        BusMode busMode2 = BusMode.MinomatV4;
        num = nullable.GetValueOrDefault() == busMode2 & nullable.HasValue ? 1 : 0;
      }
      else
        num = 1;
      if (num != 0)
      {
        bool flag = this.ReadMinomatV4(filter);
        if (this.readedValues != null)
        {
          List<uint> uintList = new List<uint>((IEnumerable<uint>) this.readedValues.Keys);
          int count = uintList.Count;
          foreach (uint id in uintList)
            this.FireEventOnValueIdentSetReceived(id, count);
        }
        return flag;
      }
      nullable = currentBusMode;
      BusMode busMode3 = BusMode.MinomatV2;
      if (!(nullable.GetValueOrDefault() == busMode3 & nullable.HasValue) || !this.MyDeviceManager.MyBus.ScanFromAddress(0))
        return false;
      List<GlobalDeviceId> globalDeviceIdList = this.GetGlobalDeviceIdList();
      int count1 = globalDeviceIdList.Count;
      foreach (GlobalDeviceId id in globalDeviceIdList)
        this.FireEventOnValueIdentSetReceived(id, count1);
      return true;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      string serialnumber)
    {
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable1 = currentBusMode;
      BusMode busMode1 = BusMode.MinomatV2;
      if (nullable1.GetValueOrDefault() == busMode1 & nullable1.HasValue)
        return this.GetValuesFromMinomatV2(ref ValueList, serialnumber);
      BusMode? nullable2 = currentBusMode;
      BusMode busMode2 = BusMode.MinomatV3;
      int num;
      if (!(nullable2.GetValueOrDefault() == busMode2 & nullable2.HasValue))
      {
        nullable2 = currentBusMode;
        BusMode busMode3 = BusMode.MinomatV4;
        num = nullable2.GetValueOrDefault() == busMode3 & nullable2.HasValue ? 1 : 0;
      }
      else
        num = 1;
      return num != 0 && this.GetValuesFromMinomatV4(ref ValueList, serialnumber);
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable1 = currentBusMode;
      BusMode busMode1 = BusMode.MinomatV2;
      if (nullable1.GetValueOrDefault() == busMode1 & nullable1.HasValue)
      {
        if (!this.GetValuesFromMinomatV2(ref ValueList))
          return false;
        ValueIdent.CleanUpEmptyValueIdents(ValueList);
        return true;
      }
      BusMode? nullable2 = currentBusMode;
      BusMode busMode2 = BusMode.MinomatV3;
      int num;
      if (!(nullable2.GetValueOrDefault() == busMode2 & nullable2.HasValue))
      {
        nullable2 = currentBusMode;
        BusMode busMode3 = BusMode.MinomatV4;
        num = nullable2.GetValueOrDefault() == busMode3 & nullable2.HasValue ? 1 : 0;
      }
      else
        num = 1;
      if (num == 0 || string.IsNullOrEmpty(this.selectedDevice) || !this.GetValuesFromMinomatV4(ref ValueList, this.selectedDevice))
        return false;
      ValueIdent.CleanUpEmptyValueIdents(ValueList);
      return true;
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      string str = Convert.ToString(this.MyDeviceManager.MyBus.GetDeviceCollectorSettings()[DeviceCollectorSettings.DaKonId]);
      if (string.IsNullOrEmpty(str))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "The DeviceCollectorSettings.DaKonId is missing!");
        return false;
      }
      object InfoObject;
      this.MyDeviceManager.MyBus.GetDeviceCollectorInfo(out InfoObject);
      if (!(InfoObject is Minomat.MinomatInfo minomatInfo) || minomatInfo.configuration == null || minomatInfo.systemStatus == null || minomatInfo.systemTime == DateTime.MinValue)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Failed to read Minomat settings!");
        return false;
      }
      this.minomatV2Info = minomatInfo;
      UpdatedDeviceIdentification = new GlobalDeviceId();
      UpdatedDeviceIdentification.Serialnumber = str;
      UpdatedDeviceIdentification.MeterType = ValueIdent.ValueIdPart_MeterType.Collector;
      UpdatedDeviceIdentification.Manufacturer = "MINOL";
      if (minomatInfo.systemStatus != null && minomatInfo.systemStatus is MinomatV2.SystemStatus)
      {
        MinomatV2.SystemStatus systemStatus = (MinomatV2.SystemStatus) minomatInfo.systemStatus;
        if (!string.IsNullOrEmpty(systemStatus.FirmwareVersionAsString))
          UpdatedDeviceIdentification.FirmwareVersion = systemStatus.FirmwareVersionAsString;
      }
      return true;
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      this.changedParameters = (SortedList<OverrideID, ConfigurationParameter>) null;
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode busMode = BusMode.MinomatV2;
      if (!(currentBusMode.GetValueOrDefault() == busMode & currentBusMode.HasValue) || this.minomatV2Info == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      string ParameterValue1 = Convert.ToString(this.MyDeviceManager.MyBus.GetDeviceCollectorSettings()[DeviceCollectorSettings.DaKonId]);
      if (!string.IsNullOrEmpty(ParameterValue1))
      {
        SortedList<OverrideID, ConfigurationParameter> r = new SortedList<OverrideID, ConfigurationParameter>();
        string ParameterValue2 = "Minomat";
        string ParameterValue3 = "";
        if (this.minomatV2Info.systemStatus != null && this.minomatV2Info.systemStatus is MinomatV2.SystemStatus)
          ParameterValue3 = ((MinomatV2.SystemStatus) this.minomatV2Info.systemStatus).FirmwareVersionAsString;
        if (UserManager.IsNewLicenseModel())
        {
          Devices.MinomatHandler.AddParam(false, r, OverrideID.SerialNumber, (object) ParameterValue1);
          Devices.MinomatHandler.AddParam(false, r, OverrideID.FirmwareVersion, (object) ParameterValue3);
          Devices.MinomatHandler.AddParam(false, r, OverrideID.DeviceName, (object) ParameterValue2);
          Devices.MinomatHandler.AddParam(false, r, OverrideID.InitDevice, (object) false, true, (string[]) null);
          Devices.MinomatHandler.AddParam(false, r, OverrideID.StartHKVEReceptionWindow, (object) false, true, (string[]) null);
          Devices.MinomatHandler.AddParam(false, r, OverrideID.DeviceClock, (object) this.minomatV2Info.systemTime);
        }
        else
        {
          r.Add(OverrideID.SerialNumber, new ConfigurationParameter(OverrideID.SerialNumber, (object) ParameterValue1));
          r.Add(OverrideID.FirmwareVersion, new ConfigurationParameter(OverrideID.FirmwareVersion, (object) ParameterValue3));
          r.Add(OverrideID.DeviceName, new ConfigurationParameter(OverrideID.DeviceName, (object) ParameterValue2));
          r.Add(OverrideID.InitDevice, new ConfigurationParameter(OverrideID.InitDevice, (object) false)
          {
            IsFunction = true,
            HasWritePermission = true
          });
          r.Add(OverrideID.StartHKVEReceptionWindow, new ConfigurationParameter(OverrideID.StartHKVEReceptionWindow, (object) false)
          {
            IsFunction = true,
            HasWritePermission = true
          });
          r.Add(OverrideID.DeviceClock, new ConfigurationParameter(OverrideID.DeviceClock, (object) this.minomatV2Info.systemTime)
          {
            HasWritePermission = true
          });
        }
        return r;
      }
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "The DeviceCollectorSettings.DaKonId is missing!");
      return (SortedList<OverrideID, ConfigurationParameter>) null;
    }

    private static void AddParam(
      bool canChanged,
      SortedList<OverrideID, ConfigurationParameter> r,
      OverrideID overrideID,
      object obj)
    {
      Devices.MinomatHandler.AddParam(canChanged, r, overrideID, obj, false, (string[]) null);
    }

    private static void AddParam(
      bool canChanged,
      SortedList<OverrideID, ConfigurationParameter> r,
      OverrideID overrideID,
      object obj,
      bool isFunction,
      string[] allowedValues)
    {
      if (!UserManager.IsConfigParamVisible(overrideID))
        return;
      bool flag = false;
      if (canChanged)
        flag = UserManager.IsConfigParamEditable(overrideID);
      r.Add(overrideID, new ConfigurationParameter(overrideID, obj)
      {
        HasWritePermission = flag,
        AllowedValues = allowedValues
      });
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList,
      int SubDevice)
    {
      if (SubDevice != 0)
        return false;
      if (this.changedParameters == null)
        this.changedParameters = new SortedList<OverrideID, ConfigurationParameter>();
      if (parameterList == null || parameterList.Count <= 0)
        return false;
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> parameter in parameterList)
      {
        if (this.changedParameters.ContainsKey(parameter.Key))
          this.changedParameters[parameter.Key] = parameter.Value;
        else
          this.changedParameters.Add(parameter.Key, parameter.Value);
      }
      return true;
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList)
    {
      return this.SetConfigurationParameters(parameterList, 0);
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      if (this.changedParameters == null)
        return false;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      try
      {
        bool flag = true;
        foreach (KeyValuePair<OverrideID, ConfigurationParameter> changedParameter in this.changedParameters)
        {
          if (changedParameter.Value.HasWritePermission)
          {
            switch (changedParameter.Key)
            {
              case OverrideID.DeviceClock:
                if (changedParameter.Value.ParameterValue.GetType() == typeof (DateTime))
                {
                  flag = this.MyDeviceManager.MyBus.SetTime((DateTime) changedParameter.Value.ParameterValue);
                  break;
                }
                break;
              case OverrideID.InitDevice:
                if (changedParameter.Value.ParameterValue.GetType() == typeof (bool) && (bool) changedParameter.Value.ParameterValue)
                {
                  flag = this.MyDeviceManager.MyBus.SystemInit();
                  break;
                }
                break;
              case OverrideID.StartHKVEReceptionWindow:
                if (changedParameter.Value.ParameterValue.GetType() == typeof (bool) && (bool) changedParameter.Value.ParameterValue)
                {
                  flag = this.MyDeviceManager.MyBus.StartHKVEReceptionWindow();
                  break;
                }
                break;
              case OverrideID.RegisterHKVE:
                if (changedParameter.Value.ParameterValue.GetType() == typeof (List<string>))
                {
                  flag = this.MyDeviceManager.MyBus.RegisterHKVE((List<string>) changedParameter.Value.ParameterValue);
                  break;
                }
                break;
              case OverrideID.DeregisterHKVE:
                if (changedParameter.Value.ParameterValue.GetType() == typeof (List<string>))
                {
                  flag = this.MyDeviceManager.MyBus.DeregisterHKVE((List<string>) changedParameter.Value.ParameterValue);
                  break;
                }
                break;
              default:
                ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented, "This OverrideID is not supported!");
                return false;
            }
            if (!flag)
              return false;
          }
        }
        this.changedParameters.Clear();
        return true;
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddException(ex);
        return false;
      }
    }

    public override bool ExecuteMethod(
      OverrideID overrideID,
      bool isSetMethod,
      out object result,
      object param1,
      object param2,
      object param3,
      object param4)
    {
      result = (object) null;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      try
      {
        BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
        BusMode? nullable = currentBusMode;
        BusMode busMode1 = BusMode.MinomatV3;
        int num;
        if (!(nullable.GetValueOrDefault() == busMode1 & nullable.HasValue))
        {
          nullable = currentBusMode;
          BusMode busMode2 = BusMode.MinomatV4;
          num = nullable.GetValueOrDefault() == busMode2 & nullable.HasValue ? 1 : 0;
        }
        else
          num = 1;
        if (num != 0)
          return this.ExecuteMethodMinomatV4(overrideID, isSetMethod, out result, param1, param2, param3, param4);
        nullable = currentBusMode;
        BusMode busMode3 = BusMode.MinomatV2;
        return nullable.GetValueOrDefault() == busMode3 & nullable.HasValue && this.ExecuteMethodMinomatV2(overrideID, isSetMethod, out result, param1, param2, param3, param4);
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddException(ex);
        return false;
      }
    }

    public override bool BeginSearchDevices()
    {
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable1 = currentBusMode;
      BusMode busMode1 = BusMode.MinomatV3;
      BusMode? nullable2;
      int num;
      if (!(nullable1.GetValueOrDefault() == busMode1 & nullable1.HasValue))
      {
        nullable2 = currentBusMode;
        BusMode busMode2 = BusMode.MinomatV4;
        num = nullable2.GetValueOrDefault() == busMode2 & nullable2.HasValue ? 1 : 0;
      }
      else
        num = 1;
      if (num != 0)
        return this.BeginSearchDevicesOnMinomatV4();
      nullable2 = currentBusMode;
      BusMode busMode3 = BusMode.MinomatV2;
      return nullable2.GetValueOrDefault() == busMode3 & nullable2.HasValue && this.BeginSearchDevicesOnMinomatV2();
    }

    private void LoadMinomatHandler()
    {
      BusMode? currentBusMode = this.MyDeviceManager.GetCurrentBusMode();
      BusMode? nullable1 = currentBusMode;
      BusMode busMode1 = BusMode.MinomatV3;
      BusMode? nullable2;
      int num;
      if (!(nullable1.GetValueOrDefault() == busMode1 & nullable1.HasValue))
      {
        nullable2 = currentBusMode;
        BusMode busMode2 = BusMode.MinomatV4;
        num = nullable2.GetValueOrDefault() == busMode2 & nullable2.HasValue ? 1 : 0;
      }
      else
        num = 1;
      if (num != 0)
      {
        if (this.minomatV4 != null)
          return;
        this.minomatV4 = new MinomatV4(new SCGiConnection(this.MyDeviceManager.MyBus.AsyncCom));
        if (!string.IsNullOrEmpty(this.MyDeviceManager.MyBus.MinomatV4_SourceAddress) && Enum.IsDefined(typeof (SCGiAddress), (object) this.MyDeviceManager.MyBus.MinomatV4_SourceAddress))
        {
          this.minomatV4.Connection.SourceAddress = (SCGiAddress) Enum.Parse(typeof (SCGiAddress), this.MyDeviceManager.MyBus.MinomatV4_SourceAddress, true);
          if (this.minomatV4.Connection.SourceAddress == SCGiAddress.ServerHTTP || this.minomatV4.Connection.SourceAddress == SCGiAddress.ServerTCP)
            this.minomatV4.Authentication = (SCGiHeaderEx) null;
        }
        this.minomatV4.OnMessage += new EventHandler<MinomatV4.StateEventArgs>(this.MinomatV4_OnMessage);
        this.minomatV4.OnError += new EventHandlerEx<Exception>(this.minomatV4_OnError);
        SortedList<DeviceCollectorSettings, object> collectorSettings = this.MyDeviceManager.MyBus.GetDeviceCollectorSettings();
        if (collectorSettings != null && collectorSettings.ContainsKey(DeviceCollectorSettings.MaxRequestRepeat))
          this.minomatV4.MaxAttempt = Convert.ToInt32(collectorSettings[DeviceCollectorSettings.MaxRequestRepeat]);
      }
      else
      {
        nullable2 = currentBusMode;
        BusMode busMode3 = BusMode.MinomatV2;
        if (!(nullable2.GetValueOrDefault() == busMode3 & nullable2.HasValue))
        {
          nullable2 = currentBusMode;
          throw new ArgumentException("Can not load MinomatHandler! Reason: Wrong BusMode: " + nullable2.ToString());
        }
      }
    }

    private void minomatV4_OnError(object sender, Exception e)
    {
      this.MyDeviceManager.RaiseEventError(e);
    }

    private void MinomatV4_OnMessage(object sender, MinomatV4.StateEventArgs e)
    {
      this.message.EventMessage = e.Message;
      this.MyDeviceManager.RaiseEvent(this.message);
      this.minomatV4.CancelCurrentMethod = this.message.Cancel;
    }

    private bool BeginSearchDevicesOnMinomatV2()
    {
      if (this.OnProgress != null)
        this.OnProgress((object) this, 0);
      this.LoadMinomatHandler();
      List<string> registeredHkve = this.MyDeviceManager.MyBus.GetRegisteredHKVE();
      if (registeredHkve == null)
        return false;
      int num = 0;
      foreach (string funkId in registeredHkve)
      {
        if (this.OnProgress != null)
        {
          ++num;
          this.OnProgress((object) this, num * 100 / registeredHkve.Count);
        }
        ValueIdentSet e = new ValueIdentSet();
        e.SerialNumber = funkId.ToString();
        DeviceTypes typeOfMinolDevice = NumberRanges.GetTypeOfMinolDevice(funkId);
        e.DeviceType = typeOfMinolDevice.ToString();
        e.Manufacturer = NumberRanges.GetManufacturer(typeOfMinolDevice);
        e.ZDF = "SID;" + funkId + ";MAN;" + e.Manufacturer + ";MED;" + e.DeviceType;
        this.MyDeviceManager.OnValueIdentSetReceived((object) this, e);
      }
      return true;
    }

    private bool ExecuteMethodMinomatV2(
      OverrideID overrideID,
      bool isSetMethod,
      out object result,
      object param1,
      object param2,
      object param3,
      object param4)
    {
      result = (object) null;
      this.LoadMinomatHandler();
      switch (overrideID)
      {
        case OverrideID.InitDevice:
          return this.MyDeviceManager.MyBus.SystemInit();
        case OverrideID.StartHKVEReceptionWindow:
          return this.MyDeviceManager.MyBus.StartHKVEReceptionWindow();
        case OverrideID.RegisterHKVE:
          return this.MyDeviceManager.MyBus.RegisterHKVE((List<string>) param1);
        case OverrideID.DeregisterHKVE:
          return this.MyDeviceManager.MyBus.DeregisterHKVE((List<string>) param1);
        case OverrideID.RegisteredHKVE:
          result = (object) this.MyDeviceManager.MyBus.GetRegisteredHKVE();
          return result != null;
        case OverrideID.UnregisteredHKVE:
          result = (object) this.MyDeviceManager.MyBus.GetUnregisteredHKVE();
          return result != null;
        case OverrideID.MinomatV2Configuration:
          if (isSetMethod)
            return this.MyDeviceManager.MyBus.SetMinomatV2Configuration((MinomatV2.Configuration) param1);
          result = (object) this.MyDeviceManager.MyBus.GetMinomatV2Configuration();
          return result != null;
        case OverrideID.MinomatV2SystemStatus:
          result = (object) this.MyDeviceManager.MyBus.GetMinomatV2SystemStatus();
          return result != null;
        default:
          throw new ArgumentException("OverrideID is not supported! Value: " + overrideID.ToString());
      }
    }

    private bool GetValuesFromMinomatV2(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      return this.GetValuesFromMinomatV2(ref ValueList, (string) null);
    }

    private bool GetValuesFromMinomatV2(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      string serialnumber)
    {
      if (!string.IsNullOrEmpty(serialnumber))
        this.MyDeviceManager.MyBus.SetSelectedDeviceBySerialNumber(serialnumber);
      if (ValueList == null || ValueList.Count == 0)
        ValueList = ValueIdent.GetDefaultValueListTemplate();
      DeviceInfo Info;
      if (!this.MyDeviceManager.MyBus.ReadParameter(out Info))
        return false;
      byte status = Info.Status;
      bool flag1 = ((int) status & 32) == 32;
      bool flag2 = ((int) status & 16) == 16;
      if (flag1)
      {
        ValueIdent.ValueIdPart_MeterType meterType = ValueIdent.ConvertToMeterType(Info.DeviceType);
        ValueList.Add(ValueIdent.GetValueIdentOfError(meterType, ValueIdent.ValueIdentError.Manipulation), new SortedList<DateTime, ReadingValue>()
        {
          {
            DateTime.Now,
            new ReadingValue() { value = 1.0 }
          }
        });
      }
      if (flag2)
      {
        ValueIdent.ValueIdPart_MeterType meterType = ValueIdent.ConvertToMeterType(Info.DeviceType);
        ValueList.Add(ValueIdent.GetValueIdentOfError(meterType, ValueIdent.ValueIdentError.DeviceError), new SortedList<DateTime, ReadingValue>()
        {
          {
            DateTime.Now,
            new ReadingValue() { value = 1.0 }
          }
        });
      }
      SortedList<string, SortedList<int, string>> sortedParameterList = this.GenerateSortedParameterList(Info);
      if (!sortedParameterList.ContainsKey("TIMP"))
        return true;
      SortedList<int, DateTime> sortedList1 = new SortedList<int, DateTime>();
      SortedList<int, string> sortedList2 = sortedParameterList["TIMP"];
      for (int index = 0; index < sortedList2.Count; ++index)
      {
        DateTime dateTime = DateTime.Parse(sortedList2.Values[index], (IFormatProvider) FixedFormates.TheFormates.DateTimeFormat);
        sortedList1.Add(sortedList2.Keys[index], dateTime);
      }
      for (int index1 = 0; index1 < ValueList.Keys.Count; ++index1)
      {
        if (ValueIdent.Contains(ValueList.Keys[index1], 281088648L))
        {
          int index2 = sortedParameterList.IndexOfKey("M_ST");
          if (index2 >= 0)
          {
            SortedList<int, string> sortedList3 = sortedParameterList.Values[index2];
            for (int index3 = 0; index3 < sortedList3.Count; ++index3)
            {
              if (!(sortedList3.Values[index3] == "NO_DATA"))
              {
                ReadingValue readingValue = new ReadingValue();
                switch (sortedParameterList["M_ST_STATUS"][sortedList3.Keys[index3]])
                {
                  case "READING_VALID":
                    readingValue.value = double.Parse(sortedList3.Values[index3], (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
                    readingValue.state = ReadingValueState.ok;
                    readingValue.StateDetails = string.Empty;
                    break;
                  case "NOT_VALID":
                    readingValue.value = double.NaN;
                    readingValue.state = ReadingValueState.error;
                    readingValue.StateDetails = sortedParameterList["M_ST_STATUSDETAIL"][sortedList3.Keys[index3]];
                    break;
                  default:
                    continue;
                }
                ValueList.Values[index1].Add(sortedList1[sortedList3.Keys[index3]], readingValue);
              }
            }
          }
        }
        if (ValueIdent.Contains(ValueList.Keys[index1], 272703506L))
        {
          int index4 = sortedParameterList.IndexOfKey("M_RSSI");
          if (index4 >= 0)
          {
            SortedList<int, string> sortedList4 = sortedParameterList.Values[index4];
            for (int index5 = 0; index5 < sortedList4.Count; ++index5)
            {
              string s = sortedList4.Values[index5];
              if (!(s == "0"))
              {
                int rssiDBm = Util.RssiToRssi_dBm(byte.Parse(s));
                ValueList.Values[index1].Add(sortedList1[sortedList4.Keys[index5]], new ReadingValue()
                {
                  value = (double) rssiDBm,
                  state = ReadingValueState.ok,
                  StateDetails = string.Empty
                });
              }
            }
          }
        }
        if (ValueIdent.Contains(ValueList.Keys[index1], 289477256L))
        {
          int index6 = sortedParameterList.IndexOfKey("M_MO");
          if (index6 >= 0)
          {
            SortedList<int, string> sortedList5 = sortedParameterList.Values[index6];
            for (int index7 = 0; index7 < sortedList5.Count; ++index7)
            {
              if (!(sortedList5.Values[index7] == "NO_DATA"))
              {
                ReadingValue readingValue = new ReadingValue();
                switch (sortedParameterList["M_MO_STATUS"][sortedList5.Keys[index7]])
                {
                  case "READING_VALID":
                    readingValue.value = double.Parse(sortedList5.Values[index7], (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
                    readingValue.state = ReadingValueState.ok;
                    readingValue.StateDetails = string.Empty;
                    break;
                  case "NOT_VALID":
                    readingValue.value = double.NaN;
                    readingValue.state = ReadingValueState.error;
                    readingValue.StateDetails = sortedParameterList["M_MO_STATUSDETAIL"][sortedList5.Keys[index7]];
                    break;
                  default:
                    continue;
                }
                ValueList.Values[index1].Add(sortedList1[sortedList5.Keys[index7]], readingValue);
              }
            }
          }
        }
        if (ValueIdent.Contains(ValueList.Keys[index1], 293671560L))
        {
          int index8 = sortedParameterList.IndexOfKey("M_HMO");
          if (index8 >= 0)
          {
            SortedList<int, string> sortedList6 = sortedParameterList.Values[index8];
            for (int index9 = 0; index9 < sortedList6.Count; ++index9)
            {
              if (!(sortedList6.Values[index9] == "NO_DATA"))
              {
                ReadingValue readingValue = new ReadingValue();
                switch (sortedParameterList["M_HMO_STATUS"][sortedList6.Keys[index9]])
                {
                  case "READING_VALID":
                    readingValue.value = double.Parse(sortedList6.Values[index9], (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
                    readingValue.state = ReadingValueState.ok;
                    readingValue.StateDetails = string.Empty;
                    break;
                  case "NOT_VALID":
                    readingValue.value = double.NaN;
                    readingValue.state = ReadingValueState.error;
                    readingValue.StateDetails = sortedParameterList["M_HMO_STATUSDETAIL"][sortedList6.Keys[index9]];
                    break;
                  default:
                    continue;
                }
                ValueList.Values[index1].Add(sortedList1[sortedList6.Keys[index9]], readingValue);
              }
            }
          }
        }
      }
      return true;
    }

    private SortedList<string, SortedList<int, string>> GenerateSortedParameterList(
      DeviceInfo TheInfo)
    {
      SortedList<string, SortedList<int, string>> sortedParameterList = new SortedList<string, SortedList<int, string>>();
      try
      {
        for (int index1 = 0; index1 < TheInfo.ParameterList.Count; ++index1)
        {
          string defineString = TheInfo.ParameterList[index1].DefineString;
          string valueString = TheInfo.ParameterList[index1].ValueString;
          string[] strArray = defineString.Split('[');
          if (strArray.Length == 1)
            sortedParameterList.Add(defineString, new SortedList<int, string>()
            {
              {
                0,
                valueString
              }
            });
          else if (strArray.Length == 2)
          {
            int key = int.Parse(strArray[1].Replace("]", ""));
            int index2 = sortedParameterList.IndexOfKey(strArray[0]);
            if (index2 < 0)
              sortedParameterList.Add(strArray[0], new SortedList<int, string>()
              {
                {
                  key,
                  valueString
                }
              });
            else
              sortedParameterList.Values[index2].Add(key, valueString);
          }
          else
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Invalid Minomat V2 parameter: " + defineString);
        }
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Invalid Minomat V2 parameters. Reason: " + ex.Message);
      }
      return sortedParameterList;
    }

    private bool ReadMinomatV4(List<long> filter)
    {
      GMM_EventArgs eventMessage = new GMM_EventArgs(string.Empty);
      if (this.readedValues == null)
        this.readedValues = new MeasurementSet();
      this.readedValues.Clear();
      List<GlobalDeviceId> deviceList = this.MyDeviceManager.DeviceList_GetList();
      if (deviceList == null || deviceList.Count == 0)
      {
        try
        {
          eventMessage.EventMessage = "Read list of available devices...";
          this.MyDeviceManager.RaiseEvent(eventMessage);
          if (eventMessage.Cancel)
            return false;
          List<uint> registeredMessUnits = this.minomatV4.GetRegisteredMessUnits();
          if (registeredMessUnits == null)
            return false;
          deviceList = new List<GlobalDeviceId>();
          foreach (uint num in registeredMessUnits)
          {
            if (num > 0U && num < 99999999U)
              deviceList.Add(new GlobalDeviceId()
              {
                Serialnumber = num.ToString()
              });
          }
          this.MyDeviceManager.DeviceList_AddDeviceList(deviceList);
        }
        catch (Exception ex)
        {
          this.MyDeviceManager.RaiseEventError(ex);
          eventMessage.EventMessage = "Can not read the list of registered devices. " + ex.Message;
          this.MyDeviceManager.RaiseEvent(eventMessage);
          if (eventMessage.Cancel)
            return false;
        }
        eventMessage.EventMessage = deviceList.Count.ToString() + " devices available";
        this.MyDeviceManager.RaiseEvent(eventMessage);
        if (eventMessage.Cancel)
          return false;
      }
      return this.ReadValuesOfMinomatV4(filter);
    }

    private bool GetValuesFromMinomatV4(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      string serialnumber)
    {
      List<GlobalDeviceId> list = this.MyDeviceManager.DeviceList_GetList();
      if (list == null || list.Count == 0)
        return true;
      if (string.IsNullOrEmpty(serialnumber))
        throw new ArgumentNullException("Input parameter 'serialnumber' can not be null!");
      uint num = 0;
      if (!Util.TryParseToUInt32(serialnumber, out num))
        throw new ArgumentException("Can not parse input parameter 'serialnumber' to UInt32! Value: " + serialnumber);
      ValueIdent.ValueIdPart_MeterType typeOfMinolDevice = NumberRanges.GetValueIdPart_MeterTypeOfMinolDevice((long) num);
      List<long> filter = (List<long>) null;
      if (ValueList != null)
      {
        if (ValueList.Count > 0)
          filter = new List<long>((IEnumerable<long>) ValueList.Keys);
      }
      else
        ValueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      if (!this.readedValues.ContainsKey(num))
      {
        if (list.Exists((Predicate<GlobalDeviceId>) (x => x.Serialnumber == serialnumber)))
        {
          long valueIdentOfWarninig = ValueIdent.GetValueIdentOfWarninig(typeOfMinolDevice, ValueIdent.ValueIdentWarning.FailedToRead, ValueIdent.ValueIdPart_Creation.ReadingSystem);
          ReadingValue readingValue = new ReadingValue()
          {
            value = 1.0
          };
          ValueList.Add(valueIdentOfWarninig, new SortedList<DateTime, ReadingValue>()
          {
            {
              DateTime.Now,
              readingValue
            }
          });
        }
        return true;
      }
      Dictionary<MeasurementDataType, MeasurementData> readedValue = this.readedValues[num];
      NumberRanges.GetTypeOfMinolDevice((long) num);
      MinomatV4.AddValues(ValueList, readedValue, typeOfMinolDevice, filter, ValueIdent.ValueIdPart_StorageInterval.Day, MeasurementDataType.Day);
      MinomatV4.AddValues(ValueList, readedValue, typeOfMinolDevice, filter, ValueIdent.ValueIdPart_StorageInterval.Month, MeasurementDataType.MonthAndHalfMonth);
      MinomatV4.AddValues(ValueList, readedValue, typeOfMinolDevice, filter, ValueIdent.ValueIdPart_StorageInterval.DueDate, MeasurementDataType.DueDate);
      MinomatV4.AddValues(ValueList, readedValue, typeOfMinolDevice, filter, ValueIdent.ValueIdPart_StorageInterval.QuarterHour, MeasurementDataType.Quarter);
      return true;
    }

    private void AddErrorValue(
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      ValueIdent.ValueIdPart_MeterType meterType,
      ValueIdent.ValueIdentError error,
      DateTime? timepoint)
    {
      long valueIdentOfError = ValueIdent.GetValueIdentOfError(meterType, error);
      ReadingValue readingValue = new ReadingValue();
      readingValue.value = 1.0;
      SortedList<DateTime, ReadingValue> sortedList = new SortedList<DateTime, ReadingValue>();
      if (timepoint.HasValue)
      {
        sortedList.Add(timepoint.Value, readingValue);
      }
      else
      {
        DateTime now = DateTime.Now;
        sortedList.Add(new DateTime(now.Year, now.Month, now.Day), readingValue);
      }
      ValueList.Add(valueIdentOfError, sortedList);
    }

    private bool BeginSearchDevicesOnMinomatV4()
    {
      if (this.OnProgress != null)
        this.OnProgress((object) this, 0);
      this.LoadMinomatHandler();
      List<uint> registeredMessUnits = this.minomatV4.GetRegisteredMessUnits();
      if (registeredMessUnits == null)
        return false;
      int num = 0;
      foreach (uint funkId in registeredMessUnits)
      {
        if (this.OnProgress != null)
        {
          ++num;
          this.OnProgress((object) this, num * 100 / registeredMessUnits.Count);
        }
        ValueIdentSet e = new ValueIdentSet();
        e.SerialNumber = funkId.ToString();
        DeviceTypes typeOfMinolDevice = NumberRanges.GetTypeOfMinolDevice((long) funkId);
        e.DeviceType = typeOfMinolDevice.ToString();
        e.Manufacturer = NumberRanges.GetManufacturer(typeOfMinolDevice);
        e.ZDF = "SID;" + funkId.ToString() + ";MAN;" + e.Manufacturer + ";MED;" + e.DeviceType;
        this.MyDeviceManager.OnValueIdentSetReceived((object) this, e);
      }
      return true;
    }

    private bool ReadValuesOfMinomatV4(string serialnumber, List<long> filter)
    {
      uint num;
      if (string.IsNullOrEmpty(serialnumber) || !Util.TryParseToUInt32(serialnumber, out num))
        return false;
      this.LoadMinomatHandler();
      this.MyDeviceManager.DeviceList_AddDevice(new GlobalDeviceId()
      {
        Serialnumber = num.ToString()
      });
      return this.ReadValuesOfMinomatV4(filter);
    }

    private bool ReadValuesOfMinomatV4(List<long> filter)
    {
      List<GlobalDeviceId> list = this.MyDeviceManager.DeviceList_GetList();
      if (list == null || list.Count == 0)
        return true;
      this.MyDeviceManager.BreakRequest = false;
      this.minomatV4.CancelCurrentMethod = false;
      List<uint> ids = new List<uint>();
      foreach (GlobalDeviceId globalDeviceId in list)
        ids.Add(Convert.ToUInt32(globalDeviceId.Serialnumber));
      GMM_EventArgs eventMessage = new GMM_EventArgs("");
      MeasurementSet set = new MeasurementSet();
      this.LoadMinomatHandler();
      try
      {
        DateTime start = new DateTime(DateTime.Now.Year - 5, 12, 31);
        DateTime now = DateTime.Now;
        SortedList<DeviceCollectorSettings, object> collectorSettings = this.MyDeviceManager.MyBus.GetDeviceCollectorSettings();
        int count;
        if (filter == null || ValueIdent.Contains(filter, ValueIdent.ValueIdPart_StorageInterval.DueDate))
        {
          GMM_EventArgs gmmEventArgs = eventMessage;
          count = list.Count;
          string str = "Read due date values of " + count.ToString() + " devices...";
          gmmEventArgs.EventMessage = str;
          this.MyDeviceManager.RaiseEvent(eventMessage);
          if (eventMessage.Cancel)
            return false;
          TimeSpan result;
          if (collectorSettings.ContainsKey(DeviceCollectorSettings.MinomatV4_DurationDueDate) && collectorSettings[DeviceCollectorSettings.MinomatV4_DurationDueDate] != null && TimeSpan.TryParse(collectorSettings[DeviceCollectorSettings.MinomatV4_DurationDueDate].ToString(), out result))
            start = now.Add(result);
          MeasurementSet measurementData = this.minomatV4.GetMeasurementData(ids, MeasurementDataType.DueDate, start, now, false);
          if (measurementData != null && measurementData.Count > 0)
            set.Add(measurementData);
        }
        if (filter == null || ValueIdent.Contains(filter, ValueIdent.ValueIdPart_StorageInterval.Month))
        {
          GMM_EventArgs gmmEventArgs = eventMessage;
          count = list.Count;
          string str = "Read month values of " + count.ToString() + " devices...";
          gmmEventArgs.EventMessage = str;
          this.MyDeviceManager.RaiseEvent(eventMessage);
          if (eventMessage.Cancel)
            return false;
          TimeSpan result;
          if (collectorSettings.ContainsKey(DeviceCollectorSettings.MinomatV4_DurationMonth) && collectorSettings[DeviceCollectorSettings.MinomatV4_DurationMonth] != null && TimeSpan.TryParse(collectorSettings[DeviceCollectorSettings.MinomatV4_DurationMonth].ToString(), out result))
            start = now.Add(result);
          MeasurementSet measurementData = this.minomatV4.GetMeasurementData(ids, MeasurementDataType.MonthAndHalfMonth, start, now, false);
          if (measurementData != null && measurementData.Count > 0)
            set.Add(measurementData);
        }
        if (filter == null || ValueIdent.Contains(filter, ValueIdent.ValueIdPart_StorageInterval.Day))
        {
          GMM_EventArgs gmmEventArgs = eventMessage;
          count = list.Count;
          string str = "Read day values of " + count.ToString() + " devices...";
          gmmEventArgs.EventMessage = str;
          this.MyDeviceManager.RaiseEvent(eventMessage);
          if (eventMessage.Cancel)
            return false;
          TimeSpan result;
          if (collectorSettings.ContainsKey(DeviceCollectorSettings.MinomatV4_DurationDay) && collectorSettings[DeviceCollectorSettings.MinomatV4_DurationDay] != null && TimeSpan.TryParse(collectorSettings[DeviceCollectorSettings.MinomatV4_DurationDay].ToString(), out result))
            start = now.Add(result);
          MeasurementSet measurementData = this.minomatV4.GetMeasurementData(ids, MeasurementDataType.Day, start, now, false);
          if (measurementData != null && measurementData.Count > 0)
            set.Add(measurementData);
        }
        if (filter == null || ValueIdent.Contains(filter, ValueIdent.ValueIdPart_StorageInterval.QuarterHour))
        {
          GMM_EventArgs gmmEventArgs = eventMessage;
          count = list.Count;
          string str = "Read quarter values of " + count.ToString() + " devices...";
          gmmEventArgs.EventMessage = str;
          this.MyDeviceManager.RaiseEvent(eventMessage);
          if (eventMessage.Cancel)
            return false;
          TimeSpan result;
          if (collectorSettings.ContainsKey(DeviceCollectorSettings.MinomatV4_DurationQuarterHour) && collectorSettings[DeviceCollectorSettings.MinomatV4_DurationQuarterHour] != null && TimeSpan.TryParse(collectorSettings[DeviceCollectorSettings.MinomatV4_DurationQuarterHour].ToString(), out result))
            start = now.Add(result);
          MeasurementSet measurementData = this.minomatV4.GetMeasurementData(ids, MeasurementDataType.Quarter, start, now, false);
          if (measurementData != null && measurementData.Count > 0)
            set.Add(measurementData);
        }
        this.readedValues.Add(set);
      }
      catch (Exception ex)
      {
        Devices.MinomatHandler.logger.Error(ex.Message);
      }
      eventMessage.EventMessage = "Done!";
      this.MyDeviceManager.RaiseEvent(eventMessage);
      return true;
    }

    private bool ExecuteMethodMinomatV4(
      OverrideID overrideID,
      bool isSetMethod,
      out object result,
      object param1,
      object param2,
      object param3,
      object param4)
    {
      result = (object) null;
      this.LoadMinomatHandler();
      switch (overrideID)
      {
        case OverrideID.MinomatResetConfigurationState:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetResetConfigurationState();
          break;
        case OverrideID.MinomatMinolId:
          if (isSetMethod)
            return this.minomatV4.SetMinolId(param1);
          result = (object) this.minomatV4.GetMinolId();
          break;
        case OverrideID.MinomatNodeId:
          if (isSetMethod)
            return this.minomatV4.SetNodeId(param1);
          result = (object) this.minomatV4.GetNodeId();
          break;
        case OverrideID.MinomatNetworkId:
          if (isSetMethod)
            return this.minomatV4.SetNetworkId(param1);
          result = (object) this.minomatV4.GetNetworkId();
          break;
        case OverrideID.MinomatSystemTime:
          if (isSetMethod)
            return this.minomatV4.SetSystemTime(param1);
          result = (object) this.minomatV4.GetSystemTime();
          break;
        case OverrideID.MinomatRadioChannel:
          if (isSetMethod)
            return this.minomatV4.SetRadioChannel(param1);
          result = (object) this.minomatV4.GetRadioChannel();
          break;
        case OverrideID.MinomatTransceiverChannelId:
          if (isSetMethod)
            return this.minomatV4.SetTransceiverChannelId(param1);
          result = (object) this.minomatV4.GetTransceiverChannelId();
          break;
        case OverrideID.MinomatRoutingTable:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetRoutingTable();
          break;
        case OverrideID.MinomatFirmwareVersion:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetFirmwareVersion();
          break;
        case OverrideID.MinomatUserappName:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetUserappName();
          break;
        case OverrideID.MinomatFirmwareBuildTime:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetFirmwareBuildTime();
          break;
        case OverrideID.MinomatUserappBuildTime:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetUserappBuildTime();
          break;
        case OverrideID.MinomatErrorFlags:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetErrorFlags();
          break;
        case OverrideID.MinomatTransmissionPower:
          if (isSetMethod)
            return this.minomatV4.SetTransmissionPower(param1);
          result = (object) this.minomatV4.GetTransmissionPower();
          break;
        case OverrideID.MinomatMultiChannelSettings:
          if (isSetMethod)
            return this.minomatV4.SetMultiChannelSettings(param1, param2, param3, param4);
          result = (object) this.minomatV4.GetMultiChannelSettings();
          break;
        case OverrideID.MinomatTransceiverFrequencyOffset:
          if (isSetMethod)
            return this.minomatV4.SetTransceiverFrequencyOffset(param1);
          result = (object) this.minomatV4.GetTransceiverFrequencyOffset();
          break;
        case OverrideID.MinomatTemperatureOffset:
          if (isSetMethod)
            return this.minomatV4.SetTemperatureOffset(param1);
          result = (object) this.minomatV4.GetTemperatureOffset();
          break;
        case OverrideID.MinomatPhaseDetailsBuffer:
          if (isSetMethod)
            return this.minomatV4.SetPhaseDetailsBuffer(param1);
          result = (object) this.minomatV4.GetPhaseDetailsBuffer();
          break;
        case OverrideID.MinomatPhaseDetails:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetPhaseDetails();
          break;
        case OverrideID.MinomatRestartMinomat:
          return this.minomatV4.RestartMinomat();
        case OverrideID.MinomatMessUnitNumberMax:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetMessUnitNumberMax();
          break;
        case OverrideID.MinomatMaxMessUnitNumberNotConfigured:
          if (isSetMethod)
            return this.minomatV4.SetMessUnitNumberNotConfiguredMax(param1);
          result = (object) this.minomatV4.GetMessUnitNumberNotConfiguredMax();
          break;
        case OverrideID.MinomatScenario:
          if (isSetMethod)
            return this.minomatV4.SetScenario(param1);
          result = (object) this.minomatV4.GetScenario();
          break;
        case OverrideID.MinomatStartTestReception:
          return this.minomatV4.StartTestReception(param1, param2);
        case OverrideID.MinomatTestReceptionResult:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetTestReceptionResult();
          break;
        case OverrideID.MinomatRegisterMessUnit:
          result = (object) this.minomatV4.RegisterMessUnit(param1, param2, param3, param4);
          break;
        case OverrideID.MinomatResetConfiguration:
          return this.minomatV4.ResetConfiguration();
        case OverrideID.MinomatStartNetworkSetup:
          return this.minomatV4.StartNetworkSetup(param1);
        case OverrideID.MinomatDeleteMessUnit:
          result = (object) this.minomatV4.DeleteMessUnit(param1);
          break;
        case OverrideID.MinomatInfoOfRegisteredMessUnit:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetInfoOfRegisteredMessUnit(param1);
          break;
        case OverrideID.MinomatRegisteredMessUnits:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetRegisteredMessUnits();
          break;
        case OverrideID.MinomatSimPin:
          if (isSetMethod)
            return this.minomatV4.SetSimPin(param1);
          result = (object) this.minomatV4.GetSimPin();
          break;
        case OverrideID.MinomatAPN:
          if (isSetMethod)
            return this.minomatV4.SetAPN(param1);
          result = (object) this.minomatV4.GetAPN();
          break;
        case OverrideID.MinomatGPRSUserName:
          if (isSetMethod)
            return this.minomatV4.SetGPRSUserName(param1);
          result = (object) this.minomatV4.GetGPRSUserName();
          break;
        case OverrideID.MinomatGPRSPassword:
          if (isSetMethod)
            return this.minomatV4.SetGPRSPassword(param1);
          result = (object) this.minomatV4.GetGPRSPassword();
          break;
        case OverrideID.MinomatHttpServer:
          if (isSetMethod)
            return this.minomatV4.SetHttpServer(param1, param2);
          result = (object) this.minomatV4.GetHttpServer();
          break;
        case OverrideID.MinomatHttpResourceName:
          if (isSetMethod)
            return this.minomatV4.SetHttpResourceName(param1);
          result = (object) this.minomatV4.GetHttpResourceName();
          break;
        case OverrideID.MinomatStartGSMTestReception:
          return this.minomatV4.StartGSMTestReception();
        case OverrideID.MinomatGSMTestReceptionState:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetGSMTestReceptionState();
          break;
        case OverrideID.MinomatForceNetworkOptimization:
          result = (object) this.minomatV4.ForceNetworkOptimisation();
          break;
        case OverrideID.MinomatStartNetworkOptimization:
          return this.minomatV4.StartNetworkOptimization();
        case OverrideID.MinomatRegisterSlave:
          result = (object) this.minomatV4.RegisterSlave(param1, param2);
          break;
        case OverrideID.MinomatDeregisterSlave:
          result = (object) this.minomatV4.DeregisterSlave(param1);
          break;
        case OverrideID.MinomatRegisteredSlaves:
          result = (object) this.minomatV4.GetRegisteredSlaves(param1);
          break;
        case OverrideID.MinomatFlash:
          result = (object) this.minomatV4.GetFlash(param1, param2, param3, param4);
          break;
        case OverrideID.MinomatEeprom:
          result = (object) this.minomatV4.GetEeprom(param1, param2, param3);
          break;
        case OverrideID.MinomatAppInitialSettings:
          if (isSetMethod)
            return this.minomatV4.SetAppInitialSettings(param1, param2, param3, param4);
          result = (object) this.minomatV4.GetAppInitialSettings();
          break;
        case OverrideID.MinomatActionTimepoint:
          result = (object) this.minomatV4.SetActionTimepoint(param1, param2, param3);
          break;
        case OverrideID.MinomatMeasurementData:
          result = (object) this.minomatV4.GetMeasurementData(param1.ToString(), param2.ToString(), param3.ToString(), param4.ToString(), false);
          break;
        case OverrideID.MinomatHttpState:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetHttpState();
          break;
        case OverrideID.MinomatGsmState:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetGsmState();
          break;
        case OverrideID.MinomatModemBuildDate:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetModemBuildDate();
          break;
        case OverrideID.MinomatModemDueDate:
          if (isSetMethod)
            return this.minomatV4.SetModemDueDate(param1);
          result = (object) this.minomatV4.GetModemDueDate();
          break;
        case OverrideID.MinomatStartHttpConnection:
          return this.minomatV4.StartHttpConnection();
        case OverrideID.MinomatConfigurationString:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetConfigurationString();
          break;
        case OverrideID.MinomatSwitchToNetworkModel:
          return this.minomatV4.SwitchToNetworkModel();
        case OverrideID.MinomatComServerName:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetComServerFile(ComServerFileType.Name);
          break;
        case OverrideID.MinomatMessUnitMetadata:
          if (isSetMethod)
            throw new ArgumentException("Such function is not available! Value: Set" + overrideID.ToString());
          result = (object) this.minomatV4.GetMessUnitMetadata(param1);
          break;
        case OverrideID.MinomatLED:
          return this.minomatV4.SetLED(param1, param2, param3, param4);
        default:
          throw new ArgumentException("OverrideID is not supported! Value: " + overrideID.ToString());
      }
      return true;
    }

    private void FireEventOnValueIdentSetReceived(uint id, int total)
    {
      if (!this.MyDeviceManager.IsValueIdentSetReceivedEventEnabled)
        return;
      ValueIdentSet e = new ValueIdentSet();
      e.SerialNumber = id.ToString();
      DeviceTypes typeOfMinolDevice = NumberRanges.GetTypeOfMinolDevice((long) id);
      e.DeviceType = typeOfMinolDevice.ToString();
      e.Manufacturer = NumberRanges.GetManufacturer(typeOfMinolDevice);
      e.ZDF = "SID;" + id.ToString() + ";MAN;" + e.Manufacturer + ";MED;" + e.DeviceType;
      e.Total = total;
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      if (this.GetValues(ref ValueList, e.SerialNumber))
        e.AvailableValues = ValueList;
      this.MyDeviceManager.OnValueIdentSetReceived((object) this, e);
    }

    private void FireEventOnValueIdentSetReceived(GlobalDeviceId id, int total)
    {
      if (!this.MyDeviceManager.IsValueIdentSetReceivedEventEnabled)
        return;
      ValueIdentSet e = new ValueIdentSet()
      {
        Manufacturer = id.Manufacturer,
        SerialNumber = id.Serialnumber,
        DeviceType = id.DeviceTypeName
      };
      e.ZDF = "SID;" + id.Serialnumber + ";MAN;" + id.Manufacturer + ";MED;" + e.DeviceType;
      e.Total = total;
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      if (this.GetValues(ref ValueList, e.SerialNumber))
        e.AvailableValues = ValueList;
      this.MyDeviceManager.OnValueIdentSetReceived((object) this, e);
    }
  }
}


--- PdcHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.PdcHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using NLog;
using PDC_Handler;
using StartupLib;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class PdcHandler(DeviceManager MyDeviceManager) : BaseDevice(MyDeviceManager)
  {
    private SortedList<OverrideID, ConfigurationParameter> prmsMain;
    private SortedList<OverrideID, ConfigurationParameter> prmsInputA;
    private SortedList<OverrideID, ConfigurationParameter> prmsInputB;
    private static Logger logger = LogManager.GetLogger(nameof (PdcHandler));
    private PDC_HandlerFunctions pdc;

    public override event EventHandlerEx<int> OnProgress;

    public override object GetHandler()
    {
      this.GarantHandlerLoaded();
      return (object) this.pdc;
    }

    private void GarantHandlerLoaded()
    {
      if (this.pdc != null)
        return;
      if (ZR_Component.CommonGmmInterface != null)
      {
        ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.PDC_Handler);
        this.pdc = (PDC_HandlerFunctions) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.PDC_Handler];
      }
      else
        this.pdc = new PDC_HandlerFunctions((IDeviceCollector) this.MyDeviceManager.MyBus);
      this.pdc.OnProgress += new ValueEventHandler<int>(this.PDC_OnProgress);
    }

    private void PDC_OnProgress(object sender, int e)
    {
      if (this.OnProgress == null)
        return;
      this.OnProgress(sender, e);
    }

    internal override void ShowHandlerWindow()
    {
      this.GarantHandlerLoaded();
      this.pdc.ShowHandlerWindow();
    }

    public override void Dispose()
    {
      if (this.pdc == null)
        return;
      this.pdc.OnProgress -= new ValueEventHandler<int>(this.PDC_OnProgress);
      this.pdc.GMM_Dispose();
      this.pdc = (PDC_HandlerFunctions) null;
    }

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      this.GarantHandlerLoaded();
      if (this.pdc.Meter == null || this.pdc.Meter.Version == null)
        return (List<GlobalDeviceId>) null;
      List<GlobalDeviceId> globalDeviceIdList = new List<GlobalDeviceId>();
      GlobalDeviceId globalDeviceId1 = new GlobalDeviceId();
      GlobalDeviceId globalDeviceId2 = globalDeviceId1;
      uint? nullable = this.pdc.Meter.GetSerialMBusPDC();
      string str1 = nullable.ToString();
      globalDeviceId2.Serialnumber = str1;
      globalDeviceId1.DeviceTypeName = this.pdc.Meter.Version.Type.ToString();
      globalDeviceId1.Manufacturer = this.pdc.Meter.GetManufacturerPDC();
      globalDeviceId1.FirmwareVersion = this.pdc.Meter.Version.ToString();
      globalDeviceId1.MeterType = ValueIdent.ValueIdPart_MeterType.PulseCounter;
      globalDeviceId1.Generation = this.pdc.Meter.GetMBusGenerationPDC().ToString();
      globalDeviceId1.MeterNumber = this.pdc.Meter.GetSerialnumberFull();
      GlobalDeviceId globalDeviceId3 = new GlobalDeviceId();
      GlobalDeviceId globalDeviceId4 = globalDeviceId3;
      nullable = this.pdc.Meter.GetSerialMBusInputA();
      string str2 = nullable.ToString();
      globalDeviceId4.Serialnumber = str2;
      globalDeviceId3.DeviceTypeName = this.pdc.Meter.GetMediumInputA().ToString();
      globalDeviceId3.Manufacturer = this.pdc.Meter.GetManufacturerInputA();
      globalDeviceId3.MeterType = ValueIdent.ConvertToMeterType(this.pdc.Meter.GetMediumInputA().Value);
      globalDeviceId3.Address = (int) this.pdc.Meter.GetMBusAddressInputA().Value;
      globalDeviceId3.DeviceDetails = "Input A";
      globalDeviceId3.FirmwareVersion = this.pdc.Meter.Version.ToString();
      globalDeviceId3.Generation = this.pdc.Meter.GetMBusGenerationInputA().ToString();
      globalDeviceId3.MeterNumber = this.pdc.Meter.GetSerialnumberFullInputA();
      globalDeviceId1.SubDevices.Add(globalDeviceId3);
      GlobalDeviceId globalDeviceId5 = new GlobalDeviceId();
      GlobalDeviceId globalDeviceId6 = globalDeviceId5;
      nullable = this.pdc.Meter.GetSerialMBusInputB();
      string str3 = nullable.ToString();
      globalDeviceId6.Serialnumber = str3;
      globalDeviceId5.DeviceTypeName = this.pdc.Meter.GetMediumInputB().ToString();
      globalDeviceId5.Manufacturer = this.pdc.Meter.GetManufacturerInputB();
      globalDeviceId5.MeterType = ValueIdent.ConvertToMeterType(this.pdc.Meter.GetMediumInputB().Value);
      globalDeviceId5.Address = (int) this.pdc.Meter.GetMBusAddressInputB().Value;
      globalDeviceId5.DeviceDetails = "Input B";
      globalDeviceId5.FirmwareVersion = this.pdc.Meter.Version.ToString();
      globalDeviceId5.Generation = this.pdc.Meter.GetMBusGenerationInputB().ToString();
      globalDeviceId5.MeterNumber = this.pdc.Meter.GetSerialnumberFullInputB();
      globalDeviceId1.SubDevices.Add(globalDeviceId5);
      globalDeviceIdList.Add(globalDeviceId1);
      return globalDeviceIdList;
    }

    public override bool SelectDevice(GlobalDeviceId device)
    {
      this.GarantHandlerLoaded();
      return true;
    }

    public override bool Read(StructureTreeNode structureTreeNode, List<long> filter)
    {
      if (structureTreeNode == null)
        throw new NullReferenceException(nameof (structureTreeNode));
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.GarantHandlerLoaded();
      GMM_EventArgs eventMessage = new GMM_EventArgs("");
      try
      {
        eventMessage.EventMessage = "Read device";
        this.MyDeviceManager.RaiseEvent(eventMessage);
        return !eventMessage.Cancel && this.pdc.ReadDevice();
      }
      catch (Exception ex)
      {
        eventMessage.EventMessage = "Can not read (SN: " + structureTreeNode.SerialNumber + ") Reason: " + ex.Message;
        this.MyDeviceManager.RaiseEvent(eventMessage);
      }
      return false;
    }

    public override bool ReadAll(List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.GarantHandlerLoaded();
      bool flag = this.pdc.ReadDevice(true);
      if (flag)
        this.FireEventOnValueIdentSetReceived();
      return flag;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      int SubDevice)
    {
      if (this.pdc.Meter == null || this.pdc.Meter.Version == null)
        return false;
      List<long> filter = (List<long>) null;
      if (ValueList == null)
        ValueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      else if (ValueList.Count > 0)
      {
        filter = new List<long>();
        filter.AddRange((IEnumerable<long>) ValueList.Keys);
      }
      ValueList = this.pdc.GetValues(SubDevice, filter);
      ValueIdent.CleanUpEmptyValueIdents(ValueList);
      return true;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      string serialnumber)
    {
      if (this.pdc.Meter == null || this.pdc.Meter.Version == null)
        return false;
      uint? serialMbusInputA = this.pdc.Meter.GetSerialMBusInputA();
      if (serialMbusInputA.HasValue && serialMbusInputA.Value.ToString() == serialnumber)
        return this.GetValues(ref ValueList, 1);
      uint? serialMbusInputB = this.pdc.Meter.GetSerialMBusInputB();
      return serialMbusInputB.HasValue && serialMbusInputB.Value.ToString() == serialnumber && this.GetValues(ref ValueList, 2);
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      return true;
    }

    protected void AddValue(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      DateTime timePoint,
      long valueIdent,
      object obj)
    {
      ReadingValue readingValue = new ReadingValue();
      readingValue.value = Util.ToDouble(obj);
      readingValue.state = ReadingValueState.ok;
      if (valueList.ContainsKey(valueIdent))
      {
        if (valueList[valueIdent].ContainsKey(timePoint))
          return;
        valueList[valueIdent].Add(timePoint, readingValue);
      }
      else
        valueList.Add(valueIdent, new SortedList<DateTime, ReadingValue>()
        {
          {
            timePoint,
            readingValue
          }
        });
    }

    protected void AddErrorValue(
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      ValueIdent.ValueIdPart_MeterType meterType,
      ValueIdent.ValueIdentError error,
      DateTime? timepoint)
    {
      long valueIdentOfError = ValueIdent.GetValueIdentOfError(meterType, error);
      ReadingValue readingValue = new ReadingValue();
      readingValue.value = 1.0;
      SortedList<DateTime, ReadingValue> sortedList = new SortedList<DateTime, ReadingValue>();
      if (timepoint.HasValue)
      {
        sortedList.Add(timepoint.Value, readingValue);
      }
      else
      {
        DateTime now = DateTime.Now;
        sortedList.Add(new DateTime(now.Year, now.Month, now.Day), readingValue);
      }
      ValueList.Add(valueIdentOfError, sortedList);
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.GarantHandlerLoaded();
      this.prmsMain = (SortedList<OverrideID, ConfigurationParameter>) null;
      this.prmsInputA = (SortedList<OverrideID, ConfigurationParameter>) null;
      this.prmsInputB = (SortedList<OverrideID, ConfigurationParameter>) null;
      if (!this.pdc.ReadDevice())
        return false;
      List<GlobalDeviceId> globalDeviceIdList = this.GetGlobalDeviceIdList();
      if (globalDeviceIdList == null && globalDeviceIdList.Count != 1)
        return false;
      UpdatedDeviceIdentification = globalDeviceIdList[0];
      return true;
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      if (this.pdc == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      switch (SubDevice)
      {
        case 0:
          SortedList<OverrideID, ConfigurationParameter> configurationParametersPdc = this.GetConfigurationParametersPDC();
          if (configurationParametersPdc != null && this.prmsMain != null)
            this.Merge(configurationParametersPdc, this.prmsMain);
          return configurationParametersPdc;
        case 1:
          SortedList<OverrideID, ConfigurationParameter> parametersInputA = this.GetConfigurationParametersInputA();
          if (parametersInputA != null && this.prmsInputA != null)
            this.Merge(parametersInputA, this.prmsInputA);
          return parametersInputA;
        case 2:
          SortedList<OverrideID, ConfigurationParameter> parametersInputB = this.GetConfigurationParametersInputB();
          if (parametersInputB != null && this.prmsInputB != null)
            this.Merge(parametersInputB, this.prmsInputB);
          return parametersInputB;
        default:
          throw new ArgumentOutOfRangeException(nameof (SubDevice));
      }
    }

    private void Merge(
      SortedList<OverrideID, ConfigurationParameter> list,
      SortedList<OverrideID, ConfigurationParameter> newPrms)
    {
      if (newPrms == null)
        return;
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> newPrm in newPrms)
      {
        if (list.IndexOfKey(newPrm.Key) >= 0)
          list[newPrm.Key] = newPrm.Value;
      }
    }

    private static void AddParam(
      bool canChanged,
      SortedList<OverrideID, ConfigurationParameter> r,
      OverrideID overrideID,
      object obj)
    {
      PdcHandler.AddParam(canChanged, r, overrideID, obj, false, (string[]) null);
    }

    private static void AddParam(
      bool canChanged,
      SortedList<OverrideID, ConfigurationParameter> r,
      OverrideID overrideID,
      object obj,
      bool isFunction,
      string[] allowedValues)
    {
      if (!UserManager.IsConfigParamVisible(overrideID))
        return;
      bool flag = false;
      if (canChanged)
        flag = UserManager.IsConfigParamEditable(overrideID);
      r.Add(overrideID, new ConfigurationParameter(overrideID, obj)
      {
        HasWritePermission = flag,
        AllowedValues = allowedValues
      });
    }

    private SortedList<OverrideID, ConfigurationParameter> GetConfigurationParametersInputB()
    {
      SortedList<OverrideID, ConfigurationParameter> r = new SortedList<OverrideID, ConfigurationParameter>();
      PDC_Meter meter = this.pdc.Meter;
      if (meter == null || meter.Version == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      if (UserManager.IsNewLicenseModel())
      {
        MBusDeviceType? mediumInputB = meter.GetMediumInputB();
        PdcHandler.AddParam(true, r, OverrideID.SerialNumber, (object) meter.GetSerialMBusInputB());
        PdcHandler.AddParam(false, r, OverrideID.SerialNumberFull, (object) meter.GetSerialnumberFullInputB());
        PdcHandler.AddParam(true, r, OverrideID.Manufacturer, (object) meter.GetManufacturerInputB());
        PdcHandler.AddParam(true, r, OverrideID.MBusGeneration, (object) meter.GetMBusGenerationInputB());
        PdcHandler.AddParam(true, r, OverrideID.Medium, (object) mediumInputB);
        PdcHandler.AddParam(false, r, OverrideID.WarningInfo, (object) meter.GetWarningsInputB());
        PdcHandler.AddParam(true, r, OverrideID.TotalPulse, (object) meter.GetMeterValueB());
        PdcHandler.AddParam(true, r, OverrideID.PulseBlockLimit, (object) meter.GetPulseBlockLimitInputB());
        PdcHandler.AddParam(true, r, OverrideID.PulseLeakLimit, (object) meter.GetPulseLeakLimitInputB());
        PdcHandler.AddParam(true, r, OverrideID.PulseUnleakLimit, (object) meter.GetPulseUnleakLimitInputB());
        PdcHandler.AddParam(true, r, OverrideID.PulseLeakLower, (object) meter.GetPulseLeakLowerInputB());
        PdcHandler.AddParam(true, r, OverrideID.PulseLeakUpper, (object) meter.GetPulseLeakUpperInputB());
        PdcHandler.AddParam(true, r, OverrideID.OversizeDiff, (object) meter.GetOversizeDiffInputB());
        PdcHandler.AddParam(true, r, OverrideID.OversizeLimit, (object) meter.GetOversizeLimitInputB());
        PdcHandler.AddParam(true, r, OverrideID.UndersizeDiff, (object) meter.GetUndersizeDiffInputB());
        PdcHandler.AddParam(true, r, OverrideID.UndersizeLimit, (object) meter.GetUndersizeLimitInputB());
        PdcHandler.AddParam(true, r, OverrideID.BurstDiff, (object) meter.GetBurstDiffInputB());
        PdcHandler.AddParam(true, r, OverrideID.BurstLimit, (object) meter.GetBurstLimitInputB());
        PdcHandler.AddParam(true, r, OverrideID.InputPulsValue, (object) meter.GetScaleFactorInputB());
        PdcHandler.AddParam(true, r, OverrideID.ClearWarnings, (object) false, true, (string[]) null);
        PdcHandler.AddParam(true, r, OverrideID.RadioEnabled, (object) ((meter.GetRadioFlagsPDCwMBus().Value & RadioFlagsPDCwMBus.CONFIG_RADIO_CHANNEL_B) != 0));
        if (mediumInputB.HasValue && (mediumInputB.Value == MBusDeviceType.COLD_WATER || mediumInputB.Value == MBusDeviceType.HOT_AND_COLD_WATER || mediumInputB.Value == MBusDeviceType.HOT_WATER || mediumInputB.Value == MBusDeviceType.HOT_WATER_90 || mediumInputB.Value == MBusDeviceType.WATER))
          r.Add(OverrideID.NominalFlow, new ConfigurationParameter(OverrideID.NominalFlow, (object) meter.GetNominalFlowB())
          {
            HasWritePermission = true,
            AllowedValues = meter.GetNominalFlowAllowedValuesB()
          });
        ResolutionData resolutionData = MeterUnits.GetResolutionData(meter.GetVIFInputB().Value);
        PdcHandler.AddParam(true, r, OverrideID.InputResolutionStr, (object) resolutionData.resolutionString, false, InputResolution.Values);
      }
      else
      {
        bool flag1 = false;
        if (UserRights.GlobalUserRights.PackageName == "ConfigurationManagerPro")
          flag1 = true;
        else if (UserRights.GlobalUserRights.PackageName == "ConfigurationManager" && UserRights.GlobalUserRights.OptionPackageName == "Professional")
          flag1 = true;
        bool flag2 = UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer);
        MBusDeviceType? mediumInputB = meter.GetMediumInputB();
        r.Add(OverrideID.SerialNumber, new ConfigurationParameter(OverrideID.SerialNumber, (object) meter.GetSerialMBusInputB())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.SerialNumberFull, new ConfigurationParameter(OverrideID.SerialNumberFull, (object) meter.GetSerialnumberFullInputB()));
        r.Add(OverrideID.Manufacturer, new ConfigurationParameter(OverrideID.Manufacturer, (object) meter.GetManufacturerInputB())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.MBusGeneration, new ConfigurationParameter(OverrideID.MBusGeneration, (object) meter.GetMBusGenerationInputB())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.Medium, new ConfigurationParameter(OverrideID.Medium, (object) mediumInputB)
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.WarningInfo, new ConfigurationParameter(OverrideID.WarningInfo, (object) meter.GetWarningsInputB()));
        r.Add(OverrideID.ClearWarnings, new ConfigurationParameter(OverrideID.ClearWarnings)
        {
          HasWritePermission = true,
          ParameterValue = (object) false
        });
        bool ParameterValue = (meter.GetRadioFlagsPDCwMBus().Value & RadioFlagsPDCwMBus.CONFIG_RADIO_CHANNEL_B) != 0;
        r.Add(OverrideID.RadioEnabled, new ConfigurationParameter(OverrideID.RadioEnabled, (object) ParameterValue)
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.TotalPulse, new ConfigurationParameter(OverrideID.TotalPulse, (object) meter.GetMeterValueB())
        {
          HasWritePermission = true
        });
        ResolutionData resolutionData = MeterUnits.GetResolutionData(meter.GetVIFInputB().Value);
        r.Add(OverrideID.InputResolutionStr, new ConfigurationParameter(OverrideID.InputResolutionStr, (object) resolutionData.resolutionString)
        {
          HasWritePermission = true,
          AllowedValues = InputResolution.Values
        });
        if (flag1 | flag2)
        {
          if (mediumInputB.HasValue && (mediumInputB.Value == MBusDeviceType.COLD_WATER || mediumInputB.Value == MBusDeviceType.HOT_AND_COLD_WATER || mediumInputB.Value == MBusDeviceType.HOT_WATER || mediumInputB.Value == MBusDeviceType.HOT_WATER_90 || mediumInputB.Value == MBusDeviceType.WATER))
            r.Add(OverrideID.NominalFlow, new ConfigurationParameter(OverrideID.NominalFlow, (object) meter.GetNominalFlowB())
            {
              HasWritePermission = true,
              AllowedValues = meter.GetNominalFlowAllowedValuesB()
            });
          r.Add(OverrideID.PulseBlockLimit, new ConfigurationParameter(OverrideID.PulseBlockLimit, (object) meter.GetPulseBlockLimitInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseLeakLimit, new ConfigurationParameter(OverrideID.PulseLeakLimit, (object) meter.GetPulseLeakLimitInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseUnleakLimit, new ConfigurationParameter(OverrideID.PulseUnleakLimit, (object) meter.GetPulseUnleakLimitInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseLeakLower, new ConfigurationParameter(OverrideID.PulseLeakLower, (object) meter.GetPulseLeakLowerInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseLeakUpper, new ConfigurationParameter(OverrideID.PulseLeakUpper, (object) meter.GetPulseLeakUpperInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.OversizeDiff, new ConfigurationParameter(OverrideID.OversizeDiff, (object) meter.GetOversizeDiffInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.OversizeLimit, new ConfigurationParameter(OverrideID.OversizeLimit, (object) meter.GetOversizeLimitInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.UndersizeDiff, new ConfigurationParameter(OverrideID.UndersizeDiff, (object) meter.GetUndersizeDiffInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.UndersizeLimit, new ConfigurationParameter(OverrideID.UndersizeLimit, (object) meter.GetUndersizeLimitInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.BurstDiff, new ConfigurationParameter(OverrideID.BurstDiff, (object) meter.GetBurstDiffInputB())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.BurstLimit, new ConfigurationParameter(OverrideID.BurstLimit, (object) meter.GetBurstLimitInputB())
          {
            HasWritePermission = true
          });
        }
        r.Add(OverrideID.InputPulsValue, new ConfigurationParameter(OverrideID.InputPulsValue, (object) meter.GetScaleFactorInputB())
        {
          HasWritePermission = true
        });
      }
      return r;
    }

    private SortedList<OverrideID, ConfigurationParameter> GetConfigurationParametersInputA()
    {
      SortedList<OverrideID, ConfigurationParameter> r = new SortedList<OverrideID, ConfigurationParameter>();
      PDC_Meter meter = this.pdc.Meter;
      if (meter == null || meter.Version == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      if (UserManager.IsNewLicenseModel())
      {
        MBusDeviceType? mediumInputA = meter.GetMediumInputA();
        PdcHandler.AddParam(true, r, OverrideID.SerialNumber, (object) meter.GetSerialMBusInputA());
        PdcHandler.AddParam(false, r, OverrideID.SerialNumberFull, (object) meter.GetSerialnumberFullInputA());
        PdcHandler.AddParam(true, r, OverrideID.Manufacturer, (object) meter.GetManufacturerInputA());
        PdcHandler.AddParam(true, r, OverrideID.MBusGeneration, (object) meter.GetMBusGenerationInputA());
        PdcHandler.AddParam(true, r, OverrideID.Medium, (object) mediumInputA);
        PdcHandler.AddParam(false, r, OverrideID.WarningInfo, (object) meter.GetWarningsInputA());
        PdcHandler.AddParam(true, r, OverrideID.TotalPulse, (object) meter.GetMeterValueA());
        PdcHandler.AddParam(true, r, OverrideID.PulseBlockLimit, (object) meter.GetPulseBlockLimitInputA());
        PdcHandler.AddParam(true, r, OverrideID.PulseLeakLimit, (object) meter.GetPulseLeakLimitInputA());
        PdcHandler.AddParam(true, r, OverrideID.PulseUnleakLimit, (object) meter.GetPulseUnleakLimitInputA());
        PdcHandler.AddParam(true, r, OverrideID.PulseLeakLower, (object) meter.GetPulseLeakLowerInputA());
        PdcHandler.AddParam(true, r, OverrideID.PulseLeakUpper, (object) meter.GetPulseLeakUpperInputA());
        PdcHandler.AddParam(true, r, OverrideID.OversizeDiff, (object) meter.GetOversizeDiffInputA());
        PdcHandler.AddParam(true, r, OverrideID.OversizeLimit, (object) meter.GetOversizeLimitInputA());
        PdcHandler.AddParam(true, r, OverrideID.UndersizeDiff, (object) meter.GetUndersizeDiffInputA());
        PdcHandler.AddParam(true, r, OverrideID.UndersizeLimit, (object) meter.GetUndersizeLimitInputA());
        PdcHandler.AddParam(true, r, OverrideID.BurstDiff, (object) meter.GetBurstDiffInputA());
        PdcHandler.AddParam(true, r, OverrideID.BurstLimit, (object) meter.GetBurstLimitInputA());
        PdcHandler.AddParam(true, r, OverrideID.InputPulsValue, (object) meter.GetScaleFactorInputA());
        PdcHandler.AddParam(true, r, OverrideID.ClearWarnings, (object) false, true, (string[]) null);
        PdcHandler.AddParam(true, r, OverrideID.RadioEnabled, (object) ((meter.GetRadioFlagsPDCwMBus().Value & RadioFlagsPDCwMBus.CONFIG_RADIO_CHANNEL_A) != 0));
        if (mediumInputA.HasValue && (mediumInputA.Value == MBusDeviceType.COLD_WATER || mediumInputA.Value == MBusDeviceType.HOT_AND_COLD_WATER || mediumInputA.Value == MBusDeviceType.HOT_WATER || mediumInputA.Value == MBusDeviceType.HOT_WATER_90 || mediumInputA.Value == MBusDeviceType.WATER))
          r.Add(OverrideID.NominalFlow, new ConfigurationParameter(OverrideID.NominalFlow, (object) meter.GetNominalFlowA())
          {
            HasWritePermission = true,
            AllowedValues = meter.GetNominalFlowAllowedValuesA()
          });
        ResolutionData resolutionData = MeterUnits.GetResolutionData(meter.GetVIFInputA().Value);
        PdcHandler.AddParam(true, r, OverrideID.InputResolutionStr, (object) resolutionData.resolutionString, false, InputResolution.Values);
      }
      else
      {
        bool flag1 = false;
        if (UserRights.GlobalUserRights.PackageName == "ConfigurationManagerPro")
          flag1 = true;
        else if (UserRights.GlobalUserRights.PackageName == "ConfigurationManager" && UserRights.GlobalUserRights.OptionPackageName == "Professional")
          flag1 = true;
        bool flag2 = UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer);
        MBusDeviceType? mediumInputA = meter.GetMediumInputA();
        r.Add(OverrideID.SerialNumber, new ConfigurationParameter(OverrideID.SerialNumber, (object) meter.GetSerialMBusInputA())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.SerialNumberFull, new ConfigurationParameter(OverrideID.SerialNumberFull, (object) meter.GetSerialnumberFullInputA()));
        r.Add(OverrideID.Manufacturer, new ConfigurationParameter(OverrideID.Manufacturer, (object) meter.GetManufacturerInputA())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.MBusGeneration, new ConfigurationParameter(OverrideID.MBusGeneration, (object) meter.GetMBusGenerationInputA())
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.Medium, new ConfigurationParameter(OverrideID.Medium, (object) mediumInputA)
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.WarningInfo, new ConfigurationParameter(OverrideID.WarningInfo, (object) meter.GetWarningsInputA()));
        r.Add(OverrideID.ClearWarnings, new ConfigurationParameter(OverrideID.ClearWarnings)
        {
          HasWritePermission = true,
          ParameterValue = (object) false
        });
        bool ParameterValue = (meter.GetRadioFlagsPDCwMBus().Value & RadioFlagsPDCwMBus.CONFIG_RADIO_CHANNEL_A) != 0;
        r.Add(OverrideID.RadioEnabled, new ConfigurationParameter(OverrideID.RadioEnabled, (object) ParameterValue)
        {
          HasWritePermission = true
        });
        r.Add(OverrideID.TotalPulse, new ConfigurationParameter(OverrideID.TotalPulse, (object) meter.GetMeterValueA())
        {
          HasWritePermission = true
        });
        ResolutionData resolutionData = MeterUnits.GetResolutionData(meter.GetVIFInputA().Value);
        r.Add(OverrideID.InputResolutionStr, new ConfigurationParameter(OverrideID.InputResolutionStr, (object) resolutionData.resolutionString)
        {
          HasWritePermission = true,
          AllowedValues = InputResolution.Values
        });
        if (flag1 | flag2)
        {
          if (mediumInputA.HasValue && (mediumInputA.Value == MBusDeviceType.COLD_WATER || mediumInputA.Value == MBusDeviceType.HOT_AND_COLD_WATER || mediumInputA.Value == MBusDeviceType.HOT_WATER || mediumInputA.Value == MBusDeviceType.HOT_WATER_90 || mediumInputA.Value == MBusDeviceType.WATER))
            r.Add(OverrideID.NominalFlow, new ConfigurationParameter(OverrideID.NominalFlow, (object) meter.GetNominalFlowA())
            {
              HasWritePermission = true,
              AllowedValues = meter.GetNominalFlowAllowedValuesA()
            });
          r.Add(OverrideID.PulseBlockLimit, new ConfigurationParameter(OverrideID.PulseBlockLimit, (object) meter.GetPulseBlockLimitInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseLeakLimit, new ConfigurationParameter(OverrideID.PulseLeakLimit, (object) meter.GetPulseLeakLimitInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseUnleakLimit, new ConfigurationParameter(OverrideID.PulseUnleakLimit, (object) meter.GetPulseUnleakLimitInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseLeakLower, new ConfigurationParameter(OverrideID.PulseLeakLower, (object) meter.GetPulseLeakLowerInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.PulseLeakUpper, new ConfigurationParameter(OverrideID.PulseLeakUpper, (object) meter.GetPulseLeakUpperInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.OversizeDiff, new ConfigurationParameter(OverrideID.OversizeDiff, (object) meter.GetOversizeDiffInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.OversizeLimit, new ConfigurationParameter(OverrideID.OversizeLimit, (object) meter.GetOversizeLimitInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.UndersizeDiff, new ConfigurationParameter(OverrideID.UndersizeDiff, (object) meter.GetUndersizeDiffInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.UndersizeLimit, new ConfigurationParameter(OverrideID.UndersizeLimit, (object) meter.GetUndersizeLimitInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.BurstDiff, new ConfigurationParameter(OverrideID.BurstDiff, (object) meter.GetBurstDiffInputA())
          {
            HasWritePermission = true
          });
          r.Add(OverrideID.BurstLimit, new ConfigurationParameter(OverrideID.BurstLimit, (object) meter.GetBurstLimitInputA())
          {
            HasWritePermission = true
          });
        }
        r.Add(OverrideID.InputPulsValue, new ConfigurationParameter(OverrideID.InputPulsValue, (object) meter.GetScaleFactorInputA())
        {
          HasWritePermission = true
        });
      }
      return r;
    }

    private SortedList<OverrideID, ConfigurationParameter> GetConfigurationParametersPDC()
    {
      SortedList<OverrideID, ConfigurationParameter> r1 = new SortedList<OverrideID, ConfigurationParameter>();
      PDC_Meter meter = this.pdc.Meter;
      if (meter == null || meter.Version == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      if (UserManager.IsNewLicenseModel())
      {
        PdcHandler.AddParam(false, r1, OverrideID.FirmwareVersion, (object) meter.Version.VersionString);
        PdcHandler.AddParam(false, r1, OverrideID.SerialNumber, (object) meter.GetSerialMBusPDC());
        PdcHandler.AddParam(false, r1, OverrideID.SerialNumberFull, (object) meter.GetSerialnumberFull());
        PdcHandler.AddParam(false, r1, OverrideID.Manufacturer, (object) meter.GetManufacturerPDC());
        PdcHandler.AddParam(false, r1, OverrideID.DeviceClock, (object) meter.GetSystemTime());
        PdcHandler.AddParam(true, r1, OverrideID.TimeZone, (object) (Decimal) meter.GetTimeZone().Value);
        PdcHandler.AddParam(true, r1, OverrideID.DueDate, (object) meter.GetDueDate());
        PdcHandler.AddParam(false, r1, OverrideID.DeviceHasError, (object) (meter.GetHardwareErrors().Value != 0));
        PdcHandler.AddParam(false, r1, OverrideID.MBusGeneration, (object) meter.GetMBusGenerationPDC());
        PdcHandler.AddParam(false, r1, OverrideID.Medium, (object) meter.GetMediumPDC());
        PdcHandler.AddParam(false, r1, OverrideID.EndOfBatteryDate, (object) meter.GetBatteryEndDate());
        PdcHandler.AddParam(false, r1, OverrideID.RadioMode, (object) meter.GetRadioMode());
        PdcHandler.AddParam(true, r1, OverrideID.RadioSendInterval, (object) meter.GetRadioTransmitInterval());
        PdcHandler.AddParam(true, r1, OverrideID.AESKey, (object) AES.AesKeyToString(meter.GetAESkey()));
        PdcHandler.AddParam(true, r1, OverrideID.ListType, (object) meter.GetRadioListType());
        PdcHandler.AddParam(true, r1, OverrideID.RadioEnabled, (object) ((meter.GetConfigFlagsPDCwMBus().Value & ConfigFlagsPDCwMBus.CONFIG_ENABLE_RADIO) != 0));
        PdcHandler.AddParam(true, r1, OverrideID.PulseEnabled, (object) ((meter.GetConfigFlagsPDCwMBus().Value & ConfigFlagsPDCwMBus.CONFIG_ENABLE_PULSE) != 0));
        SortedList<OverrideID, ConfigurationParameter> r2 = r1;
        RadioFlagsPDCwMBus? radioFlagsPdCwMbus1 = meter.GetRadioFlagsPDCwMBus();
        RadioFlagsPDCwMBus? nullable = radioFlagsPdCwMbus1.HasValue ? new RadioFlagsPDCwMBus?(radioFlagsPdCwMbus1.GetValueOrDefault() & RadioFlagsPDCwMBus.CONFIG_RADIO_ENCRYPT) : new RadioFlagsPDCwMBus?();
        RadioFlagsPDCwMBus radioFlagsPdCwMbus2 = (RadioFlagsPDCwMBus) 0;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local = (System.ValueType) !(nullable.GetValueOrDefault() == radioFlagsPdCwMbus2 & nullable.HasValue);
        PdcHandler.AddParam(true, r2, OverrideID.Encryption, (object) local);
        PdcHandler.AddParam(true, r1, OverrideID.LongHeader, (object) ((meter.GetRadioFlagsPDCwMBus().Value & RadioFlagsPDCwMBus.CONFIG_RADIO_LONGHEADER) != 0));
        PdcHandler.AddParam(true, r1, OverrideID.SetPcTime, (object) false, true, (string[]) null);
        DeviceIdentification deviceIdentification = meter.GetDeviceIdentification();
        if (deviceIdentification != null)
          PdcHandler.AddParam(false, r1, OverrideID.MeterID, (object) deviceIdentification.MeterID);
      }
      else
      {
        bool flag1 = false;
        if (UserRights.GlobalUserRights.PackageName == "ConfigurationManagerPro")
          flag1 = true;
        else if (UserRights.GlobalUserRights.PackageName == "ConfigurationManager" && UserRights.GlobalUserRights.OptionPackageName == "Professional")
          flag1 = true;
        bool flag2 = UserRights.GlobalUserRights.CheckRight(UserRights.Rights.Developer);
        r1.Add(OverrideID.FirmwareVersion, new ConfigurationParameter(OverrideID.FirmwareVersion, (object) meter.Version.VersionString));
        r1.Add(OverrideID.SerialNumber, new ConfigurationParameter(OverrideID.SerialNumber, (object) meter.GetSerialMBusPDC()));
        r1.Add(OverrideID.SerialNumberFull, new ConfigurationParameter(OverrideID.SerialNumberFull, (object) meter.GetSerialnumberFull()));
        r1.Add(OverrideID.Manufacturer, new ConfigurationParameter(OverrideID.Manufacturer, (object) meter.GetManufacturerPDC()));
        r1.Add(OverrideID.DeviceClock, new ConfigurationParameter(OverrideID.DeviceClock, (object) meter.GetSystemTime()));
        r1.Add(OverrideID.TimeZone, new ConfigurationParameter(OverrideID.TimeZone, (object) (Decimal) meter.GetTimeZone().Value)
        {
          HasWritePermission = true
        });
        r1.Add(OverrideID.DueDate, new ConfigurationParameter(OverrideID.DueDate, (object) meter.GetDueDate())
        {
          HasWritePermission = true
        });
        r1.Add(OverrideID.DeviceHasError, new ConfigurationParameter(OverrideID.DeviceHasError, (object) (meter.GetHardwareErrors().Value != 0)));
        r1.Add(OverrideID.MBusGeneration, new ConfigurationParameter(OverrideID.MBusGeneration, (object) meter.GetMBusGenerationPDC()));
        r1.Add(OverrideID.ClearAllLoggers, new ConfigurationParameter(OverrideID.ClearAllLoggers)
        {
          HasWritePermission = true,
          ParameterValue = (object) false
        });
        r1.Add(OverrideID.SetPcTime, new ConfigurationParameter(OverrideID.SetPcTime)
        {
          HasWritePermission = true,
          ParameterValue = (object) false
        });
        r1.Add(OverrideID.Medium, new ConfigurationParameter(OverrideID.Medium, (object) meter.GetMediumPDC()));
        r1.Add(OverrideID.EndOfBattery, new ConfigurationParameter(OverrideID.EndOfBattery, (object) meter.GetBatteryEndDate()));
        DeviceIdentification deviceIdentification = meter.GetDeviceIdentification();
        if (deviceIdentification != null)
          r1.Add(OverrideID.MeterID, new ConfigurationParameter(OverrideID.MeterID, (object) deviceIdentification.MeterID));
        r1.Add(OverrideID.RadioMode, new ConfigurationParameter(OverrideID.RadioMode, (object) meter.GetRadioMode()));
        r1.Add(OverrideID.RadioSendInterval, new ConfigurationParameter(OverrideID.RadioSendInterval, (object) meter.GetRadioTransmitInterval()));
        r1.Add(OverrideID.AESKey, new ConfigurationParameter(OverrideID.AESKey, (object) meter.GetAESkey())
        {
          HasWritePermission = flag1 | flag2
        });
        bool ParameterValue1 = (meter.GetRadioFlagsPDCwMBus().Value & RadioFlagsPDCwMBus.CONFIG_RADIO_LONGHEADER) != 0;
        r1.Add(OverrideID.LongHeader, new ConfigurationParameter(OverrideID.LongHeader, (object) ParameterValue1)
        {
          HasWritePermission = flag1 | flag2
        });
        RadioFlagsPDCwMBus? radioFlagsPdCwMbus3 = meter.GetRadioFlagsPDCwMBus();
        RadioFlagsPDCwMBus? nullable = radioFlagsPdCwMbus3.HasValue ? new RadioFlagsPDCwMBus?(radioFlagsPdCwMbus3.GetValueOrDefault() & RadioFlagsPDCwMBus.CONFIG_RADIO_ENCRYPT) : new RadioFlagsPDCwMBus?();
        RadioFlagsPDCwMBus radioFlagsPdCwMbus4 = (RadioFlagsPDCwMBus) 0;
        bool ParameterValue2 = !(nullable.GetValueOrDefault() == radioFlagsPdCwMbus4 & nullable.HasValue);
        r1.Add(OverrideID.Encryption, new ConfigurationParameter(OverrideID.Encryption, (object) ParameterValue2)
        {
          HasWritePermission = flag1 | flag2
        });
        r1.Add(OverrideID.ListType, new ConfigurationParameter(OverrideID.ListType, (object) meter.GetRadioListType()));
        bool ParameterValue3 = (meter.GetConfigFlagsPDCwMBus().Value & ConfigFlagsPDCwMBus.CONFIG_ENABLE_RADIO) != 0;
        r1.Add(OverrideID.RadioEnabled, new ConfigurationParameter(OverrideID.RadioEnabled, (object) ParameterValue3)
        {
          HasWritePermission = true
        });
        bool ParameterValue4 = (meter.GetConfigFlagsPDCwMBus().Value & ConfigFlagsPDCwMBus.CONFIG_ENABLE_PULSE) != 0;
        r1.Add(OverrideID.PulseEnabled, new ConfigurationParameter(OverrideID.PulseEnabled, (object) ParameterValue4)
        {
          HasWritePermission = true
        });
      }
      return r1;
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList,
      int SubDevice)
    {
      if (this.pdc == null)
        return false;
      switch (SubDevice)
      {
        case 0:
          this.prmsMain = this.SetPrmsMain(parameterList);
          break;
        case 1:
          this.prmsInputA = this.SetPrmsInputA(parameterList);
          break;
        case 2:
          this.prmsInputB = this.SetPrmsInputB(parameterList);
          break;
        default:
          throw new ArgumentOutOfRangeException(nameof (SubDevice));
      }
      return true;
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList)
    {
      return this.SetConfigurationParameters(parameterList, 0);
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      if (this.pdc == null)
        return false;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      if (!this.pdc.WriteDevice())
        return false;
      this.CallFunctionPrmsMain();
      this.CallFunctionPrmsInputA();
      this.CallFunctionPrmsInputB();
      this.prmsMain = (SortedList<OverrideID, ConfigurationParameter>) null;
      this.prmsInputA = (SortedList<OverrideID, ConfigurationParameter>) null;
      this.prmsInputB = (SortedList<OverrideID, ConfigurationParameter>) null;
      return true;
    }

    private SortedList<OverrideID, ConfigurationParameter> SetPrmsMain(
      SortedList<OverrideID, ConfigurationParameter> newParameter)
    {
      if (newParameter == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      PDC_Meter meter = this.pdc.Meter;
      if (meter == null || meter.Version == null)
        throw new ArgumentNullException("meter");
      SortedList<OverrideID, ConfigurationParameter> sortedList = new SortedList<OverrideID, ConfigurationParameter>();
      RadioFlagsPDCwMBus? nullable1;
      ConfigFlagsPDCwMBus? nullable2;
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> keyValuePair in newParameter)
      {
        if (keyValuePair.Value.HasWritePermission && keyValuePair.Value.ParameterValue != null)
        {
          switch (keyValuePair.Key)
          {
            case OverrideID.DueDate:
              if (!meter.SetDueDate(Convert.ToDateTime(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetDueDate failed!");
              break;
            case OverrideID.RadioEnabled:
              ConfigFlagsPDCwMBus? configFlagsPdCwMbus1 = meter.GetConfigFlagsPDCwMBus();
              if (!configFlagsPdCwMbus1.HasValue)
                throw new Exception("GetConfigFlagsPDCwMBus failed!");
              ConfigFlagsPDCwMBus? nullable3;
              if (Convert.ToBoolean(keyValuePair.Value.ParameterValue))
              {
                nullable2 = configFlagsPdCwMbus1;
                nullable3 = nullable2.HasValue ? new ConfigFlagsPDCwMBus?(nullable2.GetValueOrDefault() | ConfigFlagsPDCwMBus.CONFIG_ENABLE_RADIO) : new ConfigFlagsPDCwMBus?();
              }
              else
              {
                nullable2 = configFlagsPdCwMbus1;
                nullable3 = nullable2.HasValue ? new ConfigFlagsPDCwMBus?(nullable2.GetValueOrDefault() & ~ConfigFlagsPDCwMBus.CONFIG_ENABLE_RADIO) : new ConfigFlagsPDCwMBus?();
              }
              if (!meter.SetConfigFlagsPDCwMBus(nullable3.Value))
                throw new Exception("SetConfigFlagsPDCwMBus failed!");
              break;
            case OverrideID.TimeZone:
              if (!meter.SetTimeZone(Convert.ToInt32(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetTimeZone failed!");
              break;
            case OverrideID.AESKey:
              if (keyValuePair.Value.ParameterValue != null)
              {
                if (!meter.SetAESkey(keyValuePair.Value.ParameterValue))
                  throw new Exception("SetAESkey failed!");
                break;
              }
              if (!meter.SetAESkey((byte[]) null))
                throw new Exception("SetAESkey failed!");
              break;
            case OverrideID.ListType:
              meter.SetRadioListType(keyValuePair.Value.ToString());
              break;
            case OverrideID.LongHeader:
              RadioFlagsPDCwMBus? radioFlagsPdCwMbus1 = meter.GetRadioFlagsPDCwMBus();
              if (!radioFlagsPdCwMbus1.HasValue)
                throw new Exception("GetRadioFlagsPDCwMBus failed!");
              RadioFlagsPDCwMBus? nullable4;
              if (Convert.ToBoolean(keyValuePair.Value.ParameterValue))
              {
                nullable1 = radioFlagsPdCwMbus1;
                nullable4 = nullable1.HasValue ? new RadioFlagsPDCwMBus?(nullable1.GetValueOrDefault() | RadioFlagsPDCwMBus.CONFIG_RADIO_LONGHEADER) : new RadioFlagsPDCwMBus?();
              }
              else
              {
                nullable1 = radioFlagsPdCwMbus1;
                nullable4 = nullable1.HasValue ? new RadioFlagsPDCwMBus?(nullable1.GetValueOrDefault() & ~RadioFlagsPDCwMBus.CONFIG_RADIO_LONGHEADER) : new RadioFlagsPDCwMBus?();
              }
              if (!meter.SetRadioFlagsPDCwMBus(nullable4.Value))
                throw new Exception("SetRadioFlagsPDCwMBus failed!");
              break;
            case OverrideID.Encryption:
              RadioFlagsPDCwMBus? radioFlagsPdCwMbus2 = meter.GetRadioFlagsPDCwMBus();
              if (!radioFlagsPdCwMbus2.HasValue)
                throw new Exception("GetRadioFlagsPDCwMBus failed!");
              RadioFlagsPDCwMBus? nullable5;
              if (Convert.ToBoolean(keyValuePair.Value.ParameterValue))
              {
                nullable1 = radioFlagsPdCwMbus2;
                nullable5 = nullable1.HasValue ? new RadioFlagsPDCwMBus?(nullable1.GetValueOrDefault() | RadioFlagsPDCwMBus.CONFIG_RADIO_ENCRYPT) : new RadioFlagsPDCwMBus?();
              }
              else
              {
                nullable1 = radioFlagsPdCwMbus2;
                nullable5 = nullable1.HasValue ? new RadioFlagsPDCwMBus?(nullable1.GetValueOrDefault() & ~RadioFlagsPDCwMBus.CONFIG_RADIO_ENCRYPT) : new RadioFlagsPDCwMBus?();
              }
              if (!meter.SetRadioFlagsPDCwMBus(nullable5.Value))
                throw new Exception("SetRadioFlagsPDCwMBus failed!");
              break;
            case OverrideID.PulseEnabled:
              ConfigFlagsPDCwMBus? configFlagsPdCwMbus2 = meter.GetConfigFlagsPDCwMBus();
              if (!configFlagsPdCwMbus2.HasValue)
                throw new Exception("GetConfigFlagsPDCwMBus failed!");
              ConfigFlagsPDCwMBus? nullable6;
              if (Convert.ToBoolean(keyValuePair.Value.ParameterValue))
              {
                nullable2 = configFlagsPdCwMbus2;
                nullable6 = nullable2.HasValue ? new ConfigFlagsPDCwMBus?(nullable2.GetValueOrDefault() | ConfigFlagsPDCwMBus.CONFIG_ENABLE_PULSE) : new ConfigFlagsPDCwMBus?();
              }
              else
              {
                nullable2 = configFlagsPdCwMbus2;
                nullable6 = nullable2.HasValue ? new ConfigFlagsPDCwMBus?(nullable2.GetValueOrDefault() & ~ConfigFlagsPDCwMBus.CONFIG_ENABLE_PULSE) : new ConfigFlagsPDCwMBus?();
              }
              if (!meter.SetConfigFlagsPDCwMBus(nullable6.Value))
                throw new Exception("SetConfigFlagsPDCwMBus failed!");
              break;
            default:
              sortedList.Add(keyValuePair.Key, keyValuePair.Value);
              break;
          }
        }
      }
      return sortedList;
    }

    private SortedList<OverrideID, ConfigurationParameter> SetPrmsInputA(
      SortedList<OverrideID, ConfigurationParameter> newParameter)
    {
      if (newParameter == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      PDC_Meter meter = this.pdc.Meter;
      if (meter == null || meter.Version == null)
        throw new ArgumentNullException("meter");
      SortedList<OverrideID, ConfigurationParameter> sortedList = new SortedList<OverrideID, ConfigurationParameter>();
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> keyValuePair in newParameter)
      {
        if (keyValuePair.Value.HasWritePermission && keyValuePair.Value.ParameterValue != null)
        {
          switch (keyValuePair.Key)
          {
            case OverrideID.SerialNumber:
              if (!meter.SetSerialMBusInputA(Convert.ToUInt32(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetSerialMBusInputA failed!");
              break;
            case OverrideID.Medium:
              if (!meter.SetMediumInputA((MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), keyValuePair.Value.ParameterValue.ToString(), true)))
                throw new Exception("SetMediumInputA failed!");
              break;
            case OverrideID.InputPulsValue:
              if (!meter.SetScaleFactorInputA((double) Convert.ToSingle(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetScaleFactorInputA failed!");
              break;
            case OverrideID.RadioEnabled:
              RadioFlagsPDCwMBus? radioFlagsPdCwMbus = meter.GetRadioFlagsPDCwMBus();
              if (!radioFlagsPdCwMbus.HasValue)
                throw new Exception("GetRadioFlagsPDCwMBus failed!");
              RadioFlagsPDCwMBus? nullable1;
              RadioFlagsPDCwMBus? nullable2;
              if (Convert.ToBoolean(keyValuePair.Value.ParameterValue))
              {
                nullable1 = radioFlagsPdCwMbus;
                nullable2 = nullable1.HasValue ? new RadioFlagsPDCwMBus?(nullable1.GetValueOrDefault() | RadioFlagsPDCwMBus.CONFIG_RADIO_CHANNEL_A) : new RadioFlagsPDCwMBus?();
              }
              else
              {
                nullable1 = radioFlagsPdCwMbus;
                nullable2 = nullable1.HasValue ? new RadioFlagsPDCwMBus?(nullable1.GetValueOrDefault() & ~RadioFlagsPDCwMBus.CONFIG_RADIO_CHANNEL_A) : new RadioFlagsPDCwMBus?();
              }
              if (!meter.SetRadioFlagsPDCwMBus(nullable2.Value))
                throw new Exception("SetRadioFlagsPDCwMBus failed!");
              break;
            case OverrideID.Manufacturer:
              if (!meter.SetManufacturerInputA(keyValuePair.Value.ParameterValue.ToString()))
                throw new Exception("SetManufacturerInputA failed!");
              break;
            case OverrideID.InputResolutionStr:
              ResolutionData resolutionData = MeterUnits.GetResolutionData(keyValuePair.Value.ParameterValue.ToString());
              if (!meter.SetVIFInputA((byte) resolutionData.mbusVIF))
                throw new Exception("SetVIFInputA failed!");
              break;
            case OverrideID.PulseBlockLimit:
              if (!meter.SetPulseBlockLimitInputA(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseBlockLimitInputA failed!");
              break;
            case OverrideID.PulseLeakLimit:
              if (!meter.SetPulseLeakLimitInputA(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseLeakLimitInputA failed!");
              break;
            case OverrideID.PulseUnleakLimit:
              if (!meter.SetPulseUnleakLimitInputA(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseUnleakLimitInputA failed!");
              break;
            case OverrideID.PulseLeakLower:
              if (!meter.SetPulseLeakLowerInputA(Convert.ToInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseLeakLowerInputA failed!");
              break;
            case OverrideID.PulseLeakUpper:
              if (!meter.SetPulseLeakUpperInputA(Convert.ToInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseLeakUpperInputA failed!");
              break;
            case OverrideID.OversizeDiff:
              if (!meter.SetOversizeDiffInputA(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetOversizeDiffInputA failed!");
              break;
            case OverrideID.OversizeLimit:
              if (!meter.SetOversizeLimitInputA(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetOversizeLimitInputA failed!");
              break;
            case OverrideID.UndersizeDiff:
              if (!meter.SetUndersizeDiffInputA(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetUndersizeDiffInputA failed!");
              break;
            case OverrideID.UndersizeLimit:
              if (!meter.SetUndersizeLimitInputA(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetUndersizeLimitInputA failed!");
              break;
            case OverrideID.BurstDiff:
              if (!meter.SetBurstDiffInputA(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetBurstDiffInputA failed!");
              break;
            case OverrideID.BurstLimit:
              if (!meter.SetBurstLimitInputA(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetBurstLimitInputA failed!");
              break;
            case OverrideID.MBusGeneration:
              if (!meter.SetMBusGenerationInputA(Convert.ToByte(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetMBusGenerationInputA failed!");
              break;
            case OverrideID.ClearWarnings:
              if (Convert.ToBoolean(keyValuePair.Value.ParameterValue) && !meter.SetWarningsInputA((Warning) 0))
                throw new Exception("SetWarningsInputA failed!");
              continue;
            case OverrideID.NominalFlow:
              double num = Convert.ToDouble(keyValuePair.Value.ParameterValue, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
              meter.SetNominalFlowA(num);
              break;
            default:
              sortedList.Add(keyValuePair.Key, keyValuePair.Value);
              break;
          }
        }
      }
      return sortedList;
    }

    private SortedList<OverrideID, ConfigurationParameter> SetPrmsInputB(
      SortedList<OverrideID, ConfigurationParameter> newParameter)
    {
      if (newParameter == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      PDC_Meter meter = this.pdc.Meter;
      if (meter == null || meter.Version == null)
        throw new ArgumentNullException("meter");
      SortedList<OverrideID, ConfigurationParameter> sortedList = new SortedList<OverrideID, ConfigurationParameter>();
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> keyValuePair in newParameter)
      {
        if (keyValuePair.Value.HasWritePermission && keyValuePair.Value.ParameterValue != null)
        {
          switch (keyValuePair.Key)
          {
            case OverrideID.SerialNumber:
              if (!meter.SetSerialMBusInputB(Convert.ToUInt32(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetSerialMBusInputB failed!");
              break;
            case OverrideID.Medium:
              if (!meter.SetMediumInputB((MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), keyValuePair.Value.ParameterValue.ToString(), true)))
                throw new Exception("SetMediumInputB failed!");
              break;
            case OverrideID.InputPulsValue:
              if (!meter.SetScaleFactorInputB((double) Convert.ToSingle(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetScaleFactorInputB failed!");
              break;
            case OverrideID.RadioEnabled:
              RadioFlagsPDCwMBus? radioFlagsPdCwMbus = meter.GetRadioFlagsPDCwMBus();
              if (!radioFlagsPdCwMbus.HasValue)
                throw new Exception("GetRadioFlagsPDCwMBus failed!");
              RadioFlagsPDCwMBus? nullable1;
              RadioFlagsPDCwMBus? nullable2;
              if (Convert.ToBoolean(keyValuePair.Value.ParameterValue))
              {
                nullable1 = radioFlagsPdCwMbus;
                nullable2 = nullable1.HasValue ? new RadioFlagsPDCwMBus?(nullable1.GetValueOrDefault() | RadioFlagsPDCwMBus.CONFIG_RADIO_CHANNEL_B) : new RadioFlagsPDCwMBus?();
              }
              else
              {
                nullable1 = radioFlagsPdCwMbus;
                nullable2 = nullable1.HasValue ? new RadioFlagsPDCwMBus?(nullable1.GetValueOrDefault() & ~RadioFlagsPDCwMBus.CONFIG_RADIO_CHANNEL_B) : new RadioFlagsPDCwMBus?();
              }
              if (!meter.SetRadioFlagsPDCwMBus(nullable2.Value))
                throw new Exception("SetRadioFlagsPDCwMBus failed!");
              break;
            case OverrideID.Manufacturer:
              if (!meter.SetManufacturerInputB(keyValuePair.Value.ParameterValue.ToString()))
                throw new Exception("SetManufacturerInputB failed!");
              break;
            case OverrideID.InputResolutionStr:
              ResolutionData resolutionData = MeterUnits.GetResolutionData(keyValuePair.Value.ParameterValue.ToString());
              if (!meter.SetVIFInputB((byte) resolutionData.mbusVIF))
                throw new Exception("SetVIFInputB failed!");
              break;
            case OverrideID.PulseBlockLimit:
              if (!meter.SetPulseBlockLimitInputB(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseBlockLimitInputB failed!");
              break;
            case OverrideID.PulseLeakLimit:
              if (!meter.SetPulseLeakLimitInputB(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseLeakLimitInputB failed!");
              break;
            case OverrideID.PulseUnleakLimit:
              if (!meter.SetPulseUnleakLimitInputB(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseUnleakLimitInputB failed!");
              break;
            case OverrideID.PulseLeakLower:
              if (!meter.SetPulseLeakLowerInputB(Convert.ToInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseLeakLowerInputB failed!");
              break;
            case OverrideID.PulseLeakUpper:
              if (!meter.SetPulseLeakUpperInputB(Convert.ToInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetPulseLeakUpperInputB failed!");
              break;
            case OverrideID.OversizeDiff:
              if (!meter.SetOversizeDiffInputB(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetOversizeDiffInputB failed!");
              break;
            case OverrideID.OversizeLimit:
              if (!meter.SetOversizeLimitInputB(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetOversizeLimitInputB failed!");
              break;
            case OverrideID.UndersizeDiff:
              if (!meter.SetUndersizeDiffInputB(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetUndersizeDiffInputB failed!");
              break;
            case OverrideID.UndersizeLimit:
              if (!meter.SetUndersizeLimitInputB(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetUndersizeLimitInputB failed!");
              break;
            case OverrideID.BurstDiff:
              if (!meter.SetBurstDiffInputB(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetBurstDiffInputB failed!");
              break;
            case OverrideID.BurstLimit:
              if (!meter.SetBurstLimitInputB(Convert.ToUInt16(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetBurstLimitInputB failed!");
              break;
            case OverrideID.MBusGeneration:
              if (!meter.SetMBusGenerationInputB(Convert.ToByte(keyValuePair.Value.ParameterValue)))
                throw new Exception("SetMBusGenerationInputB failed!");
              break;
            case OverrideID.ClearWarnings:
              if (Convert.ToBoolean(keyValuePair.Value.ParameterValue) && !meter.SetWarningsInputB((Warning) 0))
                throw new Exception("SetWarningsInputB failed!");
              continue;
            case OverrideID.NominalFlow:
              double num = Convert.ToDouble(keyValuePair.Value.ParameterValue, (IFormatProvider) FixedFormates.TheFormates.NumberFormat);
              meter.SetNominalFlowB(num);
              break;
            default:
              sortedList.Add(keyValuePair.Key, keyValuePair.Value);
              break;
          }
        }
      }
      return sortedList;
    }

    private void CallFunctionPrmsMain()
    {
      if (this.prmsMain == null)
        return;
      PDC_Meter meter = this.pdc.Meter;
      DeviceVersion deviceVersion = meter != null && meter.Version != null ? meter.Version : throw new ArgumentNullException("meter");
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> keyValuePair in this.prmsMain)
      {
        if (keyValuePair.Value.IsFunction && (keyValuePair.Value.ParameterValue != null || keyValuePair.Value.HasWritePermission))
        {
          if (keyValuePair.Key != OverrideID.SetPcTime)
            throw new ArgumentException("Not handled parameter detected: " + keyValuePair.ToString());
          if (Convert.ToBoolean(keyValuePair.Value.ParameterValue) && !this.pdc.WriteSystemTime(DateTime.Now))
            throw new Exception("WriteSystemTime failed!");
        }
      }
    }

    private void CallFunctionPrmsInputA()
    {
      if (this.prmsInputA == null)
        return;
      PDC_Meter meter = this.pdc.Meter;
      DeviceVersion deviceVersion = meter != null && meter.Version != null ? meter.Version : throw new ArgumentNullException("meter");
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> keyValuePair in this.prmsInputA)
      {
        if ((keyValuePair.Key == OverrideID.TotalPulse || keyValuePair.Value.IsFunction) && (keyValuePair.Value.ParameterValue != null || keyValuePair.Value.HasWritePermission))
        {
          if (keyValuePair.Key != OverrideID.TotalPulse)
            throw new ArgumentException("Not handled parameter detected: " + keyValuePair.ToString());
          double? scaleFactorInputA = meter.GetScaleFactorInputA();
          if (!scaleFactorInputA.HasValue)
            throw new Exception("GetScaleFactorInputA failed!");
          uint uint32_1 = Convert.ToUInt32(keyValuePair.Value.ParameterValue);
          PDC_HandlerFunctions pdc = this.pdc;
          double num = (double) uint32_1;
          double? nullable = scaleFactorInputA;
          int uint32_2 = (int) Convert.ToUInt32((object) (nullable.HasValue ? new double?(num * nullable.GetValueOrDefault()) : new double?()));
          if (!pdc.WriteMeterValue((byte) 0, (uint) uint32_2))
            throw new Exception("WriteMeterValue input A failed!");
        }
      }
    }

    private void CallFunctionPrmsInputB()
    {
      if (this.prmsInputB == null)
        return;
      PDC_Meter meter = this.pdc.Meter;
      DeviceVersion deviceVersion = meter != null && meter.Version != null ? meter.Version : throw new ArgumentNullException("meter");
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> keyValuePair in this.prmsInputB)
      {
        if ((keyValuePair.Key == OverrideID.TotalPulse || keyValuePair.Value.IsFunction) && (keyValuePair.Value.ParameterValue != null || keyValuePair.Value.HasWritePermission))
        {
          if (keyValuePair.Key != OverrideID.TotalPulse)
            throw new ArgumentException("Not handled parameter detected: " + keyValuePair.ToString());
          double? scaleFactorInputB = meter.GetScaleFactorInputB();
          if (!scaleFactorInputB.HasValue)
            throw new Exception("GetScaleFactorInputB failed!");
          uint uint32_1 = Convert.ToUInt32(keyValuePair.Value.ParameterValue);
          PDC_HandlerFunctions pdc = this.pdc;
          double num = (double) uint32_1;
          double? nullable = scaleFactorInputB;
          int uint32_2 = (int) Convert.ToUInt32((object) (nullable.HasValue ? new double?(num * nullable.GetValueOrDefault()) : new double?()));
          if (!pdc.WriteMeterValue((byte) 1, (uint) uint32_2))
            throw new Exception("WriteMeterValue input B failed!");
        }
      }
    }

    public override bool BeginSearchDevices()
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      return this.ReadAll((List<long>) null);
    }

    private void FireEventOnValueIdentSetReceived()
    {
      if (!this.MyDeviceManager.IsValueIdentSetReceivedEventEnabled || this.pdc.Meter == null || this.pdc.Meter.Version == null)
        return;
      ValueIdentSet e1 = new ValueIdentSet();
      e1.Manufacturer = this.pdc.Meter.GetManufacturerInputA();
      byte? generationInputA = this.pdc.Meter.GetMBusGenerationInputA();
      byte num;
      if (generationInputA.HasValue)
      {
        ValueIdentSet valueIdentSet = e1;
        num = generationInputA.Value;
        string str = num.ToString();
        valueIdentSet.Version = str;
      }
      MBusDeviceType? mediumInputA = this.pdc.Meter.GetMediumInputA();
      MBusDeviceType mbusDeviceType;
      if (mediumInputA.HasValue)
      {
        ValueIdentSet valueIdentSet = e1;
        mbusDeviceType = mediumInputA.Value;
        string str = mbusDeviceType.ToString();
        valueIdentSet.DeviceType = str;
      }
      else
        e1.DeviceType = MBusDeviceType.UNKNOWN.ToString();
      uint? serialMbusInputA = this.pdc.Meter.GetSerialMBusInputA();
      if (serialMbusInputA.HasValue)
        e1.SerialNumber = serialMbusInputA.ToString();
      e1.ZDF = "SID;" + e1.SerialNumber + ";MAN;MINOL;MED;" + e1.DeviceType;
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList1 = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      if (this.GetValues(ref ValueList1, 1))
        e1.AvailableValues = ValueList1;
      this.MyDeviceManager.OnValueIdentSetReceived((object) this, e1);
      ValueIdentSet e2 = new ValueIdentSet();
      e2.Manufacturer = this.pdc.Meter.GetManufacturerInputB();
      byte? generationInputB = this.pdc.Meter.GetMBusGenerationInputB();
      if (generationInputB.HasValue)
      {
        ValueIdentSet valueIdentSet = e2;
        num = generationInputB.Value;
        string str = num.ToString();
        valueIdentSet.Version = str;
      }
      MBusDeviceType? mediumInputB = this.pdc.Meter.GetMediumInputB();
      if (mediumInputB.HasValue)
      {
        ValueIdentSet valueIdentSet = e2;
        mbusDeviceType = mediumInputB.Value;
        string str = mbusDeviceType.ToString();
        valueIdentSet.DeviceType = str;
      }
      else
      {
        ValueIdentSet valueIdentSet = e2;
        mbusDeviceType = MBusDeviceType.UNKNOWN;
        string str = mbusDeviceType.ToString();
        valueIdentSet.DeviceType = str;
      }
      uint? serialMbusInputB = this.pdc.Meter.GetSerialMBusInputB();
      if (serialMbusInputB.HasValue)
        e2.SerialNumber = serialMbusInputB.ToString();
      e2.ZDF = "SID;" + e2.SerialNumber + ";MAN;MINOL;MED;" + e2.DeviceType;
      SortedList<long, SortedList<DateTime, ReadingValue>> ValueList2 = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      if (this.GetValues(ref ValueList2, 2))
        e2.AvailableValues = ValueList2;
      this.MyDeviceManager.OnValueIdentSetReceived((object) this, e2);
    }
  }
}


--- RelayDeviceHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.RelayDeviceHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using System;
using System.Collections.Generic;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  internal sealed class RelayDeviceHandler(DeviceManager MyDeviceManager) : BaseDevice(MyDeviceManager)
  {
    public override object GetHandler() => (object) this.MyDeviceManager.MyBus;

    public override bool SelectDevice(GlobalDeviceId device)
    {
      return this.MyDeviceManager.MyBus.SetSelectedDeviceBySerialNumber(device.Serialnumber);
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      int subDeviceIndex)
    {
      List<DeviceInfo> parameters = this.MyDeviceManager.MyBus.GetParameters();
      if (parameters == null || parameters.Count <= 0)
        return false;
      SortedList<DeviceCollectorSettings, object> collectorSettings = this.MyDeviceManager.MyBus.GetDeviceCollectorSettings();
      DateTime dateTime1 = Convert.ToDateTime(collectorSettings[DeviceCollectorSettings.FromTime]);
      DateTime dateTime2 = Convert.ToDateTime(collectorSettings[DeviceCollectorSettings.ToTime]);
      StringBuilder stringBuilder = new StringBuilder();
      int count = parameters.Count;
      int num1 = 1;
      foreach (DeviceInfo deviceInfo in parameters)
      {
        int num2 = num1 * 100 / count;
        GMM_EventArgs eventMessage = new GMM_EventArgs(GMM_EventArgs.MessageType.MessageAndProgressPercentage);
        eventMessage.EventMessage = "Progress encode" + num2.ToString() + " %";
        eventMessage.ProgressPercentage = num2;
        this.MyDeviceManager.RaiseEvent(eventMessage);
        if (eventMessage.Cancel)
          return false;
        ++num1;
        if (Util.IsValidTimePoint(deviceInfo.LastReadingDate, dateTime1, dateTime2, true))
        {
          string zdfParameterString = deviceInfo.GetZDFParameterString();
          if (!TranslationRulesManager.Instance.TryParse(zdfParameterString, subDeviceIndex, ref valueList))
            stringBuilder.Append(zdfParameterString + ZR_Constants.SystemNewLine);
        }
      }
      if (stringBuilder.Length > 0)
        ZR_ClassLibMessages.AddWarning("An unknown device was found!", stringBuilder.ToString());
      this.MyDeviceManager.RaiseEvent(new GMM_EventArgs(GMM_EventArgs.MessageType.SimpleMessage));
      return true;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      return this.GetValues(ref valueList, 0);
    }

    public override bool ReadAll(List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      return this.MyDeviceManager.MyBus.ScanFromAddress(0);
    }
  }
}


--- Series2Device.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.Series2Device
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

#nullable disable
namespace Devices
{
  internal class Series2Device : MBusDeviceHandler
  {
    internal Series2Device(DeviceManager MyDeviceManager)
      : base(MyDeviceManager)
    {
    }
  }
}


--- Series2DeviceByHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.Series2DeviceByHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using GMM_Handler;
using System;
using System.Collections.Generic;
using System.Globalization;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class Series2DeviceByHandler : MBusDeviceHandler
  {
    private string strSoftwareversion;
    private ZR_MeterIdent DeviceIdentity;
    private IZR_HandlerFunctions MyS2Handler = (IZR_HandlerFunctions) null;

    public Series2DeviceByHandler(DeviceManager MyDeviceManager)
      : base(MyDeviceManager)
    {
      if (SystemValues.ZRDezimalSeparator != null)
        return;
      SystemValues.ZRDezimalSeparator = new CultureInfo(CultureInfo.CurrentCulture.Name).NumberFormat.NumberDecimalSeparator;
    }

    private void GarantS2HandlerLoaded()
    {
      if (this.MyS2Handler != null)
        return;
      if (ZR_Component.CommonGmmInterface != null)
      {
        ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.GMM_Handler);
        this.MyS2Handler = (IZR_HandlerFunctions) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.GMM_Handler];
      }
      else
        this.MyS2Handler = (IZR_HandlerFunctions) new ZR_HandlerFunctions((IDeviceCollector) this.MyDeviceManager.MyBus, this.MyDeviceManager.MyBus.AsyncCom);
      this.MyS2Handler.BackupForEachRead = false;
    }

    public override object GetHandler() => (object) this.MyS2Handler;

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      if (this.MyS2Handler == null)
        return (List<GlobalDeviceId>) null;
      GlobalDeviceId deviceIdentification = this.MyS2Handler.GetDeviceIdentification();
      if (deviceIdentification == null)
        return (List<GlobalDeviceId>) null;
      return new List<GlobalDeviceId>()
      {
        deviceIdentification
      };
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      this.GarantS2HandlerLoaded();
      this.MyDeviceManager.MyBus.IsDeviceModified();
      if (this.MyS2Handler.checkConnection(out this.strSoftwareversion) != 0)
        return false;
      this.MyS2Handler.ReadConnectedDevice(out this.DeviceIdentity);
      UpdatedDeviceIdentification = this.MyS2Handler.GetDeviceIdentification();
      return true;
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      this.MyDeviceManager.ParameterType = ConfigurationType;
      return this.MyS2Handler.GetConfigurationParameters(ConfigurationParameter.ValueType.Complete, SubDevice);
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> ConfigParameterList,
      int SubDevice)
    {
      this.SetConfigParamList = ConfigParameterList;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.FunctionNotImplemented);
      return false;
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      return this.MyS2Handler.progDevice(!DateTime.Now.IsDaylightSavingTime() ? DateTime.Now : DateTime.Now.AddHours(1.0));
    }
  }
}


--- Series3Device.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.Series3Device
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  internal class Series3Device : MBusDeviceHandler
  {
    internal Series3Device(DeviceManager MyDeviceManager)
      : base(MyDeviceManager)
    {
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      bool telegrammEnabled = this.MyDeviceManager.MyBus.IsMultiTelegrammEnabled;
      this.MyDeviceManager.MyBus.IsMultiTelegrammEnabled = false;
      try
      {
        return base.ReadConfigurationParameters(out UpdatedDeviceIdentification);
      }
      finally
      {
        this.MyDeviceManager.MyBus.IsMultiTelegrammEnabled = telegrammEnabled;
      }
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      SortedList<OverrideID, ConfigurationParameter> configurationParameters = base.GetConfigurationParameters(ConfigurationType, SubDevice) ?? new SortedList<OverrideID, ConfigurationParameter>();
      configurationParameters.Add(OverrideID.RadioProtocol, new ConfigurationParameter(OverrideID.RadioProtocol, (object) RadioProtocol.Undefined)
      {
        HasWritePermission = true
      });
      configurationParameters.Add(OverrideID.DueDateMonth, new ConfigurationParameter(OverrideID.DueDateMonth, (object) 0)
      {
        HasWritePermission = true
      });
      return configurationParameters;
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      if (!base.WriteChangedConfigurationParametersToDevice() || this.SetConfigParamList == null)
        return false;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      if (this.SetConfigParamList.ContainsKey(OverrideID.RadioProtocol))
      {
        ConfigurationParameter setConfigParam = this.SetConfigParamList[OverrideID.RadioProtocol];
        DeviceCollectorFunctions myBus = this.MyDeviceManager.MyBus;
        ReadVersionData versionData;
        if (!myBus.ReadVersion(out versionData))
          return false;
        bool flag = versionData.Version < 83963909U;
        switch ((RadioProtocol) Enum.Parse(typeof (RadioProtocol), setConfigParam.ParameterValue.ToString(), true))
        {
          case RadioProtocol.Scenario1:
            if (flag)
            {
              if (!myBus.SelectParameterList(2, 1))
                return false;
              break;
            }
            if (!myBus.SelectParameterList(1, 1))
              return false;
            break;
          case RadioProtocol.Scenario3:
            if (flag)
            {
              if (!myBus.SelectParameterList(1, 1))
                return false;
              break;
            }
            if (!myBus.SelectParameterList(3, 1))
              return false;
            break;
          default:
            return false;
        }
      }
      return !this.SetConfigParamList.ContainsKey(OverrideID.DueDateMonth) || this.MyDeviceManager.MyBus.WriteDueDateMonth(Convert.ToUInt16(this.SetConfigParamList[OverrideID.DueDateMonth].ParameterValue));
    }
  }
}


--- Series3DeviceByHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.Series3DeviceByHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using S3_Handler;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class Series3DeviceByHandler(DeviceManager MyDeviceManager) : MBusDeviceHandler(MyDeviceManager)
  {
    private S3_HandlerFunctions MyS3Handler = (S3_HandlerFunctions) null;
    private bool typeMode;

    public override event EventHandlerEx<int> OnProgress;

    public override object GetHandler() => (object) this.MyS3Handler;

    private void GarantS3HandlerLoaded()
    {
      if (this.MyS3Handler == null)
      {
        if (this.MyDeviceManager.IsPlugin)
        {
          this.MyS3Handler = (S3_HandlerFunctions) PlugInLoader.GetPlugIn("S3_Handler").GetPluginInfo().Interface;
        }
        else
        {
          this.MyS3Handler = new S3_HandlerFunctions((IDeviceCollector) this.MyDeviceManager.MyBus);
          this.MyS3Handler.meterBackupOnRead = false;
          this.MyS3Handler.meterBackupOnWrite = false;
          this.MyS3Handler.loadLastSettingsOnStart = false;
          this.MyS3Handler.onlyOneReadBackupPerDay = false;
          this.MyS3Handler.saveLastSettingsOnExit = false;
        }
      }
      this.MyS3Handler.usePcTime = true;
      this.MyS3Handler.OnProgress += new EventHandlerEx<int>(this.S3Handler_OnProgress);
    }

    private void S3Handler_OnProgress(object sender, int e)
    {
      if (this.OnProgress == null)
        return;
      this.OnProgress(sender, e);
    }

    internal override void ShowHandlerWindow()
    {
      this.GarantS3HandlerLoaded();
      this.MyS3Handler.ShowS3_HandlerMainWindow();
    }

    public override void Dispose()
    {
      if (this.MyS3Handler == null)
        return;
      this.MyS3Handler.GMM_Dispose();
      this.MyS3Handler.OnProgress -= new EventHandlerEx<int>(this.S3Handler_OnProgress);
      this.MyS3Handler = (S3_HandlerFunctions) null;
    }

    public override bool IsDevicesModified() => true;

    public override int UndoCount => this.MyS3Handler.UndoCount;

    public override bool Undo() => this.MyS3Handler.Undo();

    public override bool Print(string options) => this.MyS3Handler.Print(options);

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      this.GarantS3HandlerLoaded();
      if (this.MyS3Handler == null)
        return (List<GlobalDeviceId>) null;
      GlobalDeviceId globalDeviceIds = this.MyS3Handler.GetGlobalDeviceIds();
      if (globalDeviceIds == null)
        return base.GetGlobalDeviceIdList();
      return new List<GlobalDeviceId>() { globalDeviceIds };
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      this.GarantS3HandlerLoaded();
      this.MyDeviceManager.MyBus.IsDeviceModified();
      if (!this.MyS3Handler.ReadConnectedDevice())
        return false;
      UpdatedDeviceIdentification = this.MyS3Handler.GetGlobalDeviceIds();
      return UpdatedDeviceIdentification != null;
    }

    public bool GetDeviceIdentification(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      UpdatedDeviceIdentification = this.MyS3Handler.GetGlobalDeviceIds();
      return UpdatedDeviceIdentification != null;
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      this.MyDeviceManager.ParameterType = ConfigurationType;
      return this.MyS3Handler.GetConfigurationParameters(SubDevice);
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> ConfigParameterList,
      int SubDevice)
    {
      ZR_ClassLibMessages.ClearErrors();
      this.SetConfigParamList = ConfigParameterList;
      if (!this.MyS3Handler.SetConfigurationParameter(ConfigParameterList, SubDevice) || ZR_ClassLibMessages.GetLastError() != 0)
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("Configuration error");
        if (ZR_ClassLibMessages.GetLastError() != 0)
        {
          stringBuilder.AppendLine("Error: " + ZR_ClassLibMessages.GetLastError().ToString());
          ZR_ClassLibMessages.LastErrorInfo lastErrorInfo = ZR_ClassLibMessages.GetLastErrorInfo();
          if (!string.IsNullOrEmpty(lastErrorInfo.LastErrorDescription))
          {
            stringBuilder.AppendLine();
            stringBuilder.AppendLine(lastErrorInfo.LastErrorDescription);
          }
        }
        ZR_ClassLibMessages.ClearErrors();
        throw new Exception(stringBuilder.ToString());
      }
      return true;
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      return this.MyS3Handler.WriteChangesToConnectedDevice();
    }

    public bool AreDataAvailable()
    {
      this.GarantS3HandlerLoaded();
      return this.MyS3Handler.NewConfigurationDataAvailable;
    }

    public override string LoadType() => this.MyS3Handler.OpenTypeByWindow();

    public override bool ChangeType(
      SortedList<OverrideID, ConfigurationParameter> additionalConfigurationParameters)
    {
      bool flag = false;
      try
      {
        bool[] OverwriteSelection = new bool[21]
        {
          true,
          false,
          true,
          false,
          false,
          false,
          true,
          false,
          true,
          false,
          false,
          false,
          false,
          false,
          true,
          true,
          true,
          true,
          false,
          false,
          false
        };
        flag = this.MyS3Handler.IsTypeOverwritePossible(OverwriteSelection);
        if (flag)
          flag = this.MyS3Handler.OverwriteWorkFromType(OverwriteSelection);
        if (flag && additionalConfigurationParameters != null)
          flag = this.MyS3Handler.SetConfigurationParameterNoClone(additionalConfigurationParameters);
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.Exception, ex.ToString());
      }
      finally
      {
      }
      return flag;
    }

    public override bool TypeMode
    {
      get => this.typeMode;
      set
      {
        this.MyS3Handler.useBaseTypeByConfig = !value;
        this.typeMode = value;
      }
    }

    public override DateTime? SaveMeter()
    {
      this.MyS3Handler.SaveDevice();
      return new DateTime?();
    }
  }
}


--- SmokeDetectorHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.SmokeDetectorHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using HandlerLib;
using NLog;
using SmokeDetectorHandler;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using ZENNER.CommonLibrary;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class SmokeDetectorHandler(DeviceManager MyDeviceManager) : BaseDevice(MyDeviceManager)
  {
    private SortedList<OverrideID, ConfigurationParameter> changedParameters;
    private static Logger logger = LogManager.GetLogger(nameof (SmokeDetectorHandler));
    private SmokeDetectorHandlerFunctions smokeDetector;

    public override event EventHandlerEx<int> OnProgress;

    public override object GetHandler()
    {
      this.GarantHandlerLoaded();
      return (object) this.smokeDetector;
    }

    private void GarantHandlerLoaded()
    {
      if (this.smokeDetector != null)
        return;
      if (ZR_Component.CommonGmmInterface != null)
      {
        ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.SmokeDetectorHandler);
        this.smokeDetector = (SmokeDetectorHandlerFunctions) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.SmokeDetectorHandler];
      }
      else
        this.smokeDetector = new SmokeDetectorHandlerFunctions((IDeviceCollector) this.MyDeviceManager.MyBus);
      this.smokeDetector.OnProgress += new ValueEventHandler<int>(this.smokeDetector_OnProgress);
    }

    private void smokeDetector_OnProgress(object sender, int e)
    {
      if (this.OnProgress == null)
        return;
      this.OnProgress(sender, e);
    }

    internal override void ShowHandlerWindow()
    {
      this.GarantHandlerLoaded();
      this.smokeDetector.ShowSmokeDetectorWindow();
    }

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      this.GarantHandlerLoaded();
      if (this.smokeDetector == null || this.smokeDetector.WorkMeter == null && this.smokeDetector.ConnectedMeterMinoprotectII == null)
        return (List<GlobalDeviceId>) null;
      SmokeDetectorVersion smokeDetectorVersion = (SmokeDetectorVersion) null;
      if (this.smokeDetector.WorkMeter != null)
        smokeDetectorVersion = this.smokeDetector.WorkMeter.Version;
      else if (this.smokeDetector.ConnectedMeterMinoprotectII != null)
        smokeDetectorVersion = this.smokeDetector.ConnectedMeterMinoprotectII.Version;
      if (smokeDetectorVersion == null)
        return (List<GlobalDeviceId>) null;
      return new List<GlobalDeviceId>()
      {
        new GlobalDeviceId()
        {
          Serialnumber = smokeDetectorVersion.Serialnumber.ToString(),
          DeviceTypeName = "SmokeDetector",
          Manufacturer = smokeDetectorVersion.Manufacturer,
          FirmwareVersion = smokeDetectorVersion.VersionString,
          MeterType = ValueIdent.ValueIdPart_MeterType.SmokeDetector
        }
      };
    }

    public override bool SelectDevice(GlobalDeviceId device)
    {
      this.GarantHandlerLoaded();
      return true;
    }

    public override bool Read(StructureTreeNode structureTreeNode, List<long> filter)
    {
      if (structureTreeNode == null)
        throw new NullReferenceException(nameof (structureTreeNode));
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.GarantHandlerLoaded();
      GMM_EventArgs eventMessage = new GMM_EventArgs("");
      try
      {
        eventMessage.EventMessage = "Read device";
        this.MyDeviceManager.RaiseEvent(eventMessage);
        return !eventMessage.Cancel && this.smokeDetector != null && this.smokeDetector.ReadDevice(ReadPart.LoggerEvents);
      }
      catch (Exception ex)
      {
        eventMessage.EventMessage = "Can not read (SN: " + structureTreeNode.SerialNumber + ") Reason: " + ex.Message;
        this.MyDeviceManager.RaiseEvent(eventMessage);
      }
      return false;
    }

    public override bool ReadAll(List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.GarantHandlerLoaded();
      if (this.smokeDetector == null)
        return false;
      try
      {
        this.smokeDetector.ValueIdentSetReceived += new EventHandler<ValueIdentSet>(this.SmokeDetector_ValueIdentSetReceived);
        return this.smokeDetector.ReadDevice(true);
      }
      finally
      {
        this.smokeDetector.ValueIdentSetReceived -= new EventHandler<ValueIdentSet>(this.SmokeDetector_ValueIdentSetReceived);
      }
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList,
      string serialnumber)
    {
      return this.GetValues(ref ValueList);
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> ValueList)
    {
      if (this.smokeDetector == null)
        return false;
      List<long> filter = (List<long>) null;
      if (ValueList == null)
        ValueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      else if (ValueList.Count > 0)
      {
        filter = new List<long>();
        filter.AddRange((IEnumerable<long>) ValueList.Keys);
      }
      ValueList = this.smokeDetector.GetValues(filter);
      return ValueList != null;
    }

    public override bool ReadConfigurationParameters(out GlobalDeviceId UpdatedDeviceIdentification)
    {
      UpdatedDeviceIdentification = (GlobalDeviceId) null;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      this.GarantHandlerLoaded();
      if (this.smokeDetector == null || !this.smokeDetector.ReadDevice(ReadPart.ManufacturingParameter | ReadPart.LoRa))
        return false;
      List<GlobalDeviceId> globalDeviceIdList = this.GetGlobalDeviceIdList();
      if (globalDeviceIdList == null && globalDeviceIdList.Count != 1)
        return false;
      UpdatedDeviceIdentification = globalDeviceIdList[0];
      return true;
    }

    public override SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      if (this.smokeDetector == null)
        return (SortedList<OverrideID, ConfigurationParameter>) null;
      try
      {
        return this.smokeDetector.GetConfigurationParameters(0);
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Parameter generation error " + ex.Message);
        return new SortedList<OverrideID, ConfigurationParameter>();
      }
    }

    private static void AddParam(
      bool canChanged,
      SortedList<OverrideID, ConfigurationParameter> r,
      OverrideID overrideID,
      object obj)
    {
      Devices.SmokeDetectorHandler.AddParam(canChanged, r, overrideID, obj, false, (string[]) null);
    }

    private static void AddParam(
      bool canChanged,
      SortedList<OverrideID, ConfigurationParameter> r,
      OverrideID overrideID,
      object obj,
      bool isFunction,
      string[] allowedValues)
    {
      if (!UserManager.IsConfigParamVisible(overrideID))
        return;
      bool flag = false;
      if (canChanged)
        flag = UserManager.IsConfigParamEditable(overrideID);
      r.Add(overrideID, new ConfigurationParameter(overrideID, obj)
      {
        HasWritePermission = flag,
        AllowedValues = allowedValues
      });
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList,
      int SubDevice)
    {
      if (SubDevice != 0)
        return false;
      if (this.changedParameters == null)
        this.changedParameters = new SortedList<OverrideID, ConfigurationParameter>();
      if (parameterList == null || parameterList.Count <= 0)
        return false;
      foreach (KeyValuePair<OverrideID, ConfigurationParameter> parameter in parameterList)
      {
        if (parameter.Key == OverrideID.Activation)
          this.smokeDetector.WorkMeter.LoRaParameter.Activation = (OTAA_ABP) Enum.Parse(typeof (OTAA_ABP), parameter.Value.ParameterValue.ToString());
        if (parameter.Key == OverrideID.TransmissionScenario)
          this.smokeDetector.WorkMeter.LoRaParameter.TransmissionScenario = byte.Parse(parameter.Value.ParameterValue.ToString());
        if (parameter.Key == OverrideID.CommunicationScenario)
          this.smokeDetector.WorkMeter.LoRaParameter.CommunicationScenario = new int?(int.Parse(parameter.Value.GetStringValueWin()));
        if (this.changedParameters.ContainsKey(parameter.Key))
          this.changedParameters[parameter.Key] = parameter.Value;
        else
          this.changedParameters.Add(parameter.Key, parameter.Value);
      }
      return true;
    }

    public override bool SetConfigurationParameters(
      SortedList<OverrideID, ConfigurationParameter> parameterList)
    {
      return this.SetConfigurationParameters(parameterList, 0);
    }

    public override bool WriteChangedConfigurationParametersToDevice()
    {
      if (this.changedParameters == null)
        return false;
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      try
      {
        foreach (KeyValuePair<OverrideID, ConfigurationParameter> changedParameter in this.changedParameters)
        {
          if (changedParameter.Value.HasWritePermission)
          {
            switch (changedParameter.Key)
            {
              case OverrideID.DeviceClock:
                DateTime result;
                if (changedParameter.Value != null && changedParameter.Value.ParameterValue != null && DateTime.TryParse(changedParameter.Value.ParameterValue.ToString(), out result))
                {
                  this.smokeDetector.WorkMeter.Parameter.CurrentDateTime = new DateTime?(result);
                  break;
                }
                continue;
              case OverrideID.SendJoinRequest:
                try
                {
                  AsyncHelpers.RunSync((Func<Task>) (async () => await this.smokeDetector.LoRa.SendJoinRequestAsync((ProgressHandler) null, CancellationToken.None)));
                  break;
                }
                catch (Exception ex)
                {
                  if (ex is AggregateException && ex.InnerException != null)
                    throw ex.InnerException;
                  break;
                }
            }
          }
        }
        if (!this.smokeDetector.WriteDevice())
          return false;
        bool flag = true;
        foreach (KeyValuePair<OverrideID, ConfigurationParameter> changedParameter in this.changedParameters)
        {
          if (changedParameter.Value.HasWritePermission)
          {
            if (changedParameter.Key == OverrideID.SetToDelivery)
              flag = this.smokeDetector.TC_SetDeliveryState();
            if (!flag)
              return false;
          }
        }
        this.changedParameters.Clear();
        return true;
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddException(ex);
        return false;
      }
    }

    public override bool BeginSearchDevices()
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      return this.ReadAll((List<long>) null);
    }

    private void SmokeDetector_ValueIdentSetReceived(object sender, ValueIdentSet e)
    {
      if (!this.MyDeviceManager.IsValueIdentSetReceivedEventEnabled)
        return;
      this.MyDeviceManager.OnValueIdentSetReceived(sender, e);
    }
  }
}


--- ThHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.ThHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using TH_Handler;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  public class ThHandler : BaseDevice
  {
    private TH_HandlerWindowFunctions handler;

    public ThHandler(DeviceManager MyDeviceManager)
      : base(MyDeviceManager)
    {
      if (ZR_Component.CommonGmmInterface != null)
      {
        ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.TH_Handler);
        this.handler = (TH_HandlerWindowFunctions) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.TH_Handler];
      }
      else
        this.handler = new TH_HandlerWindowFunctions(new TH_HandlerFunctions((IDeviceCollector) MyDeviceManager.MyBus));
    }

    public override object GetHandler() => (object) this.handler.Handler;

    internal override void ShowHandlerWindow()
    {
      if (this.handler == null)
        return;
      this.handler.ShowMainWindow();
    }

    public override void Dispose()
    {
      if (this.handler == null)
        return;
      this.handler.Handler.Dispose();
      this.handler = (TH_HandlerWindowFunctions) null;
    }
  }
}


--- WalkByHandler.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: Devices.WalkByHandler
// Assembly: Devices, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 793FC2DA-FF88-4FD5-BDE9-C00C0310F1EC
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\Devices.dll

using DeviceCollector;
using NLog;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace Devices
{
  internal sealed class WalkByHandler(DeviceManager MyDeviceManager) : BaseDevice(MyDeviceManager)
  {
    private static Logger logger = LogManager.GetLogger(nameof (WalkByHandler));

    public GlobalDeviceId SelectedDevice { get; private set; }

    public override event EventHandlerEx<int> OnProgress;

    public override event System.EventHandler ConnectionLost;

    public override object GetHandler() => (object) this.MyDeviceManager.MyBus.RadioReader;

    public override bool Open()
    {
      this.MyDeviceManager.MyBus.RadioReader.Open();
      return true;
    }

    public override bool Close()
    {
      this.MyDeviceManager.MyBus.RadioReader.Close();
      return true;
    }

    internal override void ShowHandlerWindow() => this.MyDeviceManager.MyBus.ShowBusWindow();

    public override void Dispose() => this.MyDeviceManager.MyBus.Dispose();

    public override List<GlobalDeviceId> GetGlobalDeviceIdList()
    {
      List<GlobalDeviceId> globalDeviceIdList = new List<GlobalDeviceId>();
      if (this.MyDeviceManager.MyBus.RadioReader.ReceivedData != null)
      {
        foreach (KeyValuePair<long, RadioDataSet> keyValuePair in this.MyDeviceManager.MyBus.RadioReader.ReceivedData)
        {
          GlobalDeviceId globalDeviceId = new GlobalDeviceId();
          globalDeviceId.Serialnumber = keyValuePair.Key.ToString();
          if (keyValuePair.Value.LastRadioPacket != null)
          {
            globalDeviceId.DeviceTypeName = keyValuePair.Value.LastRadioPacket.DeviceType.ToString();
            globalDeviceId.MeterType = ValueIdent.ConvertToMeterType(keyValuePair.Value.LastRadioPacket.DeviceType);
          }
          globalDeviceIdList.Add(globalDeviceId);
        }
      }
      return globalDeviceIdList;
    }

    public override bool SelectDevice(GlobalDeviceId device)
    {
      this.SelectedDevice = device;
      return true;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      int subDeviceIndex)
    {
      if (this.SelectedDevice == null)
        return false;
      long int64 = Convert.ToInt64(this.SelectedDevice.Serialnumber);
      if (this.MyDeviceManager.MyBus.RadioReader.ReceivedData == null || !this.MyDeviceManager.MyBus.RadioReader.ReceivedData.ContainsKey(int64))
        return false;
      valueList = this.MyDeviceManager.MyBus.RadioReader.ReceivedData[int64].Data;
      return true;
    }

    public override bool GetValues(
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList)
    {
      return this.GetValues(ref valueList, 0);
    }

    public override bool BeginSearchDevices() => this.ReadAll((List<long>) null);

    public override bool Read(StructureTreeNode structureTreeNode, List<long> filter) => false;

    public override bool ReadAll(List<long> filter)
    {
      if (this.MyDeviceManager != null && this.MyDeviceManager.MyBus != null)
        this.MyDeviceManager.BreakRequest = false;
      try
      {
        this.MyDeviceManager.MyBus.RadioReader.OnPacketReceived += new EventHandler<RadioPacket>(this.RadioReader_OnPacketReceived);
        this.MyDeviceManager.MyBus.RadioReader.OnProgress += new EventHandlerEx<int>(this.RadioReader_OnProgress);
        this.MyDeviceManager.MyBus.RadioReader.ConnectionLost += new System.EventHandler(this.RadioReader_ConnectionLost);
        this.MyDeviceManager.MyBus.RadioReader.Read();
        return true;
      }
      finally
      {
        this.MyDeviceManager.MyBus.RadioReader.OnPacketReceived -= new EventHandler<RadioPacket>(this.RadioReader_OnPacketReceived);
        this.MyDeviceManager.MyBus.RadioReader.OnProgress -= new EventHandlerEx<int>(this.RadioReader_OnProgress);
        this.MyDeviceManager.MyBus.RadioReader.ConnectionLost -= new System.EventHandler(this.RadioReader_ConnectionLost);
      }
    }

    private void RadioReader_OnProgress(object sender, int e)
    {
      if (this.OnProgress == null)
        return;
      this.OnProgress(sender, e);
    }

    private void RadioReader_ConnectionLost(object sender, EventArgs e)
    {
      if (this.ConnectionLost == null)
        return;
      this.ConnectionLost(sender, e);
    }

    private void RadioReader_OnPacketReceived(object sender, RadioPacket e)
    {
      if (!this.MyDeviceManager.IsValueIdentSetReceivedEventEnabled)
        return;
      ValueIdentSet e1 = new ValueIdentSet();
      e1.Manufacturer = e.Manufacturer;
      e1.Version = e.Version;
      e1.SerialNumber = e.FunkId.ToString();
      e1.AvailableValues = e.GetValues();
      e1.Buffer = e.Buffer;
      switch (e)
      {
        case RadioPacketWirelessMBus _:
          RadioPacketWirelessMBus packetWirelessMbus = e as RadioPacketWirelessMBus;
          e1.DeviceType = packetWirelessMbus.MediumString;
          e1.ZDF = packetWirelessMbus.ZDF;
          if (packetWirelessMbus.FunkIdSecundary.HasValue)
          {
            e1.Manufacturer = packetWirelessMbus.ManufacturerSecundary;
            e1.Version = packetWirelessMbus.VersionNumberSecundary.ToString();
            e1.SerialNumber = packetWirelessMbus.FunkIdSecundary.ToString();
            e1.DeviceType = MBusDevice.GetMediaString(packetWirelessMbus.MediumSecundary.Value);
            break;
          }
          break;
        case RadioPacketRadio2 _:
          e1.DeviceType = e.DeviceType.ToString();
          e1.ZDF = "SID;" + e1.SerialNumber + ";MAN;" + e1.Manufacturer + ";MED;" + e1.DeviceType;
          break;
        case RadioPacketRadio3 _:
          RadioPacketRadio3 radioPacketRadio3 = e as RadioPacketRadio3;
          e1.DeviceType = e.DeviceType.ToString();
          ValueIdentSet valueIdentSet = e1;
          byte? scenarioNr = radioPacketRadio3.ScenarioNr;
          int? nullable = scenarioNr.HasValue ? new int?((int) scenarioNr.GetValueOrDefault()) : new int?();
          valueIdentSet.Scenario = nullable;
          e1.ZDF = "SID;" + e1.SerialNumber + ";MAN;" + e1.Manufacturer + ";MED;" + e1.DeviceType;
          break;
        default:
          e1.DeviceType = e.DeviceType.ToString();
          break;
      }
      this.MyDeviceManager.OnValueIdentSetReceived(sender, e1);
    }
  }
}

