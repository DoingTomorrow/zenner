<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Fluent="clr-namespace:Fluent">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/Fluent;component\Themes\Office2010\Controls\ScrollBarWhite.xaml"/>
    <ResourceDictionary Source="pack://application:,,,/Fluent;component\Themes\Office2010\Controls\RibbonScrollViewer.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <Fluent:ObjectToImageConverter x:Key="StringToImageConvert"/>
  <Style x:Key="ButtonBackstageStyle" TargetType="{x:Type Fluent:Button}">
    <Setter Property="Control.Template" Value="{DynamicResource ButtonBackstageControlTemplate}"/>
  </Style>
  <ControlTemplate x:Key="ButtonBackstageControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Grid x:Name="grid" Width="81" Height="85">
      <Rectangle x:Name="rectangle" Stroke="{DynamicResource ButtonBackstageShadowBrush}" Height="2"
                 VerticalAlignment="Bottom" RadiusX="2" RadiusY="2" Margin="3,0" Fill="{x:Null}"/>
      <Border x:Name="border" BorderThickness="1" CornerRadius="3" Margin="0,0,0,1"
              BorderBrush="{DynamicResource ButtonBackstageOutterBorderBrush}">
        <Border x:Name="border1" BorderBrush="Black" BorderThickness="0" CornerRadius="2"
                Background="{DynamicResource ButtonBackstageInnerBackgroundBrush}">
          <StackPanel x:Name="stackPanel" Margin="2">
            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Width="32"
                              Margin="9,9,9,0" RenderOptions.BitmapScalingMode="NearestNeighbor" SnapsToDevicePixels="true"
                              Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringToImageConvert}}"/>
            <Fluent:TwoLineLabel x:Name="twoLineLabel" Margin="7,7,7,5" VerticalAlignment="Center"
                                 Text="{TemplateBinding Fluent:Button.Header}"/>
          </StackPanel>
        </Border>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="iconImage" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="twoLineLabel" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="iconImage" Property="UIElement.Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect/>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Fluent:Button.Size" Value="Small">
        <Setter TargetName="iconImage" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="stackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter TargetName="twoLineLabel" Property="FrameworkElement.Margin" Value="2"/>
        <Setter TargetName="grid" Property="FrameworkElement.Width" Value="Auto"/>
        <Setter TargetName="grid" Property="FrameworkElement.Height" Value="Auto"/>
        <Setter TargetName="twoLineLabel" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter TargetName="twoLineLabel" Property="Fluent:TwoLineLabel.HasTwoLines" Value="false"/>
      </Trigger>
      <Trigger Property="Fluent:Button.Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter TargetName="twoLineLabel" Property="FrameworkElement.Margin" Value="7,0"/>
        <Setter TargetName="iconImage" Property="FrameworkElement.Margin" Value="9,2,9,0"/>
        <Setter TargetName="grid" Property="FrameworkElement.Width" Value="Auto"/>
        <Setter TargetName="grid" Property="FrameworkElement.Height" Value="Auto"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="Border.BorderBrush" Value="#FFC8C8C9"/>
        <Setter TargetName="rectangle" Property="UIElement.Opacity" Value="0"/>
        <Setter TargetName="border1" Property="Border.Background">
          <Setter.Value>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
              <GradientStop Color="White" Offset="0.009"/>
              <GradientStop Color="#FFFBFBFB" Offset="1"/>
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Property="Border.BorderThickness" Value="1"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.Margin" Value="1"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Property="Border.BorderThickness" Value="1"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.Margin" Value="1"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"
                Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ToggleButtonBackstageStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Control.Template" Value="{DynamicResource ToggleButtonBackstageControlTemplate}"/>
  </Style>
  <ControlTemplate x:Key="ToggleButtonBackstageControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Grid x:Name="grid" Width="81" Height="85">
      <Rectangle x:Name="rectangle" Stroke="{DynamicResource ButtonBackstageShadowBrush}" Height="2"
                 VerticalAlignment="Bottom" RadiusX="2" RadiusY="2" Margin="3,0" Fill="{x:Null}"/>
      <Border x:Name="border" BorderThickness="1" CornerRadius="3" Margin="0,0,0,1"
              BorderBrush="{DynamicResource ButtonBackstageOutterBorderBrush}">
        <Border x:Name="border1" BorderBrush="Black" BorderThickness="0" CornerRadius="2"
                Background="{DynamicResource ButtonBackstageInnerBackgroundBrush}">
          <StackPanel x:Name="stackPanel" Margin="2">
            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Width="32"
                              Margin="9,9,9,0" RenderOptions.BitmapScalingMode="NearestNeighbor" SnapsToDevicePixels="true"
                              Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringToImageConvert}}"/>
            <Fluent:TwoLineLabel x:Name="twoLineLabel" Margin="7,7,7,5" VerticalAlignment="Center"
                                 Text="{TemplateBinding Fluent:ToggleButton.Header}"/>
          </StackPanel>
        </Border>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="iconImage" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="twoLineLabel" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="iconImage" Property="UIElement.Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect/>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Fluent:ToggleButton.Size" Value="Small">
        <Setter TargetName="iconImage" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="stackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter TargetName="twoLineLabel" Property="FrameworkElement.Margin" Value="2"/>
        <Setter TargetName="grid" Property="FrameworkElement.Width" Value="Auto"/>
        <Setter TargetName="grid" Property="FrameworkElement.Height" Value="Auto"/>
        <Setter TargetName="twoLineLabel" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter TargetName="twoLineLabel" Property="Fluent:TwoLineLabel.HasTwoLines" Value="false"/>
      </Trigger>
      <Trigger Property="Fluent:ToggleButton.Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter TargetName="twoLineLabel" Property="FrameworkElement.Margin" Value="7,0"/>
        <Setter TargetName="iconImage" Property="FrameworkElement.Margin" Value="9,2,9,0"/>
        <Setter TargetName="grid" Property="FrameworkElement.Width" Value="Auto"/>
        <Setter TargetName="grid" Property="FrameworkElement.Height" Value="Auto"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="Border.BorderBrush" Value="#FFC8C8C9"/>
        <Setter TargetName="rectangle" Property="UIElement.Opacity" Value="0"/>
        <Setter TargetName="border1" Property="Border.Background">
          <Setter.Value>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
              <GradientStop Color="White" Offset="0.009"/>
              <GradientStop Color="#FFFBFBFB" Offset="1"/>
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Property="Border.BorderThickness" Value="1"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.Margin" Value="1"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Property="Border.BorderThickness" Value="1"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.Margin" Value="1"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"
                Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"
                Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DropDownButtonBackstageStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Control.Template" Value="{DynamicResource DropDownButtonBackstageControlTemplate}"/>
    <Setter Property="FrameworkElement.Height" Value="81"/>
    <Setter Property="FrameworkElement.Width" Value="85"/>
  </Style>
  <ControlTemplate x:Key="DropDownButtonBackstageControlTemplate" TargetType="{x:Type Fluent:DropDownButton}">
    <Grid>
      <Rectangle x:Name="rectangle" Stroke="{DynamicResource ButtonBackstageShadowBrush}" Height="2"
                 VerticalAlignment="Bottom" RadiusX="2" RadiusY="2" Margin="3,0" Fill="{x:Null}"/>
      <Border x:Name="PART_ButtonBorder" BorderThickness="1" CornerRadius="3" Margin="0,0,0,1"
              BorderBrush="{DynamicResource ButtonBackstageOutterBorderBrush}">
        <Border x:Name="border1" BorderBrush="Black" BorderThickness="0" CornerRadius="2"
                Background="{DynamicResource ButtonBackstageInnerBackgroundBrush}">
          <StackPanel x:Name="stackPanel" Margin="2">
            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Width="32"
                              Margin="7,7,7,0" RenderOptions.BitmapScalingMode="NearestNeighbor" SnapsToDevicePixels="true"
                              Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringToImageConvert}}"/>
            <Fluent:TwoLineLabel x:Name="twoLineLabel" Margin="5,5,5,3" VerticalAlignment="Center" HasGlyph="true"
                                 Text="{TemplateBinding Fluent:DropDownButton.Header}"/>
          </StackPanel>
        </Border>
      </Border>
      <Popup x:Name="PART_Popup" Placement="Bottom"
             IsOpen="{TemplateBinding Fluent:DropDownButton.IsDropDownOpen}" AllowsTransparency="true"
             Focusable="false" PopupAnimation="Fade" Margin="0,0,-4,0" VerticalAlignment="Top"
             Grid.ColumnSpan="2">
        <Grid Name="DropDown" SnapsToDevicePixels="true" Margin="0" VerticalAlignment="Top">
          <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="10"/>
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="10"/>
          </Grid.ColumnDefinitions>
          <Rectangle HorizontalAlignment="Left" VerticalAlignment="Top" Width="4" Height="4" Grid.Row="1"
                     Grid.Column="1" StrokeThickness="0" Margin="-1,-1,0,0">
            <Shape.Fill>
              <RadialGradientBrush RadiusX="0.984" Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </RadialGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,3,0,0" VerticalAlignment="Top" Width="4"
                     Height="4" Grid.Column="1" Grid.Row="0">
            <Shape.Fill>
              <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </RadialGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="3,-1,0,0" VerticalAlignment="Top" Width="4"
                     Height="4" Grid.Column="0" Grid.Row="1">
            <Shape.Fill>
              <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </RadialGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Rectangle StrokeThickness="0" HorizontalAlignment="Stretch" Margin="7,-1,1,0" VerticalAlignment="Top"
                     Width="Auto" Height="4" Grid.Column="0" Grid.Row="1">
            <Shape.Fill>
              <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" MappingMode="RelativeToBoundingBox">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </LinearGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,7,0,1" VerticalAlignment="Stretch"
                     Width="4" Height="Auto" Grid.Column="1" Grid.Row="0">
            <Shape.Fill>
              <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5" MappingMode="RelativeToBoundingBox">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </LinearGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                  SnapsToDevicePixels="true" Background="{DynamicResource ContextMenuBarBackgroundBrush}"
                  BorderBrush="{DynamicResource ContextMenuBarBorderBrush}" BorderThickness="1" CornerRadius="1"
                  Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border VerticalAlignment="Top" Width="Auto" Height="Auto"
                      BorderBrush="{DynamicResource ContextMenuBarBackgroundBrush}" BorderThickness="1" CornerRadius="1"/>
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*"/>
                  <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle Stretch="Fill" Stroke="#FFE2E4E7" HorizontalAlignment="Left" Margin="24,0,0,0" Width="1"
                           Height="Auto" Grid.RowSpan="2" Visibility="Visible" VerticalAlignment="Stretch" Fill="{x:Null}"/>
                <ScrollViewer Margin="1" MaxHeight="{TemplateBinding Fluent:DropDownButton.MaxDropDownHeight}"
                              SnapsToDevicePixels="true" VerticalScrollBarVisibility="Auto"
                              HorizontalScrollBarVisibility="Hidden">
                  <Fluent:MenuPanel x:Name="PART_MenuPanel" IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </ScrollViewer>
                <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11"
                        BorderBrush="{DynamicResource ContextMenuBarResizeBorderBrush}" BorderThickness="0,1,0,0"
                        Grid.Row="1" CornerRadius="0,0,1,1"
                        Background="{DynamicResource ContextMenuBarResizeBackgoundBrush}">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto"
                           Height="10" VerticalAlignment="Top" Cursor="SizeNS"
                           Template="{DynamicResource ResizeVerticalThumbControlTemplate}"/>
                    <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10"
                           VerticalAlignment="Top" Cursor="SizeNWSE"
                           Template="{DynamicResource ResizeBothThumbControlTemplate}"/>
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Fluent:DropDownButton.ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="Fluent:DropDownButton.ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_ResizeBothThumb" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="resizeBorder" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Fluent:DropDownButton.ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_ResizeVerticalThumb" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="resizeBorder" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="iconImage" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="twoLineLabel" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="iconImage" Property="UIElement.Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect/>
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ButtonBorder" Property="Border.BorderBrush" Value="#FFC8C8C9"/>
        <Setter TargetName="rectangle" Property="UIElement.Opacity" Value="0"/>
        <Setter TargetName="PART_ButtonBorder" Property="Border.Background">
          <Setter.Value>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
              <GradientStop Color="White" Offset="0.009"/>
              <GradientStop Color="#FFFBFBFB" Offset="1"/>
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Property="Border.BorderThickness" Value="1"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.Margin" Value="1"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Property="Border.BorderThickness" Value="1"/>
        <Setter TargetName="stackPanel" Property="FrameworkElement.Margin" Value="1"/>
      </Trigger>
      <Trigger Property="Fluent:DropDownButton.IsDropDownOpen" Value="true">
        <Setter TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonPressedOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="PART_ButtonBorder" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"
                Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="GalleryItemBackstageStyle" TargetType="{x:Type Fluent:GalleryItem}">
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:GalleryItem}">
          <Grid Background="{DynamicResource TransparentBrush}">
            <Border x:Name="hoverBorder" BorderBrush="{DynamicResource ButtonHoverOuterBorderBrush}"
                    BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                    Visibility="Collapsed">
              <Border Height="Auto" BorderBrush="{DynamicResource ButtonHoverInnerBorderBrush}" BorderThickness="1"
                      CornerRadius="1" Background="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
            </Border>
            <Border x:Name="selectedBorder" BorderBrush="#FFF29536" BorderThickness="1" CornerRadius="2"
                    Background="#FFFCF1C2" Visibility="Collapsed" Width="40" Height="38" HorizontalAlignment="Left"
                    VerticalAlignment="Center" Margin="1,0,0,0"/>
            <ContentPresenter x:Name="contentPresenter" Margin="1" Opacity="1"/>
            <Border x:Name="pressedBorder" BorderBrush="{DynamicResource ButtonPressedOuterBorderBrush}"
                    BorderThickness="1" CornerRadius="2"
                    Background="{DynamicResource ButtonPressedOuterBackgroundBrush}" Visibility="Collapsed"
                    Opacity="0.5">
              <Border Height="Auto" BorderBrush="{DynamicResource ButtonPressedInnerBorderBrush}" BorderThickness="1"
                      CornerRadius="1" Background="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
              <Setter TargetName="selectedBorder" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="hoverBorder" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
  </Style>
  <Style x:Key="ComboBoxItemBackstageStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.MinHeight" Value="40"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Grid Background="{DynamicResource TransparentBrush}" HorizontalAlignment="Stretch">
            <Border x:Name="hoverBorder" BorderBrush="{DynamicResource ButtonHoverOuterBorderBrush}"
                    BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                    Visibility="Collapsed">
              <Border Height="Auto" BorderBrush="{DynamicResource ButtonHoverInnerBorderBrush}" BorderThickness="1"
                      CornerRadius="1" Background="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
            </Border>
            <Border x:Name="selectedBorder" BorderBrush="#FFF29536" BorderThickness="1" CornerRadius="2"
                    Background="#FFFCF1C2" Visibility="Collapsed" Width="40" Height="38" HorizontalAlignment="Left"
                    VerticalAlignment="Center" Margin="1,0,0,0"/>
            <ContentPresenter x:Name="contentPresenter" Margin="1" Opacity="1"/>
            <Border x:Name="pressedBorder" BorderBrush="{DynamicResource ButtonPressedOuterBorderBrush}"
                    BorderThickness="1" CornerRadius="2"
                    Background="{DynamicResource ButtonPressedOuterBackgroundBrush}" Visibility="Collapsed"
                    Opacity="0.5">
              <Border Height="Auto" BorderBrush="{DynamicResource ButtonPressedInnerBorderBrush}" BorderThickness="1"
                      CornerRadius="1" Background="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
              <Setter TargetName="selectedBorder" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="hoverBorder" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
  </Style>
  <Style x:Key="ComboBoxBackstageStyle" TargetType="{x:Type Fluent:ComboBox}">
    <Setter Property="Control.Template" Value="{DynamicResource ComboBoxBackstageControlTemplate}"/>
    <Setter Property="FrameworkElement.Height" Value="42"/>
    <Setter Property="FrameworkElement.Width" Value="229"/>
    <Setter Property="ComboBox.IsReadOnly" Value="true"/>
    <Setter Property="ComboBox.IsEditable" Value="false"/>
  </Style>
  <ControlTemplate x:Key="ComboBoxBackstageControlTemplate" TargetType="{x:Type Fluent:ComboBox}">
    <FrameworkTemplate.Resources>
      <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}"/>
      <Style TargetType="{x:Type Fluent:ToggleButton}" BasedOn="{StaticResource ToggleButtonBackstageStyle}"/>
      <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}"/>
      <Style BasedOn="{StaticResource ComboBoxItemBackstageStyle}" TargetType="{x:Type ComboBoxItem}"/>
    </FrameworkTemplate.Resources>
    <Grid>
      <Rectangle x:Name="rectangle" Stroke="{DynamicResource ButtonBackstageShadowBrush}" Height="2"
                 VerticalAlignment="Bottom" RadiusX="2" RadiusY="2" Margin="3,0" Fill="{x:Null}"/>
      <Border x:Name="PART_ContentBorder" Height="Auto" HorizontalAlignment="Stretch">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="22"/>
          </Grid.ColumnDefinitions>
          <Fluent:ToggleButton x:Name="ToggleButton" Size="Small" IsDefinitive="false" Focusable="false" ClickMode="Press"
                               Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0"
                               Grid.ColumnSpan="2" Margin="0" CanAddToQuickAccessToolBar="false"
                               IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
          <ContentPresenter x:Name="PART_ContentSite" Margin="3" IsHitTestVisible="false"
                            Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                            VerticalAlignment="Top" HorizontalAlignment="Left"/>
          <Image x:Name="PART_SelectedImage" Margin="0" Stretch="None" IsHitTestVisible="false"
                 VerticalAlignment="Top" HorizontalAlignment="Left" Visibility="Collapsed" Width="Auto"
                 Height="Auto"/>
          <TextBox x:Name="PART_EditableTextBox" Focusable="true" HorizontalAlignment="Stretch"
                   VerticalAlignment="Stretch" TextWrapping="NoWrap" BorderThickness="0,0,0,0"
                   IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}"
                   Background="{DynamicResource TextBoxBackgroundBrush}" Visibility="Collapsed"/>
          <Path x:Name="path" HorizontalAlignment="Center" Margin="0,0,0,0" Stretch="Fill" StrokeThickness="0"
                Data="M 0,0 L 1,1 2,0 Z" Fill="#FF000000" Width="7" Height="4" VerticalAlignment="Center"
                Grid.Column="1" Stroke="{x:Null}"/>
        </Grid>
      </Border>
      <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
             AllowsTransparency="true" Focusable="false" PopupAnimation="Fade" Margin="0,0,-4,0"
             VerticalAlignment="Top" Grid.ColumnSpan="2"
             PlacementTarget="{Binding ElementName=PART_ContentBorder}">
        <FrameworkElement.Resources>
          <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}"/>
        </FrameworkElement.Resources>
        <Grid Name="DropDown" SnapsToDevicePixels="true" Margin="0" VerticalAlignment="Top">
          <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="10"/>
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="10"/>
          </Grid.ColumnDefinitions>
          <Rectangle HorizontalAlignment="Left" VerticalAlignment="Top" Width="4" Height="4" Grid.Row="1"
                     Grid.Column="1" StrokeThickness="0" Margin="-1,-1,0,0">
            <Shape.Fill>
              <RadialGradientBrush RadiusX="0.984" Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </RadialGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,3,0,0" VerticalAlignment="Top" Width="4"
                     Height="4" Grid.Column="1" Grid.Row="0">
            <Shape.Fill>
              <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </RadialGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="3,-1,0,0" VerticalAlignment="Top" Width="4"
                     Height="4" Grid.Column="0" Grid.Row="1">
            <Shape.Fill>
              <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </RadialGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Rectangle StrokeThickness="0" HorizontalAlignment="Stretch" Margin="7,-1,1,0" VerticalAlignment="Top"
                     Width="Auto" Height="4" Grid.Column="0" Grid.Row="1">
            <Shape.Fill>
              <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" MappingMode="RelativeToBoundingBox">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </LinearGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,7,0,1" VerticalAlignment="Stretch"
                     Width="4" Height="Auto" Grid.Column="1" Grid.Row="0">
            <Shape.Fill>
              <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5" MappingMode="RelativeToBoundingBox">
                <GradientStop Color="#3F000000" Offset="0"/>
                <GradientStop Color="#00000000" Offset="1"/>
              </LinearGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <Border x:Name="PART_DropDownBorder" SnapsToDevicePixels="true"
                  Background="{DynamicResource ContextMenuBarBackgroundBrush}"
                  BorderBrush="{DynamicResource ContextMenuBarBorderBrush}" BorderThickness="1" CornerRadius="1"
                  Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Top"
                  MinWidth="{Binding ActualWidth, ElementName=PART_ContentBorder}">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top"
                  KeyboardNavigation.DirectionalNavigation="Cycle">
              <Border VerticalAlignment="Stretch" Width="Auto" Height="Auto"
                      BorderBrush="{DynamicResource ContextMenuBarBackgroundBrush}" BorderThickness="1" CornerRadius="1"/>
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*"/>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle Stretch="Fill" Stroke="#FFE2E4E7" HorizontalAlignment="Left" Margin="24,0,0,0" Width="1"
                           Height="Auto" Grid.RowSpan="2" Visibility="Visible" VerticalAlignment="Stretch" Fill="{x:Null}"/>
                <Grid x:Name="PART_MenuPanel" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                      VerticalAlignment="Top">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                  </Grid.RowDefinitions>
                  <ScrollViewer x:Name="scrollViewer" Grid.Row="0" Focusable="false"
                                BorderBrush="{DynamicResource GalleryBorderBrush}" Margin="1" SnapsToDevicePixels="true"
                                KeyboardNavigation.DirectionalNavigation="None" VerticalAlignment="Stretch"
                                VerticalScrollBarVisibility="Visible" BorderThickness="0,0,0,1">
                    <Fluent:GalleryPanel Background="White" GroupBy="{TemplateBinding Fluent:ComboBox.GroupBy}" IsItemsHost="true"
                                         KeyboardNavigation.DirectionalNavigation="None"
                                         ItemHeight="{TemplateBinding Fluent:ComboBox.ItemHeight}" Orientation="Vertical"
                                         ItemContainerGenerator="{Binding ItemContainerGenerator, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </ScrollViewer>
                  <ContentPresenter x:Name="menuPresenter" Grid.Row="1" ContentSource="Menu"
                                    KeyboardNavigation.DirectionalNavigation="None" VerticalAlignment="Top"/>
                </Grid>
                <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11"
                        BorderBrush="{DynamicResource ContextMenuBarResizeBorderBrush}" BorderThickness="0,1,0,0"
                        Grid.Row="2" CornerRadius="0,0,1,1"
                        Background="{DynamicResource ContextMenuBarResizeBackgoundBrush}">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto"
                           Height="10" VerticalAlignment="Top" Cursor="SizeNS"
                           Template="{DynamicResource ResizeVerticalThumbControlTemplate}"/>
                    <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10"
                           VerticalAlignment="Top" Cursor="SizeNWSE"
                           Template="{DynamicResource ResizeBothThumbControlTemplate}"/>
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Fluent:ComboBox.ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="Fluent:ComboBox.ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_ResizeBothThumb" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="resizeBorder" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Fluent:ComboBox.ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_ResizeVerticalThumb" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="resizeBorder" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_ContentBorder" Property="Border.BorderBrush" Value="#FFC8C8C9"/>
        <Setter TargetName="rectangle" Property="UIElement.Opacity" Value="0"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SpinnerButtonBackstageControlTemplate" TargetType="{x:Type RepeatButton}">
    <Border x:Name="border" BorderThickness="1" CornerRadius="2"
            Background="{DynamicResource TransparentBrush}" BorderBrush="{DynamicResource TransparentBrush}"
            Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
      <Border x:Name="border1" Height="Auto" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1"
              CornerRadius="2" Background="{DynamicResource TransparentBrush}">
        <Grid Height="Auto">
          <Rectangle x:Name="rectangle" StrokeThickness="0" Visibility="Collapsed">
            <Shape.Fill>
              <RadialGradientBrush Center="0.503,1" GradientOrigin="0.503,1" RadiusY="0.202">
                <GradientStop Color="#7FFFFFFF" Offset="0"/>
                <GradientStop Offset="1"/>
              </RadialGradientBrush>
            </Shape.Fill>
          </Rectangle>
          <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Border.BorderThickness" Value="0,1,0,0">
        <Setter TargetName="border" Property="Border.CornerRadius" Value="0,2,0,0"/>
        <Setter TargetName="border1" Property="Border.CornerRadius" Value="0,1,0,0"/>
      </Trigger>
      <Trigger Property="Border.BorderThickness" Value="0,0,1,0">
        <Setter TargetName="border" Property="Border.CornerRadius" Value="0,0,3,0"/>
        <Setter TargetName="border1" Property="Border.CornerRadius" Value="0,0,2,0"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="false"/>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"
                Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.5"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="ButtonBase.IsPressed" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="rectangle" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
          <Condition Property="ButtonBase.IsPressed" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SpinnerButtonBackstageStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Template" Value="{StaticResource SpinnerButtonBackstageControlTemplate}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultFontBrush}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
  </Style>
  <Style x:Key="SpinnerBackstageStyle" TargetType="{x:Type Fluent:Spinner}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultFontBrush}"/>
    <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
    <Setter Property="Control.FontSize" Value="{DynamicResource DefaultFontSize}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:Spinner}">
          <Grid Width="Auto" Height="22" Background="#00000000">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <StackPanel x:Name="stackPanel" Orientation="Horizontal" Grid.ColumnSpan="1" HorizontalAlignment="Left"
                        Margin="0">
              <Image Width="16" Height="16" VerticalAlignment="Center" Margin="4,0,3,0"
                     Source="{TemplateBinding Fluent:RibbonControl.Icon}"/>
              <TextBlock x:Name="textBlock" Text="{TemplateBinding Fluent:RibbonControl.Header}" TextWrapping="Wrap"
                         VerticalAlignment="Center" Margin="2,0,4,0"/>
            </StackPanel>
            <Border x:Name="border" Height="22" BorderThickness="1"
                    Background="{DynamicResource TextBoxBackgroundBrush}" Grid.ColumnSpan="1" Grid.Column="1"
                    Width="{TemplateBinding Fluent:Spinner.InputWidth}" CornerRadius="2">
              <Border.BorderBrush>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                  <GradientStop Color="#FFABAFB2" Offset="0"/>
                  <GradientStop Color="#FFE1E6EC" Offset="1"/>
                </LinearGradientBrush>
              </Border.BorderBrush>
              <Grid ColumnSpan="1" Column="1">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*"/>
                  <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <TextBox x:Name="PART_TextBox" BorderThickness="0" Grid.RowSpan="2" Grid.Column="0"
                         Background="{DynamicResource TextBoxBackgroundBrush}" Margin="1,0,0,0" Padding="1"/>
                <Border x:Name="border1" BorderBrush="#FFBEC1C4" BorderThickness="1" Margin="0,-1,-1,0" Grid.RowSpan="1"
                        HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CornerRadius="0,2,0,0" Grid.Column="1"
                        Visibility="Collapsed">
                  <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                      <GradientStop Color="White" Offset="0"/>
                      <GradientStop Color="#FFF1F2F2" Offset="1"/>
                    </LinearGradientBrush>
                  </Border.Background>
                </Border>
                <Border x:Name="border2" BorderBrush="#FFBEC1C4" BorderThickness="1" Grid.ColumnSpan="1"
                        Margin="0,-1,-1,-1" Grid.RowSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                        Width="18" CornerRadius="0,0,2,0" Grid.Column="1" Grid.Row="1" Visibility="Collapsed">
                  <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                      <GradientStop Color="White" Offset="0"/>
                      <GradientStop Color="#FFF1F2F2" Offset="1"/>
                    </LinearGradientBrush>
                  </Border.Background>
                </Border>
                <RepeatButton x:Name="PART_ButtonUp" Grid.Column="1" Grid.Row="0"
                              Style="{StaticResource SpinnerButtonBackstageStyle}" RenderTransformOrigin="0,0.5"
                              HorizontalAlignment="Stretch" BorderThickness="0,1,0,0" Margin="0,-1,-1,0">
                  <Path Width="7" Height="4" Fill="#FF757778" Stretch="Fill" Stroke="#FF000000" Data="M 0,0 L 1,-1 2,0 "
                        HorizontalAlignment="Center" StrokeThickness="0" VerticalAlignment="Center" Margin="1,1,0,1"
                        RenderOptions.EdgeMode="Aliased"/>
                </RepeatButton>
                <RepeatButton x:Name="PART_ButtonDown" Grid.Column="1" Grid.Row="1"
                              Style="{StaticResource SpinnerButtonBackstageStyle}" BorderThickness="0,0,1,0" Margin="0,0,-1,-1">
                  <Path Width="7" Height="4" Fill="#FF757778" Stretch="Fill" Stroke="#FF000000" Data="M 0,0 L 1,1 2,0 "
                        StrokeThickness="0" HorizontalAlignment="Center" Margin="1,0,0,0" VerticalAlignment="Center"
                        RenderOptions.EdgeMode="Aliased"/>
                </RepeatButton>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_TextBox" Property="UIElement.IsEnabled" Value="false"/>
              <Setter TargetName="border" Value="{DynamicResource TextBoxDisabledBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="border" Value="{DynamicResource TextBoxDisabledBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="PART_TextBox" Value="{DynamicResource TextBoxDisabledBackgroundBrush}"
                      Property="Control.Background"/>
            </Trigger>
            <Trigger Property="Fluent:RibbonControl.Size" Value="Middle">
              <Setter TargetName="textBlock" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="Fluent:RibbonControl.Size" Value="Small">
              <Setter TargetName="stackPanel" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Value="{DynamicResource TextBoxHoverBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="PART_TextBox" Value="{DynamicResource TextBoxHoverBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter TargetName="border" Property="Border.BorderBrush">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFCFAF5A" Offset="0"/>
                    <GradientStop Color="#FFEFDA71" Offset="1"/>
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
              <Setter TargetName="border1" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="border2" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="border1" Property="Border.BorderBrush" Value="#E5BEC1C4"/>
              <Setter TargetName="border2" Property="Border.BorderBrush" Value="#E5BEC1C4"/>
            </Trigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource TextBoxHoverBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="PART_TextBox" Value="{DynamicResource TextBoxHoverBackgroundBrush}"
                      Property="Control.Background"/>
              <Setter TargetName="border" Property="Border.BorderBrush">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFCFAF5A" Offset="0"/>
                    <GradientStop Color="#FFEFDA71" Offset="1"/>
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
              <Setter TargetName="border1" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="border2" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="border1" Property="Border.BorderBrush" Value="#E5BEC1C4"/>
              <Setter TargetName="border2" Property="Border.BorderBrush" Value="#E5BEC1C4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InnerBackstageSeparatorTabItemStyle" TargetType="{x:Type Fluent:SeparatorTabItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:SeparatorTabItem}">
          <Grid Margin="0,0,10,0">
            <TextBlock Margin="0,5" TextWrapping="Wrap" Text="{TemplateBinding HeaderedContentControl.Header}"
                       VerticalAlignment="Center" FontSize="14" FontWeight="Bold" Foreground="#FF5E5E5E"/>
            <Path Data="M 0,0 L 1,0 " Height="1" Margin="0" StrokeStartLineCap="Flat" Stretch="Fill"
                  StrokeEndLineCap="Flat" Stroke="{DynamicResource RibbonTopBorderBrush}" StrokeThickness="1"
                  StrokeMiterLimit="10" StrokeLineJoin="Miter" VerticalAlignment="Bottom" StrokeDashArray="2 2"
                  Fill="{x:Null}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InnerBackstageTabCotrolItem" TargetType="{x:Type TabItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid Background="#00000000" Margin="0,3">
            <Border x:Name="border" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Margin="0"
                    CornerRadius="3" Background="{DynamicResource TransparentBrush}">
              <Border x:Name="border1" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1"
                      CornerRadius="2" Background="{DynamicResource TransparentBrush}">
                <ContentPresenter Margin="5,5,50,5" ContentSource="Header"/>
              </Border>
            </Border>
            <Path x:Name="path" Data="M 1,0 L 0,1 1,2 " Fill="#FFF4F4F5" HorizontalAlignment="Right" Height="11"
                  Margin="0,0,-1,0" StrokeStartLineCap="Flat" Stretch="Fill" StrokeEndLineCap="Flat"
                  Stroke="{DynamicResource RibbonTopBorderBrush}" StrokeThickness="1" StrokeMiterLimit="10"
                  StrokeLineJoin="Miter" VerticalAlignment="Center" Width="6" Visibility="Collapsed"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Selector.IsSelected" Value="true">
              <Setter TargetName="path" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"
                      Property="Border.Background"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="Selector.IsSelected" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                      Property="Border.Background"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InnerBackstageTabControlStyle" TargetType="{x:Type TabControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <FrameworkTemplate.Resources>
            <Style TargetType="{x:Type Fluent:SeparatorTabItem}"
                   BasedOn="{StaticResource InnerBackstageSeparatorTabItemStyle}"/>
            <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource InnerBackstageTabCotrolItem}"/>
          </FrameworkTemplate.Resources>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border BorderThickness="0,0,1,0" HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="Stretch">
              <Border.BorderBrush>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                  <GradientStop Offset="1" Color="#00D2D3D4"/>
                  <GradientStop Color="#7FD2D3D4"/>
                  <GradientStop Color="#FFD2D3D4" Offset="0.246"/>
                  <GradientStop Color="#FFD2D3D4" Offset="0.797"/>
                </LinearGradientBrush>
              </Border.BorderBrush>
            </Border>
            <StackPanel Grid.Column="0" HorizontalAlignment="Left" Margin="0" VerticalAlignment="Top" IsItemsHost="true"/>
            <ContentPresenter x:Name="PART_SelectedContentHost" Grid.Column="1" Margin="0" VerticalAlignment="Stretch"
                              ContentSource="SelectedContent"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>