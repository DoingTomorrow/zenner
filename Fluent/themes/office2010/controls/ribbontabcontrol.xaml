<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Fluent="clr-namespace:Fluent">
  <ControlTemplate x:Key="RibbonTabControlToggleButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" BorderThickness="1" CornerRadius="2"
            Background="{DynamicResource TransparentBrush}" BorderBrush="{DynamicResource TransparentBrush}"
            Height="22" HorizontalAlignment="Left" VerticalAlignment="Stretch" Width="22">
      <FrameworkElement.ToolTip>
        <Fluent:ScreenTip x:Name="screenTip"
                          Title="{Binding Source={x:Static Fluent:Ribbon.Localization}, Path=MinimizeButtonScreenTipTitle, Mode=OneWay}"
                          Text="{Binding Source={x:Static Fluent:Ribbon.Localization}, Path=MinimizeButtonScreenTipText, Mode=OneWay}"/>
      </FrameworkElement.ToolTip>
      <Border x:Name="border1" Height="Auto" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1"
              CornerRadius="2" Background="{DynamicResource TransparentBrush}">
        <Grid>
          <Image x:Name="iconImage" HorizontalAlignment="Center" Height="Auto" Stretch="None"
                 VerticalAlignment="Center" Source="/Fluent;Component/Themes/Office2010/Images/RibbonCollapse.png"
                 Width="Auto" Margin="2"/>
          <Image x:Name="iconImageChecked" Visibility="Collapsed" HorizontalAlignment="Center" Height="Auto"
                 Stretch="None" VerticalAlignment="Center"
                 Source="/Fluent;Component/Themes/Office2010/Images/RibbonExpand.png" Width="Auto" Margin="2"/>
        </Grid>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter TargetName="iconImage" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="iconImageChecked" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="screenTip"
                Value="{Binding Source={x:Static Fluent:Ribbon.Localization}, Path=ExpandButtonScreenTipTitle, Mode=OneWay}"
                Property="Fluent:ScreenTip.Title"/>
        <Setter TargetName="screenTip"
                Value="{Binding Source={x:Static Fluent:Ribbon.Localization}, Path=ExpandButtonScreenTipText, Mode=OneWay}"
                Property="Fluent:ScreenTip.Text"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"
                Property="Border.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="ButtonBase.IsPressed" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
          <Condition Property="ButtonBase.IsPressed" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                Property="Border.BorderBrush"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonTabControlToggleButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Control.Template" Value="{StaticResource RibbonTabControlToggleButtonControlTemplate}"/>
    <Setter Property="FrameworkElement.Height" Value="22"/>
    <Setter Property="FrameworkElement.Width" Value="22"/>
    <Setter Property="Fluent:ToggleButton.QuickAccessElementStyle">
      <Setter.Value>
        <Style TargetType="{x:Type Fluent:ToggleButton}">
          <Setter Property="Control.Template" Value="{StaticResource RibbonTabControlToggleButtonControlTemplate}"/>
          <Setter Property="FrameworkElement.Height" Value="22"/>
          <Setter Property="FrameworkElement.Width" Value="22"/>
          <Setter Property="Control.FontSize" Value="{DynamicResource DefaultFontSize}"/>
          <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
          <Setter Property="Control.Foreground" Value="{DynamicResource DefaultFontBrush}"/>
          <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.FontSize" Value="{DynamicResource DefaultFontSize}"/>
    <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultFontBrush}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
  </Style>
  <Style x:Key="RibbonTabControlStyle" TargetType="{x:Type Fluent:RibbonTabControl}">
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="FocusManager.IsFocusScope" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:RibbonTabControl}">
          <FrameworkTemplate.Resources>
            <ControlTemplate x:Key="ScrollButtonControlTemplate" TargetType="{x:Type RepeatButton}">
              <Border x:Name="border" BorderThickness="1" CornerRadius="2"
                      BorderBrush="{DynamicResource ScrollViewerButtonBorderBrush}" Height="Auto"
                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                      Background="{DynamicResource ScrollViewerButtonBackgroundBrush}">
                <Border x:Name="border1" Height="Auto" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1"
                        CornerRadius="2" Background="{DynamicResource TransparentBrush}">
                  <Grid Height="Auto">
                    <Rectangle x:Name="rectangle" StrokeThickness="0" Visibility="Collapsed">
                      <Shape.Fill>
                        <RadialGradientBrush Center="0.503,1" GradientOrigin="0.503,1" RadiusY="0.202">
                          <GradientStop Color="#7FFFFFFF" Offset="0"/>
                          <GradientStop Offset="1"/>
                        </RadialGradientBrush>
                      </Shape.Fill>
                    </Rectangle>
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </Grid>
                </Border>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="false"/>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                  <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"
                          Property="Border.BorderBrush"/>
                  <Setter TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"
                          Property="Border.Background"/>
                  <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"
                          Property="Border.Background"/>
                  <Setter TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"
                          Property="Border.BorderBrush"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false"/>
                <MultiTrigger>
                  <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver" Value="true"/>
                    <Condition Property="ButtonBase.IsPressed" Value="false"/>
                  </MultiTrigger.Conditions>
                  <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                          Property="Border.BorderBrush"/>
                  <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                          Property="Border.Background"/>
                  <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                          Property="Border.Background"/>
                  <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                          Property="Border.BorderBrush"/>
                  <Setter TargetName="rectangle" Property="UIElement.Visibility" Value="Visible"/>
                </MultiTrigger>
                <MultiTrigger>
                  <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                    <Condition Property="ButtonBase.IsPressed" Value="false"/>
                  </MultiTrigger.Conditions>
                  <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"
                          Property="Border.BorderBrush"/>
                  <Setter TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"
                          Property="Border.Background"/>
                  <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"
                          Property="Border.Background"/>
                  <Setter TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"
                          Property="Border.BorderBrush"/>
                </MultiTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="ScrollButtonStyle" TargetType="{x:Type RepeatButton}">
              <Setter Property="Control.Template" Value="{StaticResource ScrollButtonControlTemplate}"/>
              <Setter Property="Control.Foreground" Value="{DynamicResource DefaultFontBrush}"/>
              <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
            </Style>
            <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
            <Style TargetType="{x:Type ScrollViewer}">
              <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
              <Setter Property="FocusManager.IsFocusScope" Value="false"/>
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}" IsHitTestVisible="true">
                      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Control.Padding}"
                                              Content="{TemplateBinding ContentControl.Content}"
                                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" IsHitTestVisible="true"/>
                      <RepeatButton Command="{x:Static ScrollBar.LineLeftCommand}" Focusable="false" HorizontalAlignment="Left"
                                    Width="13" Height="Auto" VerticalAlignment="Stretch" Style="{StaticResource ScrollButtonStyle}"
                                    CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                        <UIElement.Visibility>
                          <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                        ConverterParameter="0">
                            <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                            <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                            <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                            <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                          </MultiBinding>
                        </UIElement.Visibility>
                        <Path Fill="Black" Stretch="Fill" StrokeThickness="0" HorizontalAlignment="Center" Margin="0"
                              VerticalAlignment="Center" Width="3" Height="5" Data="M 0,0 L 1,1 1,-1 Z" Stroke="{x:Null}"/>
                      </RepeatButton>
                      <RepeatButton Command="{x:Static ScrollBar.LineRightCommand}" Focusable="false" HorizontalAlignment="Right"
                                    Width="13" Height="Auto" VerticalAlignment="Stretch" Style="{StaticResource ScrollButtonStyle}"
                                    CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                        <UIElement.Visibility>
                          <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                        ConverterParameter="100">
                            <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                            <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                            <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                            <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                          </MultiBinding>
                        </UIElement.Visibility>
                        <Path Fill="Black" Stretch="Fill" StrokeThickness="0" HorizontalAlignment="Center" Margin="0"
                              VerticalAlignment="Center" Width="3" Height="5" Data="M 1,0 L 0,1 0,-1 Z" Stroke="{x:Null}"/>
                      </RepeatButton>
                    </Grid>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
              <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
              <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
              <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
            </Style>
          </FrameworkTemplate.Resources>
          <Grid x:Name="ContentGrid" Height="Auto" VerticalAlignment="Top">
            <Grid.RowDefinitions>
              <RowDefinition Height="24"/>
              <RowDefinition x:Name="rowDefinition" Height="86"/>
              <RowDefinition x:Name="rowDefinition1" Height="5"/>
            </Grid.RowDefinitions>
            <Border x:Name="border" HorizontalAlignment="Stretch" Margin="0,-1,0,0" Width="Auto" BorderThickness="0,1"
                    Grid.Row="1" Background="{DynamicResource RibbonBackgoundBrush}"
                    BorderBrush="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border HorizontalAlignment="Stretch" Margin="1,0,1,1" Grid.Row="1" Grid.RowSpan="1">
              <ContentControl x:Name="mainContentControl" Margin="0,1,0,0">
                <ContentPresenter x:Name="contentPresenter" ContentSource="SelectedContent" HorizontalAlignment="Stretch" Margin="0"/>
              </ContentControl>
            </Border>
            <Border x:Name="shadowBorder" Margin="0,-1,0,0" VerticalAlignment="Stretch" Width="Auto" Grid.Row="2"
                    Grid.RowSpan="1" BorderThickness="0,1,0,0"
                    BorderBrush="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                    Background="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}">
              <UIElement.OpacityMask>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                  <GradientStop Color="Black" Offset="0.003"/>
                  <GradientStop Color="#00000000" Offset="0.991"/>
                  <GradientStop Color="#7F0A0A0A" Offset="0.16"/>
                  <GradientStop Color="#FF040404" Offset="0.15"/>
                </LinearGradientBrush>
              </UIElement.OpacityMask>
            </Border>
            <Border x:Name="shadowBorder_Copy" Margin="0,-1,0,0" VerticalAlignment="Stretch" Width="Auto" Grid.Row="2"
                    Grid.RowSpan="1" BorderThickness="0,1,0,0" Background="Black" BorderBrush="Black" Opacity="0.3">
              <UIElement.OpacityMask>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                  <GradientStop Color="Black" Offset="0.003"/>
                  <GradientStop Color="#00000000" Offset="0.991"/>
                  <GradientStop Color="#7F0A0A0A" Offset="0.16"/>
                  <GradientStop Color="#FF040404" Offset="0.15"/>
                </LinearGradientBrush>
              </UIElement.OpacityMask>
            </Border>
            <Grid x:Name="TabsGrid" HorizontalAlignment="Stretch" Margin="0" Width="Auto" RowSpan="1">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <DockPanel LastChildFill="true">
                <ContentPresenter ContentSource="Menu" DockPanel.Dock="Left" VerticalAlignment="Bottom"/>
                <Fluent:RibbonScrollViewer x:Name="scrollViewer" DockPanel.Dock="Right" HorizontalAlignment="Left" Margin="0,-7,0,0"
                                           Width="Auto" Style="{DynamicResource RibbonTabScrollViewer}" HorizontalScrollBarVisibility="Auto"
                                           VerticalScrollBarVisibility="Disabled" IsHitTestVisible="true">
                  <Fluent:RibbonTabsContainer x:Name="PART_TabsContainer" IsItemsHost="true" Height="Auto" HorizontalAlignment="Stretch"
                                              FocusManager.IsFocusScope="false" Margin="0"/>
                </Fluent:RibbonScrollViewer>
              </DockPanel>
              <StackPanel x:Name="toolbarPlaceholder" HorizontalAlignment="Left" Grid.Column="1" Orientation="Horizontal"
                          Margin="0,0,0,1">
                <Grid Width="22" Height="22">
                  <Image x:Name="image" Source="/Fluent;Component/Themes/Office2010/Images/RibbonPin.png" Stretch="None"
                         Visibility="Collapsed"/>
                  <Fluent:ToggleButton x:Name="PART_MinimizeButton" Margin="0" Width="22" Height="22" Size="Small"
                                       Style="{DynamicResource RibbonTabControlToggleButtonStyle}"
                                       IsChecked="{Binding Path=IsMinimized, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Grid>
                <StackPanel x:Name="PART_ToolbarPanel" Orientation="Horizontal" FocusManager.IsFocusScope="false"/>
              </StackPanel>
            </Grid>
            <Popup x:Name="PART_Popup" StaysOpen="true" AllowsTransparency="true" PopupAnimation="Fade"
                   VerticalOffset="-1" IsOpen="{TemplateBinding Fluent:RibbonTabControl.IsDropDownOpen}"
                   HorizontalOffset="0" Placement="Custom"
                   PlacementTarget="{Binding Path=SelectedTabItem, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
              <Grid Width="Auto" Height="Auto" Margin="0,20">
                <Grid.RowDefinitions>
                  <RowDefinition Height="86"/>
                  <RowDefinition Height="5"/>
                </Grid.RowDefinitions>
                <Border Height="Auto" Background="{DynamicResource RibbonBackgoundBrush}" BorderThickness="0,1"
                        BorderBrush="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}">
                  <ContentControl x:Name="contentControl" Margin="0"/>
                </Border>
                <Border Margin="0,-1,0,0" VerticalAlignment="Bottom" Width="Auto" Grid.Row="1" Grid.RowSpan="1"
                        BorderThickness="0,1,0,0" Height="6"
                        BorderBrush="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                        Background="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}">
                  <UIElement.OpacityMask>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                      <GradientStop Color="Black" Offset="0.003"/>
                      <GradientStop Color="#00000000" Offset="0.991"/>
                      <GradientStop Color="#7F0A0A0A" Offset="0.16"/>
                      <GradientStop Color="#FF040404" Offset="0.15"/>
                    </LinearGradientBrush>
                  </UIElement.OpacityMask>
                </Border>
                <Border Margin="0" VerticalAlignment="Bottom" Width="Auto" Grid.Row="1" Grid.RowSpan="1"
                        BorderThickness="0,1,0,0" Height="6" BorderBrush="Black" Background="Black" Opacity="0.3">
                  <UIElement.OpacityMask>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                      <GradientStop Color="Black" Offset="0.003"/>
                      <GradientStop Color="#00000000" Offset="0.991"/>
                      <GradientStop Color="#7F0A0A0A" Offset="0.16"/>
                      <GradientStop Color="#FF040404" Offset="0.15"/>
                    </LinearGradientBrush>
                  </UIElement.OpacityMask>
                </Border>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Fluent:RibbonTabControl.IsMinimized" Value="true">
              <Setter TargetName="rowDefinition" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="rowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="mainContentControl" Value="{x:Null}" Property="ContentControl.Content"/>
              <Setter TargetName="contentControl" Value="{Binding ElementName=contentPresenter, Mode=OneWay}"
                      Property="ContentControl.Content"/>
              <Setter TargetName="border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="shadowBorder" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="image" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Fluent:RibbonTabControl.IsDropDownOpen" Value="true"/>
                <Condition Property="Fluent:RibbonTabControl.IsMinimized" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="image" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="PART_MinimizeButton" Property="UIElement.Opacity" Value="0"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource DefaultFontBrush}"/>
    <Setter Property="Control.FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
    <Setter Property="Control.FontSize" Value="{DynamicResource DefaultFontSize}"/>
  </Style>
</ResourceDictionary>