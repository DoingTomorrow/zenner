
--- AllMeters.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.AllMeters
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class AllMeters
  {
    internal AllMeters.RunningFunctions RunningFunction = AllMeters.RunningFunctions.NoFunction;
    internal ZR_HandlerFunctions MyHandler;
    internal Meter ConnectedMeter;
    internal Meter BaseTypeMeter;
    internal Meter TypeMeter;
    internal Meter ReadMeter;
    internal Meter DbMeter;
    internal Meter SavedMeter;
    internal Meter WorkMeter;
    internal byte[] DbMeterReadEEProm;
    private const int UndoStackLength = 5;
    internal Meter[] WorkMeterUndoStack = new Meter[5];
    internal List<LoggerInfo> LoggerDataFromMeter;
    private static string[] IdentVars = new string[4]
    {
      "EEP_Header.EEP_HEADER_SerialNr",
      "EEP_Header.EEP_HEADER_MBusSerialNr",
      "EEP_Header.EEP_HEADER_MeterID",
      "EEP_Header.EEP_HEADER_MeterKey"
    };
    private static string[] CalibrationVarsC2 = new string[42]
    {
      "DefaultFunction.kf_rl_exp_1",
      "DefaultFunction.kf_rl_exp_2",
      "DefaultFunction.kf_rl_exp_3",
      "DefaultFunction.kf_rl_exp_4",
      "DefaultFunction.kf_rl_exp_5",
      "DefaultFunction.kf_rl_exp_6",
      "DefaultFunction.kf_rl_man_1",
      "DefaultFunction.kf_rl_man_2",
      "DefaultFunction.kf_rl_man_3",
      "DefaultFunction.kf_rl_man_4",
      "DefaultFunction.kf_rl_man_5",
      "DefaultFunction.kf_rl_man_6",
      "DefaultFunction.kf_vl_exp_1",
      "DefaultFunction.kf_vl_exp_2",
      "DefaultFunction.kf_vl_exp_3",
      "DefaultFunction.kf_vl_exp_4",
      "DefaultFunction.kf_vl_exp_5",
      "DefaultFunction.kf_vl_exp_6",
      "DefaultFunction.kf_vl_man_1",
      "DefaultFunction.kf_vl_man_2",
      "DefaultFunction.kf_vl_man_3",
      "DefaultFunction.kf_vl_man_4",
      "DefaultFunction.kf_vl_man_5",
      "DefaultFunction.kf_vl_man_6",
      "DefaultFunction.tf_exp_1",
      "DefaultFunction.tf_exp_2",
      "DefaultFunction.tf_exp_3",
      "DefaultFunction.tf_exp_4",
      "DefaultFunction.tf_exp_5",
      "DefaultFunction.tf_exp_6",
      "DefaultFunction.tf_man_1",
      "DefaultFunction.tf_man_2",
      "DefaultFunction.tf_man_3",
      "DefaultFunction.tf_man_4",
      "DefaultFunction.tf_man_5",
      "DefaultFunction.tf_man_6",
      "DefaultFunction.v_cal_exp",
      "DefaultFunction.v_cal_man",
      "DefaultFunction.n_ref_exp",
      "DefaultFunction.n_ref_man",
      "DefaultFunction.o_cal_exp",
      "DefaultFunction.o_cal_man"
    };
    private static string[] CalibrationVarsWR3 = new string[48]
    {
      "DefaultFunction.n_ref_man_1",
      "DefaultFunction.n_ref_man_2",
      "DefaultFunction.n_ref_exp_1",
      "DefaultFunction.n_ref_exp_2",
      "DefaultFunction.v_cal_man_1",
      "DefaultFunction.v_cal_man_2",
      "DefaultFunction.v_cal_exp_1",
      "DefaultFunction.v_cal_exp_2",
      "DefaultFunction.o_cal_man_1",
      "DefaultFunction.o_cal_man_2",
      "DefaultFunction.o_cal_exp_1",
      "DefaultFunction.o_cal_exp_2",
      "DefaultFunction.tf_man_1",
      "DefaultFunction.tf_man_2",
      "DefaultFunction.tf_man_3",
      "DefaultFunction.tf_man_4",
      "DefaultFunction.tf_man_5",
      "DefaultFunction.tf_man_6",
      "DefaultFunction.kf_rl_man_1",
      "DefaultFunction.kf_rl_man_2",
      "DefaultFunction.kf_rl_man_3",
      "DefaultFunction.kf_rl_man_4",
      "DefaultFunction.kf_rl_man_5",
      "DefaultFunction.kf_rl_man_6",
      "DefaultFunction.kf_vl_man_1",
      "DefaultFunction.kf_vl_man_2",
      "DefaultFunction.kf_vl_man_3",
      "DefaultFunction.kf_vl_man_4",
      "DefaultFunction.kf_vl_man_5",
      "DefaultFunction.kf_vl_man_6",
      "DefaultFunction.tf_exp_1",
      "DefaultFunction.tf_exp_2",
      "DefaultFunction.tf_exp_3",
      "DefaultFunction.tf_exp_4",
      "DefaultFunction.tf_exp_5",
      "DefaultFunction.tf_exp_6",
      "DefaultFunction.kf_rl_exp_1",
      "DefaultFunction.kf_rl_exp_2",
      "DefaultFunction.kf_rl_exp_3",
      "DefaultFunction.kf_rl_exp_4",
      "DefaultFunction.kf_rl_exp_5",
      "DefaultFunction.kf_rl_exp_6",
      "DefaultFunction.kf_vl_exp_1",
      "DefaultFunction.kf_vl_exp_2",
      "DefaultFunction.kf_vl_exp_3",
      "DefaultFunction.kf_vl_exp_4",
      "DefaultFunction.kf_vl_exp_5",
      "DefaultFunction.kf_vl_exp_6"
    };

    public AllMeters(ZR_HandlerFunctions MyHandlerIn) => this.MyHandler = MyHandlerIn;

    internal bool DeleteMeter(ZR_HandlerFunctions.MeterObjects MeterObject)
    {
      switch (MeterObject)
      {
        case ZR_HandlerFunctions.MeterObjects.Read:
          this.ReadMeter = (Meter) null;
          break;
        case ZR_HandlerFunctions.MeterObjects.Work:
          this.WorkMeter = (Meter) null;
          break;
        case ZR_HandlerFunctions.MeterObjects.Type:
          this.TypeMeter = (Meter) null;
          break;
        case ZR_HandlerFunctions.MeterObjects.DbMeter:
          this.DbMeter = (Meter) null;
          break;
        default:
          return false;
      }
      return true;
    }

    internal bool CopyMeter(ZR_HandlerFunctions.MeterObjects SourceMeterObject)
    {
      switch (SourceMeterObject)
      {
        case ZR_HandlerFunctions.MeterObjects.Read:
          this.SavedMeter = this.ReadMeter;
          break;
        case ZR_HandlerFunctions.MeterObjects.Work:
          this.SavedMeter = this.WorkMeter;
          break;
        case ZR_HandlerFunctions.MeterObjects.Type:
          this.SavedMeter = this.TypeMeter;
          break;
        case ZR_HandlerFunctions.MeterObjects.DbMeter:
          this.SavedMeter = this.DbMeter;
          break;
        default:
          return false;
      }
      return this.SavedMeter != null;
    }

    internal bool PastMeter(ZR_HandlerFunctions.MeterObjects SourceMeterObject)
    {
      if (this.SavedMeter == null)
        return false;
      Meter MyMeterIn = this.SavedMeter.BaseClone();
      if (!MyMeterIn.CompleteTheClone(this.SavedMeter.AllParameters, true) || !MyMeterIn.GenerateEprom())
        return false;
      if (MyMeterIn.MyCommunication == null)
        MyMeterIn.MyCommunication = new MeterCommunication(MyMeterIn);
      switch (SourceMeterObject)
      {
        case ZR_HandlerFunctions.MeterObjects.Read:
          this.ReadMeter = MyMeterIn;
          break;
        case ZR_HandlerFunctions.MeterObjects.Work:
          this.WorkMeter = MyMeterIn;
          break;
        case ZR_HandlerFunctions.MeterObjects.Type:
          this.TypeMeter = MyMeterIn;
          break;
        case ZR_HandlerFunctions.MeterObjects.DbMeter:
          this.DbMeter = MyMeterIn;
          break;
        default:
          return false;
      }
      return true;
    }

    internal bool ConnectMeter()
    {
      this.ReadMeter = (Meter) null;
      this.LoggerDataFromMeter = (List<LoggerInfo>) null;
      this.ConnectedMeter = new Meter(this.MyHandler);
      return this.ConnectedMeter.ConnectMeter();
    }

    internal bool IdentConnectedMeter(out ZR_MeterIdent TheIdent)
    {
      TheIdent = (ZR_MeterIdent) null;
      if (this.ConnectedMeter == null || !this.ConnectedMeter.IdentConnectedMeter())
        return false;
      TheIdent = this.ConnectedMeter.MyIdent;
      return true;
    }

    internal bool ReadConnectedMeter()
    {
      this.RunningFunction = AllMeters.RunningFunctions.WorkMeter;
      if (this.ConnectedMeter == null)
        return false;
      this.ReadMeter = this.ConnectedMeter;
      this.ConnectedMeter = (Meter) null;
      this.BaseTypeMeter = (Meter) null;
      if (!this.ReadMeter.ReadConnectedMeter())
      {
        this.ReadMeter = (Meter) null;
        this.WorkMeter = (Meter) null;
        this.LoggerDataFromMeter = (List<LoggerInfo>) null;
        return false;
      }
      this.MyHandler.MyDataBaseAccess.WriteDailyMeterData(this.ReadMeter);
      if (this.MyHandler.LoggerRestoreState == LoggerRestor.RestoreBaseLoggers)
        this.LoggerDataFromMeter = this.ReadMeter.ReadFixedLoggers();
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.ReadMeter.BaseClone();
      this.WorkMeter.MyCommunication = new MeterCommunication(this.WorkMeter);
      if (!this.WorkMeter.CompleteTheClone(this.ReadMeter.AllParameters, false))
      {
        this.WorkMeter = (Meter) null;
        return false;
      }
      Parameter allParameter1 = (Parameter) this.WorkMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_SerialNr"];
      if (allParameter1.ValueEprom > 0L)
      {
        Parameter allParameter2 = (Parameter) this.WorkMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusSerialNr"];
        if (allParameter2.ValueEprom == 0L)
        {
          allParameter2.ValueEprom = allParameter1.ValueEprom;
          allParameter2.UpdateByteList();
          ((OverrideParameter) this.WorkMeter.MyFunctionTable.OverridesList[(object) OverrideID.MBusIdentificationNo]).Value = (ulong) allParameter2.ValueEprom;
        }
        if (this.WorkMeter.WriteEnable)
        {
          Parameter allParameter3 = (Parameter) this.WorkMeter.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"];
          if (allParameter3.ValueEprom != (long) byte.MaxValue && !UserRights.GlobalUserRights.CheckRight(UserRights.Rights.ProfessionalConfig))
          {
            allParameter3.ValueEprom = (long) byte.MaxValue;
            allParameter3.UpdateByteList();
          }
        }
      }
      this.WorkMeter.GenerateEprom();
      this.ReadMeter.OverrideAllLinkerObjectsWithEpromData();
      return true;
    }

    internal bool LoadMeter(ZR_MeterIdent TheMeterIdent, DateTime StorageTime)
    {
      ZR_ClassLibMessages.ClearErrors();
      this.RunningFunction = AllMeters.RunningFunctions.WorkDBMeter;
      this.ReadMeter = (Meter) null;
      this.TypeMeter = (Meter) null;
      this.DbMeter = new Meter(this.MyHandler);
      if (!this.DbMeter.LoadMeter(TheMeterIdent, StorageTime))
      {
        this.DbMeter = (Meter) null;
        return false;
      }
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.DbMeter.BaseClone();
      if (!this.WorkMeter.CompleteTheClone(this.DbMeter.AllParameters, false))
      {
        this.WorkMeter = (Meter) null;
        return false;
      }
      this.WorkMeter.GenerateEprom();
      this.DbMeter.OverrideAllLinkerObjectsWithEpromData();
      return this.WorkMeter.AreBlocksizesUnchanged(this.DbMeter.Eprom);
    }

    internal bool LoadType(int MeterInfoID, bool DeleteReadMeter)
    {
      return this.LoadType(MeterInfoID, 0, DeleteReadMeter);
    }

    internal bool LoadType(int MeterInfoID, int FirmwareVersion, bool DeleteReadMeter)
    {
      this.RunningFunction = AllMeters.RunningFunctions.WorkType;
      ZR_ClassLibMessages.ClearErrors();
      if (DeleteReadMeter)
        this.ReadMeter = (Meter) null;
      try
      {
        if (MeterInfoID != 0 && (this.TypeMeter == null || this.TypeMeter.MyIdent.MeterInfoID != MeterInfoID || FirmwareVersion > 0 && this.TypeMeter.MyIdent.lFirmwareVersion != (long) FirmwareVersion))
        {
          this.TypeMeter = new Meter(this.MyHandler);
          bool extendedTypeEditMode = this.MyHandler.ExtendedTypeEditMode;
          this.MyHandler.ExtendedTypeEditMode = true;
          bool flag = this.TypeMeter.LoadType(MeterInfoID, FirmwareVersion);
          this.MyHandler.ExtendedTypeEditMode = extendedTypeEditMode;
          if (flag)
          {
            if (!this.MyHandler.UseOnlyDefaultValues && !this.TypeMeter.MyLinker.AreBlockAdressesUnchanged(this.TypeMeter.Eprom))
              return false;
          }
          else
            goto label_16;
        }
        if (this.TypeMeter == null)
        {
          if (ZR_ClassLibMessages.GetLastError() == ZR_ClassLibMessages.LastErrors.NoError)
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
          return false;
        }
        this.SaveWorkMeterToUndoStack();
        this.WorkMeter = this.TypeMeter.BaseClone();
        if (this.WorkMeter.AddDatabaseOverridesToBaseClone())
        {
          if (this.WorkMeter.CompleteTheClone(this.TypeMeter.AllParameters, false))
          {
            this.WorkMeter.MeterTime = DateTime.Now;
            this.WorkMeter.InitialiseAllTimes();
            this.WorkMeter.GenerateEprom();
          }
          else
            goto label_16;
        }
        else
          goto label_16;
      }
      catch
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Load type exception");
        goto label_16;
      }
      return true;
label_16:
      this.TypeMeter = (Meter) null;
      ZR_ClassLibMessages.AddErrorDescription("Load type error");
      return false;
    }

    internal bool LoadBaseType(ZR_MeterIdent TheIdent)
    {
      if (TheIdent.MeterInfoBaseID == 0)
        return false;
      try
      {
        if (this.TypeMeter != null && this.TypeMeter.MyIdent.MeterInfoID == TheIdent.MeterInfoBaseID)
        {
          this.BaseTypeMeter = this.TypeMeter;
        }
        else
        {
          this.BaseTypeMeter = new Meter(this.MyHandler);
          bool extendedTypeEditMode = this.MyHandler.ExtendedTypeEditMode;
          this.MyHandler.ExtendedTypeEditMode = true;
          bool flag = false;
          try
          {
            flag = this.BaseTypeMeter.LoadTypeToFunctionTable(TheIdent.MeterInfoBaseID);
          }
          catch
          {
          }
          this.MyHandler.ExtendedTypeEditMode = extendedTypeEditMode;
          if (!flag)
            goto label_10;
        }
      }
      catch
      {
        goto label_10;
      }
      return true;
label_10:
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Load basetype error");
      return false;
    }

    internal bool OverloadType(string OverloadSettings)
    {
      ZR_ClassLibMessages.ClearErrors();
      try
      {
        this.SaveWorkMeterToUndoStack();
        this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.MenuOverride))
        {
          SortedList overridesList = this.WorkMeter.MyFunctionTable.OverridesList;
          this.WorkMeter.MyFunctionTable = this.TypeMeter.MyFunctionTable.Clone(this.WorkMeter);
          this.WorkMeter.MyFunctionTable.OverridesList = overridesList;
        }
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.MBusListOverride))
          this.WorkMeter.MyMBusList = this.TypeMeter.MyMBusList.Clone(this.WorkMeter);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.MBusAddress))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.MBusAddress);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.ReadingDate))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.ReadingDate);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.ReadingDate))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.ReadingDate);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.CustomID))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.CustomID);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.ModuleType))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.ModuleType);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.BaseConfig))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.BaseConfig);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.WarmerPipe))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.WarmerPipe);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.EnergyResolution))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.EnergyResolution);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.VolumeResolution))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.VolumeResolution);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.VolumePulsValue))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.VolumePulsValue);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.Input1Type))
          OverrideParameter.CopyIOFunctionOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, 15UL);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.Input1IdNumber))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.Input1IdNumber);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.Input1Unit))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.Input1Unit);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.Input1PulsValue))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.Input1PulsValue);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.Input2Type))
          OverrideParameter.CopyIOFunctionOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, 240UL);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.Input2IdNumber))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.Input2IdNumber);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.Input2Unit))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.Input2Unit);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.Input2PulsValue))
          OverrideParameter.CopyOverrideParameter(this.WorkMeter.MyFunctionTable.OverridesList, this.TypeMeter.MyFunctionTable.OverridesList, OverrideID.Input2PulsValue);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.ClearNotProtectedValues))
          OverrideParameter.ClearNotProtectedValues(this.WorkMeter.MyFunctionTable.OverridesList);
        if (OverrideParameter.OverrideIdAtString(this.TypeMeter.MyIdent.TypeOverrideString, OverrideID.ClearProtectedValues))
          OverrideParameter.ClearProtectedValues(this.WorkMeter.MyFunctionTable.OverridesList);
        if (this.WorkMeter.CompleteTheClone(this.ReadMeter.AllParameters, false))
        {
          this.WorkMeter.GenerateEprom();
          ZR_ClassLibMessages.ClearErrors();
        }
        else
          goto label_49;
      }
      catch
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Overload type exception");
        goto label_49;
      }
      return true;
label_49:
      this.TypeMeter = (Meter) null;
      return false;
    }

    internal bool ChangeConfigLogger(Function ReplaceFunction)
    {
      try
      {
        if (this.WorkMeter.ConfigLoggers == null)
        {
          this.WorkMeter.ConfigLoggers = new SortedList<uint, Function>();
        }
        else
        {
          int index = this.WorkMeter.ConfigLoggers.IndexOfKey((uint) ReplaceFunction.Number);
          if (index >= 0)
            this.WorkMeter.ConfigLoggers.RemoveAt(index);
        }
        this.WorkMeter.ConfigLoggers.Add((uint) ReplaceFunction.Number, ReplaceFunction);
        SortedList BaseAllParameters = new SortedList();
        foreach (DictionaryEntry allParameter in this.WorkMeter.AllParameters)
        {
          Parameter parameter = (Parameter) allParameter.Value;
          if (parameter.FunctionNumber != (int) ReplaceFunction.Number)
            BaseAllParameters.Add((object) parameter.FullName, (object) parameter);
        }
        this.SaveWorkMeterToUndoStack();
        this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
        if (BaseAllParameters == null)
        {
          if (!this.WorkMeter.CompleteTheCloneToCompiledFunctions(this.WorkMeterUndoStack[0].AllParameters, false))
            return false;
        }
        else if (!this.WorkMeter.CompleteTheCloneToCompiledFunctions(BaseAllParameters, false))
          return false;
        if (!this.WorkMeter.MyMBusList.GenerateNewList() || !this.WorkMeter.CompleteTheCloneFromCreateFunctionTable())
          return false;
        this.WorkMeter.GenerateEprom();
        ZR_ClassLibMessages.ClearErrors();
      }
      catch
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Change logger configuration exception");
        this.Undo();
        goto label_25;
      }
      return true;
label_25:
      return false;
    }

    internal bool OverloadIdentAndCalibrationData(ZR_HandlerFunctions.MeterObjects SourceMeterObject)
    {
      if (SourceMeterObject == ZR_HandlerFunctions.MeterObjects.Read && this.ReadMeter != null)
      {
        Meter readMeter = this.ReadMeter;
        string key = string.Empty;
        try
        {
          this.WorkMeter.MyIdent.MeterID = readMeter.MyIdent.MeterID;
          this.WorkMeter.MyIdent.SerialNr = readMeter.MyIdent.SerialNr;
          this.WorkMeter.MyIdent.MBus_SerialNumber = readMeter.MyIdent.MBus_SerialNumber;
          this.WorkMeter.MyIdent.MBusSerialNr = readMeter.MyIdent.MBusSerialNr;
          for (int index = 0; index < AllMeters.IdentVars.Length; ++index)
          {
            key = AllMeters.IdentVars[index];
            Parameter allParameter1 = (Parameter) readMeter.AllParameters[(object) key];
            Parameter allParameter2 = (Parameter) this.WorkMeter.AllParameters[(object) key];
            allParameter2.ValueEprom = allParameter1.ValueEprom;
            allParameter2.UpdateByteList();
          }
          string[] strArray;
          if ((readMeter.MyIdent.lFirmwareVersion & 61440L) == 0L)
            strArray = AllMeters.CalibrationVarsC2;
          else if ((readMeter.MyIdent.lFirmwareVersion & 4095L) == 1L)
            strArray = AllMeters.CalibrationVarsC2;
          else if ((readMeter.MyIdent.lFirmwareVersion & 4095L) == 8L)
          {
            strArray = AllMeters.CalibrationVarsWR3;
          }
          else
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Calibration data unknown");
            return false;
          }
          for (int index = 0; index < strArray.Length; ++index)
          {
            key = strArray[index];
            Parameter allParameter3 = (Parameter) readMeter.AllParameters[(object) key];
            Parameter allParameter4 = (Parameter) this.WorkMeter.AllParameters[(object) key];
            allParameter4.ValueEprom = allParameter3.ValueEprom;
            allParameter4.UpdateByteList();
          }
        }
        catch
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Missing variable: " + key);
          return false;
        }
        return true;
      }
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
      return false;
    }

    internal bool SaveAsNewType(ZR_MeterIdent NewTypeIdent)
    {
      if (this.WorkMeter == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Missing work meter");
        return false;
      }
      return this.WorkMeter.DeleteIdentData() && this.MyHandler.MyDataBaseAccess.SaveAsNewType(this.WorkMeter, NewTypeIdent);
    }

    internal bool SaveType(ZR_MeterIdent TypeOverrideIdent)
    {
      ZR_ClassLibMessages.ClearErrors();
      try
      {
        if (this.WorkMeter == null)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Missing work meter");
          goto label_17;
        }
        else if (this.TypeMeter == null)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Missing type meter");
          goto label_17;
        }
        else
        {
          if (this.WorkMeter.MyIdent.PPSArtikelNr == "BASETYPE")
          {
            if (!this.MyHandler.BaseTypeEditMode)
            {
              int num = (int) GMM_MessageBox.ShowMessage("Save BASETYPE", "Save type for BASETYPE's is only availible from base type edit mode!", true);
              return false;
            }
            if (GMM_MessageBox.ShowMessage("Save BASETYPE", "Are you sure to override this BASETYPE", MessageBoxButtons.OKCancel) != DialogResult.OK)
              return false;
          }
          if (this.WorkMeter.DeleteIdentData())
          {
            ZR_MeterIdent TheIdent = this.TypeMeter.MyIdent.Clone();
            if (TypeOverrideIdent != null)
            {
              TheIdent.PPSArtikelNr = TypeOverrideIdent.PPSArtikelNr;
              TheIdent.MeterInfoDescription = TypeOverrideIdent.MeterInfoDescription;
              TheIdent.TypeOverrideString = TypeOverrideIdent.TypeOverrideString;
            }
            if (this.MyHandler.MyDataBaseAccess.SaveType(this.WorkMeter, TheIdent))
              this.MyHandler.MyLoadedFunctions.ClearCache();
            else
              goto label_17;
          }
          else
            goto label_17;
        }
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Save type exception");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        goto label_17;
      }
      return true;
label_17:
      return false;
    }

    internal bool ResetAllData()
    {
      if (this.WorkMeter == null)
        return true;
      HandlerLists.GarantVarsListExists();
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
      if (this.WorkMeter.CompleteTheClone(this.WorkMeterUndoStack[0].AllParameters, false))
      {
        for (int index = 0; index < this.WorkMeter.AllParameters.Count; ++index)
        {
          Parameter byIndex = (Parameter) this.WorkMeter.AllParameters.GetByIndex(index);
          string key = byIndex.Name;
          if (byIndex.FunctionNumber >= 0)
            key = ((Function) this.WorkMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) byIndex.FunctionNumber]).Name + "." + byIndex.Name;
          if (HandlerLists.ConsumationDataParameters.ContainsKey(key))
          {
            byIndex.ValueCPU = 0L;
            byIndex.ValueEprom = 0L;
            byIndex.UpdateByteList();
          }
        }
        if (this.WorkMeter.MyFunctionTable.AddOverridesFromParameter())
        {
          this.WorkMeter.GenerateEprom();
          return true;
        }
      }
      this.Undo();
      return false;
    }

    internal bool ChangeMeterData(List<Parameter.ParameterGroups> SelectedGroups)
    {
      if (this.WorkMeter == null)
        return true;
      HandlerLists.GarantVarsListExists();
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
      if (this.WorkMeter.CompleteTheClone(this.WorkMeterUndoStack[0].AllParameters, false))
      {
        if (!this.WorkMeter.WriteEnable)
          this.WorkMeter.GenerateWriteEnableLists(true);
        for (int index = 0; index < this.WorkMeter.AllParameters.Count; ++index)
        {
          Parameter byIndex = (Parameter) this.WorkMeter.AllParameters.GetByIndex(index);
          if (this.WorkMeter.WriteEnable || (!byIndex.ExistOnEprom || this.WorkMeter.EpromWriteEnable[byIndex.Address]) && (!byIndex.ExistOnCPU || this.WorkMeter.RamWriteEnable[byIndex.AddressCPU]))
          {
            string str = byIndex.Name;
            if (byIndex.FunctionNumber >= 0)
              str = ((Function) this.WorkMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) byIndex.FunctionNumber]).Name + "." + byIndex.Name;
            foreach (Parameter.ParameterGroups selectedGroup in SelectedGroups)
            {
              if (byIndex.GroupMember[(int) selectedGroup])
              {
                switch (selectedGroup)
                {
                  case Parameter.ParameterGroups.CONSUMATION:
                    byIndex.ValueCPU = 0L;
                    byIndex.ValueEprom = 0L;
                    byIndex.UpdateByteList();
                    break;
                  case Parameter.ParameterGroups.EXTERNAL_IDENT:
                    if (str == "EEP_HEADER_MBusSerialNr")
                    {
                      Parameter allParameter = (Parameter) this.WorkMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_SerialNr"];
                      byIndex.ValueEprom = allParameter.ValueEprom;
                      byIndex.UpdateByteList();
                      break;
                    }
                    byIndex.ValueCPU = 0L;
                    byIndex.ValueEprom = 0L;
                    byIndex.UpdateByteList();
                    break;
                }
              }
            }
          }
        }
        if (this.WorkMeter.MyFunctionTable.AddOverridesFromParameter())
        {
          this.WorkMeter.GenerateEprom();
          return true;
        }
      }
      this.Undo();
      return false;
    }

    internal bool SetNewOverrides(SortedList NewOverrides)
    {
      if (this.WorkMeter == null)
        return true;
      if (this.MyHandler.useBaseTypeTemplate && this.BaseTypeMeter == null && !this.LoadBaseType(this.WorkMeter.MyIdent))
        return false;
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
      if (this.MyHandler.useBaseTypeTemplate)
      {
        FunctionTable functionTable = this.BaseTypeMeter.MyFunctionTable.Clone(this.WorkMeter);
        this.WorkMeter.MyFunctionTable.FunctionNumbersList = functionTable.FunctionNumbersList;
        this.WorkMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList = functionTable.FunctionStartIndexOfMenuColumnList;
        if ((NewOverrides == null || this.WorkMeter.SetOverrideParameterFromList(NewOverrides)) && this.WorkMeter.CompleteTheCloneToCompiledFunctions(this.WorkMeterUndoStack[0].AllParameters, false))
        {
          MBusInfo TheInfo = (MBusInfo) null;
          if (!this.BaseTypeMeter.MyMBusList.GetMBusVariableLists(out TheInfo) || !this.WorkMeter.MyMBusList.SetMBusVariables(TheInfo) || !this.WorkMeter.CompleteTheCloneFromCreateFunctionTable())
            goto label_40;
        }
        else
          goto label_40;
      }
      else if (NewOverrides != null && !this.WorkMeter.SetOverrideParameterFromList(NewOverrides) || !this.WorkMeter.CompleteTheClone(this.WorkMeterUndoStack[0].AllParameters, false))
        goto label_40;
      this.WorkMeter.GenerateEprom();
      if (this.MyHandler.showFunctionAddDelMessages)
      {
        SortedList<ushort, int> sortedList1 = new SortedList<ushort, int>();
        foreach (ushort functionNumbers in this.WorkMeterUndoStack[0].MyFunctionTable.FunctionNumbersList)
          sortedList1.Add(functionNumbers, 0);
        SortedList<ushort, int> sortedList2 = new SortedList<ushort, int>();
        foreach (ushort functionNumbers in this.WorkMeter.MyFunctionTable.FunctionNumbersList)
          sortedList2.Add(functionNumbers, 0);
        foreach (ushort key in (IEnumerable<ushort>) sortedList1.Keys)
        {
          if (!sortedList2.ContainsKey(key))
          {
            Function fullLoadedFunction = (Function) this.MyHandler.MyLoadedFunctions.FullLoadedFunctions[(object) key];
            ZR_ClassLibMessages.AddInfo(this.MyHandler.MyRes.GetString("FuncDel") + ": " + fullLoadedFunction.FullName);
          }
        }
        foreach (ushort key in (IEnumerable<ushort>) sortedList2.Keys)
        {
          if (!sortedList1.ContainsKey(key))
          {
            Function fullLoadedFunction = (Function) this.MyHandler.MyLoadedFunctions.FullLoadedFunctions[(object) key];
            ZR_ClassLibMessages.AddInfo(this.MyHandler.MyRes.GetString("FuncAdd") + ": " + fullLoadedFunction.FullName);
          }
        }
      }
      return true;
label_40:
      this.Undo();
      return false;
    }

    internal bool SetMeterKey(uint MeterKey)
    {
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
      if (this.WorkMeter.CompleteTheCloneAndSetMeterKey(this.WorkMeterUndoStack[0].AllParameters, MeterKey))
      {
        this.WorkMeter.GenerateEprom();
        return true;
      }
      this.Undo();
      return false;
    }

    internal bool ProgramDevice(
      DateTime NewMeterTime,
      bool SetWriteProtect,
      bool DisableReset,
      bool DisableTimeUpdate,
      bool DisableDbWrite,
      bool HoldRead)
    {
      if (this.IfProgrammDevicePossible())
      {
        this.WorkMeter.MeterTime = NewMeterTime;
        if (!DisableTimeUpdate)
        {
          if (!this.WorkMeter.SetParameterValue("DefaultFunction.Sta_Secounds", MemoryLocation.RAM, true, (long) ZR_Calendar.Cal_GetMeterTime(NewMeterTime)))
            goto label_78;
        }
        else
        {
          long TheValue;
          if (this.WorkMeter.GetParameterValue("DefaultFunction.Sta_Secounds", MemoryLocation.RAM, true, out TheValue))
          {
            NewMeterTime = ZR_Calendar.Cal_GetDateTime((uint) TheValue);
            this.WorkMeter.MeterTime = NewMeterTime;
          }
          else
            goto label_78;
        }
        if (this.WorkMeter.InitialiseAllTimes())
        {
          if (SetWriteProtect)
          {
            Parameter allParameter = (Parameter) this.WorkMeter.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"];
            allParameter.ValueEprom = 0L;
            allParameter.UpdateByteList();
          }
          this.WorkMeter.GenerateEprom();
          if (this.ReadMeter != null)
          {
            for (int blockStartAddress = this.ReadMeter.MyLoggerStore.BlockStartAddress; blockStartAddress < this.WorkMeter.MyLoggerStore.BlockStartAddress; ++blockStartAddress)
              this.ReadMeter.Eprom[blockStartAddress] = ~this.WorkMeter.Eprom[blockStartAddress];
            if (!this.ReadMeter.WriteEnable)
            {
              if (this.ReadMeter.GenerateWriteEnableLists(false))
              {
                Parameter allParameter = (Parameter) this.ReadMeter.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"];
                if (this.ReadMeter.EpromWriteEnable[allParameter.Address])
                {
                  ByteField data = new ByteField(1);
                  data.Add((int) byte.MaxValue);
                  if (!this.MyHandler.SerBus.WriteMemory(MemoryLocation.RAM, allParameter.AddressCPU, data))
                  {
                    ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Write to ram error");
                    goto label_78;
                  }
                }
              }
              else
                goto label_78;
            }
            if (!this.WorkMeter.WriteEnableWithOpen && !this.AreAllEpromChangesProgrammable())
            {
              ZR_ClassLibMessages.ClearErrors();
              DataChecker.TryReloadWrongOldData(this.ReadMeter, this.WorkMeter);
              if (!this.AreAllEpromChangesProgrammable())
                goto label_78;
            }
            if (this.MyHandler.SerBus.SetEmergencyMode())
            {
              if (this.ReadMeter.WriteEnable || this.ReadMeter.WriteEnableWithOpen)
              {
                if (!this.MyHandler.SerBus.UpdateMemory(MemoryLocation.EEPROM, 0, new ByteField(this.ReadMeter.Eprom), new ByteField(this.WorkMeter.Eprom)))
                  goto label_78;
              }
              else
              {
                ByteField OldData = new ByteField(this.ReadMeter.Eprom.Length);
                ByteField NewData = new ByteField(this.WorkMeter.Eprom.Length);
                int extEepSize = this.ReadMeter.MyIdent.extEEPSize;
                if (extEepSize < this.WorkMeter.MyIdent.extEEPSize)
                  extEepSize = this.WorkMeter.MyIdent.extEEPSize;
                int index;
                for (index = 6; index < extEepSize; ++index)
                {
                  try
                  {
                    if (this.ReadMeter.EpromWriteEnable[index])
                    {
                      OldData.Add(this.ReadMeter.Eprom[index]);
                      NewData.Add(this.WorkMeter.Eprom[index]);
                    }
                    else if (OldData.Count > 0)
                    {
                      if (!this.MyHandler.SerBus.UpdateMemory(MemoryLocation.EEPROM, index - OldData.Count, OldData, NewData))
                      {
                        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Update eeprom memory error");
                        goto label_78;
                      }
                      else
                      {
                        OldData.Count = 0;
                        NewData.Count = 0;
                      }
                    }
                  }
                  catch
                  {
                  }
                }
                if (OldData.Count > 0 && !this.MyHandler.SerBus.UpdateMemory(MemoryLocation.EEPROM, index - OldData.Count, OldData, NewData))
                {
                  ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Update eeprom memory error");
                  goto label_78;
                }
                else
                {
                  Parameter allParameter1 = (Parameter) this.WorkMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupBlockAdr"];
                  Parameter allParameter2 = (Parameter) this.WorkMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_FixedParamAdr"];
                  for (int valueEprom = (int) allParameter1.ValueEprom; valueEprom < (int) allParameter2.ValueEprom; ++valueEprom)
                  {
                    if ((int) this.ReadMeter.Eprom[valueEprom] != (int) this.WorkMeter.Eprom[valueEprom])
                    {
                      Parameter TheParameter;
                      while (true)
                      {
                        TheParameter = (Parameter) this.WorkMeter.AllEpromParametersByAddress[(object) valueEprom];
                        if (TheParameter == null)
                          --valueEprom;
                        else
                          break;
                      }
                      if (TheParameter.Name != "Sta_Secounds")
                      {
                        if (this.ReadMeter.RamWriteEnable[TheParameter.AddressCPU])
                        {
                          TheParameter.ValueCPU = TheParameter.ValueEprom;
                          if (!this.WorkMeter.MyCommunication.WriteParameterValue(TheParameter, MemoryLocation.RAM))
                            ZR_ClassLibMessages.AddWarning("RAM variable '" + TheParameter.FullName + "' not written.");
                        }
                        else
                          ZR_ClassLibMessages.AddWarning("Variable '" + TheParameter.FullName + "' not written! Permission not available.");
                      }
                      valueEprom += TheParameter.Size - 1;
                    }
                  }
                }
              }
            }
            else
              goto label_78;
          }
          else if (!this.MyHandler.SerBus.SetEmergencyMode())
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Ser emergency mode error");
            goto label_78;
          }
          else if (!this.MyHandler.SerBus.WriteMemory(MemoryLocation.EEPROM, 0, new ByteField(this.WorkMeter.Eprom)
          {
            Count = this.WorkMeter.MyLoggerStore.BlockStartAddress
          }))
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Write Error");
            goto label_78;
          }
          if (this.MyHandler.LoggerRestoreState != 0 && this.LoggerDataFromMeter != null)
            this.WorkMeter.ReprogramLoggerData(this.LoggerDataFromMeter);
          if (!DisableReset)
          {
            if (!this.MyHandler.SerBus.ResetDevice(this.WorkMeter.GetBaudrate()))
            {
              ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "No answer after reset");
              goto label_78;
            }
            else if (!DisableTimeUpdate && this.WorkMeter.MyLinker.AllIntervallCodes.Count > 0)
            {
              Parameter allParameter = (Parameter) this.WorkMeter.AllParameters[(object) "Itr_NextIntervalTime"];
              if (this.WorkMeter.MyCommunication.ReadParameterValue(allParameter, MemoryLocation.RAM))
              {
                if (ZR_Calendar.Cal_GetDateTime((uint) allParameter.ValueCPU) < this.WorkMeter.MeterTime)
                {
                  ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Time initialising error!");
                  goto label_78;
                }
              }
              else
                goto label_78;
            }
          }
          if (!HoldRead)
            this.ReadMeter = (Meter) null;
          else if (this.ReadMeter != null)
          {
            if (this.ReadMeter.Eprom.Length != this.WorkMeter.Eprom.Length)
              return this.MyHandler.AddErrorPointMessage("Different eprom sizees");
            for (int index = 0; index < this.WorkMeter.Eprom.Length; ++index)
              this.ReadMeter.Eprom[index] = this.WorkMeter.Eprom[index];
          }
          if (!DisableDbWrite)
          {
            Parameter allParameter = (Parameter) this.WorkMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterKey"];
            allParameter.ValueEprom = 0L;
            allParameter.UpdateByteList();
            allParameter.CopyToEprom(this.WorkMeter.Eprom);
            this.WorkMeter.MyIdent.SerialNr = ((Parameter) this.WorkMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_SerialNr"]).ValueEprom.ToString("X8");
            if (!this.MyHandler.MyDataBaseAccess.WriteMeterData(this.WorkMeter.Eprom, this.WorkMeter.MyLoggerStore.BlockStartAddress, this.WorkMeter.MyIdent, DateTime.Now))
              return false;
          }
          return true;
        }
      }
label_78:
      return false;
    }

    internal bool ProgramDeviceOrigional()
    {
      if (this.DbMeter == null || this.DbMeter.MeterDataState != Meter.MeterDataStates.EpromDataReloaded)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
        return false;
      }
      if (this.ConnectMeter())
      {
        if (this.DbMeter.MyIdent.lFirmwareVersion != this.ConnectedMeter.MyIdent.lFirmwareVersion)
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal Firmware");
        else if (!this.MyHandler.SerBus.SetEmergencyMode())
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Set emergency mode error.");
        else if (!this.MyHandler.SerBus.WriteMemory(MemoryLocation.EEPROM, 0, new ByteField(this.MyHandler.MyMeters.DbMeterReadEEProm)))
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Write Error");
        else if (!this.MyHandler.SerBus.ResetDevice())
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Reset device error.");
        }
        else
        {
          this.ConnectedMeter = (Meter) null;
          return true;
        }
      }
      this.ConnectedMeter = (Meter) null;
      this.ReadMeter = (Meter) null;
      return false;
    }

    private bool IfProgrammDevicePossible()
    {
      Meter meter;
      if (this.ReadMeter == null)
      {
        if (!this.ConnectMeter())
          return false;
        meter = this.ConnectedMeter;
      }
      else
      {
        if (!this.ReadMeter.MyCommunication.VerifyCheckSum(true))
        {
          if (!this.WorkMeter.SecoundWriteRunning)
            return false;
          ZR_ClassLibMessages.ClearErrors();
          if (!this.ReadMeter.MyCommunication.VerifyMeterID())
            return false;
        }
        meter = this.ReadMeter;
      }
      if (this.WorkMeter.MyIdent.lFirmwareVersion != meter.MyIdent.lFirmwareVersion)
      {
        ZR_MeterIdent CompatibleIdent = this.MyHandler.MyDataBaseAccess.IsFirmwareCompatible(this.WorkMeter.MyIdent, meter.MyIdent.lFirmwareVersion);
        if (CompatibleIdent == null)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal Firmware");
          return false;
        }
        this.SaveWorkMeterToUndoStack();
        this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
        if (!this.WorkMeter.ChangeBaseCloneToCompatibeleType(CompatibleIdent) || !this.WorkMeter.CompleteTheClone(this.WorkMeterUndoStack[0].AllParameters, true))
          return false;
      }
      if (this.WorkMeter.MyCommunication == null)
        this.WorkMeter.MyCommunication = new MeterCommunication(this.WorkMeter);
      this.WorkMeter.SecoundWriteRunning = true;
      return true;
    }

    private bool AreAllEpromChangesProgrammable()
    {
      if (this.ReadMeter.WriteEnable)
        return true;
      for (ushort index = 6; (int) index < this.WorkMeter.MyLoggerStore.BlockStartAddress; ++index)
      {
        if ((int) this.ReadMeter.Eprom[(int) index] != (int) this.WorkMeter.Eprom[(int) index] && !this.ReadMeter.EpromWriteEnable[(int) index])
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Protected data changed");
          return false;
        }
      }
      if (this.WorkMeter.MyIdent.lFirmwareVersion < 33554432L)
      {
        try
        {
          if (((Parameter) this.WorkMeter.AllParameters[(object) "DefaultFunction.MesurementCodeLocation"]).ValueEprom == ((Parameter) this.ReadMeter.AllParameters[(object) "DefaultFunction.MesurementCodeLocation"]).ValueEprom)
          {
            if (((Parameter) this.WorkMeter.AllParameters[(object) "DefaultFunction.RuntimeCodeLocation"]).ValueEprom == ((Parameter) this.ReadMeter.AllParameters[(object) "DefaultFunction.RuntimeCodeLocation"]).ValueEprom)
            {
              if (((Parameter) this.WorkMeter.AllParameters[(object) "DefaultFunction.RuntimeVarsLocation"]).ValueEprom == ((Parameter) this.ReadMeter.AllParameters[(object) "DefaultFunction.RuntimeVarsLocation"]).ValueEprom)
                goto label_12;
            }
          }
        }
        catch
        {
        }
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Runtime size changed");
        return false;
      }
label_12:
      return true;
    }

    private void SaveWorkMeterToUndoStack()
    {
      if (this.WorkMeter == null)
        return;
      for (int index = this.WorkMeterUndoStack.Length - 2; index >= 0; --index)
        this.WorkMeterUndoStack[index + 1] = this.WorkMeterUndoStack[index];
      this.WorkMeterUndoStack[0] = this.WorkMeter;
      this.WorkMeter = (Meter) null;
    }

    internal bool Undo()
    {
      if (this.WorkMeterUndoStack[0] == null)
        return false;
      this.WorkMeter = this.WorkMeterUndoStack[0];
      for (int index = 0; index < this.WorkMeterUndoStack.Length - 1; ++index)
        this.WorkMeterUndoStack[index] = this.WorkMeterUndoStack[index + 1];
      this.WorkMeterUndoStack[this.WorkMeterUndoStack.Length - 1] = (Meter) null;
      return true;
    }

    internal void ClearUndoStack() => this.WorkMeterUndoStack = new Meter[5];

    internal bool DeleteFunction(int x, int y)
    {
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
      if (this.WorkMeter.MyFunctionTable.DeleteFunction(x, y) && this.WorkMeter.CompleteTheClone(this.WorkMeterUndoStack[0].AllParameters, false))
      {
        this.WorkMeter.MeterTime = DateTime.Now;
        this.WorkMeter.InitialiseAllTimes();
        this.WorkMeter.GenerateEprom();
        return true;
      }
      this.Undo();
      return false;
    }

    public bool DeleteFunctions(ArrayList FunctionNumbersList)
    {
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
      foreach (ushort functionNumbers in FunctionNumbersList)
      {
        if (!this.WorkMeter.MyFunctionTable.DeleteFunction(functionNumbers))
          goto label_9;
      }
      if (this.WorkMeter.CompleteTheClone(this.WorkMeterUndoStack[0].AllParameters, false))
      {
        this.WorkMeter.MeterTime = DateTime.Now;
        this.WorkMeter.InitialiseAllTimes();
        this.WorkMeter.GenerateEprom();
        return true;
      }
label_9:
      this.Undo();
      return false;
    }

    internal bool RepareAndCompress()
    {
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
      if (this.WorkMeter.MyFunctionTable.RepareAndCompress() && this.WorkMeter.CompleteTheClone(this.WorkMeterUndoStack[0].AllParameters, false))
      {
        this.WorkMeter.MeterTime = DateTime.Now;
        this.WorkMeter.InitialiseAllTimes();
        this.WorkMeter.GenerateEprom();
        return true;
      }
      this.Undo();
      return false;
    }

    internal bool AddFunction(int x, int y, int FunctionNumber)
    {
      try
      {
        this.SaveWorkMeterToUndoStack();
        this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
        if (this.WorkMeter.MyFunctionTable.AddFunction(x, y, FunctionNumber))
        {
          if (this.WorkMeter.CompleteTheClone(this.WorkMeterUndoStack[0].AllParameters, false))
          {
            this.WorkMeter.MeterTime = DateTime.Now;
            this.WorkMeter.InitialiseAllTimes();
            this.WorkMeter.GenerateEprom();
            return true;
          }
        }
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Add function exception");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
      }
      this.Undo();
      return false;
    }

    public bool SetMBusVariables(MBusInfo TheMBusInfo)
    {
      this.SaveWorkMeterToUndoStack();
      this.WorkMeter = this.WorkMeterUndoStack[0].BaseClone();
      if (this.WorkMeter.CompleteTheCloneToCompiledFunctions(this.WorkMeterUndoStack[0].AllParameters, false) && this.WorkMeter.MyMBusList.SetMBusVariables(TheMBusInfo) && this.WorkMeter.CompleteTheCloneFromCreateFunctionTable())
      {
        this.WorkMeter.MeterTime = DateTime.Now;
        this.WorkMeter.InitialiseAllTimes();
        this.WorkMeter.GenerateEprom();
        return true;
      }
      this.Undo();
      return false;
    }

    internal enum RunningFunctions
    {
      NoFunction,
      WorkType,
      WorkDBMeter,
      WorkMeter,
    }

    private enum VersionDeviceInfo : long
    {
      C2 = 1,
      C3 = 2,
      C4 = 4,
      WR3 = 8,
      DevMask = 4095, // 0x0000000000000FFF
      RevMask = 61440, // 0x000000000000F000
    }
  }
}


--- AssemblyInfo.cs ---

ï»¿using System.Reflection;

[assembly: AssemblyTitle("GMM_Handler")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Zenner")]
[assembly: AssemblyProduct("")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyDelaySign(false)]
[assembly: AssemblyFileVersion("4.4.1.0")]
[assembly: AssemblyVersion("4.4.1.0")]


--- Backup.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.Backup
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class Backup : LinkBlock
  {
    internal Backup(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.Backup)
    {
    }
  }
}


--- BlockLinkDefines.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.BlockLinkDefines
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class BlockLinkDefines
  {
    internal LinkBlockTypes BlockType;
    internal bool AddressRangeCPU;
    internal int AddressRangePosition;
    internal string AddressRangeVariable;
  }
}


--- CodeBlock.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.CodeBlock
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class CodeBlock
  {
    private static CodeBlock.CodeSequenceTypeIdent[] CodeSequenceTypeIdentList = new CodeBlock.CodeSequenceTypeIdent[20]
    {
      new CodeBlock.CodeSequenceTypeIdent("RAM-Runtime", CodeBlock.CodeSequenceTypes.RAM_Runtime, FrameTypes.None),
      new CodeBlock.CodeSequenceTypeIdent("Interval-Runtime", CodeBlock.CodeSequenceTypes.Interval_Runtime, FrameTypes.None),
      new CodeBlock.CodeSequenceTypeIdent("Event-Runtime", CodeBlock.CodeSequenceTypes.Event_Runtime, FrameTypes.None),
      new CodeBlock.CodeSequenceTypeIdent("RESET-Runtime", CodeBlock.CodeSequenceTypes.RESET_Runtime, FrameTypes.None),
      new CodeBlock.CodeSequenceTypeIdent("EEPROM-Interval-Runtime", CodeBlock.CodeSequenceTypes.EEPROM_Interval_Runtime, FrameTypes.None),
      new CodeBlock.CodeSequenceTypeIdent("Mesurement-Runtime", CodeBlock.CodeSequenceTypes.Mesurement_Runtime, FrameTypes.None),
      new CodeBlock.CodeSequenceTypeIdent("MBus-Runtime", CodeBlock.CodeSequenceTypes.MBus_Runtime, FrameTypes.None),
      new CodeBlock.CodeSequenceTypeIdent("Displaycode", CodeBlock.CodeSequenceTypes.Displaycode, FrameTypes.None),
      new CodeBlock.CodeSequenceTypeIdent("Inline Runtimecode", CodeBlock.CodeSequenceTypes.InlineRuntimecode, FrameTypes.None),
      new CodeBlock.CodeSequenceTypeIdent("BCFrame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.BC),
      new CodeBlock.CodeSequenceTypeIdent("EnergyFrame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.Energy),
      new CodeBlock.CodeSequenceTypeIdent("FlowFrame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.Flow),
      new CodeBlock.CodeSequenceTypeIdent("Framecode", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.Standard),
      new CodeBlock.CodeSequenceTypeIdent("Input1Frame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.Input1),
      new CodeBlock.CodeSequenceTypeIdent("Input1ImpValFrame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.Input1ImpVal),
      new CodeBlock.CodeSequenceTypeIdent("Input2Frame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.Input2),
      new CodeBlock.CodeSequenceTypeIdent("Input2ImpValFrame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.Input2ImpVal),
      new CodeBlock.CodeSequenceTypeIdent("PowerFrame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.Power),
      new CodeBlock.CodeSequenceTypeIdent("VolumeFrame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.Volume),
      new CodeBlock.CodeSequenceTypeIdent("ImpulsValueFrame", CodeBlock.CodeSequenceTypes.Framecode, FrameTypes.ImpulsValue)
    };
    internal readonly CodeBlock.CodeSequenceTypes CodeSequenceType;
    internal readonly FrameTypes FrameType;
    internal readonly int FunctionNumber;
    internal string CodeSequenceName;
    internal int FunctionMenuIndex = -1;
    internal ArrayList CodeList = new ArrayList();
    internal string SpecialOptions;
    internal string CodeSequenceInfo;

    internal CodeBlock(
      CodeBlock.CodeSequenceTypes TheType,
      FrameTypes TheFrameType,
      int FunctionNumberIn)
    {
      this.CodeSequenceType = TheType;
      this.FrameType = TheFrameType;
      this.FunctionNumber = FunctionNumberIn;
    }

    internal CodeBlock Clone(Meter MyMeter, ArrayList FunctionParameterList)
    {
      return this.CloneFinish(!(this is IntervalAndLogger) ? new CodeBlock(this.CodeSequenceType, this.FrameType, this.FunctionNumber) : (CodeBlock) ((IntervalAndLogger) this).Clone(MyMeter, this.CodeSequenceType, this.FrameType, this.FunctionNumber, FunctionParameterList));
    }

    internal CodeBlock Clone()
    {
      if (this is IntervalAndLogger)
        throw new ArgumentOutOfRangeException("Illegal InterfalAndLogger block");
      return this.CloneFinish(new CodeBlock(this.CodeSequenceType, this.FrameType, this.FunctionNumber));
    }

    private CodeBlock CloneFinish(CodeBlock CodeBlockCopy)
    {
      CodeBlockCopy.CodeSequenceName = this.CodeSequenceName;
      CodeBlockCopy.FunctionMenuIndex = this.FunctionMenuIndex;
      if (this.CodeList != null)
      {
        CodeBlockCopy.CodeList = new ArrayList();
        foreach (CodeObject code in this.CodeList)
          CodeBlockCopy.CodeList.Add((object) code.Clone());
      }
      CodeBlockCopy.SpecialOptions = this.SpecialOptions;
      CodeBlockCopy.CodeSequenceInfo = this.CodeSequenceInfo;
      return CodeBlockCopy;
    }

    internal static bool GetCodeSequenceType(
      string SequenceTypeName,
      out CodeBlock.CodeSequenceTypes CodeSequenceType,
      out FrameTypes FrameType,
      out string SpecialOptions)
    {
      SpecialOptions = string.Empty;
      CodeSequenceType = CodeBlock.CodeSequenceTypes.Unknown;
      FrameType = FrameTypes.None;
      for (int index = 0; index < CodeBlock.CodeSequenceTypeIdentList.Length; ++index)
      {
        if (SequenceTypeName.StartsWith(CodeBlock.CodeSequenceTypeIdentList[index].DatabaseName))
        {
          CodeSequenceType = CodeBlock.CodeSequenceTypeIdentList[index].SequenceType;
          FrameType = CodeBlock.CodeSequenceTypeIdentList[index].FrameType;
          if (SequenceTypeName.Length > CodeBlock.CodeSequenceTypeIdentList[index].DatabaseName.Length)
            SpecialOptions = SequenceTypeName.Substring(CodeBlock.CodeSequenceTypeIdentList[index].DatabaseName.Length).Trim();
          return true;
        }
      }
      return false;
    }

    internal void GetObjectInfo(StringBuilder InfoString, Meter TheMeter)
    {
      if (!TheMeter.MyHandler.MyInfoFlags.ShowBlockTypes)
        return;
      if (this.CodeSequenceType == CodeBlock.CodeSequenceTypes.Displaycode)
        InfoString.Append(ZR_Constants.SystemNewLine);
      InfoString.Append("*** CodeBlock: " + this.CodeSequenceType.ToString());
      if (this.CodeSequenceName != null && this.CodeSequenceName.Length > 0)
        InfoString.Append(": '" + this.CodeSequenceName.PadRight(20) + "'");
      if (TheMeter.MyHandler.MyInfoFlags.ShowFunctionNumbers)
        InfoString.Append(" F:" + this.FunctionNumber.ToString("d4"));
      if (TheMeter.MyHandler.MyInfoFlags.ShowFunctionNames && this.FunctionNumber >= 0)
        InfoString.Append(" Fn:" + ((Function) TheMeter.MyHandler.MyLoadedFunctions.LoadedFunctionHeaders[(object) (ushort) this.FunctionNumber]).Name);
      InfoString.Append(ZR_Constants.SystemNewLine);
    }

    internal enum CodeSequenceTypes
    {
      RAM_Runtime,
      Interval_Runtime,
      Event_Runtime,
      RESET_Runtime,
      EEPROM_Interval_Runtime,
      Mesurement_Runtime,
      MBus_Runtime,
      Displaycode,
      Framecode,
      InlineRuntimecode,
      Brunch,
      LinkerGeneratedCodeBlock,
      Unknown,
    }

    internal struct CodeSequenceTypeIdent
    {
      internal string DatabaseName;
      internal CodeBlock.CodeSequenceTypes SequenceType;
      internal FrameTypes FrameType;

      internal CodeSequenceTypeIdent(
        string DatabaseNameIn,
        CodeBlock.CodeSequenceTypes SequenceTypeIn,
        FrameTypes FrameTypeIn)
      {
        this.DatabaseName = DatabaseNameIn;
        this.SequenceType = SequenceTypeIn;
        this.FrameType = FrameTypeIn;
      }
    }
  }
}


--- CodeObject.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.CodeObject
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class CodeObject : LinkObj
  {
    private static string[] CodeTypeNames = Enum.GetNames(typeof (CodeObject.CodeTypes));
    internal readonly int FunctionNumber;
    internal CodeObject.CodeTypes CodeType;
    internal string CodeValue;
    internal long CodeValueCompiled = -1;
    internal string OverrideMark;
    internal int CodeID;
    internal int LineNr;
    internal string LineInfo;

    internal CodeObject(int TheFunctionNumber) => this.FunctionNumber = TheFunctionNumber;

    internal override void GetObjectInfo(StringBuilder InfoString, Meter TheMeter)
    {
      int RAM_Address = -1;
      this.GetObjectInfo(InfoString, TheMeter, ref RAM_Address);
    }

    internal override void GetObjectInfo(
      StringBuilder InfoString,
      Meter TheMeter,
      ref int RAM_Address)
    {
      if (this.Address < 0)
        InfoString.Append("----");
      else
        InfoString.Append(this.Address.ToString("x04"));
      if (RAM_Address >= 0)
      {
        InfoString.Append("=" + RAM_Address.ToString("x04"));
        RAM_Address += this.Size;
      }
      InfoString.Append(TheMeter.GetEEPromWriteProtectionChar(this.LinkByteList, this.Address));
      if (this.Size < 1)
      {
        InfoString.Append(" -- -- -- --");
      }
      else
      {
        for (int index = 0; index < 4; ++index)
        {
          if (this.LinkByteList == null)
            InfoString.Append(" --");
          else if (index >= this.LinkByteList.Length)
            InfoString.Append(" ..");
          else
            InfoString.Append(" " + this.LinkByteList[index].ToString("x02"));
        }
      }
      InfoString.Append(" T:");
      InfoString.Append(this.CodeType.ToString().PadRight(15));
      InfoString.Append(" V:0x");
      switch (this.CodeType)
      {
        case CodeObject.CodeTypes.BYTE:
          InfoString.Append(this.CodeValueCompiled.ToString("x02"));
          InfoString.Append(" = ");
          InfoString.Append(this.CodeValueCompiled.ToString("d03"));
          break;
        case CodeObject.CodeTypes.ePTR:
          InfoString.Append(this.CodeValueCompiled.ToString("x04"));
          break;
        case CodeObject.CodeTypes.iPTR:
          InfoString.Append(this.CodeValueCompiled.ToString("x04"));
          break;
        case CodeObject.CodeTypes.LONG:
          InfoString.Append(this.CodeValueCompiled.ToString("x08"));
          InfoString.Append(" = ");
          InfoString.Append(this.CodeValueCompiled.ToString("d010"));
          break;
        case CodeObject.CodeTypes.WORD:
          InfoString.Append(this.CodeValueCompiled.ToString("x04"));
          InfoString.Append(" = ");
          InfoString.Append(this.CodeValueCompiled.ToString("d05"));
          break;
      }
      InfoString.Append(" ->'" + this.CodeValue + "'");
      if (this.LineInfo != null && this.LineInfo.Length > 0)
        InfoString.Append(" ### '" + this.LineInfo + "'");
      InfoString.Append(ZR_Constants.SystemNewLine);
    }

    internal CodeObject Clone()
    {
      CodeObject codeObject = new CodeObject(this.FunctionNumber);
      codeObject.Address = this.Address;
      codeObject.Size = this.Size;
      if (this.LinkByteList != null)
        codeObject.LinkByteList = (byte[]) this.LinkByteList.Clone();
      if (this.LinkByteComment != null)
        codeObject.LinkByteComment = (string[]) this.LinkByteComment.Clone();
      codeObject.CodeType = this.CodeType;
      codeObject.CodeValue = this.CodeValue;
      codeObject.CodeValueCompiled = this.CodeValueCompiled;
      if (this.OverrideMark != null)
        codeObject.OverrideMark = this.OverrideMark;
      codeObject.CodeID = this.CodeID;
      codeObject.LineNr = this.LineNr;
      codeObject.LineInfo = this.LineInfo;
      return codeObject;
    }

    internal static CodeObject GetPointerCodeObject(string Info, string TheValue)
    {
      CodeObject pointerCodeObject = new CodeObject(-1);
      pointerCodeObject.LineInfo = Info;
      pointerCodeObject.Size = 2;
      pointerCodeObject.CodeValue = TheValue;
      return pointerCodeObject;
    }

    internal static CodeObject GetCodeObject(string Info, ulong TheValue, int Size)
    {
      CodeObject codeObject = new CodeObject(-1);
      codeObject.LineInfo = Info;
      codeObject.Size = Size;
      codeObject.CodeValueCompiled = (long) TheValue;
      return codeObject;
    }

    internal static CodeObject GetCodeObject(string Info, ushort TheValue)
    {
      CodeObject codeObject = new CodeObject(-1);
      codeObject.LineInfo = Info;
      codeObject.Size = 2;
      codeObject.CodeValueCompiled = (long) TheValue;
      return codeObject;
    }

    internal static CodeObject GetCodeObject(string Info, byte TheValue)
    {
      CodeObject codeObject = new CodeObject(-1);
      codeObject.LineInfo = Info;
      codeObject.Size = 1;
      codeObject.CodeValueCompiled = (long) TheValue;
      return codeObject;
    }

    internal enum CodeTypes
    {
      BYTE,
      ePTR,
      iPTR,
      LONG,
      WORD,
    }
  }
}


--- Compiler.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.Compiler
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Globalization;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class Compiler
  {
    private Meter MyMeter;
    internal SortedList Includes;

    public Compiler(Meter MyMeterIn) => this.MyMeter = MyMeterIn;

    public Compiler Clone(Meter NewMeter)
    {
      return new Compiler(NewMeter)
      {
        Includes = this.Includes
      };
    }

    internal bool SetEpromParametersToDefault()
    {
      foreach (DictionaryEntry allParameter in this.MyMeter.AllParameters)
      {
        Parameter parameter = (Parameter) allParameter.Value;
        if (parameter.ExistOnEprom && !parameter.EpromValueIsInitialised)
          parameter.ValueEprom = parameter.DefaultValue;
      }
      return true;
    }

    internal bool CompileFunctions()
    {
      this.MyMeter.MyLinker.LinkPointerList = new ArrayList();
      for (int index = 0; index < this.MyMeter.MyFunctionTable.FunctionList.Count; ++index)
      {
        Function function = (Function) this.MyMeter.MyFunctionTable.FunctionList[index];
        foreach (CodeBlock runtimeCodeBlock in function.RuntimeCodeBlockList)
        {
          foreach (CodeObject code in runtimeCodeBlock.CodeList)
          {
            if (!this.CompileCodeObject(code))
              return false;
          }
        }
        foreach (MenuItem menu in function.MenuList)
        {
          foreach (CodeBlock displayCodeBlock in menu.DisplayCodeBlocks)
          {
            foreach (CodeObject code in displayCodeBlock.CodeList)
            {
              if (!this.CompileCodeObject(code))
                return false;
            }
          }
        }
      }
      if (this.MyMeter.MyLinker.LinkerCodeBlockList != null)
      {
        foreach (CodeBlock linkerCodeBlock in this.MyMeter.MyLinker.LinkerCodeBlockList)
        {
          foreach (CodeObject code in linkerCodeBlock.CodeList)
          {
            if (!this.CompileCodeObject(code))
              return false;
          }
        }
      }
      return true;
    }

    internal bool GenerateCodeFromCodeBlockList(ArrayList CodeBlockList)
    {
      foreach (CodeBlock codeBlock in CodeBlockList)
      {
        foreach (CodeObject code in codeBlock.CodeList)
          this.GenerateCodeFromCodeObject(code);
      }
      return true;
    }

    internal void GenerateCodeFromCodeObject(CodeObject TheCodeObject)
    {
      TheCodeObject.LinkByteList = new byte[TheCodeObject.Size];
      for (int index = 0; index < TheCodeObject.Size; ++index)
        TheCodeObject.LinkByteList[index] = (byte) (TheCodeObject.CodeValueCompiled >> index * 8);
    }

    internal void GenerateCodeFromCodeObjectAndCopyToEprom(CodeObject TheCodeObject)
    {
      this.GenerateCodeFromCodeObject(TheCodeObject);
      this.CopyToEprom(TheCodeObject);
    }

    internal bool PriCompileCodeObject(CodeObject TheCodeObject)
    {
      switch (TheCodeObject.CodeType)
      {
        case CodeObject.CodeTypes.BYTE:
          TheCodeObject.Size = 1;
          break;
        case CodeObject.CodeTypes.ePTR:
          TheCodeObject.Size = 2;
          break;
        case CodeObject.CodeTypes.iPTR:
          TheCodeObject.Size = 2;
          break;
        case CodeObject.CodeTypes.LONG:
          TheCodeObject.Size = 4;
          break;
        case CodeObject.CodeTypes.WORD:
          TheCodeObject.Size = 2;
          break;
        default:
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal code object");
          return false;
      }
      return true;
    }

    internal bool CompileCodeObject(CodeObject TheCodeObject)
    {
      switch (TheCodeObject.CodeType)
      {
        case CodeObject.CodeTypes.BYTE:
          if (!this.CompileIncludesAndConstants(TheCodeObject, 1))
            return false;
          break;
        case CodeObject.CodeTypes.ePTR:
          if (!this.AddPointer(TheCodeObject))
            return false;
          break;
        case CodeObject.CodeTypes.iPTR:
          if (!this.AddPointer(TheCodeObject))
            return false;
          break;
        case CodeObject.CodeTypes.LONG:
          if (!this.CompileIncludesAndConstants(TheCodeObject, 4))
            return false;
          break;
        case CodeObject.CodeTypes.WORD:
          if (!this.CompileIncludesAndConstants(TheCodeObject, 2))
            return false;
          break;
        default:
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal code object");
          return false;
      }
      return true;
    }

    internal bool AddPointer(CodeObject TheCodeObject)
    {
      this.MyMeter.MyLinker.LinkPointerList.Add((object) new LinkPointer()
      {
        LinkPointerType = (TheCodeObject.CodeType != CodeObject.CodeTypes.ePTR ? LinkPointer.LinkPointerTypes.iPTR : LinkPointer.LinkPointerTypes.ePTR),
        PointerObject = TheCodeObject
      });
      return true;
    }

    internal bool CompileIncludesAndConstants(CodeObject TheCodeObject, int ByteSize)
    {
      string[] strArray = TheCodeObject.CodeValue.Split(' ');
      TheCodeObject.CodeValueCompiled = 0L;
      int index1 = 0;
      try
      {
        for (index1 = 0; index1 < strArray.Length; ++index1)
        {
          if (strArray[index1].Length >= 1)
          {
            if (strArray[index1].StartsWith("0x"))
              TheCodeObject.CodeValueCompiled = (long) ((uint) TheCodeObject.CodeValueCompiled | uint.Parse(strArray[index1].Substring(2), NumberStyles.HexNumber));
            else if (char.IsDigit(strArray[index1][0]))
              TheCodeObject.CodeValueCompiled = (long) ((uint) TheCodeObject.CodeValueCompiled | uint.Parse(strArray[index1]));
            else if (this.Includes.ContainsKey((object) strArray[index1]))
              TheCodeObject.CodeValueCompiled = (long) ((uint) TheCodeObject.CodeValueCompiled | (uint) (int) this.Includes[(object) strArray[index1]]);
          }
        }
        TheCodeObject.Size = ByteSize;
        TheCodeObject.LinkByteList = new byte[ByteSize];
        for (int index2 = 0; index2 < ByteSize; ++index2)
          TheCodeObject.LinkByteList[index2] = (byte) (TheCodeObject.CodeValueCompiled >> 8 * index2);
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Unkonwn compiler constante: " + ZR_Constants.SystemNewLine + strArray[index1] + ZR_Constants.SystemNewLine + ex.ToString());
        return false;
      }
      return true;
    }

    internal bool CompileStringToByte(string CodeString, out byte ByteValue)
    {
      ByteValue = (byte) 0;
      string[] strArray = CodeString.Split(' ');
      try
      {
        for (int index = 0; index < strArray.Length; ++index)
        {
          if (strArray[index].Length >= 1)
          {
            if (strArray[index].StartsWith("0x"))
              ByteValue += byte.Parse(strArray[index].Substring(2), NumberStyles.HexNumber);
            else if (char.IsDigit(strArray[index][0]))
              ByteValue += byte.Parse(strArray[index]);
            else
              ByteValue += (byte) (int) this.Includes[(object) strArray[index]];
          }
        }
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Unkonwn compiler constante: " + ZR_Constants.SystemNewLine + ex.ToString());
        return false;
      }
      return true;
    }

    internal bool GenerateMenuObjects()
    {
      this.MyMeter.MyDisplayCode.GenerateMenuItemLists();
      for (int index1 = 0; index1 < this.MyMeter.MyDisplayCode.AllMenuItems.Count; ++index1)
      {
        MenuItem allMenuItem = (MenuItem) this.MyMeter.MyDisplayCode.AllMenuItems[index1];
        MenuItemBrunch menuItemBrunch = new MenuItemBrunch(allMenuItem, this.MyMeter.MyDisplayCode.AllMenuItems);
        CodeObject codeObject = new CodeObject((int) allMenuItem.FunctionNumber);
        codeObject.Size = 1;
        codeObject.CodeType = CodeObject.CodeTypes.BYTE;
        codeObject.CodeValue = string.Empty;
        menuItemBrunch.CodeList.Add((object) codeObject);
        string EventPointer;
        if (menuItemBrunch.ClickAvailable)
        {
          if (!this.GetEventPointer(allMenuItem, allMenuItem.ClickEvent, out EventPointer))
            return false;
          if (EventPointer.Length > 0)
          {
            if (EventPointer != ".")
            {
              this.AddBrunchPointer(menuItemBrunch.CodeList, (int) allMenuItem.FunctionNumber, EventPointer);
              codeObject.CodeValue += "DII_BY_CLICK_JUMP ";
            }
          }
          else
            codeObject.CodeValue += "DII_BY_CLICK_FOLLOW ";
        }
        if (menuItemBrunch.PressAvailable)
        {
          if (!this.GetEventPointer(allMenuItem, allMenuItem.PressEvent, out EventPointer))
            return false;
          if (EventPointer.Length > 0)
          {
            if (EventPointer != ".")
            {
              this.AddBrunchPointer(menuItemBrunch.CodeList, (int) allMenuItem.FunctionNumber, EventPointer);
              codeObject.CodeValue += "DII_BY_PRESS_JUMP ";
            }
          }
          else
            codeObject.CodeValue += "DII_BY_PRESS_FOLLOW ";
        }
        if (menuItemBrunch.HoldAvailable)
        {
          if (!this.GetEventPointer(allMenuItem, allMenuItem.HoldEvent, out EventPointer))
            return false;
          if (EventPointer.Length > 0)
          {
            if (EventPointer != ".")
            {
              this.AddBrunchPointer(menuItemBrunch.CodeList, (int) allMenuItem.FunctionNumber, EventPointer);
              codeObject.CodeValue += "DII_BY_HOLD_JUMP ";
            }
          }
          else
            codeObject.CodeValue += "DII_BY_HOLD_FOLLOW ";
        }
        if (menuItemBrunch.TimeoutAvailable)
        {
          if (!this.GetEventPointer(allMenuItem, allMenuItem.TimeoutEvent, out EventPointer))
            return false;
          if (EventPointer.Length > 0)
          {
            if (EventPointer != ".")
            {
              this.AddBrunchPointer(menuItemBrunch.CodeList, (int) allMenuItem.FunctionNumber, EventPointer);
              codeObject.CodeValue += "DII_BY_TIMEOUT_JUMP";
            }
          }
          else
            codeObject.CodeValue += "DII_BY_TIMEOUT_FOLLOW";
        }
        if (codeObject.CodeValue != string.Empty)
          allMenuItem.DisplayCodeBlocks.Add((object) menuItemBrunch);
        for (int index2 = 0; index2 < allMenuItem.DisplayCodeBlocks.Count; ++index2)
        {
          foreach (CodeObject code in ((CodeBlock) allMenuItem.DisplayCodeBlocks[index2]).CodeList)
          {
            if (code.CodeType == CodeObject.CodeTypes.ePTR)
            {
              Function destinationFunction = this.GetRelativeDestinationFunction(allMenuItem, code.CodeValue);
              if (destinationFunction != null)
              {
                MenuItem menu = (MenuItem) destinationFunction.MenuList[0];
                code.LineInfo = code.LineInfo == null ? code.CodeValue : code.CodeValue + "  " + code.LineInfo;
                code.CodeValue = destinationFunction.Name + "." + menu.MenuName;
              }
            }
          }
        }
      }
      return true;
    }

    private void AddBrunchPointer(ArrayList CodeList, int FunctionNumber, string EventPointer)
    {
      CodeObject codeObject = new CodeObject(FunctionNumber);
      codeObject.Size = 2;
      codeObject.CodeType = CodeObject.CodeTypes.ePTR;
      codeObject.CodeValue = EventPointer;
      CodeList.Add((object) codeObject);
    }

    internal bool GetEventPointer(MenuItem TheMenuItem, string Event, out string EventPointer)
    {
      MenuItem menuItem = (MenuItem) null;
      EventPointer = string.Empty;
      try
      {
        if (Event.Length == 0)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Missing event data");
          return false;
        }
        Function function = this.GetRelativeDestinationFunction(TheMenuItem, Event);
        if (function != null)
        {
          if (function.MenuList.Count == 0)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Empty menu list on: " + function.Name);
            return false;
          }
          menuItem = (MenuItem) function.MenuList[0];
        }
        else
        {
          function = TheMenuItem.MyFunction;
          foreach (MenuItem menu in TheMenuItem.MyFunction.MenuList)
          {
            if (menu.MenuName == Event)
              menuItem = menu;
          }
          if (TheMenuItem == null)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Missing menu item");
            return false;
          }
        }
        if (TheMenuItem == menuItem)
        {
          EventPointer = ".";
          return true;
        }
        if (this.MyMeter.MyDisplayCode.AllMenuItems.IndexOf((object) menuItem) == this.MyMeter.MyDisplayCode.AllMenuItems.IndexOf((object) TheMenuItem) + 1 && TheMenuItem.MyFunction.MenuList.Count == 1 && menuItem.MyFunction.ColumnNumber == TheMenuItem.MyFunction.ColumnNumber && TheMenuItem.MyFunction.RowNumber + 1 < 40)
          return true;
        EventPointer = function.Name + "." + menuItem.MenuName;
        return true;
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Missing event data -> " + ex.ToString());
        return false;
      }
    }

    private Function GetRelativeDestinationFunction(MenuItem TheMenuItem, string Event)
    {
      Function destinationFunction = (Function) null;
      switch (Event)
      {
        case "MAIN":
          destinationFunction = (Function) this.MyMeter.MyFunctionTable.FunctionList[0];
          break;
        case "RIGHT":
          int index = TheMenuItem.MyFunction.ColumnNumber + 1;
          if (index < this.MyMeter.MyFunctionTable.FirstFunctionInColumn.Count - 1)
          {
            do
            {
              destinationFunction = (Function) this.MyMeter.MyFunctionTable.FirstFunctionInColumn[index];
              ++index;
            }
            while (destinationFunction == null && index < this.MyMeter.MyFunctionTable.FirstFunctionInColumn.Count - 1);
            if (destinationFunction == null)
            {
              destinationFunction = (Function) this.MyMeter.MyFunctionTable.FunctionList[0];
              break;
            }
            break;
          }
          destinationFunction = (Function) this.MyMeter.MyFunctionTable.FunctionList[0];
          break;
        case "NEXT":
          int num = this.MyMeter.MyFunctionTable.FunctionList.IndexOf((object) TheMenuItem.MyFunction);
          if (num + 1 < this.MyMeter.MyFunctionTable.FunctionList.Count)
          {
            destinationFunction = (Function) this.MyMeter.MyFunctionTable.FunctionList[num + 1];
            if (destinationFunction.ColumnNumber != TheMenuItem.MyFunction.ColumnNumber)
            {
              destinationFunction = (Function) this.MyMeter.MyFunctionTable.FirstFunctionInColumn[TheMenuItem.MyFunction.ColumnNumber];
              break;
            }
            break;
          }
          destinationFunction = (Function) this.MyMeter.MyFunctionTable.FirstFunctionInColumn[TheMenuItem.MyFunction.ColumnNumber];
          break;
        case "FIRST":
          destinationFunction = (Function) this.MyMeter.MyFunctionTable.FirstFunctionInColumn[TheMenuItem.MyFunction.ColumnNumber];
          break;
      }
      return destinationFunction;
    }

    internal bool CopyToEprom()
    {
      int blockStartAddress = this.MyMeter.MyEpromHeader.BlockStartAddress;
      foreach (LinkBlock linkBlock in this.MyMeter.MyLinker.LinkBlockList)
      {
        try
        {
          linkBlock.BlockStartAddress = blockStartAddress;
          foreach (object linkObj1 in linkBlock.LinkObjList)
          {
            if (linkObj1 is Parameter)
            {
              LinkObj linkObj2 = (LinkObj) linkObj1;
              for (int index = 0; index < linkObj2.LinkByteList.Length; ++index)
                this.MyMeter.Eprom[blockStartAddress++] = linkObj2.LinkByteList[index];
            }
            else
            {
              foreach (LinkObj code in ((CodeBlock) linkObj1).CodeList)
              {
                for (int index = 0; index < code.LinkByteList.Length; ++index)
                  this.MyMeter.Eprom[blockStartAddress++] = code.LinkByteList[index];
              }
            }
          }
        }
        catch
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "CopyToEEProm: " + blockStartAddress.ToString("x"));
          return false;
        }
      }
      return true;
    }

    internal void CopyToEprom(CodeObject TheCodeObject)
    {
      int address = TheCodeObject.Address;
      for (int index = 0; index < TheCodeObject.LinkByteList.Length; ++index)
        this.MyMeter.Eprom[address++] = TheCodeObject.LinkByteList[index];
    }
  }
}


--- DataBaseAccess.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.DataBaseAccess
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using DeviceCollector;
using GmmDbLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using ZR_ClassLibrary;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace GMM_Handler
{
  public class DataBaseAccess
  {
    internal ZR_HandlerFunctions MyHandler;
    internal MeterDBAccess MyDB;
    private DbBasis MyTypedDB;
    private IDbConnection MyDbConnection;
    private int ret;
    private string ErrorMsg;
    private StringBuilder SQL = new StringBuilder(2000);
    private SortedList<int, DataBaseAccess.LoggerEntryData> LoggerEntriesList;
    private SortedList<string, DataBaseAccess.PValueDescription> PValDescriptionCache;
    private string ManufacturerString = string.Empty;
    private string MeterGenerationString = string.Empty;
    private Meter LastMeter = (Meter) null;
    private Schema.DatabaseIdentificationDataTable DatabaseIdentTable;
    private Schema.DatabaseIdentificationDataTable AutoWriteIdentTable;
    internal Schema.MeterInfoDataTable MeterInfoTable;
    internal Schema.MeterInfoPropertiesDataTable MeterInfoPropertiesTable;
    private SortedList<int, SortedList<DataBaseAccess.MeterInfoProperties, string>> AllMeterInfoProperties;
    internal Schema.MeterDataTable MeterTable;
    internal Schema.MTypeZelsiusDataTable MTypeZelsiusTable;

    public DataBaseAccess(ZR_HandlerFunctions MyHandlerIn)
    {
      this.MyHandler = MyHandlerIn;
      this.MyDB = Datenbankverbindung.MainDBAccess;
      this.MyTypedDB = DbBasis.PrimaryDB;
      this.MyDbConnection = this.MyTypedDB.GetDbConnection();
    }

    private int getDataTableForSQLCommand(string SQLCommand, DataTable table)
    {
      this.MyTypedDB.ZRDataAdapter(SQLCommand, this.MyDbConnection).Fill(table);
      return table.Rows.Count;
    }

    internal bool GetHardwareInfo(ZR_MeterIdent theIdent)
    {
      int num1 = theIdent.MeterInfoBaseID;
      if (num1 == 0)
        num1 = theIdent.MeterInfoID;
      if (num1 == 0)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Illegal MeterInfoID");
        return false;
      }
      this.SQL.Length = 0;
      this.SQL.Append("SELECT ");
      this.SQL.Append(" MeterInfo.MeterInfoID");
      this.SQL.Append(",MeterInfo.HardwareTypeID");
      this.SQL.Append(",MeterInfo.MeterTypeID");
      this.SQL.Append(",MeterInfo.DefaultFunctionNr");
      this.SQL.Append(",HardwareType.MapID");
      this.SQL.Append(",HardwareType.LinkerTableId");
      this.SQL.Append(",HardwareType.HardwareName");
      this.SQL.Append(",HardwareType.Hardwareversion");
      this.SQL.Append(",HardwareType.Firmwareversion");
      this.SQL.Append(",HardwareType.HardwareResource");
      this.SQL.Append(",HardwareType.extEEPSize");
      this.SQL.Append(",HardwareType.HardwareOptions");
      this.SQL.Append(" FROM MeterInfo, HardwareType");
      this.SQL.Append(" WHERE MeterInfoID = " + num1.ToString());
      this.SQL.Append(" AND MeterInfo.HardwareTypeID = HardwareType.HardwareTypeID");
      try
      {
        DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable table1 = new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable();
        if (this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table1) == 1)
        {
          if (theIdent.lFirmwareVersion > 0L && theIdent.lFirmwareVersion != (long) table1[0].FirmwareVersion)
          {
            if (!table1[0].IsHardwareOptionsNull())
            {
              string[] strArray1 = table1[0].HardwareOptions.Split(';');
              Schema.HardwareTypeDataTable table2 = new Schema.HardwareTypeDataTable();
              do
              {
                int num2 = -1;
                for (int index = 0; index < strArray1.Length; ++index)
                {
                  string[] strArray2 = strArray1[index].Split('=');
                  if (strArray2.Length == 2 && !(strArray2[0] != "CompatibleHwTypeId"))
                  {
                    num2 = int.Parse(strArray2[1]);
                    break;
                  }
                }
                if (num2 >= 0)
                {
                  table2.Clear();
                  if (this.getDataTableForSQLCommand("SELECT * FROM HardwareType WHERE HardwareTypeId = " + num2.ToString(), (DataTable) table2) == 1)
                  {
                    if (theIdent.lFirmwareVersion != (long) table2[0].FirmwareVersion)
                    {
                      if (!table2[0].IsHardwareOptionsNull())
                        strArray1 = table2[0].HardwareOptions.Split(';');
                      else
                        goto label_26;
                    }
                    else
                      strArray1 = (string[]) null;
                  }
                  else
                    goto label_26;
                }
                else
                  goto label_26;
              }
              while (strArray1 != null);
              theIdent.MapId = table2[0].MapID;
              theIdent.LinkerTableID = table2[0].LinkerTableID;
              theIdent.HardwareTypeID = table2[0].HardwareTypeID;
              theIdent.HardwareName = table2[0].HardwareName;
              theIdent.HardwareVersion = table2[0].HardwareVersion.ToString();
              theIdent.HardwareResource = table2[0].HardwareResource;
              theIdent.extEEPSize = table2[0].extEEPSize;
            }
            else
              goto label_26;
          }
          else
          {
            theIdent.lFirmwareVersion = (long) table1[0].FirmwareVersion;
            theIdent.MapId = table1[0].MapID;
            theIdent.LinkerTableID = table1[0].LinkerTableID;
            theIdent.HardwareTypeID = table1[0].HardwareTypeID;
            theIdent.HardwareName = table1[0].HardwareName;
            theIdent.HardwareVersion = table1[0].HardwareVersion.ToString();
            theIdent.HardwareResource = table1[0].HardwareResource;
            theIdent.extEEPSize = table1[0].extEEPSize;
          }
          theIdent.MeterTypeID = table1[0].MeterTypeID;
          theIdent.DefaultFunctionNr = ushort.Parse(table1[0].DefaultFunctionNr);
          theIdent.sFirmwareVersion = ParameterService.GetVersionString(theIdent.lFirmwareVersion, 7);
        }
        else
          goto label_26;
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Error on table HardwareType");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        return false;
      }
      return true;
label_26:
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Device hardware data not found!");
      return false;
    }

    internal ZR_MeterIdent IsFirmwareCompatible(ZR_MeterIdent DataIdent, long DeviceFirmware)
    {
      Schema.HardwareTypeDataTable table = new Schema.HardwareTypeDataTable();
      if (this.getDataTableForSQLCommand("SELECT * FROM HardwareType WHERE HardwareTypeId = " + DataIdent.HardwareTypeID.ToString(), (DataTable) table) != 1)
        return (ZR_MeterIdent) null;
      while (true)
      {
        if (!table[0].IsHardwareOptionsNull())
        {
          string[] strArray1 = table[0].HardwareOptions.Split(';');
          int num = -1;
          for (int index = 0; index < strArray1.Length; ++index)
          {
            string[] strArray2 = strArray1[index].Split('=');
            if (strArray2.Length == 2 && !(strArray2[0] != "CompatibleHwTypeId"))
            {
              num = int.Parse(strArray2[1]);
              break;
            }
          }
          if (num >= 0)
          {
            table.Clear();
            if (this.getDataTableForSQLCommand("SELECT * FROM HardwareType WHERE HardwareTypeId = " + num.ToString(), (DataTable) table) == 1)
            {
              if (DeviceFirmware != (long) table[0].FirmwareVersion)
              {
                if (!table[0].IsHardwareOptionsNull())
                  table[0].HardwareOptions.Split(';');
                else
                  goto label_14;
              }
              else
                goto label_16;
            }
            else
              goto label_11;
          }
          else
            goto label_9;
        }
        else
          break;
      }
      return (ZR_MeterIdent) null;
label_9:
      return (ZR_MeterIdent) null;
label_11:
      return (ZR_MeterIdent) null;
label_14:
      return (ZR_MeterIdent) null;
label_16:
      ZR_MeterIdent zrMeterIdent = DataIdent.Clone();
      zrMeterIdent.lFirmwareVersion = (long) table[0].FirmwareVersion;
      zrMeterIdent.MapId = table[0].MapID;
      zrMeterIdent.LinkerTableID = table[0].LinkerTableID;
      zrMeterIdent.HardwareTypeID = table[0].HardwareTypeID;
      zrMeterIdent.HardwareName = table[0].HardwareName;
      zrMeterIdent.HardwareVersion = table[0].HardwareVersion.ToString();
      zrMeterIdent.HardwareResource = table[0].HardwareResource;
      zrMeterIdent.extEEPSize = table[0].extEEPSize;
      return zrMeterIdent;
    }

    internal bool GetDeviceKeys(
      int DeviceMeterID,
      out long Key,
      out MeterDBAccess.ValueTypes ValueType)
    {
      Key = 0L;
      ValueType = MeterDBAccess.ValueTypes.GovernmentRandomNr;
      Schema.MeterDataDataTable table = new Schema.MeterDataDataTable();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM MeterData");
      this.SQL.Append(" WHERE MeterID = " + DeviceMeterID.ToString());
      this.SQL.Append(" AND ( PValueId = " + 96.ToString());
      this.SQL.Append(" OR PValueId = " + 217.ToString());
      this.SQL.Append(") ORDER BY TimePoint ASC");
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table);
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Error on table MeterData");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        return false;
      }
      bool deviceKeys = false;
      if (table.Rows.Count > 0)
      {
        try
        {
          for (int index = 0; index < table.Rows.Count; ++index)
          {
            if (table[index].PValueID == 96)
            {
              Key = long.Parse(table[index].PValue);
              ValueType = MeterDBAccess.ValueTypes.GovernmentRandomNr;
              deviceKeys = true;
            }
            else
            {
              Key = long.Parse(table[index].PValue);
              ValueType = MeterDBAccess.ValueTypes.MeterKey;
              deviceKeys = true;
            }
          }
        }
        catch (Exception ex)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Illegal eprom data");
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
          return false;
        }
      }
      return deviceKeys;
    }

    internal bool SetDeviceKey(int DeviceMeterID, long Key, MeterDBAccess.ValueTypes ValueType)
    {
      Schema.MeterDataDataTable MyDataTable = new Schema.MeterDataDataTable();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM MeterData");
      this.SQL.Append(" WHERE MeterID = " + DeviceMeterID.ToString());
      this.SQL.Append(" AND ( PValueId = " + 96.ToString());
      this.SQL.Append(" OR PValueId = " + 217.ToString());
      this.SQL.Append(")");
      ZRDataAdapter zrDataAdapter = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
      try
      {
        zrDataAdapter.Fill((DataTable) MyDataTable);
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Error on table MeterData");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        return false;
      }
      MyDataTable.Clear();
      Schema.MeterDataRow row = (Schema.MeterDataRow) MyDataTable.NewRow();
      row.MeterID = DeviceMeterID;
      row.PValueID = (int) ValueType;
      row.PValue = Key.ToString();
      row.TimePoint = DateTime.Now;
      MyDataTable.Rows.Add((DataRow) row);
      try
      {
        zrDataAdapter.Update((DataTable) MyDataTable);
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Write key error");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        return false;
      }
      return true;
    }

    internal bool GetTypeBaseData(
      int MeterInfoID,
      out ZR_MeterIdent TheIdent,
      out byte[] EpromData)
    {
      TheIdent = (ZR_MeterIdent) null;
      EpromData = (byte[]) null;
      DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable table = new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT");
      this.SQL.Append(" MeterInfo.HardwareTypeID");
      this.SQL.Append(",MeterInfo.MeterTypeID");
      this.SQL.Append(",MeterInfo.MeterHardwareID");
      this.SQL.Append(",MeterInfo.PPSArtikelNr");
      this.SQL.Append(",MeterInfo.DefaultFunctionNr");
      this.SQL.Append(",MeterInfo.Description");
      this.SQL.Append(",HardwareType.HardwareVersion");
      this.SQL.Append(",HardwareType.FirmwareVersion");
      this.SQL.Append(",HardwareType.HardwareName");
      this.SQL.Append(",HardwareType.MapID");
      this.SQL.Append(",HardwareType.LinkerTableID");
      this.SQL.Append(",HardwareType.extEEPSize");
      this.SQL.Append(",MTypeZelsius.EEPData");
      this.SQL.Append(",MTypeZelsius.TypeOverrideString");
      this.SQL.Append(" FROM MeterInfo, HardwareType, MeterType, MTypeZelsius");
      this.SQL.Append(" WHERE MeterInfo.MeterInfoID = " + MeterInfoID.ToString());
      this.SQL.Append(" AND   MeterInfo.HardwareTypeID = HardwareType.HardwareTypeID");
      this.SQL.Append(" AND   MeterInfo.MeterTypeID = MeterType.MeterTypeID");
      this.SQL.Append(" AND   MeterInfo.MeterTypeID = MTypeZelsius.MeterTypeID");
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table);
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Error on MeterInfo");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        return false;
      }
      if (table.Rows.Count != 1)
      {
        this.AddErrorText("Fehler : Daten nicht gefunden");
        return false;
      }
      TheIdent = new ZR_MeterIdent(MeterBasis.Type);
      TheIdent.MeterInfoID = MeterInfoID;
      DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow zelsiusJoinedRow = table[0];
      try
      {
        TheIdent.PPSArtikelNr = zelsiusJoinedRow.PPSArtikelNr;
        TheIdent.MeterInfoDescription = zelsiusJoinedRow.Description;
        TheIdent.HardwareTypeID = zelsiusJoinedRow.HardwareTypeID;
        TheIdent.MeterTypeID = zelsiusJoinedRow.MeterTypeID;
        TheIdent.MeterHardwareID = zelsiusJoinedRow.MeterHardwareID;
        int DefaultFunctionNr = int.Parse(zelsiusJoinedRow.DefaultFunctionNr);
        if (!this.GetBaseTypeId(TheIdent, DefaultFunctionNr))
          return false;
        TheIdent.HardwareVersion = zelsiusJoinedRow.HardwareVersion.ToString();
        TheIdent.lFirmwareVersion = (long) zelsiusJoinedRow.FirmwareVersion;
        TheIdent.HardwareName = zelsiusJoinedRow.HardwareName;
        TheIdent.MapId = zelsiusJoinedRow.MapID;
        TheIdent.LinkerTableID = zelsiusJoinedRow.LinkerTableID;
        TheIdent.extEEPSize = zelsiusJoinedRow.extEEPSize;
        byte[] eePdata = zelsiusJoinedRow.EEPdata;
        TheIdent.TypeOverrideString = zelsiusJoinedRow.TypeOverrideString;
        int length = TheIdent.extEEPSize;
        if (eePdata.Length < length)
          length = eePdata.Length;
        if (eePdata.Length > TheIdent.extEEPSize)
        {
          for (int extEepSize = TheIdent.extEEPSize; extEepSize < eePdata.Length; ++extEepSize)
          {
            if (eePdata[extEepSize] > (byte) 0)
            {
              if (this.MyHandler.MyDataBaseAccess.IsMeterInfoProperty(TheIdent.MeterInfoID, DataBaseAccess.MeterInfoProperties.ExtendedTypePromSize, (string) null))
              {
                ZR_ClassLibMessages.AddWarning("EEProm data size out of database > eeprom space");
                length = eePdata.Length;
                break;
              }
              ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Database data set size > eeprom space");
              return false;
            }
          }
        }
        EpromData = new byte[length];
        for (int index = 0; index < length; ++index)
          EpromData[index] = eePdata[index];
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Error on MeterInfo");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        return false;
      }
      return true;
    }

    internal bool GetLastMeterInfoID(ZR_MeterIdent TheIdent)
    {
      Schema.MeterDataTable table = new Schema.MeterDataTable();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM Meter");
      this.SQL.Append(" WHERE MeterID = " + TheIdent.MeterID.ToString());
      try
      {
        TheIdent.MeterInfoID = this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table) != 1 ? TheIdent.MeterInfoBaseID : table[0].MeterInfoID;
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Error on read meter ident data.");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        return false;
      }
      return true;
    }

    private bool GetBaseTypeId(ZR_MeterIdent TheIdent, int DefaultFunctionNr)
    {
      if (TheIdent.PPSArtikelNr == "BASETYPE")
      {
        TheIdent.MeterInfoBaseID = TheIdent.MeterInfoID;
      }
      else
      {
        Schema.MeterInfoDataTable table = new Schema.MeterInfoDataTable();
        this.SQL.Length = 0;
        this.SQL.Append("SELECT * FROM MeterInfo");
        this.SQL.Append(" WHERE MeterTypeID = " + TheIdent.MeterTypeID.ToString());
        this.SQL.Append(" AND   HardwareTypeID = " + TheIdent.HardwareTypeID.ToString());
        this.SQL.Append(" AND   MeterHardwareID = " + TheIdent.MeterHardwareID.ToString());
        this.SQL.Append(" AND   DefaultFunctionNr = '" + DefaultFunctionNr.ToString() + "'");
        this.SQL.Append(" AND   PPSArtikelNr = 'BASETYPE'");
        try
        {
          if (this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table) != 1)
          {
            if (table.Rows.Count == 0)
            {
              TheIdent.MeterInfoBaseID = TheIdent.MeterInfoID;
              return true;
            }
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "More then one Basetype");
            return false;
          }
          TheIdent.MeterInfoBaseID = table[0].MeterInfoID;
        }
        catch (Exception ex)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "MeterInfo access error");
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
          return false;
        }
      }
      return true;
    }

    internal bool GetMeterEpromData(
      ZR_MeterIdent TheMeterIdent,
      ref DateTime StorageTime,
      out byte[] EpromData)
    {
      EpromData = (byte[]) null;
      Schema.MeterDataDataTable meterDataDataTable = new Schema.MeterDataDataTable();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM MeterData");
      this.SQL.Append(" WHERE MeterID = " + TheMeterIdent.MeterID.ToString());
      this.SQL.Append(" AND PValueId = " + 1.ToString());
      if (StorageTime != DateTime.MaxValue)
        this.SQL.Append(" AND TimePoint = @TimePoint");
      this.SQL.Append(" ORDER BY TimePoint DESC");
      try
      {
        ZRDataAdapter zrDataAdapter = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
        DbParameter parameter = zrDataAdapter.SelectCommand.CreateParameter();
        parameter.DbType = DbType.DateTime;
        parameter.ParameterName = "@TimePoint";
        parameter.Value = (object) StorageTime;
        zrDataAdapter.SelectCommand.Parameters.Add((object) parameter);
        zrDataAdapter.Fill((DataTable) meterDataDataTable);
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf MeterData");
        this.AddErrorText(ex.ToString());
        return false;
      }
      if (meterDataDataTable.Rows.Count < 1)
      {
        this.AddErrorText("Meter data not found");
        return false;
      }
      if (StorageTime == DateTime.MaxValue)
        StorageTime = meterDataDataTable[0].TimePoint;
      try
      {
        EpromData = meterDataDataTable[0].PValueBinary;
        if (!meterDataDataTable[0].IsPValueNull())
        {
          try
          {
            long num = long.Parse(meterDataDataTable[0].PValue);
            if (num > 0L)
              TheMeterIdent.lFirmwareVersion = num;
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        this.AddErrorText("Illegal eprom data at database!");
        this.AddErrorText(ex.ToString());
        return false;
      }
      return true;
    }

    internal bool GetOverrides(int MeterInfoID, out ArrayList Overrides)
    {
      Overrides = (ArrayList) null;
      Schema.TypeOverwriteParametersDataTable table = new Schema.TypeOverwriteParametersDataTable();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM TypeOverwriteParameters");
      this.SQL.Append(" WHERE MeterInfoID = " + MeterInfoID.ToString());
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table);
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf  TypeOverwriteParameters");
        this.AddErrorText(ex.ToString());
        return false;
      }
      Overrides = new ArrayList();
      try
      {
        IEnumerator enumerator = table.Rows.GetEnumerator();
        try
        {
          while (true)
          {
            if (enumerator.MoveNext())
            {
              Schema.TypeOverwriteParametersRow current = (Schema.TypeOverwriteParametersRow) enumerator.Current;
              OverrideID poid = (OverrideID) current.POID;
              string str1 = !current.IsParameterValueNull() ? current.ParameterValue : string.Empty;
              switch (poid)
              {
                case OverrideID.EnergyResolution:
                  string energyUnitString = MeterMath.GetTrueEnergyUnitString(str1);
                  if (!(str1 == ""))
                  {
                    str1 = energyUnitString;
                    break;
                  }
                  goto label_22;
                case OverrideID.VolumeResolution:
                  string volumeUnitString = MeterMath.GetTrueVolumeUnitString(str1);
                  if (!(str1 == ""))
                  {
                    str1 = volumeUnitString;
                    break;
                  }
                  goto label_22;
                case OverrideID.Input1Unit:
                case OverrideID.Input2Unit:
                  string str2 = MeterMath.GetTrueVolumeUnitString(str1);
                  if (str1 == "")
                    str2 = MeterMath.GetTrueEnergyUnitString(str1);
                  if (!(str1 == ""))
                  {
                    str1 = str2;
                    break;
                  }
                  goto label_22;
              }
              OverrideParameter overrideParameter = new OverrideParameter(poid, str1, true);
              Overrides.Add((object) overrideParameter);
            }
            else
              break;
          }
        }
        finally
        {
          if (enumerator is IDisposable disposable)
            disposable.Dispose();
        }
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Error on read overrides from database.");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        return false;
      }
      return true;
label_22:
      throw new ArgumentException("Illegal unit string");
    }

    internal bool GetHardwareTables(
      ZR_MeterIdent theIdent,
      out ArrayList Map,
      out SortedList Includes,
      out ArrayList BlockLinkOrder)
    {
      Map = (ArrayList) null;
      Includes = (SortedList) null;
      BlockLinkOrder = (ArrayList) null;
      Schema.MapDefDataTable table1 = new Schema.MapDefDataTable();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM MapDef WHERE MapID = " + theIdent.MapId.ToString());
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table1);
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf die Tabelle MapDef");
        this.AddErrorText(ex.ToString());
        return false;
      }
      if (table1.Rows.Count == 0)
        return false;
      Map = new ArrayList();
      for (int index = 0; index < table1.Rows.Count; ++index)
      {
        DataBaseAccess.MapEntry mapEntry = new DataBaseAccess.MapEntry(table1[index].ConstName, table1[index].cValue, table1[index].ByteSize);
        Map.Add((object) mapEntry);
      }
      Schema.IncludeDefDataTable table2 = new Schema.IncludeDefDataTable();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM IncludeDef WHERE MapID = " + theIdent.MapId.ToString());
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table2);
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf die Tabelle IncludeDef");
        this.AddErrorText(ex.ToString());
        return false;
      }
      if (table2.Rows.Count == 0)
        return false;
      Includes = new SortedList();
      for (int index = 0; index < table2.Rows.Count; ++index)
        Includes.Add((object) table2[index].ConstName, (object) table2[index].cValue);
      Schema.LinkerTableDataTable table3 = new Schema.LinkerTableDataTable();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM LinkerTable WHERE LinkerTableID = " + theIdent.LinkerTableID.ToString());
      this.SQL.Append(" ORDER BY BlockPosition");
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table3);
        if (table3.Rows.Count == 0)
          return false;
        BlockLinkOrder = new ArrayList();
        BlockLinkOrder.Add((object) new BlockLinkDefines()
        {
          BlockType = LinkBlockTypes.EpromHeader
        });
        for (int index = 0; index < table3.Rows.Count; ++index)
        {
          BlockLinkDefines blockLinkDefines = new BlockLinkDefines();
          blockLinkDefines.BlockType = (LinkBlockTypes) table3[index].BlockId;
          if (table3[index].AddressRangeCPU.ToString()[0] == '1')
            blockLinkDefines.AddressRangeCPU = true;
          blockLinkDefines.AddressRangePosition = table3[index].AddressRangePosition;
          blockLinkDefines.AddressRangeVariable = !table3[index].IsAddressRangeVariableNull() ? table3[index].AddressRangeVariable : string.Empty;
          BlockLinkOrder.Add((object) blockLinkDefines);
        }
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf die Tabelle LinkerTable");
        this.AddErrorText(ex.ToString());
        return false;
      }
      return true;
    }

    internal bool GetFunctionNumbersList(ZR_MeterIdent TheIdent, out ArrayList NiededFunctions)
    {
      long num = 1;
      if (TheIdent.lFirmwareVersion >= 33554432L)
        num = TheIdent.lFirmwareVersion & 4095L;
      NiededFunctions = new ArrayList();
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM ZRFunction");
      this.SQL.Append(" WHERE FirmwareVersionMin <= " + TheIdent.lFirmwareVersion.ToString());
      this.SQL.Append(" AND FirmwareVersionMax >= " + TheIdent.lFirmwareVersion.ToString());
      this.SQL.Append(" AND HardwareResource like '%" + TheIdent.HardwareName + "%'");
      this.SQL.Append(" ORDER BY FunctionGroup,FunctionName,FunctionVersion DESC");
      Schema.ZRFunctionDataTable table = new Schema.ZRFunctionDataTable();
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table);
        for (int index = 0; index < table.Rows.Count; ++index)
        {
          if (((long) table[index].FirmwareVersionMax & num) == 0L)
          {
            ushort functionNumber = (ushort) table[index].FunctionNumber;
            NiededFunctions.Add((object) functionNumber);
          }
        }
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf die Tabelle ZRFunction");
        this.AddErrorText(ex.ToString());
        return false;
      }
      return true;
    }

    internal bool GetFunctionHeaders(ArrayList FunctionList, Schema.ZRFunctionDataTable TheTable)
    {
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM ZRFunction WHERE FunctionNumber IN (");
      if (FunctionList.Count == 0)
        return false;
      foreach (ushort function in FunctionList)
        this.SQL.Append(function.ToString() + ",");
      --this.SQL.Length;
      this.SQL.Append(")");
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) TheTable);
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf die Tabelle ZRFunction");
        this.AddErrorText(ex.ToString());
        return false;
      }
      return TheTable.Rows.Count == FunctionList.Count;
    }

    internal bool GetFunctionParameters(
      ArrayList FunctionList,
      Schema.ZRParameterDataTable TheTable)
    {
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM ZRParameter WHERE FunctionNumber IN (");
      if (FunctionList.Count == 0)
        return false;
      foreach (ushort function in FunctionList)
        this.SQL.Append(function.ToString() + ",");
      --this.SQL.Length;
      this.SQL.Append(") ORDER BY FunctionNumber,StructureNr,StructureIndex");
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) TheTable);
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf die Tabelle ZRParameter");
        this.AddErrorText(ex.ToString());
        return false;
      }
      return true;
    }

    internal bool GetRuntimeCode(
      ArrayList FunctionList,
      DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable TheTable)
    {
      if (FunctionList.Count == 0)
        return false;
      this.SQL.Length = 0;
      this.SQL.Append("SELECT");
      this.SQL.Append(" RuntimeCode.FunctionNumber");
      this.SQL.Append(",RuntimeCode.CodeID");
      this.SQL.Append(",RuntimeCode.CodeSequenceType");
      this.SQL.Append(",RuntimeCode.CodeSequenceInfo");
      this.SQL.Append(",Code.LineNr");
      this.SQL.Append(",Code.CodeType");
      this.SQL.Append(",Code.CodeValue");
      this.SQL.Append(",Code.LineInfo");
      this.SQL.Append(",RuntimeCode.CodeSequenceName");
      this.SQL.Append(" FROM RuntimeCode, Code WHERE FunctionNumber IN (");
      foreach (ushort function in FunctionList)
        this.SQL.Append(function.ToString() + ",");
      --this.SQL.Length;
      this.SQL.Append(") AND RuntimeCode.CodeID = Code.CodeID");
      this.SQL.Append(" ORDER BY FunctionNumber, RuntimeCode.CodeID, LineNr");
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) TheTable);
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf die Tabelle RuntimeCode");
        this.AddErrorText(ex.ToString());
        return false;
      }
      return true;
    }

    internal DataBaseAccess.LoggerEntryData GetLoggerEntriesInfos(int FunctionNumber)
    {
      if (this.LoggerEntriesList == null)
      {
        Schema.DataloggerDataTable table = new Schema.DataloggerDataTable();
        try
        {
          this.getDataTableForSQLCommand("SELECT * FROM Datalogger", (DataTable) table);
        }
        catch (Exception ex)
        {
          throw new Exception("Table Datalogger wurde nicht geÃ¶ffnet", ex);
        }
        this.LoggerEntriesList = new SortedList<int, DataBaseAccess.LoggerEntryData>();
        for (int index = 0; index < table.Rows.Count; ++index)
        {
          Schema.DataloggerRow dataloggerRow = table[index];
          int functionNumber = dataloggerRow.FunctionNumber;
          DataBaseAccess.LoggerEntryData loggerEntryData = new DataBaseAccess.LoggerEntryData();
          int loggerType = (int) dataloggerRow.LoggerType;
          loggerEntryData.Entries = (int) dataloggerRow.MaxLoggerEntries;
          loggerEntryData.EntrySize = loggerType != 3 ? 0 : (int) dataloggerRow.EntrySize;
          loggerEntryData.Interval = dataloggerRow.LoggerInterval;
          this.LoggerEntriesList.Add(functionNumber, loggerEntryData);
        }
      }
      int index1 = this.LoggerEntriesList.IndexOfKey(FunctionNumber);
      return index1 >= 0 ? this.LoggerEntriesList.Values[index1] : new DataBaseAccess.LoggerEntryData();
    }

    internal bool GetMenus(ArrayList FunctionList, Schema.MenuDataTable TheTable)
    {
      this.SQL.Length = 0;
      this.SQL.Append("SELECT * FROM Menu WHERE FunctionNumber IN (");
      if (FunctionList.Count == 0)
        return false;
      foreach (ushort function in FunctionList)
        this.SQL.Append(function.ToString() + ",");
      --this.SQL.Length;
      this.SQL.Append(") ORDER BY FunctionNumber,XPos,YPos");
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) TheTable);
      }
      catch
      {
        return this.MyHandler.AddErrorPointMessage("Fehler : Datenbankzugriff auf die Tabelle Menu");
      }
      return true;
    }

    internal bool GetDisplayCodes(
      string CodeList,
      DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable TheTable)
    {
      this.SQL.Length = 0;
      this.SQL.Append("SELECT");
      this.SQL.Append(" DisplayCode.InterpreterCode");
      this.SQL.Append(",DisplayCode.SequenceNr");
      this.SQL.Append(",DisplayCode.CodeSequenceType");
      this.SQL.Append(",DisplayCode.CodeSequenceInfo");
      this.SQL.Append(",DisplayCode.CodeID");
      this.SQL.Append(",Code.LineNr");
      this.SQL.Append(",Code.CodeType");
      this.SQL.Append(",Code.CodeValue");
      this.SQL.Append(",Code.LineInfo");
      this.SQL.Append("  FROM DisplayCode, Code WHERE InterpreterCode IN (");
      if (CodeList.Length == 0)
        return false;
      this.SQL.Append(CodeList);
      this.SQL.Append(") AND DisplayCode.CodeID = Code.CodeID");
      this.SQL.Append(" ORDER BY InterpreterCode,SequenceNr,LineNr");
      try
      {
        this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) TheTable);
      }
      catch (Exception ex)
      {
        this.AddErrorText("Fehler : Datenbankzugriff auf die Tabelle DisplayCode");
        this.AddErrorText(ex.ToString());
        return false;
      }
      return true;
    }

    private void AddErrorText(string TheText)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, TheText);
    }

    internal DataBaseAccess.PValueDescription GetValueDescriptions(
      Meter TheMeter,
      string ZDF_ParameterID)
    {
      if (this.LastMeter == null || this.LastMeter != TheMeter)
      {
        string manufacturer = MBusDevice.GetManufacturer((short) ((Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusManufacturer"]).ValueEprom);
        string str = ((Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusMeterType"]).ValueEprom.ToString();
        if (this.ManufacturerString != manufacturer || this.MeterGenerationString != str)
        {
          this.PValDescriptionCache = (SortedList<string, DataBaseAccess.PValueDescription>) null;
          this.ManufacturerString = manufacturer;
          this.MeterGenerationString = str;
        }
        this.LastMeter = TheMeter;
      }
      if (this.PValDescriptionCache == null)
      {
        try
        {
          ZRDataAdapter zrDataAdapter1 = this.MyTypedDB.ZRDataAdapter("SELECT * FROM PValueIdent WHERE PValueID > 999 ORDER BY PValueID", this.MyDbConnection);
          Schema.PValueIdentDataTable pvalueIdentDataTable = new Schema.PValueIdentDataTable();
          zrDataAdapter1.Fill((DataTable) pvalueIdentDataTable);
          ZRDataAdapter zrDataAdapter2 = this.MyTypedDB.ZRDataAdapter("SELECT * FROM MBusParameterTranslation WHERE Manufacturer = '" + this.ManufacturerString + "' AND PValueID > 999 AND VersionMin <= " + this.MeterGenerationString + " AND VersionMax >= " + this.MeterGenerationString + " ORDER BY PValueID", this.MyDbConnection);
          Schema.MBusParameterTranslationDataTable translationDataTable = new Schema.MBusParameterTranslationDataTable();
          zrDataAdapter2.Fill((DataTable) translationDataTable);
          this.PValDescriptionCache = new SortedList<string, DataBaseAccess.PValueDescription>();
          foreach (Schema.MBusParameterTranslationRow parameterTranslationRow in (TypedTableBase<Schema.MBusParameterTranslationRow>) translationDataTable)
          {
            Schema.PValueIdentRow[] pvalueIdentRowArray = (Schema.PValueIdentRow[]) pvalueIdentDataTable.Select("PValueID = " + parameterTranslationRow.PValueID.ToString(), "PValueID");
            if (pvalueIdentRowArray.Length >= 1 && this.PValDescriptionCache.IndexOfKey(parameterTranslationRow.MBusZDF) < 0)
              this.PValDescriptionCache.Add(parameterTranslationRow.MBusZDF, new DataBaseAccess.PValueDescription()
              {
                PValueID = parameterTranslationRow.PValueID,
                ValueName = pvalueIdentRowArray[0].PValueName,
                Unit = pvalueIdentRowArray[0].Unit,
                ValueDescription = pvalueIdentRowArray[0].Description
              });
          }
        }
        catch
        {
          return (DataBaseAccess.PValueDescription) null;
        }
      }
      int index = this.PValDescriptionCache.IndexOfKey(ZDF_ParameterID);
      return index >= 0 ? this.PValDescriptionCache.Values[index] : (DataBaseAccess.PValueDescription) null;
    }

    internal bool IsDatabaseSwitchTrue(string Switch)
    {
      if (this.DatabaseIdentTable == null)
      {
        ZRDataAdapter zrDataAdapter = this.MyTypedDB.ZRDataAdapter("SELECT * FROM DatabaseIdentification WHERE InfoName = '" + Switch + "'", this.MyDbConnection);
        this.DatabaseIdentTable = new Schema.DatabaseIdentificationDataTable();
        zrDataAdapter.Fill((DataTable) this.DatabaseIdentTable);
      }
      Schema.DatabaseIdentificationRow[] identificationRowArray = (Schema.DatabaseIdentificationRow[]) this.DatabaseIdentTable.Select("InfoName = '" + Switch + "'");
      return identificationRowArray.Length == 1 && identificationRowArray[0].InfoData == "true";
    }

    internal bool WriteDailyMeterData(Meter ReadMeter)
    {
      try
      {
        if (!ReadMeter.MyHandler.BackupForEachReadInternal)
        {
          if (this.AutoWriteIdentTable == null)
          {
            this.AutoWriteIdentTable = new Schema.DatabaseIdentificationDataTable();
            this.MyTypedDB.ZRDataAdapter("SELECT * FROM DatabaseIdentification WHERE InfoName = 'DatabaseSaveOption'", this.MyDbConnection).Fill((DataTable) this.AutoWriteIdentTable);
          }
          if (this.AutoWriteIdentTable.Rows.Count == 1 && this.AutoWriteIdentTable[0].InfoData == "DailyAutosaveOff")
            return true;
          Schema.MeterDataDataTable table = new Schema.MeterDataDataTable();
          this.SQL.Length = 0;
          this.SQL.Append("SELECT * FROM MeterData WHERE MeterID = ");
          this.SQL.Append(ReadMeter.MyIdent.MeterID.ToString());
          this.SQL.Append(" AND PValueID = 1");
          this.getDataTableForSQLCommand(this.SQL.ToString(), (DataTable) table);
          foreach (Schema.MeterDataRow row in (InternalDataCollectionBase) table.Rows)
          {
            if (row.TimePoint.Date == DateTime.Now.Date)
              return true;
          }
        }
        ReadMeter.DatabaseTime = DateTime.Now;
        if (ReadMeter.MyHandler.LoggerRestoreState == 0)
          return this.WriteMeterData(ReadMeter.Eprom, ReadMeter.MyLoggerStore.BlockStartAddress, ReadMeter.MyIdent, ReadMeter.DatabaseTime);
        ReadMeter.ReadConnectedMeterLoggerData();
        return this.WriteMeterData(ReadMeter.Eprom, ReadMeter.UsedEpromSize, ReadMeter.MyIdent, ReadMeter.DatabaseTime);
      }
      catch (Exception ex)
      {
        return this.MyHandler.AddErrorPointMessage("Database read error" + ZR_Constants.SystemNewLine + ex.ToString());
      }
    }

    internal bool WriteMeterData(
      byte[] EEProm,
      int EpromSize,
      ZR_MeterIdent TheMeterIdent,
      DateTime TimePoint)
    {
      TimePoint = new DateTime(TimePoint.Year, TimePoint.Month, TimePoint.Day, TimePoint.Hour, TimePoint.Minute, TimePoint.Second);
      byte[] numArray = new byte[EpromSize];
      for (int index = 0; index < numArray.Length; ++index)
        numArray[index] = EEProm[index];
      this.MyDbConnection.Open();
      IDbTransaction Transaction = this.MyDbConnection.BeginTransaction();
      try
      {
        Schema.MeterDataTable MyDataTable1 = new Schema.MeterDataTable();
        this.SQL.Length = 0;
        this.SQL.Append("SELECT * FROM Meter WHERE MeterID = ");
        this.SQL.Append(TheMeterIdent.MeterID.ToString());
        ZRDataAdapter zrDataAdapter1 = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
        zrDataAdapter1.Fill((DataTable) MyDataTable1, Transaction);
        if (MyDataTable1.Rows.Count == 0)
        {
          Schema.MeterRow row = (Schema.MeterRow) MyDataTable1.NewRow();
          row.MeterID = TheMeterIdent.MeterID;
          row.MeterInfoID = TheMeterIdent.MeterInfoID;
          row.SerialNr = TheMeterIdent.SerialNr;
          row.ProductionDate = TimePoint;
          row.OrderNr = "??";
          MyDataTable1.Rows.Add((DataRow) row);
          zrDataAdapter1.Update((DataTable) MyDataTable1, Transaction);
        }
        else
        {
          MyDataTable1[0].MeterInfoID = TheMeterIdent.MeterInfoID;
          MyDataTable1[0].SerialNr = TheMeterIdent.SerialNr;
          zrDataAdapter1.Update((DataTable) MyDataTable1, Transaction);
        }
        Schema.MeterDataDataTable MyDataTable2 = new Schema.MeterDataDataTable();
        this.SQL.Length = 0;
        this.SQL.Append("SELECT * FROM Meterdata WHERE MeterID = -1");
        ZRDataAdapter zrDataAdapter2 = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
        zrDataAdapter2.Fill((DataTable) MyDataTable2, Transaction);
        Schema.MeterDataRow row1 = (Schema.MeterDataRow) MyDataTable2.NewRow();
        row1.MeterID = TheMeterIdent.MeterID;
        row1.TimePoint = TimePoint;
        row1.PValueID = 1;
        row1.PValue = TheMeterIdent.lFirmwareVersion.ToString();
        row1.PValueBinary = numArray;
        MyDataTable2.Rows.Add((DataRow) row1);
        zrDataAdapter2.Update((DataTable) MyDataTable2, Transaction);
      }
      catch (Exception ex)
      {
        this.MyHandler.AddErrorPointMessage("Database write Error" + ZR_Constants.SystemNewLine + ex.ToString());
        goto label_10;
      }
      Transaction.Commit();
      this.MyDbConnection.Close();
      return true;
label_10:
      Transaction.Rollback();
      this.MyDbConnection.Close();
      return false;
    }

    internal bool SaveType(Meter TheMeter, ZR_MeterIdent TheIdent)
    {
      string empty = string.Empty;
      IDbTransaction Transaction = (IDbTransaction) null;
      try
      {
        this.MyDbConnection.Open();
        Transaction = this.MyDbConnection.BeginTransaction();
        Schema.MeterInfoDataTable MyDataTable1 = new Schema.MeterInfoDataTable();
        this.SQL.Length = 0;
        this.SQL.Append("SELECT * FROM MeterInfo WHERE MeterInfoID = ");
        this.SQL.Append(TheIdent.MeterInfoID.ToString());
        ZRDataAdapter zrDataAdapter1 = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
        zrDataAdapter1.Fill((DataTable) MyDataTable1, Transaction);
        if (MyDataTable1.Rows.Count == 1)
        {
          MyDataTable1[0].PPSArtikelNr = TheIdent.PPSArtikelNr;
          MyDataTable1[0].Description = TheIdent.MeterInfoDescription;
          if (zrDataAdapter1.Update((DataTable) MyDataTable1, Transaction) == 1)
          {
            Schema.MeterTypeDataTable MyDataTable2 = new Schema.MeterTypeDataTable();
            this.SQL.Length = 0;
            this.SQL.Append("SELECT * FROM MeterType WHERE MeterTypeID = ");
            this.SQL.Append(TheIdent.MeterTypeID.ToString());
            ZRDataAdapter zrDataAdapter2 = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
            zrDataAdapter2.Fill((DataTable) MyDataTable2, Transaction);
            if (MyDataTable2.Rows.Count == 1)
            {
              MyDataTable2[0].GenerateDate = DateTime.Now;
              if (zrDataAdapter2.Update((DataTable) MyDataTable2, Transaction) == 1)
              {
                Schema.MTypeZelsiusDataTable MyDataTable3 = new Schema.MTypeZelsiusDataTable();
                this.SQL.Length = 0;
                this.SQL.Append("SELECT * FROM MTypeZelsius WHERE MeterTypeID = ");
                this.SQL.Append(TheIdent.MeterTypeID.ToString());
                ZRDataAdapter zrDataAdapter3 = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
                zrDataAdapter3.Fill((DataTable) MyDataTable3, Transaction);
                if (MyDataTable3.Rows.Count == 1)
                {
                  byte[] numArray = new byte[TheMeter.MyLoggerStore.BlockStartAddress];
                  for (int index = 0; index < numArray.Length; ++index)
                    numArray[index] = TheMeter.Eprom[index];
                  MyDataTable3[0].EEPdata = numArray;
                  MyDataTable3[0].TypeOverrideString = TheIdent.TypeOverrideString;
                  if (zrDataAdapter3.Update((DataTable) MyDataTable3, Transaction) != 1)
                    goto label_12;
                }
                else
                  goto label_12;
              }
              else
                goto label_12;
            }
            else
              goto label_12;
          }
          else
            goto label_12;
        }
        else
          goto label_12;
      }
      catch (Exception ex)
      {
        empty = ex.ToString();
        goto label_12;
      }
      Transaction.Commit();
      this.MyDbConnection.Close();
      return true;
label_12:
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Error on write type to database");
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, empty);
      Transaction.Rollback();
      this.MyDbConnection.Close();
      return false;
    }

    internal bool SaveAsNewType(Meter TheMeter, ZR_MeterIdent NewTypeIdent)
    {
      string ErrMsg = string.Empty;
      IDbTransaction Transaction = (IDbTransaction) null;
      try
      {
        this.MyDbConnection.Open();
        Transaction = this.MyDbConnection.BeginTransaction();
        long newID1;
        if (NewTypeIdent.MeterInfoID > 0)
        {
          newID1 = (long) NewTypeIdent.MeterInfoID;
        }
        else
        {
          this.ret = this.MyDB.getNewID("MeterInfo", "MeterInfoID", out newID1, out ErrMsg);
          if (this.ret != 0)
            goto label_18;
        }
        long newID2;
        if (NewTypeIdent.MeterInfoID > 0 && NewTypeIdent.MeterTypeID > 0)
        {
          newID2 = (long) NewTypeIdent.MeterTypeID;
        }
        else
        {
          this.ret = this.MyDB.getNewID("MeterType", "MeterTypeID", out newID2, out ErrMsg);
          if (this.ret != 0)
            goto label_18;
        }
        string str1 = ((Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterInfoID"]).ValueEprom.ToString();
        Schema.MeterInfoDataTable MyDataTable1 = new Schema.MeterInfoDataTable();
        this.SQL.Length = 0;
        this.SQL.Append("SELECT * FROM MeterInfo WHERE MeterInfoID = ");
        this.SQL.Append(str1);
        ZRDataAdapter zrDataAdapter1 = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
        zrDataAdapter1.Fill((DataTable) MyDataTable1, Transaction);
        if (MyDataTable1.Rows.Count == 1)
        {
          string str2 = MyDataTable1[0].MeterTypeID.ToString();
          Schema.MeterTypeDataTable MyDataTable2 = new Schema.MeterTypeDataTable();
          this.SQL.Length = 0;
          this.SQL.Append("SELECT * FROM MeterType WHERE MeterTypeID = ");
          this.SQL.Append(str2);
          ZRDataAdapter zrDataAdapter2 = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
          zrDataAdapter2.Fill((DataTable) MyDataTable2, Transaction);
          if (MyDataTable2.Rows.Count == 1)
          {
            string mtypeTableName = MyDataTable2[0].MTypeTableName;
            Schema.MTypeZelsiusDataTable MyDataTable3 = new Schema.MTypeZelsiusDataTable();
            this.SQL.Length = 0;
            this.SQL.Append("SELECT * FROM " + mtypeTableName + " WHERE MeterTypeID = ");
            this.SQL.Append(str2);
            ZRDataAdapter zrDataAdapter3 = this.MyTypedDB.ZRDataAdapter(this.SQL.ToString(), this.MyDbConnection);
            zrDataAdapter3.Fill((DataTable) MyDataTable3, Transaction);
            if (MyDataTable3.Rows.Count == 1)
            {
              Schema.MeterInfoRow row1 = MyDataTable1.NewMeterInfoRow();
              row1.MeterInfoID = (int) newID1;
              row1.MeterTypeID = (int) newID2;
              row1.PPSArtikelNr = NewTypeIdent.PPSArtikelNr;
              row1.Description = NewTypeIdent.MeterInfoDescription;
              row1.DefaultFunctionNr = MyDataTable1[0].DefaultFunctionNr;
              row1.HardwareTypeID = MyDataTable1[0].HardwareTypeID;
              row1.MeterHardwareID = MyDataTable1[0].MeterHardwareID;
              MyDataTable1.AddMeterInfoRow(row1);
              if (zrDataAdapter1.Update((DataTable) MyDataTable1, Transaction) == 1)
              {
                Schema.MeterTypeRow row2 = MyDataTable2.NewMeterTypeRow();
                row2.MeterTypeID = (int) newID2;
                row2.GenerateDate = DateTime.Now;
                row2.Description = "Auto generated";
                row2.MTypeTableName = MyDataTable2[0].MTypeTableName;
                MyDataTable2.Rows.Add((DataRow) row2);
                if (zrDataAdapter2.Update((DataTable) MyDataTable2, Transaction) == 1)
                {
                  byte[] numArray = new byte[TheMeter.MyLoggerStore.BlockStartAddress];
                  for (int index = 0; index < numArray.Length; ++index)
                    numArray[index] = TheMeter.Eprom[index];
                  Schema.MTypeZelsiusRow row3 = MyDataTable3.NewMTypeZelsiusRow();
                  row3.MeterTypeID = (int) newID2;
                  row3.EEPdata = numArray;
                  row3.TypeOverrideString = NewTypeIdent.TypeOverrideString;
                  MyDataTable3.Rows.Add((DataRow) row3);
                  if (zrDataAdapter3.Update((DataTable) MyDataTable3, Transaction) != 1)
                    goto label_18;
                }
                else
                  goto label_18;
              }
              else
                goto label_18;
            }
            else
              goto label_18;
          }
          else
            goto label_18;
        }
        else
          goto label_18;
      }
      catch (Exception ex)
      {
        ErrMsg = ex.ToString();
        goto label_18;
      }
      Transaction.Commit();
      this.MyDbConnection.Close();
      return true;
label_18:
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Error on write type to database");
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ErrMsg);
      Transaction.Rollback();
      this.MyDbConnection.Close();
      return false;
    }

    internal bool LoadTypeList()
    {
      ZRDataAdapter zrDataAdapter = this.MyTypedDB.ZRDataAdapter("SELECT MeterInfo.MeterInfoID, MeterInfo.MeterTypeID, MeterInfo.MeterHardwareID, MeterInfo.HardwareTypeID,MeterInfo.PPSArtikelNr,MeterInfo.DefaultFunctionNr,MeterInfo.Description FROM MeterInfo,MeterType WHERE MeterInfo.MeterTypeID = MeterType.MeterTypeID AND MeterType.MTypeTableName = 'MTypeZelsius'", this.MyDbConnection);
      this.MeterInfoTable = new Schema.MeterInfoDataTable();
      zrDataAdapter.Fill((DataTable) this.MeterInfoTable);
      return true;
    }

    internal bool IsMeterInfoProperty(
      int MeterInfoId,
      DataBaseAccess.MeterInfoProperties TheProperty,
      string PropertyValue)
    {
      if (this.MeterInfoPropertiesTable == null)
      {
        ZRDataAdapter zrDataAdapter = this.MyTypedDB.ZRDataAdapter("SELECT MeterInfoProperties.MeterInfoID, MeterInfoProperties.PropertyField1 FROM MeterInfo,MeterInfoProperties WHERE MeterInfo.MeterInfoID = MeterInfoProperties.MeterInfoID", this.MyDbConnection);
        this.MeterInfoPropertiesTable = new Schema.MeterInfoPropertiesDataTable();
        zrDataAdapter.Fill((DataTable) this.MeterInfoPropertiesTable);
        this.AllMeterInfoProperties = new SortedList<int, SortedList<DataBaseAccess.MeterInfoProperties, string>>();
        string[] names = Enum.GetNames(typeof (DataBaseAccess.MeterInfoProperties));
        for (int index = 0; index < this.MeterInfoPropertiesTable.Count; ++index)
        {
          Schema.MeterInfoPropertiesRow infoPropertiesRow = this.MeterInfoPropertiesTable[index];
          SortedList<DataBaseAccess.MeterInfoProperties, string> sortedList = new SortedList<DataBaseAccess.MeterInfoProperties, string>();
          string propertyField1 = this.MeterInfoPropertiesTable[index].PropertyField1;
          char[] chArray = new char[1]{ '|' };
          foreach (string str1 in propertyField1.Split(chArray))
          {
            string str2 = str1.Trim();
            if (str2.Length != 0)
            {
              for (int key = 0; key < names.Length; ++key)
              {
                if (str2.StartsWith(names[key]))
                {
                  if (str2.Length == names[key].Length)
                  {
                    sortedList.Add((DataBaseAccess.MeterInfoProperties) key, (string) null);
                    break;
                  }
                  if (str2.Length > names[key].Length + 1 && str2[names[key].Length] == '=')
                  {
                    sortedList.Add((DataBaseAccess.MeterInfoProperties) key, str2.Substring(names[key].Length + 1));
                    break;
                  }
                }
              }
            }
          }
          this.AllMeterInfoProperties.Add(this.MeterInfoPropertiesTable[index].MeterInfoId, sortedList);
        }
      }
      int index1 = this.AllMeterInfoProperties.IndexOfKey(MeterInfoId);
      if (index1 < 0)
        return false;
      int index2 = this.AllMeterInfoProperties.Values[index1].IndexOfKey(TheProperty);
      if (index2 < 0)
        return false;
      if (PropertyValue == null)
      {
        if (this.AllMeterInfoProperties.Values[index1].Values[index2] == null)
          return true;
      }
      else if (this.AllMeterInfoProperties.Values[index1].Values[index2] != null && this.AllMeterInfoProperties.Values[index1].Values[index2] == PropertyValue)
        return true;
      return false;
    }

    internal bool LoadMeterList()
    {
      ZRDataAdapter zrDataAdapter = this.MyTypedDB.ZRDataAdapter("SELECT Meter.MeterID,Meter.MeterInfoID,Meter.SerialNr,Meter.ProductionDate,Meter.ApprovalDate,Meter.OrderNr FROM Meter,MeterInfo,MeterType WHERE Meter.MeterInfoID = MeterInfo.MeterInfoID AND MeterInfo.MeterTypeID = MeterType.MeterTypeID AND MeterType.MTypeTableName = 'MTypeZelsius' ORDER BY Meter.ProductionDate", this.MyDbConnection);
      this.MeterTable = new Schema.MeterDataTable();
      zrDataAdapter.Fill((DataTable) this.MeterTable);
      return true;
    }

    internal bool LoadMeterListFromTypeID(
      DataSetAllErr8002Meters.Err8002MeterDataTable TheDataTable,
      int MeterTypeID)
    {
      try
      {
        this.MyTypedDB.ZRDataAdapter("SELECT Meter.MeterID,Meter.MeterInfoID,Meter.SerialNr,Meter.ProductionDate,Meter.ApprovalDate,MeterInfo.PPSArtikelNr AS SAP_Number,MeterInfo.Description AS Kurztext FROM Meter,MeterInfo WHERE Meter.MeterInfoID = MeterInfo.MeterInfoID AND MeterInfo.MeterTypeID = " + MeterTypeID.ToString(), this.MyDbConnection).Fill((DataTable) TheDataTable);
      }
      catch (Exception ex)
      {
        this.ErrorMsg = ex.ToString();
        return false;
      }
      return true;
    }

    internal DateTime GetLastProgDate(int MeterID)
    {
      DateTime minValue = DateTime.MinValue;
      try
      {
        ZRDataAdapter zrDataAdapter = this.MyTypedDB.ZRDataAdapter("SELECT TimePoint, MeterID FROM MeterData WHERE MeterId = " + MeterID.ToString() + " AND PValueID = 1 ORDER BY TimePoint DESC", this.MyDbConnection);
        DataTable dataTable = new DataTable();
        zrDataAdapter.Fill(dataTable);
        if (dataTable.Rows.Count > 0)
          return (DateTime) dataTable.Rows[0]["TimePoint"];
      }
      catch
      {
      }
      return minValue;
    }

    internal bool IsSerie2Type(int MeterTypeID)
    {
      if (this.MTypeZelsiusTable == null)
      {
        ZRDataAdapter zrDataAdapter = this.MyTypedDB.ZRDataAdapter("SELECT * FROM MTypeZelsius", this.MyDbConnection);
        this.MTypeZelsiusTable = new Schema.MTypeZelsiusDataTable();
        zrDataAdapter.Fill((DataTable) this.MTypeZelsiusTable);
      }
      return ((Schema.MTypeZelsiusRow[]) this.MTypeZelsiusTable.Select("MeterTypeId = " + MeterTypeID.ToString())).Length == 1;
    }

    internal class MapEntry
    {
      internal string Name;
      internal int Address;
      internal short ByteSize;

      internal MapEntry(string TheName, int TheAddress, short TheByteSize)
      {
        this.Name = TheName;
        this.Address = TheAddress;
        this.ByteSize = TheByteSize;
      }
    }

    internal class LoggerEntryData
    {
      internal int Entries;
      internal int EntrySize;
      internal int Interval;
    }

    public class PValueDescription
    {
      public int PValueID;
      public string ValueName;
      public string Unit;
      public string ValueDescription;
    }

    public enum MeterInfoProperties
    {
      ExtendedTypePromSize,
      RuntimeVarsPointerToEEProm,
      DatasetError,
      OverridesChanged,
    }
  }
}


--- DataChecker.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.DataChecker
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class DataChecker
  {
    private ZR_HandlerFunctions MyHandler;
    private static string[] OldParameterToUse = new string[13]
    {
      "EEP_Header.EEP_HEADER_MBusMedium",
      "DefaultFunction.Emergency_Frame0",
      "DefaultFunction.Emergency_Frame1",
      "DefaultFunction.Emergency_Frame2",
      "DefaultFunction.Emergency_Frame3",
      "DefaultFunction.Emergency_Frame4",
      "DefaultFunction.Emergency_Frame5",
      "DefaultFunction.Emergency_Frame_1",
      "DefaultFunction.Emergency_Frame_2",
      "DefaultFunction.Emergency_Frame_3",
      "DefaultFunction.Emergency_Frame_4",
      "DefaultFunction.Emergency_Frame_5",
      "DefaultFunction.Emergency_Frame_6"
    };

    public DataChecker(ZR_HandlerFunctions MyHandlerIn) => this.MyHandler = MyHandlerIn;

    public static void GetEpromDiffs(
      byte[] Eprom1,
      byte[] Eprom2,
      bool OnlyDiffs,
      StringBuilder TheText)
    {
      int length = Eprom1.Length;
      if (length > Eprom2.Length)
        length = Eprom2.Length;
      int num1 = 0;
      int num2 = 0;
      for (int index = 0; index < length; ++index)
      {
        if ((int) Eprom1[index] != (int) Eprom2[index])
          ++num2;
        if (Eprom1[index] != (byte) 0 || Eprom2[index] > (byte) 0)
          num1 = index + 1;
      }
      TheText.AppendLine("Number of differences:   " + num2.ToString());
      TheText.AppendLine("Number of no zero bytes: " + num1.ToString());
      TheText.AppendLine();
      TheText.AppendLine("   Addr.  .. Diag Comp");
      for (int index = 0; index < num1; ++index)
      {
        if ((int) Eprom1[index] == (int) Eprom2[index])
        {
          if (!OnlyDiffs)
            TheText.Append("   ");
          else
            continue;
        }
        else
          TheText.Append("** ");
        TheText.Append("0x" + index.ToString("x04"));
        TheText.Append(" .. ");
        TheText.Append("0x" + Eprom1[index].ToString("x02"));
        TheText.Append(" 0x" + Eprom2[index].ToString("x02"));
        TheText.Append(" .. ");
        TheText.Append(Eprom1[index].ToString("d03"));
        TheText.Append(" " + Eprom2[index].ToString("d03"));
        TheText.AppendLine();
      }
    }

    public static void GetParameterDiffs(SortedList List1, SortedList List2, StringBuilder TheText)
    {
      bool[] flagArray1 = new bool[List1.Count];
      bool[] flagArray2 = new bool[List2.Count];
      int num = 0;
      for (int index = 0; index < List1.Count; ++index)
      {
        string key = (string) List1.GetKey(index);
        Parameter parameter = (Parameter) List2[(object) key];
        if (parameter != null)
        {
          flagArray1[index] = true;
          flagArray2[List2.IndexOfKey((object) key)] = true;
          Parameter byIndex = (Parameter) List1.GetByIndex(index);
          bool flag = false;
          if (byIndex.ValueEprom != parameter.ValueEprom || byIndex.ValueCPU != parameter.ValueCPU || byIndex.MBusOn != parameter.MBusOn || byIndex.MBusShortOn != parameter.MBusShortOn)
            flag = true;
          if (byIndex.DifVifs != parameter.DifVifs || (int) byIndex.DifVifSize != (int) parameter.DifVifSize)
            flag = true;
          if (flag)
          {
            ++num;
            TheText.Append(key);
            if (byIndex.ValueEprom != parameter.ValueEprom)
              TheText.Append("  ValEpromDiag: " + byIndex.ValueEprom.ToString() + " .. ValEpromComp: " + parameter.ValueEprom.ToString());
            if (byIndex.ValueCPU != parameter.ValueCPU)
              TheText.Append("  ValCpuDiag: " + byIndex.ValueCPU.ToString() + " .. ValCpuComp: " + parameter.ValueCPU.ToString());
          }
        }
      }
      TheText.AppendLine();
      TheText.AppendLine("Difference count: " + num.ToString());
    }

    public static void GetEpromParameterByAddress(SortedList ParameterList, StringBuilder TheText)
    {
      TheText.AppendLine();
      TheText.AppendLine("Number of eprom variables: " + ParameterList.Count.ToString());
      TheText.AppendLine();
      for (int index = 0; index < ParameterList.Count; ++index)
      {
        Parameter byIndex = (Parameter) ParameterList.GetByIndex(index);
        TheText.Append(byIndex.Address.ToString("x04"));
        TheText.Append(" ");
        TheText.Append(byIndex.Name);
        TheText.Append(" ");
        TheText.Append(byIndex.FunctionNumber.ToString());
        TheText.AppendLine();
      }
    }

    public static void GetRamParameterByAddress(Meter TheMeter, StringBuilder TheText)
    {
      SortedList parametersByAddress = TheMeter.AllRamParametersByAddress;
      TheText.AppendLine();
      TheText.AppendLine("Number of ram variables: " + parametersByAddress.Count.ToString());
      TheText.AppendLine();
      for (int index = 0; index < parametersByAddress.Count; ++index)
      {
        Parameter byIndex = (Parameter) parametersByAddress.GetByIndex(index);
        TheText.Append(TheMeter.GetRamWriteProtectionChar(byIndex.Size, byIndex.AddressCPU));
        TheText.Append(byIndex.AddressCPU.ToString("x04"));
        TheText.Append(" ");
        TheText.Append(byIndex.Name);
        TheText.Append(" ");
        TheText.Append(byIndex.FunctionNumber.ToString());
        TheText.AppendLine();
      }
    }

    public static string GetStaticDiffToExternalConnectedMeter(Meter TheMeter)
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (!TheMeter.MyHandler.MyMeters.ConnectMeter())
      {
        stringBuilder.AppendLine("Can not connect external meter");
        return stringBuilder.ToString();
      }
      Meter connectedMeter = TheMeter.MyHandler.MyMeters.ConnectedMeter;
      int address1 = ((LinkObj) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_SerialNr"]).Address;
      Parameter allParameter1 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_HeaderChecksum"];
      Parameter allParameter2 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_StaticChecksum"];
      Parameter allParameter3 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupChecksum"];
      Parameter allParameter4 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RamParamBlockAdr"];
      Parameter allParameter5 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupBlockAdr"];
      Parameter allParameter6 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_FixedParamAdr"];
      Parameter allParameter7 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RuntimeVarsAdr"];
      Parameter allParameter8 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RuntimeCodeAdr"];
      Parameter allParameter9 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_EpromVarsAdr"];
      Parameter allParameter10 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_ParamBlockAdr"];
      Parameter allParameter11 = (Parameter) TheMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_FunctionTableAdr"];
      connectedMeter.Eprom = new byte[TheMeter.Eprom.Length];
      int NumberOfBytes1 = (int) (allParameter11.ValueEprom - 6L);
      ByteField MemoryData;
      if (!connectedMeter.MyCommunication.MyBus.ReadMemory(MemoryLocation.EEPROM, 6, NumberOfBytes1, out MemoryData))
      {
        stringBuilder.AppendLine("Read error");
        return stringBuilder.ToString();
      }
      for (int index = 0; index < MemoryData.Count; ++index)
        connectedMeter.Eprom[index + 6] = MemoryData.Data[index];
      int address2 = allParameter1.Address;
      if ((int) TheMeter.MyEpromHeader.GenerateChecksum(connectedMeter.Eprom, address1, address2 - address1, (ushort) 0) != (int) ParameterService.GetFromByteArray_ushort(connectedMeter.Eprom, ref address2))
        stringBuilder.AppendLine("Exteral header checksum is wrong");
      else
        stringBuilder.AppendLine("Exteral header checksum is ok");
      int valueEprom1 = (int) allParameter4.ValueEprom;
      int NumberOfBytes2 = (int) allParameter5.ValueEprom - valueEprom1;
      ushort checksum1 = TheMeter.MyEpromHeader.GenerateChecksum(connectedMeter.Eprom, valueEprom1, NumberOfBytes2, (ushort) 0);
      int valueEprom2 = (int) allParameter6.ValueEprom;
      int NumberOfBytes3 = (int) allParameter7.ValueEprom - valueEprom2;
      ushort checksum2 = TheMeter.MyEpromHeader.GenerateChecksum(connectedMeter.Eprom, valueEprom2, NumberOfBytes3, checksum1);
      int valueEprom3 = (int) allParameter8.ValueEprom;
      int NumberOfBytes4 = (int) allParameter9.ValueEprom - valueEprom3;
      ushort checksum3 = TheMeter.MyEpromHeader.GenerateChecksum(connectedMeter.Eprom, valueEprom3, NumberOfBytes4, checksum2);
      int valueEprom4 = (int) allParameter10.ValueEprom;
      int NumberOfBytes5 = (int) allParameter11.ValueEprom - valueEprom4;
      ushort checksum4 = TheMeter.MyEpromHeader.GenerateChecksum(connectedMeter.Eprom, valueEprom4, NumberOfBytes5, checksum3);
      if (allParameter2.ValueEprom != (long) checksum4)
        stringBuilder.AppendLine("Exteral static checksum is wrong");
      else
        stringBuilder.AppendLine("Exteral static checksum is ok");
      stringBuilder.AppendLine();
      int index1 = address1;
      for (int index2 = address2; index1 < index2; ++index1)
      {
        if ((int) connectedMeter.Eprom[index1] != (int) TheMeter.Eprom[index1])
          stringBuilder.AppendLine(index1.ToString("x04") + ": " + TheMeter.Eprom[index1].ToString("x02") + " -> " + connectedMeter.Eprom[index1].ToString("x02"));
      }
      int valueEprom5 = (int) allParameter4.ValueEprom;
      for (int valueEprom6 = (int) allParameter5.ValueEprom; valueEprom5 < valueEprom6; ++valueEprom5)
      {
        if ((int) connectedMeter.Eprom[valueEprom5] != (int) TheMeter.Eprom[valueEprom5])
          stringBuilder.AppendLine(valueEprom5.ToString("x04") + ": " + TheMeter.Eprom[valueEprom5].ToString("x02") + " -> " + connectedMeter.Eprom[valueEprom5].ToString("x02"));
      }
      int valueEprom7 = (int) allParameter6.ValueEprom;
      for (int valueEprom8 = (int) allParameter7.ValueEprom; valueEprom7 < valueEprom8; ++valueEprom7)
      {
        if ((int) connectedMeter.Eprom[valueEprom7] != (int) TheMeter.Eprom[valueEprom7])
          stringBuilder.AppendLine(valueEprom7.ToString("x04") + ": " + TheMeter.Eprom[valueEprom7].ToString("x02") + " -> " + connectedMeter.Eprom[valueEprom7].ToString("x02"));
      }
      int valueEprom9 = (int) allParameter8.ValueEprom;
      for (int valueEprom10 = (int) allParameter9.ValueEprom; valueEprom9 < valueEprom10; ++valueEprom9)
      {
        if ((int) connectedMeter.Eprom[valueEprom9] != (int) TheMeter.Eprom[valueEprom9])
          stringBuilder.AppendLine(valueEprom9.ToString("x04") + ": " + TheMeter.Eprom[valueEprom9].ToString("x02") + " -> " + connectedMeter.Eprom[valueEprom9].ToString("x02"));
      }
      int valueEprom11 = (int) allParameter10.ValueEprom;
      for (int valueEprom12 = (int) allParameter11.ValueEprom; valueEprom11 < valueEprom12; ++valueEprom11)
      {
        if ((int) connectedMeter.Eprom[valueEprom11] != (int) TheMeter.Eprom[valueEprom11])
          stringBuilder.AppendLine(valueEprom11.ToString("x04") + ": " + TheMeter.Eprom[valueEprom11].ToString("x02") + " -> " + connectedMeter.Eprom[valueEprom11].ToString("x02"));
      }
      return stringBuilder.ToString();
    }

    public static bool SetAllMaxValuesCritical(Meter TheMeter)
    {
      if (TheMeter.MyCommunication == null)
      {
        int num = (int) MessageBox.Show("Diagnostic object has no communication ability.");
        return false;
      }
      int index1 = TheMeter.AllParameters.IndexOfKey((object) "MaxFlowAndPower.LastHourEnergy");
      if (index1 >= 0)
      {
        Parameter byIndex = (Parameter) TheMeter.AllParameters.GetByIndex(index1);
        byIndex.ValueEprom = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.EEPROM);
        byIndex.ValueCPU = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.RAM);
      }
      int index2 = TheMeter.AllParameters.IndexOfKey((object) "MaxFlowAndPower.LastHourVolume");
      if (index2 >= 0)
      {
        Parameter byIndex = (Parameter) TheMeter.AllParameters.GetByIndex(index2);
        byIndex.ValueEprom = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.EEPROM);
        byIndex.ValueCPU = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.RAM);
      }
      int index3 = TheMeter.AllParameters.IndexOfKey((object) "MaxFlowAndPower.MaxFlow");
      if (index3 >= 0)
      {
        Parameter byIndex = (Parameter) TheMeter.AllParameters.GetByIndex(index3);
        byIndex.ValueEprom = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.EEPROM);
        byIndex.ValueCPU = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.RAM);
      }
      int index4 = TheMeter.AllParameters.IndexOfKey((object) "MaxFlowAndPower.MaxFlowAbs");
      if (index4 >= 0)
      {
        Parameter byIndex = (Parameter) TheMeter.AllParameters.GetByIndex(index4);
        byIndex.ValueEprom = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.EEPROM);
        byIndex.ValueCPU = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.RAM);
      }
      int index5 = TheMeter.AllParameters.IndexOfKey((object) "MaxFlowAndPower.MaxFlowTimePoint");
      if (index5 >= 0)
      {
        Parameter byIndex = (Parameter) TheMeter.AllParameters.GetByIndex(index5);
        byIndex.ValueEprom = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.EEPROM);
        byIndex.ValueCPU = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.RAM);
      }
      int index6 = TheMeter.AllParameters.IndexOfKey((object) "MaxFlowAndPower.MaxPower");
      if (index6 >= 0)
      {
        Parameter byIndex = (Parameter) TheMeter.AllParameters.GetByIndex(index6);
        byIndex.ValueEprom = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.EEPROM);
        byIndex.ValueCPU = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.RAM);
      }
      int index7 = TheMeter.AllParameters.IndexOfKey((object) "MaxFlowAndPower.MaxPowerAbs");
      if (index7 >= 0)
      {
        Parameter byIndex = (Parameter) TheMeter.AllParameters.GetByIndex(index7);
        byIndex.ValueEprom = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.EEPROM);
        byIndex.ValueCPU = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.RAM);
      }
      int index8 = TheMeter.AllParameters.IndexOfKey((object) "MaxFlowAndPower.MaxPowerTimePoint");
      if (index8 >= 0)
      {
        Parameter byIndex = (Parameter) TheMeter.AllParameters.GetByIndex(index8);
        byIndex.ValueEprom = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.EEPROM);
        byIndex.ValueCPU = 0L;
        TheMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.RAM);
      }
      return true;
    }

    public static string GetAllEventTimes(Meter TheMeter)
    {
      StringBuilder stringBuilder = new StringBuilder(1000);
      if (TheMeter.MyCommunication != null)
      {
        Parameter allParameter = (Parameter) TheMeter.AllParameters[(object) "DefaultFunction.Sta_Secounds"];
        TheMeter.MyCommunication.ReadParameterValue(allParameter, MemoryLocation.RAM);
        DateTime dateTime = ZR_Calendar.Cal_GetDateTime((uint) allParameter.ValueCPU);
        stringBuilder.AppendLine(dateTime.ToString("dd.MM.yyyy HH.mm.ss") + " -> " + allParameter.FullName);
        stringBuilder.AppendLine();
      }
      foreach (Parameter TheParameter in (IEnumerable) TheMeter.AllParameters.Values)
      {
        if (TheParameter.Name.EndsWith("_0T") && TheParameter.ExistOnEprom)
        {
          if (TheMeter.MyCommunication != null)
            TheMeter.MyCommunication.ReadParameterValue(TheParameter, MemoryLocation.EEPROM);
          DateTime dateTime = ZR_Calendar.Cal_GetDateTime((uint) TheParameter.ValueEprom);
          stringBuilder.AppendLine(dateTime.ToString("dd.MM.yyyy HH.mm.ss") + " -> " + TheParameter.FullName);
        }
      }
      ByteField MemoryData;
      if (TheMeter.MyCommunication != null && TheMeter.MyCommunication.MyBus.ReadMemory(MemoryLocation.RAM, 512, 96, out MemoryData))
      {
        int num1 = 68;
        int index1 = num1;
        for (int index2 = 0; index2 < 10 && (MemoryData.Data[index1] != (byte) 212 || MemoryData.Data[index1 + 1] != (byte) 207); ++index2)
          index1 += 2;
        int index3 = num1;
        for (int index4 = 0; index4 < 10 && (MemoryData.Data[index3] != (byte) 104 || MemoryData.Data[index3 + 1] != (byte) 185); ++index4)
          index3 += 2;
        int num2 = num1 + 20;
        if (index1 < num2 && index3 < num2)
        {
          int num3 = 28;
          int num4 = num3 + index1 - num1;
          byte[] data1 = MemoryData.Data;
          int index5 = num4;
          int index6 = index5 + 1;
          int num5 = (int) data1[index5] + ((int) MemoryData.Data[index6] << 8);
          int num6 = num3 + index3 - num1;
          byte[] data2 = MemoryData.Data;
          int index7 = num6;
          int index8 = index7 + 1;
          int num7 = (int) data2[index7] + ((int) MemoryData.Data[index8] << 8) - num5;
          if (num7 < 0)
            num7 *= -1;
          if (num7 >= 32768)
            num7 = 65536 - num7;
          int num8 = num7 * 8;
          stringBuilder.AppendLine();
          stringBuilder.AppendLine("Zeit/Zyklus Differenz [ms]: " + num8.ToString());
          int num9 = num8 % 512;
          stringBuilder.AppendLine("Zeit/Zyklus Verschiebung [ms]: " + num9.ToString());
        }
      }
      return stringBuilder.ToString();
    }

    public static string[] GetMBusParameterList(Meter TheMeter)
    {
      ArrayList arrayList = new ArrayList();
      foreach (string listParameterName in TheMeter.MyMBusList.ShortListParameterNames)
        arrayList.Add((object) listParameterName);
      int count = arrayList.Count;
      foreach (string listParameterName in TheMeter.MyMBusList.FullListParameterNames)
        arrayList.Add((object) listParameterName);
      string[] mbusParameterList = new string[arrayList.Count + 1];
      for (int index = 0; index < mbusParameterList.Length; ++index)
        mbusParameterList[index] = index >= count ? (index != count ? (string) arrayList[index - 1] : "LongList:") : (string) arrayList[index];
      return mbusParameterList;
    }

    public static string[] GetMBusParameterListWithListInfo(Meter TheMeter)
    {
      ArrayList arrayList = new ArrayList();
      foreach (string listParameterName in TheMeter.MyMBusList.ShortListParameterNames)
        arrayList.Add((object) ("Short." + listParameterName));
      foreach (string listParameterName in TheMeter.MyMBusList.FullListParameterNames)
        arrayList.Add((object) ("Full." + listParameterName));
      if (TheMeter.MyMBusList.ActiveLoggerFunctionNumber >= (short) 0)
      {
        Function function = (Function) TheMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) TheMeter.MyMBusList.ActiveLoggerFunctionNumber];
        arrayList.Add((object) ("Logger." + function.Name + "(" + function.Number.ToString() + ")"));
        foreach (MBusLoggerInfo mbusLoggerInfo in (IEnumerable<MBusLoggerInfo>) TheMeter.MyMBusList.MBusLoggerInfos.Values)
        {
          if ((int) mbusLoggerInfo.FunctionNumber == (int) TheMeter.MyMBusList.ActiveLoggerFunctionNumber)
          {
            arrayList.Add((object) ("LoggerEvents " + mbusLoggerInfo.LoggerNumberOfEntrys.ToString()));
            break;
          }
        }
      }
      string[] listWithListInfo = new string[arrayList.Count];
      for (int index = 0; index < listWithListInfo.Length; ++index)
        listWithListInfo[index] = (string) arrayList[index];
      return listWithListInfo;
    }

    public static string[] GetFunctionNumbersList(Meter TheMeter)
    {
      string[] functionNumbersList = new string[TheMeter.MyFunctionTable.FunctionListByNumber.Count];
      for (int index = 0; index < functionNumbersList.Length; ++index)
        functionNumbersList[index] = ((ushort) TheMeter.MyFunctionTable.FunctionListByNumber.GetKey(index)).ToString();
      return functionNumbersList;
    }

    public static string[] GetFunctionList(Meter TheMeter)
    {
      ArrayList arrayList = new ArrayList();
      for (int index1 = 0; index1 < TheMeter.MyFunctionTable.FunctionList.Count; ++index1)
      {
        for (int index2 = 0; index2 < TheMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList.Count; ++index2)
        {
          if (index1 == (int) (short) TheMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList[index2])
          {
            int num = index2 + 1;
            arrayList.Add((object) ("M:" + num.ToString()));
          }
        }
        arrayList.Add((object) (((Function) TheMeter.MyFunctionTable.FunctionList[index1]).Name + "(" + ((Function) TheMeter.MyFunctionTable.FunctionList[index1]).Number.ToString() + ")"));
      }
      string[] functionList = new string[arrayList.Count];
      for (int index = 0; index < functionList.Length; ++index)
        functionList[index] = arrayList[index].ToString();
      return functionList;
    }

    public static bool IsEqualMap(Meter OriginalMeter, Meter CompareMeter)
    {
      if (OriginalMeter.MyLinker.LinkBlockList.Count != CompareMeter.MyLinker.LinkBlockList.Count)
        return false;
      for (int index = 0; index < OriginalMeter.MyLinker.LinkBlockList.Count; ++index)
      {
        if (((LinkBlock) OriginalMeter.MyLinker.LinkBlockList[index]).BlockStartAddress != ((LinkBlock) CompareMeter.MyLinker.LinkBlockList[index]).BlockStartAddress)
          return false;
      }
      return true;
    }

    public static bool IsEqualAllPointers(Meter OriginalMeter, Meter CompareMeter)
    {
      ArrayList linkPointerList = OriginalMeter.MyLinker.LinkPointerList;
      if (OriginalMeter.MyLinker.LinkPointerList.Count < CompareMeter.MyLinker.LinkPointerList.Count)
        linkPointerList = CompareMeter.MyLinker.LinkPointerList;
      for (int index1 = 0; index1 < linkPointerList.Count; ++index1)
      {
        CodeObject pointerObject = ((LinkPointer) OriginalMeter.MyLinker.LinkPointerList[index1]).PointerObject;
        for (int index2 = 0; index2 < pointerObject.Size; ++index2)
        {
          if ((int) OriginalMeter.Eprom[pointerObject.Address + index2] != (int) CompareMeter.Eprom[pointerObject.Address + index2])
            return false;
        }
      }
      return true;
    }

    public static bool IsEqualProtectedArea(Meter OriginalMeter, Meter CompareMeter)
    {
      OriginalMeter.GenerateWriteEnableLists(true);
      CompareMeter.GenerateWriteEnableLists(true);
      if (OriginalMeter.EpromWriteEnable.Length != CompareMeter.EpromWriteEnable.Length)
        return false;
      for (int index = 0; index < OriginalMeter.EpromWriteEnable.Length; ++index)
      {
        if (OriginalMeter.EpromWriteEnable[index] != CompareMeter.EpromWriteEnable[index])
          return false;
      }
      return true;
    }

    public static bool IsProtectedDataDiff(Meter OriginalMeter, Meter CompareMeter)
    {
      OriginalMeter.GenerateWriteEnableLists(true);
      CompareMeter.GenerateWriteEnableLists(true);
      for (int index1 = 6; index1 < OriginalMeter.MyLoggerStore.BlockStartAddress; ++index1)
      {
        if ((int) OriginalMeter.Eprom[index1] != (int) CompareMeter.Eprom[index1] && !OriginalMeter.EpromWriteEnable[index1])
        {
          bool flag = false;
          for (int index2 = 0; index2 < DataChecker.OldParameterToUse.Length; ++index2)
          {
            Parameter allParameter = (Parameter) CompareMeter.AllParameters[(object) DataChecker.OldParameterToUse[index2]];
            if (allParameter != null && index1 >= allParameter.Address && index1 < allParameter.Address + allParameter.Size)
            {
              flag = true;
              break;
            }
          }
          if (!flag)
            return false;
        }
      }
      return true;
    }

    public static bool IsLoggerEqualToTable(Meter TheMeter)
    {
      foreach (IntervalAndLogger allIntervallCode in TheMeter.MyLinker.AllIntervallCodes)
      {
        DataBaseAccess.LoggerEntryData loggerEntriesInfos = TheMeter.MyHandler.MyDataBaseAccess.GetLoggerEntriesInfos(allIntervallCode.FunctionNumber);
        if (loggerEntriesInfos.Entries != allIntervallCode.MaxEntries || loggerEntriesInfos.EntrySize != allIntervallCode.EntrySize || (long) loggerEntriesInfos.Interval != (long) allIntervallCode.Interval)
          return false;
      }
      return true;
    }

    public static bool IsEndTimeOk(Meter TheMeter, out string Info)
    {
      Info = "End time not found";
      int num = (int) ushort.MaxValue;
      if (TheMeter.DatabaseTime == DateTime.MinValue)
      {
        Info = "No database storage time found";
        return true;
      }
      int index1 = TheMeter.AllParameters.IndexOfKey((object) "EndOfBatterie.BattEndDate");
      if (index1 >= 0)
      {
        num = ZR_Calendar.Cal_GetDateTime((uint) ((Parameter) TheMeter.AllParameters.GetByIndex(index1)).ValueEprom).Year - TheMeter.DatabaseTime.Year;
        Info = "Battery end time years = " + num.ToString();
      }
      int index2 = TheMeter.AllParameters.IndexOfKey((object) "EichgÃ¼ltigkeitsdatumStatus.pEichgÃ¼ltigkeitsdatum");
      if (index2 >= 0)
      {
        num = ZR_Calendar.Cal_GetDateTime((uint) ((Parameter) TheMeter.AllParameters.GetByIndex(index2)).ValueEprom).Year - TheMeter.DatabaseTime.Year;
        Info = "Approval end time years = " + num.ToString();
      }
      return num == (int) ushort.MaxValue || num >= 5;
    }

    public static bool AreOverridesEqualToDatabase(Meter TheMeter)
    {
      ArrayList Overrides;
      if (!TheMeter.MyHandler.MyDataBaseAccess.GetOverrides(TheMeter.MyIdent.MeterInfoID, out Overrides))
        return false;
      foreach (OverrideParameter overrideParameter in Overrides)
      {
        if (overrideParameter.ParameterID == OverrideID.ReadingDate)
        {
          string stringValueWin = overrideParameter.GetStringValueWin();
          if (stringValueWin.Length > 2)
          {
            DateTime dateTime1 = DateTime.Parse(stringValueWin + ".2000");
            if (TheMeter.IsMeterResourceAvailable(MeterResources.DueDate))
            {
              DateTime dateTime2 = ZR_Calendar.Cal_GetDateTime((uint) ((Parameter) TheMeter.AllParametersByResource[(object) MeterResources.DueDate.ToString()]).ValueEprom);
              if (dateTime1.Day != dateTime2.Day || dateTime1.Month != dateTime2.Month)
                return false;
              break;
            }
            return TheMeter.MyHandler.MyDataBaseAccess.IsMeterInfoProperty(TheMeter.MyIdent.MeterInfoID, DataBaseAccess.MeterInfoProperties.OverridesChanged, (string) null);
          }
          break;
        }
      }
      return true;
    }

    public static bool GetMeterResourcesList(Meter TheMeter, StringBuilder TheText)
    {
      if (TheMeter == null || TheMeter.AvailableMeterResouces == null)
        return false;
      TheText.AppendLine("Resource Name ; Number of references");
      for (int index1 = 0; index1 < TheMeter.AvailableMeterResouces.Count; ++index1)
      {
        MeterResource byIndex = (MeterResource) TheMeter.AvailableMeterResouces.GetByIndex(index1);
        TheText.Append(byIndex.Name.PadRight(20) + ": ");
        TheText.Append(byIndex.SuppliedFromFunction.ToString("d3") + "  ");
        for (int index2 = 0; index2 < byIndex.UsedFromFunctions.Count; ++index2)
          TheText.Append(((ushort) byIndex.UsedFromFunctions[index2]).ToString("d3") + ";");
        TheText.AppendLine();
      }
      return true;
    }

    internal static void TryReloadWrongOldData(Meter ReadMeter, Meter WorkMeter)
    {
      for (int index = 0; index < DataChecker.OldParameterToUse.Length; ++index)
      {
        Parameter allParameter1 = (Parameter) ReadMeter.AllParameters[(object) DataChecker.OldParameterToUse[index]];
        Parameter allParameter2 = (Parameter) WorkMeter.AllParameters[(object) DataChecker.OldParameterToUse[index]];
        if (allParameter1 != null && allParameter2 != null)
        {
          allParameter2.ValueEprom = allParameter1.ValueEprom;
          allParameter2.UpdateByteList();
        }
      }
      WorkMeter.GenerateEprom();
    }
  }
}


--- DataSetAllErr8002Meters.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.DataSetAllErr8002Meters
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace GMM_Handler
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("DataSetAllErr8002Meters")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class DataSetAllErr8002Meters : DataSet
  {
    private DataSetAllErr8002Meters.Err8002MeterDataTable tableErr8002Meter;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public DataSetAllErr8002Meters()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected DataSetAllErr8002Meters(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (Err8002Meter)] != null)
            base.Tables.Add((DataTable) new DataSetAllErr8002Meters.Err8002MeterDataTable(dataSet.Tables[nameof (Err8002Meter)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DataSetAllErr8002Meters.Err8002MeterDataTable Err8002Meter => this.tableErr8002Meter;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public override DataSet Clone()
    {
      DataSetAllErr8002Meters allErr8002Meters = (DataSetAllErr8002Meters) base.Clone();
      allErr8002Meters.InitVars();
      allErr8002Meters.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) allErr8002Meters;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["Err8002Meter"] != null)
          base.Tables.Add((DataTable) new DataSetAllErr8002Meters.Err8002MeterDataTable(dataSet.Tables["Err8002Meter"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableErr8002Meter = (DataSetAllErr8002Meters.Err8002MeterDataTable) base.Tables["Err8002Meter"];
      if (!initTable || this.tableErr8002Meter == null)
        return;
      this.tableErr8002Meter.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (DataSetAllErr8002Meters);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/DataSetAllErr8002Meters.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableErr8002Meter = new DataSetAllErr8002Meters.Err8002MeterDataTable();
      base.Tables.Add((DataTable) this.tableErr8002Meter);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeErr8002Meter() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      DataSetAllErr8002Meters allErr8002Meters = new DataSetAllErr8002Meters();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = allErr8002Meters.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = allErr8002Meters.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class Err8002MeterDataTable : TypedTableBase<DataSetAllErr8002Meters.Err8002MeterRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnMeterInfoID;
      private DataColumn columnSerialNr;
      private DataColumn columnKurztext;
      private DataColumn columnProductionDate;
      private DataColumn columnApprovalDate;
      private DataColumn columnLastProgDate;
      private DataColumn columnMeterTypeID;
      private DataColumn columnSAP_Number;
      private DataColumn columnDeviceDataAvailable;
      private DataColumn columnChangeDateTime;
      private DataColumn columnLiegenschaft;
      private DataColumn columnNutzer;
      private DataColumn columnStichtag;
      private DataColumn columnAbweichenderStichtag;
      private DataColumn columnkWh_Stichtag;
      private DataColumn columnkWh_Aktuell;
      private DataColumn columnkWh_010710;
      private DataColumn columnkWh_010610;
      private DataColumn columnkWh_010510;
      private DataColumn columnkWh_010410;
      private DataColumn columnkWh_010310;
      private DataColumn columnkWh_010210;
      private DataColumn columnkWh_010110;
      private DataColumn columnkWh_011209;
      private DataColumn columnkWh_011109;
      private DataColumn columnkWh_011009;
      private DataColumn columnkWh_010909;
      private DataColumn columnkWh_010809;
      private DataColumn columnkWh_010709;
      private DataColumn columnkWh_010609;
      private DataColumn columnkWh_010509;
      private DataColumn columnkWh_010409;
      private DataColumn columnkWh_010309;
      private DataColumn columnkWh_010209;
      private DataColumn columnkWh_010109;
      private DataColumn columnMessbereich;
      private DataColumn columnMasseinheit;
      private DataColumn columnEinbaudatum;
      private DataColumn columnMontageauftrag;
      private DataColumn columnEinbauort;
      private DataColumn columnAusleser;
      private DataColumn columnKommentar;
      private DataColumn columnFehlerGefunden;
      private DataColumn columnFehlerBeseitigt;
      private DataColumn columnMax_QmPerHour1_Month;
      private DataColumn columnMax_QmPerHour1;
      private DataColumn columnMax_QmPerHour2_Month;
      private DataColumn columnMax_QmPerHour2;
      private DataColumn columnMax_kW1_Month;
      private DataColumn columnMax_kW1;
      private DataColumn columnMax_kW2_Month;
      private DataColumn columnMax_kW2;
      private DataColumn columnManuellGespeichert;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Err8002MeterDataTable()
      {
        this.TableName = "Err8002Meter";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal Err8002MeterDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected Err8002MeterDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SerialNrColumn => this.columnSerialNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn KurztextColumn => this.columnKurztext;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ProductionDateColumn => this.columnProductionDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ApprovalDateColumn => this.columnApprovalDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LastProgDateColumn => this.columnLastProgDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SAP_NumberColumn => this.columnSAP_Number;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DeviceDataAvailableColumn => this.columnDeviceDataAvailable;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeDateTimeColumn => this.columnChangeDateTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LiegenschaftColumn => this.columnLiegenschaft;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NutzerColumn => this.columnNutzer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StichtagColumn => this.columnStichtag;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AbweichenderStichtagColumn => this.columnAbweichenderStichtag;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_StichtagColumn => this.columnkWh_Stichtag;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_AktuellColumn => this.columnkWh_Aktuell;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010710Column => this.columnkWh_010710;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010610Column => this.columnkWh_010610;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010510Column => this.columnkWh_010510;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010410Column => this.columnkWh_010410;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010310Column => this.columnkWh_010310;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010210Column => this.columnkWh_010210;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010110Column => this.columnkWh_010110;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_011209Column => this.columnkWh_011209;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_011109Column => this.columnkWh_011109;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_011009Column => this.columnkWh_011009;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010909Column => this.columnkWh_010909;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010809Column => this.columnkWh_010809;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010709Column => this.columnkWh_010709;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010609Column => this.columnkWh_010609;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010509Column => this.columnkWh_010509;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010409Column => this.columnkWh_010409;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010309Column => this.columnkWh_010309;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010209Column => this.columnkWh_010209;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010109Column => this.columnkWh_010109;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MessbereichColumn => this.columnMessbereich;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MasseinheitColumn => this.columnMasseinheit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EinbaudatumColumn => this.columnEinbaudatum;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MontageauftragColumn => this.columnMontageauftrag;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EinbauortColumn => this.columnEinbauort;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AusleserColumn => this.columnAusleser;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn KommentarColumn => this.columnKommentar;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FehlerGefundenColumn => this.columnFehlerGefunden;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FehlerBeseitigtColumn => this.columnFehlerBeseitigt;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_QmPerHour1_MonthColumn => this.columnMax_QmPerHour1_Month;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_QmPerHour1Column => this.columnMax_QmPerHour1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_QmPerHour2_MonthColumn => this.columnMax_QmPerHour2_Month;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_QmPerHour2Column => this.columnMax_QmPerHour2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_kW1_MonthColumn => this.columnMax_kW1_Month;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_kW1Column => this.columnMax_kW1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_kW2_MonthColumn => this.columnMax_kW2_Month;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_kW2Column => this.columnMax_kW2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ManuellGespeichertColumn => this.columnManuellGespeichert;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetAllErr8002Meters.Err8002MeterRow this[int index]
      {
        get => (DataSetAllErr8002Meters.Err8002MeterRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetAllErr8002Meters.Err8002MeterRowChangeEventHandler Err8002MeterRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetAllErr8002Meters.Err8002MeterRowChangeEventHandler Err8002MeterRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetAllErr8002Meters.Err8002MeterRowChangeEventHandler Err8002MeterRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetAllErr8002Meters.Err8002MeterRowChangeEventHandler Err8002MeterRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddErr8002MeterRow(DataSetAllErr8002Meters.Err8002MeterRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetAllErr8002Meters.Err8002MeterRow AddErr8002MeterRow(
        int MeterID,
        int MeterInfoID,
        string SerialNr,
        string Kurztext,
        DateTime ProductionDate,
        DateTime ApprovalDate,
        DateTime LastProgDate,
        int MeterTypeID,
        string SAP_Number,
        short DeviceDataAvailable,
        DateTime ChangeDateTime,
        string Liegenschaft,
        int Nutzer,
        DateTime Stichtag,
        DateTime AbweichenderStichtag,
        int kWh_Stichtag,
        int kWh_Aktuell,
        int kWh_010710,
        int kWh_010610,
        int kWh_010510,
        int kWh_010410,
        int kWh_010310,
        int kWh_010210,
        int kWh_010110,
        int kWh_011209,
        int kWh_011109,
        int kWh_011009,
        int kWh_010909,
        int kWh_010809,
        int kWh_010709,
        int kWh_010609,
        int kWh_010509,
        int kWh_010409,
        int kWh_010309,
        int kWh_010209,
        int kWh_010109,
        string Messbereich,
        string Masseinheit,
        string Einbaudatum,
        string Montageauftrag,
        string Einbauort,
        string Ausleser,
        string Kommentar,
        bool FehlerGefunden,
        bool FehlerBeseitigt,
        DateTime Max_QmPerHour1_Month,
        double Max_QmPerHour1,
        DateTime Max_QmPerHour2_Month,
        double Max_QmPerHour2,
        DateTime Max_kW1_Month,
        double Max_kW1,
        DateTime Max_kW2_Month,
        double Max_kW2,
        bool ManuellGespeichert)
      {
        DataSetAllErr8002Meters.Err8002MeterRow row = (DataSetAllErr8002Meters.Err8002MeterRow) this.NewRow();
        object[] objArray = new object[54]
        {
          (object) MeterID,
          (object) MeterInfoID,
          (object) SerialNr,
          (object) Kurztext,
          (object) ProductionDate,
          (object) ApprovalDate,
          (object) LastProgDate,
          (object) MeterTypeID,
          (object) SAP_Number,
          (object) DeviceDataAvailable,
          (object) ChangeDateTime,
          (object) Liegenschaft,
          (object) Nutzer,
          (object) Stichtag,
          (object) AbweichenderStichtag,
          (object) kWh_Stichtag,
          (object) kWh_Aktuell,
          (object) kWh_010710,
          (object) kWh_010610,
          (object) kWh_010510,
          (object) kWh_010410,
          (object) kWh_010310,
          (object) kWh_010210,
          (object) kWh_010110,
          (object) kWh_011209,
          (object) kWh_011109,
          (object) kWh_011009,
          (object) kWh_010909,
          (object) kWh_010809,
          (object) kWh_010709,
          (object) kWh_010609,
          (object) kWh_010509,
          (object) kWh_010409,
          (object) kWh_010309,
          (object) kWh_010209,
          (object) kWh_010109,
          (object) Messbereich,
          (object) Masseinheit,
          (object) Einbaudatum,
          (object) Montageauftrag,
          (object) Einbauort,
          (object) Ausleser,
          (object) Kommentar,
          (object) FehlerGefunden,
          (object) FehlerBeseitigt,
          (object) Max_QmPerHour1_Month,
          (object) Max_QmPerHour1,
          (object) Max_QmPerHour2_Month,
          (object) Max_QmPerHour2,
          (object) Max_kW1_Month,
          (object) Max_kW1,
          (object) Max_kW2_Month,
          (object) Max_kW2,
          (object) ManuellGespeichert
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DataSetAllErr8002Meters.Err8002MeterDataTable err8002MeterDataTable = (DataSetAllErr8002Meters.Err8002MeterDataTable) base.Clone();
        err8002MeterDataTable.InitVars();
        return (DataTable) err8002MeterDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DataSetAllErr8002Meters.Err8002MeterDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnSerialNr = this.Columns["SerialNr"];
        this.columnKurztext = this.Columns["Kurztext"];
        this.columnProductionDate = this.Columns["ProductionDate"];
        this.columnApprovalDate = this.Columns["ApprovalDate"];
        this.columnLastProgDate = this.Columns["LastProgDate"];
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnSAP_Number = this.Columns["SAP_Number"];
        this.columnDeviceDataAvailable = this.Columns["DeviceDataAvailable"];
        this.columnChangeDateTime = this.Columns["ChangeDateTime"];
        this.columnLiegenschaft = this.Columns["Liegenschaft"];
        this.columnNutzer = this.Columns["Nutzer"];
        this.columnStichtag = this.Columns["Stichtag"];
        this.columnAbweichenderStichtag = this.Columns["AbweichenderStichtag"];
        this.columnkWh_Stichtag = this.Columns["kWh_Stichtag"];
        this.columnkWh_Aktuell = this.Columns["kWh_Aktuell"];
        this.columnkWh_010710 = this.Columns["kWh_010710"];
        this.columnkWh_010610 = this.Columns["kWh_010610"];
        this.columnkWh_010510 = this.Columns["kWh_010510"];
        this.columnkWh_010410 = this.Columns["kWh_010410"];
        this.columnkWh_010310 = this.Columns["kWh_010310"];
        this.columnkWh_010210 = this.Columns["kWh_010210"];
        this.columnkWh_010110 = this.Columns["kWh_010110"];
        this.columnkWh_011209 = this.Columns["kWh_011209"];
        this.columnkWh_011109 = this.Columns["kWh_011109"];
        this.columnkWh_011009 = this.Columns["kWh_011009"];
        this.columnkWh_010909 = this.Columns["kWh_010909"];
        this.columnkWh_010809 = this.Columns["kWh_010809"];
        this.columnkWh_010709 = this.Columns["kWh_010709"];
        this.columnkWh_010609 = this.Columns["kWh_010609"];
        this.columnkWh_010509 = this.Columns["kWh_010509"];
        this.columnkWh_010409 = this.Columns["kWh_010409"];
        this.columnkWh_010309 = this.Columns["kWh_010309"];
        this.columnkWh_010209 = this.Columns["kWh_010209"];
        this.columnkWh_010109 = this.Columns["kWh_010109"];
        this.columnMessbereich = this.Columns["Messbereich"];
        this.columnMasseinheit = this.Columns["Masseinheit"];
        this.columnEinbaudatum = this.Columns["Einbaudatum"];
        this.columnMontageauftrag = this.Columns["Montageauftrag"];
        this.columnEinbauort = this.Columns["Einbauort"];
        this.columnAusleser = this.Columns["Ausleser"];
        this.columnKommentar = this.Columns["Kommentar"];
        this.columnFehlerGefunden = this.Columns["FehlerGefunden"];
        this.columnFehlerBeseitigt = this.Columns["FehlerBeseitigt"];
        this.columnMax_QmPerHour1_Month = this.Columns["Max_QmPerHour1_Month"];
        this.columnMax_QmPerHour1 = this.Columns["Max_QmPerHour1"];
        this.columnMax_QmPerHour2_Month = this.Columns["Max_QmPerHour2_Month"];
        this.columnMax_QmPerHour2 = this.Columns["Max_QmPerHour2"];
        this.columnMax_kW1_Month = this.Columns["Max_kW1_Month"];
        this.columnMax_kW1 = this.Columns["Max_kW1"];
        this.columnMax_kW2_Month = this.Columns["Max_kW2_Month"];
        this.columnMax_kW2 = this.Columns["Max_kW2"];
        this.columnManuellGespeichert = this.Columns["ManuellGespeichert"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnSerialNr = new DataColumn("SerialNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNr);
        this.columnKurztext = new DataColumn("Kurztext", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKurztext);
        this.columnProductionDate = new DataColumn("ProductionDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnProductionDate);
        this.columnApprovalDate = new DataColumn("ApprovalDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalDate);
        this.columnLastProgDate = new DataColumn("LastProgDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLastProgDate);
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnSAP_Number = new DataColumn("SAP_Number", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSAP_Number);
        this.columnDeviceDataAvailable = new DataColumn("DeviceDataAvailable", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeviceDataAvailable);
        this.columnChangeDateTime = new DataColumn("ChangeDateTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeDateTime);
        this.columnLiegenschaft = new DataColumn("Liegenschaft", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLiegenschaft);
        this.columnNutzer = new DataColumn("Nutzer", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNutzer);
        this.columnStichtag = new DataColumn("Stichtag", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStichtag);
        this.columnAbweichenderStichtag = new DataColumn("AbweichenderStichtag", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAbweichenderStichtag);
        this.columnkWh_Stichtag = new DataColumn("kWh_Stichtag", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_Stichtag);
        this.columnkWh_Aktuell = new DataColumn("kWh_Aktuell", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_Aktuell);
        this.columnkWh_010710 = new DataColumn("kWh_010710", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010710);
        this.columnkWh_010610 = new DataColumn("kWh_010610", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010610);
        this.columnkWh_010510 = new DataColumn("kWh_010510", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010510);
        this.columnkWh_010410 = new DataColumn("kWh_010410", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010410);
        this.columnkWh_010310 = new DataColumn("kWh_010310", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010310);
        this.columnkWh_010210 = new DataColumn("kWh_010210", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010210);
        this.columnkWh_010110 = new DataColumn("kWh_010110", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010110);
        this.columnkWh_011209 = new DataColumn("kWh_011209", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_011209);
        this.columnkWh_011109 = new DataColumn("kWh_011109", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_011109);
        this.columnkWh_011009 = new DataColumn("kWh_011009", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_011009);
        this.columnkWh_010909 = new DataColumn("kWh_010909", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010909);
        this.columnkWh_010809 = new DataColumn("kWh_010809", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010809);
        this.columnkWh_010709 = new DataColumn("kWh_010709", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010709);
        this.columnkWh_010609 = new DataColumn("kWh_010609", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010609);
        this.columnkWh_010509 = new DataColumn("kWh_010509", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010509);
        this.columnkWh_010409 = new DataColumn("kWh_010409", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010409);
        this.columnkWh_010309 = new DataColumn("kWh_010309", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010309);
        this.columnkWh_010209 = new DataColumn("kWh_010209", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010209);
        this.columnkWh_010109 = new DataColumn("kWh_010109", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010109);
        this.columnMessbereich = new DataColumn("Messbereich", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMessbereich);
        this.columnMasseinheit = new DataColumn("Masseinheit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMasseinheit);
        this.columnEinbaudatum = new DataColumn("Einbaudatum", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEinbaudatum);
        this.columnMontageauftrag = new DataColumn("Montageauftrag", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMontageauftrag);
        this.columnEinbauort = new DataColumn("Einbauort", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEinbauort);
        this.columnAusleser = new DataColumn("Ausleser", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAusleser);
        this.columnKommentar = new DataColumn("Kommentar", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKommentar);
        this.columnFehlerGefunden = new DataColumn("FehlerGefunden", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFehlerGefunden);
        this.columnFehlerBeseitigt = new DataColumn("FehlerBeseitigt", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFehlerBeseitigt);
        this.columnMax_QmPerHour1_Month = new DataColumn("Max_QmPerHour1_Month", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_QmPerHour1_Month);
        this.columnMax_QmPerHour1 = new DataColumn("Max_QmPerHour1", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_QmPerHour1);
        this.columnMax_QmPerHour2_Month = new DataColumn("Max_QmPerHour2_Month", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_QmPerHour2_Month);
        this.columnMax_QmPerHour2 = new DataColumn("Max_QmPerHour2", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_QmPerHour2);
        this.columnMax_kW1_Month = new DataColumn("Max_kW1_Month", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_kW1_Month);
        this.columnMax_kW1 = new DataColumn("Max_kW1", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_kW1);
        this.columnMax_kW2_Month = new DataColumn("Max_kW2_Month", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_kW2_Month);
        this.columnMax_kW2 = new DataColumn("Max_kW2", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_kW2);
        this.columnManuellGespeichert = new DataColumn("ManuellGespeichert", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnManuellGespeichert);
        this.columnSerialNr.MaxLength = 50;
        this.columnLastProgDate.Caption = "ApprovalDate";
        this.columnSAP_Number.Caption = "PPSArtikelNr";
        this.columnSAP_Number.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetAllErr8002Meters.Err8002MeterRow NewErr8002MeterRow()
      {
        return (DataSetAllErr8002Meters.Err8002MeterRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DataSetAllErr8002Meters.Err8002MeterRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DataSetAllErr8002Meters.Err8002MeterRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.Err8002MeterRowChanged == null)
          return;
        this.Err8002MeterRowChanged((object) this, new DataSetAllErr8002Meters.Err8002MeterRowChangeEvent((DataSetAllErr8002Meters.Err8002MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.Err8002MeterRowChanging == null)
          return;
        this.Err8002MeterRowChanging((object) this, new DataSetAllErr8002Meters.Err8002MeterRowChangeEvent((DataSetAllErr8002Meters.Err8002MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.Err8002MeterRowDeleted == null)
          return;
        this.Err8002MeterRowDeleted((object) this, new DataSetAllErr8002Meters.Err8002MeterRowChangeEvent((DataSetAllErr8002Meters.Err8002MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.Err8002MeterRowDeleting == null)
          return;
        this.Err8002MeterRowDeleting((object) this, new DataSetAllErr8002Meters.Err8002MeterRowChangeEvent((DataSetAllErr8002Meters.Err8002MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveErr8002MeterRow(DataSetAllErr8002Meters.Err8002MeterRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DataSetAllErr8002Meters allErr8002Meters = new DataSetAllErr8002Meters();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = allErr8002Meters.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (Err8002MeterDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = allErr8002Meters.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void Err8002MeterRowChangeEventHandler(
      object sender,
      DataSetAllErr8002Meters.Err8002MeterRowChangeEvent e);

    public class Err8002MeterRow : DataRow
    {
      private DataSetAllErr8002Meters.Err8002MeterDataTable tableErr8002Meter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal Err8002MeterRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableErr8002Meter = (DataSetAllErr8002Meters.Err8002MeterDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterID
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.MeterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterID' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoID
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.MeterInfoIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterInfoID' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SerialNr
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.SerialNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SerialNr' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.SerialNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Kurztext
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.KurztextColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Kurztext' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.KurztextColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ProductionDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.ProductionDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ProductionDate' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.ProductionDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ApprovalDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.ApprovalDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalDate' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.ApprovalDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime LastProgDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.LastProgDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LastProgDate' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.LastProgDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.MeterTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterTypeID' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SAP_Number
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.SAP_NumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SAP_Number' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.SAP_NumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short DeviceDataAvailable
      {
        get
        {
          try
          {
            return (short) this[this.tableErr8002Meter.DeviceDataAvailableColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DeviceDataAvailable' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.DeviceDataAvailableColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ChangeDateTime
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.ChangeDateTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChangeDateTime' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.ChangeDateTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Liegenschaft
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.LiegenschaftColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Liegenschaft' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.LiegenschaftColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Nutzer
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.NutzerColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Nutzer' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.NutzerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Stichtag
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.StichtagColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Stichtag' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.StichtagColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime AbweichenderStichtag
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.AbweichenderStichtagColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AbweichenderStichtag' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.AbweichenderStichtagColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_Stichtag
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_StichtagColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_Stichtag' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_StichtagColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_Aktuell
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_AktuellColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_Aktuell' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_AktuellColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010710
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010710Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010710' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010710Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010610
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010610Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010610' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010610Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010510
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010510Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010510' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010510Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010410
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010410Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010410' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010410Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010310
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010310Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010310' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010310Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010210
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010210Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010210' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010210Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010110
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010110Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010110' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010110Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_011209
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_011209Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_011209' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_011209Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_011109
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_011109Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_011109' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_011109Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_011009
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_011009Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_011009' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_011009Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010909
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010909Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010909' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010909Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010809
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010809Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010809' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010809Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010709
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010709Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010709' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010709Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010609
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010609Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010609' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010609Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010509
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010509Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010509' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010509Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010409
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010409Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010409' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010409Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010309
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010309Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010309' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010309Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010209
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010209Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010209' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010209Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010109
      {
        get
        {
          try
          {
            return (int) this[this.tableErr8002Meter.kWh_010109Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010109' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.kWh_010109Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Messbereich
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.MessbereichColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Messbereich' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.MessbereichColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Masseinheit
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.MasseinheitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Masseinheit' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.MasseinheitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Einbaudatum
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.EinbaudatumColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Einbaudatum' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.EinbaudatumColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Montageauftrag
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.MontageauftragColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Montageauftrag' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.MontageauftragColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Einbauort
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.EinbauortColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Einbauort' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.EinbauortColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Ausleser
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.AusleserColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Ausleser' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.AusleserColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Kommentar
      {
        get
        {
          try
          {
            return (string) this[this.tableErr8002Meter.KommentarColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Kommentar' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.KommentarColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool FehlerGefunden
      {
        get
        {
          try
          {
            return (bool) this[this.tableErr8002Meter.FehlerGefundenColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FehlerGefunden' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.FehlerGefundenColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool FehlerBeseitigt
      {
        get
        {
          try
          {
            return (bool) this[this.tableErr8002Meter.FehlerBeseitigtColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FehlerBeseitigt' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.FehlerBeseitigtColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Max_QmPerHour1_Month
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.Max_QmPerHour1_MonthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_QmPerHour1_Month' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.Max_QmPerHour1_MonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Max_QmPerHour1
      {
        get
        {
          try
          {
            return (double) this[this.tableErr8002Meter.Max_QmPerHour1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_QmPerHour1' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.Max_QmPerHour1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Max_QmPerHour2_Month
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.Max_QmPerHour2_MonthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_QmPerHour2_Month' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.Max_QmPerHour2_MonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Max_QmPerHour2
      {
        get
        {
          try
          {
            return (double) this[this.tableErr8002Meter.Max_QmPerHour2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_QmPerHour2' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.Max_QmPerHour2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Max_kW1_Month
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.Max_kW1_MonthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_kW1_Month' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.Max_kW1_MonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Max_kW1
      {
        get
        {
          try
          {
            return (double) this[this.tableErr8002Meter.Max_kW1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_kW1' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.Max_kW1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Max_kW2_Month
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableErr8002Meter.Max_kW2_MonthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_kW2_Month' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.Max_kW2_MonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Max_kW2
      {
        get
        {
          try
          {
            return (double) this[this.tableErr8002Meter.Max_kW2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_kW2' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.Max_kW2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool ManuellGespeichert
      {
        get
        {
          try
          {
            return (bool) this[this.tableErr8002Meter.ManuellGespeichertColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ManuellGespeichert' in table 'Err8002Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableErr8002Meter.ManuellGespeichertColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterIDNull() => this.IsNull(this.tableErr8002Meter.MeterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterIDNull() => this[this.tableErr8002Meter.MeterIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterInfoIDNull() => this.IsNull(this.tableErr8002Meter.MeterInfoIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterInfoIDNull()
      {
        this[this.tableErr8002Meter.MeterInfoIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSerialNrNull() => this.IsNull(this.tableErr8002Meter.SerialNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSerialNrNull() => this[this.tableErr8002Meter.SerialNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsKurztextNull() => this.IsNull(this.tableErr8002Meter.KurztextColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetKurztextNull() => this[this.tableErr8002Meter.KurztextColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsProductionDateNull()
      {
        return this.IsNull(this.tableErr8002Meter.ProductionDateColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetProductionDateNull()
      {
        this[this.tableErr8002Meter.ProductionDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsApprovalDateNull() => this.IsNull(this.tableErr8002Meter.ApprovalDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetApprovalDateNull()
      {
        this[this.tableErr8002Meter.ApprovalDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLastProgDateNull() => this.IsNull(this.tableErr8002Meter.LastProgDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLastProgDateNull()
      {
        this[this.tableErr8002Meter.LastProgDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterTypeIDNull() => this.IsNull(this.tableErr8002Meter.MeterTypeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterTypeIDNull()
      {
        this[this.tableErr8002Meter.MeterTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSAP_NumberNull() => this.IsNull(this.tableErr8002Meter.SAP_NumberColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSAP_NumberNull()
      {
        this[this.tableErr8002Meter.SAP_NumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDeviceDataAvailableNull()
      {
        return this.IsNull(this.tableErr8002Meter.DeviceDataAvailableColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDeviceDataAvailableNull()
      {
        this[this.tableErr8002Meter.DeviceDataAvailableColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChangeDateTimeNull()
      {
        return this.IsNull(this.tableErr8002Meter.ChangeDateTimeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChangeDateTimeNull()
      {
        this[this.tableErr8002Meter.ChangeDateTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLiegenschaftNull() => this.IsNull(this.tableErr8002Meter.LiegenschaftColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLiegenschaftNull()
      {
        this[this.tableErr8002Meter.LiegenschaftColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNutzerNull() => this.IsNull(this.tableErr8002Meter.NutzerColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNutzerNull() => this[this.tableErr8002Meter.NutzerColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStichtagNull() => this.IsNull(this.tableErr8002Meter.StichtagColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStichtagNull() => this[this.tableErr8002Meter.StichtagColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAbweichenderStichtagNull()
      {
        return this.IsNull(this.tableErr8002Meter.AbweichenderStichtagColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAbweichenderStichtagNull()
      {
        this[this.tableErr8002Meter.AbweichenderStichtagColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_StichtagNull() => this.IsNull(this.tableErr8002Meter.kWh_StichtagColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_StichtagNull()
      {
        this[this.tableErr8002Meter.kWh_StichtagColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_AktuellNull() => this.IsNull(this.tableErr8002Meter.kWh_AktuellColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_AktuellNull()
      {
        this[this.tableErr8002Meter.kWh_AktuellColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010710Null() => this.IsNull(this.tableErr8002Meter.kWh_010710Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010710Null()
      {
        this[this.tableErr8002Meter.kWh_010710Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010610Null() => this.IsNull(this.tableErr8002Meter.kWh_010610Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010610Null()
      {
        this[this.tableErr8002Meter.kWh_010610Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010510Null() => this.IsNull(this.tableErr8002Meter.kWh_010510Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010510Null()
      {
        this[this.tableErr8002Meter.kWh_010510Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010410Null() => this.IsNull(this.tableErr8002Meter.kWh_010410Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010410Null()
      {
        this[this.tableErr8002Meter.kWh_010410Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010310Null() => this.IsNull(this.tableErr8002Meter.kWh_010310Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010310Null()
      {
        this[this.tableErr8002Meter.kWh_010310Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010210Null() => this.IsNull(this.tableErr8002Meter.kWh_010210Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010210Null()
      {
        this[this.tableErr8002Meter.kWh_010210Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010110Null() => this.IsNull(this.tableErr8002Meter.kWh_010110Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010110Null()
      {
        this[this.tableErr8002Meter.kWh_010110Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_011209Null() => this.IsNull(this.tableErr8002Meter.kWh_011209Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_011209Null()
      {
        this[this.tableErr8002Meter.kWh_011209Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_011109Null() => this.IsNull(this.tableErr8002Meter.kWh_011109Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_011109Null()
      {
        this[this.tableErr8002Meter.kWh_011109Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_011009Null() => this.IsNull(this.tableErr8002Meter.kWh_011009Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_011009Null()
      {
        this[this.tableErr8002Meter.kWh_011009Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010909Null() => this.IsNull(this.tableErr8002Meter.kWh_010909Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010909Null()
      {
        this[this.tableErr8002Meter.kWh_010909Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010809Null() => this.IsNull(this.tableErr8002Meter.kWh_010809Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010809Null()
      {
        this[this.tableErr8002Meter.kWh_010809Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010709Null() => this.IsNull(this.tableErr8002Meter.kWh_010709Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010709Null()
      {
        this[this.tableErr8002Meter.kWh_010709Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010609Null() => this.IsNull(this.tableErr8002Meter.kWh_010609Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010609Null()
      {
        this[this.tableErr8002Meter.kWh_010609Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010509Null() => this.IsNull(this.tableErr8002Meter.kWh_010509Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010509Null()
      {
        this[this.tableErr8002Meter.kWh_010509Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010409Null() => this.IsNull(this.tableErr8002Meter.kWh_010409Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010409Null()
      {
        this[this.tableErr8002Meter.kWh_010409Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010309Null() => this.IsNull(this.tableErr8002Meter.kWh_010309Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010309Null()
      {
        this[this.tableErr8002Meter.kWh_010309Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010209Null() => this.IsNull(this.tableErr8002Meter.kWh_010209Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010209Null()
      {
        this[this.tableErr8002Meter.kWh_010209Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010109Null() => this.IsNull(this.tableErr8002Meter.kWh_010109Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010109Null()
      {
        this[this.tableErr8002Meter.kWh_010109Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMessbereichNull() => this.IsNull(this.tableErr8002Meter.MessbereichColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMessbereichNull()
      {
        this[this.tableErr8002Meter.MessbereichColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMasseinheitNull() => this.IsNull(this.tableErr8002Meter.MasseinheitColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMasseinheitNull()
      {
        this[this.tableErr8002Meter.MasseinheitColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEinbaudatumNull() => this.IsNull(this.tableErr8002Meter.EinbaudatumColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEinbaudatumNull()
      {
        this[this.tableErr8002Meter.EinbaudatumColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMontageauftragNull()
      {
        return this.IsNull(this.tableErr8002Meter.MontageauftragColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMontageauftragNull()
      {
        this[this.tableErr8002Meter.MontageauftragColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEinbauortNull() => this.IsNull(this.tableErr8002Meter.EinbauortColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEinbauortNull()
      {
        this[this.tableErr8002Meter.EinbauortColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAusleserNull() => this.IsNull(this.tableErr8002Meter.AusleserColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAusleserNull() => this[this.tableErr8002Meter.AusleserColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsKommentarNull() => this.IsNull(this.tableErr8002Meter.KommentarColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetKommentarNull()
      {
        this[this.tableErr8002Meter.KommentarColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFehlerGefundenNull()
      {
        return this.IsNull(this.tableErr8002Meter.FehlerGefundenColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFehlerGefundenNull()
      {
        this[this.tableErr8002Meter.FehlerGefundenColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFehlerBeseitigtNull()
      {
        return this.IsNull(this.tableErr8002Meter.FehlerBeseitigtColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFehlerBeseitigtNull()
      {
        this[this.tableErr8002Meter.FehlerBeseitigtColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_QmPerHour1_MonthNull()
      {
        return this.IsNull(this.tableErr8002Meter.Max_QmPerHour1_MonthColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_QmPerHour1_MonthNull()
      {
        this[this.tableErr8002Meter.Max_QmPerHour1_MonthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_QmPerHour1Null()
      {
        return this.IsNull(this.tableErr8002Meter.Max_QmPerHour1Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_QmPerHour1Null()
      {
        this[this.tableErr8002Meter.Max_QmPerHour1Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_QmPerHour2_MonthNull()
      {
        return this.IsNull(this.tableErr8002Meter.Max_QmPerHour2_MonthColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_QmPerHour2_MonthNull()
      {
        this[this.tableErr8002Meter.Max_QmPerHour2_MonthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_QmPerHour2Null()
      {
        return this.IsNull(this.tableErr8002Meter.Max_QmPerHour2Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_QmPerHour2Null()
      {
        this[this.tableErr8002Meter.Max_QmPerHour2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_kW1_MonthNull() => this.IsNull(this.tableErr8002Meter.Max_kW1_MonthColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_kW1_MonthNull()
      {
        this[this.tableErr8002Meter.Max_kW1_MonthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_kW1Null() => this.IsNull(this.tableErr8002Meter.Max_kW1Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_kW1Null() => this[this.tableErr8002Meter.Max_kW1Column] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_kW2_MonthNull() => this.IsNull(this.tableErr8002Meter.Max_kW2_MonthColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_kW2_MonthNull()
      {
        this[this.tableErr8002Meter.Max_kW2_MonthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_kW2Null() => this.IsNull(this.tableErr8002Meter.Max_kW2Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_kW2Null() => this[this.tableErr8002Meter.Max_kW2Column] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsManuellGespeichertNull()
      {
        return this.IsNull(this.tableErr8002Meter.ManuellGespeichertColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetManuellGespeichertNull()
      {
        this[this.tableErr8002Meter.ManuellGespeichertColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class Err8002MeterRowChangeEvent : EventArgs
    {
      private DataSetAllErr8002Meters.Err8002MeterRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Err8002MeterRowChangeEvent(
        DataSetAllErr8002Meters.Err8002MeterRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetAllErr8002Meters.Err8002MeterRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}


--- DataSetGMM_Handler.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.DataSetGMM_Handler
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace GMM_Handler
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("DataSetGMM_Handler")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class DataSetGMM_Handler : DataSet
  {
    private DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable tableMeterInfoHardwareTypeJoined;
    private DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable tableMeterInfoHardwareTypeMTypeZelsiusJoined;
    private DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable tableCodeRuntimeCodeJoined;
    private DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable tableCodeDisplayCodeJoined;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public DataSetGMM_Handler()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected DataSetGMM_Handler(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (MeterInfoHardwareTypeJoined)] != null)
            base.Tables.Add((DataTable) new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable(dataSet.Tables[nameof (MeterInfoHardwareTypeJoined)]));
          if (dataSet.Tables[nameof (MeterInfoHardwareTypeMTypeZelsiusJoined)] != null)
            base.Tables.Add((DataTable) new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable(dataSet.Tables[nameof (MeterInfoHardwareTypeMTypeZelsiusJoined)]));
          if (dataSet.Tables[nameof (CodeRuntimeCodeJoined)] != null)
            base.Tables.Add((DataTable) new DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable(dataSet.Tables[nameof (CodeRuntimeCodeJoined)]));
          if (dataSet.Tables[nameof (CodeDisplayCodeJoined)] != null)
            base.Tables.Add((DataTable) new DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable(dataSet.Tables[nameof (CodeDisplayCodeJoined)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable MeterInfoHardwareTypeJoined
    {
      get => this.tableMeterInfoHardwareTypeJoined;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable MeterInfoHardwareTypeMTypeZelsiusJoined
    {
      get => this.tableMeterInfoHardwareTypeMTypeZelsiusJoined;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable CodeRuntimeCodeJoined
    {
      get => this.tableCodeRuntimeCodeJoined;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable CodeDisplayCodeJoined
    {
      get => this.tableCodeDisplayCodeJoined;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public override DataSet Clone()
    {
      DataSetGMM_Handler dataSetGmmHandler = (DataSetGMM_Handler) base.Clone();
      dataSetGmmHandler.InitVars();
      dataSetGmmHandler.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) dataSetGmmHandler;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["MeterInfoHardwareTypeJoined"] != null)
          base.Tables.Add((DataTable) new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable(dataSet.Tables["MeterInfoHardwareTypeJoined"]));
        if (dataSet.Tables["MeterInfoHardwareTypeMTypeZelsiusJoined"] != null)
          base.Tables.Add((DataTable) new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable(dataSet.Tables["MeterInfoHardwareTypeMTypeZelsiusJoined"]));
        if (dataSet.Tables["CodeRuntimeCodeJoined"] != null)
          base.Tables.Add((DataTable) new DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable(dataSet.Tables["CodeRuntimeCodeJoined"]));
        if (dataSet.Tables["CodeDisplayCodeJoined"] != null)
          base.Tables.Add((DataTable) new DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable(dataSet.Tables["CodeDisplayCodeJoined"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableMeterInfoHardwareTypeJoined = (DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable) base.Tables["MeterInfoHardwareTypeJoined"];
      if (initTable && this.tableMeterInfoHardwareTypeJoined != null)
        this.tableMeterInfoHardwareTypeJoined.InitVars();
      this.tableMeterInfoHardwareTypeMTypeZelsiusJoined = (DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable) base.Tables["MeterInfoHardwareTypeMTypeZelsiusJoined"];
      if (initTable && this.tableMeterInfoHardwareTypeMTypeZelsiusJoined != null)
        this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.InitVars();
      this.tableCodeRuntimeCodeJoined = (DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable) base.Tables["CodeRuntimeCodeJoined"];
      if (initTable && this.tableCodeRuntimeCodeJoined != null)
        this.tableCodeRuntimeCodeJoined.InitVars();
      this.tableCodeDisplayCodeJoined = (DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable) base.Tables["CodeDisplayCodeJoined"];
      if (!initTable || this.tableCodeDisplayCodeJoined == null)
        return;
      this.tableCodeDisplayCodeJoined.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (DataSetGMM_Handler);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/DataSet1.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableMeterInfoHardwareTypeJoined = new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable();
      base.Tables.Add((DataTable) this.tableMeterInfoHardwareTypeJoined);
      this.tableMeterInfoHardwareTypeMTypeZelsiusJoined = new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable();
      base.Tables.Add((DataTable) this.tableMeterInfoHardwareTypeMTypeZelsiusJoined);
      this.tableCodeRuntimeCodeJoined = new DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable();
      base.Tables.Add((DataTable) this.tableCodeRuntimeCodeJoined);
      this.tableCodeDisplayCodeJoined = new DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable();
      base.Tables.Add((DataTable) this.tableCodeDisplayCodeJoined);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterInfoHardwareTypeJoined() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterInfoHardwareTypeMTypeZelsiusJoined() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeCodeRuntimeCodeJoined() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeCodeDisplayCodeJoined() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      DataSetGMM_Handler dataSetGmmHandler = new DataSetGMM_Handler();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = dataSetGmmHandler.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = dataSetGmmHandler.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterInfoHardwareTypeJoinedRowChangeEventHandler(
      object sender,
      DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEventHandler(
      object sender,
      DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void CodeRuntimeCodeJoinedRowChangeEventHandler(
      object sender,
      DataSetGMM_Handler.CodeRuntimeCodeJoinedRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void CodeDisplayCodeJoinedRowChangeEventHandler(
      object sender,
      DataSetGMM_Handler.CodeDisplayCodeJoinedRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterInfoHardwareTypeJoinedDataTable : 
      TypedTableBase<DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow>
    {
      private DataColumn columnHardwareTypeID;
      private DataColumn columnMapID;
      private DataColumn columnLinkerTableID;
      private DataColumn columnFirmwareVersion;
      private DataColumn columnHardwareName;
      private DataColumn columnHardwareVersion;
      private DataColumn columnHardwareResource;
      private DataColumn columnextEEPSize;
      private DataColumn columnmaxStackSize;
      private DataColumn columnRAMSize;
      private DataColumn columnRAMStartAdr;
      private DataColumn columnintEEPStartAdr;
      private DataColumn columnintEEPSize;
      private DataColumn columnDescription;
      private DataColumn columnTestinfo;
      private DataColumn columnHardwareOptions;
      private DataColumn columnMeterInfoID;
      private DataColumn columnMeterHardwareID;
      private DataColumn columnMeterTypeID;
      private DataColumn columnPPSArtikelNr;
      private DataColumn columnDefaultFunctionNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterInfoHardwareTypeJoinedDataTable()
      {
        this.TableName = "MeterInfoHardwareTypeJoined";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterInfoHardwareTypeJoinedDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterInfoHardwareTypeJoinedDataTable(
        SerializationInfo info,
        StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LinkerTableIDColumn => this.columnLinkerTableID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FirmwareVersionColumn => this.columnFirmwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareNameColumn => this.columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareVersionColumn => this.columnHardwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareResourceColumn => this.columnHardwareResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn extEEPSizeColumn => this.columnextEEPSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn maxStackSizeColumn => this.columnmaxStackSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RAMSizeColumn => this.columnRAMSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RAMStartAdrColumn => this.columnRAMStartAdr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn intEEPStartAdrColumn => this.columnintEEPStartAdr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn intEEPSizeColumn => this.columnintEEPSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TestinfoColumn => this.columnTestinfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareOptionsColumn => this.columnHardwareOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterHardwareIDColumn => this.columnMeterHardwareID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPSArtikelNrColumn => this.columnPPSArtikelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DefaultFunctionNrColumn => this.columnDefaultFunctionNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow this[int index]
      {
        get => (DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRowChangeEventHandler MeterInfoHardwareTypeJoinedRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRowChangeEventHandler MeterInfoHardwareTypeJoinedRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRowChangeEventHandler MeterInfoHardwareTypeJoinedRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRowChangeEventHandler MeterInfoHardwareTypeJoinedRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterInfoHardwareTypeJoinedRow(
        DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow AddMeterInfoHardwareTypeJoinedRow(
        int HardwareTypeID,
        int MapID,
        int LinkerTableID,
        int FirmwareVersion,
        string HardwareName,
        int HardwareVersion,
        string HardwareResource,
        int extEEPSize,
        short maxStackSize,
        short RAMSize,
        short RAMStartAdr,
        short intEEPStartAdr,
        short intEEPSize,
        string Description,
        string Testinfo,
        string HardwareOptions,
        int MeterInfoID,
        int MeterHardwareID,
        int MeterTypeID,
        string PPSArtikelNr,
        string DefaultFunctionNr)
      {
        DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow row = (DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow) this.NewRow();
        object[] objArray = new object[21]
        {
          (object) HardwareTypeID,
          (object) MapID,
          (object) LinkerTableID,
          (object) FirmwareVersion,
          (object) HardwareName,
          (object) HardwareVersion,
          (object) HardwareResource,
          (object) extEEPSize,
          (object) maxStackSize,
          (object) RAMSize,
          (object) RAMStartAdr,
          (object) intEEPStartAdr,
          (object) intEEPSize,
          (object) Description,
          (object) Testinfo,
          (object) HardwareOptions,
          (object) MeterInfoID,
          (object) MeterHardwareID,
          (object) MeterTypeID,
          (object) PPSArtikelNr,
          (object) DefaultFunctionNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow FindByMeterInfoIDHardwareTypeID(
        int MeterInfoID,
        int HardwareTypeID)
      {
        return (DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow) this.Rows.Find(new object[2]
        {
          (object) MeterInfoID,
          (object) HardwareTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable typeJoinedDataTable = (DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable) base.Clone();
        typeJoinedDataTable.InitVars();
        return (DataTable) typeJoinedDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
        this.columnMapID = this.Columns["MapID"];
        this.columnLinkerTableID = this.Columns["LinkerTableID"];
        this.columnFirmwareVersion = this.Columns["FirmwareVersion"];
        this.columnHardwareName = this.Columns["HardwareName"];
        this.columnHardwareVersion = this.Columns["HardwareVersion"];
        this.columnHardwareResource = this.Columns["HardwareResource"];
        this.columnextEEPSize = this.Columns["extEEPSize"];
        this.columnmaxStackSize = this.Columns["maxStackSize"];
        this.columnRAMSize = this.Columns["RAMSize"];
        this.columnRAMStartAdr = this.Columns["RAMStartAdr"];
        this.columnintEEPStartAdr = this.Columns["intEEPStartAdr"];
        this.columnintEEPSize = this.Columns["intEEPSize"];
        this.columnDescription = this.Columns["Description"];
        this.columnTestinfo = this.Columns["Testinfo"];
        this.columnHardwareOptions = this.Columns["HardwareOptions"];
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnMeterHardwareID = this.Columns["MeterHardwareID"];
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnPPSArtikelNr = this.Columns["PPSArtikelNr"];
        this.columnDefaultFunctionNr = this.Columns["DefaultFunctionNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnLinkerTableID = new DataColumn("LinkerTableID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLinkerTableID);
        this.columnFirmwareVersion = new DataColumn("FirmwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersion);
        this.columnHardwareName = new DataColumn("HardwareName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareName);
        this.columnHardwareVersion = new DataColumn("HardwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareVersion);
        this.columnHardwareResource = new DataColumn("HardwareResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareResource);
        this.columnextEEPSize = new DataColumn("extEEPSize", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnextEEPSize);
        this.columnmaxStackSize = new DataColumn("maxStackSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnmaxStackSize);
        this.columnRAMSize = new DataColumn("RAMSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRAMSize);
        this.columnRAMStartAdr = new DataColumn("RAMStartAdr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRAMStartAdr);
        this.columnintEEPStartAdr = new DataColumn("intEEPStartAdr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnintEEPStartAdr);
        this.columnintEEPSize = new DataColumn("intEEPSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnintEEPSize);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnTestinfo = new DataColumn("Testinfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestinfo);
        this.columnHardwareOptions = new DataColumn("HardwareOptions", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareOptions);
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnMeterHardwareID = new DataColumn("MeterHardwareID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterHardwareID);
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnPPSArtikelNr = new DataColumn("PPSArtikelNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPSArtikelNr);
        this.columnDefaultFunctionNr = new DataColumn("DefaultFunctionNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDefaultFunctionNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnMeterInfoID,
          this.columnHardwareTypeID
        }, true));
        this.columnHardwareTypeID.AllowDBNull = false;
        this.columnHardwareName.MaxLength = 50;
        this.columnHardwareResource.MaxLength = 536870910;
        this.columnDescription.MaxLength = 536870910;
        this.columnTestinfo.MaxLength = 536870910;
        this.columnHardwareOptions.MaxLength = (int) byte.MaxValue;
        this.columnMeterInfoID.AllowDBNull = false;
        this.columnPPSArtikelNr.MaxLength = 50;
        this.columnDefaultFunctionNr.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow NewMeterInfoHardwareTypeJoinedRow()
      {
        return (DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType()
      {
        return typeof (DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterInfoHardwareTypeJoinedRowChanged == null)
          return;
        this.MeterInfoHardwareTypeJoinedRowChanged((object) this, new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRowChangeEvent((DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterInfoHardwareTypeJoinedRowChanging == null)
          return;
        this.MeterInfoHardwareTypeJoinedRowChanging((object) this, new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRowChangeEvent((DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterInfoHardwareTypeJoinedRowDeleted == null)
          return;
        this.MeterInfoHardwareTypeJoinedRowDeleted((object) this, new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRowChangeEvent((DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterInfoHardwareTypeJoinedRowDeleting == null)
          return;
        this.MeterInfoHardwareTypeJoinedRowDeleting((object) this, new DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRowChangeEvent((DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterInfoHardwareTypeJoinedRow(
        DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DataSetGMM_Handler dataSetGmmHandler = new DataSetGMM_Handler();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = dataSetGmmHandler.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterInfoHardwareTypeJoinedDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = dataSetGmmHandler.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable : 
      TypedTableBase<DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow>
    {
      private DataColumn columnHardwareTypeID;
      private DataColumn columnMapID;
      private DataColumn columnLinkerTableID;
      private DataColumn columnFirmwareVersion;
      private DataColumn columnHardwareName;
      private DataColumn columnHardwareVersion;
      private DataColumn columnextEEPSize;
      private DataColumn columnDescription;
      private DataColumn columnMeterHardwareID;
      private DataColumn columnMeterTypeID;
      private DataColumn columnPPSArtikelNr;
      private DataColumn columnDefaultFunctionNr;
      private DataColumn columnEEPdata;
      private DataColumn columnTypeOverrideString;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable()
      {
        this.TableName = "MeterInfoHardwareTypeMTypeZelsiusJoined";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable(
        SerializationInfo info,
        StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LinkerTableIDColumn => this.columnLinkerTableID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FirmwareVersionColumn => this.columnFirmwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareNameColumn => this.columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn HardwareVersionColumn => this.columnHardwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn extEEPSizeColumn => this.columnextEEPSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterHardwareIDColumn => this.columnMeterHardwareID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PPSArtikelNrColumn => this.columnPPSArtikelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DefaultFunctionNrColumn => this.columnDefaultFunctionNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EEPdataColumn => this.columnEEPdata;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TypeOverrideStringColumn => this.columnTypeOverrideString;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow this[int index]
      {
        get => (DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEventHandler MeterInfoHardwareTypeMTypeZelsiusJoinedRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEventHandler MeterInfoHardwareTypeMTypeZelsiusJoinedRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEventHandler MeterInfoHardwareTypeMTypeZelsiusJoinedRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEventHandler MeterInfoHardwareTypeMTypeZelsiusJoinedRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterInfoHardwareTypeMTypeZelsiusJoinedRow(
        DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow AddMeterInfoHardwareTypeMTypeZelsiusJoinedRow(
        int HardwareTypeID,
        int MapID,
        int LinkerTableID,
        int FirmwareVersion,
        string HardwareName,
        int HardwareVersion,
        int extEEPSize,
        string Description,
        int MeterHardwareID,
        int MeterTypeID,
        string PPSArtikelNr,
        string DefaultFunctionNr,
        byte[] EEPdata,
        string TypeOverrideString)
      {
        DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow row = (DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow) this.NewRow();
        object[] objArray = new object[14]
        {
          (object) HardwareTypeID,
          (object) MapID,
          (object) LinkerTableID,
          (object) FirmwareVersion,
          (object) HardwareName,
          (object) HardwareVersion,
          (object) extEEPSize,
          (object) Description,
          (object) MeterHardwareID,
          (object) MeterTypeID,
          (object) PPSArtikelNr,
          (object) DefaultFunctionNr,
          (object) EEPdata,
          (object) TypeOverrideString
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable zelsiusJoinedDataTable = (DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable) base.Clone();
        zelsiusJoinedDataTable.InitVars();
        return (DataTable) zelsiusJoinedDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
        this.columnMapID = this.Columns["MapID"];
        this.columnLinkerTableID = this.Columns["LinkerTableID"];
        this.columnFirmwareVersion = this.Columns["FirmwareVersion"];
        this.columnHardwareName = this.Columns["HardwareName"];
        this.columnHardwareVersion = this.Columns["HardwareVersion"];
        this.columnextEEPSize = this.Columns["extEEPSize"];
        this.columnDescription = this.Columns["Description"];
        this.columnMeterHardwareID = this.Columns["MeterHardwareID"];
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnPPSArtikelNr = this.Columns["PPSArtikelNr"];
        this.columnDefaultFunctionNr = this.Columns["DefaultFunctionNr"];
        this.columnEEPdata = this.Columns["EEPdata"];
        this.columnTypeOverrideString = this.Columns["TypeOverrideString"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnLinkerTableID = new DataColumn("LinkerTableID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLinkerTableID);
        this.columnFirmwareVersion = new DataColumn("FirmwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersion);
        this.columnHardwareName = new DataColumn("HardwareName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareName);
        this.columnHardwareVersion = new DataColumn("HardwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareVersion);
        this.columnextEEPSize = new DataColumn("extEEPSize", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnextEEPSize);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnMeterHardwareID = new DataColumn("MeterHardwareID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterHardwareID);
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnPPSArtikelNr = new DataColumn("PPSArtikelNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPSArtikelNr);
        this.columnDefaultFunctionNr = new DataColumn("DefaultFunctionNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDefaultFunctionNr);
        this.columnEEPdata = new DataColumn("EEPdata", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEEPdata);
        this.columnTypeOverrideString = new DataColumn("TypeOverrideString", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTypeOverrideString);
        this.columnHardwareTypeID.AllowDBNull = false;
        this.columnHardwareName.MaxLength = 50;
        this.columnDescription.MaxLength = 536870910;
        this.columnPPSArtikelNr.MaxLength = 50;
        this.columnDefaultFunctionNr.MaxLength = 50;
        this.columnTypeOverrideString.DefaultValue = (object) "";
        this.columnTypeOverrideString.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow NewMeterInfoHardwareTypeMTypeZelsiusJoinedRow()
      {
        return (DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType()
      {
        return typeof (DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChanged == null)
          return;
        this.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChanged((object) this, new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEvent((DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChanging == null)
          return;
        this.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChanging((object) this, new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEvent((DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterInfoHardwareTypeMTypeZelsiusJoinedRowDeleted == null)
          return;
        this.MeterInfoHardwareTypeMTypeZelsiusJoinedRowDeleted((object) this, new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEvent((DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterInfoHardwareTypeMTypeZelsiusJoinedRowDeleting == null)
          return;
        this.MeterInfoHardwareTypeMTypeZelsiusJoinedRowDeleting((object) this, new DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEvent((DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterInfoHardwareTypeMTypeZelsiusJoinedRow(
        DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DataSetGMM_Handler dataSetGmmHandler = new DataSetGMM_Handler();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = dataSetGmmHandler.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = dataSetGmmHandler.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class CodeRuntimeCodeJoinedDataTable : 
      TypedTableBase<DataSetGMM_Handler.CodeRuntimeCodeJoinedRow>
    {
      private DataColumn columnFunctionNumber;
      private DataColumn columnCodeID;
      private DataColumn columnCodeSequenceType;
      private DataColumn columnCodeSequenceInfo;
      private DataColumn columnCodeSequenceName;
      private DataColumn columnLineNr;
      private DataColumn columnCodeType;
      private DataColumn columnCodeValue;
      private DataColumn columnLineInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CodeRuntimeCodeJoinedDataTable()
      {
        this.TableName = "CodeRuntimeCodeJoined";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CodeRuntimeCodeJoinedDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected CodeRuntimeCodeJoinedDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FunctionNumberColumn => this.columnFunctionNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeIDColumn => this.columnCodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceTypeColumn => this.columnCodeSequenceType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceInfoColumn => this.columnCodeSequenceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceNameColumn => this.columnCodeSequenceName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LineNrColumn => this.columnLineNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeTypeColumn => this.columnCodeType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeValueColumn => this.columnCodeValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LineInfoColumn => this.columnLineInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeRuntimeCodeJoinedRow this[int index]
      {
        get => (DataSetGMM_Handler.CodeRuntimeCodeJoinedRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.CodeRuntimeCodeJoinedRowChangeEventHandler CodeRuntimeCodeJoinedRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.CodeRuntimeCodeJoinedRowChangeEventHandler CodeRuntimeCodeJoinedRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.CodeRuntimeCodeJoinedRowChangeEventHandler CodeRuntimeCodeJoinedRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.CodeRuntimeCodeJoinedRowChangeEventHandler CodeRuntimeCodeJoinedRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddCodeRuntimeCodeJoinedRow(DataSetGMM_Handler.CodeRuntimeCodeJoinedRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeRuntimeCodeJoinedRow AddCodeRuntimeCodeJoinedRow(
        int FunctionNumber,
        int CodeID,
        string CodeSequenceType,
        string CodeSequenceInfo,
        string CodeSequenceName,
        int LineNr,
        string CodeType,
        string CodeValue,
        string LineInfo)
      {
        DataSetGMM_Handler.CodeRuntimeCodeJoinedRow row = (DataSetGMM_Handler.CodeRuntimeCodeJoinedRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) FunctionNumber,
          (object) CodeID,
          (object) CodeSequenceType,
          (object) CodeSequenceInfo,
          (object) CodeSequenceName,
          (object) LineNr,
          (object) CodeType,
          (object) CodeValue,
          (object) LineInfo
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeRuntimeCodeJoinedRow FindByFunctionNumberCodeIDLineNr(
        int FunctionNumber,
        int CodeID,
        int LineNr)
      {
        return (DataSetGMM_Handler.CodeRuntimeCodeJoinedRow) this.Rows.Find(new object[3]
        {
          (object) FunctionNumber,
          (object) CodeID,
          (object) LineNr
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable codeJoinedDataTable = (DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable) base.Clone();
        codeJoinedDataTable.InitVars();
        return (DataTable) codeJoinedDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionNumber = this.Columns["FunctionNumber"];
        this.columnCodeID = this.Columns["CodeID"];
        this.columnCodeSequenceType = this.Columns["CodeSequenceType"];
        this.columnCodeSequenceInfo = this.Columns["CodeSequenceInfo"];
        this.columnCodeSequenceName = this.Columns["CodeSequenceName"];
        this.columnLineNr = this.Columns["LineNr"];
        this.columnCodeType = this.Columns["CodeType"];
        this.columnCodeValue = this.Columns["CodeValue"];
        this.columnLineInfo = this.Columns["LineInfo"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionNumber = new DataColumn("FunctionNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionNumber);
        this.columnCodeID = new DataColumn("CodeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeID);
        this.columnCodeSequenceType = new DataColumn("CodeSequenceType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceType);
        this.columnCodeSequenceInfo = new DataColumn("CodeSequenceInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceInfo);
        this.columnCodeSequenceName = new DataColumn("CodeSequenceName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceName);
        this.columnLineNr = new DataColumn("LineNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLineNr);
        this.columnCodeType = new DataColumn("CodeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeType);
        this.columnCodeValue = new DataColumn("CodeValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeValue);
        this.columnLineInfo = new DataColumn("LineInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLineInfo);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnFunctionNumber,
          this.columnCodeID,
          this.columnLineNr
        }, true));
        this.columnFunctionNumber.AllowDBNull = false;
        this.columnCodeID.AllowDBNull = false;
        this.columnCodeSequenceType.MaxLength = 50;
        this.columnCodeSequenceInfo.MaxLength = 50;
        this.columnCodeSequenceName.MaxLength = 50;
        this.columnLineNr.AllowDBNull = false;
        this.columnCodeType.MaxLength = 50;
        this.columnCodeValue.MaxLength = 536870910;
        this.columnLineInfo.MaxLength = 250;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeRuntimeCodeJoinedRow NewCodeRuntimeCodeJoinedRow()
      {
        return (DataSetGMM_Handler.CodeRuntimeCodeJoinedRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DataSetGMM_Handler.CodeRuntimeCodeJoinedRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DataSetGMM_Handler.CodeRuntimeCodeJoinedRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.CodeRuntimeCodeJoinedRowChanged == null)
          return;
        this.CodeRuntimeCodeJoinedRowChanged((object) this, new DataSetGMM_Handler.CodeRuntimeCodeJoinedRowChangeEvent((DataSetGMM_Handler.CodeRuntimeCodeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.CodeRuntimeCodeJoinedRowChanging == null)
          return;
        this.CodeRuntimeCodeJoinedRowChanging((object) this, new DataSetGMM_Handler.CodeRuntimeCodeJoinedRowChangeEvent((DataSetGMM_Handler.CodeRuntimeCodeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.CodeRuntimeCodeJoinedRowDeleted == null)
          return;
        this.CodeRuntimeCodeJoinedRowDeleted((object) this, new DataSetGMM_Handler.CodeRuntimeCodeJoinedRowChangeEvent((DataSetGMM_Handler.CodeRuntimeCodeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.CodeRuntimeCodeJoinedRowDeleting == null)
          return;
        this.CodeRuntimeCodeJoinedRowDeleting((object) this, new DataSetGMM_Handler.CodeRuntimeCodeJoinedRowChangeEvent((DataSetGMM_Handler.CodeRuntimeCodeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveCodeRuntimeCodeJoinedRow(DataSetGMM_Handler.CodeRuntimeCodeJoinedRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DataSetGMM_Handler dataSetGmmHandler = new DataSetGMM_Handler();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = dataSetGmmHandler.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (CodeRuntimeCodeJoinedDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = dataSetGmmHandler.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class CodeDisplayCodeJoinedDataTable : 
      TypedTableBase<DataSetGMM_Handler.CodeDisplayCodeJoinedRow>
    {
      private DataColumn columnCodeID;
      private DataColumn columnLineNr;
      private DataColumn columnCodeType;
      private DataColumn columnCodeValue;
      private DataColumn columnLineInfo;
      private DataColumn columnInterpreterCode;
      private DataColumn columnSequenceNr;
      private DataColumn columnCodeSequenceType;
      private DataColumn columnCodeSequenceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CodeDisplayCodeJoinedDataTable()
      {
        this.TableName = "CodeDisplayCodeJoined";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CodeDisplayCodeJoinedDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected CodeDisplayCodeJoinedDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeIDColumn => this.columnCodeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LineNrColumn => this.columnLineNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeTypeColumn => this.columnCodeType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeValueColumn => this.columnCodeValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LineInfoColumn => this.columnLineInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InterpreterCodeColumn => this.columnInterpreterCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SequenceNrColumn => this.columnSequenceNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceTypeColumn => this.columnCodeSequenceType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CodeSequenceInfoColumn => this.columnCodeSequenceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeDisplayCodeJoinedRow this[int index]
      {
        get => (DataSetGMM_Handler.CodeDisplayCodeJoinedRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.CodeDisplayCodeJoinedRowChangeEventHandler CodeDisplayCodeJoinedRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.CodeDisplayCodeJoinedRowChangeEventHandler CodeDisplayCodeJoinedRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.CodeDisplayCodeJoinedRowChangeEventHandler CodeDisplayCodeJoinedRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetGMM_Handler.CodeDisplayCodeJoinedRowChangeEventHandler CodeDisplayCodeJoinedRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddCodeDisplayCodeJoinedRow(DataSetGMM_Handler.CodeDisplayCodeJoinedRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeDisplayCodeJoinedRow AddCodeDisplayCodeJoinedRow(
        int CodeID,
        int LineNr,
        string CodeType,
        string CodeValue,
        string LineInfo,
        int InterpreterCode,
        int SequenceNr,
        string CodeSequenceType,
        string CodeSequenceInfo)
      {
        DataSetGMM_Handler.CodeDisplayCodeJoinedRow row = (DataSetGMM_Handler.CodeDisplayCodeJoinedRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) CodeID,
          (object) LineNr,
          (object) CodeType,
          (object) CodeValue,
          (object) LineInfo,
          (object) InterpreterCode,
          (object) SequenceNr,
          (object) CodeSequenceType,
          (object) CodeSequenceInfo
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeDisplayCodeJoinedRow FindByInterpreterCodeSequenceNrLineNrCodeID(
        int InterpreterCode,
        int SequenceNr,
        int LineNr,
        int CodeID)
      {
        return (DataSetGMM_Handler.CodeDisplayCodeJoinedRow) this.Rows.Find(new object[4]
        {
          (object) InterpreterCode,
          (object) SequenceNr,
          (object) LineNr,
          (object) CodeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable codeJoinedDataTable = (DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable) base.Clone();
        codeJoinedDataTable.InitVars();
        return (DataTable) codeJoinedDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnCodeID = this.Columns["CodeID"];
        this.columnLineNr = this.Columns["LineNr"];
        this.columnCodeType = this.Columns["CodeType"];
        this.columnCodeValue = this.Columns["CodeValue"];
        this.columnLineInfo = this.Columns["LineInfo"];
        this.columnInterpreterCode = this.Columns["InterpreterCode"];
        this.columnSequenceNr = this.Columns["SequenceNr"];
        this.columnCodeSequenceType = this.Columns["CodeSequenceType"];
        this.columnCodeSequenceInfo = this.Columns["CodeSequenceInfo"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnCodeID = new DataColumn("CodeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeID);
        this.columnLineNr = new DataColumn("LineNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLineNr);
        this.columnCodeType = new DataColumn("CodeType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeType);
        this.columnCodeValue = new DataColumn("CodeValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeValue);
        this.columnLineInfo = new DataColumn("LineInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLineInfo);
        this.columnInterpreterCode = new DataColumn("InterpreterCode", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInterpreterCode);
        this.columnSequenceNr = new DataColumn("SequenceNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSequenceNr);
        this.columnCodeSequenceType = new DataColumn("CodeSequenceType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceType);
        this.columnCodeSequenceInfo = new DataColumn("CodeSequenceInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCodeSequenceInfo);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[4]
        {
          this.columnInterpreterCode,
          this.columnSequenceNr,
          this.columnLineNr,
          this.columnCodeID
        }, true));
        this.columnCodeID.AllowDBNull = false;
        this.columnLineNr.AllowDBNull = false;
        this.columnCodeType.MaxLength = 50;
        this.columnCodeValue.MaxLength = 536870910;
        this.columnLineInfo.MaxLength = 250;
        this.columnInterpreterCode.AllowDBNull = false;
        this.columnSequenceNr.AllowDBNull = false;
        this.columnCodeSequenceType.MaxLength = 50;
        this.columnCodeSequenceInfo.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeDisplayCodeJoinedRow NewCodeDisplayCodeJoinedRow()
      {
        return (DataSetGMM_Handler.CodeDisplayCodeJoinedRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DataSetGMM_Handler.CodeDisplayCodeJoinedRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DataSetGMM_Handler.CodeDisplayCodeJoinedRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.CodeDisplayCodeJoinedRowChanged == null)
          return;
        this.CodeDisplayCodeJoinedRowChanged((object) this, new DataSetGMM_Handler.CodeDisplayCodeJoinedRowChangeEvent((DataSetGMM_Handler.CodeDisplayCodeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.CodeDisplayCodeJoinedRowChanging == null)
          return;
        this.CodeDisplayCodeJoinedRowChanging((object) this, new DataSetGMM_Handler.CodeDisplayCodeJoinedRowChangeEvent((DataSetGMM_Handler.CodeDisplayCodeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.CodeDisplayCodeJoinedRowDeleted == null)
          return;
        this.CodeDisplayCodeJoinedRowDeleted((object) this, new DataSetGMM_Handler.CodeDisplayCodeJoinedRowChangeEvent((DataSetGMM_Handler.CodeDisplayCodeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.CodeDisplayCodeJoinedRowDeleting == null)
          return;
        this.CodeDisplayCodeJoinedRowDeleting((object) this, new DataSetGMM_Handler.CodeDisplayCodeJoinedRowChangeEvent((DataSetGMM_Handler.CodeDisplayCodeJoinedRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveCodeDisplayCodeJoinedRow(DataSetGMM_Handler.CodeDisplayCodeJoinedRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DataSetGMM_Handler dataSetGmmHandler = new DataSetGMM_Handler();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = dataSetGmmHandler.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (CodeDisplayCodeJoinedDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = dataSetGmmHandler.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class MeterInfoHardwareTypeJoinedRow : DataRow
    {
      private DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable tableMeterInfoHardwareTypeJoined;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterInfoHardwareTypeJoinedRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterInfoHardwareTypeJoined = (DataSetGMM_Handler.MeterInfoHardwareTypeJoinedDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int HardwareTypeID
      {
        get => (int) this[this.tableMeterInfoHardwareTypeJoined.HardwareTypeIDColumn];
        set => this[this.tableMeterInfoHardwareTypeJoined.HardwareTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MapID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeJoined.MapIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MapID' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LinkerTableID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeJoined.LinkerTableIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LinkerTableID' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.LinkerTableIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FirmwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeJoined.FirmwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersion' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.FirmwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HardwareName
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeJoined.HardwareNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareName' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.HardwareNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int HardwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeJoined.HardwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareVersion' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.HardwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HardwareResource
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeJoined.HardwareResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareResource' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.HardwareResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int extEEPSize
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeJoined.extEEPSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'extEEPSize' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.extEEPSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short maxStackSize
      {
        get
        {
          try
          {
            return (short) this[this.tableMeterInfoHardwareTypeJoined.maxStackSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'maxStackSize' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.maxStackSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short RAMSize
      {
        get
        {
          try
          {
            return (short) this[this.tableMeterInfoHardwareTypeJoined.RAMSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RAMSize' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.RAMSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short RAMStartAdr
      {
        get
        {
          try
          {
            return (short) this[this.tableMeterInfoHardwareTypeJoined.RAMStartAdrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RAMStartAdr' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.RAMStartAdrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short intEEPStartAdr
      {
        get
        {
          try
          {
            return (short) this[this.tableMeterInfoHardwareTypeJoined.intEEPStartAdrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'intEEPStartAdr' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.intEEPStartAdrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public short intEEPSize
      {
        get
        {
          try
          {
            return (short) this[this.tableMeterInfoHardwareTypeJoined.intEEPSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'intEEPSize' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.intEEPSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeJoined.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Testinfo
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeJoined.TestinfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Testinfo' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.TestinfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HardwareOptions
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeJoined.HardwareOptionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareOptions' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.HardwareOptionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterInfoID
      {
        get => (int) this[this.tableMeterInfoHardwareTypeJoined.MeterInfoIDColumn];
        set => this[this.tableMeterInfoHardwareTypeJoined.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterHardwareID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeJoined.MeterHardwareIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterHardwareID' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.MeterHardwareIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeJoined.MeterTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterTypeID' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPSArtikelNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeJoined.PPSArtikelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPSArtikelNr' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.PPSArtikelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DefaultFunctionNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeJoined.DefaultFunctionNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DefaultFunctionNr' in table 'MeterInfoHardwareTypeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeJoined.DefaultFunctionNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMapIDNull() => this.IsNull(this.tableMeterInfoHardwareTypeJoined.MapIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMapIDNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.MapIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLinkerTableIDNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.LinkerTableIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLinkerTableIDNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.LinkerTableIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFirmwareVersionNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.FirmwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFirmwareVersionNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.FirmwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareNameNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.HardwareNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareNameNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.HardwareNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareVersionNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.HardwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareVersionNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.HardwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareResourceNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.HardwareResourceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareResourceNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.HardwareResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsextEEPSizeNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.extEEPSizeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetextEEPSizeNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.extEEPSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsmaxStackSizeNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.maxStackSizeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetmaxStackSizeNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.maxStackSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRAMSizeNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.RAMSizeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRAMSizeNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.RAMSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRAMStartAdrNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.RAMStartAdrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRAMStartAdrNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.RAMStartAdrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsintEEPStartAdrNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.intEEPStartAdrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetintEEPStartAdrNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.intEEPStartAdrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsintEEPSizeNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.intEEPSizeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetintEEPSizeNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.intEEPSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.DescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTestinfoNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.TestinfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTestinfoNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.TestinfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareOptionsNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.HardwareOptionsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareOptionsNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.HardwareOptionsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterHardwareIDNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.MeterHardwareIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterHardwareIDNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.MeterHardwareIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterTypeIDNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.MeterTypeIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterTypeIDNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.MeterTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPSArtikelNrNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.PPSArtikelNrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPSArtikelNrNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.PPSArtikelNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDefaultFunctionNrNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeJoined.DefaultFunctionNrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDefaultFunctionNrNull()
      {
        this[this.tableMeterInfoHardwareTypeJoined.DefaultFunctionNrColumn] = Convert.DBNull;
      }
    }

    public class MeterInfoHardwareTypeMTypeZelsiusJoinedRow : DataRow
    {
      private DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable tableMeterInfoHardwareTypeMTypeZelsiusJoined;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterInfoHardwareTypeMTypeZelsiusJoinedRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterInfoHardwareTypeMTypeZelsiusJoined = (DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int HardwareTypeID
      {
        get => (int) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareTypeIDColumn];
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareTypeIDColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MapID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MapIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MapID' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LinkerTableID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.LinkerTableIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LinkerTableID' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.LinkerTableIDColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FirmwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.FirmwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersion' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.FirmwareVersionColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string HardwareName
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareName' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareNameColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int HardwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareVersion' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareVersionColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int extEEPSize
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.extEEPSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'extEEPSize' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.extEEPSizeColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.DescriptionColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterHardwareID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MeterHardwareIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterHardwareID' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MeterHardwareIDColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MeterTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MeterTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterTypeID' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MeterTypeIDColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PPSArtikelNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.PPSArtikelNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PPSArtikelNr' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.PPSArtikelNrColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string DefaultFunctionNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.DefaultFunctionNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DefaultFunctionNr' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.DefaultFunctionNrColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte[] EEPdata
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.EEPdataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'EEPdata' in table 'MeterInfoHardwareTypeMTypeZelsiusJoined' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.EEPdataColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TypeOverrideString
      {
        get
        {
          return this.IsTypeOverrideStringNull() ? string.Empty : (string) this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.TypeOverrideStringColumn];
        }
        set
        {
          this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.TypeOverrideStringColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMapIDNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MapIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMapIDNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MapIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLinkerTableIDNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.LinkerTableIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLinkerTableIDNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.LinkerTableIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFirmwareVersionNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.FirmwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFirmwareVersionNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.FirmwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareNameNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareNameNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsHardwareVersionNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetHardwareVersionNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.HardwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsextEEPSizeNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.extEEPSizeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetextEEPSizeNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.extEEPSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.DescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterHardwareIDNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MeterHardwareIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterHardwareIDNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MeterHardwareIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterTypeIDNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MeterTypeIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterTypeIDNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.MeterTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPPSArtikelNrNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.PPSArtikelNrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPPSArtikelNrNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.PPSArtikelNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDefaultFunctionNrNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.DefaultFunctionNrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDefaultFunctionNrNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.DefaultFunctionNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEEPdataNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.EEPdataColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEEPdataNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.EEPdataColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTypeOverrideStringNull()
      {
        return this.IsNull(this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.TypeOverrideStringColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTypeOverrideStringNull()
      {
        this[this.tableMeterInfoHardwareTypeMTypeZelsiusJoined.TypeOverrideStringColumn] = Convert.DBNull;
      }
    }

    public class CodeRuntimeCodeJoinedRow : DataRow
    {
      private DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable tableCodeRuntimeCodeJoined;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CodeRuntimeCodeJoinedRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableCodeRuntimeCodeJoined = (DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int FunctionNumber
      {
        get => (int) this[this.tableCodeRuntimeCodeJoined.FunctionNumberColumn];
        set => this[this.tableCodeRuntimeCodeJoined.FunctionNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CodeID
      {
        get => (int) this[this.tableCodeRuntimeCodeJoined.CodeIDColumn];
        set => this[this.tableCodeRuntimeCodeJoined.CodeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceType
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeRuntimeCodeJoined.CodeSequenceTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceType' in table 'CodeRuntimeCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeRuntimeCodeJoined.CodeSequenceTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeRuntimeCodeJoined.CodeSequenceInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceInfo' in table 'CodeRuntimeCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeRuntimeCodeJoined.CodeSequenceInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceName
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeRuntimeCodeJoined.CodeSequenceNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceName' in table 'CodeRuntimeCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeRuntimeCodeJoined.CodeSequenceNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LineNr
      {
        get => (int) this[this.tableCodeRuntimeCodeJoined.LineNrColumn];
        set => this[this.tableCodeRuntimeCodeJoined.LineNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeType
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeRuntimeCodeJoined.CodeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeType' in table 'CodeRuntimeCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeRuntimeCodeJoined.CodeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeValue
      {
        get
        {
          return this.IsCodeValueNull() ? (string) null : (string) this[this.tableCodeRuntimeCodeJoined.CodeValueColumn];
        }
        set => this[this.tableCodeRuntimeCodeJoined.CodeValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LineInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeRuntimeCodeJoined.LineInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LineInfo' in table 'CodeRuntimeCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeRuntimeCodeJoined.LineInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceTypeNull()
      {
        return this.IsNull(this.tableCodeRuntimeCodeJoined.CodeSequenceTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceTypeNull()
      {
        this[this.tableCodeRuntimeCodeJoined.CodeSequenceTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceInfoNull()
      {
        return this.IsNull(this.tableCodeRuntimeCodeJoined.CodeSequenceInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceInfoNull()
      {
        this[this.tableCodeRuntimeCodeJoined.CodeSequenceInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceNameNull()
      {
        return this.IsNull(this.tableCodeRuntimeCodeJoined.CodeSequenceNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceNameNull()
      {
        this[this.tableCodeRuntimeCodeJoined.CodeSequenceNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeTypeNull() => this.IsNull(this.tableCodeRuntimeCodeJoined.CodeTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeTypeNull()
      {
        this[this.tableCodeRuntimeCodeJoined.CodeTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeValueNull() => this.IsNull(this.tableCodeRuntimeCodeJoined.CodeValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeValueNull()
      {
        this[this.tableCodeRuntimeCodeJoined.CodeValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLineInfoNull() => this.IsNull(this.tableCodeRuntimeCodeJoined.LineInfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLineInfoNull()
      {
        this[this.tableCodeRuntimeCodeJoined.LineInfoColumn] = Convert.DBNull;
      }
    }

    public class CodeDisplayCodeJoinedRow : DataRow
    {
      private DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable tableCodeDisplayCodeJoined;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal CodeDisplayCodeJoinedRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableCodeDisplayCodeJoined = (DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int CodeID
      {
        get => (int) this[this.tableCodeDisplayCodeJoined.CodeIDColumn];
        set => this[this.tableCodeDisplayCodeJoined.CodeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LineNr
      {
        get => (int) this[this.tableCodeDisplayCodeJoined.LineNrColumn];
        set => this[this.tableCodeDisplayCodeJoined.LineNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeType
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeDisplayCodeJoined.CodeTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeType' in table 'CodeDisplayCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeDisplayCodeJoined.CodeTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeValue
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeDisplayCodeJoined.CodeValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeValue' in table 'CodeDisplayCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeDisplayCodeJoined.CodeValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LineInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeDisplayCodeJoined.LineInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LineInfo' in table 'CodeDisplayCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeDisplayCodeJoined.LineInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InterpreterCode
      {
        get => (int) this[this.tableCodeDisplayCodeJoined.InterpreterCodeColumn];
        set => this[this.tableCodeDisplayCodeJoined.InterpreterCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int SequenceNr
      {
        get => (int) this[this.tableCodeDisplayCodeJoined.SequenceNrColumn];
        set => this[this.tableCodeDisplayCodeJoined.SequenceNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceType
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeDisplayCodeJoined.CodeSequenceTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceType' in table 'CodeDisplayCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeDisplayCodeJoined.CodeSequenceTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string CodeSequenceInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableCodeDisplayCodeJoined.CodeSequenceInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CodeSequenceInfo' in table 'CodeDisplayCodeJoined' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableCodeDisplayCodeJoined.CodeSequenceInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeTypeNull() => this.IsNull(this.tableCodeDisplayCodeJoined.CodeTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeTypeNull()
      {
        this[this.tableCodeDisplayCodeJoined.CodeTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeValueNull() => this.IsNull(this.tableCodeDisplayCodeJoined.CodeValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeValueNull()
      {
        this[this.tableCodeDisplayCodeJoined.CodeValueColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLineInfoNull() => this.IsNull(this.tableCodeDisplayCodeJoined.LineInfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLineInfoNull()
      {
        this[this.tableCodeDisplayCodeJoined.LineInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceTypeNull()
      {
        return this.IsNull(this.tableCodeDisplayCodeJoined.CodeSequenceTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceTypeNull()
      {
        this[this.tableCodeDisplayCodeJoined.CodeSequenceTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCodeSequenceInfoNull()
      {
        return this.IsNull(this.tableCodeDisplayCodeJoined.CodeSequenceInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCodeSequenceInfoNull()
      {
        this[this.tableCodeDisplayCodeJoined.CodeSequenceInfoColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterInfoHardwareTypeJoinedRowChangeEvent : EventArgs
    {
      private DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterInfoHardwareTypeJoinedRowChangeEvent(
        DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.MeterInfoHardwareTypeJoinedRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEvent : EventArgs
    {
      private DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterInfoHardwareTypeMTypeZelsiusJoinedRowChangeEvent(
        DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.MeterInfoHardwareTypeMTypeZelsiusJoinedRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class CodeRuntimeCodeJoinedRowChangeEvent : EventArgs
    {
      private DataSetGMM_Handler.CodeRuntimeCodeJoinedRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CodeRuntimeCodeJoinedRowChangeEvent(
        DataSetGMM_Handler.CodeRuntimeCodeJoinedRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeRuntimeCodeJoinedRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class CodeDisplayCodeJoinedRowChangeEvent : EventArgs
    {
      private DataSetGMM_Handler.CodeDisplayCodeJoinedRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public CodeDisplayCodeJoinedRowChangeEvent(
        DataSetGMM_Handler.CodeDisplayCodeJoinedRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetGMM_Handler.CodeDisplayCodeJoinedRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}


--- DataSetLogData.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.DataSetLogData
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace GMM_Handler
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("DataSetLogData")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class DataSetLogData : DataSet
  {
    private DataSetLogData.GMM_Serie2DeviceLogDataDataTable tableGMM_Serie2DeviceLogData;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public DataSetLogData()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected DataSetLogData(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (GMM_Serie2DeviceLogData)] != null)
            base.Tables.Add((DataTable) new DataSetLogData.GMM_Serie2DeviceLogDataDataTable(dataSet.Tables[nameof (GMM_Serie2DeviceLogData)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DataSetLogData.GMM_Serie2DeviceLogDataDataTable GMM_Serie2DeviceLogData
    {
      get => this.tableGMM_Serie2DeviceLogData;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public override DataSet Clone()
    {
      DataSetLogData dataSetLogData = (DataSetLogData) base.Clone();
      dataSetLogData.InitVars();
      dataSetLogData.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) dataSetLogData;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["GMM_Serie2DeviceLogData"] != null)
          base.Tables.Add((DataTable) new DataSetLogData.GMM_Serie2DeviceLogDataDataTable(dataSet.Tables["GMM_Serie2DeviceLogData"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableGMM_Serie2DeviceLogData = (DataSetLogData.GMM_Serie2DeviceLogDataDataTable) base.Tables["GMM_Serie2DeviceLogData"];
      if (!initTable || this.tableGMM_Serie2DeviceLogData == null)
        return;
      this.tableGMM_Serie2DeviceLogData.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (DataSetLogData);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/DataSetLogData.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableGMM_Serie2DeviceLogData = new DataSetLogData.GMM_Serie2DeviceLogDataDataTable();
      base.Tables.Add((DataTable) this.tableGMM_Serie2DeviceLogData);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeGMM_Serie2DeviceLogData() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      DataSetLogData dataSetLogData = new DataSetLogData();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = dataSetLogData.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = dataSetLogData.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void GMM_Serie2DeviceLogDataRowChangeEventHandler(
      object sender,
      DataSetLogData.GMM_Serie2DeviceLogDataRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class GMM_Serie2DeviceLogDataDataTable : 
      TypedTableBase<DataSetLogData.GMM_Serie2DeviceLogDataRow>
    {
      private DataColumn columnChangeDateTime;
      private DataColumn columnDeviceNumber;
      private DataColumn columnLiegenschaft;
      private DataColumn columnNutzer;
      private DataColumn columnStichtag;
      private DataColumn columnAbweichenderStichtag;
      private DataColumn columnkWh_Stichtag;
      private DataColumn columnkWh_Aktuell;
      private DataColumn columnkWh_010710;
      private DataColumn columnkWh_010610;
      private DataColumn columnkWh_010510;
      private DataColumn columnkWh_010410;
      private DataColumn columnkWh_010310;
      private DataColumn columnkWh_010210;
      private DataColumn columnkWh_010110;
      private DataColumn columnkWh_011209;
      private DataColumn columnkWh_011109;
      private DataColumn columnkWh_011009;
      private DataColumn columnkWh_010909;
      private DataColumn columnkWh_010809;
      private DataColumn columnkWh_010709;
      private DataColumn columnkWh_010609;
      private DataColumn columnkWh_010509;
      private DataColumn columnkWh_010409;
      private DataColumn columnkWh_010309;
      private DataColumn columnkWh_010209;
      private DataColumn columnkWh_010109;
      private DataColumn columnMessbereich;
      private DataColumn columnMasseinheit;
      private DataColumn columnEinbaudatum;
      private DataColumn columnMontageauftrag;
      private DataColumn columnEinbauort;
      private DataColumn columnAusleser;
      private DataColumn columnKommentar;
      private DataColumn columnFehlerGefunden;
      private DataColumn columnFehlerBeseitigt;
      private DataColumn columnMax_QmPerHour1_Month;
      private DataColumn columnMax_QmPerHour1;
      private DataColumn columnMax_QmPerHour2_Month;
      private DataColumn columnMax_QmPerHour2;
      private DataColumn columnMax_kW1_Month;
      private DataColumn columnMax_kW1;
      private DataColumn columnMax_kW2_Month;
      private DataColumn columnMax_kW2;
      private DataColumn columnManuellGespeichert;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public GMM_Serie2DeviceLogDataDataTable()
      {
        this.TableName = "GMM_Serie2DeviceLogData";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal GMM_Serie2DeviceLogDataDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected GMM_Serie2DeviceLogDataDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeDateTimeColumn => this.columnChangeDateTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DeviceNumberColumn => this.columnDeviceNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LiegenschaftColumn => this.columnLiegenschaft;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NutzerColumn => this.columnNutzer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StichtagColumn => this.columnStichtag;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AbweichenderStichtagColumn => this.columnAbweichenderStichtag;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_StichtagColumn => this.columnkWh_Stichtag;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_AktuellColumn => this.columnkWh_Aktuell;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010710Column => this.columnkWh_010710;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010610Column => this.columnkWh_010610;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010510Column => this.columnkWh_010510;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010410Column => this.columnkWh_010410;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010310Column => this.columnkWh_010310;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010210Column => this.columnkWh_010210;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010110Column => this.columnkWh_010110;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_011209Column => this.columnkWh_011209;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_011109Column => this.columnkWh_011109;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_011009Column => this.columnkWh_011009;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010909Column => this.columnkWh_010909;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010809Column => this.columnkWh_010809;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010709Column => this.columnkWh_010709;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010609Column => this.columnkWh_010609;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010509Column => this.columnkWh_010509;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010409Column => this.columnkWh_010409;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010309Column => this.columnkWh_010309;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010209Column => this.columnkWh_010209;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn kWh_010109Column => this.columnkWh_010109;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MessbereichColumn => this.columnMessbereich;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MasseinheitColumn => this.columnMasseinheit;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EinbaudatumColumn => this.columnEinbaudatum;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MontageauftragColumn => this.columnMontageauftrag;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EinbauortColumn => this.columnEinbauort;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn AusleserColumn => this.columnAusleser;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn KommentarColumn => this.columnKommentar;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FehlerGefundenColumn => this.columnFehlerGefunden;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FehlerBeseitigtColumn => this.columnFehlerBeseitigt;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_QmPerHour1_MonthColumn => this.columnMax_QmPerHour1_Month;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_QmPerHour1Column => this.columnMax_QmPerHour1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_QmPerHour2_MonthColumn => this.columnMax_QmPerHour2_Month;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_QmPerHour2Column => this.columnMax_QmPerHour2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_kW1_MonthColumn => this.columnMax_kW1_Month;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_kW1Column => this.columnMax_kW1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_kW2_MonthColumn => this.columnMax_kW2_Month;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn Max_kW2Column => this.columnMax_kW2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ManuellGespeichertColumn => this.columnManuellGespeichert;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetLogData.GMM_Serie2DeviceLogDataRow this[int index]
      {
        get => (DataSetLogData.GMM_Serie2DeviceLogDataRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetLogData.GMM_Serie2DeviceLogDataRowChangeEventHandler GMM_Serie2DeviceLogDataRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetLogData.GMM_Serie2DeviceLogDataRowChangeEventHandler GMM_Serie2DeviceLogDataRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetLogData.GMM_Serie2DeviceLogDataRowChangeEventHandler GMM_Serie2DeviceLogDataRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DataSetLogData.GMM_Serie2DeviceLogDataRowChangeEventHandler GMM_Serie2DeviceLogDataRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddGMM_Serie2DeviceLogDataRow(DataSetLogData.GMM_Serie2DeviceLogDataRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetLogData.GMM_Serie2DeviceLogDataRow AddGMM_Serie2DeviceLogDataRow(
        DateTime ChangeDateTime,
        int DeviceNumber,
        string Liegenschaft,
        int Nutzer,
        DateTime Stichtag,
        DateTime AbweichenderStichtag,
        int kWh_Stichtag,
        int kWh_Aktuell,
        int kWh_010710,
        int kWh_010610,
        int kWh_010510,
        int kWh_010410,
        int kWh_010310,
        int kWh_010210,
        int kWh_010110,
        int kWh_011209,
        int kWh_011109,
        int kWh_011009,
        int kWh_010909,
        int kWh_010809,
        int kWh_010709,
        int kWh_010609,
        int kWh_010509,
        int kWh_010409,
        int kWh_010309,
        int kWh_010209,
        int kWh_010109,
        string Messbereich,
        string Masseinheit,
        string Einbaudatum,
        string Montageauftrag,
        string Einbauort,
        string Ausleser,
        string Kommentar,
        bool FehlerGefunden,
        bool FehlerBeseitigt,
        DateTime Max_QmPerHour1_Month,
        double Max_QmPerHour1,
        DateTime Max_QmPerHour2_Month,
        double Max_QmPerHour2,
        DateTime Max_kW1_Month,
        double Max_kW1,
        DateTime Max_kW2_Month,
        double Max_kW2,
        bool ManuellGespeichert)
      {
        DataSetLogData.GMM_Serie2DeviceLogDataRow row = (DataSetLogData.GMM_Serie2DeviceLogDataRow) this.NewRow();
        object[] objArray = new object[45]
        {
          (object) ChangeDateTime,
          (object) DeviceNumber,
          (object) Liegenschaft,
          (object) Nutzer,
          (object) Stichtag,
          (object) AbweichenderStichtag,
          (object) kWh_Stichtag,
          (object) kWh_Aktuell,
          (object) kWh_010710,
          (object) kWh_010610,
          (object) kWh_010510,
          (object) kWh_010410,
          (object) kWh_010310,
          (object) kWh_010210,
          (object) kWh_010110,
          (object) kWh_011209,
          (object) kWh_011109,
          (object) kWh_011009,
          (object) kWh_010909,
          (object) kWh_010809,
          (object) kWh_010709,
          (object) kWh_010609,
          (object) kWh_010509,
          (object) kWh_010409,
          (object) kWh_010309,
          (object) kWh_010209,
          (object) kWh_010109,
          (object) Messbereich,
          (object) Masseinheit,
          (object) Einbaudatum,
          (object) Montageauftrag,
          (object) Einbauort,
          (object) Ausleser,
          (object) Kommentar,
          (object) FehlerGefunden,
          (object) FehlerBeseitigt,
          (object) Max_QmPerHour1_Month,
          (object) Max_QmPerHour1,
          (object) Max_QmPerHour2_Month,
          (object) Max_QmPerHour2,
          (object) Max_kW1_Month,
          (object) Max_kW1,
          (object) Max_kW2_Month,
          (object) Max_kW2,
          (object) ManuellGespeichert
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DataSetLogData.GMM_Serie2DeviceLogDataDataTable logDataDataTable = (DataSetLogData.GMM_Serie2DeviceLogDataDataTable) base.Clone();
        logDataDataTable.InitVars();
        return (DataTable) logDataDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DataSetLogData.GMM_Serie2DeviceLogDataDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnChangeDateTime = this.Columns["ChangeDateTime"];
        this.columnDeviceNumber = this.Columns["DeviceNumber"];
        this.columnLiegenschaft = this.Columns["Liegenschaft"];
        this.columnNutzer = this.Columns["Nutzer"];
        this.columnStichtag = this.Columns["Stichtag"];
        this.columnAbweichenderStichtag = this.Columns["AbweichenderStichtag"];
        this.columnkWh_Stichtag = this.Columns["kWh_Stichtag"];
        this.columnkWh_Aktuell = this.Columns["kWh_Aktuell"];
        this.columnkWh_010710 = this.Columns["kWh_010710"];
        this.columnkWh_010610 = this.Columns["kWh_010610"];
        this.columnkWh_010510 = this.Columns["kWh_010510"];
        this.columnkWh_010410 = this.Columns["kWh_010410"];
        this.columnkWh_010310 = this.Columns["kWh_010310"];
        this.columnkWh_010210 = this.Columns["kWh_010210"];
        this.columnkWh_010110 = this.Columns["kWh_010110"];
        this.columnkWh_011209 = this.Columns["kWh_011209"];
        this.columnkWh_011109 = this.Columns["kWh_011109"];
        this.columnkWh_011009 = this.Columns["kWh_011009"];
        this.columnkWh_010909 = this.Columns["kWh_010909"];
        this.columnkWh_010809 = this.Columns["kWh_010809"];
        this.columnkWh_010709 = this.Columns["kWh_010709"];
        this.columnkWh_010609 = this.Columns["kWh_010609"];
        this.columnkWh_010509 = this.Columns["kWh_010509"];
        this.columnkWh_010409 = this.Columns["kWh_010409"];
        this.columnkWh_010309 = this.Columns["kWh_010309"];
        this.columnkWh_010209 = this.Columns["kWh_010209"];
        this.columnkWh_010109 = this.Columns["kWh_010109"];
        this.columnMessbereich = this.Columns["Messbereich"];
        this.columnMasseinheit = this.Columns["Masseinheit"];
        this.columnEinbaudatum = this.Columns["Einbaudatum"];
        this.columnMontageauftrag = this.Columns["Montageauftrag"];
        this.columnEinbauort = this.Columns["Einbauort"];
        this.columnAusleser = this.Columns["Ausleser"];
        this.columnKommentar = this.Columns["Kommentar"];
        this.columnFehlerGefunden = this.Columns["FehlerGefunden"];
        this.columnFehlerBeseitigt = this.Columns["FehlerBeseitigt"];
        this.columnMax_QmPerHour1_Month = this.Columns["Max_QmPerHour1_Month"];
        this.columnMax_QmPerHour1 = this.Columns["Max_QmPerHour1"];
        this.columnMax_QmPerHour2_Month = this.Columns["Max_QmPerHour2_Month"];
        this.columnMax_QmPerHour2 = this.Columns["Max_QmPerHour2"];
        this.columnMax_kW1_Month = this.Columns["Max_kW1_Month"];
        this.columnMax_kW1 = this.Columns["Max_kW1"];
        this.columnMax_kW2_Month = this.Columns["Max_kW2_Month"];
        this.columnMax_kW2 = this.Columns["Max_kW2"];
        this.columnManuellGespeichert = this.Columns["ManuellGespeichert"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnChangeDateTime = new DataColumn("ChangeDateTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeDateTime);
        this.columnDeviceNumber = new DataColumn("DeviceNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDeviceNumber);
        this.columnLiegenschaft = new DataColumn("Liegenschaft", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLiegenschaft);
        this.columnNutzer = new DataColumn("Nutzer", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnNutzer);
        this.columnStichtag = new DataColumn("Stichtag", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStichtag);
        this.columnAbweichenderStichtag = new DataColumn("AbweichenderStichtag", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAbweichenderStichtag);
        this.columnkWh_Stichtag = new DataColumn("kWh_Stichtag", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_Stichtag);
        this.columnkWh_Aktuell = new DataColumn("kWh_Aktuell", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_Aktuell);
        this.columnkWh_010710 = new DataColumn("kWh_010710", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010710);
        this.columnkWh_010610 = new DataColumn("kWh_010610", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010610);
        this.columnkWh_010510 = new DataColumn("kWh_010510", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010510);
        this.columnkWh_010410 = new DataColumn("kWh_010410", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010410);
        this.columnkWh_010310 = new DataColumn("kWh_010310", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010310);
        this.columnkWh_010210 = new DataColumn("kWh_010210", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010210);
        this.columnkWh_010110 = new DataColumn("kWh_010110", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010110);
        this.columnkWh_011209 = new DataColumn("kWh_011209", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_011209);
        this.columnkWh_011109 = new DataColumn("kWh_011109", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_011109);
        this.columnkWh_011009 = new DataColumn("kWh_011009", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_011009);
        this.columnkWh_010909 = new DataColumn("kWh_010909", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010909);
        this.columnkWh_010809 = new DataColumn("kWh_010809", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010809);
        this.columnkWh_010709 = new DataColumn("kWh_010709", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010709);
        this.columnkWh_010609 = new DataColumn("kWh_010609", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010609);
        this.columnkWh_010509 = new DataColumn("kWh_010509", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010509);
        this.columnkWh_010409 = new DataColumn("kWh_010409", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010409);
        this.columnkWh_010309 = new DataColumn("kWh_010309", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010309);
        this.columnkWh_010209 = new DataColumn("kWh_010209", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010209);
        this.columnkWh_010109 = new DataColumn("kWh_010109", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnkWh_010109);
        this.columnMessbereich = new DataColumn("Messbereich", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMessbereich);
        this.columnMasseinheit = new DataColumn("Masseinheit", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMasseinheit);
        this.columnEinbaudatum = new DataColumn("Einbaudatum", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEinbaudatum);
        this.columnMontageauftrag = new DataColumn("Montageauftrag", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMontageauftrag);
        this.columnEinbauort = new DataColumn("Einbauort", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEinbauort);
        this.columnAusleser = new DataColumn("Ausleser", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnAusleser);
        this.columnKommentar = new DataColumn("Kommentar", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnKommentar);
        this.columnFehlerGefunden = new DataColumn("FehlerGefunden", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFehlerGefunden);
        this.columnFehlerBeseitigt = new DataColumn("FehlerBeseitigt", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFehlerBeseitigt);
        this.columnMax_QmPerHour1_Month = new DataColumn("Max_QmPerHour1_Month", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_QmPerHour1_Month);
        this.columnMax_QmPerHour1 = new DataColumn("Max_QmPerHour1", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_QmPerHour1);
        this.columnMax_QmPerHour2_Month = new DataColumn("Max_QmPerHour2_Month", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_QmPerHour2_Month);
        this.columnMax_QmPerHour2 = new DataColumn("Max_QmPerHour2", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_QmPerHour2);
        this.columnMax_kW1_Month = new DataColumn("Max_kW1_Month", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_kW1_Month);
        this.columnMax_kW1 = new DataColumn("Max_kW1", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_kW1);
        this.columnMax_kW2_Month = new DataColumn("Max_kW2_Month", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_kW2_Month);
        this.columnMax_kW2 = new DataColumn("Max_kW2", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMax_kW2);
        this.columnManuellGespeichert = new DataColumn("ManuellGespeichert", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnManuellGespeichert);
        this.columnChangeDateTime.AllowDBNull = false;
        this.columnDeviceNumber.AllowDBNull = false;
        this.columnLiegenschaft.AllowDBNull = false;
        this.columnNutzer.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetLogData.GMM_Serie2DeviceLogDataRow NewGMM_Serie2DeviceLogDataRow()
      {
        return (DataSetLogData.GMM_Serie2DeviceLogDataRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DataSetLogData.GMM_Serie2DeviceLogDataRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DataSetLogData.GMM_Serie2DeviceLogDataRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.GMM_Serie2DeviceLogDataRowChanged == null)
          return;
        this.GMM_Serie2DeviceLogDataRowChanged((object) this, new DataSetLogData.GMM_Serie2DeviceLogDataRowChangeEvent((DataSetLogData.GMM_Serie2DeviceLogDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.GMM_Serie2DeviceLogDataRowChanging == null)
          return;
        this.GMM_Serie2DeviceLogDataRowChanging((object) this, new DataSetLogData.GMM_Serie2DeviceLogDataRowChangeEvent((DataSetLogData.GMM_Serie2DeviceLogDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.GMM_Serie2DeviceLogDataRowDeleted == null)
          return;
        this.GMM_Serie2DeviceLogDataRowDeleted((object) this, new DataSetLogData.GMM_Serie2DeviceLogDataRowChangeEvent((DataSetLogData.GMM_Serie2DeviceLogDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.GMM_Serie2DeviceLogDataRowDeleting == null)
          return;
        this.GMM_Serie2DeviceLogDataRowDeleting((object) this, new DataSetLogData.GMM_Serie2DeviceLogDataRowChangeEvent((DataSetLogData.GMM_Serie2DeviceLogDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveGMM_Serie2DeviceLogDataRow(DataSetLogData.GMM_Serie2DeviceLogDataRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DataSetLogData dataSetLogData = new DataSetLogData();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = dataSetLogData.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (GMM_Serie2DeviceLogDataDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = dataSetLogData.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class GMM_Serie2DeviceLogDataRow : DataRow
    {
      private DataSetLogData.GMM_Serie2DeviceLogDataDataTable tableGMM_Serie2DeviceLogData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal GMM_Serie2DeviceLogDataRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableGMM_Serie2DeviceLogData = (DataSetLogData.GMM_Serie2DeviceLogDataDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ChangeDateTime
      {
        get => (DateTime) this[this.tableGMM_Serie2DeviceLogData.ChangeDateTimeColumn];
        set => this[this.tableGMM_Serie2DeviceLogData.ChangeDateTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int DeviceNumber
      {
        get => (int) this[this.tableGMM_Serie2DeviceLogData.DeviceNumberColumn];
        set => this[this.tableGMM_Serie2DeviceLogData.DeviceNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Liegenschaft
      {
        get => (string) this[this.tableGMM_Serie2DeviceLogData.LiegenschaftColumn];
        set => this[this.tableGMM_Serie2DeviceLogData.LiegenschaftColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int Nutzer
      {
        get => (int) this[this.tableGMM_Serie2DeviceLogData.NutzerColumn];
        set => this[this.tableGMM_Serie2DeviceLogData.NutzerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Stichtag
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGMM_Serie2DeviceLogData.StichtagColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Stichtag' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.StichtagColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime AbweichenderStichtag
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGMM_Serie2DeviceLogData.AbweichenderStichtagColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'AbweichenderStichtag' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.AbweichenderStichtagColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_Stichtag
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_StichtagColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_Stichtag' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_StichtagColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_Aktuell
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_AktuellColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_Aktuell' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_AktuellColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010710
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010710Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010710' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010710Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010610
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010610Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010610' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010610Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010510
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010510Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010510' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010510Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010410
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010410Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010410' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010410Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010310
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010310Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010310' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010310Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010210
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010210Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010210' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010210Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010110
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010110Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010110' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010110Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_011209
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_011209Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_011209' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_011209Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_011109
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_011109Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_011109' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_011109Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_011009
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_011009Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_011009' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_011009Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010909
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010909Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010909' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010909Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010809
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010809Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010809' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010809Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010709
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010709Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010709' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010709Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010609
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010609Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010609' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010609Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010509
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010509Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010509' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010509Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010409
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010409Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010409' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010409Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010309
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010309Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010309' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010309Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010209
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010209Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010209' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010209Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int kWh_010109
      {
        get
        {
          try
          {
            return (int) this[this.tableGMM_Serie2DeviceLogData.kWh_010109Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'kWh_010109' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.kWh_010109Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Messbereich
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_Serie2DeviceLogData.MessbereichColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Messbereich' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.MessbereichColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Masseinheit
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_Serie2DeviceLogData.MasseinheitColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Masseinheit' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.MasseinheitColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Einbaudatum
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_Serie2DeviceLogData.EinbaudatumColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Einbaudatum' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.EinbaudatumColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Montageauftrag
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_Serie2DeviceLogData.MontageauftragColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Montageauftrag' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.MontageauftragColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Einbauort
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_Serie2DeviceLogData.EinbauortColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Einbauort' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.EinbauortColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Ausleser
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_Serie2DeviceLogData.AusleserColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Ausleser' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.AusleserColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Kommentar
      {
        get
        {
          try
          {
            return (string) this[this.tableGMM_Serie2DeviceLogData.KommentarColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Kommentar' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.KommentarColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool FehlerGefunden
      {
        get
        {
          try
          {
            return (bool) this[this.tableGMM_Serie2DeviceLogData.FehlerGefundenColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FehlerGefunden' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.FehlerGefundenColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool FehlerBeseitigt
      {
        get
        {
          try
          {
            return (bool) this[this.tableGMM_Serie2DeviceLogData.FehlerBeseitigtColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FehlerBeseitigt' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.FehlerBeseitigtColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Max_QmPerHour1_Month
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour1_MonthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_QmPerHour1_Month' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour1_MonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Max_QmPerHour1
      {
        get
        {
          try
          {
            return (double) this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_QmPerHour1' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Max_QmPerHour2_Month
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour2_MonthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_QmPerHour2_Month' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour2_MonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Max_QmPerHour2
      {
        get
        {
          try
          {
            return (double) this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_QmPerHour2' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Max_kW1_Month
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGMM_Serie2DeviceLogData.Max_kW1_MonthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_kW1_Month' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.Max_kW1_MonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Max_kW1
      {
        get
        {
          try
          {
            return (double) this[this.tableGMM_Serie2DeviceLogData.Max_kW1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_kW1' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.Max_kW1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime Max_kW2_Month
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableGMM_Serie2DeviceLogData.Max_kW2_MonthColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_kW2_Month' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.Max_kW2_MonthColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Max_kW2
      {
        get
        {
          try
          {
            return (double) this[this.tableGMM_Serie2DeviceLogData.Max_kW2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Max_kW2' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.Max_kW2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool ManuellGespeichert
      {
        get
        {
          try
          {
            return (bool) this[this.tableGMM_Serie2DeviceLogData.ManuellGespeichertColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ManuellGespeichert' in table 'GMM_Serie2DeviceLogData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableGMM_Serie2DeviceLogData.ManuellGespeichertColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsStichtagNull() => this.IsNull(this.tableGMM_Serie2DeviceLogData.StichtagColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetStichtagNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.StichtagColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAbweichenderStichtagNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.AbweichenderStichtagColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAbweichenderStichtagNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.AbweichenderStichtagColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_StichtagNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_StichtagColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_StichtagNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_StichtagColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_AktuellNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_AktuellColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_AktuellNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_AktuellColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010710Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010710Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010710Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010710Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010610Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010610Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010610Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010610Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010510Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010510Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010510Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010510Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010410Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010410Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010410Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010410Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010310Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010310Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010310Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010310Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010210Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010210Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010210Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010210Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010110Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010110Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010110Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010110Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_011209Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_011209Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_011209Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_011209Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_011109Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_011109Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_011109Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_011109Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_011009Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_011009Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_011009Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_011009Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010909Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010909Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010909Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010909Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010809Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010809Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010809Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010809Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010709Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010709Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010709Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010709Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010609Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010609Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010609Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010609Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010509Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010509Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010509Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010509Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010409Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010409Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010409Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010409Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010309Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010309Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010309Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010309Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010209Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010209Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010209Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010209Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IskWh_010109Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.kWh_010109Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetkWh_010109Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.kWh_010109Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMessbereichNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.MessbereichColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMessbereichNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.MessbereichColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMasseinheitNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.MasseinheitColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMasseinheitNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.MasseinheitColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEinbaudatumNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.EinbaudatumColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEinbaudatumNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.EinbaudatumColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMontageauftragNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.MontageauftragColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMontageauftragNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.MontageauftragColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsEinbauortNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.EinbauortColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetEinbauortNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.EinbauortColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsAusleserNull() => this.IsNull(this.tableGMM_Serie2DeviceLogData.AusleserColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetAusleserNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.AusleserColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsKommentarNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.KommentarColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetKommentarNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.KommentarColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFehlerGefundenNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.FehlerGefundenColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFehlerGefundenNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.FehlerGefundenColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFehlerBeseitigtNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.FehlerBeseitigtColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFehlerBeseitigtNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.FehlerBeseitigtColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_QmPerHour1_MonthNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.Max_QmPerHour1_MonthColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_QmPerHour1_MonthNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour1_MonthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_QmPerHour1Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.Max_QmPerHour1Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_QmPerHour1Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour1Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_QmPerHour2_MonthNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.Max_QmPerHour2_MonthColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_QmPerHour2_MonthNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour2_MonthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_QmPerHour2Null()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.Max_QmPerHour2Column);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_QmPerHour2Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.Max_QmPerHour2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_kW1_MonthNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.Max_kW1_MonthColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_kW1_MonthNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.Max_kW1_MonthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_kW1Null() => this.IsNull(this.tableGMM_Serie2DeviceLogData.Max_kW1Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_kW1Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.Max_kW1Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_kW2_MonthNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.Max_kW2_MonthColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_kW2_MonthNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.Max_kW2_MonthColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMax_kW2Null() => this.IsNull(this.tableGMM_Serie2DeviceLogData.Max_kW2Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMax_kW2Null()
      {
        this[this.tableGMM_Serie2DeviceLogData.Max_kW2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsManuellGespeichertNull()
      {
        return this.IsNull(this.tableGMM_Serie2DeviceLogData.ManuellGespeichertColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetManuellGespeichertNull()
      {
        this[this.tableGMM_Serie2DeviceLogData.ManuellGespeichertColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class GMM_Serie2DeviceLogDataRowChangeEvent : EventArgs
    {
      private DataSetLogData.GMM_Serie2DeviceLogDataRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public GMM_Serie2DeviceLogDataRowChangeEvent(
        DataSetLogData.GMM_Serie2DeviceLogDataRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataSetLogData.GMM_Serie2DeviceLogDataRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}


--- Datenliste.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.Datenliste
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class Datenliste : Form
  {
    private string SetupFileName;
    private IContainer components = (IContainer) null;
    private DataGridView dataGridView1;

    public Datenliste(DataTable TheTable)
    {
      this.InitializeComponent();
      this.SetupFileName = Path.Combine(SystemValues.LoggDataPath, "DataListSetup.txt");
      this.dataGridView1.DataSource = (object) TheTable;
    }

    private void Datenliste_FormClosing(object sender, FormClosingEventArgs e)
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.dataGridView1 = new DataGridView();
      ((ISupportInitialize) this.dataGridView1).BeginInit();
      this.SuspendLayout();
      this.dataGridView1.AllowUserToAddRows = false;
      this.dataGridView1.AllowUserToOrderColumns = true;
      this.dataGridView1.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
      this.dataGridView1.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dataGridView1.Dock = DockStyle.Fill;
      this.dataGridView1.Location = new Point(0, 0);
      this.dataGridView1.Name = "dataGridView1";
      this.dataGridView1.ReadOnly = true;
      this.dataGridView1.Size = new Size(954, 494);
      this.dataGridView1.TabIndex = 0;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(954, 494);
      this.Controls.Add((Control) this.dataGridView1);
      this.Name = nameof (Datenliste);
      this.Text = nameof (Datenliste);
      this.WindowState = FormWindowState.Maximized;
      this.FormClosing += new FormClosingEventHandler(this.Datenliste_FormClosing);
      ((ISupportInitialize) this.dataGridView1).EndInit();
      this.ResumeLayout(false);
    }
  }
}


--- DisplayCode.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.DisplayCode
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class DisplayCode : LinkBlock
  {
    internal ArrayList AllMenuItems;
    internal SortedList AllMenusByName;
    internal ArrayList FrameCodesList;
    private static string[] SecmentByteNames = new string[7]
    {
      "DII_FRAME_SEGS1",
      "DII_FRAME_SEGS2",
      "DII_FRAME_SEGS3",
      "DII_FRAME_SEGS4",
      "DII_FRAME_MENUPOS",
      "DII_FRAME_BLINK",
      "DII_FRAME_TEXT"
    };
    private const int BaseSecCount = 4;
    private byte[] SecmentByteCodes;

    internal DisplayCode(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.DisplayCode)
    {
    }

    internal bool GenerateMenuItemLists()
    {
      this.AllMenuItems = new ArrayList();
      this.AllMenusByName = new SortedList();
      this.FrameCodesList = new ArrayList();
      this.MyMeter.MyFunctionTable.FirstFunctionInColumn = new ArrayList();
      int index1 = -1;
      int num1 = 0;
      int num2 = 0;
      short num3 = 0;
      for (int index2 = 0; index2 < this.MyMeter.MyFunctionTable.FunctionList.Count; ++index2)
      {
        Function function = (Function) this.MyMeter.MyFunctionTable.FunctionList[index2];
        if (index2 >= (int) num3)
        {
          ++index1;
          num1 = 0;
          while (index1 < this.MyMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList.Count - 1 && (int) (short) this.MyMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList[index1] == (int) (short) this.MyMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList[index1 + 1])
          {
            ++index1;
            this.MyMeter.MyFunctionTable.FirstFunctionInColumn.Add((object) null);
          }
          this.MyMeter.MyFunctionTable.FirstFunctionInColumn.Add((object) function);
          num3 = index1 >= this.MyMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList.Count - 1 ? (short) 9999 : (short) this.MyMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList[index1 + 1];
        }
        function.ColumnNumber = index1;
        function.RowNumber = num1++;
        foreach (MenuItem menu in function.MenuList)
        {
          menu.MyFunction = function;
          menu.MenuIndex = num2++;
          this.AllMenuItems.Add((object) menu);
          this.AllMenusByName.Add((object) (menu.MyFunction.Name + "." + menu.MenuName), (object) menu);
          foreach (CodeBlock displayCodeBlock in menu.DisplayCodeBlocks)
          {
            if (displayCodeBlock.CodeSequenceType == CodeBlock.CodeSequenceTypes.Framecode)
              this.FrameCodesList.Add((object) displayCodeBlock);
          }
        }
      }
      return true;
    }

    internal bool AdjustDisplayPositions()
    {
      foreach (CodeBlock frameCodes in this.FrameCodesList)
      {
        if (!this.SetDisplayPositionInfo(frameCodes))
          return false;
      }
      return true;
    }

    internal bool AdjustFunctions()
    {
      if (!this.AdjustFrameCodes())
        return false;
      int index = this.MyMeter.MyFunctionTable.FunctionListByNumber.IndexOfKey((object) (ushort) 292);
      if (index >= 0)
      {
        CodeBlock displayCodeBlock = (CodeBlock) ((MenuItem) ((Function) this.MyMeter.MyFunctionTable.FunctionListByNumber.GetByIndex(index)).MenuList[3]).DisplayCodeBlocks[1];
        ((CodeObject) displayCodeBlock.CodeList[6]).CodeValue = (1U << (int) this.MyMeter.MyMath.MyBaseSettings.Vol_SumExpo).ToString();
        int num = ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Vol_VolSum"]).AddressCPU + 4;
        ((CodeObject) displayCodeBlock.CodeList[11]).CodeValue = num.ToString();
      }
      return true;
    }

    internal bool AdjustFrameCodes()
    {
      foreach (CodeBlock frameCodes in this.FrameCodesList)
      {
        if (frameCodes.FrameType == FrameTypes.None)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Illegal frame type");
        }
        else
        {
          if (!this.SetDisplayPositionInfo(frameCodes))
            return false;
          MeterMath.FrameDescription TheFrame;
          int Shift;
          if (frameCodes.FrameType != FrameTypes.Standard && this.MyMeter.MyMath.GetSpecialOverrideFrame(frameCodes.FrameType, frameCodes.SpecialOptions, out TheFrame, out Shift))
          {
            if (Shift != 0)
            {
              Function function = (Function) this.MyMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) frameCodes.FunctionNumber];
              bool flag1 = false;
              bool flag2 = false;
              foreach (MenuItem menu in function.MenuList)
              {
                foreach (CodeBlock displayCodeBlock in menu.DisplayCodeBlocks)
                {
                  if (frameCodes == displayCodeBlock)
                    flag2 = true;
                  if (flag2 && displayCodeBlock.CodeSequenceType == CodeBlock.CodeSequenceTypes.InlineRuntimecode)
                  {
                    foreach (CodeObject code in displayCodeBlock.CodeList)
                    {
                      if (code.OverrideMark == "_HR_ENERGY")
                      {
                        int num1;
                        try
                        {
                          num1 = int.Parse(code.CodeValue);
                        }
                        catch
                        {
                          return this.MyMeter.MyHandler.AddErrorPointMessage("Illegal factor");
                        }
                        int num2 = num1 + Shift;
                        code.LineInfo = "@old: " + code.CodeValue;
                        code.CodeValue = num2.ToString();
                        flag1 = true;
                      }
                    }
                  }
                }
              }
              if (!flag1)
                return this.MyMeter.MyHandler.AddErrorPointMessage("_HR_ENERGY not found");
            }
            if (!this.GenerateNewFrame(frameCodes, TheFrame))
              return false;
          }
        }
      }
      return true;
    }

    private bool SetDisplayPositionInfo(CodeBlock FrameBlock)
    {
      ArrayList codeList = FrameBlock.CodeList;
      try
      {
        this.MyMeter.MyCompiler.CompileCodeObject((CodeObject) FrameBlock.CodeList[0]);
        byte codeValueCompiled = (byte) ((CodeObject) FrameBlock.CodeList[0]).CodeValueCompiled;
        if (((int) codeValueCompiled & 16) == 0)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal frame control byte");
          return false;
        }
        short index1 = 1;
        for (byte index2 = 1; index2 < (byte) 16; index2 <<= 1)
        {
          if (((int) codeValueCompiled & (int) index2) > 0)
            ++index1;
        }
        Function function = (Function) this.MyMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) FrameBlock.FunctionNumber];
        byte num = (byte) (((uint) (byte) (function.ColumnNumber & 15) << 4) + (uint) (byte) (function.RowNumber & 15));
        ((CodeObject) FrameBlock.CodeList[(int) index1]).CodeValue = num.ToString();
      }
      catch
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Display position error");
        return false;
      }
      return true;
    }

    private bool GenerateNewFrame(CodeBlock FrameBlock, MeterMath.FrameDescription NewFrame)
    {
      if (FrameBlock.FrameType == FrameTypes.BC)
      {
        if (NewFrame.FrameByteDescription.Length != 4 || FrameBlock.CodeList.Count != 11)
          return this.MyMeter.MyHandler.AddErrorPointMessage("Illegal BCFrame");
        for (int index = 0; index < 4; ++index)
          ((CodeObject) FrameBlock.CodeList[index + 7]).CodeValue = NewFrame.FrameByteDescription[index];
        return true;
      }
      if (FrameBlock.FrameType == FrameTypes.ImpulsValue)
      {
        if (NewFrame.FrameByteDescription.Length != 12 || FrameBlock.CodeList.Count != 13)
          return this.MyMeter.MyHandler.AddErrorPointMessage("Illegal ImpulsValueFrame");
        for (int index = 0; index < NewFrame.FrameByteDescription.Length; ++index)
        {
          if (!(NewFrame.FrameByteDescription[index] == "-"))
            ((CodeObject) FrameBlock.CodeList[index + 1]).CodeValue = NewFrame.FrameByteDescription[index];
        }
        return true;
      }
      bool[] flagArray = new bool[DisplayCode.SecmentByteNames.Length];
      CodeObject code1 = (CodeObject) FrameBlock.CodeList[0];
      code1.LineInfo = "@old: " + code1.CodeValue;
      if (!this.GarantHeaderStringFormat(code1))
        return false;
      for (int index = 0; index < DisplayCode.SecmentByteNames.Length; ++index)
      {
        if (code1.CodeValue.IndexOf(DisplayCode.SecmentByteNames[index]) >= 0)
        {
          flagArray[index] = true;
        }
        else
        {
          flagArray[index] = false;
          if (index < 4)
          {
            CodeObject codeObject = new CodeObject(code1.FunctionNumber);
            codeObject.CodeType = CodeObject.CodeTypes.BYTE;
            codeObject.CodeValue = string.Empty;
            codeObject.Size = 1;
            FrameBlock.CodeList.Insert(index + 1, (object) codeObject);
          }
        }
      }
      StringBuilder stringBuilder = new StringBuilder(300);
      for (int index1 = 0; index1 < 4 && index1 < NewFrame.FrameByteDescription.Length; ++index1)
      {
        CodeObject code2 = (CodeObject) FrameBlock.CodeList[index1 + 1];
        string[] strArray1 = code2.CodeValue.Split(' ');
        string[] strArray2 = NewFrame.FrameByteDescription[index1].Split(' ');
        stringBuilder.Length = 0;
        for (int index2 = 0; index2 < strArray2.Length; ++index2)
        {
          if (strArray2[index2].Length > 0)
            stringBuilder.Append(strArray2[index2] + " ");
        }
        for (int index3 = 0; index3 < strArray1.Length; ++index3)
        {
          if (strArray1[index3].Length > 0 && stringBuilder.ToString().IndexOf(strArray1[index3]) < 0 && ZelsiusMath.ClearZelsiusUnitFrameMasks[index1].IndexOf(strArray1[index3]) < 0)
            stringBuilder.Append(strArray1[index3] + " ");
        }
        code2.LineInfo = "@old: " + code2.CodeValue;
        code2.CodeValue = stringBuilder.ToString().Trim();
      }
      stringBuilder.Length = 0;
      for (int index = DisplayCode.SecmentByteNames.Length - 1; index >= 0; --index)
      {
        if (index >= 4)
        {
          if (flagArray[index])
            stringBuilder.Append(DisplayCode.SecmentByteNames[index] + " ");
        }
        else if (flagArray[index] || ((CodeObject) FrameBlock.CodeList[index + 1]).CodeValue.Length > 0)
          stringBuilder.Append(DisplayCode.SecmentByteNames[index] + " ");
        else
          FrameBlock.CodeList.RemoveAt(index + 1);
      }
      code1.CodeValue = stringBuilder.ToString();
      return true;
    }

    private bool GarantHeaderStringFormat(CodeObject HeaderCodeObject)
    {
      if (!char.IsDigit(HeaderCodeObject.CodeValue[0]))
        return true;
      if (this.SecmentByteCodes == null)
      {
        this.SecmentByteCodes = new byte[DisplayCode.SecmentByteNames.Length];
        for (int index = 0; index < this.SecmentByteCodes.Length; ++index)
        {
          if (!this.MyMeter.MyCompiler.CompileStringToByte(DisplayCode.SecmentByteNames[index], out this.SecmentByteCodes[index]))
            return false;
        }
      }
      StringBuilder stringBuilder = new StringBuilder(300);
      int num;
      try
      {
        num = int.Parse(HeaderCodeObject.CodeValue);
      }
      catch
      {
        return false;
      }
      for (int index = 0; index < this.SecmentByteCodes.Length; ++index)
      {
        if (((uint) num & (uint) this.SecmentByteCodes[index]) > 0U)
          stringBuilder.Append(DisplayCode.SecmentByteNames[index] + " ");
      }
      HeaderCodeObject.CodeValue = stringBuilder.ToString().Trim();
      CodeObject codeObject = HeaderCodeObject;
      codeObject.LineInfo = codeObject.LineInfo + " = " + HeaderCodeObject.CodeValue;
      return true;
    }
  }
}


--- EpromHeader.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.EpromHeader
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class EpromHeader : LinkBlock
  {
    internal EpromHeader(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.EpromHeader)
    {
      this.BlockStartAddress = 0;
      Parameter NewParameter1 = new Parameter("EEP_HEADER_TestByte", 1, LinkBlockTypes.EpromHeader);
      NewParameter1.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter1);
      this.AddToAllParameters(NewParameter1);
      Parameter NewParameter2 = new Parameter("EEP_HEADER_FillByte", 1, LinkBlockTypes.EpromHeader);
      NewParameter2.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter2);
      this.AddToAllParameters(NewParameter2);
      Parameter NewParameter3 = new Parameter("EEP_HEADER_MeterKey", 4, LinkBlockTypes.EpromHeader);
      NewParameter3.ExistOnEprom = true;
      NewParameter3.GroupMember[1] = true;
      this.LinkObjList.Add((object) NewParameter3);
      this.AddToAllParameters(NewParameter3);
      Parameter NewParameter4 = new Parameter("EEP_HEADER_SerialNr", 4, LinkBlockTypes.EpromHeader);
      NewParameter4.ExistOnEprom = true;
      NewParameter4.ParameterFormat = Parameter.BaseParameterFormat.BCD;
      NewParameter4.GroupMember[1] = true;
      this.LinkObjList.Add((object) NewParameter4);
      this.AddToAllParameters(NewParameter4);
      Parameter NewParameter5 = new Parameter("EEP_HEADER_MBusSerialNr", 4, LinkBlockTypes.EpromHeader);
      NewParameter5.ExistOnEprom = true;
      NewParameter5.ParameterFormat = Parameter.BaseParameterFormat.BCD;
      NewParameter5.GroupMember[5] = true;
      this.LinkObjList.Add((object) NewParameter5);
      this.AddToAllParameters(NewParameter5);
      Parameter NewParameter6 = new Parameter("EEP_HEADER_MBusManufacturer", 2, LinkBlockTypes.EpromHeader);
      NewParameter6.ExistOnEprom = true;
      NewParameter6.GroupMember[1] = true;
      this.LinkObjList.Add((object) NewParameter6);
      this.AddToAllParameters(NewParameter6);
      Parameter NewParameter7 = new Parameter("EEP_HEADER_MBusMeterType", 1, LinkBlockTypes.EpromHeader);
      NewParameter7.ExistOnEprom = true;
      NewParameter7.GroupMember[1] = true;
      this.LinkObjList.Add((object) NewParameter7);
      this.AddToAllParameters(NewParameter7);
      Parameter NewParameter8 = new Parameter("EEP_HEADER_MBusMedium", 1, LinkBlockTypes.EpromHeader);
      NewParameter8.ExistOnEprom = true;
      NewParameter8.GroupMember[1] = true;
      this.LinkObjList.Add((object) NewParameter8);
      this.AddToAllParameters(NewParameter8);
      Parameter NewParameter9 = new Parameter("EEP_HEADER_MeterID", 4, LinkBlockTypes.EpromHeader);
      NewParameter9.ExistOnEprom = true;
      NewParameter9.GroupMember[1] = true;
      this.LinkObjList.Add((object) NewParameter9);
      this.AddToAllParameters(NewParameter9);
      Parameter NewParameter10 = new Parameter("EEP_HEADER_MeterInfoID", 4, LinkBlockTypes.EpromHeader);
      NewParameter10.ExistOnEprom = true;
      NewParameter10.GroupMember[1] = true;
      this.LinkObjList.Add((object) NewParameter10);
      this.AddToAllParameters(NewParameter10);
      Parameter NewParameter11 = new Parameter("EEP_HEADER_MeterTypeID", 4, LinkBlockTypes.EpromHeader);
      NewParameter11.ExistOnEprom = true;
      NewParameter11.GroupMember[1] = true;
      this.LinkObjList.Add((object) NewParameter11);
      this.AddToAllParameters(NewParameter11);
      Parameter NewParameter12 = new Parameter("EEP_HEADER_RamParamBlockAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter12.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter12);
      this.AddToAllParameters(NewParameter12);
      Parameter NewParameter13 = new Parameter("EEP_HEADER_BackupBlockAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter13.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter13);
      this.AddToAllParameters(NewParameter13);
      Parameter NewParameter14 = new Parameter("EEP_HEADER_FixedParamAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter14.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter14);
      this.AddToAllParameters(NewParameter14);
      Parameter NewParameter15 = new Parameter("EEP_HEADER_WritePermTableAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter15.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter15);
      this.AddToAllParameters(NewParameter15);
      Parameter NewParameter16 = new Parameter("EEP_HEADER_DispBlockAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter16.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter16);
      this.AddToAllParameters(NewParameter16);
      Parameter NewParameter17 = new Parameter("EEP_HEADER_RuntimeVarsAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter17.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter17);
      this.AddToAllParameters(NewParameter17);
      Parameter NewParameter18 = new Parameter("EEP_HEADER_RuntimeCodeAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter18.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter18);
      this.AddToAllParameters(NewParameter18);
      Parameter NewParameter19 = new Parameter("EEP_HEADER_EpromVarsAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter19.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter19);
      this.AddToAllParameters(NewParameter19);
      Parameter NewParameter20 = new Parameter("EEP_HEADER_ParamBlockAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter20.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter20);
      this.AddToAllParameters(NewParameter20);
      Parameter NewParameter21 = new Parameter("EEP_HEADER_EpromRuntimeAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter21.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter21);
      this.AddToAllParameters(NewParameter21);
      Parameter NewParameter22 = new Parameter("EEP_HEADER_MBusBlockAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter22.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter22);
      this.AddToAllParameters(NewParameter22);
      Parameter NewParameter23 = new Parameter("EEP_HEADER_FunctionTableAdr", 2, LinkBlockTypes.EpromHeader);
      NewParameter23.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter23);
      this.AddToAllParameters(NewParameter23);
      Parameter NewParameter24 = new Parameter("EEP_HEADER_StaticChecksum", 2, LinkBlockTypes.EpromHeader);
      NewParameter24.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter24);
      this.AddToAllParameters(NewParameter24);
      Parameter NewParameter25 = new Parameter("EEP_HEADER_HeaderChecksum", 2, LinkBlockTypes.EpromHeader);
      NewParameter25.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter25);
      this.AddToAllParameters(NewParameter25);
      Parameter NewParameter26 = new Parameter("EEP_HEADER_BackupChecksum", 2, LinkBlockTypes.EpromHeader);
      NewParameter26.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter26);
      this.AddToAllParameters(NewParameter26);
      Parameter NewParameter27 = new Parameter("EEP_HEADER_EditStr", 16, LinkBlockTypes.EpromHeader);
      NewParameter27.ExistOnEprom = true;
      this.LinkObjList.Add((object) NewParameter27);
      this.AddToAllParameters(NewParameter27);
    }

    private void AddToAllParameters(Parameter NewParameter)
    {
      string key = "EEP_Header." + NewParameter.Name;
      NewParameter.FullName = key;
      this.MyMeter.AllParameters.Add((object) key, (object) NewParameter);
    }

    internal bool ReadHeaderFromConnectedDevice()
    {
      int address1 = ((LinkObj) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_SerialNr"]).Address;
      Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_EditStr"];
      int num = allParameter.Address + allParameter.Size - address1;
      ByteField MemoryData = new ByteField(num);
      if (!this.MyMeter.MyCommunication.MyBus.ReadMemory(MemoryLocation.EEPROM, address1, num, out MemoryData))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "");
        return false;
      }
      this.MyMeter.Eprom = new byte[address1 + num];
      for (int index = 0; index < num; ++index)
        this.MyMeter.Eprom[index + address1] = MemoryData.Data[index];
      int address2 = ((LinkObj) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_HeaderChecksum"]).Address;
      if ((int) this.GenerateChecksum(this.MyMeter.Eprom, address1, address2 - address1, (ushort) 0) != (int) ParameterService.GetFromByteArray_ushort(this.MyMeter.Eprom, ref address2))
      {
        if (this.MyMeter.MyHandler.checksumErrorsAsWarning)
        {
          ZR_ClassLibMessages.AddWarning("Header checksum error");
        }
        else
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Header checksum error");
          return false;
        }
      }
      return true;
    }

    internal bool GenerateChecksums()
    {
      Parameter allParameter1 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_StaticChecksum"];
      Parameter allParameter2 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_HeaderChecksum"];
      Parameter allParameter3 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupChecksum"];
      int blockStartAddress1 = this.MyMeter.MyRamParameter.BlockStartAddress;
      int NumberOfBytes1 = this.MyMeter.MyBackup.BlockStartAddress - blockStartAddress1;
      ushort checksum1 = this.GenerateChecksum(this.MyMeter.Eprom, blockStartAddress1, NumberOfBytes1, (ushort) 0);
      int blockStartAddress2 = this.MyMeter.MyFixedParameter.BlockStartAddress;
      int NumberOfBytes2 = this.MyMeter.MyRuntimeVars.BlockStartAddress - blockStartAddress2;
      ushort checksum2 = this.GenerateChecksum(this.MyMeter.Eprom, blockStartAddress2, NumberOfBytes2, checksum1);
      int blockStartAddress3 = this.MyMeter.MyRuntimeCode.BlockStartAddress;
      int NumberOfBytes3 = this.MyMeter.MyEpromVars.BlockStartAddress - blockStartAddress3;
      ushort checksum3 = this.GenerateChecksum(this.MyMeter.Eprom, blockStartAddress3, NumberOfBytes3, checksum2);
      int blockStartAddress4 = this.MyMeter.MyEpromRuntime.BlockStartAddress;
      int NumberOfBytes4 = this.MyMeter.MyFunctionTable.BlockStartAddress - blockStartAddress4;
      ushort checksum4 = this.GenerateChecksum(this.MyMeter.Eprom, blockStartAddress4, NumberOfBytes4, checksum3);
      allParameter1.ValueEprom = (long) checksum4;
      allParameter1.UpdateByteList();
      allParameter1.CopyToEprom(this.MyMeter.Eprom);
      int address = ((LinkObj) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_SerialNr"]).Address;
      int NumberOfBytes5 = allParameter2.Address - address;
      ushort checksum5 = this.GenerateChecksum(this.MyMeter.Eprom, address, NumberOfBytes5, (ushort) 0);
      allParameter2.ValueEprom = (long) checksum5;
      allParameter2.UpdateByteList();
      allParameter2.CopyToEprom(this.MyMeter.Eprom);
      int blockStartAddress5 = this.MyMeter.MyBackup.BlockStartAddress;
      int NumberOfBytes6 = this.MyMeter.MyFixedParameter.BlockStartAddress - blockStartAddress5;
      ushort checksum6 = this.GenerateChecksum(this.MyMeter.Eprom, blockStartAddress5, NumberOfBytes6, (ushort) 0);
      int blockStartAddress6 = this.MyMeter.MyRuntimeVars.BlockStartAddress;
      int NumberOfBytes7 = this.MyMeter.MyRuntimeCode.BlockStartAddress - blockStartAddress6;
      ushort checksum7 = this.GenerateChecksum(this.MyMeter.Eprom, blockStartAddress6, NumberOfBytes7, checksum6);
      allParameter3.ValueEprom = (long) checksum7;
      allParameter3.UpdateByteList();
      allParameter3.CopyToEprom(this.MyMeter.Eprom);
      return true;
    }

    internal bool AllChecksumsOk()
    {
      Parameter allParameter1 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_StaticChecksum"];
      Parameter allParameter2 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupChecksum"];
      int valueEprom1 = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RamParamBlockAdr"]).ValueEprom;
      int NumberOfBytes1 = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupBlockAdr"]).ValueEprom - valueEprom1;
      ushort checksum1 = this.GenerateChecksum(this.MyMeter.Eprom, valueEprom1, NumberOfBytes1, (ushort) 0);
      Parameter allParameter3 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_FixedParamAdr"];
      int valueEprom2 = (int) allParameter3.ValueEprom;
      Parameter allParameter4 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RuntimeVarsAdr"];
      int NumberOfBytes2 = (int) allParameter4.ValueEprom - valueEprom2;
      ushort checksum2 = this.GenerateChecksum(this.MyMeter.Eprom, valueEprom2, NumberOfBytes2, checksum1);
      Parameter allParameter5 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RuntimeCodeAdr"];
      int valueEprom3 = (int) allParameter5.ValueEprom;
      int NumberOfBytes3 = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_EpromVarsAdr"]).ValueEprom - valueEprom3;
      ushort checksum3 = this.GenerateChecksum(this.MyMeter.Eprom, valueEprom3, NumberOfBytes3, checksum2);
      int valueEprom4 = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_ParamBlockAdr"]).ValueEprom;
      int NumberOfBytes4 = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_FunctionTableAdr"]).ValueEprom - valueEprom4;
      ushort checksum4 = this.GenerateChecksum(this.MyMeter.Eprom, valueEprom4, NumberOfBytes4, checksum3);
      if (allParameter1.ValueEprom != (long) checksum4)
      {
        if (this.MyMeter.MyHandler.checksumErrorsAsWarning)
        {
          ZR_ClassLibMessages.AddWarning("Static checksum error");
        }
        else
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Static checksum error");
          return false;
        }
      }
      int valueEprom5 = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupBlockAdr"]).ValueEprom;
      int NumberOfBytes5 = (int) allParameter3.ValueEprom - valueEprom5;
      ushort checksum5 = this.GenerateChecksum(this.MyMeter.Eprom, valueEprom5, NumberOfBytes5, (ushort) 0);
      int valueEprom6 = (int) allParameter4.ValueEprom;
      int NumberOfBytes6 = (int) allParameter5.ValueEprom - valueEprom6;
      ushort checksum6 = this.GenerateChecksum(this.MyMeter.Eprom, valueEprom6, NumberOfBytes6, checksum5);
      if (allParameter2.ValueEprom != (long) checksum6)
        ZR_ClassLibMessages.AddWarning("Backup checksum error");
      return true;
    }

    internal ushort GenerateChecksum(
      byte[] Data,
      int StartOffset,
      int NumberOfBytes,
      ushort ChecksumIn)
    {
      for (int index = 0; index < NumberOfBytes; ++index)
        ChecksumIn ^= (ushort) ((int) Data[index + StartOffset] + ((int) ChecksumIn << 1) + 1);
      return ChecksumIn;
    }

    internal bool UpdateIdentData()
    {
      this.MyMeter.MyIdent.MeterID = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterID"]).ValueEprom;
      this.MyMeter.MyIdent.MeterInfoID = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterTypeID"]).ValueEprom;
      this.MyMeter.MyIdent.MeterInfoBaseID = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterInfoID"]).ValueEprom;
      this.MyMeter.MyIdent.SerialNr = ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_SerialNr"]).ValueEprom.ToString("X8");
      this.MyMeter.MyIdent.MBusSerialNr = ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusSerialNr"]).ValueEprom.ToString("X8");
      return this.MyMeter.MyIdent.MeterInfoID != 0 && this.MyMeter.MyIdent.MeterInfoID != this.MyMeter.MyIdent.MeterInfoBaseID || this.MyMeter.MyHandler.MyDataBaseAccess.GetLastMeterInfoID(this.MyMeter.MyIdent);
    }

    internal bool UpdateMBusHeaderData()
    {
      Parameter allParameter1 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusMeterType"];
      if (allParameter1.ValueEprom < 129L || allParameter1.ValueEprom > 131L)
      {
        ZR_ClassLibMessages.AddWarning("Meter generation not found! Set to 130 !!!");
        allParameter1.ValueEprom = 130L;
      }
      Parameter allParameter2 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusManufacturer"];
      if (allParameter2.ValueEprom == 0L)
      {
        ZR_ClassLibMessages.AddWarning("Manufacturer not found! Set to 'ZRM' !!!");
        allParameter2.ValueEprom = 27213L;
      }
      if (this.MyMeter.WriteEnable)
      {
        int index1 = this.MyMeter.MyFunctionTable.OverridesList.IndexOfKey((object) OverrideID.WarmerPipe);
        int index2 = this.MyMeter.MyFunctionTable.OverridesList.IndexOfKey((object) OverrideID.BaseConfig);
        if (index1 >= 0 && index2 >= 0)
        {
          OverrideParameter byIndex = (OverrideParameter) this.MyMeter.MyFunctionTable.OverridesList.GetByIndex(index1);
          OverrideParameter.BaseConfigStruct baseConfigStruct = OverrideParameter.GetBaseConfigStruct(((ConfigurationParameter) this.MyMeter.MyFunctionTable.OverridesList.GetByIndex(index2)).GetStringValueWin());
          if (baseConfigStruct != null)
          {
            Parameter allParameter3 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusMedium"];
            if (baseConfigStruct.HeatAndCooling)
              allParameter3.ValueEprom = 13L;
            else if (!baseConfigStruct.EnergyOff)
              allParameter3.ValueEprom = !baseConfigStruct.Cooling ? (byIndex.Value != 0UL ? 12L : 4L) : (byIndex.Value != 0UL ? 10L : 11L);
          }
        }
      }
      return true;
    }

    internal void ClearChecksumsAndAddresses()
    {
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RamParamBlockAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupBlockAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_FixedParamAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_WritePermTableAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_DispBlockAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RuntimeVarsAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RuntimeCodeAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_EpromVarsAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_ParamBlockAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_EpromRuntimeAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusBlockAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_FunctionTableAdr"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_StaticChecksum"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_HeaderChecksum"]).ValueEprom = 0L;
      ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupChecksum"]).ValueEprom = 0L;
    }
  }
}


--- EpromParameter.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.EpromParameter
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class EpromParameter : LinkBlock
  {
    internal EpromParameter(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.EpromParameter)
    {
    }
  }
}


--- EpromRuntime.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.EpromRuntime
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class EpromRuntime : LinkBlock
  {
    internal EpromRuntime(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.EpromRuntime)
    {
    }
  }
}


--- EpromVars.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.EpromVars
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class EpromVars : LinkBlock
  {
    internal EpromVars(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.EpromVars)
    {
    }
  }
}


--- ERR8002_Form.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.ERR8002_Form
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class ERR8002_Form : Form
  {
    private Datenliste TheDataList;
    private ZR_HandlerFunctions MyFunctions;
    private string BaseStatusText;
    private bool NichtReparieren;
    private bool NichtSpeichern;
    private DataSetLogData MyLogData;
    private string DataSetFileName;
    private string DataSetBackup1FileName;
    private string DataSetBackup2FileName;
    private string DataSetBackup3FileName;
    private string CSV_FileName;
    private StringBuilder CSV_Line;
    private char Seperator = '\t';
    private ZR_MeterIdent DeviceIdentity;
    private string Ableser;
    private string Liegenschaft;
    private int Nutzernummer;
    private int SerienNummer;
    private DateTime Stichtag;
    private DateTime AbweichenderStichtag;
    private bool ErrorFound;
    private bool ErrorResolved;
    private bool ManuellGespeichert;
    private int EnergieAktuell;
    private int EnergieStichtag;
    private int Energie100701;
    private int Energie100601;
    private int Energie100501;
    private int Energie100401;
    private int Energie100301;
    private int Energie100201;
    private int Energie100101;
    private int Energie091201;
    private int Energie091101;
    private int Energie091001;
    private int Energie090901;
    private int Energie090801;
    private int Energie090701;
    private int Energie090601;
    private int Energie090501;
    private int Energie090401;
    private int Energie090301;
    private int Energie090201;
    private int Energie090101;
    private DateTime Max_QmPerHour1_Month;
    private double Max_QmPerHour1;
    private DateTime Max_QmPerHour2_Month;
    private double Max_QmPerHour2;
    private DateTime Max_kW1_Month;
    private double Max_kW1;
    private DateTime Max_kW2_Month;
    private double Max_kW2;
    private IContainer components = (IContainer) null;
    private Button buttonLesen;
    private TextBox textBoxStatus;
    private TextBox textBoxCommunicationStatus;
    private TextBox textBoxAusleser;
    private Label label1;
    private TextBox textBoxLiegenschaft;
    private Label label2;
    private TextBox textBoxNutzernummer;
    private Label label3;
    private TextBox textBoxDeviceNumber;
    private Label label4;
    private TextBox textBoxEinbauort;
    private Label label5;
    private TextBox textBoxMessbereich;
    private Label label6;
    private TextBox textBoxUnit;
    private Label label7;
    private TextBox textBoxStichtag;
    private Label label8;
    private TextBox textBoxAbweichenderStichtag;
    private Label label9;
    private TextBox textBoxEinbaudatum;
    private Label label10;
    private TextBox textBoxAuftragsnummer;
    private Label label11;
    private TextBox textBoxEnergieAktuell;
    private Label label12;
    private TextBox textBoxEnergieAmStichtag;
    private Label label13;
    private TextBox textBoxKommentar;
    private Label label14;
    private Label label15;
    private Label label16;
    private Button buttonSpeichernOhneLesen;
    private Button buttonAblaufZumKommentar;
    private Button buttonDatenliste;
    private ToolTip toolTip1;
    private Button buttonTestlesen;
    private Button buttonOpenFolder;

    public ERR8002_Form(ZR_HandlerFunctions MyFunctions)
    {
      this.InitializeComponent();
      this.MyFunctions = MyFunctions;
      MyFunctions.SerBus.OnMessage += new EventHandler<GMM_EventArgs>(this.A_SerialBusMessage);
      this.MyLogData = new DataSetLogData();
      this.DataSetFileName = Path.Combine(SystemValues.LoggDataPath, "Serie2LogData.xml");
      this.DataSetBackup1FileName = Path.Combine(SystemValues.LoggDataPath, "Serie2LogDataBackup1.xml");
      this.DataSetBackup2FileName = Path.Combine(SystemValues.LoggDataPath, "Serie2LogDataBackup2.xml");
      this.DataSetBackup3FileName = Path.Combine(SystemValues.LoggDataPath, "Serie2LogDataBackup3.xml");
      if (File.Exists(this.DataSetFileName))
      {
        try
        {
          int num = (int) this.MyLogData.ReadXml(this.DataSetFileName);
        }
        catch (Exception ex)
        {
          int num = (int) GMM_MessageBox.ShowMessage("XLM File", "Fehler beim laden des Datenfiles" + ex.ToString());
        }
      }
      this.CSV_Line = new StringBuilder(5000);
    }

    private void A_SerialBusMessage(object sender, GMM_EventArgs TheMessage)
    {
      switch (TheMessage.TheMessageType)
      {
        case GMM_EventArgs.MessageType.StandardMessage:
          this.textBoxCommunicationStatus.Text = this.BaseStatusText + TheMessage.EventMessage + TheMessage.InfoNumber.ToString();
          break;
        case GMM_EventArgs.MessageType.PrimaryAddressMessage:
          this.textBoxCommunicationStatus.Text = this.BaseStatusText + TheMessage.InfoNumber.ToString();
          break;
        case GMM_EventArgs.MessageType.EndMessage:
          this.textBoxCommunicationStatus.Text = string.Empty;
          break;
      }
      this.Refresh();
    }

    private bool CheckInputData()
    {
      this.textBoxStatus.Clear();
      this.Refresh();
      this.Ableser = this.textBoxAusleser.Text.Trim();
      if (this.Ableser != this.textBoxAusleser.Text)
        this.textBoxAusleser.Text = this.Ableser;
      if (this.Ableser.Length < 2)
      {
        this.ShowErrorMessage("Ableser Name nicht gesetzt!");
        return false;
      }
      this.Liegenschaft = this.textBoxLiegenschaft.Text.Trim().Replace(" ", "_");
      if (!int.TryParse(this.textBoxNutzernummer.Text, out this.Nutzernummer) || this.Nutzernummer < 0 || this.Nutzernummer > 9999)
      {
        this.ShowErrorMessage("Nutzernummer nicht gÃ¼ltig.");
        return false;
      }
      if (this.textBoxAbweichenderStichtag.Text.Trim().Length > 0)
      {
        if (!DateTime.TryParse(this.textBoxAbweichenderStichtag.Text, out this.AbweichenderStichtag))
        {
          this.ShowErrorMessage("Abweichender Stichtag nicht gÃ¼ltig.");
          return false;
        }
      }
      else
        this.AbweichenderStichtag = DateTime.MinValue;
      this.Stichtag = DateTime.MinValue;
      this.EnergieStichtag = -1;
      this.EnergieAktuell = -1;
      this.Energie100701 = -1;
      this.Energie100601 = -1;
      this.Energie100501 = -1;
      this.Energie100401 = -1;
      this.Energie100301 = -1;
      this.Energie100201 = -1;
      this.Energie100101 = -1;
      this.Energie091201 = -1;
      this.Energie091101 = -1;
      this.Energie091001 = -1;
      this.Energie090901 = -1;
      this.Energie090801 = -1;
      this.Energie090701 = -1;
      this.Energie090601 = -1;
      this.Energie090501 = -1;
      this.Energie090401 = -1;
      this.Energie090301 = -1;
      this.Energie090201 = -1;
      this.Energie090101 = -1;
      this.Max_QmPerHour1_Month = DateTime.MinValue;
      this.Max_QmPerHour1 = -1.0;
      this.Max_QmPerHour2_Month = DateTime.MinValue;
      this.Max_QmPerHour2 = -1.0;
      this.Max_kW1_Month = DateTime.MinValue;
      this.Max_kW1 = -1.0;
      this.Max_kW2_Month = DateTime.MinValue;
      this.Max_kW2 = -1.0;
      this.ErrorResolved = false;
      return true;
    }

    private bool LoadDataFromMeter()
    {
      try
      {
        Meter workMeter = this.MyFunctions.MyMeters.WorkMeter;
        this.ShowMessageLine("GerÃ¤tenummer: " + this.DeviceIdentity.SerialNr);
        this.textBoxDeviceNumber.Text = this.DeviceIdentity.SerialNr;
        this.SerienNummer = int.Parse(this.DeviceIdentity.SerialNr);
        string versionString = ParameterService.GetVersionString(this.DeviceIdentity.lFirmwareVersion, 7);
        this.ShowMessageLine("GerÃ¤teversion: " + versionString);
        if (versionString != "1.5.0:C2")
        {
          this.ShowErrorMessage("UngÃ¼ltiges GerÃ¤t fÃ¼r diese FunktionalitÃ¤t.");
          return false;
        }
        Parameter allParameter1 = (Parameter) workMeter.AllParameters[(object) "Sta_Status"];
        if (!workMeter.MyCommunication.ReadParameterValue(allParameter1, MemoryLocation.RAM))
        {
          this.ShowErrorMessage("Fehler beim lesen des GerÃ¤testatus");
          return false;
        }
        this.ErrorFound = allParameter1.ValueCPU >= 32768L;
        Parameter allParameter2 = (Parameter) workMeter.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"];
        if (!workMeter.MyCommunication.ReadParameterValue(allParameter2, MemoryLocation.RAM))
        {
          this.ShowErrorMessage("Fehler beim lesen des Schreibschutz Zustands");
          return false;
        }
        bool flag = true;
        if (allParameter2.ValueCPU == (long) byte.MaxValue)
        {
          flag = false;
          this.ErrorFound = true;
        }
        if (this.ErrorFound)
          this.ShowMessageLine("GerÃ¤t ist im Fehlerzustand");
        else
          this.ShowMessageLine("GerÃ¤t ist nicht im Fehlerzustand");
        Parameter allParameter3 = (Parameter) workMeter.AllParameters[(object) "DefaultFunction.Waerme_EnergSum"];
        if (!workMeter.MyCommunication.ReadParameterValue(allParameter3, MemoryLocation.RAM))
        {
          this.ShowErrorMessage("Fehler beim lesen der aktuellen Energie");
          return false;
        }
        if (!flag)
        {
          allParameter3.ValueEprom = allParameter3.ValueCPU;
          allParameter3.UpdateByteList();
        }
        long valueCpu = allParameter3.ValueCPU;
        Parameter allParameter4 = (Parameter) workMeter.AllParameters[(object) "DefaultFunction.Energ_SumExpo"];
        long num1;
        this.EnergieAktuell = (int) (num1 = valueCpu >> (int) allParameter4.ValueEprom);
        this.textBoxEnergieAktuell.Text = this.EnergieAktuell.ToString();
        this.ShowMessageLine("Energie aktuell: " + this.textBoxEnergieAktuell.Text);
        IntervalAndLogger intervalAndLogger1 = (IntervalAndLogger) null;
        IntervalAndLogger intervalAndLogger2 = (IntervalAndLogger) null;
        IntervalAndLogger intervalAndLogger3 = (IntervalAndLogger) null;
        foreach (CodeBlock linkObj in workMeter.MyRuntimeCode.LinkObjList)
        {
          if (linkObj is IntervalAndLogger)
          {
            IntervalAndLogger intervalAndLogger4 = (IntervalAndLogger) linkObj;
            if (intervalAndLogger4.Type == LoggerTypes.FixedLogger)
            {
              if (intervalAndLogger4.FunctionNumber == 185)
              {
                intervalAndLogger1 = intervalAndLogger4;
                intervalAndLogger1.LetLoggerUnchanged = true;
              }
              else if (intervalAndLogger4.FunctionNumber == 148)
              {
                intervalAndLogger1 = intervalAndLogger4;
                intervalAndLogger1.LetLoggerUnchanged = true;
                if (!this.ErrorFound)
                  this.NichtReparieren = true;
              }
              else if (intervalAndLogger4.FunctionNumber == 254)
                intervalAndLogger2 = intervalAndLogger4;
              else if (intervalAndLogger4.FunctionNumber == 238)
              {
                intervalAndLogger3 = intervalAndLogger4;
                intervalAndLogger3.Type = LoggerTypes.FixedLoggerFuture;
              }
              else if (intervalAndLogger4.FunctionNumber == 180)
              {
                intervalAndLogger3 = intervalAndLogger4;
                intervalAndLogger3.Type = LoggerTypes.FixedLoggerFuture;
                if (!this.ErrorFound)
                  this.NichtReparieren = true;
              }
            }
          }
        }
        this.Stichtag = DateTime.MinValue;
        this.EnergieStichtag = -1;
        this.textBoxStichtag.Text = "";
        DateTime dateTime;
        if (intervalAndLogger3 != null)
        {
          int index1 = workMeter.AllParameters.IndexOfKey((object) "StichtagKomplettMitVorjahr.Stichtag_0T");
          if (index1 >= 0)
          {
            dateTime = ZR_Calendar.Cal_GetDateTime((uint) ((Parameter) workMeter.AllParameters.GetByIndex(index1)).ValueEprom);
            dateTime = dateTime.AddYears(-1);
            this.Stichtag = dateTime.Date;
            this.textBoxStichtag.Text = this.Stichtag.ToShortDateString();
            this.ShowMessageLine("Stichtag: " + this.textBoxStichtag.Text);
            int index2 = workMeter.AllParameters.IndexOfKey((object) "StichtagKomplettMitVorjahr.WaermeEnergieAmStichtag");
            if (index2 >= 0)
            {
              this.EnergieStichtag = (int) ((Parameter) workMeter.AllParameters.GetByIndex(index2)).ValueEprom;
              this.ShowMessageLine("Energie am Stichtag: " + this.EnergieStichtag.ToString());
              this.textBoxEnergieAmStichtag.Text = this.EnergieStichtag.ToString();
            }
            int index3 = workMeter.AllParameters.IndexOfKey((object) "StichtagKomplettMitVorjahr.DueDateStorageTime");
            if (index3 >= 0)
            {
              dateTime = ZR_Calendar.Cal_GetDateTime((uint) ((Parameter) workMeter.AllParameters.GetByIndex(index3)).ValueEprom);
              if (this.Stichtag != dateTime.Date)
              {
                this.ShowMessageLine("Stichtag wurde noch nicht gespeichert");
                this.EnergieStichtag = -1;
              }
            }
          }
        }
        else
        {
          this.NichtReparieren = true;
          this.ShowMessageLine("Stichtagsfunktion nicht gefunden");
        }
        if (intervalAndLogger1 == null)
        {
          this.ShowMessageLine("Monatswerte nicht vorhanden oder nicht unterstÃ¼tzt.");
          this.NichtReparieren = true;
          this.ShowMessageLine("Das GerÃ¤t ist nicht kritisch und wird nicht programmiert.");
        }
        else
        {
          int num2 = (int) (intervalAndLogger1.P_EndAddress.ValueEprom - intervalAndLogger1.P_StartAddress.ValueEprom);
          if (num2 > 500 || num2 < 0 || intervalAndLogger1.P_WriteAddress.ValueEprom > intervalAndLogger1.P_EndAddress.ValueEprom || intervalAndLogger1.P_WriteAddress.ValueEprom < intervalAndLogger1.P_StartAddress.ValueEprom)
          {
            this.NichtReparieren = true;
            this.ShowErrorMessage("Monatslogger beschÃ¤digt. Das GerÃ¤t kann nicht rapariert werden!");
            this.ShowMessageLine("Bitte die gespeicherten Daten auf PlausibilitÃ¤t prÃ¼fen!");
            this.textBoxKommentar.AppendText(Environment.NewLine);
            this.textBoxKommentar.AppendText("Monatslogger beschÃ¤digt! Das GerÃ¤t kann nicht rapariert werden!");
            this.textBoxKommentar.AppendText(Environment.NewLine);
            this.textBoxKommentar.AppendText("Bitte die gespeicherten Daten auf PlausibilitÃ¤t prÃ¼fen!");
            return true;
          }
          LoggerInfo loggerInfo = intervalAndLogger1.GetLoggerInfo(out int _);
          loggerInfo.ReadLogger(new DateTime(2008, 1, 1), new DateTime(2011, 1, 1));
          for (int index = 0; index < loggerInfo.LoggerData.Count; ++index)
          {
            dateTime = loggerInfo.LoggerData.Keys[index];
            DateTime date = dateTime.Date;
            double result;
            if (double.TryParse(loggerInfo.LoggerData.Values[index][0], NumberStyles.Any, (IFormatProvider) FixedFormates.TheFormates.NumberFormat, out result))
            {
              int num3 = (int) (result * 1000.0);
              if (date.Year == 2009 && date.Day == 1)
              {
                switch (date.Month)
                {
                  case 1:
                    this.Energie090101 = num3;
                    this.ShowMessageLine("Energie am 1.1.2009: " + num3.ToString());
                    break;
                  case 2:
                    this.Energie090201 = num3;
                    this.ShowMessageLine("Energie am 1.2.2009: " + num3.ToString());
                    break;
                  case 3:
                    this.Energie090301 = num3;
                    this.ShowMessageLine("Energie am 1.3.2009: " + num3.ToString());
                    break;
                  case 4:
                    this.Energie090401 = num3;
                    this.ShowMessageLine("Energie am 1.4.2009: " + num3.ToString());
                    break;
                  case 5:
                    this.Energie090501 = num3;
                    this.ShowMessageLine("Energie am 1.5.2009: " + num3.ToString());
                    break;
                  case 6:
                    this.Energie090601 = num3;
                    this.ShowMessageLine("Energie am 1.6.2009: " + num3.ToString());
                    break;
                  case 7:
                    this.Energie090701 = num3;
                    this.ShowMessageLine("Energie am 1.7.2009: " + num3.ToString());
                    break;
                  case 8:
                    this.Energie090801 = num3;
                    this.ShowMessageLine("Energie am 1.8.2009: " + num3.ToString());
                    break;
                  case 9:
                    this.Energie090901 = num3;
                    this.ShowMessageLine("Energie am 1.9.2009: " + num3.ToString());
                    break;
                  case 10:
                    this.Energie091001 = num3;
                    this.ShowMessageLine("Energie am 1.10.2009: " + num3.ToString());
                    break;
                  case 11:
                    this.Energie091101 = num3;
                    this.ShowMessageLine("Energie am 1.11.2009: " + num3.ToString());
                    break;
                  case 12:
                    this.Energie091201 = num3;
                    this.ShowMessageLine("Energie am 1.12.2009: " + num3.ToString());
                    break;
                }
              }
              else if (date.Year == 2010 && date.Day == 1)
              {
                switch (date.Month)
                {
                  case 1:
                    this.Energie100101 = num3;
                    this.ShowMessageLine("Energie am 1.1.2010: " + num3.ToString());
                    break;
                  case 2:
                    this.Energie100201 = num3;
                    this.ShowMessageLine("Energie am 1.2.2010: " + num3.ToString());
                    break;
                  case 3:
                    this.Energie100301 = num3;
                    this.ShowMessageLine("Energie am 1.3.2010: " + num3.ToString());
                    break;
                  case 4:
                    this.Energie100401 = num3;
                    this.ShowMessageLine("Energie am 1.4.2010: " + num3.ToString());
                    break;
                  case 5:
                    this.Energie100501 = num3;
                    this.ShowMessageLine("Energie am 1.5.2010: " + num3.ToString());
                    break;
                  case 6:
                    this.Energie100601 = num3;
                    this.ShowMessageLine("Energie am 1.6.2010: " + num3.ToString());
                    break;
                  case 7:
                    this.Energie100701 = num3;
                    this.ShowMessageLine("Energie am 1.7.2010: " + num3.ToString());
                    break;
                }
              }
            }
          }
        }
        if (intervalAndLogger2 == null)
        {
          this.ShowMessageLine("Spitzenwerte nicht vorhanden oder nicht unterstÃ¼tzt.");
        }
        else
        {
          int num4 = (int) (intervalAndLogger2.P_EndAddress.ValueEprom - intervalAndLogger2.P_StartAddress.ValueEprom);
          if (num4 > 500 || num4 < 0 || intervalAndLogger2.P_WriteAddress.ValueEprom > intervalAndLogger2.P_EndAddress.ValueEprom || intervalAndLogger2.P_WriteAddress.ValueEprom < intervalAndLogger2.P_StartAddress.ValueEprom)
          {
            this.NichtReparieren = true;
            this.ShowErrorMessage("Spitzenwerte beschÃ¤digt. Das GerÃ¤t kann nicht rapariert werden!");
            this.ShowMessageLine("Bitte die gespeicherten Daten auf PlausibilitÃ¤t prÃ¼fen!");
            this.textBoxKommentar.AppendText(Environment.NewLine);
            this.textBoxKommentar.AppendText("Spitzenwerte beschÃ¤digt! Das GerÃ¤t kann nicht rapariert werden!");
            this.textBoxKommentar.AppendText(Environment.NewLine);
            this.textBoxKommentar.AppendText("Bitte die gespeicherten Daten auf PlausibilitÃ¤t prÃ¼fen!");
            return true;
          }
          LoggerInfo loggerInfo = intervalAndLogger2.GetLoggerInfo(out int _);
          loggerInfo.ReadLogger(new DateTime(2008, 1, 1), new DateTime(2011, 1, 1));
          for (int index = 0; index < loggerInfo.LoggerData.Count; ++index)
          {
            dateTime = loggerInfo.LoggerData.Keys[index];
            DateTime date = dateTime.Date;
            string[] strArray = loggerInfo.LoggerData.Values[index];
            double result1;
            double result2;
            if (double.TryParse(strArray[1], NumberStyles.Any, (IFormatProvider) FixedFormates.TheFormates.NumberFormat, out result1) && double.TryParse(strArray[0], NumberStyles.Any, (IFormatProvider) FixedFormates.TheFormates.NumberFormat, out result2))
            {
              if (result2 > this.Max_kW1)
              {
                this.Max_kW2 = this.Max_kW1;
                this.Max_kW2_Month = this.Max_kW1_Month;
                this.Max_kW1 = result2;
                this.Max_kW1_Month = date;
              }
              else if (result2 > this.Max_kW2)
              {
                this.Max_kW2 = result2;
                this.Max_kW2_Month = date;
              }
              if (result1 > this.Max_QmPerHour1)
              {
                this.Max_QmPerHour2 = this.Max_QmPerHour1;
                this.Max_QmPerHour2_Month = this.Max_QmPerHour1_Month;
                this.Max_QmPerHour1 = result1;
                this.Max_QmPerHour1_Month = date;
              }
              else if (result1 > this.Max_QmPerHour2)
              {
                this.Max_QmPerHour2 = result1;
                this.Max_QmPerHour2_Month = date;
              }
            }
          }
          if (this.Max_QmPerHour1 >= 0.0)
            this.ShowMessageLine("Max_1 m\u00B3/h[" + this.Max_QmPerHour1_Month.ToShortDateString() + "]=" + this.Max_QmPerHour1.ToString());
          if (this.Max_kW1 >= 0.0)
            this.ShowMessageLine("Max_1 kW[" + this.Max_kW1_Month.ToShortDateString() + "]=" + this.Max_kW1.ToString());
          if (this.Max_QmPerHour2 >= 0.0)
            this.ShowMessageLine("Max_2 m\u00B3/h[" + this.Max_QmPerHour2_Month.ToShortDateString() + "]=" + this.Max_QmPerHour2.ToString());
          if (this.Max_kW2 >= 0.0)
            this.ShowMessageLine("Max_2 kW[" + this.Max_kW2_Month.ToShortDateString() + "]=" + this.Max_kW2.ToString());
        }
      }
      catch (Exception ex)
      {
        this.ShowErrorMessage("Fehler beim Auslesen der Daten aus dem GerÃ¤t");
        this.ShowMessageLine(ex.ToString());
        return false;
      }
      return true;
    }

    private void WriteData()
    {
      try
      {
        DataSetLogData.GMM_Serie2DeviceLogDataRow row = this.MyLogData.GMM_Serie2DeviceLogData.NewGMM_Serie2DeviceLogDataRow();
        row.ChangeDateTime = DateTime.Now;
        row.Ausleser = this.Ableser;
        row.Liegenschaft = this.Liegenschaft;
        row.Nutzer = this.Nutzernummer;
        row.DeviceNumber = this.SerienNummer;
        row.FehlerGefunden = this.ErrorFound;
        row.FehlerBeseitigt = this.ErrorResolved;
        row.Einbauort = this.textBoxEinbauort.Text.Trim();
        row.Einbaudatum = this.textBoxEinbaudatum.Text.Trim();
        row.Masseinheit = this.textBoxUnit.Text.Trim();
        row.Messbereich = this.textBoxMessbereich.Text.Trim();
        row.Stichtag = this.Stichtag;
        row.AbweichenderStichtag = this.AbweichenderStichtag;
        row.Kommentar = this.textBoxKommentar.Text.Trim();
        row.Montageauftrag = this.textBoxAuftragsnummer.Text.Trim();
        row.ManuellGespeichert = this.ManuellGespeichert;
        row.kWh_Aktuell = this.EnergieAktuell;
        row.kWh_Stichtag = this.EnergieStichtag;
        row.kWh_010109 = this.Energie090101;
        row.kWh_010209 = this.Energie090201;
        row.kWh_010309 = this.Energie090301;
        row.kWh_010409 = this.Energie090401;
        row.kWh_010509 = this.Energie090501;
        row.kWh_010609 = this.Energie090601;
        row.kWh_010709 = this.Energie090701;
        row.kWh_010809 = this.Energie090801;
        row.kWh_010909 = this.Energie090901;
        row.kWh_011009 = this.Energie091001;
        row.kWh_011109 = this.Energie091101;
        row.kWh_011209 = this.Energie091201;
        row.kWh_010110 = this.Energie100101;
        row.kWh_010210 = this.Energie100201;
        row.kWh_010310 = this.Energie100301;
        row.kWh_010410 = this.Energie100401;
        row.kWh_010510 = this.Energie100501;
        row.kWh_010610 = this.Energie100601;
        row.kWh_010710 = this.Energie100701;
        row.Max_kW1 = this.Max_kW1;
        row.Max_kW1_Month = this.Max_kW1_Month;
        row.Max_kW2 = this.Max_kW2;
        row.Max_kW2_Month = this.Max_kW2_Month;
        row.Max_QmPerHour1 = this.Max_QmPerHour1;
        row.Max_QmPerHour1_Month = this.Max_QmPerHour1_Month;
        row.Max_QmPerHour2 = this.Max_QmPerHour2;
        row.Max_QmPerHour2_Month = this.Max_QmPerHour2_Month;
        this.MyLogData.GMM_Serie2DeviceLogData.AddGMM_Serie2DeviceLogDataRow(row);
        this.ShowMessageLine("Schreibe Datei ...");
        this.Refresh();
        if (File.Exists(this.DataSetBackup3FileName))
          File.Delete(this.DataSetBackup3FileName);
        if (File.Exists(this.DataSetBackup2FileName))
          File.Move(this.DataSetBackup2FileName, this.DataSetBackup3FileName);
        if (File.Exists(this.DataSetBackup1FileName))
          File.Move(this.DataSetBackup1FileName, this.DataSetBackup2FileName);
        if (File.Exists(this.DataSetFileName))
          File.Move(this.DataSetFileName, this.DataSetBackup1FileName);
        this.MyLogData.WriteXml(this.DataSetFileName, XmlWriteMode.WriteSchema);
        try
        {
          string str1 = "WMZ_Ablesung_LG_" + this.Liegenschaft;
          if (this.Stichtag != DateTime.MinValue)
            str1 = str1 + "_Stichtag_" + this.Stichtag.ToShortDateString();
          this.CSV_FileName = Path.Combine(SystemValues.LoggDataPath, str1 + ".CSV");
          if (!File.Exists(this.CSV_FileName))
          {
            using (StreamWriter streamWriter = new StreamWriter(this.CSV_FileName, false, Encoding.Unicode))
            {
              this.CSV_Line.Length = 0;
              for (int index = 0; index < this.MyLogData.GMM_Serie2DeviceLogData.Columns.Count; ++index)
              {
                if (index > 0)
                  this.CSV_Line.Append(this.Seperator);
                this.CSV_Line.Append(this.MyLogData.GMM_Serie2DeviceLogData.Columns[index].ColumnName);
              }
              streamWriter.WriteLine(this.CSV_Line.ToString());
            }
          }
          using (StreamWriter streamWriter = new StreamWriter(this.CSV_FileName, true, Encoding.Unicode))
          {
            this.CSV_Line.Length = 0;
            for (int index = 0; index < this.MyLogData.GMM_Serie2DeviceLogData.Columns.Count; ++index)
            {
              if (index > 0)
                this.CSV_Line.Append(this.Seperator);
              object obj = row[index];
              string str2;
              if (obj.GetType() == typeof (string))
                str2 = obj.ToString().Replace("\t", "_").ToString().Replace(Environment.NewLine, "|");
              else if (obj.GetType() == typeof (DateTime))
              {
                string columnName = this.MyLogData.GMM_Serie2DeviceLogData.Columns[index].ColumnName;
                DateTime dateTime = (DateTime) obj;
                str2 = !(dateTime == DateTime.MinValue) ? (!(columnName == "ChangeDateTime") ? dateTime.ToShortDateString() : dateTime.ToString("dd.MM.yyyy HH:mm:ss")) : string.Empty;
              }
              else
                str2 = obj.ToString();
              this.CSV_Line.Append(str2);
            }
            streamWriter.WriteLine(this.CSV_Line.ToString());
          }
        }
        catch (Exception ex)
        {
          int num = (int) GMM_MessageBox.ShowMessage(this.CSV_FileName, "File error" + Environment.NewLine + ex.Message);
        }
        this.ShowMessageLine("Schreiben erfolgreich abgeschlossen.");
        this.ShowMessageLine("Vorhandene DatensÃ¤tze: " + this.MyLogData.GMM_Serie2DeviceLogData.Rows.Count.ToString());
      }
      catch (Exception ex)
      {
        this.ShowErrorMessage("Die Daten konnten nicht in die Datei geschrieben werden");
        this.ShowMessageLine(ex.ToString());
      }
    }

    private void LesenRaparierenUndSchreiben()
    {
      this.Cursor = Cursors.WaitCursor;
      this.Enabled = false;
      this.Refresh();
      if (this.CheckInputData())
      {
        string AdditionalError = string.Empty;
        bool flag1 = false;
        this.MyFunctions.checksumErrorsAsWarning = true;
        string theFirmwareVersion;
        try
        {
          flag1 = this.MyFunctions.checkConnection(out theFirmwareVersion) == 0;
          if (flag1)
          {
            this.ShowMessageLine("Verbindung ok");
            this.ShowMessageLine("Starte auslesen ...");
            this.BaseStatusText = "Lese Addresse: ";
            flag1 = this.MyFunctions.ReadConnectedDevice(out this.DeviceIdentity);
            if (flag1)
              this.ShowMessageLine("Auslesen erfolgreich beendet");
            else
              this.ShowMessageLine("Lesefehler");
          }
          else
          {
            AdditionalError = ZR_ClassLibMessages.GetLastError() != ZR_ClassLibMessages.LastErrors.CommunicationError ? ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription : " ";
            this.MyFunctions.ClearConnectedReadAndWorkMeter();
          }
        }
        catch (Exception ex)
        {
          AdditionalError = ex.Message;
        }
        this.MyFunctions.checksumErrorsAsWarning = true;
        if (AdditionalError.Length > 0)
        {
          this.ShowHandlerMessage("Lesefehler", AdditionalError);
          this.ShowMessageLine("Wurde die Taste am GerÃ¤t kurz vor dem lesen gedrÃ¼ckt?");
          this.ShowMessageLine("War der Optokopf mit dem Kabel zur LCD aufgesetzt?");
        }
        else
          this.ShowHandlerMessage();
        if (flag1 && this.LoadDataFromMeter())
        {
          if (!this.NichtReparieren)
          {
            try
            {
              this.BaseStatusText = "Programmiere Addresse: ";
              this.ShowMessageLine("Starte programmieren ...");
              if (this.MyFunctions.progDevice(DateTime.Now))
              {
                this.ShowHandlerMessage("Programmierfehler");
                this.ShowMessageLine("Programmieren erfolgreich abgeschlossen");
                this.ErrorResolved = this.ErrorFound;
                this.BaseStatusText = "Testlesen: ";
                this.ShowMessageLine("");
                this.ShowMessageLine("Testlesen ob alles in Ordnung ist.");
                Thread.Sleep(1000);
                ZR_ClassLibMessages.ClearErrors();
                bool flag2 = this.MyFunctions.checkConnection(out theFirmwareVersion) == 0;
                if (flag2)
                  flag2 = this.MyFunctions.ReadConnectedDevice(out this.DeviceIdentity);
                ZR_ClassLibMessages.LastErrorInfo lastErrorInfo = ZR_ClassLibMessages.GetLastErrorInfo();
                if (flag2 && lastErrorInfo.LastWarnings.Length == 0)
                {
                  this.ShowMessageLine("Alles ok.");
                  this.ShowMessageLine("");
                  goto label_21;
                }
                else
                {
                  this.ShowErrorMessage("Das GerÃ¤t ist nicht vollstÃ¤ndig in Ordnung!! Es muss ausgetauscht werden.");
                  goto label_21;
                }
              }
            }
            catch
            {
            }
            this.ShowErrorMessage("Schreibfehler");
            goto label_25;
          }
          else
            this.ShowMessageLine("!!! Das GerÃ¤t wird nicht programmiert !!!");
label_21:
          if (!this.NichtSpeichern)
            this.WriteData();
          this.MyFunctions.ClearConnectedReadAndWorkMeter();
        }
      }
label_25:
      this.textBoxCommunicationStatus.Clear();
      this.Cursor = Cursors.Default;
      this.Enabled = true;
      this.Refresh();
    }

    private void ShowHandlerMessage() => this.ShowHandlerMessage(string.Empty, string.Empty);

    private void ShowHandlerMessage(string StartMessage)
    {
      this.ShowHandlerMessage(StartMessage, string.Empty);
    }

    internal void ShowHandlerMessage(string StartMessage, string AdditionalError)
    {
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      ZR_ClassLibMessages.LastErrorInfo errorAndClearError = ZR_ClassLibMessages.GetLastErrorAndClearError();
      string lastWarnings = errorAndClearError.LastWarnings;
      string TheMessage = errorAndClearError.LastErrorDescription;
      if (TheMessage.Length > 0 || AdditionalError.Length > 0)
      {
        if (StartMessage.Trim().Length > 0)
          TheMessage = StartMessage + Environment.NewLine + Environment.NewLine + TheMessage;
        if (AdditionalError.Length > 0)
          TheMessage = TheMessage + Environment.NewLine + AdditionalError;
        this.ShowErrorMessage(TheMessage);
      }
      else if (lastWarnings.Length > 0)
        this.ShowDesignerMessages(lastWarnings);
    }

    internal void ShowErrorMessage(string TheMessage)
    {
      this.textBoxStatus.AppendText("Fehler:");
      this.textBoxStatus.AppendText(Environment.NewLine);
      this.textBoxStatus.AppendText(TheMessage);
      this.textBoxStatus.AppendText(Environment.NewLine);
      this.textBoxStatus.AppendText(Environment.NewLine);
    }

    internal void ShowDesignerMessages(string Warning)
    {
      this.textBoxStatus.AppendText("Warnungen und Informationen:");
      this.textBoxStatus.AppendText(Environment.NewLine);
      this.textBoxStatus.AppendText(Warning);
      this.textBoxStatus.AppendText(Environment.NewLine);
      this.textBoxStatus.AppendText(Environment.NewLine);
    }

    internal void ShowMessageLine(string TheMessage)
    {
      this.textBoxStatus.AppendText(TheMessage);
      this.textBoxStatus.AppendText(Environment.NewLine);
    }

    private void buttonLesen_Click(object sender, EventArgs e)
    {
      this.ManuellGespeichert = false;
      this.NichtReparieren = false;
      this.NichtSpeichern = false;
      this.LesenRaparierenUndSchreiben();
    }

    private void buttonTestlesen_Click(object sender, EventArgs e)
    {
      this.NichtReparieren = true;
      this.NichtSpeichern = true;
      this.LesenRaparierenUndSchreiben();
    }

    private void buttonSpeichernOhneLesen_Click(object sender, EventArgs e)
    {
      this.ManuellGespeichert = true;
      if (!this.CheckInputData())
        return;
      if (!int.TryParse(this.textBoxDeviceNumber.Text, out this.SerienNummer))
        this.ShowErrorMessage("Seriennummer nicht gÃ¼ltig.");
      else if (this.textBoxStichtag.Text.Trim().Length > 0 && !DateTime.TryParse(this.textBoxStichtag.Text, out this.Stichtag))
        this.ShowErrorMessage("Stichtag nicht gÃ¼ltig.");
      else if (this.textBoxEnergieAktuell.Text.Trim().Length > 0 && !int.TryParse(this.textBoxEnergieAktuell.Text, out this.EnergieAktuell))
        this.ShowErrorMessage("Aktuelle Energie nicht gÃ¼ltig.");
      else if (this.textBoxEnergieAmStichtag.Text.Trim().Length > 0 && !int.TryParse(this.textBoxEnergieAmStichtag.Text, out this.EnergieStichtag))
      {
        this.ShowErrorMessage("Aktuelle Energie nicht gÃ¼ltig.");
      }
      else
      {
        this.ErrorFound = true;
        this.ErrorResolved = false;
        this.WriteData();
      }
    }

    private void buttonAblaufZumKommentar_Click(object sender, EventArgs e)
    {
      this.textBoxKommentar.AppendText(Environment.NewLine);
      this.textBoxKommentar.AppendText("--- Ablauf ---");
      this.textBoxKommentar.AppendText(Environment.NewLine);
      this.textBoxKommentar.AppendText(this.textBoxStatus.Text);
    }

    private void buttonDatenliste_Click(object sender, EventArgs e)
    {
      if (this.TheDataList == null)
        this.TheDataList = new Datenliste((DataTable) this.MyLogData.GMM_Serie2DeviceLogData);
      int num = (int) this.TheDataList.ShowDialog();
    }

    private void buttonOpenFolder_Click(object sender, EventArgs e)
    {
      string directoryName = Path.GetDirectoryName(this.DataSetFileName);
      try
      {
        new Process()
        {
          StartInfo = new ProcessStartInfo("explorer.exe", directoryName)
        }.Start();
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("Global Meter Manager", "Explorer start error", true);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.buttonLesen = new Button();
      this.textBoxStatus = new TextBox();
      this.textBoxCommunicationStatus = new TextBox();
      this.textBoxAusleser = new TextBox();
      this.label1 = new Label();
      this.textBoxLiegenschaft = new TextBox();
      this.label2 = new Label();
      this.textBoxNutzernummer = new TextBox();
      this.label3 = new Label();
      this.textBoxDeviceNumber = new TextBox();
      this.label4 = new Label();
      this.textBoxEinbauort = new TextBox();
      this.label5 = new Label();
      this.textBoxMessbereich = new TextBox();
      this.label6 = new Label();
      this.textBoxUnit = new TextBox();
      this.label7 = new Label();
      this.textBoxStichtag = new TextBox();
      this.label8 = new Label();
      this.textBoxAbweichenderStichtag = new TextBox();
      this.label9 = new Label();
      this.textBoxEinbaudatum = new TextBox();
      this.label10 = new Label();
      this.textBoxAuftragsnummer = new TextBox();
      this.label11 = new Label();
      this.textBoxEnergieAktuell = new TextBox();
      this.label12 = new Label();
      this.textBoxEnergieAmStichtag = new TextBox();
      this.label13 = new Label();
      this.textBoxKommentar = new TextBox();
      this.label14 = new Label();
      this.label15 = new Label();
      this.label16 = new Label();
      this.buttonSpeichernOhneLesen = new Button();
      this.buttonAblaufZumKommentar = new Button();
      this.buttonDatenliste = new Button();
      this.toolTip1 = new ToolTip(this.components);
      this.buttonTestlesen = new Button();
      this.buttonOpenFolder = new Button();
      this.SuspendLayout();
      this.buttonLesen.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonLesen.Location = new Point(544, 528);
      this.buttonLesen.Name = "buttonLesen";
      this.buttonLesen.Size = new Size(198, 23);
      this.buttonLesen.TabIndex = 0;
      this.buttonLesen.Text = "Lesen, korrigieren und speichern";
      this.toolTip1.SetToolTip((Control) this.buttonLesen, "Vollautomatischer Ablauf. Vor dem Start alle Felder ausfÃ¼llen!!");
      this.buttonLesen.UseVisualStyleBackColor = true;
      this.buttonLesen.Click += new System.EventHandler(this.buttonLesen_Click);
      this.textBoxStatus.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.textBoxStatus.Location = new Point(14, 38);
      this.textBoxStatus.Multiline = true;
      this.textBoxStatus.Name = "textBoxStatus";
      this.textBoxStatus.Size = new Size(323, 449);
      this.textBoxStatus.TabIndex = 1;
      this.textBoxCommunicationStatus.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.textBoxCommunicationStatus.Location = new Point(14, 531);
      this.textBoxCommunicationStatus.Name = "textBoxCommunicationStatus";
      this.textBoxCommunicationStatus.Size = new Size(322, 20);
      this.textBoxCommunicationStatus.TabIndex = 2;
      this.textBoxAusleser.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxAusleser.Location = new Point(513, 12);
      this.textBoxAusleser.Name = "textBoxAusleser";
      this.textBoxAusleser.Size = new Size(229, 20);
      this.textBoxAusleser.TabIndex = 3;
      this.textBoxAusleser.Text = "?";
      this.label1.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label1.AutoSize = true;
      this.label1.Location = new Point(431, 15);
      this.label1.Name = "label1";
      this.label1.Size = new Size(73, 13);
      this.label1.TabIndex = 4;
      this.label1.Text = "Ableser Name";
      this.textBoxLiegenschaft.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxLiegenschaft.Location = new Point(513, 38);
      this.textBoxLiegenschaft.Name = "textBoxLiegenschaft";
      this.textBoxLiegenschaft.Size = new Size(229, 20);
      this.textBoxLiegenschaft.TabIndex = 3;
      this.textBoxLiegenschaft.Text = "PLZ_Musterstadt_Musterstr_HNR";
      this.label2.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label2.AutoSize = true;
      this.label2.Location = new Point(436, 41);
      this.label2.Name = "label2";
      this.label2.Size = new Size(68, 13);
      this.label2.TabIndex = 4;
      this.label2.Text = "Liegenschaft";
      this.textBoxNutzernummer.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxNutzernummer.Location = new Point(513, 64);
      this.textBoxNutzernummer.Name = "textBoxNutzernummer";
      this.textBoxNutzernummer.Size = new Size(229, 20);
      this.textBoxNutzernummer.TabIndex = 3;
      this.textBoxNutzernummer.Text = "-1";
      this.toolTip1.SetToolTip((Control) this.textBoxNutzernummer, "Eine Zahl zwischen 0 und 9999");
      this.label3.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label3.AutoSize = true;
      this.label3.Location = new Point(432, 67);
      this.label3.Name = "label3";
      this.label3.Size = new Size(75, 13);
      this.label3.TabIndex = 4;
      this.label3.Text = "Nutzernummer";
      this.textBoxDeviceNumber.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxDeviceNumber.Location = new Point(513, 90);
      this.textBoxDeviceNumber.Name = "textBoxDeviceNumber";
      this.textBoxDeviceNumber.Size = new Size(229, 20);
      this.textBoxDeviceNumber.TabIndex = 3;
      this.textBoxDeviceNumber.Text = "0";
      this.toolTip1.SetToolTip((Control) this.textBoxDeviceNumber, "Wird beim lesen automatisch  eingetragen.");
      this.label4.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label4.AutoSize = true;
      this.label4.Location = new Point(431, 93);
      this.label4.Name = "label4";
      this.label4.Size = new Size(76, 13);
      this.label4.TabIndex = 4;
      this.label4.Text = "GerÃ¤tenummer";
      this.textBoxEinbauort.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxEinbauort.Location = new Point(513, 116);
      this.textBoxEinbauort.Name = "textBoxEinbauort";
      this.textBoxEinbauort.Size = new Size(229, 20);
      this.textBoxEinbauort.TabIndex = 3;
      this.label5.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label5.AutoSize = true;
      this.label5.Location = new Point(455, 119);
      this.label5.Name = "label5";
      this.label5.Size = new Size(52, 13);
      this.label5.TabIndex = 4;
      this.label5.Text = "Einbauort";
      this.textBoxMessbereich.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxMessbereich.Location = new Point(513, 142);
      this.textBoxMessbereich.Name = "textBoxMessbereich";
      this.textBoxMessbereich.Size = new Size(229, 20);
      this.textBoxMessbereich.TabIndex = 3;
      this.textBoxMessbereich.Text = "Heizung";
      this.label6.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label6.AutoSize = true;
      this.label6.Location = new Point(440, 145);
      this.label6.Name = "label6";
      this.label6.Size = new Size(67, 13);
      this.label6.TabIndex = 4;
      this.label6.Text = "Messbereich";
      this.textBoxUnit.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxUnit.Location = new Point(513, 168);
      this.textBoxUnit.Name = "textBoxUnit";
      this.textBoxUnit.Size = new Size(229, 20);
      this.textBoxUnit.TabIndex = 3;
      this.textBoxUnit.Text = "kWh";
      this.label7.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label7.AutoSize = true;
      this.label7.Location = new Point(448, 171);
      this.label7.Name = "label7";
      this.label7.Size = new Size(59, 13);
      this.label7.TabIndex = 4;
      this.label7.Text = "MaÃeinheit";
      this.textBoxStichtag.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxStichtag.Location = new Point(513, 194);
      this.textBoxStichtag.Name = "textBoxStichtag";
      this.textBoxStichtag.Size = new Size(229, 20);
      this.textBoxStichtag.TabIndex = 3;
      this.toolTip1.SetToolTip((Control) this.textBoxStichtag, "Wird beim lesen automatisch  eingetragen. Immer mit Jahr eintragen.");
      this.label8.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label8.AutoSize = true;
      this.label8.Location = new Point(461, 197);
      this.label8.Name = "label8";
      this.label8.Size = new Size(46, 13);
      this.label8.TabIndex = 4;
      this.label8.Text = "Stichtag";
      this.textBoxAbweichenderStichtag.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxAbweichenderStichtag.Location = new Point(513, 220);
      this.textBoxAbweichenderStichtag.Name = "textBoxAbweichenderStichtag";
      this.textBoxAbweichenderStichtag.Size = new Size(229, 20);
      this.textBoxAbweichenderStichtag.TabIndex = 3;
      this.toolTip1.SetToolTip((Control) this.textBoxAbweichenderStichtag, "Nur bei bekannten Abweichungen angeben. Immer mit Jahr z.B. 1.1.10");
      this.label9.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label9.AutoSize = true;
      this.label9.Location = new Point(390, 223);
      this.label9.Name = "label9";
      this.label9.Size = new Size(117, 13);
      this.label9.TabIndex = 4;
      this.label9.Text = "Abweichender Stichtag";
      this.textBoxEinbaudatum.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxEinbaudatum.Location = new Point(513, 246);
      this.textBoxEinbaudatum.Name = "textBoxEinbaudatum";
      this.textBoxEinbaudatum.Size = new Size(229, 20);
      this.textBoxEinbaudatum.TabIndex = 3;
      this.toolTip1.SetToolTip((Control) this.textBoxEinbaudatum, "Immer mit Jahr angeben z.B. 25.7.9");
      this.label10.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label10.AutoSize = true;
      this.label10.Location = new Point(438, 249);
      this.label10.Name = "label10";
      this.label10.Size = new Size(69, 13);
      this.label10.TabIndex = 4;
      this.label10.Text = "Einbaudatum";
      this.textBoxAuftragsnummer.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxAuftragsnummer.Location = new Point(513, 272);
      this.textBoxAuftragsnummer.Name = "textBoxAuftragsnummer";
      this.textBoxAuftragsnummer.Size = new Size(229, 20);
      this.textBoxAuftragsnummer.TabIndex = 3;
      this.textBoxAuftragsnummer.Text = "0";
      this.label11.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label11.AutoSize = true;
      this.label11.Location = new Point(359, 275);
      this.label11.Name = "label11";
      this.label11.Size = new Size(148, 13);
      this.label11.TabIndex = 4;
      this.label11.Text = "Montageauftragsnummer SAP";
      this.textBoxEnergieAktuell.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxEnergieAktuell.Location = new Point(513, 298);
      this.textBoxEnergieAktuell.Name = "textBoxEnergieAktuell";
      this.textBoxEnergieAktuell.Size = new Size(229, 20);
      this.textBoxEnergieAktuell.TabIndex = 3;
      this.textBoxEnergieAktuell.Text = "0";
      this.toolTip1.SetToolTip((Control) this.textBoxEnergieAktuell, "Wird beim lesen automatisch  eingetragen. -1 fÃ¼r Wert nicht bekannt.");
      this.label12.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label12.AutoSize = true;
      this.label12.Location = new Point(400, 301);
      this.label12.Name = "label12";
      this.label12.Size = new Size(107, 13);
      this.label12.TabIndex = 4;
      this.label12.Text = "Aktueller Energiewert";
      this.textBoxEnergieAmStichtag.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.textBoxEnergieAmStichtag.Location = new Point(513, 324);
      this.textBoxEnergieAmStichtag.Name = "textBoxEnergieAmStichtag";
      this.textBoxEnergieAmStichtag.Size = new Size(229, 20);
      this.textBoxEnergieAmStichtag.TabIndex = 3;
      this.textBoxEnergieAmStichtag.Text = "0";
      this.toolTip1.SetToolTip((Control) this.textBoxEnergieAmStichtag, "Wird beim lesen automatisch  eingetragen. -1 fÃ¼r Wert nicht bekannt.");
      this.label13.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label13.AutoSize = true;
      this.label13.Location = new Point(405, 327);
      this.label13.Name = "label13";
      this.label13.Size = new Size(102, 13);
      this.label13.TabIndex = 4;
      this.label13.Text = "Energie am Stichtag";
      this.textBoxKommentar.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Right;
      this.textBoxKommentar.Location = new Point(362, 377);
      this.textBoxKommentar.Multiline = true;
      this.textBoxKommentar.Name = "textBoxKommentar";
      this.textBoxKommentar.ScrollBars = ScrollBars.Both;
      this.textBoxKommentar.Size = new Size(380, 76);
      this.textBoxKommentar.TabIndex = 3;
      this.toolTip1.SetToolTip((Control) this.textBoxKommentar, "Freier Kommentar zu dem Zustand des GerÃ¤tes. Vor dem Auslesen ausfÃ¼llen!!");
      this.label14.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.label14.AutoSize = true;
      this.label14.Location = new Point(359, 353);
      this.label14.Name = "label14";
      this.label14.Size = new Size(60, 13);
      this.label14.TabIndex = 4;
      this.label14.Text = "Kommentar";
      this.label15.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label15.AutoSize = true;
      this.label15.Location = new Point(14, 509);
      this.label15.Name = "label15";
      this.label15.Size = new Size(60, 13);
      this.label15.TabIndex = 4;
      this.label15.Text = "Meldungen";
      this.label16.AutoSize = true;
      this.label16.Location = new Point(14, 15);
      this.label16.Name = "label16";
      this.label16.Size = new Size(37, 13);
      this.label16.TabIndex = 4;
      this.label16.Text = "Ablauf";
      this.buttonSpeichernOhneLesen.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonSpeichernOhneLesen.Location = new Point(544, 470);
      this.buttonSpeichernOhneLesen.Name = "buttonSpeichernOhneLesen";
      this.buttonSpeichernOhneLesen.Size = new Size(198, 23);
      this.buttonSpeichernOhneLesen.TabIndex = 0;
      this.buttonSpeichernOhneLesen.Text = "Ohne GerÃ¤tezugriff speichern";
      this.toolTip1.SetToolTip((Control) this.buttonSpeichernOhneLesen, "Die Daten, auÃer Ablauf und Meldungen, werden unverÃ¤ndert in die Ausgabedatei geschreiben.");
      this.buttonSpeichernOhneLesen.UseVisualStyleBackColor = true;
      this.buttonSpeichernOhneLesen.Click += new System.EventHandler(this.buttonSpeichernOhneLesen_Click);
      this.buttonAblaufZumKommentar.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonAblaufZumKommentar.Location = new Point(362, 470);
      this.buttonAblaufZumKommentar.Name = "buttonAblaufZumKommentar";
      this.buttonAblaufZumKommentar.Size = new Size(166, 23);
      this.buttonAblaufZumKommentar.TabIndex = 0;
      this.buttonAblaufZumKommentar.Text = "Ablauf zum Kommentar";
      this.toolTip1.SetToolTip((Control) this.buttonAblaufZumKommentar, "HÃ¤ngt die Daten aus dem Ablauffeld an den Kommentar an.");
      this.buttonAblaufZumKommentar.UseVisualStyleBackColor = true;
      this.buttonAblaufZumKommentar.Click += new System.EventHandler(this.buttonAblaufZumKommentar_Click);
      this.buttonDatenliste.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonDatenliste.Location = new Point(362, 499);
      this.buttonDatenliste.Name = "buttonDatenliste";
      this.buttonDatenliste.Size = new Size(166, 23);
      this.buttonDatenliste.TabIndex = 0;
      this.buttonDatenliste.Text = "Datenliste anzeigen";
      this.toolTip1.SetToolTip((Control) this.buttonDatenliste, "Zeigt alle schon gelesenen Daten als groÃe Liste an.");
      this.buttonDatenliste.UseVisualStyleBackColor = true;
      this.buttonDatenliste.Click += new System.EventHandler(this.buttonDatenliste_Click);
      this.buttonTestlesen.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonTestlesen.Location = new Point(544, 499);
      this.buttonTestlesen.Name = "buttonTestlesen";
      this.buttonTestlesen.Size = new Size(198, 23);
      this.buttonTestlesen.TabIndex = 0;
      this.buttonTestlesen.Text = "Testlesen";
      this.toolTip1.SetToolTip((Control) this.buttonTestlesen, "Das GerÃ¤t wird nicht verÃ¤ndert und es werden keine Daten gespeichert");
      this.buttonTestlesen.UseVisualStyleBackColor = true;
      this.buttonTestlesen.Click += new System.EventHandler(this.buttonTestlesen_Click);
      this.buttonOpenFolder.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonOpenFolder.Location = new Point(362, 528);
      this.buttonOpenFolder.Name = "buttonOpenFolder";
      this.buttonOpenFolder.Size = new Size(166, 23);
      this.buttonOpenFolder.TabIndex = 0;
      this.buttonOpenFolder.Text = "Datenordner Ã¶ffnen";
      this.buttonOpenFolder.UseVisualStyleBackColor = true;
      this.buttonOpenFolder.Click += new System.EventHandler(this.buttonOpenFolder_Click);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(754, 563);
      this.Controls.Add((Control) this.label14);
      this.Controls.Add((Control) this.label13);
      this.Controls.Add((Control) this.label12);
      this.Controls.Add((Control) this.label11);
      this.Controls.Add((Control) this.label10);
      this.Controls.Add((Control) this.label9);
      this.Controls.Add((Control) this.label8);
      this.Controls.Add((Control) this.label7);
      this.Controls.Add((Control) this.label6);
      this.Controls.Add((Control) this.label5);
      this.Controls.Add((Control) this.label4);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label16);
      this.Controls.Add((Control) this.label15);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.textBoxKommentar);
      this.Controls.Add((Control) this.textBoxEnergieAmStichtag);
      this.Controls.Add((Control) this.textBoxEnergieAktuell);
      this.Controls.Add((Control) this.textBoxAuftragsnummer);
      this.Controls.Add((Control) this.textBoxEinbaudatum);
      this.Controls.Add((Control) this.textBoxAbweichenderStichtag);
      this.Controls.Add((Control) this.textBoxStichtag);
      this.Controls.Add((Control) this.textBoxUnit);
      this.Controls.Add((Control) this.textBoxMessbereich);
      this.Controls.Add((Control) this.textBoxEinbauort);
      this.Controls.Add((Control) this.textBoxDeviceNumber);
      this.Controls.Add((Control) this.textBoxNutzernummer);
      this.Controls.Add((Control) this.textBoxLiegenschaft);
      this.Controls.Add((Control) this.textBoxAusleser);
      this.Controls.Add((Control) this.textBoxCommunicationStatus);
      this.Controls.Add((Control) this.textBoxStatus);
      this.Controls.Add((Control) this.buttonOpenFolder);
      this.Controls.Add((Control) this.buttonDatenliste);
      this.Controls.Add((Control) this.buttonAblaufZumKommentar);
      this.Controls.Add((Control) this.buttonSpeichernOhneLesen);
      this.Controls.Add((Control) this.buttonTestlesen);
      this.Controls.Add((Control) this.buttonLesen);
      this.Name = nameof (ERR8002_Form);
      this.Text = "Minocal nach ERR 8002 reanimieren";
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- ErrTypeAnalysis.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.ErrTypeAnalysis
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class ErrTypeAnalysis : Form
  {
    private ZR_HandlerFunctions MyHandler;
    private DataSetAllErr8002Meters AllErrMeters;
    private string DataSetFileName;
    private IContainer components = (IContainer) null;
    private Button buttonGenerateList;
    private DataGridView dataGridView1;
    private TextBox textBoxStatus;
    private Button buttonSave;
    private Button buttonImport;
    private Button buttonSearcheSerialNumber;
    private TextBox textBoxSerialNumber;

    public ErrTypeAnalysis(ZR_HandlerFunctions MyHandler)
    {
      this.InitializeComponent();
      this.MyHandler = MyHandler;
      this.DataSetFileName = Path.Combine(SystemValues.LoggDataPath, "AllErr8002Meters.xml");
      if (!File.Exists(this.DataSetFileName))
        return;
      try
      {
        this.AllErrMeters = new DataSetAllErr8002Meters();
        int num = (int) this.AllErrMeters.ReadXml(this.DataSetFileName);
        this.dataGridView1.DataSource = (object) this.AllErrMeters.Err8002Meter;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("XLM File", "Fehler beim laden des Datenfiles" + ex.ToString());
      }
    }

    private void buttonGenerateList_Click(object sender, EventArgs e)
    {
      this.AllErrMeters = new DataSetAllErr8002Meters();
      if (!this.MyHandler.MyDataBaseAccess.LoadMeterListFromTypeID(this.AllErrMeters.Err8002Meter, 107))
      {
        this.textBoxStatus.Text = "Lesefehler";
      }
      else
      {
        string str = this.AllErrMeters.Err8002Meter.Rows.Count.ToString();
        this.textBoxStatus.Text = "Anzahl GerÃ¤te: " + str;
        for (int index = 0; index < this.AllErrMeters.Err8002Meter.Rows.Count; ++index)
        {
          DateTime lastProgDate = this.MyHandler.MyDataBaseAccess.GetLastProgDate(this.AllErrMeters.Err8002Meter[index].MeterID);
          if (!(lastProgDate == DateTime.MinValue))
          {
            this.AllErrMeters.Err8002Meter[index].LastProgDate = lastProgDate;
            if (index % 10 == 0)
            {
              this.textBoxStatus.Text = index.ToString() + "/" + str;
              this.Refresh();
            }
          }
        }
        this.dataGridView1.DataSource = (object) this.AllErrMeters.Err8002Meter;
        this.Refresh();
        this.AllErrMeters.WriteXml(this.DataSetFileName, XmlWriteMode.WriteSchema);
      }
    }

    private void buttonSave_Click(object sender, EventArgs e)
    {
      this.AllErrMeters.WriteXml(this.DataSetFileName, XmlWriteMode.WriteSchema);
    }

    private void buttonSearcheSerialNumber_Click(object sender, EventArgs e)
    {
      string str = this.textBoxSerialNumber.Text.Trim();
      for (int index = 0; index < this.dataGridView1.Rows.Count; ++index)
      {
        if (this.dataGridView1.Rows[index].Cells["SerialNr"].Value.ToString() == str)
        {
          this.dataGridView1.Rows[index].Selected = true;
          this.dataGridView1.FirstDisplayedScrollingRowIndex = index;
          return;
        }
      }
      int num = (int) GMM_MessageBox.ShowMessage("Search", "Not found");
    }

    private void buttonImport_Click(object sender, EventArgs e)
    {
      DataSetLogData dataSetLogData = new DataSetLogData();
      string str = Path.Combine(SystemValues.LoggDataPath, "Serie2LogData.xml");
      if (File.Exists(str))
      {
        try
        {
          int num = (int) dataSetLogData.ReadXml(str);
        }
        catch (Exception ex)
        {
          int num = (int) GMM_MessageBox.ShowMessage("XLM File", "Fehler beim laden des Datenfiles" + ex.ToString());
        }
      }
      int num1 = 0;
      for (int index1 = 0; index1 < dataSetLogData.GMM_Serie2DeviceLogData.Rows.Count; ++index1)
      {
        int deviceNumber = dataSetLogData.GMM_Serie2DeviceLogData[index1].DeviceNumber;
        DataSetAllErr8002Meters.Err8002MeterRow[] err8002MeterRowArray = (DataSetAllErr8002Meters.Err8002MeterRow[]) this.AllErrMeters.Err8002Meter.Select("SerialNr = " + deviceNumber.ToString());
        if (err8002MeterRowArray.Length == 1)
        {
          DataSetLogData.GMM_Serie2DeviceLogDataRow[] deviceLogDataRowArray = (DataSetLogData.GMM_Serie2DeviceLogDataRow[]) dataSetLogData.GMM_Serie2DeviceLogData.Select("DeviceNumber = " + deviceNumber.ToString());
          for (int index2 = 0; index2 < deviceLogDataRowArray.Length; ++index2)
          {
            if (deviceLogDataRowArray[index2].IsManuellGespeichertNull() || !deviceLogDataRowArray[index2].ManuellGespeichert)
            {
              if (!deviceLogDataRowArray[index2].IsFehlerBeseitigtNull() && deviceLogDataRowArray[index2].FehlerBeseitigt)
              {
                err8002MeterRowArray[0].FehlerBeseitigt = true;
                ++num1;
              }
              else if (!deviceLogDataRowArray[index2].IsFehlerGefundenNull())
              {
                if (err8002MeterRowArray[0].IsFehlerGefundenNull())
                  err8002MeterRowArray[0].FehlerGefunden = deviceLogDataRowArray[index2].FehlerGefunden;
                else if (deviceLogDataRowArray[index2].FehlerGefunden)
                  err8002MeterRowArray[0].FehlerGefunden = true;
              }
            }
          }
        }
      }
      int num2 = (int) GMM_MessageBox.ShowMessage("Statistik", "Anzahl beseitigter Fehler: " + num1.ToString());
      this.dataGridView1.Update();
      this.dataGridView1.Refresh();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.buttonGenerateList = new Button();
      this.dataGridView1 = new DataGridView();
      this.textBoxStatus = new TextBox();
      this.buttonSave = new Button();
      this.buttonImport = new Button();
      this.buttonSearcheSerialNumber = new Button();
      this.textBoxSerialNumber = new TextBox();
      ((ISupportInitialize) this.dataGridView1).BeginInit();
      this.SuspendLayout();
      this.buttonGenerateList.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonGenerateList.Enabled = false;
      this.buttonGenerateList.Location = new Point(564, 294);
      this.buttonGenerateList.Name = "buttonGenerateList";
      this.buttonGenerateList.Size = new Size(79, 23);
      this.buttonGenerateList.TabIndex = 0;
      this.buttonGenerateList.Text = "GenerateList";
      this.buttonGenerateList.UseVisualStyleBackColor = true;
      this.buttonGenerateList.Click += new System.EventHandler(this.buttonGenerateList_Click);
      this.dataGridView1.AllowUserToAddRows = false;
      this.dataGridView1.AllowUserToOrderColumns = true;
      this.dataGridView1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.dataGridView1.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
      this.dataGridView1.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dataGridView1.Location = new Point(4, 2);
      this.dataGridView1.Name = "dataGridView1";
      this.dataGridView1.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.dataGridView1.Size = new Size(800, 275);
      this.dataGridView1.TabIndex = 1;
      this.textBoxStatus.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.textBoxStatus.Location = new Point(4, 297);
      this.textBoxStatus.Name = "textBoxStatus";
      this.textBoxStatus.Size = new Size(275, 20);
      this.textBoxStatus.TabIndex = 2;
      this.buttonSave.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonSave.Location = new Point(729, 295);
      this.buttonSave.Name = "buttonSave";
      this.buttonSave.Size = new Size(75, 23);
      this.buttonSave.TabIndex = 0;
      this.buttonSave.Text = "Save";
      this.buttonSave.UseVisualStyleBackColor = true;
      this.buttonSave.Click += new System.EventHandler(this.buttonSave_Click);
      this.buttonImport.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonImport.Location = new Point(649, 295);
      this.buttonImport.Name = "buttonImport";
      this.buttonImport.Size = new Size(74, 23);
      this.buttonImport.TabIndex = 0;
      this.buttonImport.Text = "Import";
      this.buttonImport.UseVisualStyleBackColor = true;
      this.buttonImport.Click += new System.EventHandler(this.buttonImport_Click);
      this.buttonSearcheSerialNumber.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonSearcheSerialNumber.Location = new Point(392, 295);
      this.buttonSearcheSerialNumber.Name = "buttonSearcheSerialNumber";
      this.buttonSearcheSerialNumber.Size = new Size(79, 23);
      this.buttonSearcheSerialNumber.TabIndex = 0;
      this.buttonSearcheSerialNumber.Text = "Search SNR";
      this.buttonSearcheSerialNumber.UseVisualStyleBackColor = true;
      this.buttonSearcheSerialNumber.Click += new System.EventHandler(this.buttonSearcheSerialNumber_Click);
      this.textBoxSerialNumber.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.textBoxSerialNumber.Location = new Point(477, 297);
      this.textBoxSerialNumber.Name = "textBoxSerialNumber";
      this.textBoxSerialNumber.Size = new Size(81, 20);
      this.textBoxSerialNumber.TabIndex = 3;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(809, 329);
      this.Controls.Add((Control) this.textBoxSerialNumber);
      this.Controls.Add((Control) this.textBoxStatus);
      this.Controls.Add((Control) this.dataGridView1);
      this.Controls.Add((Control) this.buttonImport);
      this.Controls.Add((Control) this.buttonSave);
      this.Controls.Add((Control) this.buttonSearcheSerialNumber);
      this.Controls.Add((Control) this.buttonGenerateList);
      this.Name = nameof (ErrTypeAnalysis);
      this.Text = nameof (ErrTypeAnalysis);
      ((ISupportInitialize) this.dataGridView1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- FixedParameter.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.FixedParameter
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;

#nullable disable
namespace GMM_Handler
{
  internal class FixedParameter : LinkBlock
  {
    private const string StandardErrorMessage = "Illegal emergency frame";

    internal FixedParameter(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.FixedParameter)
    {
    }

    internal bool LoadEmergencyFrame()
    {
      CodeBlock codeBlock1 = (CodeBlock) null;
      CodeBlock codeBlock2 = (CodeBlock) null;
      IEnumerator enumerator1 = this.MyMeter.MyDisplayCode.AllMenuItems.GetEnumerator();
      try
      {
label_16:
        if (enumerator1.MoveNext())
        {
          IEnumerator enumerator2 = ((MenuItem) enumerator1.Current).DisplayCodeBlocks.GetEnumerator();
          try
          {
            CodeBlock current;
            while (true)
            {
              do
              {
                if (enumerator2.MoveNext())
                {
                  current = (CodeBlock) enumerator2.Current;
                  if (current.CodeSequenceType == CodeBlock.CodeSequenceTypes.Displaycode && current.CodeList.Count == 3 && ((CodeObject) current.CodeList[0]).CodeType == CodeObject.CodeTypes.BYTE && ((CodeObject) current.CodeList[1]).CodeType == CodeObject.CodeTypes.WORD && (((CodeObject) current.CodeList[2]).CodeType == CodeObject.CodeTypes.iPTR || ((CodeObject) current.CodeList[2]).CodeType == CodeObject.CodeTypes.ePTR || ((CodeObject) current.CodeList[2]).CodeType == CodeObject.CodeTypes.WORD))
                    goto label_5;
                }
                else
                  goto label_16;
              }
              while (current.CodeSequenceType != CodeBlock.CodeSequenceTypes.Framecode);
              break;
label_5:
              codeBlock1 = current;
            }
            if (codeBlock1 == null)
              return this.MyMeter.MyHandler.AddErrorPointMessage("Illegal emergency frame");
            if (current.CodeList.Count > 6)
              return this.MyMeter.MyHandler.AddErrorPointMessage("Illegal emergency frame");
            codeBlock2 = current;
            goto label_21;
          }
          finally
          {
            if (enumerator2 is IDisposable disposable)
              disposable.Dispose();
          }
        }
      }
      finally
      {
        if (enumerator1 is IDisposable disposable)
          disposable.Dispose();
      }
      return this.MyMeter.MyHandler.AddErrorPointMessage("Illegal emergency frame");
label_21:
      ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Emergency_Dis_Address"]).ValueEprom = ((CodeObject) codeBlock1.CodeList[2]).CodeValueCompiled;
      ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Emergency_Dis_Flags"]).ValueEprom = ((CodeObject) codeBlock1.CodeList[1]).CodeValueCompiled;
      for (int index = 0; index < codeBlock2.CodeList.Count - 1; ++index)
      {
        CodeObject code = (CodeObject) codeBlock2.CodeList[index];
        Parameter parameter = (Parameter) this.MyMeter.AllParameters[(object) ("DefaultFunction.Emergency_Frame_" + (index + 1).ToString())] ?? (Parameter) this.MyMeter.AllParameters[(object) ("DefaultFunction.Emergency_Frame" + index.ToString())];
        if (index == 0)
        {
          if ((code.CodeValueCompiled & 16L) == 0L)
            return this.MyMeter.MyHandler.AddErrorPointMessage("Illegal emergency frame");
          parameter.ValueEprom = code.CodeValueCompiled & -17L;
        }
        else
          parameter.ValueEprom = code.CodeValueCompiled;
      }
      return true;
    }
  }
}


--- Function.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.Function
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;

#nullable disable
namespace GMM_Handler
{
  internal class Function
  {
    internal ushort Number;
    internal string Name;
    internal string AliasName;
    internal int Version;
    internal int FirmwareVersionMin;
    internal int FirmwareVersionMax;
    internal FunctionLocalisableType Localisable;
    internal LoggerTypes LoggerType;
    internal ArrayList ParameterList = new ArrayList();
    internal SortedList ParameterListByName;
    internal SortedList EpromCodeBlocksByName;
    internal ArrayList RuntimeCodeBlockList = new ArrayList();
    internal ArrayList MenuList = new ArrayList();
    internal SortedList MenuListByName;
    internal int ColumnNumber;
    internal int RowNumber;
    internal string MeterResourcesList;
    internal string[] SuppliedResources;
    internal string[] NeadedResources;
    internal string[] NotSupportedResources;
    internal string FullName;
    internal string ShortInfo;
    internal string Description;
    internal string Group;
    internal string Symbolname;
    internal int UserAccessRight;
    internal string WorkingAccessRights;

    internal Function Clone(Meter MyMeter)
    {
      Function function = new Function();
      function.Number = this.Number;
      function.Name = this.Name;
      function.AliasName = this.AliasName;
      function.Version = this.Version;
      function.FirmwareVersionMin = this.FirmwareVersionMin;
      function.FirmwareVersionMax = this.FirmwareVersionMax;
      function.Localisable = this.Localisable;
      function.LoggerType = this.LoggerType;
      function.MeterResourcesList = this.MeterResourcesList;
      function.NeadedResources = this.NeadedResources;
      function.SuppliedResources = this.SuppliedResources;
      function.NotSupportedResources = this.NotSupportedResources;
      function.FullName = this.FullName;
      function.ShortInfo = this.ShortInfo;
      function.Description = this.Description;
      function.Group = this.Group;
      function.Symbolname = this.Symbolname;
      function.UserAccessRight = this.UserAccessRight;
      function.WorkingAccessRights = this.WorkingAccessRights;
      foreach (Parameter parameter in this.ParameterList)
        function.ParameterList.Add((object) parameter.Clone());
      foreach (CodeBlock runtimeCodeBlock in this.RuntimeCodeBlockList)
        function.RuntimeCodeBlockList.Add((object) runtimeCodeBlock.Clone(MyMeter, function.ParameterList));
      foreach (MenuItem menu in this.MenuList)
        function.MenuList.Add((object) menu.Clone());
      return function;
    }
  }
}


--- FunctionData.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.FunctionData
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;
using System.Text;

#nullable disable
namespace GMM_Handler
{
  public class FunctionData
  {
    public SortedList NeadedResources = new SortedList();
    public SortedList SuppliedResources = new SortedList();
    public ushort Number;
    public FunctionLocalisableType FunctionType;
    public string Name;
    public string FullName;
    public string Group;
    public string ShortInfo;
    public string Description;
    public string Symbolname;
    public int Version;
    public bool NewestVersion;
    public int FirmwareVersionMin;
    public int FirmwareVersionMax;
    public bool IsVisible;
    public int Column;
    public int Row;
    public StringBuilder AdditionalMessages;
  }
}


--- FunctionLocalisableType.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.FunctionLocalisableType
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public enum FunctionLocalisableType
  {
    NORMAL = 1,
    FIRST = 2,
    MAIN = 3,
    INVISIBLE = 4,
    SYSTEM = 5,
  }
}


--- FunctionPalette.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.FunctionPalette
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class FunctionPalette
  {
    private Meter MyMeter;
    private SortedList MyPalette;
    private SortedList MyLinearPalette;
    private string PaletteID_Name = string.Empty;
    private long PaletteID_Version;
    private SortedList SelectedGroup;
    private SortedList SelectedFunction;

    public FunctionPalette(Meter MyMeterIn) => this.MyMeter = MyMeterIn;

    internal FunctionPalette Clone(Meter MyMeterIn)
    {
      FunctionPalette functionPalette = new FunctionPalette(MyMeterIn);
      functionPalette.MyPalette = this.MyPalette;
      functionPalette.PaletteID_Name = this.PaletteID_Name;
      functionPalette.PaletteID_Version = this.PaletteID_Version;
      if (this.MyPalette.Count > 0)
      {
        functionPalette.SelectedGroup = (SortedList) this.MyPalette.GetByIndex(0);
        functionPalette.SelectedFunction = (SortedList) this.SelectedGroup.GetByIndex(0);
      }
      else
      {
        functionPalette.SelectedGroup = (SortedList) null;
        functionPalette.SelectedFunction = (SortedList) null;
      }
      return functionPalette;
    }

    internal bool LoadPalette(bool AllVersions, out SortedList OldFunctionNumbers)
    {
      OldFunctionNumbers = (SortedList) null;
      if (this.PaletteID_Name != this.MyMeter.MyIdent.HardwareName || this.PaletteID_Version != this.MyMeter.MyIdent.lFirmwareVersion)
      {
        if (!this.MyMeter.MyHandler.MyLoadedFunctions.LoadAllPalleteFunctions(AllVersions, this.MyMeter.MyIdent, out this.MyPalette, out this.MyLinearPalette, out OldFunctionNumbers))
          return false;
        this.PaletteID_Name = this.MyMeter.MyIdent.HardwareName;
        this.PaletteID_Version = this.MyMeter.MyIdent.lFirmwareVersion;
      }
      if (this.MyPalette.Count > 0)
      {
        this.SelectedGroup = (SortedList) this.MyPalette.GetByIndex(0);
        this.SelectedFunction = (SortedList) this.SelectedGroup.GetByIndex(0);
      }
      else
      {
        this.SelectedGroup = (SortedList) null;
        this.SelectedFunction = (SortedList) null;
      }
      return true;
    }

    internal bool GetMenuFunctionData(int x, int y, out FunctionData OutFunction)
    {
      OutFunction = (FunctionData) null;
      Function TheFunction;
      if (!this.MyMeter.MyFunctionTable.GetFunctionXY(x, y, out TheFunction))
        return false;
      OutFunction = this.GetFunctionData(TheFunction);
      return true;
    }

    internal bool IsNewestFunctionVersion(ushort FunctionNumber)
    {
      Function function = (Function) this.MyMeter.MyFunctionTable.FunctionListByNumber[(object) FunctionNumber];
      return (int) this.MyMeter.MyHandler.MyLoadedFunctions.GetNewestVersion(function.Name) <= (int) (short) function.Version;
    }

    internal bool GetLCDList(ushort FunctionNumber, out bool[] LCDSegments)
    {
      if (this.MyMeter.MyCommunication == null)
        this.MyMeter.MyCommunication = new MeterCommunication(this.MyMeter, true);
      LCDSegments = (bool[]) null;
      foreach (CodeBlock displayCodeBlock in ((MenuItem) ((Function) this.MyMeter.MyFunctionTable.FunctionListByNumber[(object) FunctionNumber]).MenuList[0]).DisplayCodeBlocks)
      {
        if (displayCodeBlock.CodeSequenceType == CodeBlock.CodeSequenceTypes.Displaycode)
          return this.MyMeter.MyMath.GetDisplay(this.MyMeter.Eprom, (uint) this.MyMeter.MyFunctionTable.StartAddressOfNextBlock, (uint) ((LinkObj) displayCodeBlock.CodeList[0]).Address, out LCDSegments);
      }
      return false;
    }

    internal bool GetPalettData(bool AllVersions, out PalettData ThePalettData)
    {
      ThePalettData = new PalettData();
      ThePalettData.AvailableResources = (SortedList) this.MyMeter.AvailableMeterResouces.Clone();
      OverrideParameter overrides = (OverrideParameter) this.MyMeter.MyFunctionTable.OverridesList[(object) OverrideID.ModuleType];
      if (overrides != null)
      {
        ModuleTypeValues moduleTypeValues1 = (ModuleTypeValues) overrides.Value;
        string str1 = (moduleTypeValues1 & ModuleTypeValues.IO1Mask).ToString();
        if (str1 != ModuleTypeValues.NoValue.ToString() && this.MyMeter.AvailableMeterResouces[(object) str1] == null)
        {
          MeterResource meterResource = new MeterResource(str1, (ushort) 0);
          ThePalettData.AvailableResources.Add((object) str1, (object) meterResource);
        }
        ModuleTypeValues moduleTypeValues2 = moduleTypeValues1 & ModuleTypeValues.IO2Mask;
        string str2 = moduleTypeValues2.ToString();
        string str3 = str2;
        moduleTypeValues2 = ModuleTypeValues.NoValue;
        string str4 = moduleTypeValues2.ToString();
        if (str3 != str4 && this.MyMeter.AvailableMeterResouces[(object) str2] == null)
        {
          MeterResource meterResource = new MeterResource(str2, (ushort) 0);
          ThePalettData.AvailableResources.Add((object) str2, (object) meterResource);
        }
      }
      SortedList OldFunctionNumbers;
      if (!this.LoadPalette(AllVersions, out OldFunctionNumbers))
        return false;
      for (int index1 = 0; index1 < this.MyPalette.Count; ++index1)
      {
        SortedList byIndex1 = (SortedList) this.MyPalette.GetByIndex(index1);
        SortedList sortedList = new SortedList();
        ThePalettData.GroupsAndFunctions.Add(this.MyPalette.GetKey(index1), (object) sortedList);
        for (int index2 = 0; index2 < byIndex1.Count; ++index2)
        {
          SortedList byIndex2 = (SortedList) byIndex1.GetByIndex(index2);
          for (int index3 = 0; index3 < byIndex2.Count; ++index3)
          {
            Function byIndex3 = (Function) byIndex2.GetByIndex(index3);
            string str = "?";
            switch (byIndex3.Localisable)
            {
              case FunctionLocalisableType.NORMAL:
                str = "N";
                break;
              case FunctionLocalisableType.FIRST:
                str = "F";
                break;
              case FunctionLocalisableType.MAIN:
                str = "M";
                break;
              case FunctionLocalisableType.INVISIBLE:
                str = "I";
                break;
            }
            try
            {
              FunctionData functionData = this.GetFunctionData(byIndex3);
              if (AllVersions)
                sortedList.Add((object) (functionData.FullName + "(V:" + byIndex3.Version.ToString() + " T:" + str + " F:" + byIndex3.Number.ToString() + ")"), (object) functionData);
              else if ((FunctionData) sortedList[(object) functionData.FullName] == null)
                sortedList.Add((object) functionData.FullName, (object) functionData);
              else
                sortedList.Add((object) (functionData.FullName + " F:" + byIndex3.Number.ToString()), (object) functionData);
              ThePalettData.PalettFunctions.Add((object) functionData.Number, (object) functionData);
            }
            catch (Exception ex)
            {
              ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
              ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Illegal function data on function: '" + byIndex3.Name);
              ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
              return false;
            }
          }
        }
      }
      int index4 = 0;
      int num = 0;
      ArrayList arrayList = (ArrayList) null;
      for (int index5 = 0; index5 < this.MyMeter.MyFunctionTable.FunctionList.Count; ++index5)
      {
        while ((int) (short) this.MyMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList[index4] == index5)
        {
          if (index4 < this.MyMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList.Count - 1)
          {
            ++index4;
            num = 0;
            arrayList = new ArrayList();
            ThePalettData.MenuFunctions.Add((object) arrayList);
          }
          else
            goto label_39;
        }
        ++num;
        FunctionData functionData = this.GetFunctionData((Function) this.MyMeter.MyFunctionTable.FunctionList[index5]);
        functionData.IsVisible = true;
        functionData.Column = index4 - 1;
        functionData.Row = num - 1;
        if (OldFunctionNumbers[(object) functionData.Number] != null)
          functionData.NewestVersion = false;
        arrayList.Add((object) functionData);
        ThePalettData.LoadedFunctions.Add((object) functionData.Number, (object) functionData);
      }
label_39:
      for (short indexOfMenuColumn = (short) this.MyMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList[this.MyMeter.MyFunctionTable.FunctionStartIndexOfMenuColumnList.Count - 1]; (int) indexOfMenuColumn < this.MyMeter.MyFunctionTable.FunctionList.Count; ++indexOfMenuColumn)
      {
        FunctionData functionData = this.GetFunctionData((Function) this.MyMeter.MyFunctionTable.FunctionList[(int) indexOfMenuColumn]);
        functionData.IsVisible = false;
        ThePalettData.NonMenuFunctions.Add((object) functionData);
        ThePalettData.LoadedFunctions.Add((object) functionData.Number, (object) functionData);
      }
      return true;
    }

    private FunctionData GetFunctionData(Function TheFunction)
    {
      FunctionData functionData = new FunctionData();
      functionData.Number = TheFunction.Number;
      functionData.Name = TheFunction.Name;
      functionData.FullName = TheFunction.FullName;
      functionData.Group = TheFunction.Group;
      functionData.ShortInfo = TheFunction.ShortInfo;
      functionData.Description = TheFunction.Description;
      functionData.Symbolname = TheFunction.Symbolname;
      functionData.FunctionType = TheFunction.Localisable;
      functionData.Version = TheFunction.Version;
      functionData.NewestVersion = true;
      functionData.FirmwareVersionMin = TheFunction.FirmwareVersionMin;
      functionData.FirmwareVersionMax = TheFunction.FirmwareVersionMax;
      string meterResourcesList = TheFunction.MeterResourcesList;
      char[] chArray1 = new char[1]{ ';' };
      foreach (string str1 in meterResourcesList.Split(chArray1))
      {
        string str2 = str1.Trim();
        if (str2.Length >= 1)
        {
          SortedList sortedList;
          string key;
          if (str2.StartsWith("s:"))
          {
            sortedList = functionData.SuppliedResources;
            key = str2.Substring(2);
          }
          else
          {
            sortedList = functionData.NeadedResources;
            key = str2;
          }
          if (sortedList.IndexOfKey((object) key) < 0)
            sortedList.Add((object) key, (object) (ushort) 0);
        }
      }
      foreach (Parameter parameter in TheFunction.ParameterList)
      {
        string meterResource = parameter.MeterResource;
        char[] chArray2 = new char[1]{ ';' };
        foreach (string str in meterResource.Split(chArray2))
        {
          string key = str.Trim();
          if (key.Length >= 1 && functionData.SuppliedResources.IndexOfKey((object) key) < 0)
            functionData.SuppliedResources.Add((object) key, (object) (ushort) 0);
        }
      }
      return functionData;
    }
  }
}


--- FunctionTable.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.FunctionTable
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class FunctionTable : LinkBlock
  {
    internal const int TableHeaderSize = 6;
    internal ushort Checksum;
    internal int Version;
    internal int MenuColumns;
    internal int TableLen;
    internal byte[] DummyBytes;
    internal SortedList OverridesList;
    internal ArrayList FunctionNumbersList;
    internal ArrayList FunctionStartIndexOfMenuColumnList;
    internal ArrayList FunctionList;
    internal SortedList FunctionListByName;
    internal SortedList FunctionListByNumber;
    internal ArrayList FirstFunctionInColumn;

    internal FunctionTable(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.FunctionTable)
    {
    }

    internal FunctionTable Clone(Meter NewMeter)
    {
      FunctionTable functionTable = new FunctionTable(NewMeter);
      functionTable.Version = this.Version;
      functionTable.MenuColumns = this.MenuColumns;
      functionTable.DummyBytes = (byte[]) this.DummyBytes.Clone();
      functionTable.OverridesList = OverrideParameter.GetOverridesListClone(this.OverridesList);
      functionTable.FunctionNumbersList = new ArrayList();
      foreach (ushort functionNumbers in this.FunctionNumbersList)
        functionTable.FunctionNumbersList.Add((object) functionNumbers);
      functionTable.FunctionStartIndexOfMenuColumnList = new ArrayList();
      foreach (short indexOfMenuColumn in this.FunctionStartIndexOfMenuColumnList)
        functionTable.FunctionStartIndexOfMenuColumnList.Add((object) indexOfMenuColumn);
      return functionTable;
    }

    internal bool ReadFunctionTableFromConnectedDevice()
    {
      this.LinkObjList.Add((object) new CodeBlock(CodeBlock.CodeSequenceTypes.LinkerGeneratedCodeBlock, FrameTypes.None, -1));
      int valueEprom = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_FunctionTableAdr"]).ValueEprom;
      if (!this.LoadTableHeaderFromArray(this.MyMeter.Eprom, valueEprom))
        return false;
      int StartAddress = valueEprom + 6;
      int num = this.TableLen - 6;
      ByteField MemoryData = new ByteField(num);
      if (!this.MyMeter.MyCommunication.MyBus.ReadMemory(MemoryLocation.EEPROM, StartAddress, num, out MemoryData))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Read function table error");
        return false;
      }
      for (int index = 0; index < num; ++index)
        this.MyMeter.Eprom[StartAddress + index] = MemoryData.Data[index];
      if ((int) this.MyMeter.MyEpromHeader.GenerateChecksum(this.MyMeter.Eprom, valueEprom + 2, this.TableLen - 2, (ushort) 0) != (int) this.MyMeter.Eprom[valueEprom] + ((int) this.MyMeter.Eprom[valueEprom + 1] << 8))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Function table checksum error");
        return false;
      }
      if (!this.LoadFromByteArray(this.MyMeter.Eprom, valueEprom))
        return false;
      this.MyMeter.MyCompiler.GenerateCodeFromCodeBlockList(this.LinkObjList);
      return true;
    }

    internal bool ReadFunctionTableFromEprom()
    {
      this.LinkObjList.Add((object) new CodeBlock(CodeBlock.CodeSequenceTypes.LinkerGeneratedCodeBlock, FrameTypes.None, -1));
      int valueEprom = (int) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_FunctionTableAdr"]).ValueEprom;
      if (!this.LoadTableHeaderFromArray(this.MyMeter.Eprom, valueEprom) || !this.LoadFromByteArray(this.MyMeter.Eprom, valueEprom))
        return false;
      this.MyMeter.MyCompiler.GenerateCodeFromCodeBlockList(this.LinkObjList);
      return true;
    }

    private bool LoadTableHeaderFromArray(byte[] TheArray, int Offset)
    {
      if (TheArray.Length < Offset + 6)
        return false;
      this.Checksum = ParameterService.GetFromByteArray_ushort(TheArray, ref Offset);
      this.Version = (int) TheArray[Offset++];
      this.MenuColumns = (int) TheArray[Offset++];
      this.TableLen = (int) ParameterService.GetFromByteArray_ushort(TheArray, ref Offset);
      ArrayList codeList = ((CodeBlock) this.LinkObjList[0]).CodeList;
      codeList.Add((object) CodeObject.GetCodeObject("Checksum", this.Checksum));
      codeList.Add((object) CodeObject.GetCodeObject("Version", (byte) this.Version));
      codeList.Add((object) CodeObject.GetCodeObject("Menu columns", (byte) this.MenuColumns));
      codeList.Add((object) CodeObject.GetCodeObject("Table len", (ushort) this.TableLen));
      return true;
    }

    internal bool LoadFromByteArray(byte[] TheArray, int Offset)
    {
      ArrayList codeList = ((CodeBlock) this.LinkObjList[0]).CodeList;
      int num1 = Offset + 6;
      if (TheArray.Length >= Offset + this.TableLen)
      {
        if ((int) this.MyMeter.MyEpromHeader.GenerateChecksum(TheArray, Offset + 2, this.TableLen - 2, (ushort) 0) != (int) this.Checksum)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Function table checksum error");
        }
        else
        {
          this.OverridesList = OverrideParameter.GetNewOverridesList();
          if (this.Version > 2)
          {
            int the = (int) TheArray[num1++];
            codeList.Add((object) CodeObject.GetCodeObject("Number of override parameters", (byte) the));
            for (int index = 0; index < the; ++index)
            {
              OverrideParameter TheOverrideParameter = new OverrideParameter((OverrideID) TheArray[num1++]);
              if (!this.MyMeter.MyHandler.UseOnlyDefaultValues)
              {
                if (TheOverrideParameter.LoadDataFromByteArray(TheArray, ref num1))
                  OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter);
                else
                  goto label_45;
              }
              else
                num1 += (int) TheOverrideParameter.ByteSize;
              string str = TheOverrideParameter.ParameterID.ToString();
              codeList.Add((object) CodeObject.GetCodeObject("Override param ID: " + str, (byte) TheOverrideParameter.ParameterID));
              codeList.Add((object) CodeObject.GetCodeObject("Override param", TheOverrideParameter.Value, (int) TheOverrideParameter.ByteSize));
            }
          }
          else if (this.Version != 2)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "No supported firmware version");
            return false;
          }
          ushort num2 = 0;
          ushort[] numArray = new ushort[this.MenuColumns];
          this.FunctionStartIndexOfMenuColumnList = new ArrayList();
          this.FunctionNumbersList = new ArrayList();
          for (short index = 0; (int) index < this.MenuColumns; ++index)
          {
            ushort TheValue;
            if (index == (short) 0)
            {
              ushort fromByteArrayUshort = ParameterService.GetFromByteArray_ushort(TheArray, ref num1);
              TheValue = ParameterService.GetFromByteArray_ushort(TheArray, ref num1);
              codeList.Add((object) CodeObject.GetCodeObject("Function start offset", fromByteArrayUshort));
              num2 = (ushort) ((uint) fromByteArrayUshort + (uint) (ushort) Offset);
              codeList.Add((object) CodeObject.GetCodeObject("Function end offset", TheValue));
            }
            else if ((int) index < this.MenuColumns - 1)
            {
              TheValue = ParameterService.GetFromByteArray_ushort(TheArray, ref num1);
              codeList.Add((object) CodeObject.GetCodeObject("Function end offset", TheValue));
            }
            else
              TheValue = (ushort) this.TableLen;
            ushort num3 = (ushort) ((uint) TheValue + (uint) (ushort) Offset);
            numArray[(int) index] = num3;
          }
          this.DummyBytes = new byte[(int) num2 - num1];
          ushort num4 = 0;
          while (num1 < (int) num2)
          {
            ushort Size = (ushort) ((uint) num2 - (uint) num1);
            if (Size > (ushort) 4)
              Size = (ushort) 4;
            for (int index = 0; index < (int) Size; ++index)
              this.DummyBytes[(int) num4++] = TheArray[num1 + index];
            ulong fromByteArrayUlong = ParameterService.GetFromByteArray_ulong(TheArray, Size, ref num1);
            codeList.Add((object) CodeObject.GetCodeObject("Additional bytes", fromByteArrayUlong, (int) Size));
          }
          short num5 = 0;
          bool flag = false;
          for (short index = 0; (int) index < this.MenuColumns; ++index)
          {
            ushort num6 = numArray[(int) index];
            if (num1 < (int) num6)
            {
              this.FunctionStartIndexOfMenuColumnList.Add((object) num5);
              if ((int) index == this.MenuColumns - 1)
                flag = true;
              do
              {
                ++num5;
                ushort TheValue = ParameterService.GetFromByteArray_ushort(TheArray, ref num1);
                if (flag)
                {
                  flag = false;
                  if ((int) TheValue != (int) this.MyMeter.MyIdent.DefaultFunctionNr)
                  {
                    if (this.MyMeter.MyHandler.UseOnlyDefaultValues)
                      TheValue = this.MyMeter.MyIdent.DefaultFunctionNr;
                    else
                      ZR_ClassLibMessages.AddWarning("Different DefaultFunction number at MeterInfo");
                  }
                }
                this.FunctionNumbersList.Add((object) TheValue);
                CodeObject codeObject = CodeObject.GetCodeObject("Column: " + index.ToString(), TheValue);
                codeList.Add((object) codeObject);
              }
              while (num1 < (int) num6);
            }
            else
              this.FunctionStartIndexOfMenuColumnList.Add((object) num5);
          }
          return true;
        }
      }
label_45:
      return false;
    }

    internal bool GenerateNewList()
    {
      this.LinkObjList.Add((object) new CodeBlock(CodeBlock.CodeSequenceTypes.LinkerGeneratedCodeBlock, FrameTypes.None, -1));
      ArrayList codeList = ((CodeBlock) this.LinkObjList[0]).CodeList;
      codeList.Add((object) CodeObject.GetCodeObject("Checksum", (ushort) 0));
      codeList.Add((object) CodeObject.GetCodeObject("Version", (byte) this.Version));
      codeList.Add((object) CodeObject.GetCodeObject("Menu columns", (byte) this.MenuColumns));
      CodeObject codeObject1 = CodeObject.GetCodeObject("Table len", (ushort) this.TableLen);
      codeList.Add((object) codeObject1);
      if (!this.MyMeter.MyCompiler.GenerateCodeFromCodeBlockList(this.LinkObjList))
        return false;
      int num1 = 6;
      if (this.Version > 2)
      {
        CodeObject codeObject2 = CodeObject.GetCodeObject("Number of override parameters", (byte) 0);
        codeList.Add((object) codeObject2);
        ++num1;
        int num2 = 0;
        for (int index = 0; index < this.OverridesList.Count; ++index)
        {
          OverrideParameter byIndex = (OverrideParameter) this.OverridesList.GetByIndex(index);
          if (byIndex.AtFunctionTabel && this.MyMeter.IsMeterResourceAvailable(byIndex.NeadedRessource))
          {
            ++num2;
            CodeObject codeObject3 = CodeObject.GetCodeObject("Override param ID: " + byIndex.ParameterID.ToString(), (byte) byIndex.ParameterID);
            this.MyMeter.MyCompiler.GenerateCodeFromCodeObject(codeObject3);
            codeList.Add((object) codeObject3);
            CodeObject codeObject4 = CodeObject.GetCodeObject("Override param", byIndex.Value, (int) byIndex.ByteSize);
            this.MyMeter.MyCompiler.GenerateCodeFromCodeObject(codeObject4);
            codeList.Add((object) codeObject4);
            num1 += 1 + (int) byIndex.ByteSize;
          }
        }
        codeObject2.CodeValueCompiled = (long) num2;
      }
      CodeObject[] codeObjectArray = new CodeObject[this.MenuColumns];
      codeObjectArray[0] = CodeObject.GetCodeObject("Function start offset", (ushort) 0);
      codeList.Add((object) codeObjectArray[0]);
      int num3 = num1 + 2;
      for (short index = 1; (int) index < this.MenuColumns; ++index)
      {
        codeObjectArray[(int) index] = CodeObject.GetCodeObject("Function end offset", (ushort) 0);
        codeList.Add((object) codeObjectArray[(int) index]);
        num3 += 2;
      }
      int StartOffset = 0;
      while (StartOffset < this.DummyBytes.Length)
      {
        ushort Size = (ushort) (this.DummyBytes.Length - StartOffset);
        if (Size > (ushort) 4)
          Size = (ushort) 4;
        ulong fromByteArrayUlong = ParameterService.GetFromByteArray_ulong(this.DummyBytes, Size, ref StartOffset);
        codeList.Add((object) CodeObject.GetCodeObject("Additional bytes", fromByteArrayUlong, (int) Size));
        num3 += (int) Size;
      }
      short index1 = 0;
      for (short index2 = 0; (int) index2 < this.FunctionNumbersList.Count; ++index2)
      {
        for (; (int) index1 < this.MenuColumns && (int) (short) this.FunctionStartIndexOfMenuColumnList[(int) index1] <= (int) index2; ++index1)
          codeObjectArray[(int) index1].CodeValueCompiled = (long) num3;
        short num4 = (short) ((int) index1 - 1);
        ushort functionNumbers = (ushort) this.FunctionNumbersList[(int) index2];
        CodeObject codeObject5 = CodeObject.GetCodeObject("Column: " + num4.ToString() + " Function: " + ((Function) this.FunctionListByNumber[(object) functionNumbers]).Name, functionNumbers);
        codeList.Add((object) codeObject5);
        num3 += 2;
      }
      this.TableLen = num3;
      codeObject1.CodeValueCompiled = (long) num3;
      return this.MyMeter.MyCompiler.GenerateCodeFromCodeBlockList(this.LinkObjList);
    }

    internal void GenerateChecksum()
    {
      this.Checksum = this.MyMeter.MyEpromHeader.GenerateChecksum(this.MyMeter.Eprom, this.BlockStartAddress + 2, this.TableLen - 2, (ushort) 0);
      CodeObject code = (CodeObject) ((CodeBlock) this.LinkObjList[0]).CodeList[0];
      code.CodeValueCompiled = (long) this.Checksum;
      this.MyMeter.MyCompiler.GenerateCodeFromCodeObjectAndCopyToEprom(code);
    }

    internal void AddFunctionNames()
    {
      foreach (CodeObject code in ((CodeBlock) this.LinkObjList[0]).CodeList)
      {
        if (code.LineInfo.StartsWith("Column"))
        {
          ushort codeValueCompiled = (ushort) code.CodeValueCompiled;
          CodeObject codeObject = code;
          codeObject.LineInfo = codeObject.LineInfo + " Function: " + ((Function) this.FunctionListByNumber[(object) codeValueCompiled]).Name;
        }
      }
    }

    internal bool GetFunctionXY(int x, int y, out Function TheFunction)
    {
      TheFunction = (Function) null;
      try
      {
        int index = (int) (short) this.FunctionStartIndexOfMenuColumnList[x] + y;
        if (index >= this.FunctionList.Count || x < this.FunctionStartIndexOfMenuColumnList.Count - 1 && index >= (int) (short) this.FunctionStartIndexOfMenuColumnList[x + 1])
          return false;
        TheFunction = (Function) this.FunctionList[index];
      }
      catch
      {
        return false;
      }
      return true;
    }

    internal bool DeleteFunctionsWithMissedResources()
    {
      if (this.MyMeter.MyHandler.ExtendedTypeEditMode)
        return true;
      bool flag1;
      do
      {
        do
        {
          flag1 = false;
          ushort[] numArray = new ushort[this.FunctionNumbersList.Count];
          for (int index = 0; index < numArray.Length; ++index)
            numArray[index] = (ushort) this.FunctionNumbersList[index];
          for (int index1 = 0; index1 < numArray.Length; ++index1)
          {
            Function fullLoadedFunction = (Function) this.MyMeter.MyHandler.MyLoadedFunctions.FullLoadedFunctions[(object) numArray[index1]];
            string empty = string.Empty;
            string[] neadedResources = fullLoadedFunction.NeadedResources;
            for (int index2 = 0; index2 < neadedResources.Length; ++index2)
            {
              string[] strArray = neadedResources[index2].Split('|');
              int index3;
              for (index3 = 0; index3 < strArray.Length; ++index3)
              {
                string key = strArray[index3];
                if (key.StartsWith("e:"))
                  key = key.Substring(2);
                if (key == "Developer" || this.MyMeter.AvailableMeterResouces[(object) key] != null)
                  break;
              }
              if (index3 == strArray.Length)
              {
                if (this.MyMeter.MyHandler.showFunctionRemoveMessages)
                {
                  ZR_ClassLibMessages.AddInfo(this.MyMeter.MyHandler.MyRes.GetString("FuncDel") + ": '" + fullLoadedFunction.FullName + "' It nead: " + neadedResources[index2]);
                  goto label_23;
                }
                else
                  goto label_23;
              }
            }
            if (fullLoadedFunction.SuppliedResources.Length != 0)
            {
              string impossibleResource = IoFunctionResourceCorrelation.GetImpossibleResource(this.MyMeter.InOut1Function, this.MyMeter.InOut2Function, fullLoadedFunction.SuppliedResources);
              if (impossibleResource != null)
              {
                if (this.MyMeter.MyHandler.showFunctionRemoveMessages)
                  ZR_ClassLibMessages.AddInfo(this.MyMeter.MyHandler.MyRes.GetString("FuncDel") + ": '" + fullLoadedFunction.FullName + "' It supplies: " + impossibleResource);
              }
              else
                continue;
            }
            else
              continue;
label_23:
            this.DeleteFunction(numArray[index1]);
            flag1 = true;
          }
          if (flag1 && !this.MyMeter.CreateMeterResourceInformation())
            return false;
        }
        while (flag1);
        ushort[] numArray1 = new ushort[this.FunctionNumbersList.Count];
        for (int index = 0; index < numArray1.Length; ++index)
          numArray1[index] = (ushort) this.FunctionNumbersList[index];
        for (int index4 = 0; index4 < numArray1.Length; ++index4)
        {
          Function fullLoadedFunction = (Function) this.MyMeter.MyHandler.MyLoadedFunctions.FullLoadedFunctions[(object) numArray1[index4]];
          for (int index5 = 0; index5 < fullLoadedFunction.NotSupportedResources.Length; ++index5)
          {
            if (this.MyMeter.AvailableMeterResouces[(object) fullLoadedFunction.NotSupportedResources[index5]] != null)
            {
              if (this.MyMeter.MyHandler.showFunctionRemoveMessages)
                ZR_ClassLibMessages.AddInfo(this.MyMeter.MyHandler.MyRes.GetString("FuncDel") + ": " + fullLoadedFunction.FullName + " (" + fullLoadedFunction.NotSupportedResources[index5] + " not supported!)");
              this.DeleteFunction(numArray1[index4]);
              flag1 = true;
              break;
            }
          }
        }
        if (flag1 && !this.MyMeter.CreateMeterResourceInformation())
          return false;
      }
      while (flag1);
      bool flag2 = false;
      if (this.MyMeter.AvailableMeterResouces.IndexOfKey((object) "Inp1On") < 0 && this.MyMeter.AvailableMeterResouces.IndexOfKey((object) "Out1On") < 0)
      {
        this.MyMeter.InOut1Function = InOutFunctions.IO1_Off;
        flag2 = true;
      }
      if (this.MyMeter.AvailableMeterResouces.IndexOfKey((object) "Inp2On") < 0 && this.MyMeter.AvailableMeterResouces.IndexOfKey((object) "Out2On") < 0)
      {
        this.MyMeter.InOut2Function = InOutFunctions.IO2_Off;
        flag2 = true;
      }
      if (flag2)
      {
        OverrideParameter overrides = (OverrideParameter) this.OverridesList[(object) OverrideID.IO_Functions];
        if (overrides != null)
          overrides.Value = (ulong) this.MyMeter.InOut1Function | (ulong) this.MyMeter.InOut2Function;
      }
      string neadedResources1 = IoFunctionResourceCorrelation.GetNeadedResources(this.MyMeter.InOut1Function, this.MyMeter.InOut2Function, this.MyMeter.AvailableMeterResouces);
      if (neadedResources1.Length > 0)
      {
        ZR_ClassLibMessages.AddWarning(neadedResources1);
        ZR_ClassLibMessages.AddWarning("Missing input or output function! Neaded resources:");
      }
      return true;
    }

    internal bool DeleteFunction(int x, int y)
    {
      int index1 = (int) (short) this.FunctionStartIndexOfMenuColumnList[x] + y;
      for (int index2 = x + 1; index2 < this.FunctionStartIndexOfMenuColumnList.Count; ++index2)
        this.FunctionStartIndexOfMenuColumnList[index2] = (object) (short) ((int) (short) this.FunctionStartIndexOfMenuColumnList[index2] - 1);
      this.FunctionNumbersList.RemoveAt(index1);
      return true;
    }

    internal bool DeleteFunction(ushort FunctionNumber)
    {
      int index1 = 0;
      while (index1 < this.FunctionNumbersList.Count && (int) (ushort) this.FunctionNumbersList[index1] != (int) FunctionNumber)
        ++index1;
      if (index1 == this.FunctionNumbersList.Count)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Function not found");
        return false;
      }
      for (int index2 = 0; index2 < this.FunctionStartIndexOfMenuColumnList.Count; ++index2)
      {
        if ((int) (short) this.FunctionStartIndexOfMenuColumnList[index2] > index1)
          this.FunctionStartIndexOfMenuColumnList[index2] = (object) (short) ((int) (short) this.FunctionStartIndexOfMenuColumnList[index2] - 1);
      }
      this.FunctionNumbersList.RemoveAt(index1);
      return true;
    }

    internal bool RepareAndCompress()
    {
      for (int index = 0; index < this.FunctionNumbersList.Count; ++index)
      {
        Function loadedFunctionHeader = (Function) this.MyMeter.MyHandler.MyLoadedFunctions.LoadedFunctionHeaders[this.FunctionNumbersList[index]];
        if ((long) loadedFunctionHeader.FirmwareVersionMax < this.MyMeter.MyIdent.lFirmwareVersion || (long) loadedFunctionHeader.FirmwareVersionMin > this.MyMeter.MyIdent.lFirmwareVersion)
        {
          this.DeleteFunction(loadedFunctionHeader.Number);
          --index;
        }
      }
      return true;
    }

    internal bool AddFunction(int x, int y, int FunctionNumber)
    {
      int index1 = (int) (short) this.FunctionStartIndexOfMenuColumnList[x] + y;
      if (index1 >= this.FunctionNumbersList.Count)
      {
        this.FunctionNumbersList.Add((object) (ushort) FunctionNumber);
      }
      else
      {
        if (x < this.FunctionStartIndexOfMenuColumnList.Count - 1)
        {
          if (index1 > (int) (short) this.FunctionStartIndexOfMenuColumnList[x + 1])
            index1 = (int) (short) this.FunctionStartIndexOfMenuColumnList[x + 1];
          for (int index2 = x + 1; index2 < this.FunctionStartIndexOfMenuColumnList.Count; ++index2)
            this.FunctionStartIndexOfMenuColumnList[index2] = (object) (short) ((int) (short) this.FunctionStartIndexOfMenuColumnList[index2] + 1);
        }
        this.FunctionNumbersList.Insert(index1, (object) (ushort) FunctionNumber);
      }
      ulong NeadedIOFunction;
      ulong NeadedIOFunctionMask;
      if (MeterResource.GetNeadedIOFunction(((Function) this.MyMeter.MyHandler.MyLoadedFunctions.FullLoadedFunctions[(object) (ushort) FunctionNumber]).SuppliedResources, out NeadedIOFunction, out NeadedIOFunctionMask))
      {
        OverrideParameter overrides = (OverrideParameter) this.MyMeter.MyFunctionTable.OverridesList[(object) OverrideID.IO_Functions];
        if (overrides != null)
          overrides.Value = overrides.Value & ~NeadedIOFunctionMask | NeadedIOFunction;
      }
      return true;
    }

    internal bool AddOverridesFromParameter()
    {
      if (this.OverridesList == null)
        this.OverridesList = new SortedList();
      OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.SerialNumber, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_SerialNr"]).ValueEprom));
      OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.MeterID, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterID"]).ValueEprom));
      OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.BaseTypeID, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterInfoID"]).ValueEprom));
      OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.FactoryTypeID, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterTypeID"]).ValueEprom));
      if (this.MyMeter.IsMeterResourceAvailable(MeterResources.CustomerId))
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.CustomID, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.CustomerId.ToString()]).ValueEprom));
      else
        OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.CustomID);
      OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.Medium, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusMedium"]).ValueEprom));
      object allParameter1 = this.MyMeter.AllParameters[(object) "DefaultFunction.Itr_RefreshTime"];
      if (allParameter1 != null)
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.CycleTimeStandard, (ulong) ((Parameter) allParameter1).ValueEprom));
      object allParameter2 = this.MyMeter.AllParameters[(object) "DefaultFunction.Itr_RefreshTimeShort"];
      if (allParameter2 != null)
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.CycleTimeFast, (ulong) ((Parameter) allParameter2).ValueEprom));
      object allParameter3 = this.MyMeter.AllParameters[(object) "DefaultFunction.ADC_HeatThreshold"];
      if (allParameter3 != null)
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.HeatThresholdTemp, (ulong) ((Parameter) allParameter3).ValueEprom));
      bool flag = true;
      object allParameter4 = this.MyMeter.AllParameters[(object) "DefaultFunction.Waerme_Grenze_DeltaT_min"];
      if (allParameter4 != null)
      {
        Parameter parameter = (Parameter) allParameter4;
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.MinTempDiffPlusTemp, (ulong) parameter.ValueEprom));
        if (parameter.ValueEprom != 0L)
          flag = false;
      }
      object allParameter5 = this.MyMeter.AllParameters[(object) "DefaultFunction.Kaelte_Grenze_DeltaT_min"];
      if (allParameter5 != null)
      {
        Parameter parameter = (Parameter) allParameter5;
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.MinTempDiffMinusTemp, (ulong) parameter.ValueEprom));
        if (parameter.ValueEprom != 0L)
          flag = false;
      }
      object allParameter6 = this.MyMeter.AllParameters[(object) "DefaultFunction.Energie_Konfiguration"];
      if (allParameter6 != null)
      {
        Parameter parameter = (Parameter) allParameter6;
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, ((uint) (int) parameter.ValueEprom & (uint) (int) this.MyMeter.MyCompiler.Includes[(object) "ENG_KONFIG_TEMP_VL_FEST"]) <= 0U ? (((uint) (int) parameter.ValueEprom & (uint) (int) this.MyMeter.MyCompiler.Includes[(object) "ENG_KONFIG_TEMP_RL_FEST"]) <= 0U ? new OverrideParameter(OverrideID.FixedTempSetup, FixedTempSetup.OFF.ToString(), true) : new OverrideParameter(OverrideID.FixedTempSetup, FixedTempSetup.Return.ToString(), true)) : new OverrideParameter(OverrideID.FixedTempSetup, FixedTempSetup.Flow.ToString(), true));
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, !flag ? (((uint) (int) parameter.ValueEprom & (uint) (int) this.MyMeter.MyCompiler.Includes[(object) "ENG_KONFIG_DELTAT_NULL_SETZEN"]) <= 0U ? new OverrideParameter(OverrideID.MimTempDiffSetup, MinimalTempDiffSetup.SetToMin.ToString(), true) : new OverrideParameter(OverrideID.MimTempDiffSetup, MinimalTempDiffSetup.SetTo0.ToString(), true)) : new OverrideParameter(OverrideID.MimTempDiffSetup, MinimalTempDiffSetup.OFF.ToString(), true));
      }
      if (this.MyMeter.MyCompiler.Includes.ContainsKey((object) "RW_KONFIG_DYN_VOL_CYCLE"))
      {
        object allParameter7 = this.MyMeter.AllParameters[(object) "DefaultFunction.RW_Typ_Konfiguration"];
        if (allParameter7 != null)
        {
          Parameter parameter = (Parameter) allParameter7;
          OverrideParameter TheOverrideParameter = new OverrideParameter(OverrideID.CycleTimeDynamic, CycleTimeChangeMethode.ExtPower.ToString(), true);
          if (((uint) (int) parameter.ValueEprom & (uint) (int) this.MyMeter.MyCompiler.Includes[(object) "RW_KONFIG_DYN_VOL_CYCLE"]) > 0U)
            TheOverrideParameter.Value |= 2UL;
          if (((uint) (int) parameter.ValueEprom & (uint) (int) this.MyMeter.MyCompiler.Includes[(object) "RW_KONFIG_DYN_TEMP_CYCLE"]) > 0U)
            TheOverrideParameter.Value |= 4UL;
          OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter);
        }
      }
      object allParameter8 = this.MyMeter.AllParameters[(object) "DefaultFunction.Feste_Fuehlertemperatur"];
      if (allParameter8 != null)
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.FixedTempValue, (ulong) ((Parameter) allParameter8).ValueEprom));
      object allParameter9 = this.MyMeter.AllParameters[(object) "DefaultFunction.ADC_HeatThreshold"];
      if (allParameter9 != null)
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.HeatThresholdTemp, (ulong) ((Parameter) allParameter9).ValueEprom));
      object allParameter10 = this.MyMeter.AllParameters[(object) "DefaultFunction.TAR_Setup"];
      if (allParameter10 != null)
      {
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.TarifFunction, (ulong) ((Parameter) allParameter10).ValueEprom));
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.TarifRefTemp, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.TAR_RefTemp"]).ValueEprom));
      }
      OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.MBusAddress, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.MBu_Address"]).ValueEprom));
      OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.MBusIdentificationNo, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusSerialNr"]).ValueEprom));
      OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.Baudrate, (ulong) this.MyMeter.GetBaudrate()));
      if (this.MyMeter.IsMeterResourceAvailable(MeterResources.EndOfBattery))
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.EndOfBattery, ZR_Calendar.Cal_GetDateTime((uint) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.EndOfBattery.ToString()]).ValueEprom)));
      else
        OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.EndOfBattery);
      if (this.MyMeter.IsMeterResourceAvailable(MeterResources.EndOfCalibration))
      {
        OverrideParameter TheOverrideParameter = new OverrideParameter(OverrideID.EndOfCalibration, (ulong) ZR_Calendar.Cal_GetDateTime((uint) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.EndOfCalibration.ToString()]).ValueEprom).Year);
        if (!UserRights.GlobalUserRights.CheckRight(UserRights.Rights.DesignerChangeMenu))
          TheOverrideParameter.HasWritePermission = false;
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter);
      }
      else
        OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.EndOfCalibration);
      if (this.MyMeter.MyMath.MyBaseSettings != null)
      {
        Decimal ScaleFactor1 = (Decimal) Math.Pow(10.0, (double) MeterMath.EnergyUnits[this.MyMeter.MyMath.MyBaseSettings.EnergyUnitIndex].AfterPointDigits);
        Decimal ScaleFactor2 = (Decimal) Math.Pow(2.0, (double) this.MyMeter.MyMath.MyBaseSettings.Energy_SumExpo) * ScaleFactor1;
        Decimal ScaleFactor3 = (Decimal) Math.Pow(10.0, (double) MeterMath.VolumeUnits[this.MyMeter.MyMath.MyBaseSettings.VolumeUnitIndex].AfterPointDigits);
        Decimal ScaleFactor4 = (Decimal) Math.Pow(2.0, (double) this.MyMeter.MyMath.MyBaseSettings.Vol_SumExpo) * ScaleFactor3;
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.EnergyActualValue, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Waerme_EnergSum"]).ValueEprom, ScaleFactor2));
        if (this.MyMeter.IsMeterResourceAvailable(MeterResources.CEnergy))
          OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.CEnergyActualValue, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Kaelte_EnergSum"]).ValueEprom, ScaleFactor2));
        else
          OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.CEnergyActualValue);
        OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.VolumeActualValue, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Vol_VolSum"]).ValueEprom, ScaleFactor4));
        object allParameter11 = this.MyMeter.AllParameters[(object) "DefaultFunction.TAR_EnergySumTar0"];
        if (allParameter11 != null)
        {
          OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.TarifEnergy0, (ulong) ((Parameter) allParameter11).ValueEprom, ScaleFactor2));
          OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.TarifEnergy1, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.TAR_EnergySumTar1"]).ValueEprom, ScaleFactor2));
        }
        if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDate))
        {
          OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.ReadingDate, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDate.ToString()]).ValueEprom));
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateEnergy))
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.EnergyDueDateValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateEnergy.ToString()]).ValueEprom, ScaleFactor1));
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.EnergyDueDateValue);
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateLastEnergy))
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.EnergyDueDateLastValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateLastEnergy.ToString()]).ValueEprom, ScaleFactor1));
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.EnergyDueDateLastValue);
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateCEnergy))
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.CEnergyDueDateValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateCEnergy.ToString()]).ValueEprom, ScaleFactor1));
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.CEnergyDueDateValue);
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateLastCEnergy))
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.CEnergyDueDateLastValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateLastCEnergy.ToString()]).ValueEprom, ScaleFactor1));
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.CEnergyDueDateLastValue);
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateVolume))
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.VolumeDueDateValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateVolume.ToString()]).ValueEprom, ScaleFactor3));
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.VolumeDueDateValue);
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateLastVolume))
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, new OverrideParameter(OverrideID.VolumeDueDateLastValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateLastVolume.ToString()]).ValueEprom, ScaleFactor3));
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.VolumeDueDateLastValue);
        }
        if (this.MyMeter.IsMeterResourceAvailable(MeterResources.Inp1On))
        {
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.Inp1IdNumber))
          {
            OverrideParameter TheOverrideParameter1 = new OverrideParameter(OverrideID.Input1IdNumber, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.Inp1IdNumber.ToString()]).ValueEprom);
            TheOverrideParameter1.SubDevice = 1;
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter1);
            if (this.MyMeter.IsMeterResourceAvailable(MeterResources.Inp1Type))
            {
              OverrideParameter TheOverrideParameter2 = new OverrideParameter(OverrideID.Input1Type, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.Inp1Type.ToString()]).ValueEprom);
              TheOverrideParameter2.SubDevice = 1;
              OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter2);
            }
            else
              OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input1Type);
          }
          else
          {
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input1IdNumber);
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input1Type);
          }
          Decimal ScaleFactor5 = (Decimal) Math.Pow(10.0, (double) MeterMath.InputUnits[this.MyMeter.MyMath.MyBaseSettings.Input1UnitIndex].AfterPointDigits);
          OverrideParameter TheOverrideParameter3 = new OverrideParameter(OverrideID.Input1ActualValue, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.In1Display"]).ValueEprom, ScaleFactor5);
          TheOverrideParameter3.SubDevice = 1;
          OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter3);
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateInp1Value))
          {
            OverrideParameter TheOverrideParameter4 = new OverrideParameter(OverrideID.Input1DueDateValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateInp1Value.ToString()]).ValueEprom, ScaleFactor5);
            TheOverrideParameter4.SubDevice = 1;
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter4);
          }
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input1DueDateValue);
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateInp1LastValue))
          {
            OverrideParameter TheOverrideParameter5 = new OverrideParameter(OverrideID.Input1DueDateLastValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateInp1LastValue.ToString()]).ValueEprom, ScaleFactor5);
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter5);
            TheOverrideParameter5.SubDevice = 1;
          }
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input1DueDateLastValue);
        }
        if (this.MyMeter.IsMeterResourceAvailable(MeterResources.Inp2On))
        {
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.Inp2IdNumber))
          {
            OverrideParameter TheOverrideParameter6 = new OverrideParameter(OverrideID.Input2IdNumber, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.Inp2IdNumber.ToString()]).ValueEprom);
            TheOverrideParameter6.SubDevice = 2;
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter6);
            if (this.MyMeter.IsMeterResourceAvailable(MeterResources.Inp2Type))
            {
              OverrideParameter TheOverrideParameter7 = new OverrideParameter(OverrideID.Input2Type, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.Inp2Type.ToString()]).ValueEprom);
              TheOverrideParameter7.SubDevice = 2;
              OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter7);
            }
            else
              OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input2Type);
          }
          else
          {
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input2IdNumber);
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input2Type);
          }
          Decimal ScaleFactor6 = (Decimal) Math.Pow(10.0, (double) MeterMath.InputUnits[this.MyMeter.MyMath.MyBaseSettings.Input2UnitIndex].AfterPointDigits);
          OverrideParameter TheOverrideParameter8 = new OverrideParameter(OverrideID.Input2ActualValue, (ulong) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.In2Display"]).ValueEprom, ScaleFactor6);
          TheOverrideParameter8.SubDevice = 2;
          OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter8);
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateInp2Value))
          {
            OverrideParameter TheOverrideParameter9 = new OverrideParameter(OverrideID.Input2DueDateValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateInp2Value.ToString()]).ValueEprom, ScaleFactor6);
            TheOverrideParameter9.SubDevice = 2;
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter9);
          }
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input2DueDateValue);
          if (this.MyMeter.IsMeterResourceAvailable(MeterResources.DueDateInp2LastValue))
          {
            OverrideParameter TheOverrideParameter10 = new OverrideParameter(OverrideID.Input2DueDateLastValue, (ulong) ((Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateInp2LastValue.ToString()]).ValueEprom, ScaleFactor6);
            TheOverrideParameter10.SubDevice = 2;
            OverrideParameter.ChangeOrAddOverrideParameter(this.OverridesList, TheOverrideParameter10);
          }
          else
            OverrideParameter.DeleteOverrideParameter(this.OverridesList, OverrideID.Input2DueDateLastValue);
        }
      }
      return true;
    }

    private string GetTrueStringValue(long LongValue, Decimal TheDevisor)
    {
      try
      {
        if (TheDevisor == 1M)
          return LongValue.ToString();
        string str = (1M / TheDevisor).ToString();
        if (str.StartsWith("0" + SystemValues.ZRDezimalSeparator))
        {
          int num1 = 2;
          while (num1 < str.Length && str[num1] == '0')
            ++num1;
          if (num1 != str.Length)
          {
            Decimal num2 = Decimal.Parse(str.Substring(0, num1) + "1");
            Decimal num3 = (Decimal) LongValue / TheDevisor;
            for (int index = 0; index < 100; ++index)
            {
              string s = num3.ToString();
              int num4 = s.IndexOf(SystemValues.ZRDezimalSeparator);
              if (num4 >= 0)
              {
                int length = num4 + num1;
                if (length < s.Length)
                  s = s.Substring(0, length);
              }
              if ((long) (Decimal.Parse(s) * TheDevisor) == LongValue)
                return s;
              num3 += num2;
            }
          }
        }
      }
      catch
      {
      }
      throw new ArgumentException("True string convertion error");
    }

    internal bool CopyBaseOverridesToParameter()
    {
      if (this.OverridesList == null)
        return true;
      OverrideParameter overrides1 = (OverrideParameter) this.OverridesList[(object) OverrideID.CustomID];
      if (overrides1 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.CustomerId.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides1.Value;
      }
      OverrideParameter overrides2 = (OverrideParameter) this.OverridesList[(object) OverrideID.Medium];
      if (overrides2 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusMedium"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides2.Value;
      }
      OverrideParameter overrides3 = (OverrideParameter) this.OverridesList[(object) OverrideID.CycleTimeStandard];
      if (overrides3 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Itr_RefreshTime"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides3.Value;
      }
      OverrideParameter overrides4 = (OverrideParameter) this.OverridesList[(object) OverrideID.CycleTimeFast];
      if (overrides4 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Itr_RefreshTimeShort"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides4.Value;
      }
      OverrideParameter overrides5 = (OverrideParameter) this.OverridesList[(object) OverrideID.CycleTimeDynamic];
      if (overrides5 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.RW_Typ_Konfiguration"];
        if (allParameter != null)
        {
          if ((overrides5.Value & 2UL) > 0UL)
            allParameter.ValueEprom |= (long) (uint) (int) this.MyMeter.MyCompiler.Includes[(object) "RW_KONFIG_DYN_VOL_CYCLE"];
          else
            allParameter.ValueEprom &= ~(long) (int) this.MyMeter.MyCompiler.Includes[(object) "RW_KONFIG_DYN_VOL_CYCLE"];
          if ((overrides5.Value & 4UL) > 0UL)
            allParameter.ValueEprom |= (long) (uint) (int) this.MyMeter.MyCompiler.Includes[(object) "RW_KONFIG_DYN_TEMP_CYCLE"];
          else
            allParameter.ValueEprom &= ~(long) (int) this.MyMeter.MyCompiler.Includes[(object) "RW_KONFIG_DYN_TEMP_CYCLE"];
        }
      }
      OverrideParameter overrides6 = (OverrideParameter) this.OverridesList[(object) OverrideID.HeatThresholdTemp];
      if (overrides6 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.ADC_HeatThreshold"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides6.Value;
      }
      OverrideParameter overrides7 = (OverrideParameter) this.OverridesList[(object) OverrideID.MimTempDiffSetup];
      if (overrides7 != null)
      {
        Parameter allParameter1 = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Energie_Konfiguration"];
        if (allParameter1 != null)
        {
          bool flag = false;
          long include = (long) (int) this.MyMeter.MyCompiler.Includes[(object) "ENG_KONFIG_DELTAT_NULL_SETZEN"];
          switch ((MinimalTempDiffSetup) overrides7.Value)
          {
            case MinimalTempDiffSetup.SetTo0:
              allParameter1.ValueEprom |= include;
              flag = true;
              break;
            case MinimalTempDiffSetup.SetToMin:
              allParameter1.ValueEprom &= ~include;
              flag = true;
              break;
            default:
              allParameter1.ValueEprom &= ~include;
              break;
          }
          if (flag)
          {
            OverrideParameter overrides8 = (OverrideParameter) this.OverridesList[(object) OverrideID.MinTempDiffPlusTemp];
            if (overrides8 != null)
            {
              Parameter allParameter2 = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Waerme_Grenze_DeltaT_min"];
              if (allParameter2 != null)
                allParameter2.ValueEprom = (long) overrides8.Value;
            }
            OverrideParameter overrides9 = (OverrideParameter) this.OverridesList[(object) OverrideID.MinTempDiffMinusTemp];
            if (overrides9 != null)
            {
              Parameter allParameter3 = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Kaelte_Grenze_DeltaT_min"];
              if (allParameter3 != null)
                allParameter3.ValueEprom = (long) overrides9.Value;
            }
          }
          else
          {
            Parameter allParameter4 = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Waerme_Grenze_DeltaT_min"];
            if (allParameter4 != null)
              allParameter4.ValueEprom = 0L;
            Parameter allParameter5 = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Kaelte_Grenze_DeltaT_min"];
            if (allParameter5 != null)
              allParameter5.ValueEprom = 0L;
          }
        }
      }
      OverrideParameter overrides10 = (OverrideParameter) this.OverridesList[(object) OverrideID.FixedTempSetup];
      if (overrides10 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Energie_Konfiguration"];
        allParameter.ValueEprom &= ~(long) (int) this.MyMeter.MyCompiler.Includes[(object) "ENG_KONFIG_TEMP_VL_FEST"];
        allParameter.ValueEprom &= ~(long) (int) this.MyMeter.MyCompiler.Includes[(object) "ENG_KONFIG_TEMP_RL_FEST"];
        if (allParameter != null)
        {
          switch ((FixedTempSetup) overrides10.Value)
          {
            case FixedTempSetup.Flow:
              allParameter.ValueEprom = (long) ((int) allParameter.ValueEprom | (int) this.MyMeter.MyCompiler.Includes[(object) "ENG_KONFIG_TEMP_VL_FEST"]);
              break;
            case FixedTempSetup.Return:
              allParameter.ValueEprom = (long) ((int) allParameter.ValueEprom | (int) this.MyMeter.MyCompiler.Includes[(object) "ENG_KONFIG_TEMP_RL_FEST"]);
              break;
          }
        }
      }
      OverrideParameter overrides11 = (OverrideParameter) this.OverridesList[(object) OverrideID.FixedTempValue];
      if (overrides11 != null)
        ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Feste_Fuehlertemperatur"]).ValueEprom = (long) overrides11.Value;
      OverrideParameter overrides12 = (OverrideParameter) this.OverridesList[(object) OverrideID.TarifFunction];
      if (overrides12 != null)
      {
        ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.TAR_Setup"]).ValueEprom = (long) overrides12.Value;
        OverrideParameter overrides13 = (OverrideParameter) this.OverridesList[(object) OverrideID.TarifRefTemp];
        if (overrides13 != null)
          ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.TAR_RefTemp"]).ValueEprom = (long) overrides13.Value;
      }
      OverrideParameter overrides14 = (OverrideParameter) this.OverridesList[(object) OverrideID.MBusAddress];
      if (overrides14 != null)
        ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.MBu_Address"]).ValueEprom = (long) (byte) overrides14.Value;
      OverrideParameter overrides15 = (OverrideParameter) this.OverridesList[(object) OverrideID.MBusIdentificationNo];
      if (overrides15 != null)
        ((Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusSerialNr"]).ValueEprom = (long) overrides15.Value;
      OverrideParameter overrides16 = (OverrideParameter) this.OverridesList[(object) OverrideID.Baudrate];
      if (overrides16 != null)
        this.MyMeter.SetBaudrate((int) overrides16.Value);
      OverrideParameter overrides17 = (OverrideParameter) this.OverridesList[(object) OverrideID.IO_Functions];
      if (overrides17 != null)
      {
        this.MyMeter.InOut1Function = (InOutFunctions) ((long) overrides17.Value & 15L);
        this.MyMeter.InOut2Function = (InOutFunctions) ((long) overrides17.Value & 240L);
      }
      OverrideParameter overrides18 = (OverrideParameter) this.OverridesList[(object) OverrideID.EndOfBattery];
      if (overrides18 != null)
      {
        object obj = this.MyMeter.AllParametersByResource[(object) MeterResources.EndOfBattery.ToString()];
        if (obj != null)
          ((Parameter) obj).ValueEprom = (long) ZR_Calendar.Cal_GetMeterTime(new DateTime(((DateTime) overrides18.ParameterValue).Year, 12, 31, 23, 59, 0));
      }
      OverrideParameter overrides19 = (OverrideParameter) this.OverridesList[(object) OverrideID.EndOfCalibration];
      if (overrides19 != null)
      {
        object obj = this.MyMeter.AllParametersByResource[(object) MeterResources.EndOfCalibration.ToString()];
        if (obj != null)
          ((Parameter) obj).ValueEprom = (long) ZR_Calendar.Cal_GetMeterTime(new DateTime((int) overrides19.Value, 12, 31, 23, 59, 0));
      }
      return true;
    }

    internal bool GarantTypeSpecOverrides()
    {
      if (this.OverridesList == null)
        return true;
      MeterResources meterResources;
      if ((OverrideParameter) this.OverridesList[(object) OverrideID.BaseConfig] == null)
      {
        OverrideParameter overrideParameter = new OverrideParameter(OverrideID.BaseConfig);
        this.OverridesList.Add((object) overrideParameter.ParameterID, (object) overrideParameter);
        SortedList availableMeterResouces = this.MyMeter.AvailableMeterResouces;
        meterResources = MeterResources.CEnergy;
        string key = meterResources.ToString();
        overrideParameter.Value = availableMeterResouces[(object) key] == null ? 1UL : 5UL;
      }
      if ((OverrideParameter) this.OverridesList[(object) OverrideID.TarifFunction] == null)
      {
        object allParameter = this.MyMeter.AllParameters[(object) "DefaultFunction.TAR_Setup"];
        if (allParameter != null)
        {
          OverrideParameter overrideParameter = new OverrideParameter(OverrideID.TarifFunction, (ulong) ((Parameter) allParameter).ValueEprom);
          this.OverridesList.Add((object) overrideParameter.ParameterID, (object) overrideParameter);
        }
      }
      if ((OverrideParameter) this.OverridesList[(object) OverrideID.ModuleType] == null)
      {
        OverrideParameter overrideParameter = new OverrideParameter(OverrideID.ModuleType);
        this.OverridesList.Add((object) overrideParameter.ParameterID, (object) overrideParameter);
        SortedList availableMeterResouces1 = this.MyMeter.AvailableMeterResouces;
        meterResources = MeterResources.Inp2On;
        string key1 = meterResources.ToString();
        int num;
        if (availableMeterResouces1[(object) key1] == null)
        {
          SortedList availableMeterResouces2 = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.EnToOut1;
          string key2 = meterResources.ToString();
          if (availableMeterResouces2[(object) key2] == null)
          {
            SortedList neadedMeterResources = this.MyMeter.NeadedMeterResources;
            meterResources = MeterResources.MBus;
            string key3 = meterResources.ToString();
            num = neadedMeterResources[(object) key3] != null ? 1 : 0;
            goto label_13;
          }
        }
        num = 1;
label_13:
        if (num != 0)
          overrideParameter.Value = 31UL;
      }
      if ((OverrideParameter) this.OverridesList[(object) OverrideID.IO_Functions] == null)
      {
        OverrideParameter overrideParameter = new OverrideParameter(OverrideID.IO_Functions);
        this.OverridesList.Add((object) overrideParameter.ParameterID, (object) overrideParameter);
        overrideParameter.Value = 0UL;
        SortedList neadedMeterResources1 = this.MyMeter.NeadedMeterResources;
        meterResources = MeterResources.Inp1;
        string key4 = meterResources.ToString();
        if (neadedMeterResources1[(object) key4] != null)
        {
          overrideParameter.Value += 2UL;
        }
        else
        {
          SortedList neadedMeterResources2 = this.MyMeter.NeadedMeterResources;
          meterResources = MeterResources.Out1;
          string key5 = meterResources.ToString();
          if (neadedMeterResources2[(object) key5] != null)
          {
            SortedList availableMeterResouces = this.MyMeter.AvailableMeterResouces;
            meterResources = MeterResources.EnToOut1;
            string key6 = meterResources.ToString();
            if (availableMeterResouces[(object) key6] != null)
              overrideParameter.Value += 3UL;
            else
              ++overrideParameter.Value;
          }
          else
            ++overrideParameter.Value;
        }
        SortedList neadedMeterResources3 = this.MyMeter.NeadedMeterResources;
        meterResources = MeterResources.Inp2;
        string key7 = meterResources.ToString();
        if (neadedMeterResources3[(object) key7] != null)
        {
          overrideParameter.Value += 32UL;
        }
        else
        {
          SortedList neadedMeterResources4 = this.MyMeter.NeadedMeterResources;
          meterResources = MeterResources.Out2;
          string key8 = meterResources.ToString();
          if (neadedMeterResources4[(object) key8] != null)
          {
            SortedList availableMeterResouces3 = this.MyMeter.AvailableMeterResouces;
            meterResources = MeterResources.VolToOut2;
            string key9 = meterResources.ToString();
            if (availableMeterResouces3[(object) key9] != null)
            {
              overrideParameter.Value += 64UL;
            }
            else
            {
              SortedList availableMeterResouces4 = this.MyMeter.AvailableMeterResouces;
              meterResources = MeterResources.EnToOut2;
              string key10 = meterResources.ToString();
              if (availableMeterResouces4[(object) key10] != null)
              {
                overrideParameter.Value += 80UL;
              }
              else
              {
                SortedList availableMeterResouces5 = this.MyMeter.AvailableMeterResouces;
                meterResources = MeterResources.CEnToOut2;
                string key11 = meterResources.ToString();
                if (availableMeterResouces5[(object) key11] != null)
                  overrideParameter.Value += 80UL;
                else
                  overrideParameter.Value += 16UL;
              }
            }
          }
          else
            overrideParameter.Value += 16UL;
        }
      }
      return true;
    }

    internal bool ChangeResourcesFromOverrides()
    {
      if (this.MyMeter.MyHandler.ExtendedTypeEditMode || this.OverridesList == null)
        return true;
      int num1 = 0;
      OverrideParameter overrides1 = (OverrideParameter) this.OverridesList[(object) OverrideID.BaseConfig];
      MeterResources meterResources;
      if (overrides1 != null)
      {
        ++num1;
        if (!(OverrideParameter.BaseConfigTable[(int) overrides1.Value].HeatAndCooling | OverrideParameter.BaseConfigTable[(int) overrides1.Value].Cooling))
        {
          SortedList availableMeterResouces = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.CEnergy;
          string key = meterResources.ToString();
          availableMeterResouces.Remove((object) key);
        }
      }
      OverrideParameter overrides2 = (OverrideParameter) this.OverridesList[(object) OverrideID.TarifFunction];
      if (overrides2 != null)
      {
        ++num1;
        if ((TarifSetup) overrides2.ParameterValue == TarifSetup.OFF)
        {
          SortedList availableMeterResouces = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.TAR_Energy;
          string key = meterResources.ToString();
          availableMeterResouces.Remove((object) key);
        }
      }
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      string empty3 = string.Empty;
      OverrideParameter overrides3 = (OverrideParameter) this.OverridesList[(object) OverrideID.ModuleType];
      if (overrides3 != null)
      {
        ++num1;
        ModuleTypeValues moduleTypeValues1 = (ModuleTypeValues) overrides3.Value;
        if (moduleTypeValues1 != 0)
        {
          this.MyMeter.AvailableMeterResouces.Remove((object) ModuleTypeValues.MBus.ToString());
          this.MyMeter.AvailableMeterResouces.Remove((object) ModuleTypeValues.ZRBus.ToString());
          this.MyMeter.AvailableMeterResouces.Remove((object) ModuleTypeValues.BusMask.ToString());
          ModuleTypeValues moduleTypeValues2 = moduleTypeValues1 & ModuleTypeValues.BusMask;
          string str1 = moduleTypeValues2.ToString();
          string str2 = str1;
          moduleTypeValues2 = ModuleTypeValues.NoValue;
          string str3 = moduleTypeValues2.ToString();
          if (str2 != str3)
          {
            MeterResource meterResource = new MeterResource(str1, (ushort) 0);
            this.MyMeter.AvailableMeterResouces.Add((object) str1, (object) meterResource);
          }
          SortedList availableMeterResouces1 = this.MyMeter.AvailableMeterResouces;
          moduleTypeValues2 = ModuleTypeValues.IO1Mask;
          string key1 = moduleTypeValues2.ToString();
          availableMeterResouces1.Remove((object) key1);
          SortedList availableMeterResouces2 = this.MyMeter.AvailableMeterResouces;
          moduleTypeValues2 = ModuleTypeValues.Inp1;
          string key2 = moduleTypeValues2.ToString();
          availableMeterResouces2.Remove((object) key2);
          SortedList availableMeterResouces3 = this.MyMeter.AvailableMeterResouces;
          moduleTypeValues2 = ModuleTypeValues.Out1;
          string key3 = moduleTypeValues2.ToString();
          availableMeterResouces3.Remove((object) key3);
          moduleTypeValues2 = moduleTypeValues1 & ModuleTypeValues.IO1Mask;
          empty2 = moduleTypeValues2.ToString();
          string str4 = empty2;
          moduleTypeValues2 = ModuleTypeValues.NoValue;
          string str5 = moduleTypeValues2.ToString();
          if (str4 != str5)
          {
            MeterResource meterResource = new MeterResource(empty2, (ushort) 0);
            this.MyMeter.AvailableMeterResouces.Add((object) empty2, (object) meterResource);
          }
          SortedList availableMeterResouces4 = this.MyMeter.AvailableMeterResouces;
          moduleTypeValues2 = ModuleTypeValues.IO2Mask;
          string key4 = moduleTypeValues2.ToString();
          availableMeterResouces4.Remove((object) key4);
          SortedList availableMeterResouces5 = this.MyMeter.AvailableMeterResouces;
          moduleTypeValues2 = ModuleTypeValues.Inp2;
          string key5 = moduleTypeValues2.ToString();
          availableMeterResouces5.Remove((object) key5);
          SortedList availableMeterResouces6 = this.MyMeter.AvailableMeterResouces;
          moduleTypeValues2 = ModuleTypeValues.Out2;
          string key6 = moduleTypeValues2.ToString();
          availableMeterResouces6.Remove((object) key6);
          moduleTypeValues2 = moduleTypeValues1 & ModuleTypeValues.IO2Mask;
          empty3 = moduleTypeValues2.ToString();
          string str6 = empty3;
          moduleTypeValues2 = ModuleTypeValues.NoValue;
          string str7 = moduleTypeValues2.ToString();
          if (str6 != str7)
          {
            MeterResource meterResource = new MeterResource(empty3, (ushort) 0);
            this.MyMeter.AvailableMeterResouces.Add((object) empty3, (object) meterResource);
          }
        }
      }
      OverrideParameter overrides4 = (OverrideParameter) this.OverridesList[(object) OverrideID.IO_Functions];
      if (overrides4 != null)
      {
        this.RestrictParameterFromModuleRessources(overrides4, empty2, empty3);
        int num2 = num1 + 1;
        this.MyMeter.InOut1Function = (InOutFunctions) ((long) overrides4.Value & 15L);
        this.MyMeter.InOut2Function = (InOutFunctions) ((long) overrides4.Value & 240L);
        if (this.MyMeter.InOut1Function != InOutFunctions.IO1_Input)
        {
          SortedList availableMeterResouces7 = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.Inp1On;
          string key7 = meterResources.ToString();
          availableMeterResouces7.Remove((object) key7);
          SortedList availableMeterResouces8 = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.DueDateInp1Value;
          string key8 = meterResources.ToString();
          availableMeterResouces8.Remove((object) key8);
          SortedList availableMeterResouces9 = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.DueDateInp1LastValue;
          string key9 = meterResources.ToString();
          availableMeterResouces9.Remove((object) key9);
          if (this.MyMeter.InOut1Function == InOutFunctions.IO1_Off)
          {
            SortedList availableMeterResouces10 = this.MyMeter.AvailableMeterResouces;
            meterResources = MeterResources.Out1On;
            string key10 = meterResources.ToString();
            availableMeterResouces10.Remove((object) key10);
          }
        }
        else
        {
          SortedList availableMeterResouces = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.Out1On;
          string key = meterResources.ToString();
          availableMeterResouces.Remove((object) key);
        }
        if (this.MyMeter.InOut2Function != InOutFunctions.IO2_Input)
        {
          SortedList availableMeterResouces11 = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.Inp2On;
          string key11 = meterResources.ToString();
          availableMeterResouces11.Remove((object) key11);
          SortedList availableMeterResouces12 = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.DueDateInp2Value;
          string key12 = meterResources.ToString();
          availableMeterResouces12.Remove((object) key12);
          SortedList availableMeterResouces13 = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.DueDateInp2LastValue;
          string key13 = meterResources.ToString();
          availableMeterResouces13.Remove((object) key13);
          if (this.MyMeter.InOut2Function == InOutFunctions.IO2_Off)
          {
            SortedList availableMeterResouces14 = this.MyMeter.AvailableMeterResouces;
            meterResources = MeterResources.Out2On;
            string key14 = meterResources.ToString();
            availableMeterResouces14.Remove((object) key14);
          }
        }
        else
        {
          SortedList availableMeterResouces = this.MyMeter.AvailableMeterResouces;
          meterResources = MeterResources.Out2On;
          string key = meterResources.ToString();
          availableMeterResouces.Remove((object) key);
        }
      }
      return true;
    }

    private void RestrictParameterFromModuleRessources(
      OverrideParameter TheOverrideParameter,
      string IO1RessourceString,
      string IO2RessourceString)
    {
      if (IO1RessourceString == ModuleTypeValues.NoValue.ToString())
        TheOverrideParameter.Value = TheOverrideParameter.Value & 18446744073709551600UL | 1UL;
      else if (IO1RessourceString == ModuleTypeValues.Inp1.ToString())
      {
        if (((long) TheOverrideParameter.Value & 15L) != 2L)
          TheOverrideParameter.Value = TheOverrideParameter.Value & 18446744073709551600UL | 1UL;
      }
      else if (IO1RessourceString == ModuleTypeValues.Out1.ToString() && ((long) TheOverrideParameter.Value & 15L) == 2L)
        TheOverrideParameter.Value = TheOverrideParameter.Value & 18446744073709551600UL | 1UL;
      if (IO2RessourceString == ModuleTypeValues.NoValue.ToString())
        TheOverrideParameter.Value = TheOverrideParameter.Value & 18446744073709551375UL | 16UL;
      else if (IO2RessourceString == ModuleTypeValues.Inp2.ToString())
      {
        if (((long) TheOverrideParameter.Value & 240L) == 32L)
          return;
        TheOverrideParameter.Value = TheOverrideParameter.Value & 18446744073709551375UL | 16UL;
      }
      else
      {
        if (!(IO2RessourceString == ModuleTypeValues.Out2.ToString()) || ((long) TheOverrideParameter.Value & 240L) != 32L)
          return;
        TheOverrideParameter.Value = TheOverrideParameter.Value & 18446744073709551375UL | 16UL;
      }
    }

    internal bool CopyValuesFromOverriedesToParameter()
    {
      if (this.MyMeter.MyMath.MyBaseSettings == null)
        return true;
      Decimal NewFactor1 = (Decimal) Math.Pow(10.0, (double) MeterMath.EnergyUnits[this.MyMeter.MyMath.MyBaseSettings.EnergyUnitIndex].AfterPointDigits);
      Decimal NewFactor2 = (Decimal) Math.Pow(2.0, (double) this.MyMeter.MyMath.MyBaseSettings.Energy_SumExpo) * NewFactor1;
      Decimal NewFactor3 = (Decimal) Math.Pow(10.0, (double) MeterMath.VolumeUnits[this.MyMeter.MyMath.MyBaseSettings.VolumeUnitIndex].AfterPointDigits);
      Decimal NewFactor4 = (Decimal) Math.Pow(2.0, (double) this.MyMeter.MyMath.MyBaseSettings.Vol_SumExpo) * NewFactor3;
      OverrideParameter overrides1 = (OverrideParameter) this.OverridesList[(object) OverrideID.EnergyActualValue];
      if (overrides1 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Waerme_EnergSum"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides1.GetParameterValue(NewFactor2);
      }
      OverrideParameter overrides2 = (OverrideParameter) this.OverridesList[(object) OverrideID.CEnergyActualValue];
      if (overrides2 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Kaelte_EnergSum"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides2.GetParameterValue(NewFactor2);
      }
      OverrideParameter overrides3 = (OverrideParameter) this.OverridesList[(object) OverrideID.VolumeActualValue];
      if (overrides3 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Vol_VolSum"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides3.GetParameterValue(NewFactor4);
      }
      OverrideParameter overrides4 = (OverrideParameter) this.OverridesList[(object) OverrideID.ReadingDate];
      if (overrides4 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDate.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides4.Value;
      }
      OverrideParameter overrides5 = (OverrideParameter) this.OverridesList[(object) OverrideID.EnergyDueDateValue];
      if (overrides5 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateEnergy.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides5.GetParameterValue(NewFactor1);
      }
      OverrideParameter overrides6 = (OverrideParameter) this.OverridesList[(object) OverrideID.EnergyDueDateLastValue];
      if (overrides6 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateLastEnergy.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides6.GetParameterValue(NewFactor1);
      }
      OverrideParameter overrides7 = (OverrideParameter) this.OverridesList[(object) OverrideID.CEnergyDueDateValue];
      if (overrides7 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateCEnergy.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides7.GetParameterValue(NewFactor1);
      }
      OverrideParameter overrides8 = (OverrideParameter) this.OverridesList[(object) OverrideID.CEnergyDueDateLastValue];
      if (overrides8 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateLastCEnergy.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides8.GetParameterValue(NewFactor1);
      }
      OverrideParameter overrides9 = (OverrideParameter) this.OverridesList[(object) OverrideID.VolumeDueDateValue];
      if (overrides9 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateVolume.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides9.GetParameterValue(NewFactor3);
      }
      OverrideParameter overrides10 = (OverrideParameter) this.OverridesList[(object) OverrideID.VolumeDueDateLastValue];
      if (overrides10 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateLastVolume.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides10.GetParameterValue(NewFactor3);
      }
      OverrideParameter overrides11 = (OverrideParameter) this.OverridesList[(object) OverrideID.TarifEnergy0];
      if (overrides11 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.TAR_EnergySumTar0"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides11.GetParameterValue(NewFactor2);
      }
      OverrideParameter overrides12 = (OverrideParameter) this.OverridesList[(object) OverrideID.TarifEnergy1];
      if (overrides12 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.TAR_EnergySumTar1"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides12.GetParameterValue(NewFactor2);
      }
      Decimal NewFactor5 = (Decimal) Math.Pow(10.0, (double) MeterMath.InputUnits[this.MyMeter.MyMath.MyBaseSettings.Input1UnitIndex].AfterPointDigits);
      OverrideParameter overrides13 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input1ActualValue];
      if (overrides13 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.In1Display"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides13.GetParameterValue(NewFactor5);
      }
      OverrideParameter overrides14 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input1DueDateValue];
      if (overrides14 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateInp1Value.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides14.GetParameterValue(NewFactor5);
      }
      OverrideParameter overrides15 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input1DueDateLastValue];
      if (overrides15 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateInp1LastValue.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides15.GetParameterValue(NewFactor5);
      }
      OverrideParameter overrides16 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input1IdNumber];
      if (overrides16 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.Inp1IdNumber.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides16.Value;
      }
      OverrideParameter overrides17 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input1Type];
      if (overrides17 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.Inp1Type.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides17.Value;
      }
      Decimal NewFactor6 = (Decimal) Math.Pow(10.0, (double) MeterMath.InputUnits[this.MyMeter.MyMath.MyBaseSettings.Input2UnitIndex].AfterPointDigits);
      OverrideParameter overrides18 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input2ActualValue];
      if (overrides18 != null)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.In2Display"];
        if (allParameter != null)
          allParameter.ValueEprom = (long) overrides18.GetParameterValue(NewFactor6);
      }
      OverrideParameter overrides19 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input2DueDateValue];
      if (overrides19 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateInp2Value.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides19.GetParameterValue(NewFactor6);
      }
      OverrideParameter overrides20 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input2DueDateLastValue];
      if (overrides20 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.DueDateInp2LastValue.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides20.GetParameterValue(NewFactor6);
      }
      OverrideParameter overrides21 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input2IdNumber];
      if (overrides21 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.Inp2IdNumber.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides21.Value;
      }
      OverrideParameter overrides22 = (OverrideParameter) this.OverridesList[(object) OverrideID.Input2Type];
      if (overrides22 != null)
      {
        Parameter parameter = (Parameter) this.MyMeter.AllParametersByResource[(object) MeterResources.Inp2Type.ToString()];
        if (parameter != null)
          parameter.ValueEprom = (long) overrides22.Value;
      }
      return true;
    }
  }
}


--- HandlerLists.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.HandlerLists
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections.Generic;

#nullable disable
namespace GMM_Handler
{
  internal class HandlerLists
  {
    internal static SortedList<string, byte> ConsumationDataParameters;
    internal static SortedList<string, byte> InputIdentData;
    internal static SortedList<string, byte> MBusIdentData;

    internal static void GarantVarsListExists()
    {
      if (HandlerLists.ConsumationDataParameters != null)
        return;
      HandlerLists.ConsumationDataParameters = new SortedList<string, byte>();
      HandlerLists.ConsumationDataParameters.Add("DefaultFunction.In1Display", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("DefaultFunction.In1DisplayHelp", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("DefaultFunction.In2Display", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("DefaultFunction.In2DisplayHelp", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("DefaultFunction.Kaelte_EnergSum", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("DefaultFunction.Vol_VolSum", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("DefaultFunction.Waerme_EnergSum", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("Energ_KaelteEnergDisplay", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("Energ_WaermeEnergDisplay", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("In1Counter", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("In2Counter", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("MaxFlowAndPower.LastHourEnergy", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("MaxFlowAndPower.LastHourVolume", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("MaxFlowAndPower.MaxFlow", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("MaxFlowAndPower.MaxFlowAbs", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("MaxFlowAndPower.MaxFlowTimePoint", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("MaxFlowAndPower.MaxPower", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("MaxFlowAndPower.MaxPowerAbs", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("MaxFlowAndPower.MaxPowerTimePoint", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("OldIn1Counter", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("OldIn2Counter", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("Out1Counter", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("Out2Counter", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("StichtagKomplett.Input1CounterAmStichtag", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("StichtagKomplett.Input2CounterAmStichtag", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("StichtagKomplett.KaelteEnergieAmStichtag", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("StichtagKomplett.VolumenAmStichtag", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("StichtagKomplett.WaermeEnergieAmStichtag", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("TAR_EnergyDisplayTar0", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("TAR_EnergyDisplayTar1", (byte) 0);
      HandlerLists.ConsumationDataParameters.Add("Vol_VolumenDisplay", (byte) 0);
      HandlerLists.InputIdentData = new SortedList<string, byte>();
      HandlerLists.InputIdentData.Add("Inp1_IdentNumber.Inp1DeviceType", (byte) 0);
      HandlerLists.InputIdentData.Add("Inp1_IdentNumber.Inp1SerialNumber", (byte) 0);
      HandlerLists.InputIdentData.Add("Inp2_IdentNumber.Inp2DeviceType", (byte) 0);
      HandlerLists.InputIdentData.Add("Inp2_IdentNumber.Inp2SerialNumber", (byte) 0);
      HandlerLists.InputIdentData.Add("Kundennummer.KundenNr", (byte) 0);
      HandlerLists.MBusIdentData = new SortedList<string, byte>();
      HandlerLists.MBusIdentData.Add("DefaultFunction.MBu_Address", (byte) 0);
    }
  }
}


--- HandlerWindow.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.HandlerWindow
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using CorporateDesign;
using GmmDbLib;
using StartupLib;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class HandlerWindow : Form
  {
    private bool WindowInitialised = false;
    internal string StartComponentName;
    private ZR_HandlerFunctions MyHandler;
    private Meter DiagnosticMeter;
    private byte[] MeterEEPromFromFile;
    private bool BreakLoop;
    private static string[] PastTempSensorVars = new string[48]
    {
      "DefaultFunction.n_ref_man_1",
      "DefaultFunction.n_ref_man_2",
      "DefaultFunction.n_ref_exp_1",
      "DefaultFunction.n_ref_exp_2",
      "DefaultFunction.v_cal_man_1",
      "DefaultFunction.v_cal_man_2",
      "DefaultFunction.v_cal_exp_1",
      "DefaultFunction.v_cal_exp_2",
      "DefaultFunction.o_cal_man_1",
      "DefaultFunction.o_cal_man_2",
      "DefaultFunction.o_cal_exp_1",
      "DefaultFunction.o_cal_exp_2",
      "DefaultFunction.tf_man_1",
      "DefaultFunction.tf_man_2",
      "DefaultFunction.tf_man_3",
      "DefaultFunction.tf_man_4",
      "DefaultFunction.tf_man_5",
      "DefaultFunction.tf_man_6",
      "DefaultFunction.kf_rl_man_1",
      "DefaultFunction.kf_rl_man_2",
      "DefaultFunction.kf_rl_man_3",
      "DefaultFunction.kf_rl_man_4",
      "DefaultFunction.kf_rl_man_5",
      "DefaultFunction.kf_rl_man_6",
      "DefaultFunction.kf_vl_man_1",
      "DefaultFunction.kf_vl_man_2",
      "DefaultFunction.kf_vl_man_3",
      "DefaultFunction.kf_vl_man_4",
      "DefaultFunction.kf_vl_man_5",
      "DefaultFunction.kf_vl_man_6",
      "DefaultFunction.tf_exp_1",
      "DefaultFunction.tf_exp_2",
      "DefaultFunction.tf_exp_3",
      "DefaultFunction.tf_exp_4",
      "DefaultFunction.tf_exp_5",
      "DefaultFunction.tf_exp_6",
      "DefaultFunction.kf_rl_exp_1",
      "DefaultFunction.kf_rl_exp_2",
      "DefaultFunction.kf_rl_exp_3",
      "DefaultFunction.kf_rl_exp_4",
      "DefaultFunction.kf_rl_exp_5",
      "DefaultFunction.kf_rl_exp_6",
      "DefaultFunction.kf_vl_exp_1",
      "DefaultFunction.kf_vl_exp_2",
      "DefaultFunction.kf_vl_exp_3",
      "DefaultFunction.kf_vl_exp_4",
      "DefaultFunction.kf_vl_exp_5",
      "DefaultFunction.kf_vl_exp_6"
    };
    private SortedList<string, long> PastData;
    private TypeAnalysis TheAnalysis;
    private ErrTypeAnalysis TheErrAnalysis;
    private IContainer components = (IContainer) null;
    private MenuStrip menuStrip1;
    private ToolStripMenuItem showToolStripMenuItem;
    private ToolStripMenuItem goToToolStripMenuItem;
    private ToolStripMenuItem globalMeterManagerToolStripMenuItem;
    private ToolStripMenuItem backToolStripMenuItem;
    private ToolStripMenuItem quitToolStripMenuItem;
    private ToolStripMenuItem serialBusToolStripMenuItem;
    private ToolStripMenuItem asyncComToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator1;
    private ToolStripMenuItem designerToolStripMenuItem;
    private ToolStripMenuItem workToolStripMenuItem;
    private Button buttonCancle;
    private Button buttonOk;
    private GroupBox groupBox1;
    private Label label1;
    private ComboBox comboBoxDiagnosticObject;
    private ToolStripMenuItem blockListToolStripMenuItem;
    private CheckBox checkBoxShowFunctionNumbers;
    private CheckBox checkBoxShowFunctionNames;
    private CheckBox checkBoxShowBlockTypes;
    private ToolStripMenuItem parametersToolStripMenuItem;
    private Label label2;
    private ComboBox comboBoxCompareObject;
    private ToolStripMenuItem epromDifferenceToolStripMenuItem;
    private CheckBox checkBoxShowDiffsOnly;
    private ToolStripMenuItem parameterDifferenceToolStripMenuItem;
    private ToolStripMenuItem epromParameterByAddressToolStripMenuItem;
    private ToolStripMenuItem ramParameterByAddressToolStripMenuItem;
    private ToolStripMenuItem blockListDifferencesToolStripMenuItem;
    private Label label3;
    private ComboBox comboBoxEquelFunction;
    private Label label4;
    private ComboBox comboBoxGetListSelection;
    private ToolStripMenuItem MenuItemIsEquelResult;
    private ToolStripMenuItem MenuItemGetListList;
    private ToolStripMenuItem MenuItemShowMeterResources;
    private ToolStripMenuItem MenuItemCloseMeter;
    private ToolStripMenuItem MenuItemRamTest;
    private Button buttonBreakLoop;
    private Panel panel1;
    private Panel panel2;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private TextBox textBoxStatus;
    private ToolStripMenuItem MenuItemGetRendomNumber;
    private ToolStripMenuItem MenuItemRepare;
    private GroupBox groupBoxVars;
    private Button buttonChangeData;
    private Label label7;
    private Label labelValueRam;
    private Label labelValueEProm;
    private TextBox textBoxNewValue;
    private TextBox textBoxValueRam;
    private TextBox textBoxValueEprom;
    private Button buttonWriteToRam;
    private Button buttonWriteToEprom;
    private Button buttonReadVar;
    private Label label8;
    private TextBox textBoxByteSize;
    private CheckBox checkBoxUseOnlyDefaultValues;
    private ToolStripMenuItem saveMeterToolStripMenuItem;
    private ToolStripMenuItem workMeterToolStripMenuItem;
    private ToolStripMenuItem dbMeterToolStripMenuItem;
    private ToolStripMenuItem typeMeterToolStripMenuItem;
    private ToolStripMenuItem readMeterToolStripMenuItem;
    private ToolStripMenuItem connectedMeterToolStripMenuItem;
    private ToolStripMenuItem testLoggerEntriesToolStripMenuItem;
    private ToolStripMenuItem areParametersEqualToDBoverridesToolStripMenuItem;
    private CheckBox checkBoxDisableChecks;
    private ToolStripMenuItem resetAllDataToolStripMenuItem;
    private ToolStripMenuItem dataToolStripMenuItem;
    private ToolStripMenuItem CopyTempSensorCalibrationToolStripMenuItem;
    private ToolStripMenuItem PastTempSensorCalibrationToolStripMenuItem;
    private ToolStripMenuItem typeAnalysisWindowToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator2;
    private ToolStripSeparator toolStripSeparator3;
    private CheckBox checkBoxReadWithoutBackup;
    private ToolStripMenuItem MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter;
    private ToolStripSeparator toolStripSeparator4;
    private ToolStripSeparator toolStripSeparator5;
    private ToolStripMenuItem MenuItemSetMaxValuesCritical;
    private ToolStripMenuItem MenuItemShowDeviceTimeEvents;
    private ToolStripMenuItem MenuItemDestroyBackupChecksum;
    private ToolStripMenuItem MenuItemErr8002Types;
    private CheckBox checkBoxIgnorIntervalMinutesRaster;
    private ListBox listBoxVariables;
    private ToolStripMenuItem MenuItemSetWriteProtectionAtClonedDevice;
    private ToolStripMenuItem blockListDifferencesEEPromDirectToolStripMenuItem;
    private ToolStripMenuItem fileToolStripMenuItem;
    private ToolStripMenuItem saveMeterEepromToFileToolStripMenuItem;
    private ToolStripMenuItem blockListDifferencesFromFoadedEepromToolStripMenuItem;
    private ToolStripMenuItem workMeterToolStripMenuItem1;
    private ToolStripMenuItem dbMeterToolStripMenuItem1;
    private ToolStripMenuItem typeMeterToolStripMenuItem1;
    private ToolStripMenuItem readMeterToolStripMenuItem1;
    private ToolStripMenuItem loadMeterEepromFromFileToolStripMenuItem;
    private OpenFileDialog openFileDialog1;
    private SaveFileDialog saveFileDialog1;
    private CheckBox checkBoxBackupForEachRead;
    private ToolStripMenuItem MenuItemIsEndTimeOk;

    public HandlerWindow(ZR_HandlerFunctions MyHandlerIn)
    {
      this.InitializeComponent();
      FormTranslatorSupport.TranslateWindow(Tg.GMM_HandlerWindow, (Form) this);
      this.MyHandler = MyHandlerIn;
      string[] names1 = Enum.GetNames(typeof (ZR_HandlerFunctions.MeterObjects));
      for (int index = 0; index < names1.Length; ++index)
      {
        this.comboBoxDiagnosticObject.Items.Add((object) names1[index]);
        this.comboBoxCompareObject.Items.Add((object) names1[index]);
      }
      foreach (object name in Enum.GetNames(typeof (ZR_HandlerFunctions.IsEqualFunctions)))
        this.comboBoxEquelFunction.Items.Add(name);
      string[] names2 = Enum.GetNames(typeof (ZR_HandlerFunctions.GetListFunctions));
      for (int index = 0; index < names2.Length; ++index)
      {
        this.comboBoxGetListSelection.Items.Add((object) names2[index]);
        this.listBoxVariables.Items.Add((object) names2[index]);
      }
      this.checkBoxDisableChecks.Checked = this.MyHandler.DisableChecks;
      this.checkBoxReadWithoutBackup.Checked = this.MyHandler.ReadWithoutBackup;
      this.checkBoxBackupForEachRead.Checked = this.MyHandler.BackupForEachReadInternal;
      this.checkBoxIgnorIntervalMinutesRaster.Checked = this.MyHandler.IgnoreIntervalMinutesRaster;
      this.WindowInitialised = true;
    }

    private void HandlerWindow_Load(object sender, EventArgs e)
    {
      this.StartComponentName = "";
      this.comboBoxCompareObject.SelectedIndex = 0;
      this.comboBoxDiagnosticObject.SelectedIndex = 1;
      this.comboBoxEquelFunction.SelectedIndex = 0;
      this.comboBoxGetListSelection.SelectedIndex = 0;
      this.checkBoxShowFunctionNames.Checked = this.MyHandler.MyInfoFlags.ShowFunctionNames;
      this.checkBoxShowFunctionNumbers.Checked = this.MyHandler.MyInfoFlags.ShowFunctionNumbers;
      this.checkBoxShowBlockTypes.Checked = this.MyHandler.MyInfoFlags.ShowBlockTypes;
      this.checkBoxShowDiffsOnly.Checked = this.MyHandler.MyInfoFlags.ShowDiffsOnly;
      if (this.MyHandler.MyMeters.WorkMeter != null)
      {
        this.DiagnosticMeter = this.MyHandler.MyMeters.WorkMeter;
        this.listBoxVariables.Items.Clear();
        for (int index = 0; index < this.DiagnosticMeter.AllParameters.Count; ++index)
          this.listBoxVariables.Items.Add((object) this.DiagnosticMeter.AllParameters.GetKey(index).ToString());
      }
      this.textBoxByteSize.Text = string.Empty;
      this.textBoxValueEprom.Text = string.Empty;
      this.textBoxValueRam.Text = string.Empty;
      this.textBoxNewValue.Text = string.Empty;
      this.checkBoxUseOnlyDefaultValues.Checked = this.MyHandler.UseOnlyDefaultValues;
      if (this.MyHandler.MyMeters.ReadMeter != null)
        this.comboBoxCompareObject.SelectedIndex = 0;
      else if (this.MyHandler.MyMeters.DbMeter != null)
      {
        this.comboBoxCompareObject.SelectedIndex = 3;
      }
      else
      {
        if (this.MyHandler.MyMeters.TypeMeter == null)
          return;
        this.comboBoxCompareObject.SelectedIndex = 2;
      }
    }

    private void buttonOk_Click(object sender, EventArgs e)
    {
      this.MyHandler.UseOnlyDefaultValues = this.checkBoxUseOnlyDefaultValues.Checked;
    }

    internal void InitStartMenu(string ComponentList)
    {
    }

    private void globalMeterManagerToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.StartComponentName = "GMM";
      this.Close();
    }

    private void backToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.StartComponentName = "";
      this.Close();
    }

    private void quitToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.StartComponentName = "Exit";
      this.Close();
    }

    private void designerToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.StartComponentName = "Designer";
      this.Close();
    }

    private void serialBusToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.StartComponentName = "DeviceCollector";
      this.Close();
    }

    private void asyncComToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.StartComponentName = "AsyncCom";
      this.Close();
    }

    private void blockListToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.SetInfoSelectionFlags();
      Meter TheMeter;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter))
        return;
      StringBuilder TheText = new StringBuilder();
      TheMeter.MyLinker.GetBlockListInfo(TheText);
      this.MyHandler.WriteAndShowFile("BlockList", TheText.ToString());
    }

    private void blockListDifferencesToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        this.SetInfoSelectionFlags();
        string SelectionString1 = this.comboBoxDiagnosticObject.SelectedItem.ToString();
        Meter TheMeter1;
        if (!this.MyHandler.GetMeterObject(SelectionString1, out TheMeter1))
          return;
        string SelectionString2 = this.comboBoxCompareObject.SelectedItem.ToString();
        Meter TheMeter2;
        if (!this.MyHandler.GetMeterObject(SelectionString2, out TheMeter2) || TheMeter2 == null)
          return;
        StringBuilder stringBuilder1 = new StringBuilder(SelectionString1 + ": ");
        StringBuilder stringBuilder2 = new StringBuilder(SelectionString2 + ": ");
        TheMeter1.MyLinker.GetBlockListInfo(stringBuilder1);
        TheMeter2.MyLinker.GetBlockListInfo(stringBuilder2);
        this.MyHandler.WriteFilesAndShowFileDifferences("BlockList", stringBuilder1, "BlockListCompare", stringBuilder2);
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("View diff", "Error on start viewer", true);
      }
    }

    private void blockListDifferencesEEPromDirectToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        this.SetInfoSelectionFlags();
        string SelectionString1 = this.comboBoxDiagnosticObject.SelectedItem.ToString();
        Meter TheMeter1;
        if (!this.MyHandler.GetMeterObject(SelectionString1, out TheMeter1))
          return;
        string SelectionString2 = this.comboBoxCompareObject.SelectedItem.ToString();
        Meter TheMeter2;
        if (!this.MyHandler.GetMeterObject(SelectionString2, out TheMeter2) || TheMeter2 == null)
          return;
        StringBuilder stringBuilder1 = new StringBuilder(SelectionString1 + ": ");
        StringBuilder stringBuilder2 = new StringBuilder(SelectionString2 + ": ");
        TheMeter1.MyLinker.GetBlockListInfo(stringBuilder1);
        TheMeter2.MyLinker.GetBlockListDiffInfo(stringBuilder1, stringBuilder2, TheMeter2.Eprom);
        this.MyHandler.WriteFilesAndShowFileDifferences("BlockList", stringBuilder1, "BlockListCompare", stringBuilder2);
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("View diff", "Error on start viewer", true);
      }
    }

    private void blockListDifferencesFromFoadedEepromToolStripMenuItem_Click(
      object sender,
      EventArgs e)
    {
      if (this.MeterEEPromFromFile == null)
        return;
      try
      {
        this.SetInfoSelectionFlags();
        string SelectionString = this.comboBoxDiagnosticObject.SelectedItem.ToString();
        Meter TheMeter;
        if (!this.MyHandler.GetMeterObject(SelectionString, out TheMeter))
          return;
        StringBuilder stringBuilder1 = new StringBuilder(SelectionString + ": ");
        StringBuilder stringBuilder2 = new StringBuilder("From loaded EEProm: ");
        TheMeter.MyLinker.GetBlockListInfo(stringBuilder1);
        TheMeter.MyLinker.GetBlockListDiffInfo(stringBuilder1, stringBuilder2, this.MeterEEPromFromFile);
        this.MyHandler.WriteFilesAndShowFileDifferences("BlockList", stringBuilder1, "BlockListCompare", stringBuilder2);
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("View diff", "Error on start viewer", true);
      }
    }

    private void parametersToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.SetInfoSelectionFlags();
      Meter TheMeter;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter))
        return;
      StringBuilder TheText = new StringBuilder();
      TheMeter.MyLinker.GetParameterInfo(TheText);
      this.MyHandler.WriteAndShowFile("Parameters", TheText.ToString());
    }

    private void SetInfoSelectionFlags()
    {
      this.MyHandler.MyInfoFlags.ShowFunctionNames = this.checkBoxShowFunctionNames.Checked;
      this.MyHandler.MyInfoFlags.ShowFunctionNumbers = this.checkBoxShowFunctionNumbers.Checked;
      this.MyHandler.MyInfoFlags.ShowBlockTypes = this.checkBoxShowBlockTypes.Checked;
      this.MyHandler.MyInfoFlags.ShowDiffsOnly = this.checkBoxShowDiffsOnly.Checked;
    }

    private void epromDifferenceToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.SetInfoSelectionFlags();
      Meter TheMeter1;
      Meter TheMeter2;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter1) || !this.MyHandler.GetMeterObject(this.comboBoxCompareObject.SelectedItem.ToString(), out TheMeter2))
        return;
      StringBuilder TheText = new StringBuilder();
      DataChecker.GetEpromDiffs(TheMeter1.Eprom, TheMeter2.Eprom, this.MyHandler.MyInfoFlags.ShowDiffsOnly, TheText);
      this.MyHandler.WriteAndShowFile("EPromDiffs", TheText.ToString());
    }

    private void parameterDifferenceToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.SetInfoSelectionFlags();
      Meter TheMeter1;
      Meter TheMeter2;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter1) || !this.MyHandler.GetMeterObject(this.comboBoxCompareObject.SelectedItem.ToString(), out TheMeter2) || TheMeter2 == null)
        return;
      StringBuilder TheText = new StringBuilder();
      DataChecker.GetParameterDiffs(TheMeter1.AllParameters, TheMeter2.AllParameters, TheText);
      this.MyHandler.WriteAndShowFile("ParameterDiffs", TheText.ToString());
    }

    private void epromParameterByAddressToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.SetInfoSelectionFlags();
      Meter TheMeter;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter))
        return;
      StringBuilder TheText = new StringBuilder();
      DataChecker.GetEpromParameterByAddress(TheMeter.AllEpromParametersByAddress, TheText);
      this.MyHandler.WriteAndShowFile("EpromParametersByAddress", TheText.ToString());
    }

    private void ramParameterByAddressToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.SetInfoSelectionFlags();
      Meter TheMeter;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter))
        return;
      StringBuilder TheText = new StringBuilder();
      DataChecker.GetRamParameterByAddress(TheMeter, TheText);
      this.MyHandler.WriteAndShowFile("RamParametersByAddress", TheText.ToString());
    }

    private void MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter_Click(
      object sender,
      EventArgs e)
    {
      this.SetInfoSelectionFlags();
      Meter TheMeter;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter))
        return;
      this.MyHandler.WriteAndShowFile("StaticDiffs", DataChecker.GetStaticDiffToExternalConnectedMeter(TheMeter));
    }

    private void MenuItemIsEquelResult_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.MyHandler.IsEqual((ZR_HandlerFunctions.IsEqualFunctions) Enum.Parse(typeof (ZR_HandlerFunctions.IsEqualFunctions), this.comboBoxEquelFunction.Items[this.comboBoxEquelFunction.SelectedIndex].ToString()), (ZR_HandlerFunctions.MeterObjects) Enum.Parse(typeof (ZR_HandlerFunctions.MeterObjects), this.comboBoxDiagnosticObject.Items[this.comboBoxDiagnosticObject.SelectedIndex].ToString()), (ZR_HandlerFunctions.MeterObjects) Enum.Parse(typeof (ZR_HandlerFunctions.MeterObjects), this.comboBoxCompareObject.Items[this.comboBoxCompareObject.SelectedIndex].ToString())))
        {
          int num1 = (int) GMM_MessageBox.ShowMessage("IsEqual result", "The objects are equal");
        }
        else
        {
          int num2 = (int) GMM_MessageBox.ShowMessage("IsEqual result", "The objects are not equal", true);
        }
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("IsEqual result", "Compare error", true);
      }
    }

    private void MenuItemGetListList_Click(object sender, EventArgs e)
    {
      try
      {
        string[] list = this.MyHandler.GetList((ZR_HandlerFunctions.GetListFunctions) Enum.Parse(typeof (ZR_HandlerFunctions.GetListFunctions), this.comboBoxGetListSelection.Items[this.comboBoxGetListSelection.SelectedIndex].ToString()), (ZR_HandlerFunctions.MeterObjects) Enum.Parse(typeof (ZR_HandlerFunctions.MeterObjects), this.comboBoxDiagnosticObject.Items[this.comboBoxDiagnosticObject.SelectedIndex].ToString()));
        if (list == null)
        {
          int num1 = (int) GMM_MessageBox.ShowMessage("GetList result", "No list available", true);
        }
        else
        {
          StringBuilder stringBuilder = new StringBuilder();
          for (int index = 0; index < list.Length; ++index)
            stringBuilder.AppendLine(list[index]);
          int num2 = (int) GMM_MessageBox.ShowMessage("GetList result", stringBuilder.ToString());
        }
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("GetList result", "Function error", true);
      }
    }

    private void MenuItemShowMeterResources_Click(object sender, EventArgs e)
    {
      Meter TheMeter;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter))
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("Meter resources", "Meter object not available", true);
      }
      else
      {
        StringBuilder TheText = new StringBuilder();
        if (!DataChecker.GetMeterResourcesList(TheMeter, TheText))
        {
          int num2 = (int) GMM_MessageBox.ShowMessage("Meter resources", "Resource data not available.", true);
        }
        else
          this.MyHandler.WriteAndShowFile("MeterResources", TheText.ToString());
      }
    }

    private void MenuItemCloseMeter_Click(object sender, EventArgs e)
    {
      if (this.MyHandler.MyMeters.WorkMeter == null)
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
      else
        this.MyHandler.MyMeters.SetMeterKey(0U);
    }

    private void MenuItemRamTest_Click(object sender, EventArgs e)
    {
      this.Cursor = Cursors.WaitCursor;
      if (!this.MyHandler.SerBus.SetEmergencyMode())
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("EPROM test", "Emergency mode error");
      }
      else
      {
        Random random = new Random();
        this.BreakLoop = false;
        while (!this.BreakLoop)
        {
          int num2 = random.Next(1500) + 32;
          int num3 = random.Next(500);
          int num4 = random.Next(30);
          this.textBoxStatus.Text = "StartAddress: 0x" + num2.ToString("x04") + "    Size: " + num3.ToString("d3") + "     Rate: " + num4.ToString() + "%";
          int StartAddress = num2 - 32;
          int num5 = num2 + num3 + 32;
          int num6 = num2 + num3 - 1;
          int length = num3 + 32 + 32;
          ByteField MemoryData1;
          if (!this.MyHandler.SerBus.ReadMemory(MemoryLocation.EEPROM, StartAddress, length, out MemoryData1))
          {
            int num7 = (int) GMM_MessageBox.ShowMessage("EPROM test", "Read error");
            break;
          }
          ByteField NewData = new ByteField(length);
          bool[] flagArray = new bool[length];
          for (int index = 0; index < MemoryData1.Count; ++index)
            NewData.Add(MemoryData1.Data[index]);
          for (int index = 32; index < 32 + num3; ++index)
          {
            if (random.Next(100) < num4)
            {
              flagArray[index] = true;
              NewData.Data[index] = (byte) random.Next((int) byte.MaxValue);
            }
          }
          if (!this.MyHandler.SerBus.UpdateMemory(MemoryLocation.EEPROM, StartAddress, MemoryData1, NewData))
          {
            int num8 = (int) GMM_MessageBox.ShowMessage("EPROM test", "Write error");
            break;
          }
          ByteField MemoryData2;
          if (!this.MyHandler.SerBus.ReadMemory(MemoryLocation.EEPROM, StartAddress, length, out MemoryData2))
          {
            int num9 = (int) GMM_MessageBox.ShowMessage("EPROM test", "Test read error");
            break;
          }
          for (int index1 = 0; index1 < MemoryData1.Count; ++index1)
          {
            if ((int) MemoryData2.Data[index1] != (int) NewData.Data[index1])
            {
              StringBuilder stringBuilder = new StringBuilder();
              stringBuilder.AppendLine("Test read error at address: " + (index1 + StartAddress).ToString("x04"));
              stringBuilder.AppendLine();
              for (int index2 = index1 - 32; index2 < index1 + 32; ++index2)
              {
                if (index2 < 0)
                  index2 = 0;
                stringBuilder.Append((index2 + StartAddress).ToString("x04") + ":");
                stringBuilder.Append(flagArray[index2]);
                stringBuilder.AppendLine();
              }
              int num10 = (int) GMM_MessageBox.ShowMessage("EPROM test", stringBuilder.ToString());
              goto label_29;
            }
          }
          Application.DoEvents();
        }
      }
label_29:
      this.textBoxStatus.Text = string.Empty;
      this.Cursor = Cursors.Default;
    }

    private void buttonBreakLoop_Click(object sender, EventArgs e) => this.BreakLoop = true;

    private void MenuItemGetRendomNumber_Click(object sender, EventArgs e)
    {
      try
      {
        long Key;
        MeterDBAccess.ValueTypes ValueType;
        if (!this.MyHandler.MyDataBaseAccess.GetDeviceKeys(this.MyHandler.MyMeters.WorkMeter.MyIdent.MeterID, out Key, out ValueType))
        {
          int num1 = (int) GMM_MessageBox.ShowMessage("Handler info", "No key");
        }
        else if (ValueType == MeterDBAccess.ValueTypes.GovernmentRandomNr)
        {
          int num2 = (int) GMM_MessageBox.ShowMessage("Handler info", "DatabaseKey: " + Key.ToString());
        }
        else
        {
          int num3 = (int) GMM_MessageBox.ShowMessage("Handler info", "MeterKey: " + Key.ToString());
        }
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("Handler", "Object error");
      }
    }

    private void listBoxVariables_SelectedIndexChanged_1(object sender, EventArgs e)
    {
      this.GetNewVarData();
    }

    private void buttonReadVar_Click(object sender, EventArgs e) => this.GetNewVarData();

    private void GetNewVarData()
    {
      Parameter activeParameter = this.GetActiveParameter();
      if (activeParameter == null)
        return;
      if (activeParameter.ExistOnEprom)
        this.labelValueEProm.Text = "Value EPROM (0x" + activeParameter.Address.ToString("x04") + ")";
      else
        this.labelValueEProm.Text = "Value EPROM (not available)";
      if (activeParameter.ExistOnCPU)
        this.labelValueRam.Text = "Value RAM (0x" + activeParameter.AddressCPU.ToString("x04") + ")";
      else
        this.labelValueRam.Text = "Value RAM (not available)";
      this.textBoxByteSize.Text = activeParameter.Size.ToString();
      this.panel1.Enabled = false;
      this.textBoxValueRam.Text = "---";
      if (activeParameter.ExistOnCPU && this.DiagnosticMeter != null && this.DiagnosticMeter.MyCommunication != null)
      {
        if (!this.DiagnosticMeter.MyCommunication.ReadParameterValue(activeParameter, MemoryLocation.RAM))
        {
          this.textBoxValueRam.Text = "???";
          int num = (int) GMM_MessageBox.ShowMessage("Hander message", "RAM: read error", true);
        }
        else
          this.textBoxValueRam.Text = this.ParameterString(activeParameter.ValueCPU, activeParameter.Size);
      }
      if (activeParameter.ExistOnEprom)
        this.textBoxValueEprom.Text = this.ParameterString(activeParameter.ValueEprom, activeParameter.Size);
      else
        this.textBoxValueEprom.Text = "---";
      this.panel1.Enabled = true;
    }

    private string ParameterString(long Value, int ByteSize)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(Value.ToString());
      stringBuilder.Append(" = 0x");
      stringBuilder.Append(Value.ToString("x"));
      if (ByteSize == 4)
      {
        DateTime dateTime = ZR_Calendar.Cal_GetDateTime((uint) Value);
        stringBuilder.Append(" = '");
        stringBuilder.Append(dateTime.ToShortDateString());
        stringBuilder.Append(" ");
        stringBuilder.Append(dateTime.ToString("HH:mm:ss"));
        stringBuilder.Append("'");
      }
      return stringBuilder.ToString();
    }

    private void buttonChangeData_Click(object sender, EventArgs e) => this.SetEpromData();

    private bool SetEpromData()
    {
      long TheData;
      if (!this.GetData(out TheData))
        return false;
      Parameter activeParameter = this.GetActiveParameter();
      if (activeParameter == null)
        return false;
      if (!activeParameter.ExistOnEprom)
      {
        int num = (int) GMM_MessageBox.ShowMessage("Handler message", "No eprom value available");
        return false;
      }
      activeParameter.ValueEprom = TheData;
      activeParameter.UpdateByteList();
      return true;
    }

    private void buttonWriteToEprom_Click(object sender, EventArgs e)
    {
      if (!this.SetEpromData())
        return;
      Parameter activeParameter = this.GetActiveParameter();
      if (activeParameter == null)
        return;
      this.panel1.Enabled = false;
      this.DiagnosticMeter.MyCommunication.WriteParameterValue(activeParameter, MemoryLocation.EEPROM);
      this.panel1.Enabled = true;
    }

    private void buttonWriteToRam_Click(object sender, EventArgs e)
    {
      long TheData;
      if (!this.GetData(out TheData))
        return;
      Parameter activeParameter = this.GetActiveParameter();
      if (activeParameter == null)
        return;
      if (!activeParameter.ExistOnCPU)
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("Handler message", "No ram value available");
      }
      else
      {
        activeParameter.ValueCPU = TheData;
        this.panel1.Enabled = false;
        if (!this.DiagnosticMeter.MyCommunication.WriteParameterValue(activeParameter, MemoryLocation.RAM))
        {
          int num2 = (int) GMM_MessageBox.ShowMessage("Hander message", "Write error", true);
        }
        this.panel1.Enabled = true;
      }
    }

    private Parameter GetActiveParameter()
    {
      if (this.DiagnosticMeter == null || this.listBoxVariables.SelectedItem == null)
        return (Parameter) null;
      string key = this.listBoxVariables.SelectedItem.ToString();
      return key.Length > 0 ? (Parameter) this.DiagnosticMeter.AllParameters[(object) key] : (Parameter) null;
    }

    private bool GetData(out long TheData)
    {
      TheData = 0L;
      try
      {
        this.textBoxNewValue.Text.Trim();
        if (this.textBoxNewValue.Text.IndexOf('.') > 0)
        {
          DateTime TheTime = DateTime.Parse(this.textBoxNewValue.Text);
          TheData = (long) ZR_Calendar.Cal_GetMeterTime(TheTime);
        }
        else
          TheData = !this.textBoxNewValue.Text.StartsWith("0x") ? long.Parse(this.textBoxNewValue.Text) : long.Parse(this.textBoxNewValue.Text.Substring(2), NumberStyles.HexNumber);
        return true;
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("Handler message", "Illegal data", true);
        return false;
      }
    }

    private void MenuItemRepare_Click(object sender, EventArgs e)
    {
      this.MyHandler.MyMeters.RepareAndCompress();
    }

    private void workMeterToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.MyHandler.MyMeters.SavedMeter = this.MyHandler.MyMeters.WorkMeter;
    }

    private void dbMeterToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.MyHandler.MyMeters.SavedMeter = this.MyHandler.MyMeters.DbMeter;
    }

    private void typeMeterToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.MyHandler.MyMeters.SavedMeter = this.MyHandler.MyMeters.TypeMeter;
    }

    private void readMeterToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.MyHandler.MyMeters.SavedMeter = this.MyHandler.MyMeters.ReadMeter;
    }

    private void connectedMeterToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.MyHandler.MyMeters.SavedMeter = this.MyHandler.MyMeters.ConnectedMeter;
    }

    private void testLoggerEntriesToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (DataChecker.IsLoggerEqualToTable(this.DiagnosticMeter))
        {
          int num = (int) GMM_MessageBox.ShowMessage("Handler message", "Alle daten sind gleich");
          return;
        }
      }
      catch
      {
      }
      int num1 = (int) GMM_MessageBox.ShowMessage("Handler message", "Die Logger Daten sind verschieden", true);
    }

    private void areParametersEqualToDBoverridesToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (DataChecker.AreOverridesEqualToDatabase(this.DiagnosticMeter))
        {
          int num = (int) GMM_MessageBox.ShowMessage("Handler message", "All checked data are ok");
          return;
        }
      }
      catch
      {
      }
      int num1 = (int) GMM_MessageBox.ShowMessage("Handler message", "The data are inconsistent", true);
    }

    private void MenuItemIsEndTimeOk_Click(object sender, EventArgs e)
    {
      if (!this.MyHandler.GetMeterObject(this.comboBoxCompareObject.SelectedItem.ToString(), out Meter _))
        return;
      string Info = "Calculation Error";
      try
      {
        if (DataChecker.IsEndTimeOk(this.DiagnosticMeter, out Info))
        {
          int num = (int) GMM_MessageBox.ShowMessage("Handler message", "All times ok: " + Info);
          return;
        }
      }
      catch
      {
      }
      int num1 = (int) GMM_MessageBox.ShowMessage("Handler message", "Times not ok: " + Info, true);
    }

    private void checkBoxDisableChecks_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.WindowInitialised)
        return;
      this.MyHandler.DisableChecks = this.checkBoxDisableChecks.Checked;
      this.MyHandler.checksumErrorsAsWarning = this.checkBoxDisableChecks.Checked;
    }

    private void checkBoxReadWithoutBackup_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.WindowInitialised)
        return;
      this.MyHandler.ReadWithoutBackup = this.checkBoxReadWithoutBackup.Checked;
    }

    private void checkBoxBackupForEachRead_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.WindowInitialised)
        return;
      this.MyHandler.BackupForEachReadInternal = this.checkBoxBackupForEachRead.Checked;
    }

    private void checkBoxIgnorIntervalMinutesRaster_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.WindowInitialised)
        return;
      this.MyHandler.IgnoreIntervalMinutesRaster = this.checkBoxIgnorIntervalMinutesRaster.Checked;
    }

    private void resetAllDataToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.MyHandler.ChangeMeterData(new List<Parameter.ParameterGroups>()
      {
        Parameter.ParameterGroups.CONSUMATION,
        Parameter.ParameterGroups.EXTERNAL_IDENT
      });
    }

    private void CopyTempSensorCalibrationToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.MyHandler.MyMeters.WorkMeter == null)
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("Handler", "No Data");
      }
      else
      {
        try
        {
          this.PastData = new SortedList<string, long>();
          for (int index = 0; index < HandlerWindow.PastTempSensorVars.Length; ++index)
          {
            Parameter allParameter = (Parameter) this.MyHandler.MyMeters.WorkMeter.AllParameters[(object) HandlerWindow.PastTempSensorVars[index]];
            this.PastData.Add(HandlerWindow.PastTempSensorVars[index], allParameter.ValueEprom);
          }
          this.PastTempSensorCalibrationToolStripMenuItem.Enabled = true;
        }
        catch
        {
          int num2 = (int) GMM_MessageBox.ShowMessage("Handler", "Copy error", true);
          return;
        }
        int num3 = (int) GMM_MessageBox.ShowMessage("Handler", "Copy ok");
      }
    }

    private void PastTempSensorCalibrationToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.MyHandler.MyMeters.WorkMeter == null)
      {
        int num1 = (int) GMM_MessageBox.ShowMessage("Handler", "No Data");
      }
      else
      {
        try
        {
          for (int index = 0; index < HandlerWindow.PastTempSensorVars.Length; ++index)
          {
            Parameter allParameter = (Parameter) this.MyHandler.MyMeters.WorkMeter.AllParameters[(object) HandlerWindow.PastTempSensorVars[index]];
            allParameter.ValueEprom = this.PastData[HandlerWindow.PastTempSensorVars[index]];
            allParameter.UpdateByteList();
          }
        }
        catch
        {
          int num2 = (int) GMM_MessageBox.ShowMessage("Handler", "Past error", true);
          return;
        }
        int num3 = (int) GMM_MessageBox.ShowMessage("Handler", "Past ok");
      }
    }

    private void typeAnalysisWindowToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.TheAnalysis == null)
        this.TheAnalysis = new TypeAnalysis(this.MyHandler);
      int num = (int) this.TheAnalysis.ShowDialog();
    }

    private void MenuItemErr8002Types_Click(object sender, EventArgs e)
    {
      if (this.TheErrAnalysis == null)
        this.TheErrAnalysis = new ErrTypeAnalysis(this.MyHandler);
      int num = (int) this.TheErrAnalysis.ShowDialog();
    }

    private void MenuItemSetMaxValuesCritical_Click(object sender, EventArgs e)
    {
      this.SetInfoSelectionFlags();
      Meter TheMeter;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter))
        return;
      DataChecker.SetAllMaxValuesCritical(TheMeter);
    }

    private void MenuItemShowDeviceTimeEvents_Click(object sender, EventArgs e)
    {
      this.SetInfoSelectionFlags();
      Meter TheMeter;
      if (!this.MyHandler.GetMeterObject(this.comboBoxDiagnosticObject.SelectedItem.ToString(), out TheMeter))
        return;
      int num = (int) GMM_MessageBox.ShowMessage("Time events", DataChecker.GetAllEventTimes(TheMeter));
    }

    private void MenuItemDestroyBackupChecksum_Click(object sender, EventArgs e)
    {
      if (this.MyHandler.MyMeters.WorkMeter == null || this.MyHandler.MyMeters.WorkMeter.MyCommunication == null)
        return;
      int index = this.MyHandler.MyMeters.WorkMeter.AllParameters.IndexOfKey((object) "EEP_Header.EEP_HEADER_BackupChecksum");
      if (index <= 0)
        return;
      Parameter byIndex = (Parameter) this.MyHandler.MyMeters.WorkMeter.AllParameters.GetByIndex(index);
      ++byIndex.ValueEprom;
      this.MyHandler.MyMeters.WorkMeter.MyCommunication.WriteParameterValue(byIndex, MemoryLocation.EEPROM);
    }

    private void listBoxVariables_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyData == Keys.Down)
      {
        if (this.listBoxVariables.SelectedIndex <= 0)
          return;
        --this.listBoxVariables.SelectedIndex;
      }
      else
      {
        if (e.KeyData != Keys.Up || this.listBoxVariables.SelectedIndex >= this.listBoxVariables.Items.Count - 1)
          return;
        ++this.listBoxVariables.SelectedIndex;
      }
    }

    private void MenuItemSetWriteProtectionAtClonedDevice_Click(object sender, EventArgs e)
    {
    }

    private void workMeterToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      if (this.MyHandler.MyMeters.WorkMeter == null)
        return;
      this.SaveEEProm(this.MyHandler.MyMeters.WorkMeter.Eprom);
    }

    private void dbMeterToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      if (this.MyHandler.MyMeters.DbMeter == null)
        return;
      this.SaveEEProm(this.MyHandler.MyMeters.DbMeter.Eprom);
    }

    private void typeMeterToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      if (this.MyHandler.MyMeters.TypeMeter == null)
        return;
      this.SaveEEProm(this.MyHandler.MyMeters.TypeMeter.Eprom);
    }

    private void readMeterToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      if (this.MyHandler.MyMeters.ReadMeter == null)
        return;
      this.SaveEEProm(this.MyHandler.MyMeters.ReadMeter.Eprom);
    }

    private void SaveEEProm(byte[] TheEEPromData)
    {
      this.saveFileDialog1.FileName = SystemValues.LoggDataPath;
      if (this.saveFileDialog1.ShowDialog() != DialogResult.OK)
        return;
      try
      {
        using (StreamWriter streamWriter = new StreamWriter(this.saveFileDialog1.FileName))
        {
          for (int index = 0; index < TheEEPromData.Length; ++index)
          {
            if (index % 16 == 0)
            {
              if (index != 0)
                streamWriter.WriteLine();
              streamWriter.Write(index.ToString("x04") + ":");
            }
            streamWriter.Write(" " + TheEEPromData[index].ToString("x02"));
          }
          streamWriter.WriteLine();
        }
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("GMM handler", "File error" + Environment.NewLine + ex.Message);
      }
    }

    private void loadMeterEepromFromFileToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.openFileDialog1.FileName = SystemValues.LoggDataPath;
      if (this.openFileDialog1.ShowDialog() != DialogResult.OK)
        return;
      List<byte> byteList = new List<byte>();
      try
      {
        using (StreamReader streamReader = new StreamReader(this.openFileDialog1.FileName))
        {
label_8:
          string str = streamReader.ReadLine();
          if (str != null)
          {
            for (int startIndex = 6; startIndex < str.Length - 1; startIndex += 3)
              byteList.Add(byte.Parse(str.Substring(startIndex, 2), NumberStyles.HexNumber));
            goto label_8;
          }
        }
        this.MeterEEPromFromFile = new byte[byteList.Count];
        for (int index = 0; index < this.MeterEEPromFromFile.Length; ++index)
          this.MeterEEPromFromFile[index] = byteList[index];
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("GMM handler", "File error" + Environment.NewLine + ex.Message);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (HandlerWindow));
      this.menuStrip1 = new MenuStrip();
      this.fileToolStripMenuItem = new ToolStripMenuItem();
      this.saveMeterEepromToFileToolStripMenuItem = new ToolStripMenuItem();
      this.workMeterToolStripMenuItem1 = new ToolStripMenuItem();
      this.dbMeterToolStripMenuItem1 = new ToolStripMenuItem();
      this.typeMeterToolStripMenuItem1 = new ToolStripMenuItem();
      this.readMeterToolStripMenuItem1 = new ToolStripMenuItem();
      this.loadMeterEepromFromFileToolStripMenuItem = new ToolStripMenuItem();
      this.workToolStripMenuItem = new ToolStripMenuItem();
      this.MenuItemCloseMeter = new ToolStripMenuItem();
      this.MenuItemRamTest = new ToolStripMenuItem();
      this.MenuItemRepare = new ToolStripMenuItem();
      this.saveMeterToolStripMenuItem = new ToolStripMenuItem();
      this.workMeterToolStripMenuItem = new ToolStripMenuItem();
      this.dbMeterToolStripMenuItem = new ToolStripMenuItem();
      this.typeMeterToolStripMenuItem = new ToolStripMenuItem();
      this.readMeterToolStripMenuItem = new ToolStripMenuItem();
      this.connectedMeterToolStripMenuItem = new ToolStripMenuItem();
      this.resetAllDataToolStripMenuItem = new ToolStripMenuItem();
      this.MenuItemDestroyBackupChecksum = new ToolStripMenuItem();
      this.MenuItemSetWriteProtectionAtClonedDevice = new ToolStripMenuItem();
      this.showToolStripMenuItem = new ToolStripMenuItem();
      this.typeAnalysisWindowToolStripMenuItem = new ToolStripMenuItem();
      this.MenuItemErr8002Types = new ToolStripMenuItem();
      this.toolStripSeparator2 = new ToolStripSeparator();
      this.blockListToolStripMenuItem = new ToolStripMenuItem();
      this.blockListDifferencesToolStripMenuItem = new ToolStripMenuItem();
      this.blockListDifferencesEEPromDirectToolStripMenuItem = new ToolStripMenuItem();
      this.blockListDifferencesFromFoadedEepromToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator3 = new ToolStripSeparator();
      this.parametersToolStripMenuItem = new ToolStripMenuItem();
      this.epromDifferenceToolStripMenuItem = new ToolStripMenuItem();
      this.parameterDifferenceToolStripMenuItem = new ToolStripMenuItem();
      this.epromParameterByAddressToolStripMenuItem = new ToolStripMenuItem();
      this.ramParameterByAddressToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator4 = new ToolStripSeparator();
      this.MenuItemIsEquelResult = new ToolStripMenuItem();
      this.MenuItemGetListList = new ToolStripMenuItem();
      this.MenuItemShowMeterResources = new ToolStripMenuItem();
      this.MenuItemGetRendomNumber = new ToolStripMenuItem();
      this.testLoggerEntriesToolStripMenuItem = new ToolStripMenuItem();
      this.areParametersEqualToDBoverridesToolStripMenuItem = new ToolStripMenuItem();
      this.MenuItemIsEndTimeOk = new ToolStripMenuItem();
      this.toolStripSeparator5 = new ToolStripSeparator();
      this.MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter = new ToolStripMenuItem();
      this.MenuItemSetMaxValuesCritical = new ToolStripMenuItem();
      this.MenuItemShowDeviceTimeEvents = new ToolStripMenuItem();
      this.goToToolStripMenuItem = new ToolStripMenuItem();
      this.globalMeterManagerToolStripMenuItem = new ToolStripMenuItem();
      this.backToolStripMenuItem = new ToolStripMenuItem();
      this.quitToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator1 = new ToolStripSeparator();
      this.designerToolStripMenuItem = new ToolStripMenuItem();
      this.serialBusToolStripMenuItem = new ToolStripMenuItem();
      this.asyncComToolStripMenuItem = new ToolStripMenuItem();
      this.dataToolStripMenuItem = new ToolStripMenuItem();
      this.CopyTempSensorCalibrationToolStripMenuItem = new ToolStripMenuItem();
      this.PastTempSensorCalibrationToolStripMenuItem = new ToolStripMenuItem();
      this.buttonCancle = new Button();
      this.buttonOk = new Button();
      this.groupBox1 = new GroupBox();
      this.checkBoxShowDiffsOnly = new CheckBox();
      this.checkBoxShowBlockTypes = new CheckBox();
      this.checkBoxShowFunctionNames = new CheckBox();
      this.checkBoxShowFunctionNumbers = new CheckBox();
      this.label4 = new Label();
      this.label3 = new Label();
      this.label2 = new Label();
      this.label1 = new Label();
      this.comboBoxGetListSelection = new ComboBox();
      this.comboBoxEquelFunction = new ComboBox();
      this.comboBoxCompareObject = new ComboBox();
      this.comboBoxDiagnosticObject = new ComboBox();
      this.buttonBreakLoop = new Button();
      this.panel1 = new Panel();
      this.checkBoxBackupForEachRead = new CheckBox();
      this.checkBoxReadWithoutBackup = new CheckBox();
      this.checkBoxIgnorIntervalMinutesRaster = new CheckBox();
      this.checkBoxDisableChecks = new CheckBox();
      this.checkBoxUseOnlyDefaultValues = new CheckBox();
      this.groupBoxVars = new GroupBox();
      this.listBoxVariables = new ListBox();
      this.buttonReadVar = new Button();
      this.buttonWriteToRam = new Button();
      this.buttonWriteToEprom = new Button();
      this.buttonChangeData = new Button();
      this.label7 = new Label();
      this.labelValueRam = new Label();
      this.label8 = new Label();
      this.labelValueEProm = new Label();
      this.textBoxNewValue = new TextBox();
      this.textBoxValueRam = new TextBox();
      this.textBoxByteSize = new TextBox();
      this.textBoxValueEprom = new TextBox();
      this.textBoxStatus = new TextBox();
      this.panel2 = new Panel();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.openFileDialog1 = new OpenFileDialog();
      this.saveFileDialog1 = new SaveFileDialog();
      this.menuStrip1.SuspendLayout();
      this.groupBox1.SuspendLayout();
      this.panel1.SuspendLayout();
      this.groupBoxVars.SuspendLayout();
      this.panel2.SuspendLayout();
      this.SuspendLayout();
      this.menuStrip1.Items.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.fileToolStripMenuItem,
        (ToolStripItem) this.workToolStripMenuItem,
        (ToolStripItem) this.showToolStripMenuItem,
        (ToolStripItem) this.goToToolStripMenuItem,
        (ToolStripItem) this.dataToolStripMenuItem
      });
      componentResourceManager.ApplyResources((object) this.menuStrip1, "menuStrip1");
      this.menuStrip1.Name = "menuStrip1";
      this.fileToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.saveMeterEepromToFileToolStripMenuItem,
        (ToolStripItem) this.loadMeterEepromFromFileToolStripMenuItem
      });
      this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.fileToolStripMenuItem, "fileToolStripMenuItem");
      this.saveMeterEepromToFileToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.workMeterToolStripMenuItem1,
        (ToolStripItem) this.dbMeterToolStripMenuItem1,
        (ToolStripItem) this.typeMeterToolStripMenuItem1,
        (ToolStripItem) this.readMeterToolStripMenuItem1
      });
      this.saveMeterEepromToFileToolStripMenuItem.Name = "saveMeterEepromToFileToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.saveMeterEepromToFileToolStripMenuItem, "saveMeterEepromToFileToolStripMenuItem");
      this.workMeterToolStripMenuItem1.Name = "workMeterToolStripMenuItem1";
      componentResourceManager.ApplyResources((object) this.workMeterToolStripMenuItem1, "workMeterToolStripMenuItem1");
      this.workMeterToolStripMenuItem1.Click += new System.EventHandler(this.workMeterToolStripMenuItem1_Click);
      this.dbMeterToolStripMenuItem1.Name = "dbMeterToolStripMenuItem1";
      componentResourceManager.ApplyResources((object) this.dbMeterToolStripMenuItem1, "dbMeterToolStripMenuItem1");
      this.dbMeterToolStripMenuItem1.Click += new System.EventHandler(this.dbMeterToolStripMenuItem1_Click);
      this.typeMeterToolStripMenuItem1.Name = "typeMeterToolStripMenuItem1";
      componentResourceManager.ApplyResources((object) this.typeMeterToolStripMenuItem1, "typeMeterToolStripMenuItem1");
      this.typeMeterToolStripMenuItem1.Click += new System.EventHandler(this.typeMeterToolStripMenuItem1_Click);
      this.readMeterToolStripMenuItem1.Name = "readMeterToolStripMenuItem1";
      componentResourceManager.ApplyResources((object) this.readMeterToolStripMenuItem1, "readMeterToolStripMenuItem1");
      this.readMeterToolStripMenuItem1.Click += new System.EventHandler(this.readMeterToolStripMenuItem1_Click);
      this.loadMeterEepromFromFileToolStripMenuItem.Name = "loadMeterEepromFromFileToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.loadMeterEepromFromFileToolStripMenuItem, "loadMeterEepromFromFileToolStripMenuItem");
      this.loadMeterEepromFromFileToolStripMenuItem.Click += new System.EventHandler(this.loadMeterEepromFromFileToolStripMenuItem_Click);
      this.workToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[7]
      {
        (ToolStripItem) this.MenuItemCloseMeter,
        (ToolStripItem) this.MenuItemRamTest,
        (ToolStripItem) this.MenuItemRepare,
        (ToolStripItem) this.saveMeterToolStripMenuItem,
        (ToolStripItem) this.resetAllDataToolStripMenuItem,
        (ToolStripItem) this.MenuItemDestroyBackupChecksum,
        (ToolStripItem) this.MenuItemSetWriteProtectionAtClonedDevice
      });
      this.workToolStripMenuItem.Name = "workToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.workToolStripMenuItem, "workToolStripMenuItem");
      this.MenuItemCloseMeter.Name = "MenuItemCloseMeter";
      componentResourceManager.ApplyResources((object) this.MenuItemCloseMeter, "MenuItemCloseMeter");
      this.MenuItemCloseMeter.Click += new System.EventHandler(this.MenuItemCloseMeter_Click);
      this.MenuItemRamTest.Name = "MenuItemRamTest";
      componentResourceManager.ApplyResources((object) this.MenuItemRamTest, "MenuItemRamTest");
      this.MenuItemRamTest.Click += new System.EventHandler(this.MenuItemRamTest_Click);
      this.MenuItemRepare.Name = "MenuItemRepare";
      componentResourceManager.ApplyResources((object) this.MenuItemRepare, "MenuItemRepare");
      this.MenuItemRepare.Click += new System.EventHandler(this.MenuItemRepare_Click);
      this.saveMeterToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.workMeterToolStripMenuItem,
        (ToolStripItem) this.dbMeterToolStripMenuItem,
        (ToolStripItem) this.typeMeterToolStripMenuItem,
        (ToolStripItem) this.readMeterToolStripMenuItem,
        (ToolStripItem) this.connectedMeterToolStripMenuItem
      });
      this.saveMeterToolStripMenuItem.Name = "saveMeterToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.saveMeterToolStripMenuItem, "saveMeterToolStripMenuItem");
      this.workMeterToolStripMenuItem.Name = "workMeterToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.workMeterToolStripMenuItem, "workMeterToolStripMenuItem");
      this.workMeterToolStripMenuItem.Click += new System.EventHandler(this.workMeterToolStripMenuItem_Click);
      this.dbMeterToolStripMenuItem.Name = "dbMeterToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.dbMeterToolStripMenuItem, "dbMeterToolStripMenuItem");
      this.dbMeterToolStripMenuItem.Click += new System.EventHandler(this.dbMeterToolStripMenuItem_Click);
      this.typeMeterToolStripMenuItem.Name = "typeMeterToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.typeMeterToolStripMenuItem, "typeMeterToolStripMenuItem");
      this.typeMeterToolStripMenuItem.Click += new System.EventHandler(this.typeMeterToolStripMenuItem_Click);
      this.readMeterToolStripMenuItem.Name = "readMeterToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.readMeterToolStripMenuItem, "readMeterToolStripMenuItem");
      this.readMeterToolStripMenuItem.Click += new System.EventHandler(this.readMeterToolStripMenuItem_Click);
      this.connectedMeterToolStripMenuItem.Name = "connectedMeterToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.connectedMeterToolStripMenuItem, "connectedMeterToolStripMenuItem");
      this.connectedMeterToolStripMenuItem.Click += new System.EventHandler(this.connectedMeterToolStripMenuItem_Click);
      this.resetAllDataToolStripMenuItem.Name = "resetAllDataToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.resetAllDataToolStripMenuItem, "resetAllDataToolStripMenuItem");
      this.resetAllDataToolStripMenuItem.Click += new System.EventHandler(this.resetAllDataToolStripMenuItem_Click);
      this.MenuItemDestroyBackupChecksum.Name = "MenuItemDestroyBackupChecksum";
      componentResourceManager.ApplyResources((object) this.MenuItemDestroyBackupChecksum, "MenuItemDestroyBackupChecksum");
      this.MenuItemDestroyBackupChecksum.Click += new System.EventHandler(this.MenuItemDestroyBackupChecksum_Click);
      this.MenuItemSetWriteProtectionAtClonedDevice.Name = "MenuItemSetWriteProtectionAtClonedDevice";
      componentResourceManager.ApplyResources((object) this.MenuItemSetWriteProtectionAtClonedDevice, "MenuItemSetWriteProtectionAtClonedDevice");
      this.MenuItemSetWriteProtectionAtClonedDevice.Click += new System.EventHandler(this.MenuItemSetWriteProtectionAtClonedDevice_Click);
      this.showToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[25]
      {
        (ToolStripItem) this.typeAnalysisWindowToolStripMenuItem,
        (ToolStripItem) this.MenuItemErr8002Types,
        (ToolStripItem) this.toolStripSeparator2,
        (ToolStripItem) this.blockListToolStripMenuItem,
        (ToolStripItem) this.blockListDifferencesToolStripMenuItem,
        (ToolStripItem) this.blockListDifferencesEEPromDirectToolStripMenuItem,
        (ToolStripItem) this.blockListDifferencesFromFoadedEepromToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator3,
        (ToolStripItem) this.parametersToolStripMenuItem,
        (ToolStripItem) this.epromDifferenceToolStripMenuItem,
        (ToolStripItem) this.parameterDifferenceToolStripMenuItem,
        (ToolStripItem) this.epromParameterByAddressToolStripMenuItem,
        (ToolStripItem) this.ramParameterByAddressToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator4,
        (ToolStripItem) this.MenuItemIsEquelResult,
        (ToolStripItem) this.MenuItemGetListList,
        (ToolStripItem) this.MenuItemShowMeterResources,
        (ToolStripItem) this.MenuItemGetRendomNumber,
        (ToolStripItem) this.testLoggerEntriesToolStripMenuItem,
        (ToolStripItem) this.areParametersEqualToDBoverridesToolStripMenuItem,
        (ToolStripItem) this.MenuItemIsEndTimeOk,
        (ToolStripItem) this.toolStripSeparator5,
        (ToolStripItem) this.MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter,
        (ToolStripItem) this.MenuItemSetMaxValuesCritical,
        (ToolStripItem) this.MenuItemShowDeviceTimeEvents
      });
      this.showToolStripMenuItem.Name = "showToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.showToolStripMenuItem, "showToolStripMenuItem");
      this.typeAnalysisWindowToolStripMenuItem.Name = "typeAnalysisWindowToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.typeAnalysisWindowToolStripMenuItem, "typeAnalysisWindowToolStripMenuItem");
      this.typeAnalysisWindowToolStripMenuItem.Click += new System.EventHandler(this.typeAnalysisWindowToolStripMenuItem_Click);
      this.MenuItemErr8002Types.Name = "MenuItemErr8002Types";
      componentResourceManager.ApplyResources((object) this.MenuItemErr8002Types, "MenuItemErr8002Types");
      this.MenuItemErr8002Types.Click += new System.EventHandler(this.MenuItemErr8002Types_Click);
      this.toolStripSeparator2.Name = "toolStripSeparator2";
      componentResourceManager.ApplyResources((object) this.toolStripSeparator2, "toolStripSeparator2");
      this.blockListToolStripMenuItem.Name = "blockListToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.blockListToolStripMenuItem, "blockListToolStripMenuItem");
      this.blockListToolStripMenuItem.Click += new System.EventHandler(this.blockListToolStripMenuItem_Click);
      this.blockListDifferencesToolStripMenuItem.Name = "blockListDifferencesToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.blockListDifferencesToolStripMenuItem, "blockListDifferencesToolStripMenuItem");
      this.blockListDifferencesToolStripMenuItem.Click += new System.EventHandler(this.blockListDifferencesToolStripMenuItem_Click);
      this.blockListDifferencesEEPromDirectToolStripMenuItem.Name = "blockListDifferencesEEPromDirectToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.blockListDifferencesEEPromDirectToolStripMenuItem, "blockListDifferencesEEPromDirectToolStripMenuItem");
      this.blockListDifferencesEEPromDirectToolStripMenuItem.Click += new System.EventHandler(this.blockListDifferencesEEPromDirectToolStripMenuItem_Click);
      this.blockListDifferencesFromFoadedEepromToolStripMenuItem.Name = "blockListDifferencesFromFoadedEepromToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.blockListDifferencesFromFoadedEepromToolStripMenuItem, "blockListDifferencesFromFoadedEepromToolStripMenuItem");
      this.blockListDifferencesFromFoadedEepromToolStripMenuItem.Click += new System.EventHandler(this.blockListDifferencesFromFoadedEepromToolStripMenuItem_Click);
      this.toolStripSeparator3.Name = "toolStripSeparator3";
      componentResourceManager.ApplyResources((object) this.toolStripSeparator3, "toolStripSeparator3");
      this.parametersToolStripMenuItem.Name = "parametersToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.parametersToolStripMenuItem, "parametersToolStripMenuItem");
      this.parametersToolStripMenuItem.Click += new System.EventHandler(this.parametersToolStripMenuItem_Click);
      this.epromDifferenceToolStripMenuItem.Name = "epromDifferenceToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.epromDifferenceToolStripMenuItem, "epromDifferenceToolStripMenuItem");
      this.epromDifferenceToolStripMenuItem.Click += new System.EventHandler(this.epromDifferenceToolStripMenuItem_Click);
      this.parameterDifferenceToolStripMenuItem.Name = "parameterDifferenceToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.parameterDifferenceToolStripMenuItem, "parameterDifferenceToolStripMenuItem");
      this.parameterDifferenceToolStripMenuItem.Click += new System.EventHandler(this.parameterDifferenceToolStripMenuItem_Click);
      this.epromParameterByAddressToolStripMenuItem.Name = "epromParameterByAddressToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.epromParameterByAddressToolStripMenuItem, "epromParameterByAddressToolStripMenuItem");
      this.epromParameterByAddressToolStripMenuItem.Click += new System.EventHandler(this.epromParameterByAddressToolStripMenuItem_Click);
      this.ramParameterByAddressToolStripMenuItem.Name = "ramParameterByAddressToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.ramParameterByAddressToolStripMenuItem, "ramParameterByAddressToolStripMenuItem");
      this.ramParameterByAddressToolStripMenuItem.Click += new System.EventHandler(this.ramParameterByAddressToolStripMenuItem_Click);
      this.toolStripSeparator4.Name = "toolStripSeparator4";
      componentResourceManager.ApplyResources((object) this.toolStripSeparator4, "toolStripSeparator4");
      this.MenuItemIsEquelResult.Name = "MenuItemIsEquelResult";
      componentResourceManager.ApplyResources((object) this.MenuItemIsEquelResult, "MenuItemIsEquelResult");
      this.MenuItemIsEquelResult.Click += new System.EventHandler(this.MenuItemIsEquelResult_Click);
      this.MenuItemGetListList.Name = "MenuItemGetListList";
      componentResourceManager.ApplyResources((object) this.MenuItemGetListList, "MenuItemGetListList");
      this.MenuItemGetListList.Click += new System.EventHandler(this.MenuItemGetListList_Click);
      this.MenuItemShowMeterResources.Name = "MenuItemShowMeterResources";
      componentResourceManager.ApplyResources((object) this.MenuItemShowMeterResources, "MenuItemShowMeterResources");
      this.MenuItemShowMeterResources.Click += new System.EventHandler(this.MenuItemShowMeterResources_Click);
      this.MenuItemGetRendomNumber.Name = "MenuItemGetRendomNumber";
      componentResourceManager.ApplyResources((object) this.MenuItemGetRendomNumber, "MenuItemGetRendomNumber");
      this.MenuItemGetRendomNumber.Click += new System.EventHandler(this.MenuItemGetRendomNumber_Click);
      this.testLoggerEntriesToolStripMenuItem.Name = "testLoggerEntriesToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.testLoggerEntriesToolStripMenuItem, "testLoggerEntriesToolStripMenuItem");
      this.testLoggerEntriesToolStripMenuItem.Click += new System.EventHandler(this.testLoggerEntriesToolStripMenuItem_Click);
      this.areParametersEqualToDBoverridesToolStripMenuItem.Name = "areParametersEqualToDBoverridesToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.areParametersEqualToDBoverridesToolStripMenuItem, "areParametersEqualToDBoverridesToolStripMenuItem");
      this.areParametersEqualToDBoverridesToolStripMenuItem.Click += new System.EventHandler(this.areParametersEqualToDBoverridesToolStripMenuItem_Click);
      this.MenuItemIsEndTimeOk.Name = "MenuItemIsEndTimeOk";
      componentResourceManager.ApplyResources((object) this.MenuItemIsEndTimeOk, "MenuItemIsEndTimeOk");
      this.MenuItemIsEndTimeOk.Click += new System.EventHandler(this.MenuItemIsEndTimeOk_Click);
      this.toolStripSeparator5.Name = "toolStripSeparator5";
      componentResourceManager.ApplyResources((object) this.toolStripSeparator5, "toolStripSeparator5");
      this.MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter.Name = "MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter";
      componentResourceManager.ApplyResources((object) this.MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter, "MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter");
      this.MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter.Click += new System.EventHandler(this.MenuItemStaticDiffFromDiagnosticObjectToExternalConnectedMeter_Click);
      this.MenuItemSetMaxValuesCritical.Name = "MenuItemSetMaxValuesCritical";
      componentResourceManager.ApplyResources((object) this.MenuItemSetMaxValuesCritical, "MenuItemSetMaxValuesCritical");
      this.MenuItemSetMaxValuesCritical.Click += new System.EventHandler(this.MenuItemSetMaxValuesCritical_Click);
      this.MenuItemShowDeviceTimeEvents.Name = "MenuItemShowDeviceTimeEvents";
      componentResourceManager.ApplyResources((object) this.MenuItemShowDeviceTimeEvents, "MenuItemShowDeviceTimeEvents");
      this.MenuItemShowDeviceTimeEvents.Click += new System.EventHandler(this.MenuItemShowDeviceTimeEvents_Click);
      this.goToToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[7]
      {
        (ToolStripItem) this.globalMeterManagerToolStripMenuItem,
        (ToolStripItem) this.backToolStripMenuItem,
        (ToolStripItem) this.quitToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator1,
        (ToolStripItem) this.designerToolStripMenuItem,
        (ToolStripItem) this.serialBusToolStripMenuItem,
        (ToolStripItem) this.asyncComToolStripMenuItem
      });
      this.goToToolStripMenuItem.Name = "goToToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.goToToolStripMenuItem, "goToToolStripMenuItem");
      this.globalMeterManagerToolStripMenuItem.Name = "globalMeterManagerToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.globalMeterManagerToolStripMenuItem, "globalMeterManagerToolStripMenuItem");
      this.globalMeterManagerToolStripMenuItem.Click += new System.EventHandler(this.globalMeterManagerToolStripMenuItem_Click);
      this.backToolStripMenuItem.Name = "backToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.backToolStripMenuItem, "backToolStripMenuItem");
      this.backToolStripMenuItem.Click += new System.EventHandler(this.backToolStripMenuItem_Click);
      this.quitToolStripMenuItem.Name = "quitToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.quitToolStripMenuItem, "quitToolStripMenuItem");
      this.quitToolStripMenuItem.Click += new System.EventHandler(this.quitToolStripMenuItem_Click);
      this.toolStripSeparator1.Name = "toolStripSeparator1";
      componentResourceManager.ApplyResources((object) this.toolStripSeparator1, "toolStripSeparator1");
      this.designerToolStripMenuItem.Name = "designerToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.designerToolStripMenuItem, "designerToolStripMenuItem");
      this.designerToolStripMenuItem.Click += new System.EventHandler(this.designerToolStripMenuItem_Click);
      this.serialBusToolStripMenuItem.Name = "serialBusToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.serialBusToolStripMenuItem, "serialBusToolStripMenuItem");
      this.serialBusToolStripMenuItem.Click += new System.EventHandler(this.serialBusToolStripMenuItem_Click);
      this.asyncComToolStripMenuItem.Name = "asyncComToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.asyncComToolStripMenuItem, "asyncComToolStripMenuItem");
      this.asyncComToolStripMenuItem.Click += new System.EventHandler(this.asyncComToolStripMenuItem_Click);
      this.dataToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.CopyTempSensorCalibrationToolStripMenuItem,
        (ToolStripItem) this.PastTempSensorCalibrationToolStripMenuItem
      });
      this.dataToolStripMenuItem.Name = "dataToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.dataToolStripMenuItem, "dataToolStripMenuItem");
      this.CopyTempSensorCalibrationToolStripMenuItem.Name = "CopyTempSensorCalibrationToolStripMenuItem";
      componentResourceManager.ApplyResources((object) this.CopyTempSensorCalibrationToolStripMenuItem, "CopyTempSensorCalibrationToolStripMenuItem");
      this.CopyTempSensorCalibrationToolStripMenuItem.Click += new System.EventHandler(this.CopyTempSensorCalibrationToolStripMenuItem_Click);
      componentResourceManager.ApplyResources((object) this.PastTempSensorCalibrationToolStripMenuItem, "PastTempSensorCalibrationToolStripMenuItem");
      this.PastTempSensorCalibrationToolStripMenuItem.Name = "PastTempSensorCalibrationToolStripMenuItem";
      this.PastTempSensorCalibrationToolStripMenuItem.Click += new System.EventHandler(this.PastTempSensorCalibrationToolStripMenuItem_Click);
      componentResourceManager.ApplyResources((object) this.buttonCancle, "buttonCancle");
      this.buttonCancle.DialogResult = DialogResult.Cancel;
      this.buttonCancle.Name = "buttonCancle";
      this.buttonCancle.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.buttonOk, "buttonOk");
      this.buttonOk.DialogResult = DialogResult.OK;
      this.buttonOk.Name = "buttonOk";
      this.buttonOk.UseVisualStyleBackColor = true;
      this.buttonOk.Click += new System.EventHandler(this.buttonOk_Click);
      componentResourceManager.ApplyResources((object) this.groupBox1, "groupBox1");
      this.groupBox1.Controls.Add((Control) this.checkBoxShowDiffsOnly);
      this.groupBox1.Controls.Add((Control) this.checkBoxShowBlockTypes);
      this.groupBox1.Controls.Add((Control) this.checkBoxShowFunctionNames);
      this.groupBox1.Controls.Add((Control) this.checkBoxShowFunctionNumbers);
      this.groupBox1.Controls.Add((Control) this.label4);
      this.groupBox1.Controls.Add((Control) this.label3);
      this.groupBox1.Controls.Add((Control) this.label2);
      this.groupBox1.Controls.Add((Control) this.label1);
      this.groupBox1.Controls.Add((Control) this.comboBoxGetListSelection);
      this.groupBox1.Controls.Add((Control) this.comboBoxEquelFunction);
      this.groupBox1.Controls.Add((Control) this.comboBoxCompareObject);
      this.groupBox1.Controls.Add((Control) this.comboBoxDiagnosticObject);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.TabStop = false;
      componentResourceManager.ApplyResources((object) this.checkBoxShowDiffsOnly, "checkBoxShowDiffsOnly");
      this.checkBoxShowDiffsOnly.Name = "checkBoxShowDiffsOnly";
      this.checkBoxShowDiffsOnly.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.checkBoxShowBlockTypes, "checkBoxShowBlockTypes");
      this.checkBoxShowBlockTypes.Name = "checkBoxShowBlockTypes";
      this.checkBoxShowBlockTypes.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.checkBoxShowFunctionNames, "checkBoxShowFunctionNames");
      this.checkBoxShowFunctionNames.Name = "checkBoxShowFunctionNames";
      this.checkBoxShowFunctionNames.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.checkBoxShowFunctionNumbers, "checkBoxShowFunctionNumbers");
      this.checkBoxShowFunctionNumbers.Name = "checkBoxShowFunctionNumbers";
      this.checkBoxShowFunctionNumbers.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.label4, "label4");
      this.label4.Name = "label4";
      componentResourceManager.ApplyResources((object) this.label3, "label3");
      this.label3.Name = "label3";
      componentResourceManager.ApplyResources((object) this.label2, "label2");
      this.label2.Name = "label2";
      componentResourceManager.ApplyResources((object) this.label1, "label1");
      this.label1.Name = "label1";
      this.comboBoxGetListSelection.DropDownStyle = ComboBoxStyle.DropDownList;
      this.comboBoxGetListSelection.FormattingEnabled = true;
      componentResourceManager.ApplyResources((object) this.comboBoxGetListSelection, "comboBoxGetListSelection");
      this.comboBoxGetListSelection.Name = "comboBoxGetListSelection";
      this.comboBoxEquelFunction.DropDownStyle = ComboBoxStyle.DropDownList;
      this.comboBoxEquelFunction.FormattingEnabled = true;
      componentResourceManager.ApplyResources((object) this.comboBoxEquelFunction, "comboBoxEquelFunction");
      this.comboBoxEquelFunction.Name = "comboBoxEquelFunction";
      this.comboBoxCompareObject.FormattingEnabled = true;
      componentResourceManager.ApplyResources((object) this.comboBoxCompareObject, "comboBoxCompareObject");
      this.comboBoxCompareObject.Name = "comboBoxCompareObject";
      this.comboBoxDiagnosticObject.FormattingEnabled = true;
      componentResourceManager.ApplyResources((object) this.comboBoxDiagnosticObject, "comboBoxDiagnosticObject");
      this.comboBoxDiagnosticObject.Name = "comboBoxDiagnosticObject";
      componentResourceManager.ApplyResources((object) this.buttonBreakLoop, "buttonBreakLoop");
      this.buttonBreakLoop.Name = "buttonBreakLoop";
      this.buttonBreakLoop.UseVisualStyleBackColor = true;
      this.buttonBreakLoop.Click += new System.EventHandler(this.buttonBreakLoop_Click);
      componentResourceManager.ApplyResources((object) this.panel1, "panel1");
      this.panel1.Controls.Add((Control) this.checkBoxBackupForEachRead);
      this.panel1.Controls.Add((Control) this.checkBoxReadWithoutBackup);
      this.panel1.Controls.Add((Control) this.checkBoxIgnorIntervalMinutesRaster);
      this.panel1.Controls.Add((Control) this.checkBoxDisableChecks);
      this.panel1.Controls.Add((Control) this.checkBoxUseOnlyDefaultValues);
      this.panel1.Controls.Add((Control) this.groupBoxVars);
      this.panel1.Controls.Add((Control) this.textBoxStatus);
      this.panel1.Controls.Add((Control) this.groupBox1);
      this.panel1.Controls.Add((Control) this.buttonBreakLoop);
      this.panel1.Controls.Add((Control) this.buttonOk);
      this.panel1.Controls.Add((Control) this.buttonCancle);
      this.panel1.Name = "panel1";
      componentResourceManager.ApplyResources((object) this.checkBoxBackupForEachRead, "checkBoxBackupForEachRead");
      this.checkBoxBackupForEachRead.Name = "checkBoxBackupForEachRead";
      this.checkBoxBackupForEachRead.UseVisualStyleBackColor = true;
      this.checkBoxBackupForEachRead.CheckedChanged += new System.EventHandler(this.checkBoxBackupForEachRead_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxReadWithoutBackup, "checkBoxReadWithoutBackup");
      this.checkBoxReadWithoutBackup.Name = "checkBoxReadWithoutBackup";
      this.checkBoxReadWithoutBackup.UseVisualStyleBackColor = true;
      this.checkBoxReadWithoutBackup.CheckedChanged += new System.EventHandler(this.checkBoxReadWithoutBackup_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxIgnorIntervalMinutesRaster, "checkBoxIgnorIntervalMinutesRaster");
      this.checkBoxIgnorIntervalMinutesRaster.Name = "checkBoxIgnorIntervalMinutesRaster";
      this.checkBoxIgnorIntervalMinutesRaster.UseVisualStyleBackColor = true;
      this.checkBoxIgnorIntervalMinutesRaster.CheckedChanged += new System.EventHandler(this.checkBoxIgnorIntervalMinutesRaster_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxDisableChecks, "checkBoxDisableChecks");
      this.checkBoxDisableChecks.Name = "checkBoxDisableChecks";
      this.checkBoxDisableChecks.UseVisualStyleBackColor = true;
      this.checkBoxDisableChecks.CheckedChanged += new System.EventHandler(this.checkBoxDisableChecks_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.checkBoxUseOnlyDefaultValues, "checkBoxUseOnlyDefaultValues");
      this.checkBoxUseOnlyDefaultValues.Name = "checkBoxUseOnlyDefaultValues";
      this.checkBoxUseOnlyDefaultValues.UseVisualStyleBackColor = true;
      componentResourceManager.ApplyResources((object) this.groupBoxVars, "groupBoxVars");
      this.groupBoxVars.Controls.Add((Control) this.listBoxVariables);
      this.groupBoxVars.Controls.Add((Control) this.buttonReadVar);
      this.groupBoxVars.Controls.Add((Control) this.buttonWriteToRam);
      this.groupBoxVars.Controls.Add((Control) this.buttonWriteToEprom);
      this.groupBoxVars.Controls.Add((Control) this.buttonChangeData);
      this.groupBoxVars.Controls.Add((Control) this.label7);
      this.groupBoxVars.Controls.Add((Control) this.labelValueRam);
      this.groupBoxVars.Controls.Add((Control) this.label8);
      this.groupBoxVars.Controls.Add((Control) this.labelValueEProm);
      this.groupBoxVars.Controls.Add((Control) this.textBoxNewValue);
      this.groupBoxVars.Controls.Add((Control) this.textBoxValueRam);
      this.groupBoxVars.Controls.Add((Control) this.textBoxByteSize);
      this.groupBoxVars.Controls.Add((Control) this.textBoxValueEprom);
      this.groupBoxVars.Name = "groupBoxVars";
      this.groupBoxVars.TabStop = false;
      componentResourceManager.ApplyResources((object) this.listBoxVariables, "listBoxVariables");
      this.listBoxVariables.Name = "listBoxVariables";
      this.listBoxVariables.SelectedIndexChanged += new System.EventHandler(this.listBoxVariables_SelectedIndexChanged_1);
      this.listBoxVariables.KeyDown += new KeyEventHandler(this.listBoxVariables_KeyDown);
      componentResourceManager.ApplyResources((object) this.buttonReadVar, "buttonReadVar");
      this.buttonReadVar.Name = "buttonReadVar";
      this.buttonReadVar.UseVisualStyleBackColor = true;
      this.buttonReadVar.Click += new System.EventHandler(this.buttonReadVar_Click);
      componentResourceManager.ApplyResources((object) this.buttonWriteToRam, "buttonWriteToRam");
      this.buttonWriteToRam.Name = "buttonWriteToRam";
      this.buttonWriteToRam.UseVisualStyleBackColor = true;
      this.buttonWriteToRam.Click += new System.EventHandler(this.buttonWriteToRam_Click);
      componentResourceManager.ApplyResources((object) this.buttonWriteToEprom, "buttonWriteToEprom");
      this.buttonWriteToEprom.Name = "buttonWriteToEprom";
      this.buttonWriteToEprom.UseVisualStyleBackColor = true;
      this.buttonWriteToEprom.Click += new System.EventHandler(this.buttonWriteToEprom_Click);
      componentResourceManager.ApplyResources((object) this.buttonChangeData, "buttonChangeData");
      this.buttonChangeData.Name = "buttonChangeData";
      this.buttonChangeData.UseVisualStyleBackColor = true;
      this.buttonChangeData.Click += new System.EventHandler(this.buttonChangeData_Click);
      componentResourceManager.ApplyResources((object) this.label7, "label7");
      this.label7.Name = "label7";
      componentResourceManager.ApplyResources((object) this.labelValueRam, "labelValueRam");
      this.labelValueRam.Name = "labelValueRam";
      componentResourceManager.ApplyResources((object) this.label8, "label8");
      this.label8.Name = "label8";
      componentResourceManager.ApplyResources((object) this.labelValueEProm, "labelValueEProm");
      this.labelValueEProm.Name = "labelValueEProm";
      componentResourceManager.ApplyResources((object) this.textBoxNewValue, "textBoxNewValue");
      this.textBoxNewValue.Name = "textBoxNewValue";
      componentResourceManager.ApplyResources((object) this.textBoxValueRam, "textBoxValueRam");
      this.textBoxValueRam.Name = "textBoxValueRam";
      componentResourceManager.ApplyResources((object) this.textBoxByteSize, "textBoxByteSize");
      this.textBoxByteSize.Name = "textBoxByteSize";
      componentResourceManager.ApplyResources((object) this.textBoxValueEprom, "textBoxValueEprom");
      this.textBoxValueEprom.Name = "textBoxValueEprom";
      componentResourceManager.ApplyResources((object) this.textBoxStatus, "textBoxStatus");
      this.textBoxStatus.Name = "textBoxStatus";
      this.panel2.Controls.Add((Control) this.panel1);
      this.panel2.Controls.Add((Control) this.zennerCoroprateDesign1);
      componentResourceManager.ApplyResources((object) this.panel2, "panel2");
      this.panel2.Name = "panel2";
      componentResourceManager.ApplyResources((object) this.zennerCoroprateDesign1, "zennerCoroprateDesign1");
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.openFileDialog1.FileName = "openFileDialog1";
      this.saveFileDialog1.DefaultExt = "txt";
      this.saveFileDialog1.FileName = "MeterEEProm";
      componentResourceManager.ApplyResources((object) this, "$this");
      this.AutoScaleMode = AutoScaleMode.Font;
      this.Controls.Add((Control) this.panel2);
      this.Controls.Add((Control) this.menuStrip1);
      this.MainMenuStrip = this.menuStrip1;
      this.Name = nameof (HandlerWindow);
      this.Load += new System.EventHandler(this.HandlerWindow_Load);
      this.menuStrip1.ResumeLayout(false);
      this.menuStrip1.PerformLayout();
      this.groupBox1.ResumeLayout(false);
      this.groupBox1.PerformLayout();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.groupBoxVars.ResumeLayout(false);
      this.groupBoxVars.PerformLayout();
      this.panel2.ResumeLayout(false);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- InfoFlags.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.InfoFlags
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class InfoFlags
  {
    internal bool ShowFunctionNumbers = true;
    internal bool ShowFunctionNames = true;
    internal bool ShowBlockTypes = true;
    internal bool ShowDiffsOnly = true;
  }
}


--- IntervalAndLogger.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.IntervalAndLogger
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class IntervalAndLogger : CodeBlock
  {
    internal const int YearSecounds = 31622400;
    internal const int MonthSecounds = 2678400;
    public static IntervalAndLogger.IntervallCycleInfos[] CodeIntervalls = new IntervalAndLogger.IntervallCycleInfos[18]
    {
      new IntervalAndLogger.IntervallCycleInfos(31622400U, "year", (byte) 87, "RUI_CODE_Interval RUI_TIME_Year"),
      new IntervalAndLogger.IntervallCycleInfos(0U, "6 month", (byte) 95, "RUI_CODE_Interval RUI_TIME_Month6"),
      new IntervalAndLogger.IntervallCycleInfos(0U, "3 month", (byte) 103, "RUI_CODE_Interval RUI_TIME_Month3"),
      new IntervalAndLogger.IntervallCycleInfos(2678400U, "month", (byte) 111, "RUI_CODE_Interval RUI_TIME_Month"),
      new IntervalAndLogger.IntervallCycleInfos(604800U, "week", (byte) 7, "RUI_CODE_Interval RUI_TIME_Week"),
      new IntervalAndLogger.IntervallCycleInfos(86400U, "day", (byte) 15, "RUI_CODE_Interval RUI_TIME_Day"),
      new IntervalAndLogger.IntervallCycleInfos(43200U, "12 hours", (byte) 23, "RUI_CODE_Interval RUI_TIME_Hours12"),
      new IntervalAndLogger.IntervallCycleInfos(21600U, "6 hours", (byte) 31, "RUI_CODE_Interval RUI_TIME_Hours6"),
      new IntervalAndLogger.IntervallCycleInfos(7200U, "2 hours", (byte) 39, "RUI_CODE_Interval RUI_TIME_Hours2"),
      new IntervalAndLogger.IntervallCycleInfos(3600U, "hour", (byte) 47, "RUI_CODE_Interval RUI_TIME_Hour"),
      new IntervalAndLogger.IntervallCycleInfos(1800U, "30 minutes", (byte) 55, "RUI_CODE_Interval RUI_TIME_Minutes30"),
      new IntervalAndLogger.IntervallCycleInfos(900U, "15 minutes", (byte) 63, "RUI_CODE_Interval RUI_TIME_Minutes15"),
      new IntervalAndLogger.IntervallCycleInfos(600U, "10 minutes", (byte) 71, "RUI_CODE_Interval RUI_TIME_Minutes10"),
      new IntervalAndLogger.IntervallCycleInfos(300U, "5 minutes", (byte) 79, "RUI_CODE_Interval RUI_TIME_Minutes5"),
      new IntervalAndLogger.IntervallCycleInfos(120U, "2 minutes", (byte) 119, ""),
      new IntervalAndLogger.IntervallCycleInfos(60U, "1 minutes", (byte) 119, ""),
      new IntervalAndLogger.IntervallCycleInfos(30U, "30 secounds", (byte) 119, ""),
      new IntervalAndLogger.IntervallCycleInfos(10U, "10 secounds", (byte) 119, "")
    };
    internal Meter MyMeter;
    public List<Parameter> LoggerParameter;
    public LoggerTypes Type;
    internal Parameter P_NextTimePoint;
    internal Parameter P_Intervall;
    internal Parameter P_StartAddress;
    internal Parameter P_EndAddress;
    internal Parameter P_WriteAddress;
    internal Parameter P_Flags;
    internal int MaxEntries;
    internal int EntrySize;
    internal int MBusParameterLength = 0;
    internal int DifVifEntrySize = 0;
    internal byte MBusMaxEntries;
    internal bool EpromDataAvailable = false;
    internal uint Interval;
    internal DateTime LastEventDateTime;
    internal DateTime NextEventDateTime;
    internal LoggerInfo MyLoggerInfo;
    internal bool LetLoggerUnchanged = false;

    internal IntervalAndLogger(
      CodeBlock.CodeSequenceTypes TheType,
      FrameTypes TheFrameType,
      int FunctionNumberIn)
      : base(TheType, TheFrameType, FunctionNumberIn)
    {
    }

    internal IntervalAndLogger Clone(
      Meter MyMeterIn,
      CodeBlock.CodeSequenceTypes TheType,
      FrameTypes TheFrameType,
      int FunctionNumberIn,
      ArrayList FunctionParameterList)
    {
      IntervalAndLogger intervalAndLogger = new IntervalAndLogger(TheType, TheFrameType, FunctionNumberIn);
      intervalAndLogger.MyMeter = MyMeterIn;
      intervalAndLogger.MaxEntries = this.MaxEntries;
      intervalAndLogger.EntrySize = this.EntrySize;
      intervalAndLogger.Type = this.Type;
      intervalAndLogger.MBusMaxEntries = this.MBusMaxEntries;
      intervalAndLogger.Interval = this.Interval;
      intervalAndLogger.MBusParameterLength = 0;
      intervalAndLogger.DifVifEntrySize = 0;
      foreach (Parameter functionParameter in FunctionParameterList)
      {
        if (functionParameter.BlockMark == LinkBlockTypes.LoggerStore)
        {
          if (intervalAndLogger.LoggerParameter == null)
            intervalAndLogger.LoggerParameter = new List<Parameter>();
          intervalAndLogger.LoggerParameter.Add(functionParameter);
          intervalAndLogger.MBusParameterLength += functionParameter.MBusParameterLength;
          intervalAndLogger.DifVifEntrySize += (int) functionParameter.DifVifSize;
        }
        else if (functionParameter.Name.EndsWith("_0T"))
        {
          intervalAndLogger.P_NextTimePoint = functionParameter;
          intervalAndLogger.InitialiseTimeVariablesFromMeterTime(DateTime.Now);
        }
        else if (functionParameter.Name.EndsWith("_1I"))
          intervalAndLogger.P_Intervall = functionParameter;
        else if (functionParameter.Name.EndsWith("_2S"))
          intervalAndLogger.P_StartAddress = functionParameter;
        else if (functionParameter.Name.EndsWith("_3E"))
          intervalAndLogger.P_EndAddress = functionParameter;
        else if (functionParameter.Name.EndsWith("_4W"))
          intervalAndLogger.P_WriteAddress = functionParameter;
        else if (functionParameter.Name.EndsWith("_5F"))
          intervalAndLogger.P_Flags = functionParameter;
      }
      return intervalAndLogger;
    }

    internal void ClearLogger()
    {
      if (this.LetLoggerUnchanged)
        return;
      if (this.P_WriteAddress != null)
      {
        this.P_WriteAddress.ValueEprom = this.P_StartAddress.ValueEprom;
        this.P_WriteAddress.UpdateByteList();
      }
      if (this.P_Flags != null)
      {
        this.P_Flags.ValueEprom = 0L;
        this.P_Flags.UpdateByteList();
      }
    }

    internal bool SetIntervalFromOpcode() => true;

    internal bool InitialiseTimeVariablesFromMeterTime(DateTime ClockTime)
    {
      if (this.Interval == 0U)
        return true;
      Parameter pNextTimePoint = this.P_NextTimePoint;
      DateTime dateTime = ZR_Calendar.Cal_GetDateTime((uint) pNextTimePoint.ValueEprom);
      this.NextEventDateTime = ClockTime;
      this.SetTimeToNextInterval(dateTime, (int) this.P_NextTimePoint.MinValue, ref this.NextEventDateTime);
      this.LastEventDateTime = this.NextEventDateTime;
      this.GetElapsedTimePoint(1, ref this.LastEventDateTime);
      uint num = this.Type != LoggerTypes.FixedLoggerFuture ? ZR_Calendar.Cal_GetMeterTime(this.LastEventDateTime) : ZR_Calendar.Cal_GetMeterTime(this.NextEventDateTime);
      pNextTimePoint.ValueEprom = (long) num;
      pNextTimePoint.UpdateByteList();
      if (this.P_Intervall != null)
      {
        this.P_Intervall.ValueEprom = (long) this.Interval;
        this.P_Intervall.UpdateByteList();
      }
      return true;
    }

    internal void SetTimeToNextInterval(
      DateTime NearIntervallTime,
      int FixOffsetMinutes,
      ref DateTime TimeToSet)
    {
      if (NearIntervallTime.Second > 50)
        NearIntervallTime = NearIntervallTime.AddSeconds((double) (60 - NearIntervallTime.Second));
      if (!this.MyMeter.MyHandler.IgnoreIntervalMinutesRaster)
      {
        if (FixOffsetMinutes > 0)
        {
          int num = (FixOffsetMinutes != 60 ? FixOffsetMinutes : 0) - NearIntervallTime.Minute;
          if (num != 0)
            NearIntervallTime = NearIntervallTime.AddMinutes((double) num);
        }
      }
      else if (this.Interval >= 3600U)
        NearIntervallTime = NearIntervallTime.AddMinutes((double) (NearIntervallTime.Minute * -1));
      TimeToSet = new DateTime(TimeToSet.Year, TimeToSet.Month, TimeToSet.Day, TimeToSet.Hour, TimeToSet.Minute, TimeToSet.Second);
      if (this.Interval == 31622400U)
      {
        int num = NearIntervallTime.Day - 1;
        NearIntervallTime = new DateTime(TimeToSet.Year, NearIntervallTime.Month, 1, NearIntervallTime.Hour, NearIntervallTime.Minute, NearIntervallTime.Second);
        NearIntervallTime = NearIntervallTime.AddDays((double) num);
        while (NearIntervallTime > TimeToSet)
          NearIntervallTime = NearIntervallTime.AddYears(-1);
        while (NearIntervallTime < TimeToSet)
          NearIntervallTime = NearIntervallTime.AddYears(1);
        TimeToSet = NearIntervallTime;
      }
      else if (this.Interval == 2678400U)
      {
        int num = NearIntervallTime.Day - 1;
        NearIntervallTime = new DateTime(TimeToSet.Year, NearIntervallTime.Month, 1, NearIntervallTime.Hour, NearIntervallTime.Minute, NearIntervallTime.Second);
        NearIntervallTime = NearIntervallTime.AddDays((double) num);
        while (NearIntervallTime > TimeToSet)
          NearIntervallTime = NearIntervallTime.AddMonths(-1);
        while (NearIntervallTime < TimeToSet)
          NearIntervallTime = NearIntervallTime.AddMonths(1);
        TimeToSet = NearIntervallTime;
      }
      else
      {
        long meterTime = (long) ZR_Calendar.Cal_GetMeterTime(NearIntervallTime);
        long num1 = ((long) ZR_Calendar.Cal_GetMeterTime(TimeToSet) - meterTime) / (long) this.Interval * (long) this.Interval;
        NearIntervallTime.AddSeconds((double) num1);
        long num2 = (long) this.Interval * -1L;
        while (NearIntervallTime > TimeToSet)
          NearIntervallTime = NearIntervallTime.AddSeconds((double) num2);
        while (NearIntervallTime < TimeToSet)
          NearIntervallTime = NearIntervallTime.AddSeconds((double) this.Interval);
        TimeToSet = NearIntervallTime;
        DateTime dateTime1 = new DateTime(2000, 1, 1);
        double num3 = Math.Truncate(TimeToSet.Subtract(dateTime1).TotalSeconds / (double) this.Interval) * (double) this.Interval;
        DateTime dateTime2 = dateTime1.AddSeconds(num3);
        TimeSpan timeSpan = dateTime2.Subtract(TimeToSet);
        double totalSeconds = timeSpan.TotalSeconds;
        while (Math.Abs(totalSeconds) >= 10.0)
        {
          dateTime2 = dateTime2.AddSeconds((double) this.Interval);
          timeSpan = dateTime2.Subtract(TimeToSet);
          totalSeconds = timeSpan.TotalSeconds;
          if (totalSeconds >= 10.0)
            goto label_33;
        }
        TimeToSet = dateTime2;
label_33:;
      }
    }

    internal void InitialiseNextTimePoint()
    {
      this.SetTimeToIntervalBoundary();
      if (this.Type == LoggerTypes.FixedLoggerFuture)
        this.P_NextTimePoint.ValueEprom = (long) ZR_Calendar.Cal_GetMeterTime(this.NextEventDateTime);
      else
        this.P_NextTimePoint.ValueEprom = (long) ZR_Calendar.Cal_GetMeterTime(this.LastEventDateTime);
    }

    internal void SetTimeToIntervalBoundary()
    {
      DateTime now = DateTime.Now;
      if (this.Interval == 31622400U)
      {
        this.LastEventDateTime = new DateTime(now.Year, 1, 1);
        this.NextEventDateTime = this.LastEventDateTime.AddYears(1);
      }
      else if (this.Interval == 2678400U)
      {
        this.LastEventDateTime = new DateTime(now.Year, now.Month, 1);
        this.NextEventDateTime = this.LastEventDateTime.AddMonths(1);
      }
      else
      {
        this.LastEventDateTime = new DateTime(now.Ticks / 10000000L / (long) this.Interval * (long) this.Interval * 10000000L);
        this.NextEventDateTime = this.LastEventDateTime.AddSeconds((double) this.Interval);
      }
    }

    internal void SetTimeToLastInterval(DateTime NearIntervallTime, ref DateTime TimeToSet)
    {
      DateTime dateTime = TimeToSet;
      this.SetTimeToNextInterval(NearIntervallTime, 0, ref TimeToSet);
      if (!(TimeToSet > dateTime))
        return;
      this.GetElapsedTimePoint(1, ref TimeToSet);
    }

    internal void GetElapsedTimePoint(int BackIntervalls, ref DateTime TimeToSet)
    {
      if (TimeToSet == DateTime.MinValue || BackIntervalls <= 0)
        return;
      if (this.Interval == 31622400U)
      {
        for (int index = 0; index < BackIntervalls; ++index)
          TimeToSet = TimeToSet.AddYears(-1);
      }
      else if (this.Interval == 2678400U)
      {
        for (int index = 0; index < BackIntervalls; ++index)
          TimeToSet = TimeToSet.AddMonths(-1);
      }
      else
        TimeToSet = TimeToSet.Subtract(new TimeSpan(0, 0, (int) this.Interval * BackIntervalls));
    }

    internal bool CompleteLoggerData()
    {
      try
      {
        byte codeValueCompiled1 = (byte) ((CodeObject) this.CodeList[0]).CodeValueCompiled;
        ushort codeValueCompiled2 = (ushort) ((CodeObject) this.CodeList[1]).CodeValueCompiled;
        if (codeValueCompiled1 == (byte) 119)
        {
          this.Interval = (uint) this.P_Intervall.ValueEprom;
        }
        else
        {
          for (int index = 0; index < IntervalAndLogger.CodeIntervalls.Length; ++index)
          {
            if ((int) IntervalAndLogger.CodeIntervalls[index].RuntimeCode == (int) codeValueCompiled1)
            {
              this.Interval = IntervalAndLogger.CodeIntervalls[index].Secounds;
              break;
            }
          }
          if (this.Interval == 0U)
            return false;
        }
        int num1 = (int) (byte) ((CodeObject) this.CodeList[2]).CodeValueCompiled - 1;
        int num2 = 0;
        this.LoggerParameter = new List<Parameter>();
        int num3 = 3;
        this.EntrySize = 0;
        do
        {
          ArrayList codeList1 = this.CodeList;
          int index1 = num3;
          int num4 = index1 + 1;
          byte codeValueCompiled3 = (byte) ((CodeObject) codeList1[index1]).CodeValueCompiled;
          int num5 = num2 + 1;
          int num6;
          Parameter parameter;
          switch (codeValueCompiled3)
          {
            case 48:
              goto label_36;
            case 51:
              num6 = 4;
              parameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Sta_Secounds"];
              break;
            case 80:
              return true;
            case 83:
              num6 = 4;
              parameter = (Parameter) this.MyMeter.AllParameters[(object) "Energ_WaermeEnergDisplay"];
              break;
            case 120:
              return true;
            case 128:
              num6 = 1;
              num5 += 2;
              parameter = this.GetPtrParameter((CodeObject) this.CodeList[num4++]);
              break;
            case 139:
              num6 = 2;
              num5 += 2;
              parameter = this.GetPtrParameter((CodeObject) this.CodeList[num4++]);
              break;
            case 147:
              num6 = 4;
              parameter = (Parameter) this.MyMeter.AllParameters[(object) "Vol_VolumenDisplay"];
              break;
            case 155:
              num6 = 4;
              num5 += 2;
              parameter = this.GetPtrParameter((CodeObject) this.CodeList[num4++]);
              break;
            case 160:
              num6 = 4;
              parameter = (Parameter) this.MyMeter.AllParameters[(object) "Energ_KaelteEnergDisplay"];
              break;
            case 195:
              num6 = 1;
              num5 += 2;
              parameter = this.GetPtrParameter((CodeObject) this.CodeList[num4++]);
              break;
            case 203:
              num6 = 2;
              num5 += 2;
              parameter = this.GetPtrParameter((CodeObject) this.CodeList[num4++]);
              break;
            case 219:
              num6 = 4;
              num5 += 2;
              parameter = this.GetPtrParameter((CodeObject) this.CodeList[num4++]);
              break;
            default:
              throw new ArgumentOutOfRangeException("Illegal logger parameter load code at logger " + ((Function) this.MyMeter.MyHandler.MyLoadedFunctions.LoadedFunctionHeaders[(object) (ushort) this.FunctionNumber]).Name);
          }
          if (num6 != parameter.Size)
            throw new ArgumentOutOfRangeException("Illegal logger parameter size at logger " + ((Function) this.MyMeter.MyHandler.MyLoadedFunctions.LoadedFunctionHeaders[(object) (ushort) this.FunctionNumber]).Name);
          ArrayList codeList2 = this.CodeList;
          int index2 = num4;
          num3 = index2 + 1;
          byte codeValueCompiled4 = (byte) ((CodeObject) codeList2[index2]).CodeValueCompiled;
          num2 = num5 + 1;
          switch (codeValueCompiled4)
          {
            case 35:
              ++this.EntrySize;
              break;
            case 43:
              this.EntrySize += 2;
              break;
            case 59:
              this.EntrySize += 4;
              break;
            default:
              if (this.EntrySize == 0)
                return true;
              throw new ArgumentOutOfRangeException("Illegal logger store code at logger " + ((Function) this.MyMeter.MyHandler.MyLoadedFunctions.LoadedFunctionHeaders[(object) (ushort) this.FunctionNumber]).Name);
          }
          this.LoggerParameter.Add(parameter);
        }
        while (num2 < num1);
      }
      catch (Exception ex)
      {
        throw new ArgumentOutOfRangeException("Illegal logger store code at logger " + ((Function) this.MyMeter.MyHandler.MyLoadedFunctions.LoadedFunctionHeaders[(object) (ushort) this.FunctionNumber]).Name + ZR_Constants.SystemNewLine + ex.ToString());
      }
label_36:
      if (this.P_EndAddress != null)
        this.MaxEntries = (int) ((this.P_EndAddress.ValueEprom - this.P_StartAddress.ValueEprom) / (long) this.EntrySize);
      return true;
    }

    internal bool ReadDataToEpromArray()
    {
      if (this.EpromDataAvailable || this.P_EndAddress == null)
        return true;
      int num = ((ulong) this.P_Flags.ValueEprom & 128UL) <= 0UL ? (int) (this.P_WriteAddress.ValueEprom - 1L) : (int) (this.P_EndAddress.ValueEprom - 1L);
      int valueEprom = (int) this.P_StartAddress.ValueEprom;
      int NumberOfBytes = num - valueEprom + 1;
      ByteField MemoryData;
      if (!this.MyMeter.MyHandler.SerBus.ReadMemory(MemoryLocation.EEPROM, valueEprom, NumberOfBytes, out MemoryData))
      {
        ZR_ClassLibMessages.AddErrorDescription("Read logger data error");
        return false;
      }
      for (int index = 0; index < MemoryData.Count; ++index)
        this.MyMeter.Eprom[valueEprom + index] = MemoryData.Data[index];
      if (this.MyMeter.UsedEpromSize <= num)
        this.MyMeter.UsedEpromSize = num + 1;
      return true;
    }

    private Parameter GetPtrParameter(CodeObject TheCodeObj)
    {
      string codeValue = TheCodeObj.CodeValue;
      if (codeValue.StartsWith("LateLink:0x"))
      {
        int key = int.Parse(codeValue.Substring(11), NumberStyles.HexNumber);
        if (TheCodeObj.CodeType == CodeObject.CodeTypes.iPTR)
        {
          TheCodeObj.CodeValue = ((Parameter) this.MyMeter.AllRamParametersByAddress[(object) key]).FullName;
        }
        else
        {
          if (TheCodeObj.CodeType != CodeObject.CodeTypes.ePTR)
            throw new ArgumentOutOfRangeException("External logger time interval not supported");
          TheCodeObj.CodeValue = ((Parameter) this.MyMeter.AllEpromParametersByAddress[(object) key]).FullName;
        }
      }
      return (Parameter) this.MyMeter.AllParameters[(object) TheCodeObj.CodeValue];
    }

    internal bool AdjustFunction()
    {
      int CodeIndex1 = 0;
      CodeObject loggerCodeObject1 = this.GetNextLoggerCodeObject(ref CodeIndex1);
      int address = loggerCodeObject1.Address;
      byte[] eprom1 = this.MyMeter.Eprom;
      int index1 = address;
      int num1 = index1 + 1;
      byte num2 = eprom1[index1];
      this.MyMeter.MyCompiler.CompileCodeObject(loggerCodeObject1);
      byte[] eprom2 = this.MyMeter.Eprom;
      int index2 = num1;
      int num3 = index2 + 1;
      int num4 = (int) eprom2[index2];
      byte[] eprom3 = this.MyMeter.Eprom;
      int index3 = num3;
      int num5 = index3 + 1;
      int num6 = (int) eprom3[index3] << 8;
      int num7 = num4 + num6;
      int CodeIndex2 = CodeIndex1 + 1;
      Parameter pNextTimePoint = this.P_NextTimePoint;
      byte[] eprom4 = this.MyMeter.Eprom;
      int index4 = num7;
      int num8 = index4 + 1;
      int num9 = (int) eprom4[index4];
      byte[] eprom5 = this.MyMeter.Eprom;
      int index5 = num8;
      int num10 = index5 + 1;
      int num11 = (int) eprom5[index5] << 8;
      int num12 = num9 + num11;
      byte[] eprom6 = this.MyMeter.Eprom;
      int index6 = num10;
      int num13 = index6 + 1;
      int num14 = (int) eprom6[index6] << 16;
      int num15 = num12 + num14;
      byte[] eprom7 = this.MyMeter.Eprom;
      int index7 = num13;
      int num16 = index7 + 1;
      int num17 = (int) eprom7[index7] << 24;
      long num18 = (long) (uint) (num15 + num17);
      pNextTimePoint.ValueEprom = num18;
      if (num2 == (byte) 119)
      {
        if (this.Type != LoggerTypes.ShortCycleLogger)
          throw new ArgumentOutOfRangeException("Illegal logger type code");
        byte[] eprom8 = this.MyMeter.Eprom;
        int index8 = num16;
        int num19 = index8 + 1;
        int num20 = (int) eprom8[index8];
        byte[] eprom9 = this.MyMeter.Eprom;
        int index9 = num19;
        int num21 = index9 + 1;
        int num22 = (int) eprom9[index9] << 8;
        int num23 = num20 + num22;
        byte[] eprom10 = this.MyMeter.Eprom;
        int index10 = num21;
        int num24 = index10 + 1;
        int num25 = (int) eprom10[index10] << 16;
        int num26 = num23 + num25;
        byte[] eprom11 = this.MyMeter.Eprom;
        int index11 = num24;
        num16 = index11 + 1;
        int num27 = (int) eprom11[index11] << 24;
        this.Interval = (uint) (num26 + num27);
        this.P_Intervall.ValueEprom = (long) this.Interval;
      }
      else
      {
        for (int index12 = 0; index12 < IntervalAndLogger.CodeIntervalls.Length; ++index12)
        {
          if ((int) IntervalAndLogger.CodeIntervalls[index12].RuntimeCode == (int) num2)
          {
            this.Interval = IntervalAndLogger.CodeIntervalls[index12].Secounds;
            loggerCodeObject1.CodeValue = IntervalAndLogger.CodeIntervalls[index12].RuntimeCodeString;
            break;
          }
        }
      }
      if (this.Interval == 0U)
        throw new ArgumentOutOfRangeException("Illegal logger cycle code");
      Parameter pStartAddress = this.P_StartAddress;
      byte[] eprom12 = this.MyMeter.Eprom;
      int index13 = num16;
      int num28 = index13 + 1;
      int num29 = (int) eprom12[index13];
      byte[] eprom13 = this.MyMeter.Eprom;
      int index14 = num28;
      int num30 = index14 + 1;
      int num31 = (int) eprom13[index14] << 8;
      long num32 = (long) (uint) (num29 + num31);
      pStartAddress.ValueEprom = num32;
      Parameter pEndAddress = this.P_EndAddress;
      byte[] eprom14 = this.MyMeter.Eprom;
      int index15 = num30;
      int num33 = index15 + 1;
      int num34 = (int) eprom14[index15];
      byte[] eprom15 = this.MyMeter.Eprom;
      int index16 = num33;
      int num35 = index16 + 1;
      int num36 = (int) eprom15[index16] << 8;
      long num37 = (long) (uint) (num34 + num36);
      pEndAddress.ValueEprom = num37;
      byte[] eprom16 = this.MyMeter.Eprom;
      int index17 = num35;
      int num38 = index17 + 1;
      int num39 = (int) eprom16[index17];
      byte[] eprom17 = this.MyMeter.Eprom;
      int index18 = num38;
      int num40 = index18 + 1;
      int num41 = (int) eprom17[index18] << 8;
      int num42 = num39 + num41;
      byte[] eprom18 = this.MyMeter.Eprom;
      int index19 = num40;
      int num43 = index19 + 1;
      byte num44 = eprom18[index19];
      byte[] eprom19 = this.MyMeter.Eprom;
      int index20 = num5;
      int num45 = index20 + 1;
      byte num46 = eprom19[index20];
      CodeObject loggerCodeObject2 = this.GetNextLoggerCodeObject(ref CodeIndex2);
      loggerCodeObject2.CodeValue = num46.ToString();
      this.MyMeter.MyCompiler.CompileCodeObject(loggerCodeObject2);
      int num47 = num45 + (int) num46 - 1;
      this.EntrySize = 0;
      while (num45 < num47)
      {
        int num48 = 4;
        int num49 = 0;
        CodeObject.CodeTypes codeTypes = CodeObject.CodeTypes.BYTE;
        byte[] eprom20 = this.MyMeter.Eprom;
        int index21 = num45;
        int num50 = index21 + 1;
        string str1;
        switch (eprom20[index21])
        {
          case 51:
            str1 = "RUI_CODE_Load_SysTime";
            break;
          case 83:
            str1 = "RUI_CODE_Load_Energie";
            break;
          case 128:
            codeTypes = CodeObject.CodeTypes.iPTR;
            num48 = 1;
            byte[] eprom21 = this.MyMeter.Eprom;
            int index22 = num50;
            int num51 = index22 + 1;
            int num52 = (int) eprom21[index22];
            byte[] eprom22 = this.MyMeter.Eprom;
            int index23 = num51;
            num50 = index23 + 1;
            int num53 = (int) eprom22[index23] << 8;
            num49 = num52 + num53;
            str1 = "RUI_CODE_Load RUI_VAR_1BYTE";
            break;
          case 139:
            codeTypes = CodeObject.CodeTypes.iPTR;
            num48 = 2;
            byte[] eprom23 = this.MyMeter.Eprom;
            int index24 = num50;
            int num54 = index24 + 1;
            int num55 = (int) eprom23[index24];
            byte[] eprom24 = this.MyMeter.Eprom;
            int index25 = num54;
            num50 = index25 + 1;
            int num56 = (int) eprom24[index25] << 8;
            num49 = num55 + num56;
            str1 = "RUI_CODE_Load RUI_VAR_2BYTE";
            break;
          case 147:
            str1 = "RUI_CODE_Load_Volume";
            break;
          case 155:
            codeTypes = CodeObject.CodeTypes.iPTR;
            byte[] eprom25 = this.MyMeter.Eprom;
            int index26 = num50;
            int num57 = index26 + 1;
            int num58 = (int) eprom25[index26];
            byte[] eprom26 = this.MyMeter.Eprom;
            int index27 = num57;
            num50 = index27 + 1;
            int num59 = (int) eprom26[index27] << 8;
            num49 = num58 + num59;
            str1 = "RUI_CODE_Load RUI_VAR_4BYTE";
            break;
          case 160:
            str1 = "RUI_CODE_Load_ColdEnergie";
            break;
          case 195:
            codeTypes = CodeObject.CodeTypes.ePTR;
            num48 = 1;
            byte[] eprom27 = this.MyMeter.Eprom;
            int index28 = num50;
            int num60 = index28 + 1;
            int num61 = (int) eprom27[index28];
            byte[] eprom28 = this.MyMeter.Eprom;
            int index29 = num60;
            num50 = index29 + 1;
            int num62 = (int) eprom28[index29] << 8;
            num49 = num61 + num62;
            str1 = "RUI_CODE_Load RUI_VAR_EEPROM RUI_VAR_1BYTE";
            break;
          case 203:
            codeTypes = CodeObject.CodeTypes.ePTR;
            num48 = 2;
            byte[] eprom29 = this.MyMeter.Eprom;
            int index30 = num50;
            int num63 = index30 + 1;
            int num64 = (int) eprom29[index30];
            byte[] eprom30 = this.MyMeter.Eprom;
            int index31 = num63;
            num50 = index31 + 1;
            int num65 = (int) eprom30[index31] << 8;
            num49 = num64 + num65;
            str1 = "RUI_CODE_Load RUI_VAR_EEPROM RUI_VAR_2BYTE";
            break;
          case 219:
            codeTypes = CodeObject.CodeTypes.ePTR;
            byte[] eprom31 = this.MyMeter.Eprom;
            int index32 = num50;
            int num66 = index32 + 1;
            int num67 = (int) eprom31[index32];
            byte[] eprom32 = this.MyMeter.Eprom;
            int index33 = num66;
            num50 = index33 + 1;
            int num68 = (int) eprom32[index33] << 8;
            num49 = num67 + num68;
            str1 = "RUI_CODE_Load RUI_VAR_EEPROM RUI_VAR_4BYTE";
            break;
          default:
            throw new ArgumentOutOfRangeException("Unknown logger parameter load code");
        }
        byte[] eprom33 = this.MyMeter.Eprom;
        int index34 = num50;
        num45 = index34 + 1;
        string str2;
        switch (eprom33[index34])
        {
          case 35:
            str2 = "RUI_CODE_LOGGER_STORE_1BYTE";
            break;
          case 43:
            str2 = "RUI_CODE_LOGGER_STORE_2BYTE";
            break;
          case 59:
            str2 = "RUI_CODE_LOGGER_STORE_4BYTE";
            break;
          default:
            throw new ArgumentOutOfRangeException("Unknown logger parameter store code");
        }
        CodeObject loggerCodeObject3 = this.GetNextLoggerCodeObject(ref CodeIndex2);
        loggerCodeObject3.CodeType = CodeObject.CodeTypes.BYTE;
        loggerCodeObject3.Size = 1;
        loggerCodeObject3.CodeValue = str1;
        if (codeTypes != 0)
        {
          CodeObject loggerCodeObject4 = this.GetNextLoggerCodeObject(ref CodeIndex2);
          loggerCodeObject4.CodeType = codeTypes;
          loggerCodeObject4.Size = 2;
          loggerCodeObject4.CodeValue = "LateLink:0x" + num49.ToString("x04");
        }
        CodeObject loggerCodeObject5 = this.GetNextLoggerCodeObject(ref CodeIndex2);
        loggerCodeObject5.CodeType = CodeObject.CodeTypes.BYTE;
        loggerCodeObject5.Size = 1;
        loggerCodeObject5.CodeValue = str2;
        this.EntrySize += num48;
      }
      if (num45 != num47)
        throw new ArgumentOutOfRangeException("Illegal logger parameter list");
      this.MaxEntries = (int) ((this.P_EndAddress.ValueEprom - this.P_StartAddress.ValueEprom) / (long) this.EntrySize);
      if (this.MyMeter.ConfigLoggers == null)
        this.MyMeter.ConfigLoggers = new SortedList<uint, Function>();
      if (this.MyMeter.ConfigLoggers.IndexOfKey((uint) (ushort) this.FunctionNumber) < 0)
        this.MyMeter.ConfigLoggers.Add((uint) (ushort) this.FunctionNumber, (Function) this.MyMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) this.FunctionNumber]);
      return true;
    }

    private void CreateAllPotentialLoggerParameters()
    {
      if (this.MyMeter.PotentialLoggerParameters != null)
        return;
      this.MyMeter.PotentialLoggerParameters = new SortedList<string, Parameter>();
      foreach (Parameter BaseParameter in (IEnumerable) this.MyMeter.MyMBusList.AllMBusParameters.Values)
      {
        LoggerParameterData loggerParameterData = new LoggerParameterData(BaseParameter, this.MyMeter);
        BaseParameter.LoggerData = loggerParameterData;
        if (!(loggerParameterData.ZDF_ParameterID == "NoZDF_Param"))
          this.MyMeter.PotentialLoggerParameters.Add(BaseParameter.FullName, BaseParameter);
      }
    }

    private CodeObject GetNextLoggerCodeObject(ref int CodeIndex)
    {
      CodeObject loggerCodeObject;
      if (this.CodeList.Count > CodeIndex)
      {
        loggerCodeObject = (CodeObject) this.CodeList[CodeIndex];
      }
      else
      {
        loggerCodeObject = new CodeObject((int) (ushort) this.FunctionNumber);
        this.CodeList.Add((object) loggerCodeObject);
      }
      ++CodeIndex;
      return loggerCodeObject;
    }

    public LoggerInfo GetLoggerInfo(out int LoggerMemorySize)
    {
      this.CreateAllPotentialLoggerParameters();
      LoggerMemorySize = this.MyMeter.MyIdent.extEEPSize - this.MyMeter.MyLoggerStore.BlockStartAddress;
      if (this.MyLoggerInfo != null)
        return this.MyLoggerInfo;
      if (this.Type != LoggerTypes.FixedLogger && this.Type != LoggerTypes.FixedLoggerFuture && this.Type != LoggerTypes.ConfigLogger && this.Type != LoggerTypes.ShortCycleLogger || this.EntrySize == 0)
        return (LoggerInfo) null;
      this.MyLoggerInfo = new LoggerInfo(this);
      this.MyLoggerInfo.AllPotentialParameters = new LoggerParameterData[this.MyMeter.PotentialLoggerParameters.Count];
      for (int index = 0; index < this.MyMeter.PotentialLoggerParameters.Count; ++index)
      {
        Parameter parameter = this.MyMeter.PotentialLoggerParameters.Values[index];
        this.MyLoggerInfo.AllPotentialParameters[index] = parameter.LoggerData;
      }
      this.MyLoggerInfo.LoggerName = ((Function) this.MyMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) this.FunctionNumber]).Name;
      this.MyLoggerInfo.EntrySize = this.EntrySize;
      this.MyLoggerInfo.MaxEntries = this.MaxEntries;
      this.MyLoggerInfo.StartAddress = (int) this.P_StartAddress.ValueEprom;
      this.MyLoggerInfo.EndAddress = (int) this.P_EndAddress.ValueEprom;
      this.MyLoggerInfo.WriteAddress = (int) this.P_WriteAddress.ValueEprom;
      this.MyLoggerInfo.MaxRamBytes = this.MyMeter.MyIdent.extEEPSize - this.MyMeter.MyLoggerStore.StartAddressOfNextBlock + this.EntrySize * this.MaxEntries;
      if (((ulong) this.P_Flags.ValueEprom & 128UL) > 0UL)
      {
        this.MyLoggerInfo.AvailableEntries = this.MaxEntries;
        this.MyLoggerInfo.LoggerFull = true;
      }
      else
      {
        this.MyLoggerInfo.AvailableEntries = (int) ((this.P_WriteAddress.ValueEprom - this.P_StartAddress.ValueEprom) / (long) this.EntrySize);
        this.MyLoggerInfo.LoggerFull = false;
      }
      for (int index = 0; index < IntervalAndLogger.CodeIntervalls.Length; ++index)
      {
        if ((int) IntervalAndLogger.CodeIntervalls[index].Secounds == (int) this.Interval)
        {
          this.MyLoggerInfo.Intervall = IntervalAndLogger.CodeIntervalls[index].Description;
          this.MyLoggerInfo.TimeListIndex = index;
          break;
        }
      }
      if (this.LastEventDateTime == DateTime.MinValue)
        this.SetTimeToIntervalBoundary();
      this.MyLoggerInfo.LastTimePoint = this.LastEventDateTime;
      this.MyLoggerInfo.FirstTimePoint = this.MyLoggerInfo.LastTimePoint;
      this.GetElapsedTimePoint(this.MyLoggerInfo.AvailableEntries - 1, ref this.MyLoggerInfo.FirstTimePoint);
      this.MyLoggerInfo.LastStoredTimePoint = this.MyLoggerInfo.LastTimePoint.ToShortDateString() + " " + this.MyLoggerInfo.LastTimePoint.ToShortTimeString();
      this.MyLoggerInfo.FirstStoredTimePoint = this.MyLoggerInfo.FirstTimePoint.ToShortDateString() + " " + this.MyLoggerInfo.FirstTimePoint.ToShortTimeString();
      this.MyLoggerInfo.EstimatedReadoutTime = (this.MyLoggerInfo.AvailableEntries * this.EntrySize * 11 * 2 / 2400 + 1).ToString() + " Sec.";
      this.MyLoggerInfo.AllParameters = new LoggerParameterData[this.LoggerParameter.Count];
      this.MyLoggerInfo.IndexOfTimeParameter = -1;
      int index1 = 0;
      foreach (Parameter BaseParameter in this.LoggerParameter)
      {
        if (BaseParameter.LoggerData == null)
          BaseParameter.LoggerData = new LoggerParameterData(BaseParameter, this.MyMeter);
        this.MyLoggerInfo.AllParameters[index1] = BaseParameter.LoggerData;
        if (BaseParameter.FullName == "DefaultFunction.Sta_Secounds")
          this.MyLoggerInfo.IndexOfTimeParameter = index1;
        ++index1;
      }
      return this.MyLoggerInfo;
    }

    internal bool ReprogramLoggerData(LoggerInfo OldLogger)
    {
      int[] numArray = new int[this.LoggerParameter.Count];
      bool flag = false;
      for (int index1 = 0; index1 < this.LoggerParameter.Count; ++index1)
      {
        numArray[index1] = -1;
        for (int index2 = 0; index2 < OldLogger.MyLogger.LoggerParameter.Count; ++index2)
        {
          if (this.LoggerParameter[index1].FullName == OldLogger.MyLogger.LoggerParameter[index2].FullName && this.LoggerParameter[index1].DifVifs == OldLogger.MyLogger.LoggerParameter[index2].DifVifs)
          {
            numArray[index1] = index2;
            if (this.LoggerParameter[index1].FullName != "DefaultFunction.Sta_Secounds")
            {
              flag = true;
              break;
            }
            break;
          }
        }
      }
      if (!flag)
      {
        ZR_ClassLibMessages.AddErrorDescription("No logger data usable from logger: " + OldLogger.LoggerName);
        return true;
      }
      int num1 = OldLogger.LoggerData.Count;
      if (num1 > this.MaxEntries)
        num1 = this.MaxEntries;
      ByteField LoggerData = new ByteField(this.EntrySize * num1);
      for (int index3 = OldLogger.LoggerData.Count - num1; index3 < OldLogger.LoggerData.Count; ++index3)
      {
        for (int index4 = 0; index4 < this.LoggerParameter.Count; ++index4)
        {
          int size = this.LoggerParameter[index4].Size;
          long num2;
          if (this.LoggerParameter[index4].FullName == "DefaultFunction.Sta_Secounds")
            num2 = (long) ZR_Calendar.Cal_GetMeterTime(OldLogger.LoggerData.Keys[index3]);
          else if (numArray[index4] < 0)
          {
            num2 = 0L;
          }
          else
          {
            StringBuilder PValue = new StringBuilder(OldLogger.LoggerData.Values[index3][numArray[index4]]);
            int unitExponent = OldLogger.AllParameters[numArray[index4]].UnitExponent;
            ParameterService.ResetStringExpo(ref PValue, unitExponent * -1);
            num2 = long.Parse(PValue.ToString());
          }
          for (int index5 = 0; index5 < size; ++index5)
          {
            byte Byte = (byte) ((ulong) num2 & (ulong) byte.MaxValue);
            LoggerData.Add(Byte);
            num2 >>= 8;
          }
        }
      }
      return this.WriteDataToLogger(LoggerData);
    }

    internal bool WriteDataToLogger(ByteField LoggerData)
    {
      if (!this.MyMeter.MyCommunication.MyBus.WriteMemory(MemoryLocation.EEPROM, (int) this.P_StartAddress.ValueEprom, LoggerData))
        return false;
      this.P_WriteAddress.ValueEprom = this.P_StartAddress.ValueEprom + (long) LoggerData.Count;
      if (this.P_WriteAddress.ValueEprom >= this.P_EndAddress.ValueEprom)
      {
        this.P_WriteAddress.ValueEprom = this.P_StartAddress.ValueEprom;
        this.P_Flags.ValueEprom &= 128L;
      }
      else
        this.P_Flags.ValueEprom = 0L;
      if (ZR_Calendar.Cal_GetDateTime((uint) this.P_NextTimePoint.ValueEprom) <= DateTime.Now)
      {
        this.P_NextTimePoint.ValueEprom = (long) ZR_Calendar.Cal_GetMeterTime(this.NextEventDateTime);
        this.P_NextTimePoint.UpdateByteList();
        LoggerData = new ByteField(this.P_NextTimePoint.LinkByteList);
        if (!this.MyMeter.MyCommunication.MyBus.WriteMemory(MemoryLocation.EEPROM, this.P_NextTimePoint.Address, LoggerData))
          return false;
      }
      this.P_Flags.UpdateByteList();
      LoggerData = new ByteField(this.P_Flags.LinkByteList);
      if (!this.MyMeter.MyCommunication.MyBus.WriteMemory(MemoryLocation.EEPROM, this.P_Flags.Address, LoggerData))
        return false;
      this.P_WriteAddress.UpdateByteList();
      LoggerData = new ByteField(this.P_WriteAddress.LinkByteList);
      return this.MyMeter.MyCommunication.MyBus.WriteMemory(MemoryLocation.EEPROM, this.P_WriteAddress.Address, LoggerData);
    }

    public class IntervallCycleInfos
    {
      public uint Secounds;
      public string Description;
      public byte RuntimeCode;
      internal string RuntimeCodeString;

      internal IntervallCycleInfos(
        uint SecoundsIn,
        string DescriptionIn,
        byte RuntimeCodeIn,
        string RuntimeCodeStringIn)
      {
        this.Secounds = SecoundsIn;
        this.Description = DescriptionIn;
        this.RuntimeCode = RuntimeCodeIn;
        this.RuntimeCodeString = RuntimeCodeStringIn;
      }
    }
  }
}


--- IoFunctionResourceCorrelation.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.IoFunctionResourceCorrelation
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class IoFunctionResourceCorrelation
  {
    private static IoFunctionResourceCorrelation[] IoFuncResCorrelations = new IoFunctionResourceCorrelation[14]
    {
      new IoFunctionResourceCorrelation(InOutFunctions.IO1_Off, new string[0], new string[2]
      {
        "Inp1On",
        "Out1On"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO1_Input, new string[1]
      {
        "Inp1On"
      }, new string[1]{ "Out1On" }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO1_Energy, new string[2]
      {
        "Out1On",
        "EnToOut1"
      }, new string[5]
      {
        "Inp1On",
        "VolToOut1",
        "CEnToOut1",
        "ErrToOut1",
        "Out1Special"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO1_Volume, new string[2]
      {
        "Out1On",
        "VolToOut1"
      }, new string[5]
      {
        "Inp1On",
        "EnToOut1",
        "CEnToOut1",
        "ErrToOut1",
        "Out1Special"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO1_CEnergy, new string[2]
      {
        "Out1On",
        "CEnToOut1"
      }, new string[5]
      {
        "Inp1On",
        "EnToOut1",
        "VolToOut1",
        "ErrToOut1",
        "Out1Special"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO1_Error, new string[2]
      {
        "Out1On",
        "ErrToOut1"
      }, new string[5]
      {
        "Inp1On",
        "EnToOut1",
        "VolToOut1",
        "CEnToOut1",
        "Out1Special"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO1_Special, new string[2]
      {
        "Out1On",
        "Out1Special"
      }, new string[5]
      {
        "Inp1On",
        "EnToOut1",
        "VolToOut1",
        "CEnToOut1",
        "ErrToOut1"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO2_Off, new string[0], new string[2]
      {
        "Inp2On",
        "Out2On"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO2_Input, new string[1]
      {
        "Inp2On"
      }, new string[1]{ "Out2On" }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO2_Energy, new string[2]
      {
        "Out2On",
        "EnToOut2"
      }, new string[5]
      {
        "Inp2On",
        "VolToOut2",
        "CEnToOut2",
        "ErrToOut2",
        "Out2Special"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO2_Volume, new string[2]
      {
        "Out2On",
        "VolToOut2"
      }, new string[5]
      {
        "Inp2On",
        "EnToOut2",
        "CEnToOut2",
        "ErrToOut2",
        "Out2Special"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO2_CEnergy, new string[2]
      {
        "Out2On",
        "CEnToOut2"
      }, new string[5]
      {
        "Inp2On",
        "EnToOut2",
        "VolToOut2",
        "ErrToOut2",
        "Out2Special"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO2_Error, new string[2]
      {
        "Out2On",
        "ErrToOut2"
      }, new string[5]
      {
        "Inp2On",
        "EnToOut2",
        "VolToOut2",
        "CEnToOut2",
        "Out2Special"
      }),
      new IoFunctionResourceCorrelation(InOutFunctions.IO2_Special, new string[2]
      {
        "Out2On",
        "Out2Special"
      }, new string[5]
      {
        "Inp2On",
        "EnToOut2",
        "VolToOut2",
        "CEnToOut2",
        "ErrToOut2"
      })
    };
    private InOutFunctions IoFunction;
    private string[] ThisResourcesAreNeaded;
    private string[] ImpossibleResources;

    internal IoFunctionResourceCorrelation(
      InOutFunctions IoFunction,
      string[] ThisResourcesAreNeaded,
      string[] ImpossibleResources)
    {
      this.IoFunction = IoFunction;
      this.ThisResourcesAreNeaded = ThisResourcesAreNeaded;
      this.ImpossibleResources = ImpossibleResources;
    }

    internal static string GetImpossibleResource(
      InOutFunctions TheIo1Function,
      InOutFunctions TheIo2Function,
      string[] SuppliedResources)
    {
      for (int index1 = 0; index1 < IoFunctionResourceCorrelation.IoFuncResCorrelations.Length; ++index1)
      {
        if (IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].IoFunction == TheIo1Function || IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].IoFunction == TheIo2Function)
        {
          for (int index2 = 0; index2 < IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].ImpossibleResources.Length; ++index2)
          {
            if (!(IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].ImpossibleResources[index2] == ""))
            {
              for (int index3 = 0; index3 < SuppliedResources.Length; ++index3)
              {
                if (IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].ImpossibleResources[index2] == SuppliedResources[index3])
                  return SuppliedResources[index3];
              }
            }
          }
        }
      }
      return (string) null;
    }

    internal static string GetNeadedResources(
      InOutFunctions TheIo1Function,
      InOutFunctions TheIo2Function,
      SortedList AvailableResources)
    {
      string neadedResources = "";
      for (int index1 = 0; index1 < IoFunctionResourceCorrelation.IoFuncResCorrelations.Length; ++index1)
      {
        if (IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].IoFunction == TheIo1Function || IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].IoFunction == TheIo2Function)
        {
          for (int index2 = 0; index2 < IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].ThisResourcesAreNeaded.Length; ++index2)
          {
            if (!(IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].ThisResourcesAreNeaded[index2] == "") && AvailableResources.IndexOfKey((object) IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].ThisResourcesAreNeaded[index2]) < 0)
              neadedResources = neadedResources + IoFunctionResourceCorrelation.IoFuncResCorrelations[index1].ThisResourcesAreNeaded[index2] + ";";
          }
        }
      }
      return neadedResources;
    }

    internal static bool GetNeadedIOFunction(
      string ResString,
      out ulong NeadedIOFunction,
      out ulong NeadedIOFunctionMask)
    {
      NeadedIOFunction = 0UL;
      NeadedIOFunctionMask = 15UL;
      for (int index = 0; index < IoFunctionResourceCorrelation.IoFuncResCorrelations.Length; ++index)
      {
        if (IoFunctionResourceCorrelation.IoFuncResCorrelations[index].ThisResourcesAreNeaded.Length != 0 && IoFunctionResourceCorrelation.IoFuncResCorrelations[index].ThisResourcesAreNeaded[0].Length != 0 && IoFunctionResourceCorrelation.IoFuncResCorrelations[index].ThisResourcesAreNeaded[IoFunctionResourceCorrelation.IoFuncResCorrelations[index].ThisResourcesAreNeaded.Length - 1] == ResString)
        {
          NeadedIOFunction = (ulong) IoFunctionResourceCorrelation.IoFuncResCorrelations[index].IoFunction;
          if (IoFunctionResourceCorrelation.IoFuncResCorrelations[index].IoFunction >= InOutFunctions.IO2_Off)
            NeadedIOFunctionMask = 240UL;
          return true;
        }
      }
      return false;
    }
  }
}


--- IZR_HandlerFunctions.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.IZR_HandlerFunctions
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public interface IZR_HandlerFunctions : I_ZR_Component
  {
    bool Undo();

    LoggerRestor LoggerRestoreSetup { get; set; }

    bool BackupForEachRead { get; set; }

    bool BaseTypeEditMode { get; set; }

    bool UseBaseTypeTemplate { get; set; }

    bool ShowFunctionAddDelMessages { get; set; }

    bool ShowFunctionRemoveMessages { get; set; }

    bool ChecksumErrorsAsWarning { get; set; }

    bool setMaximumBaudrate(bool setMaxBaudrate);

    int ClearAll();

    void ClearConnectedReadAndWorkMeter();

    int openDBDevice(ref ZR_MeterIdent theIdentity, DateTime theTimePoint);

    bool GetSavedDBDeviceData(out ZR_MeterIdent theIdentity, out DateTime theTimePoint);

    int openType(int theMeterInfoID);

    bool OverloadType(string OverloadSettings);

    bool OverloadIdentAndCalibrationData(ZR_HandlerFunctions.MeterObjects SourceMeterObject);

    bool DeleteMeter(ZR_HandlerFunctions.MeterObjects MeterObject);

    bool CopyMeter(ZR_HandlerFunctions.MeterObjects SourceMeterObject);

    bool PastMeter(ZR_HandlerFunctions.MeterObjects MeterObject);

    bool IsWriteEnabled();

    bool IsMeterObjectAvailable(ZR_HandlerFunctions.MeterObjects MeterObject);

    bool IsDatabaseSwitchTrue(string Switch);

    int openType(int TypeMeterInfoID, bool ignoreCompilerError);

    bool openType(int TypeMeterInfoID, int FirmwareVersion, bool DeleteReadMeter);

    int openType(ref ZR_MeterIdent theIdentity, bool DeleteReadMeter);

    int saveType(ZR_MeterIdent TypeOverrideIdent);

    int checkConnection();

    int checkConnection(out string theFirmwareVersion);

    bool IdentConnectedMeter(out ZR_MeterIdent theIdentity);

    bool IsReadMeterUnchanged();

    bool ReadConnectedDevice();

    bool ReadConnectedDevice(out ZR_MeterIdent theIdentity);

    int progDevice();

    bool progDevice(DateTime NewMeterTime);

    bool progDevice(
      DateTime NewMeterTime,
      bool SetWriteProtect,
      bool DisableReset,
      bool DisableTimeUpdate,
      bool DisableDbWrite);

    bool progDevice(
      DateTime NewMeterTime,
      bool SetWriteProtect,
      bool DisableReset,
      bool DisableTimeUpdate,
      bool DisableDbWrite,
      bool HoldReadMeter);

    bool progDeviceOrigional();

    bool ClearWriteProtection();

    bool SetWriteProtection();

    bool GetFirmwareVersion(out long FirmwareVersion);

    int getVersionNr(out string FirmwareVersion);

    bool GetIdent(out ZR_MeterIdent TheIdent);

    bool GetIdent(ZR_HandlerFunctions.MeterObjects TheObject, out ZR_MeterIdent TheIdent);

    int getSerialNr(out string SerialNr);

    bool getDeviceTime(out DateTime ClockTime, out DateTime NextEventTime);

    bool IsStructureUnchangedToReadMeter();

    List<LoggerInfo> GetLoggerInfos(out int LoggerMemorySize, MeterObjectSelector meterObject);

    SortedList<MeterDBAccess.ValueTypes, string> GetActualValues();

    bool GetMBusVariableLists(out MBusInfo TheBusInfo);

    bool SetMBusVariables(MBusInfo TheBusInfo);

    bool GetParameterValue(
      string Varname,
      MemoryLocation Location,
      bool DeviceRead,
      out long Value);

    bool SetParameterValue(
      string Varname,
      MemoryLocation Location,
      bool WriteImmediatly,
      long Value);

    bool ChangeRamParameterBitsImmediately(string Varname, uint AndMask, uint OrMask);

    bool DeleteMeterKey(long LockKey);

    bool SetMeterKey(long DeviceKey, long DatabaseKey);

    bool GetWriteState(
      out bool WriteIsEnabled,
      out bool WriteProtectionIsSet,
      out bool DatabaseKeyIsAvailable,
      out bool MeterKeyIsAvailable,
      out bool DatabaseKeyIsSaved,
      out bool MeterKeyIsSaved);

    bool SaveKeyToDatabase(long LockKey);

    int resetCounter();

    int setEmergencyMode();

    bool GetPalettData(bool AllVersions, out PalettData TheData);

    bool checkFunctionInPaletteDisplayFunction(int FunctionNumber);

    int getPaletteFunctionLCD(
      int FunctionNr,
      out bool[] LCDSegments,
      out string Resources,
      int x,
      int y);

    int setDeviceTime(DateTime newDeviceTime);

    bool GetOverrideParameterList(out SortedList TheList);

    bool SetOverrideParameterFromList(SortedList TheParameterList);

    GlobalDeviceId GetDeviceIdentification();

    SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice);

    bool SetConfigurationParameter(
      SortedList<OverrideID, ConfigurationParameter> parameterList,
      int SubDevice);

    bool ResetAllData();

    bool ChangeMeterData(List<Parameter.ParameterGroups> SelectedGroups);

    bool GetBaudrateList(out string[] TheList);

    bool GetMenuFunctionData(int x, int y, out FunctionData TheData);

    int setNewMenuFunction(int x, int y, int iFunctionNr);

    int deleteMenuFunction(int x, int y);

    bool DeleteFunctions(ArrayList FunctionNumbersList);

    int moveMenuFunction(int x1, int y1, int x2, int y2);

    bool getActualValueReadingState();

    void setActualValueReadingState(bool theNewState);

    string GetLastError();

    string getErrorMsg();

    void ShowHandlerWindow();

    string ShowHandlerWindow(string ComponentList);

    int DeleteMeterKey(int MeterKey);

    int saveAsType(ZR_MeterIdent NewTypeIdent);

    int saveAsType(string IdentNumber, string TypeDescription);

    bool SpecialFunction(SpecialFunctionSelection TheSelection, object TheParameterObject);

    bool IsEqual(
      ZR_HandlerFunctions.IsEqualFunctions CompareFunction,
      ZR_HandlerFunctions.MeterObjects OriginalMeter,
      ZR_HandlerFunctions.MeterObjects CompareMeter);

    string[] GetList(
      ZR_HandlerFunctions.GetListFunctions ListFunction,
      ZR_HandlerFunctions.MeterObjects TheMeterObj);
  }
}


--- LinkBlock.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LinkBlock
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;

#nullable disable
namespace GMM_Handler
{
  internal class LinkBlock
  {
    protected Meter MyMeter;
    internal LinkBlockTypes LinkBlockType;
    internal int BlockStartAddress;
    internal int StartAddressOfNextBlock = -1;
    internal ArrayList LinkObjList;

    internal LinkBlock(Meter MyMeterIn, LinkBlockTypes TheLinkBlockType)
    {
      this.MyMeter = MyMeterIn;
      this.LinkObjList = new ArrayList();
      this.LinkBlockType = TheLinkBlockType;
    }
  }
}


--- LinkBlockTypes.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LinkBlockTypes
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal enum LinkBlockTypes
  {
    EpromHeader,
    EpromVars,
    EpromParameter,
    RuntimeVars,
    RamParameter,
    Backup,
    Static,
    FixedParameter,
    MBusList,
    LoggerStore,
    WritePermTable,
    DisplayCode,
    RuntimeCode,
    EpromRuntime,
    FunctionTable,
    NotLinkedReplaceParameter,
  }
}


--- Linker.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.Linker
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Diagnostics;
using System.Globalization;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class Linker
  {
    internal SortedList MapPointers;
    private Meter MyMeter;
    internal ArrayList LinkBlockList;
    internal ArrayList LinkPointerList;
    internal SortedList EpromCodeBlocksByName;
    internal ArrayList LinkerCodeBlockList;
    internal ArrayList EEPROM_Interval_Runtime = new ArrayList();
    internal ArrayList Event_Runtime = new ArrayList();
    internal ArrayList MBus_Runtime = new ArrayList();
    internal ArrayList Mesurement_Runtime = new ArrayList();
    internal ArrayList RAM_Runtime = new ArrayList();
    internal ArrayList Interval_Runtime = new ArrayList();
    internal ArrayList AllIntervallCodes = new ArrayList();
    internal ArrayList ReplaceParameters = new ArrayList();
    private const string JumpToEpromIntervalRuntime = "ToEprIntervallRuntime";
    private int StartOfRuntimeVars;
    private int RuntimeCodeStartAddress;
    private int FirstFreeRamAddress;

    public Linker(Meter MyMeterIn)
    {
      this.MyMeter = MyMeterIn;
      this.LinkBlockList = new ArrayList();
    }

    internal Linker Clone(Meter TheCloneMeter) => new Linker(TheCloneMeter);

    internal bool UpdateAdresses()
    {
      int blockStartAddress = this.MyMeter.MyEpromHeader.BlockStartAddress;
      foreach (LinkBlock linkBlock in this.LinkBlockList)
      {
        linkBlock.BlockStartAddress = blockStartAddress;
        if (!this.UpdateBlockAddresses(linkBlock.LinkObjList, ref blockStartAddress))
          return false;
        linkBlock.StartAddressOfNextBlock = blockStartAddress;
      }
      this.MyMeter.MyIdent.extEEPUsed = blockStartAddress;
      return true;
    }

    internal bool UpdateAdressesAtBlockRange(LinkBlock FromBlock, LinkBlock ToBlock)
    {
      int Address = FromBlock.BlockStartAddress;
      bool flag = true;
      foreach (LinkBlock linkBlock in this.LinkBlockList)
      {
        if (flag)
        {
          if (linkBlock == FromBlock)
          {
            flag = false;
          }
          else
          {
            Address = linkBlock.StartAddressOfNextBlock;
            continue;
          }
        }
        linkBlock.BlockStartAddress = Address;
        if (linkBlock == ToBlock)
          return true;
        if (!this.UpdateBlockAddresses(linkBlock.LinkObjList, ref Address))
          return false;
        linkBlock.StartAddressOfNextBlock = Address;
      }
      if (Address >= this.MyMeter.MyIdent.extEEPSize)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Out of eeprom space");
        return false;
      }
      this.MyMeter.MyIdent.extEEPUsed = Address;
      return true;
    }

    private bool UpdateBlockAddresses(ArrayList TheLinkObjList, ref int Address)
    {
      foreach (object theLinkObj in TheLinkObjList)
      {
        if (theLinkObj is Parameter)
        {
          if (!this.SetLinkAddress((LinkObj) theLinkObj, ref Address))
            return false;
        }
        else
        {
          foreach (LinkObj code in ((CodeBlock) theLinkObj).CodeList)
          {
            if (!this.SetLinkAddress(code, ref Address))
              return false;
          }
        }
      }
      this.MyMeter.MyIdent.extEEPUsed = Address;
      return true;
    }

    internal bool CreateParameterAddressLists()
    {
      this.MyMeter.AllEpromParametersByAddress = new SortedList();
      this.MyMeter.AllRamParametersByAddress = new SortedList();
      foreach (DictionaryEntry allParameter in this.MyMeter.AllParameters)
      {
        Parameter parameter = (Parameter) allParameter.Value;
        if (parameter.ExistOnEprom)
        {
          try
          {
            this.MyMeter.AllEpromParametersByAddress.Add((object) parameter.Address, (object) parameter);
          }
          catch
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal eprom parameter");
            return false;
          }
        }
        if (parameter.ExistOnCPU)
        {
          try
          {
            if (parameter.AddressCPU >= 0)
              this.MyMeter.AllRamParametersByAddress.Add((object) parameter.AddressCPU, (object) parameter);
          }
          catch
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal ram parameter");
            return false;
          }
        }
      }
      return true;
    }

    internal bool UpdateMBusAndFunctionTableAdresses()
    {
      int blockStartAddress = this.MyMeter.MyMBusList.BlockStartAddress;
      foreach (LinkObj code in ((CodeBlock) this.MyMeter.MyMBusList.LinkObjList[0]).CodeList)
      {
        if (!this.SetLinkAddress(code, ref blockStartAddress))
          return false;
      }
      this.MyMeter.MyFunctionTable.BlockStartAddress = blockStartAddress;
      foreach (LinkObj code in ((CodeBlock) this.MyMeter.MyFunctionTable.LinkObjList[0]).CodeList)
      {
        if (!this.SetLinkAddress(code, ref blockStartAddress))
          return false;
      }
      this.MyMeter.MyLoggerStore.BlockStartAddress = blockStartAddress;
      return true;
    }

    private bool SetLinkAddress(LinkObj TheLinkObj, ref int Address)
    {
      if (TheLinkObj.Size < 0)
      {
        Debug.Write("Uninitialised size");
        return false;
      }
      TheLinkObj.Address = Address;
      Address += TheLinkObj.Size;
      return true;
    }

    internal bool AreBlockAdressesUnchanged(byte[] CompareEEprom)
    {
      return this.CheckBlockAdr("EEP_Header.EEP_HEADER_RamParamBlockAdr", (long) this.MyMeter.MyRamParameter.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_BackupBlockAdr", (long) this.MyMeter.MyBackup.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_FixedParamAdr", (long) this.MyMeter.MyFixedParameter.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_WritePermTableAdr", (long) this.MyMeter.MyWritePermTable.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_DispBlockAdr", (long) this.MyMeter.MyDisplayCode.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_RuntimeVarsAdr", (long) this.MyMeter.MyRuntimeVars.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_RuntimeCodeAdr", (long) this.MyMeter.MyRuntimeCode.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_RuntimeCodeAdr", (long) this.MyMeter.MyRuntimeCode.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_RuntimeCodeAdr", (long) this.MyMeter.MyRuntimeCode.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_EpromVarsAdr", (long) this.MyMeter.MyEpromVars.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_ParamBlockAdr", (long) this.MyMeter.MyEpromParameter.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_EpromRuntimeAdr", (long) this.MyMeter.MyEpromRuntime.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_MBusBlockAdr", (long) this.MyMeter.MyMBusList.BlockStartAddress, CompareEEprom) && this.CheckBlockAdr("EEP_Header.EEP_HEADER_FunctionTableAdr", (long) this.MyMeter.MyFunctionTable.BlockStartAddress, CompareEEprom);
    }

    internal bool CheckBlockAdr(string VarName, long BlockAdr, byte[] CompareEEprom)
    {
      if (this.MyMeter.MyHandler.DisableChecks)
        return true;
      bool flag = true;
      Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) VarName];
      if (allParameter.GetValueFromMap(CompareEEprom) != BlockAdr)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Segment size changed! Adr. name: " + allParameter.FullName);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        flag = false;
      }
      return flag;
    }

    internal bool ReloadRuntimeVarsRamAdresses()
    {
      try
      {
        this.StartOfRuntimeVars = (int) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.RuntimeVarsLocation"]).ValueEprom;
        this.RuntimeCodeStartAddress = (int) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.MesurementCodeLocation"]).ValueEprom;
        if (this.RuntimeCodeStartAddress == 0)
          this.RuntimeCodeStartAddress = (int) ((Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.RuntimeCodeLocation"]).ValueEprom;
        int startOfRuntimeVars = this.StartOfRuntimeVars;
        foreach (Parameter linkObj in this.MyMeter.MyRuntimeVars.LinkObjList)
        {
          linkObj.AddressCPU = startOfRuntimeVars;
          linkObj.ExistOnCPU = true;
          startOfRuntimeVars += linkObj.Size;
        }
      }
      catch
      {
        ZR_ClassLibMessages.AddWarning("Ram address generation error");
        return false;
      }
      return true;
    }

    internal bool SetAddressReferences()
    {
      SortedList allParameters = this.MyMeter.AllParameters;
      try
      {
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_RamParamBlockAdr"]).ValueEprom = (long) this.MyMeter.MyRamParameter.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_BackupBlockAdr"]).ValueEprom = (long) this.MyMeter.MyBackup.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_FixedParamAdr"]).ValueEprom = (long) this.MyMeter.MyFixedParameter.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_WritePermTableAdr"]).ValueEprom = (long) this.MyMeter.MyWritePermTable.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_DispBlockAdr"]).ValueEprom = (long) this.MyMeter.MyDisplayCode.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_RuntimeVarsAdr"]).ValueEprom = (long) this.MyMeter.MyRuntimeVars.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_RuntimeCodeAdr"]).ValueEprom = (long) this.MyMeter.MyRuntimeCode.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_EpromVarsAdr"]).ValueEprom = (long) this.MyMeter.MyEpromVars.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_ParamBlockAdr"]).ValueEprom = (long) this.MyMeter.MyEpromParameter.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_EpromRuntimeAdr"]).ValueEprom = (long) this.MyMeter.MyEpromRuntime.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_MBusBlockAdr"]).ValueEprom = (long) this.MyMeter.MyMBusList.BlockStartAddress;
        ((Parameter) allParameters[(object) "EEP_Header.EEP_HEADER_FunctionTableAdr"]).ValueEprom = (long) this.MyMeter.MyFunctionTable.BlockStartAddress;
        int mapPointer = (int) this.MapPointers[(object) "CSTACK"];
        int index = 0;
        while (index < this.MyMeter.AllRamParametersByAddress.Count && ((Parameter) this.MyMeter.AllRamParametersByAddress.GetByIndex(index)).AddressCPU < mapPointer)
          ++index;
        Parameter byIndex = (Parameter) this.MyMeter.AllRamParametersByAddress.GetByIndex(index - 1);
        this.StartOfRuntimeVars = byIndex.AddressCPU + byIndex.Size;
        this.FirstFreeRamAddress = this.StartOfRuntimeVars;
        ((Parameter) allParameters[(object) "DefaultFunction.RuntimeVarsLocation"]).ValueEprom = (long) this.FirstFreeRamAddress;
        foreach (Parameter linkObj in this.MyMeter.MyRuntimeVars.LinkObjList)
        {
          linkObj.AddressCPU = this.FirstFreeRamAddress;
          this.FirstFreeRamAddress += linkObj.Size;
          linkObj.ExistOnCPU = true;
          this.MyMeter.AllRamParametersByAddress.Add((object) linkObj.AddressCPU, (object) linkObj);
        }
        this.RuntimeCodeStartAddress = this.FirstFreeRamAddress;
        if (this.Mesurement_Runtime.Count > 0)
        {
          ((Parameter) allParameters[(object) "DefaultFunction.MesurementCodeLocation"]).ValueEprom = (long) this.RuntimeCodeStartAddress;
          foreach (CodeBlock codeBlock in this.Mesurement_Runtime)
          {
            foreach (LinkObj code in codeBlock.CodeList)
              this.FirstFreeRamAddress += code.Size;
          }
        }
        else
          ((Parameter) allParameters[(object) "DefaultFunction.MesurementCodeLocation"]).ValueEprom = 0L;
        ((Parameter) allParameters[(object) "DefaultFunction.RuntimeCodeLocation"]).ValueEprom = (long) this.FirstFreeRamAddress;
        this.FirstFreeRamAddress = this.RuntimeCodeStartAddress;
        if (this.RAM_Runtime.Count > 0 || this.Interval_Runtime.Count > 0 || this.EEPROM_Interval_Runtime.Count > 0)
        {
          foreach (CodeBlock linkObj in this.MyMeter.MyRuntimeCode.LinkObjList)
          {
            foreach (LinkObj code in linkObj.CodeList)
              this.FirstFreeRamAddress += code.Size;
          }
        }
        else
          ((Parameter) allParameters[(object) "DefaultFunction.RuntimeCodeLocation"]).ValueEprom = 0L;
        int addressCpu = ((Parameter) this.MyMeter.MyFixedParameter.LinkObjList[0]).AddressCPU;
        int num1 = addressCpu + this.MyMeter.MyWritePermTable.BlockStartAddress - this.MyMeter.MyFixedParameter.BlockStartAddress;
        ((Parameter) allParameters[(object) "DefaultFunction.WritePermTableLocation"]).ValueEprom = (long) num1;
        int num2 = addressCpu - ((LinkObj) this.MyMeter.MyFixedParameter.LinkObjList[0]).Address;
        foreach (Parameter linkObj in this.MyMeter.MyFixedParameter.LinkObjList)
        {
          if (linkObj.AddressCPU - linkObj.Address != num2 && linkObj.AddressCPU >= 0)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "FixedParameter Eprom-RAM Offset Error! VarName:" + linkObj.Name);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Linker error:");
          }
        }
        int num3 = ((Parameter) this.MyMeter.MyBackup.LinkObjList[0]).AddressCPU - ((LinkObj) this.MyMeter.MyBackup.LinkObjList[0]).Address;
        foreach (Parameter linkObj in this.MyMeter.MyBackup.LinkObjList)
        {
          if (linkObj.AddressCPU - linkObj.Address != num3)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "BackupParameter Eprom-RAM Offset Error! VarName:" + linkObj.Name);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Linker error:");
          }
        }
        int num4 = ((Parameter) this.MyMeter.MyRamParameter.LinkObjList[0]).AddressCPU - ((LinkObj) this.MyMeter.MyRamParameter.LinkObjList[0]).Address;
        foreach (Parameter linkObj in this.MyMeter.MyRamParameter.LinkObjList)
        {
          if (linkObj.AddressCPU - linkObj.Address != num4)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "RamParameter Eprom-RAM Offset Error! VarName:" + linkObj.Name);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Linker error:");
          }
        }
      }
      catch
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Linker error: Illegal address reference");
        return false;
      }
      return true;
    }

    internal bool LinkAllPointers()
    {
      foreach (LinkPointer linkPointer in this.LinkPointerList)
      {
        CodeObject pointerObject = linkPointer.PointerObject;
        if (pointerObject.CodeValue.IndexOf('.') < 0)
        {
          if (pointerObject.CodeValue == "ToEprIntervallRuntime")
          {
            CodeObject code = (CodeObject) ((CodeBlock) this.EEPROM_Interval_Runtime[0]).CodeList[0];
            if (!this.SetPointerValue(pointerObject, (object) code))
              return false;
          }
          else
          {
            Parameter TheDestinationObject1 = ((Parameter) this.MyMeter.AllParameters[(object) pointerObject.CodeValue] ?? (Parameter) this.MyMeter.AllParameters[(object) ("DefaultFunction." + pointerObject.CodeValue)] ?? (Parameter) this.MyMeter.AllParameters[(object) ("EEP_Header." + pointerObject.CodeValue)]) ?? (Parameter) this.MyMeter.AllParametersByResource[(object) pointerObject.CodeValue];
            if (TheDestinationObject1 != null)
            {
              if (!this.SetPointerValue(pointerObject, (object) TheDestinationObject1))
                return false;
            }
            else
            {
              Function function = (Function) this.MyMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) pointerObject.FunctionNumber];
              Parameter TheDestinationObject2 = (Parameter) function.ParameterListByName[(object) pointerObject.CodeValue];
              if (TheDestinationObject2 != null)
              {
                if (!this.SetPointerValue(pointerObject, (object) TheDestinationObject2))
                  return false;
              }
              else
              {
                CodeBlock codeBlock = (CodeBlock) function.EpromCodeBlocksByName[(object) pointerObject.CodeValue];
                if (codeBlock != null)
                {
                  if (codeBlock.CodeList.Count > 0)
                  {
                    CodeObject code = (CodeObject) codeBlock.CodeList[0];
                    if (!this.SetPointerValue(pointerObject, (object) code))
                      return false;
                  }
                }
                else
                {
                  MenuItem menuItem = (MenuItem) function.MenuListByName[(object) pointerObject.CodeValue];
                  if (menuItem != null && menuItem.DisplayCodeBlocks.Count > 0)
                  {
                    CodeBlock displayCodeBlock = (CodeBlock) menuItem.DisplayCodeBlocks[0];
                    if (displayCodeBlock != null && displayCodeBlock.CodeList.Count > 0)
                    {
                      CodeObject code = (CodeObject) displayCodeBlock.CodeList[0];
                      if (!this.SetPointerValue(pointerObject, (object) code))
                        return false;
                    }
                  }
                  else if (pointerObject.CodeValue.StartsWith("0x"))
                  {
                    pointerObject.CodeValueCompiled = long.Parse(pointerObject.CodeValue.Substring(2), NumberStyles.HexNumber);
                    this.MyMeter.MyCompiler.GenerateCodeFromCodeObject(pointerObject);
                  }
                  else if (pointerObject.CodeValue == "Revision4820")
                  {
                    CodeObject TheDestinationObject3 = new CodeObject(0);
                    TheDestinationObject3.Address = 100;
                    if (!this.SetPointerValue(pointerObject, (object) TheDestinationObject3))
                      return false;
                  }
                  else
                  {
                    this.MyMeter.MyHandler.AddErrorPointMessage("Pointer not found: '" + pointerObject.CodeValue + "'");
                    return false;
                  }
                }
              }
            }
          }
        }
        else
        {
          Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) pointerObject.CodeValue];
          if (allParameter != null)
          {
            if (!this.SetPointerValue(pointerObject, (object) allParameter))
              return false;
          }
          else
          {
            Parameter aliasParameter = (Parameter) this.MyMeter.AliasParameters[(object) pointerObject.CodeValue];
            if (aliasParameter != null)
            {
              if (!this.SetPointerValue(pointerObject, (object) aliasParameter))
                return false;
            }
            else
            {
              MenuItem menuItem = (MenuItem) this.MyMeter.MyDisplayCode.AllMenusByName[(object) pointerObject.CodeValue];
              if (menuItem != null)
              {
                CodeObject code = (CodeObject) ((CodeBlock) menuItem.DisplayCodeBlocks[0]).CodeList[0];
                if (!this.SetPointerValue(pointerObject, (object) code))
                  return false;
              }
              else
              {
                CodeBlock codeBlock = (CodeBlock) this.EpromCodeBlocksByName[(object) pointerObject.CodeValue];
                if (codeBlock != null)
                {
                  if (codeBlock.CodeList.Count > 0)
                  {
                    CodeObject code = (CodeObject) codeBlock.CodeList[0];
                    if (!this.SetPointerValue(pointerObject, (object) code))
                      return false;
                  }
                  else
                  {
                    ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Linker error: Unknown destination object");
                    return false;
                  }
                }
              }
            }
          }
        }
      }
      return true;
    }

    internal bool LoadAllPointersFromEprom()
    {
      foreach (LinkPointer linkPointer in this.LinkPointerList)
      {
        CodeObject pointerObject = linkPointer.PointerObject;
        int address = pointerObject.Address;
        pointerObject.CodeValueCompiled = (long) ParameterService.GetFromByteArray_ushort(this.MyMeter.Eprom, ref address);
        this.MyMeter.MyCompiler.GenerateCodeFromCodeObject(pointerObject);
      }
      return true;
    }

    private bool SetPointerValue(CodeObject TheLinkObj, object TheDestinationObject)
    {
      int num;
      if (TheDestinationObject is Parameter)
      {
        Parameter parameter = (Parameter) TheDestinationObject;
        if (TheLinkObj.CodeType == CodeObject.CodeTypes.ePTR)
        {
          if (!parameter.ExistOnEprom)
            return this.MyMeter.MyHandler.AddErrorPointMessage("ePTR to anknown parameter: " + parameter.FullName);
          num = parameter.Address;
        }
        else
        {
          if (!parameter.ExistOnCPU)
            return this.MyMeter.MyHandler.AddErrorPointMessage("iPTR to anknown parameter: " + parameter.FullName);
          num = parameter.AddressCPU;
        }
      }
      else
        num = ((LinkObj) TheDestinationObject).Address;
      TheLinkObj.CodeValueCompiled = (long) num;
      TheLinkObj.LinkByteList = new byte[2];
      TheLinkObj.LinkByteList[0] = (byte) num;
      TheLinkObj.LinkByteList[1] = (byte) (num >> 8);
      return true;
    }

    internal bool GenerateBlockList()
    {
      for (int index = 0; index < this.MyMeter.BlockLinkOrder.Count; ++index)
      {
        switch (((BlockLinkDefines) this.MyMeter.BlockLinkOrder[index]).BlockType)
        {
          case LinkBlockTypes.EpromHeader:
            if (this.MyMeter.MyEpromHeader == null || index != 0 || this.LinkBlockList.Count != 1)
              goto default;
            else
              break;
          case LinkBlockTypes.EpromVars:
            if (this.MyMeter.MyEpromVars == null)
            {
              this.MyMeter.MyEpromVars = new EpromVars(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyEpromVars);
              break;
            }
            goto default;
          case LinkBlockTypes.EpromParameter:
            if (this.MyMeter.MyEpromParameter == null)
            {
              this.MyMeter.MyEpromParameter = new EpromParameter(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyEpromParameter);
              break;
            }
            goto default;
          case LinkBlockTypes.RuntimeVars:
            if (this.MyMeter.MyRuntimeVars == null)
            {
              this.MyMeter.MyRuntimeVars = new RuntimeVars(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyRuntimeVars);
              break;
            }
            goto default;
          case LinkBlockTypes.RamParameter:
            if (this.MyMeter.MyRamParameter == null)
            {
              this.MyMeter.MyRamParameter = new RamParameter(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyRamParameter);
              break;
            }
            goto default;
          case LinkBlockTypes.Backup:
            if (this.MyMeter.MyBackup == null)
            {
              this.MyMeter.MyBackup = new Backup(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyBackup);
              break;
            }
            goto default;
          case LinkBlockTypes.FixedParameter:
            if (this.MyMeter.MyFixedParameter == null)
            {
              this.MyMeter.MyFixedParameter = new FixedParameter(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyFixedParameter);
              break;
            }
            goto default;
          case LinkBlockTypes.MBusList:
            if (this.MyMeter.MyMBusList == null)
              this.MyMeter.MyMBusList = new MBusList(this.MyMeter);
            this.LinkBlockList.Add((object) this.MyMeter.MyMBusList);
            break;
          case LinkBlockTypes.LoggerStore:
            if (this.MyMeter.MyLoggerStore == null)
            {
              this.MyMeter.MyLoggerStore = new LoggerStore(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyLoggerStore);
              break;
            }
            goto default;
          case LinkBlockTypes.WritePermTable:
            if (this.MyMeter.MyWritePermTable == null)
            {
              this.MyMeter.MyWritePermTable = new WritePermTable(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyWritePermTable);
              break;
            }
            goto default;
          case LinkBlockTypes.DisplayCode:
            if (this.MyMeter.MyDisplayCode == null)
            {
              this.MyMeter.MyDisplayCode = new DisplayCode(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyDisplayCode);
              break;
            }
            goto default;
          case LinkBlockTypes.RuntimeCode:
            if (this.MyMeter.MyRuntimeCode == null)
            {
              this.MyMeter.MyRuntimeCode = new RuntimeCode(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyRuntimeCode);
              break;
            }
            goto default;
          case LinkBlockTypes.EpromRuntime:
            if (this.MyMeter.MyEpromRuntime == null)
            {
              this.MyMeter.MyEpromRuntime = new EpromRuntime(this.MyMeter);
              this.LinkBlockList.Add((object) this.MyMeter.MyEpromRuntime);
              break;
            }
            goto default;
          case LinkBlockTypes.FunctionTable:
            if (this.MyMeter.MyFunctionTable != null)
            {
              this.LinkBlockList.Add((object) this.MyMeter.MyFunctionTable);
              break;
            }
            goto default;
          default:
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Linker error: Illegal linker block btate");
            return false;
        }
      }
      return true;
    }

    internal bool IncludeAllFunctions()
    {
      SortedList fullLoadedFunctions = this.MyMeter.MyHandler.MyLoadedFunctions.FullLoadedFunctions;
      this.MyMeter.MyFunctionTable.FunctionList = new ArrayList();
      this.MyMeter.MyFunctionTable.FunctionListByName = new SortedList();
      this.MyMeter.MyFunctionTable.FunctionListByNumber = new SortedList();
      for (int index1 = 0; index1 < this.MyMeter.MyFunctionTable.FunctionNumbersList.Count; ++index1)
      {
        Function function1 = (Function) null;
        if (this.MyMeter.ConfigLoggers != null)
        {
          int index2 = this.MyMeter.ConfigLoggers.IndexOfKey((uint) (ushort) this.MyMeter.MyFunctionTable.FunctionNumbersList[index1]);
          if (index2 >= 0)
            function1 = this.MyMeter.ConfigLoggers.Values[index2];
        }
        if (function1 == null)
          function1 = (Function) fullLoadedFunctions[this.MyMeter.MyFunctionTable.FunctionNumbersList[index1]];
        Function function2 = function1.Clone(this.MyMeter);
        this.MyMeter.MyFunctionTable.FunctionList.Add((object) function2);
        this.MyMeter.MyFunctionTable.FunctionListByName.Add((object) function2.Name, (object) function2);
        this.MyMeter.MyFunctionTable.FunctionListByNumber.Add((object) function2.Number, (object) function2);
      }
      return true;
    }

    internal bool AddMapVariables()
    {
      this.MapPointers = new SortedList();
      foreach (DataBaseAccess.MapEntry mapEntry in this.MyMeter.Map)
      {
        bool flag = false;
        Parameter parameter = ((Parameter) this.MyMeter.AllParameters[(object) mapEntry.Name] ?? (Parameter) this.MyMeter.AllParameters[(object) ("DefaultFunction." + mapEntry.Name)]) ?? (Parameter) this.MyMeter.AllParameters[(object) ("EEP_Header." + mapEntry.Name)];
        if (parameter == null)
        {
          parameter = (Parameter) this.MyMeter.AllParameters[(object) ("DefaultFunction." + mapEntry.Name + "_1")];
          flag = true;
        }
        if (parameter == null)
        {
          if (mapEntry.ByteSize == (short) 0)
          {
            this.MapPointers.Add((object) mapEntry.Name, (object) mapEntry.Address);
            continue;
          }
          parameter = new Parameter(mapEntry.Name, (int) mapEntry.ByteSize, LinkBlockTypes.Static);
          parameter.FullName = mapEntry.Name;
          this.MyMeter.AllParameters.Add((object) mapEntry.Name, (object) parameter);
        }
        else if (parameter.Size != (int) mapEntry.ByteSize)
        {
          if (!flag)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Parameter size difference! Parameter name: " + parameter.FullName);
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Linker error:");
            continue;
          }
          continue;
        }
        parameter.AddressCPU = mapEntry.Address;
        parameter.ExistOnCPU = true;
      }
      return true;
    }

    internal bool GenerateObjectLists()
    {
      this.EpromCodeBlocksByName = new SortedList();
      this.MyMeter.AllParametersByResource = new SortedList();
      this.MyMeter.MyMBusList.AllMBusParameters = new SortedList();
      for (int index = 0; index < this.MyMeter.MyFunctionTable.FunctionList.Count; ++index)
      {
        Function function = (Function) this.MyMeter.MyFunctionTable.FunctionList[index];
        function.ParameterListByName = new SortedList();
        function.EpromCodeBlocksByName = new SortedList();
        function.MenuListByName = new SortedList();
        foreach (Parameter parameter in function.ParameterList)
        {
          bool flag = true;
          switch (parameter.BlockMark)
          {
            case LinkBlockTypes.EpromHeader:
              if (flag)
              {
                string key = function.Name + "." + parameter.Name;
                parameter.FullName = key;
                this.MyMeter.AllParameters.Add((object) key, (object) parameter);
                if (function.AliasName != null)
                  this.MyMeter.AliasParameters.Add((object) (function.AliasName + "." + parameter.Name), (object) parameter);
                function.ParameterListByName.Add((object) parameter.Name, (object) parameter);
                if (parameter.MeterResource != null && parameter.MeterResource.Length > 0)
                {
                  if (this.MyMeter.AllParametersByResource.ContainsKey((object) parameter.MeterResource))
                  {
                    if (!this.MyMeter.MyHandler.BaseTypeEditMode)
                      throw new Exception("Table Datalogger wurde nicht geÃ¶ffnet");
                  }
                  else
                    this.MyMeter.AllParametersByResource.Add((object) parameter.MeterResource, (object) parameter);
                }
              }
              continue;
            case LinkBlockTypes.EpromVars:
              this.MyMeter.MyEpromVars.LinkObjList.Add((object) parameter);
              goto case LinkBlockTypes.EpromHeader;
            case LinkBlockTypes.EpromParameter:
              this.MyMeter.MyEpromParameter.LinkObjList.Add((object) parameter);
              goto case LinkBlockTypes.EpromHeader;
            case LinkBlockTypes.RuntimeVars:
              this.MyMeter.MyRuntimeVars.LinkObjList.Add((object) parameter);
              goto case LinkBlockTypes.EpromHeader;
            case LinkBlockTypes.RamParameter:
              this.MyMeter.MyRamParameter.LinkObjList.Add((object) parameter);
              goto case LinkBlockTypes.EpromHeader;
            case LinkBlockTypes.Backup:
              this.MyMeter.MyBackup.LinkObjList.Add((object) parameter);
              goto case LinkBlockTypes.EpromHeader;
            case LinkBlockTypes.Static:
              flag = false;
              parameter.FullName = parameter.Name;
              this.MyMeter.AllParameters.Add((object) parameter.Name, (object) parameter);
              goto case LinkBlockTypes.EpromHeader;
            case LinkBlockTypes.FixedParameter:
              this.MyMeter.MyFixedParameter.LinkObjList.Add((object) parameter);
              goto case LinkBlockTypes.EpromHeader;
            case LinkBlockTypes.LoggerStore:
              flag = false;
              goto case LinkBlockTypes.EpromHeader;
            case LinkBlockTypes.WritePermTable:
              this.MyMeter.MyWritePermTable.LinkObjList.Add((object) parameter);
              goto case LinkBlockTypes.EpromHeader;
            case LinkBlockTypes.NotLinkedReplaceParameter:
              flag = false;
              this.ReplaceParameters.Add((object) parameter);
              goto case LinkBlockTypes.EpromHeader;
            default:
              flag = false;
              ZR_ClassLibMessages.AddWarning("Parameter at illegal block");
              goto case LinkBlockTypes.EpromHeader;
          }
        }
        foreach (CodeBlock runtimeCodeBlock in function.RuntimeCodeBlockList)
        {
          string key = function.Name + "." + runtimeCodeBlock.CodeSequenceName;
          bool flag = false;
          switch (runtimeCodeBlock.CodeSequenceType)
          {
            case CodeBlock.CodeSequenceTypes.RAM_Runtime:
              this.RAM_Runtime.Add((object) runtimeCodeBlock);
              break;
            case CodeBlock.CodeSequenceTypes.Interval_Runtime:
              this.Interval_Runtime.Add((object) runtimeCodeBlock);
              this.AllIntervallCodes.Add((object) runtimeCodeBlock);
              break;
            case CodeBlock.CodeSequenceTypes.Event_Runtime:
              this.Event_Runtime.Add((object) runtimeCodeBlock);
              flag = true;
              break;
            case CodeBlock.CodeSequenceTypes.RESET_Runtime:
              this.MyMeter.MyEpromRuntime.LinkObjList.Add((object) runtimeCodeBlock);
              flag = true;
              break;
            case CodeBlock.CodeSequenceTypes.EEPROM_Interval_Runtime:
              this.EEPROM_Interval_Runtime.Add((object) runtimeCodeBlock);
              this.AllIntervallCodes.Add((object) runtimeCodeBlock);
              flag = true;
              break;
            case CodeBlock.CodeSequenceTypes.Mesurement_Runtime:
              this.Mesurement_Runtime.Add((object) runtimeCodeBlock);
              break;
            case CodeBlock.CodeSequenceTypes.MBus_Runtime:
              this.MBus_Runtime.Add((object) runtimeCodeBlock);
              flag = true;
              break;
            default:
              ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Linker error: Code on illegal block");
              break;
          }
          if (flag)
          {
            function.EpromCodeBlocksByName.Add((object) runtimeCodeBlock.CodeSequenceName, (object) runtimeCodeBlock);
            this.EpromCodeBlocksByName.Add((object) key, (object) runtimeCodeBlock);
            if (function.AliasName != null && function.AliasName.Length > 0)
              this.EpromCodeBlocksByName.Add((object) (function.AliasName + "." + runtimeCodeBlock.CodeSequenceName), (object) runtimeCodeBlock);
          }
        }
        foreach (MenuItem menu in function.MenuList)
        {
          function.MenuListByName.Add((object) menu.MenuName, (object) menu);
          foreach (CodeBlock displayCodeBlock in menu.DisplayCodeBlocks)
          {
            if (displayCodeBlock.FrameType == FrameTypes.None)
            {
              switch (displayCodeBlock.CodeSequenceType)
              {
                case CodeBlock.CodeSequenceTypes.Displaycode:
                  this.MyMeter.MyDisplayCode.LinkObjList.Add((object) displayCodeBlock);
                  break;
                case CodeBlock.CodeSequenceTypes.InlineRuntimecode:
                  this.MyMeter.MyDisplayCode.LinkObjList.Add((object) displayCodeBlock);
                  this.AddRuntimeEndCode(displayCodeBlock, (int) menu.FunctionNumber);
                  break;
                case CodeBlock.CodeSequenceTypes.Brunch:
                  this.MyMeter.MyDisplayCode.LinkObjList.Add((object) displayCodeBlock);
                  break;
                default:
                  ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Linker error: Code on illegal block");
                  break;
              }
            }
            else
              this.MyMeter.MyDisplayCode.LinkObjList.Add((object) displayCodeBlock);
          }
        }
      }
      foreach (Parameter replaceParameter in this.ReplaceParameters)
      {
        Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) ("DefaultFunction." + replaceParameter.Name)];
        allParameter.DifVifsByRes = replaceParameter.DifVifsByRes;
        allParameter.DifVifs = replaceParameter.DifVifs;
        allParameter.DifVifSize = replaceParameter.DifVifSize;
        allParameter.MBusShortOn = replaceParameter.MBusShortOn;
        allParameter.MBusOn = replaceParameter.MBusOn;
        allParameter.MBusParamConvertion = replaceParameter.MBusParamConvertion;
        allParameter.MBusParameterLength = replaceParameter.MBusParameterLength;
        allParameter.MBusParameterOverride = replaceParameter.MBusParameterOverride;
        allParameter.NameTranslated = replaceParameter.NameTranslated;
        for (int index = 0; index < replaceParameter.GroupMember.Length; ++index)
          allParameter.GroupMember[index] = replaceParameter.GroupMember[index];
      }
      for (int index = 0; index < this.MyMeter.AllParameters.Count; ++index)
      {
        Parameter byIndex = (Parameter) this.MyMeter.AllParameters.GetByIndex(index);
        if (byIndex.DifVifSize > (short) 0 && byIndex.NameTranslated != null && byIndex.NameTranslated.Length > 0 && (byIndex.MBusNeadedResources.Length <= 0 || this.MyMeter.AvailableMeterResouces[(object) byIndex.MBusNeadedResources] != null))
          this.MyMeter.MyMBusList.AllMBusParameters.Add((object) byIndex.FullName, (object) byIndex);
      }
      if (this.Mesurement_Runtime.Count > 0)
      {
        CodeBlock linkerCodeBlock = this.GenerateLinkerCodeBlock();
        this.AddRuntimeEndCode(linkerCodeBlock, -1);
        this.Mesurement_Runtime.Add((object) linkerCodeBlock);
        foreach (CodeBlock codeBlock in this.Mesurement_Runtime)
          this.MyMeter.MyRuntimeCode.LinkObjList.Add((object) codeBlock);
      }
      foreach (CodeBlock codeBlock in this.RAM_Runtime)
        this.MyMeter.MyRuntimeCode.LinkObjList.Add((object) codeBlock);
      if (this.Interval_Runtime.Count > 0 || this.EEPROM_Interval_Runtime.Count > 0)
      {
        CodeBlock linkerCodeBlock = this.GenerateLinkerCodeBlock();
        this.AddLinkerCodeObject(linkerCodeBlock, CodeObject.CodeTypes.BYTE, "RUI_CODE_IntervalTest");
        this.MyMeter.MyRuntimeCode.LinkObjList.Add((object) linkerCodeBlock);
      }
      foreach (CodeBlock codeBlock in this.Interval_Runtime)
        this.MyMeter.MyRuntimeCode.LinkObjList.Add((object) codeBlock);
      CodeBlock linkerCodeBlock1 = this.GenerateLinkerCodeBlock();
      if (this.EEPROM_Interval_Runtime.Count > 0)
      {
        this.AddLinkerCodeObject(linkerCodeBlock1, CodeObject.CodeTypes.BYTE, "RUI_CODE_EepRuntime");
        this.AddLinkerCodeObject(linkerCodeBlock1, CodeObject.CodeTypes.ePTR, "ToEprIntervallRuntime");
      }
      this.AddRuntimeEndCode(linkerCodeBlock1, -1);
      this.MyMeter.MyRuntimeCode.LinkObjList.Add((object) linkerCodeBlock1);
      CodeBlock linkerCodeBlock2 = this.GenerateLinkerCodeBlock();
      this.AddRuntimeEndCode(linkerCodeBlock2, -1);
      this.MyMeter.MyEpromRuntime.LinkObjList.Add((object) linkerCodeBlock2);
      if (this.EEPROM_Interval_Runtime.Count > 0)
      {
        foreach (CodeBlock codeBlock in this.EEPROM_Interval_Runtime)
          this.MyMeter.MyEpromRuntime.LinkObjList.Add((object) codeBlock);
        CodeBlock linkerCodeBlock3 = this.GenerateLinkerCodeBlock();
        this.AddRuntimeEndCode(linkerCodeBlock3, -1);
        this.MyMeter.MyEpromRuntime.LinkObjList.Add((object) linkerCodeBlock3);
      }
      foreach (CodeBlock TheCodeBlock in this.Event_Runtime)
      {
        this.AddRuntimeEndCode(TheCodeBlock, TheCodeBlock.FunctionNumber);
        this.MyMeter.MyEpromRuntime.LinkObjList.Add((object) TheCodeBlock);
      }
      if (this.MBus_Runtime.Count > 0)
      {
        foreach (CodeBlock codeBlock in this.MBus_Runtime)
          this.MyMeter.MyEpromRuntime.LinkObjList.Add((object) codeBlock);
        CodeBlock linkerCodeBlock4 = this.GenerateLinkerCodeBlock();
        this.AddRuntimeEndCode(linkerCodeBlock4, -1);
        this.MyMeter.MyEpromRuntime.LinkObjList.Add((object) linkerCodeBlock4);
      }
      return true;
    }

    private CodeBlock GenerateLinkerCodeBlock()
    {
      CodeBlock linkerCodeBlock = new CodeBlock(CodeBlock.CodeSequenceTypes.LinkerGeneratedCodeBlock, FrameTypes.None, -1);
      linkerCodeBlock.CodeSequenceName = "LinkerCodeBlock";
      if (this.LinkerCodeBlockList == null)
        this.LinkerCodeBlockList = new ArrayList();
      this.LinkerCodeBlockList.Add((object) linkerCodeBlock);
      return linkerCodeBlock;
    }

    private void AddLinkerCodeObject(
      CodeBlock TheCodeBlock,
      CodeObject.CodeTypes CodeType,
      string CodeValue)
    {
      CodeObject TheCodeObject = new CodeObject(-1);
      TheCodeObject.CodeType = CodeType;
      TheCodeObject.CodeValue = CodeValue;
      this.MyMeter.MyCompiler.PriCompileCodeObject(TheCodeObject);
      TheCodeBlock.CodeList.Add((object) TheCodeObject);
    }

    private void AddRuntimeEndCode(CodeBlock TheCodeBlock, int FunctionNumber)
    {
      CodeObject TheCodeObject = new CodeObject(FunctionNumber);
      TheCodeObject.CodeType = CodeObject.CodeTypes.BYTE;
      TheCodeObject.CodeValue = "RUI_CODE_End";
      this.MyMeter.MyCompiler.PriCompileCodeObject(TheCodeObject);
      TheCodeBlock.CodeList.Add((object) TheCodeObject);
    }

    internal bool UpdateEpromParameterData()
    {
      foreach (DictionaryEntry allParameter in this.MyMeter.AllParameters)
      {
        if (!((Parameter) allParameter.Value).UpdateByteList())
          return false;
      }
      return true;
    }

    internal bool AdjustConfigLoggers()
    {
      if (this.MyMeter.Eprom == null)
        return true;
      Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_RuntimeCodeAdr"];
      allParameter.LoadValueFromEprom(this.MyMeter.Eprom);
      int valueEprom1 = (int) allParameter.ValueEprom;
      this.UpdateBlockAddresses(this.MyMeter.MyRuntimeCode.LinkObjList, ref valueEprom1);
      foreach (CodeBlock linkObj in this.MyMeter.MyRuntimeCode.LinkObjList)
      {
        if (linkObj is IntervalAndLogger)
        {
          IntervalAndLogger intervalAndLogger = (IntervalAndLogger) linkObj;
          if (intervalAndLogger.Type == LoggerTypes.ConfigLogger || intervalAndLogger.Type == LoggerTypes.ShortCycleLogger)
          {
            intervalAndLogger.AdjustFunction();
            int valueEprom2 = (int) allParameter.ValueEprom;
            this.UpdateBlockAddresses(this.MyMeter.MyRuntimeCode.LinkObjList, ref valueEprom2);
          }
        }
      }
      return true;
    }

    internal bool CompleteAllLoggerData()
    {
      foreach (CodeBlock linkObj in this.MyMeter.MyRuntimeCode.LinkObjList)
      {
        if (linkObj is IntervalAndLogger)
          ((IntervalAndLogger) linkObj).CompleteLoggerData();
      }
      return true;
    }

    internal void GetParameterInfo(StringBuilder TheText)
    {
      TheText.Append(ZR_Constants.SystemNewLine);
      SortedList sortedList = new SortedList();
      foreach (DictionaryEntry allParameter in this.MyMeter.AllParameters)
      {
        Parameter parameter = (Parameter) allParameter.Value;
        string[] strArray = parameter.FullName.Split('.');
        if (strArray.Length > 1)
          sortedList.Add((object) (strArray[1] + "(" + strArray[0] + ")"), (object) parameter);
        else
          sortedList.Add((object) parameter.Name, (object) parameter);
      }
      int totalWidth1 = 0;
      int totalWidth2 = 0;
      foreach (DictionaryEntry dictionaryEntry in sortedList)
      {
        Parameter parameter = (Parameter) dictionaryEntry.Value;
        if (parameter.Name.Length > totalWidth1)
          totalWidth1 = parameter.Name.Length;
        if (parameter.FunctionNumber >= 0)
        {
          int length = ((Function) this.MyMeter.MyHandler.MyLoadedFunctions.FullLoadedFunctions[(object) (ushort) parameter.FunctionNumber]).Name.Length;
          if (length > totalWidth2)
            totalWidth2 = length;
        }
      }
      foreach (DictionaryEntry dictionaryEntry in sortedList)
      {
        Parameter parameter = (Parameter) dictionaryEntry.Value;
        TheText.Append(parameter.Name.PadRight(totalWidth1, '.'));
        if (this.MyMeter.MyHandler.MyInfoFlags.ShowFunctionNumbers)
        {
          TheText.Append(" ");
          if (parameter.FunctionNumber < 0)
            TheText.Append("----");
          else
            TheText.Append(parameter.FunctionNumber.ToString("d04"));
        }
        if (this.MyMeter.MyHandler.MyInfoFlags.ShowFunctionNames)
        {
          TheText.Append(" ");
          if (parameter.FunctionNumber < 0)
            TheText.Append("----".PadRight(totalWidth2, '.'));
          else
            TheText.Append(((Function) this.MyMeter.MyHandler.MyLoadedFunctions.FullLoadedFunctions[(object) (ushort) parameter.FunctionNumber]).Name.PadRight(totalWidth2, '.'));
        }
        TheText.Append("  Adr:");
        if (parameter.Address < 0)
          TheText.Append("----");
        else
          TheText.Append(parameter.Address.ToString("x04"));
        if (parameter.ExistOnEprom)
        {
          TheText.Append(" VEpr:0x");
          TheText.Append(parameter.ValueEprom.ToString("x08"));
          TheText.Append(" = ");
          if (parameter.ParameterFormat == Parameter.BaseParameterFormat.DateTime)
          {
            DateTime dateTime = ZR_Calendar.Cal_GetDateTime((uint) parameter.ValueEprom);
            TheText.Append(" Time:'" + dateTime.ToString("dd.MM.yyyy HH:mm:ss") + "'");
          }
          else
            TheText.Append(parameter.ValueEprom.ToString("d012"));
        }
        TheText.Append(ZR_Constants.SystemNewLine);
      }
    }

    internal void GetBlockListInfo(StringBuilder TheText)
    {
      int num = -1;
      foreach (LinkBlock linkBlock in this.LinkBlockList)
      {
        TheText.Append(ZR_Constants.SystemNewLine);
        TheText.Append("*****************************************************************************" + ZR_Constants.SystemNewLine);
        TheText.Append("*********************** LinkerBlock: " + linkBlock.LinkBlockType.ToString() + ZR_Constants.SystemNewLine);
        TheText.Append(ZR_Constants.SystemNewLine);
        int RAM_Address = !(linkBlock is RuntimeCode) ? -1 : this.RuntimeCodeStartAddress;
        foreach (object linkObj in linkBlock.LinkObjList)
        {
          if (linkObj is Parameter)
          {
            ((LinkObj) linkObj).GetObjectInfo(TheText, this.MyMeter);
          }
          else
          {
            CodeBlock codeBlock = (CodeBlock) linkObj;
            if (codeBlock.FunctionNumber != num)
            {
              num = codeBlock.FunctionNumber;
              TheText.Append(ZR_Constants.SystemNewLine);
              TheText.Append("### Function: " + num.ToString() + ZR_Constants.SystemNewLine);
            }
            codeBlock.GetObjectInfo(TheText, this.MyMeter);
            foreach (LinkObj code in codeBlock.CodeList)
              code.GetObjectInfo(TheText, this.MyMeter, ref RAM_Address);
          }
        }
      }
    }

    internal void GetBlockListDiffInfo(
      StringBuilder RefText,
      StringBuilder CompareText,
      byte[] CompareProm)
    {
      string str = "";
      int num = -1;
      int TheValue = 0;
      bool flag1 = true;
      bool flag2 = false;
      bool flag3 = true;
      bool flag4 = true;
      for (int index = 0; index < RefText.Length; ++index)
      {
        char digit = RefText[index];
        if (digit == '\n' || digit == '\r')
        {
          num = -1;
          TheValue = 0;
          flag1 = true;
          flag2 = false;
          flag3 = true;
          flag4 = true;
          CompareText.Append(digit);
        }
        else
        {
          ++num;
          if (flag2)
          {
            CompareText.Append(digit);
          }
          else
          {
            if (TheValue >= CompareProm.Length)
              CompareText.Append('-');
            if (flag1)
            {
              if (!this.AddHexDigit(digit, ref TheValue, 3 - num))
                flag2 = true;
              else if (num == 3)
                flag1 = false;
              CompareText.Append(digit);
            }
            else if (flag4)
            {
              if (digit == ' ')
                flag4 = false;
              CompareText.Append(digit);
            }
            else if (flag3)
            {
              if (digit == ' ')
                CompareText.Append(digit);
              else if ((digit < '0' || digit > '9') && (digit < 'a' || digit > 'f'))
              {
                flag2 = true;
                CompareText.Append(digit);
              }
              else
              {
                str = CompareProm[TheValue++].ToString("x02");
                CompareText.Append(str[0]);
                flag3 = false;
              }
            }
            else
            {
              CompareText.Append(str[1]);
              flag3 = true;
            }
          }
        }
      }
    }

    internal bool AddHexDigit(char digit, ref int TheValue, int offset)
    {
      int num;
      switch (digit)
      {
        case '0':
          num = 0;
          break;
        case '1':
          num = 1;
          break;
        case '2':
          num = 2;
          break;
        case '3':
          num = 3;
          break;
        case '4':
          num = 4;
          break;
        case '5':
          num = 5;
          break;
        case '6':
          num = 6;
          break;
        case '7':
          num = 7;
          break;
        case '8':
          num = 8;
          break;
        case '9':
          num = 9;
          break;
        case 'a':
          num = 10;
          break;
        case 'b':
          num = 11;
          break;
        case 'c':
          num = 12;
          break;
        case 'd':
          num = 13;
          break;
        case 'e':
          num = 14;
          break;
        case 'f':
          num = 15;
          break;
        default:
          return false;
      }
      TheValue += num << 4 * offset;
      return true;
    }
  }
}


--- LinkObj.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LinkObj
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Text;

#nullable disable
namespace GMM_Handler
{
  public class LinkObj
  {
    internal int Address = -1;
    public int Size = -1;
    internal byte[] LinkByteList;
    internal string[] LinkByteComment;

    internal LinkObj()
    {
    }

    internal virtual void GetObjectInfo(StringBuilder InfoString, Meter TheMeter)
    {
    }

    internal virtual void GetObjectInfo(
      StringBuilder InfoString,
      Meter TheMeter,
      ref int RAM_Address)
    {
    }
  }
}


--- LinkPointer.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LinkPointer
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class LinkPointer
  {
    internal LinkPointer.LinkPointerTypes LinkPointerType = LinkPointer.LinkPointerTypes.Undefined;
    internal CodeObject PointerObject;

    internal enum LinkPointerTypes
    {
      ePTR,
      iPTR,
      Undefined,
    }
  }
}


--- LoadedFunctions.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LoadedFunctions
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Data;
using System.Text;
using ZR_ClassLibrary;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace GMM_Handler
{
  internal class LoadedFunctions
  {
    internal ZR_HandlerFunctions MyHandler;
    internal SortedList FullLoadedFunctions;
    internal SortedList LoadedFunctionHeaders;

    public LoadedFunctions(ZR_HandlerFunctions MyHandlerIn)
    {
      this.MyHandler = MyHandlerIn;
      this.FullLoadedFunctions = new SortedList();
      this.LoadedFunctionHeaders = new SortedList();
    }

    internal bool LoadFunctionHeaders(ArrayList FunctionNumbersList)
    {
      Schema.ZRFunctionDataTable TheTable = new Schema.ZRFunctionDataTable();
      if (!this.MyHandler.MyDataBaseAccess.GetFunctionHeaders(FunctionNumbersList, TheTable))
        return false;
      try
      {
        foreach (Schema.ZRFunctionRow row in (InternalDataCollectionBase) TheTable.Rows)
          this.LoadFunctionHeader(row);
      }
      catch
      {
        return false;
      }
      return true;
    }

    internal bool LoadAllPalleteFunctions(
      bool AllVersions,
      ZR_MeterIdent TheIdent,
      out SortedList ThePalette,
      out SortedList LinearPalett,
      out SortedList OldFunctionNumbers)
    {
      ThePalette = (SortedList) null;
      LinearPalett = (SortedList) null;
      OldFunctionNumbers = new SortedList();
      ArrayList NiededFunctions;
      if (!this.MyHandler.MyDataBaseAccess.GetFunctionNumbersList(TheIdent, out NiededFunctions) || !this.GarantAllFunctionsLoaded(NiededFunctions))
        return false;
      string[] strArray = TheIdent.HardwareResource.Split(';');
      try
      {
        ThePalette = new SortedList();
        LinearPalett = new SortedList();
        string str = string.Empty;
        for (int index1 = 0; index1 < NiededFunctions.Count; ++index1)
        {
          Function fullLoadedFunction = (Function) this.FullLoadedFunctions[(object) (ushort) NiededFunctions[index1]];
          for (int index2 = 0; index2 < fullLoadedFunction.NotSupportedResources.Length; ++index2)
          {
            for (int index3 = 0; index3 < strArray.Length; ++index3)
            {
              if (fullLoadedFunction.NotSupportedResources[index2] == strArray[index3])
                goto label_21;
            }
          }
          if (fullLoadedFunction.Name == str)
          {
            OldFunctionNumbers.Add((object) fullLoadedFunction.Number, (object) "");
            if (!AllVersions)
              continue;
          }
          else
            str = fullLoadedFunction.Name;
          if (fullLoadedFunction.Name == "DefaultFunction" || fullLoadedFunction.Name.StartsWith("Hardwaretest"))
          {
            LinearPalett.Add((object) (fullLoadedFunction.FullName + "(" + fullLoadedFunction.Number.ToString() + ")"), (object) fullLoadedFunction);
            continue;
          }
          LinearPalett.Add((object) (fullLoadedFunction.FullName + "(" + fullLoadedFunction.Version.ToString() + "_" + fullLoadedFunction.Number.ToString() + ")"), (object) fullLoadedFunction);
          SortedList sortedList1 = (SortedList) ThePalette[(object) fullLoadedFunction.Group];
          if (sortedList1 == null)
          {
            sortedList1 = new SortedList();
            ThePalette.Add((object) fullLoadedFunction.Group, (object) sortedList1);
          }
          SortedList sortedList2 = (SortedList) sortedList1[(object) fullLoadedFunction.FullName];
          if (sortedList2 == null)
          {
            sortedList2 = new SortedList();
            sortedList1.Add((object) fullLoadedFunction.FullName, (object) sortedList2);
          }
          sortedList2.Add((object) (fullLoadedFunction.Version.ToString() + "_" + fullLoadedFunction.Number.ToString()), (object) fullLoadedFunction);
label_21:;
        }
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, ex.ToString());
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Illegal translated function names");
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
        return false;
      }
      return true;
    }

    private Function LoadFunctionHeader(Schema.ZRFunctionRow TheRow)
    {
      ushort functionNumber = (ushort) TheRow.FunctionNumber;
      Function loadedFunctionHeader = (Function) this.LoadedFunctionHeaders[(object) functionNumber];
      if (loadedFunctionHeader != null)
        return loadedFunctionHeader;
      Function function1 = new Function();
      function1.Number = functionNumber;
      function1.Name = TheRow.FunctionName;
      function1.Version = TheRow.FunctionVersion;
      function1.FirmwareVersionMin = TheRow.FirmwareVersionMin;
      function1.FirmwareVersionMax = TheRow.FirmwareVersionMax;
      switch (TheRow.FunctionType)
      {
        case 1:
          function1.Localisable = FunctionLocalisableType.NORMAL;
          break;
        case 2:
          function1.Localisable = FunctionLocalisableType.FIRST;
          break;
        case 3:
          function1.Localisable = FunctionLocalisableType.MAIN;
          break;
        case 4:
          function1.Localisable = FunctionLocalisableType.INVISIBLE;
          break;
        case 9:
          function1.Localisable = FunctionLocalisableType.SYSTEM;
          break;
        default:
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Illegal function localisable attribute");
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
          return (Function) null;
      }
      function1.LoggerType = (LoggerTypes) TheRow.LoggerType;
      function1.ShortInfo = !TheRow.IsFunctionShortInfoNull() ? TheRow.FunctionShortInfo : string.Empty;
      function1.MeterResourcesList = TheRow.HardwareResource;
      if (!TheRow.IsSoftwareResourceNull())
      {
        Function function2 = function1;
        function2.MeterResourcesList = function2.MeterResourcesList + ";" + TheRow.SoftwareResource;
      }
      string str1 = string.Empty;
      if (!TheRow.IsAccessRightsNull())
        str1 = TheRow.AccessRights;
      int num = str1.IndexOf("ALIAS=");
      if (num >= 0)
      {
        string str2 = str1.Substring(num + 6);
        int length = str2.IndexOf(" ");
        if (length >= 0)
          str2 = str2.Substring(0, length);
        if (str2.Length > 0)
          function1.AliasName = str2;
      }
      function1.FullName = TheRow.IsFullNameNull() ? string.Empty : TheRow.FullName;
      function1.Description = TheRow.IsFunctionDescriptionNull() ? string.Empty : TheRow.FunctionDescription;
      function1.Group = TheRow.IsFunctionGroupNull() ? string.Empty : TheRow.FunctionGroup;
      function1.Symbolname = TheRow.IsSymbolnameNull() ? string.Empty : TheRow.Symbolname;
      if (!TheRow.IsAccessRightNull())
        function1.UserAccessRight = TheRow.AccessRight;
      function1.WorkingAccessRights = str1;
      this.LoadedFunctionHeaders.Add((object) function1.Number, (object) function1);
      return function1;
    }

    internal bool GarantAllFunctionsLoaded(ArrayList FunctionNumbersList)
    {
      ArrayList FunctionList = new ArrayList();
      if (this.FullLoadedFunctions.Count > 0)
      {
        for (int index = 0; index < FunctionNumbersList.Count; ++index)
        {
          if (!this.FullLoadedFunctions.Contains((object) (ushort) FunctionNumbersList[index]))
            FunctionList.Add(FunctionNumbersList[index]);
        }
        if (FunctionList.Count == 0)
          return true;
      }
      else
        FunctionList = FunctionNumbersList;
      ArrayList FunctionNumbersList1 = new ArrayList();
      if (this.LoadedFunctionHeaders.Count > 0)
      {
        for (int index = 0; index < FunctionList.Count; ++index)
        {
          if (!this.LoadedFunctionHeaders.Contains((object) (ushort) FunctionList[index]))
            FunctionNumbersList1.Add(FunctionList[index]);
        }
      }
      else
        FunctionNumbersList1 = FunctionList;
      if (FunctionNumbersList1.Count <= 0 || this.LoadFunctionHeaders(FunctionNumbersList1))
      {
        Schema.ZRParameterDataTable TheTable1 = new Schema.ZRParameterDataTable();
        if (this.MyHandler.MyDataBaseAccess.GetFunctionParameters(FunctionList, TheTable1))
        {
          try
          {
            foreach (ushort key in FunctionList)
            {
              Function loadedFunctionHeader = (Function) this.LoadedFunctionHeaders[(object) key];
              Schema.ZRParameterRow[] zrParameterRowArray = (Schema.ZRParameterRow[]) TheTable1.Select("FunctionNumber = " + key.ToString(), "FunctionNumber,StructureNr,StructureIndex");
              loadedFunctionHeader.ParameterList = new ArrayList();
              StringBuilder stringBuilder = new StringBuilder();
              for (int index = 0; index < zrParameterRowArray.Length; ++index)
              {
                string parameterName = zrParameterRowArray[index].ParameterName;
                int parameterSize = zrParameterRowArray[index].ParameterSize;
                LinkBlockTypes Block = zrParameterRowArray[index].MemoryType != (short) 22 ? (LinkBlockTypes) zrParameterRowArray[index].MemoryType : LinkBlockTypes.NotLinkedReplaceParameter;
                Parameter parameter = new Parameter(parameterName, parameterSize, Block);
                parameter.FullName = loadedFunctionHeader.Name + "." + parameterName;
                parameter.ExistOnEprom = Block != LinkBlockTypes.Static;
                try
                {
                  if (!zrParameterRowArray[index].IsMeterResourceNull())
                  {
                    string meterResource = zrParameterRowArray[index].MeterResource;
                    char[] chArray = new char[1]{ ';' };
                    foreach (string str1 in meterResource.Split(chArray))
                    {
                      string str2 = str1.Trim();
                      if (str2.Length != 0)
                      {
                        if (str2.StartsWith("m:"))
                        {
                          parameter.MBusNeadedResources += str2.Substring(2);
                        }
                        else
                        {
                          parameter.MeterResource = str2;
                          stringBuilder.Append("s:" + parameter.MeterResource + ";");
                        }
                      }
                    }
                  }
                }
                catch
                {
                }
                parameter.FunctionNumber = zrParameterRowArray[index].FunctionNumber;
                parameter.StoreType = (Parameter.ParamStorageType) zrParameterRowArray[index].ParameterType;
                switch (parameter.StoreType)
                {
                  case Parameter.ParamStorageType.INTERVALPOINT:
                    parameter.ParameterFormat = Parameter.BaseParameterFormat.DateTime;
                    break;
                  case Parameter.ParamStorageType.INTERVAL:
                    parameter.ParameterFormat = Parameter.BaseParameterFormat.TimeSpan;
                    break;
                  case Parameter.ParamStorageType.INTERVALOFFSET:
                    parameter.ParameterFormat = Parameter.BaseParameterFormat.TimeSpan;
                    break;
                  case Parameter.ParamStorageType.TIMEPOINT:
                    parameter.ParameterFormat = Parameter.BaseParameterFormat.DateTime;
                    break;
                }
                parameter.DefaultValue = (long) zrParameterRowArray[index].DefaultValueLow;
                parameter.DefaultValue += (long) zrParameterRowArray[index].DefaultValueHigh << 32;
                parameter.ValueCPU = parameter.DefaultValue;
                parameter.ValueEprom = parameter.DefaultValue;
                parameter.MinValue = (long) zrParameterRowArray[index].MinValueLow;
                parameter.MinValue += (long) zrParameterRowArray[index].MinValueHigh << 32;
                parameter.MaxValue = (long) zrParameterRowArray[index].MaxValueLow;
                parameter.MaxValue += (long) zrParameterRowArray[index].MaxValueHigh << 32;
                string GroupNamesString = zrParameterRowArray[index].IsAccessrightsNull() ? string.Empty : zrParameterRowArray[index].Accessrights;
                parameter.AddParameterToGroup(GroupNamesString);
                parameter.Unit = zrParameterRowArray[index].IsUnitNull() ? string.Empty : zrParameterRowArray[index].Unit;
                string DifVifString = zrParameterRowArray[index].IsMBusDifVifValueNull() ? string.Empty : zrParameterRowArray[index].MBusDifVifValue;
                if (parameter.SetDifVifValues(DifVifString))
                {
                  if (zrParameterRowArray[index].MBusShortProt.ToString()[0] == '1')
                    parameter.MBusShortOn = true;
                  if (zrParameterRowArray[index].MBusLongProt.ToString()[0] == '1')
                    parameter.MBusOn = true;
                  parameter.MBusParameterLength = (int) zrParameterRowArray[index].MBusParamLen;
                  if (!zrParameterRowArray[index].IsMBusParamConvertNull())
                  {
                    string mbusParamConvert = zrParameterRowArray[index].MBusParamConvert;
                    if (mbusParamConvert.Length > 0)
                    {
                      switch (mbusParamConvert)
                      {
                        case "MBU_PARA_CONTROL_DATE":
                          parameter.MBusParamConvertion = Parameter.MBusParameterConversion.Date;
                          parameter.ParameterFormat = Parameter.BaseParameterFormat.DateTime;
                          break;
                        case "MBU_PARA_CONTROL_DATE_TIME":
                          parameter.MBusParamConvertion = Parameter.MBusParameterConversion.DateTime;
                          parameter.ParameterFormat = Parameter.BaseParameterFormat.DateTime;
                          break;
                        case "BCD_VALUE":
                          parameter.ParameterFormat = Parameter.BaseParameterFormat.BCD;
                          break;
                      }
                    }
                  }
                  parameter.LoggerID = zrParameterRowArray[index].LoggerID;
                  if (!zrParameterRowArray[index].IsconfiginfoNull())
                  {
                    string configinfo = zrParameterRowArray[index].configinfo;
                    parameter.MBusParameterOverride = configinfo.IndexOf("Volume") < 0 ? (configinfo.IndexOf("Energy") < 0 ? (configinfo.IndexOf("Flow") < 0 ? (configinfo.IndexOf("Power") < 0 ? (configinfo.IndexOf("INPUT_1") < 0 ? (configinfo.IndexOf("INPUT_2") < 0 ? Parameter.MBusParameterOverrideType.None : Parameter.MBusParameterOverrideType.INPUT_2) : Parameter.MBusParameterOverrideType.INPUT_1) : Parameter.MBusParameterOverrideType.Power) : Parameter.MBusParameterOverrideType.Flow) : Parameter.MBusParameterOverrideType.Energy) : Parameter.MBusParameterOverrideType.Volume;
                  }
                  else
                    parameter.MBusParameterOverride = Parameter.MBusParameterOverrideType.None;
                  parameter.NameTranslated = zrParameterRowArray[index].IsNameTranslatedNull() ? string.Empty : zrParameterRowArray[index].NameTranslated;
                  parameter.ParameterInfo = zrParameterRowArray[index].IsParameterInfoNull() ? string.Empty : zrParameterRowArray[index].ParameterInfo;
                  if (!zrParameterRowArray[index].IsStructureNrNull())
                    parameter.StructureNr = (int) zrParameterRowArray[index].StructureNr;
                  if (!zrParameterRowArray[index].IsStructureIndexNull())
                    parameter.StructureIndex = (int) zrParameterRowArray[index].StructureIndex;
                  loadedFunctionHeader.ParameterList.Add((object) parameter);
                }
                else
                  goto label_132;
              }
              stringBuilder.Append(loadedFunctionHeader.MeterResourcesList);
              int length1 = 0;
              int length2 = 0;
              int length3 = 0;
              string[] strArray = stringBuilder.ToString().Split(';');
              for (int index = 0; index < strArray.Length; ++index)
              {
                strArray[index] = strArray[index].Trim();
                if (strArray[index].Length > 0)
                {
                  if (strArray[index].StartsWith("s:"))
                    ++length2;
                  else if (strArray[index].StartsWith("n:"))
                    ++length3;
                  else
                    ++length1;
                }
              }
              loadedFunctionHeader.SuppliedResources = new string[length2];
              loadedFunctionHeader.NeadedResources = new string[length1];
              loadedFunctionHeader.NotSupportedResources = new string[length3];
              int num1 = 0;
              int num2 = 0;
              int num3 = 0;
              for (int index = 0; index < strArray.Length; ++index)
              {
                if (strArray[index].Length > 0)
                {
                  if (strArray[index].StartsWith("s:"))
                    loadedFunctionHeader.SuppliedResources[num1++] = strArray[index].Substring(2);
                  else if (strArray[index].StartsWith("n:"))
                    loadedFunctionHeader.NotSupportedResources[num3++] = strArray[index].Substring(2);
                  else
                    loadedFunctionHeader.NeadedResources[num2++] = strArray[index];
                }
              }
            }
          }
          catch (Exception ex)
          {
            ZR_ClassLibMessages.AddErrorDescription(ex.ToString());
            goto label_132;
          }
          DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable TheTable2 = new DataSetGMM_Handler.CodeRuntimeCodeJoinedDataTable();
          if (this.MyHandler.MyDataBaseAccess.GetRuntimeCode(FunctionList, TheTable2))
          {
            try
            {
              int num = -1;
              string str = "";
              CodeBlock.CodeSequenceTypes CodeSequenceType = CodeBlock.CodeSequenceTypes.Unknown;
              FrameTypes FrameType = FrameTypes.None;
              bool flag = true;
              Function function = (Function) null;
              CodeBlock codeBlock = (CodeBlock) null;
              for (int index = 0; index < TheTable2.Rows.Count; ++index)
              {
                DataSetGMM_Handler.CodeRuntimeCodeJoinedRow runtimeCodeJoinedRow = TheTable2[index];
                int functionNumber = runtimeCodeJoinedRow.FunctionNumber;
                string codeSequenceType = runtimeCodeJoinedRow.CodeSequenceType;
                if (num != functionNumber)
                {
                  num = functionNumber;
                  function = (Function) this.LoadedFunctionHeaders[(object) (ushort) num];
                  flag = true;
                }
                if (str != codeSequenceType)
                {
                  if (!CodeBlock.GetCodeSequenceType(codeSequenceType, out CodeSequenceType, out FrameType, out string _))
                  {
                    this.MyHandler.AddErrorPointMessage("Unknown CodeType");
                    goto label_132;
                  }
                  else
                  {
                    str = codeSequenceType;
                    flag = true;
                  }
                }
                if (flag)
                {
                  if (CodeSequenceType == CodeBlock.CodeSequenceTypes.Interval_Runtime || CodeSequenceType == CodeBlock.CodeSequenceTypes.EEPROM_Interval_Runtime)
                  {
                    codeBlock = (CodeBlock) new IntervalAndLogger(CodeSequenceType, FrameType, num);
                    (codeBlock as IntervalAndLogger).Type = function.LoggerType;
                  }
                  else
                    codeBlock = new CodeBlock(CodeSequenceType, FrameType, num);
                  codeBlock.CodeSequenceName = runtimeCodeJoinedRow.IsCodeSequenceNameNull() ? string.Empty : runtimeCodeJoinedRow.CodeSequenceName;
                  codeBlock.CodeSequenceInfo = runtimeCodeJoinedRow.IsCodeSequenceInfoNull() ? string.Empty : runtimeCodeJoinedRow.CodeSequenceInfo;
                  function.RuntimeCodeBlockList.Add((object) codeBlock);
                  flag = false;
                }
                CodeObject TheCodeObject = new CodeObject(functionNumber);
                TheCodeObject.CodeValue = runtimeCodeJoinedRow.CodeValue.Trim();
                if (this.GetCodeType(runtimeCodeJoinedRow.CodeType, TheCodeObject))
                {
                  TheCodeObject.CodeID = runtimeCodeJoinedRow.CodeID;
                  TheCodeObject.LineNr = runtimeCodeJoinedRow.LineNr;
                  TheCodeObject.LineInfo = runtimeCodeJoinedRow.IsLineInfoNull() ? string.Empty : runtimeCodeJoinedRow.LineInfo;
                  codeBlock.CodeList.Add((object) TheCodeObject);
                }
                else
                  goto label_132;
              }
            }
            catch (Exception ex)
            {
              this.MyHandler.AddErrorPointMessage(ex.ToString());
              goto label_132;
            }
            Schema.MenuDataTable TheTable3 = new Schema.MenuDataTable();
            if (this.MyHandler.MyDataBaseAccess.GetMenus(FunctionList, TheTable3))
            {
              StringBuilder stringBuilder = new StringBuilder();
              for (int index = 0; index < TheTable3.Rows.Count; ++index)
                stringBuilder.Append(TheTable3[index].InterpreterCode.ToString() + ",");
              DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable TheTable4 = new DataSetGMM_Handler.CodeDisplayCodeJoinedDataTable();
              if (stringBuilder.Length > 1)
              {
                --stringBuilder.Length;
                if (!this.MyHandler.MyDataBaseAccess.GetDisplayCodes(stringBuilder.ToString(), TheTable4))
                  goto label_132;
              }
              try
              {
                int num4 = -1;
                string str = "";
                Function function = (Function) null;
                MenuItem menuItem = (MenuItem) null;
                bool flag = true;
                int num5 = -1;
                for (int index1 = 0; index1 < TheTable3.Rows.Count; ++index1)
                {
                  Schema.MenuRow menuRow = TheTable3[index1];
                  int functionNumber = menuRow.FunctionNumber;
                  if (functionNumber != num4)
                  {
                    num4 = functionNumber;
                    function = (Function) this.LoadedFunctionHeaders[(object) (ushort) num4];
                    flag = true;
                    num5 = -1;
                  }
                  string menuName = menuRow.MenuName;
                  int interpreterCode = menuRow.InterpreterCode;
                  DataSetGMM_Handler.CodeDisplayCodeJoinedRow[] displayCodeJoinedRowArray = (DataSetGMM_Handler.CodeDisplayCodeJoinedRow[]) null;
                  if (flag || menuName != str)
                  {
                    menuItem = new MenuItem((ushort) num4, menuName, interpreterCode);
                    menuItem.XPos = (int) menuRow.XPos;
                    menuItem.YPos = (int) menuRow.YPos;
                    menuItem.ClickEvent = menuRow.ClickEvent;
                    menuItem.PressEvent = menuRow.PressEvent;
                    menuItem.HoldEvent = menuRow.HoldEvent;
                    menuItem.TimeoutEvent = menuRow.TimeOutEvent;
                    menuItem.Description = menuRow.IsDescriptionNull() ? string.Empty : menuRow.Description;
                    displayCodeJoinedRowArray = (DataSetGMM_Handler.CodeDisplayCodeJoinedRow[]) TheTable4.Select("InterpreterCode = " + interpreterCode.ToString(), "InterpreterCode,SequenceNr,LineNr");
                    function.MenuList.Add((object) menuItem);
                    ++num5;
                  }
                  int num6 = -1;
                  CodeBlock.CodeSequenceTypes CodeSequenceType = CodeBlock.CodeSequenceTypes.Unknown;
                  FrameTypes FrameType = FrameTypes.None;
                  CodeBlock codeBlock = (CodeBlock) null;
                  for (int index2 = 0; index2 < displayCodeJoinedRowArray.Length; ++index2)
                  {
                    int sequenceNr = displayCodeJoinedRowArray[index2].SequenceNr;
                    if (sequenceNr != num6)
                    {
                      num6 = sequenceNr;
                      string SpecialOptions;
                      if (!CodeBlock.GetCodeSequenceType(displayCodeJoinedRowArray[index2].CodeSequenceType, out CodeSequenceType, out FrameType, out SpecialOptions))
                      {
                        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Unknown code sequence type");
                        goto label_132;
                      }
                      else
                      {
                        codeBlock = new CodeBlock(CodeSequenceType, FrameType, functionNumber);
                        codeBlock.FunctionMenuIndex = num5;
                        codeBlock.SpecialOptions = SpecialOptions;
                        codeBlock.CodeSequenceInfo = displayCodeJoinedRowArray[index2].IsCodeSequenceInfoNull() ? string.Empty : displayCodeJoinedRowArray[index2].CodeSequenceInfo;
                        menuItem.DisplayCodeBlocks.Add((object) codeBlock);
                      }
                    }
                    CodeObject TheCodeObject = new CodeObject(functionNumber);
                    TheCodeObject.CodeValue = displayCodeJoinedRowArray[index2].CodeValue.Trim();
                    if (this.GetCodeType(displayCodeJoinedRowArray[index2].CodeType, TheCodeObject))
                    {
                      TheCodeObject.CodeID = displayCodeJoinedRowArray[index2].CodeID;
                      TheCodeObject.LineNr = displayCodeJoinedRowArray[index2].LineNr;
                      TheCodeObject.LineInfo = displayCodeJoinedRowArray[index2].IsLineInfoNull() ? string.Empty : displayCodeJoinedRowArray[index2].LineInfo;
                      codeBlock.CodeList.Add((object) TheCodeObject);
                    }
                    else
                      goto label_132;
                  }
                }
              }
              catch (Exception ex)
              {
                ZR_ClassLibMessages.AddErrorDescription(ex.ToString());
                goto label_132;
              }
              foreach (ushort key in FunctionList)
                this.FullLoadedFunctions.Add((object) key, this.LoadedFunctionHeaders[(object) key]);
              return true;
            }
          }
        }
      }
label_132:
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Load function error!");
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Database error");
      return false;
    }

    private bool GetCodeType(string CodeTypeString, CodeObject TheCodeObject)
    {
      string upper = CodeTypeString.Trim().ToUpper();
      if (upper.StartsWith("BYTE"))
      {
        TheCodeObject.CodeType = CodeObject.CodeTypes.BYTE;
        TheCodeObject.Size = 1;
      }
      else if (upper.StartsWith("WORD"))
      {
        TheCodeObject.CodeType = CodeObject.CodeTypes.WORD;
        TheCodeObject.Size = 2;
      }
      else if (upper.StartsWith("LONG"))
      {
        TheCodeObject.CodeType = CodeObject.CodeTypes.LONG;
        TheCodeObject.Size = 4;
      }
      else if (upper.StartsWith("EPTR"))
      {
        TheCodeObject.CodeType = CodeObject.CodeTypes.ePTR;
        TheCodeObject.Size = 2;
      }
      else
      {
        if (!upper.StartsWith("IPTR"))
          return false;
        TheCodeObject.CodeType = CodeObject.CodeTypes.iPTR;
        TheCodeObject.Size = 2;
      }
      if (upper.Length > 4)
        TheCodeObject.OverrideMark = upper.Substring(4);
      return true;
    }

    internal short GetNewestVersion(string FunctionName)
    {
      int newestVersion = -1;
      for (int index = 0; index < this.LoadedFunctionHeaders.Count; ++index)
      {
        Function byIndex = (Function) this.LoadedFunctionHeaders.GetByIndex(index);
        if (byIndex.Name == FunctionName && byIndex.Version > newestVersion)
          newestVersion = byIndex.Version;
      }
      return (short) newestVersion;
    }

    internal void ClearCache()
    {
      this.FullLoadedFunctions = new SortedList();
      this.LoadedFunctionHeaders = new SortedList();
    }

    internal void RemoveCachedFunction(ushort FunctionNumber)
    {
      this.LoadedFunctionHeaders.Remove((object) FunctionNumber);
      this.FullLoadedFunctions.Remove((object) FunctionNumber);
    }
  }
}


--- LoggerInfo.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LoggerInfo
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class LoggerInfo
  {
    public IntervalAndLogger MyLogger;
    public string LoggerName;
    public int StartAddress;
    public int EndAddress;
    public int WriteAddress;
    public bool LoggerFull;
    public int EntrySize;
    public int MaxEntries;
    public int MaxRamBytes;
    public int AvailableEntries;
    public int TimeListIndex;
    public string Intervall = "";
    public DateTime FirstTimePoint;
    public DateTime LastTimePoint;
    public string FirstStoredTimePoint;
    public string LastStoredTimePoint;
    public string EstimatedReadoutTime;
    public int IndexOfTimeParameter;
    public LoggerParameterData[] AllPotentialParameters;
    public LoggerParameterData[] AllParameters;
    public int BytesToRead;
    public int ReadedBytes;
    public SortedList<DateTime, string[]> LoggerData;
    public DataTable LoggerDataTable;

    public LoggerInfo(IntervalAndLogger LoggerIn) => this.MyLogger = LoggerIn;

    public void CheckReadingTimes(ref DateTime FromTime, ref DateTime ToTime)
    {
      if (FromTime < this.FirstTimePoint)
        FromTime = this.FirstTimePoint;
      if (FromTime > this.LastTimePoint)
        FromTime = this.LastTimePoint;
      this.MyLogger.SetTimeToLastInterval(this.MyLogger.NextEventDateTime, ref FromTime);
      if (ToTime < FromTime)
        ToTime = FromTime;
      if (ToTime > this.LastTimePoint)
        ToTime = this.LastTimePoint;
      this.MyLogger.SetTimeToNextInterval(this.MyLogger.NextEventDateTime, 0, ref ToTime);
    }

    public bool ReadLogger(DateTime FromTime, DateTime ToTime)
    {
      bool flag = false;
      if (this.AvailableEntries < 1)
        return false;
      this.CheckReadingTimes(ref FromTime, ref ToTime);
      int num1 = this.GetNumberOfStoragePoints(this.FirstTimePoint, FromTime) - 1;
      int num2 = this.GetNumberOfStoragePoints(FromTime, ToTime);
      if (num2 > this.AvailableEntries)
        num2 = this.AvailableEntries;
      if (num2 < 1)
        num2 = 1;
      int num3 = this.AvailableEntries - num1 - num2;
      if (num3 < 0)
        num3 = 0;
      this.BytesToRead = num2 * this.EntrySize;
      int num4 = 230 / this.MyLogger.EntrySize * this.MyLogger.EntrySize;
      int num5 = this.WriteAddress - this.EntrySize * (1 + num3);
      this.ReadedBytes = 0;
      int num6 = 0;
      this.LoggerData = new SortedList<DateTime, string[]>();
      while (this.ReadedBytes < this.BytesToRead)
      {
        if (num5 < this.StartAddress)
          num5 = num5 + this.EndAddress - this.StartAddress;
        int num7 = num5 >= this.WriteAddress ? num5 - this.WriteAddress + this.EntrySize : num5 - this.StartAddress + this.EntrySize;
        int NumberOfBytes = num4;
        if (NumberOfBytes > num7)
          NumberOfBytes = num7;
        int num8 = this.BytesToRead - this.ReadedBytes;
        if (num8 < NumberOfBytes)
          NumberOfBytes = num8;
        ByteField MemoryData;
        if (this.MyLogger.MyMeter.MyHandler.SerBus.ReadMemory(MemoryLocation.EEPROM, num5 + this.EntrySize - NumberOfBytes, NumberOfBytes, out MemoryData))
        {
          for (int index1 = MemoryData.Count - this.EntrySize; index1 >= 0; index1 -= this.EntrySize)
          {
            string[] strArray = new string[this.IndexOfTimeParameter < 0 ? this.MyLogger.LoggerParameter.Count : this.MyLogger.LoggerParameter.Count - 1];
            int num9 = 0;
            int num10 = 0;
            DateTime key = new DateTime(1980, 1, 1).AddSeconds((double) num6++);
            for (int index2 = 0; index2 < this.MyLogger.LoggerParameter.Count; ++index2)
            {
              int size = this.MyLogger.LoggerParameter[index2].Size;
              long TheTime = 0;
              for (int index3 = size - 1; index3 >= 0; --index3)
                TheTime = (TheTime << 8) + (long) MemoryData.Data[index1 + num9 + index3];
              if (index2 != this.IndexOfTimeParameter)
              {
                StringBuilder PValue = new StringBuilder(TheTime.ToString());
                int unitExponent = this.AllParameters[index2].UnitExponent;
                ParameterService.SetStringExpo(ref PValue, unitExponent);
                strArray[num10++] = PValue.ToString();
              }
              else
                key = ZR_Calendar.Cal_GetDateTime((uint) TheTime);
              num9 += size;
            }
            if (this.LoggerData.IndexOfKey(key) < 0)
              this.LoggerData.Add(key, strArray);
          }
          this.ReadedBytes += NumberOfBytes;
          num5 -= NumberOfBytes;
        }
        else
          goto label_33;
      }
      flag = true;
label_33:
      try
      {
        this.LoggerDataTable = new DataTable();
        this.LoggerDataTable.Columns.Add(new DataColumn("TimePoint")
        {
          DataType = Type.GetType("System.DateTime")
        });
        for (int index = 0; index < this.AllParameters.Length; ++index)
        {
          if (index != this.IndexOfTimeParameter)
          {
            StringBuilder stringBuilder = new StringBuilder(100);
            stringBuilder.Append("ZDF: " + this.AllParameters[index].ZDF_ParameterID + ZR_Constants.SystemNewLine);
            stringBuilder.Append("Id: " + this.AllParameters[index].PValueDescription.PValueID.ToString() + ZR_Constants.SystemNewLine);
            stringBuilder.Append(this.AllParameters[index].PValueDescription.ValueName + ZR_Constants.SystemNewLine);
            stringBuilder.Append("[" + this.AllParameters[index].PValueDescription.Unit + "]");
            this.LoggerDataTable.Columns.Add(new DataColumn(stringBuilder.ToString())
            {
              DataType = this.AllParameters[index].ParameterFormat != Parameter.BaseParameterFormat.DateTime ? Type.GetType("System.String") : Type.GetType("System.DateTime")
            });
          }
        }
        for (int index4 = this.LoggerData.Count - 1; index4 >= 0; --index4)
        {
          DataRow row = this.LoggerDataTable.NewRow();
          row[0] = (object) this.LoggerData.Keys[index4];
          string[] strArray = this.LoggerData.Values[index4];
          for (int index5 = 0; index5 < strArray.Length; ++index5)
          {
            if (this.LoggerDataTable.Columns[index5 + 1].DataType == typeof (DateTime))
            {
              uint TheTime = uint.Parse(strArray[index5]);
              row[index5 + 1] = (object) ZR_Calendar.Cal_GetDateTime(TheTime);
            }
            else
              row[index5 + 1] = (object) strArray[index5].Replace(".", SystemValues.ZRDezimalSeparator);
          }
          this.LoggerDataTable.Rows.Add(row);
        }
      }
      catch
      {
        return false;
      }
      return flag;
    }

    public int GetCodeTimeIndex()
    {
      byte linkByte = ((LinkObj) this.MyLogger.CodeList[0]).LinkByteList[0];
      for (int codeTimeIndex = 0; codeTimeIndex < IntervalAndLogger.CodeIntervalls.Length; ++codeTimeIndex)
      {
        if ((int) IntervalAndLogger.CodeIntervalls[codeTimeIndex].RuntimeCode == (int) linkByte)
          return codeTimeIndex;
      }
      throw new ArgumentOutOfRangeException("Illegal cycle opcode");
    }

    private int GetNumberOfStoragePoints(DateTime FromTime, DateTime ToTime)
    {
      int numberOfStoragePoints = 1;
      if (this.MyLogger.Interval == 31622400U)
      {
        for (DateTime dateTime = FromTime; dateTime < ToTime; dateTime = dateTime.AddYears(1))
          ++numberOfStoragePoints;
      }
      else if (this.MyLogger.Interval == 2678400U)
      {
        for (DateTime dateTime = FromTime; dateTime < ToTime; dateTime = dateTime.AddMonths(1))
          ++numberOfStoragePoints;
      }
      else
        numberOfStoragePoints = (int) ((long) ToTime.Subtract(FromTime).TotalSeconds / (long) this.MyLogger.Interval + 1L);
      return numberOfStoragePoints;
    }

    public bool ChangeLoggerEntries()
    {
      IntervalAndLogger intervalAndLogger1 = (IntervalAndLogger) null;
      if (this.MaxEntries == this.MyLogger.MaxEntries)
        return true;
      Function fullLoadedFunction = (Function) this.MyLogger.MyMeter.MyHandler.MyLoadedFunctions.FullLoadedFunctions[(object) (ushort) this.MyLogger.FunctionNumber];
      Function ReplaceFunction = fullLoadedFunction.Clone(this.MyLogger.MyMeter);
      for (int index = 0; index < fullLoadedFunction.RuntimeCodeBlockList.Count; ++index)
      {
        CodeBlock runtimeCodeBlock = (CodeBlock) fullLoadedFunction.RuntimeCodeBlockList[index];
        if (runtimeCodeBlock is IntervalAndLogger)
        {
          IntervalAndLogger intervalAndLogger2 = (IntervalAndLogger) runtimeCodeBlock;
          if (intervalAndLogger2.CodeSequenceName == this.MyLogger.CodeSequenceName && intervalAndLogger2.CodeSequenceType == this.MyLogger.CodeSequenceType && intervalAndLogger2.CodeList.Count == this.MyLogger.CodeList.Count)
          {
            intervalAndLogger1 = (IntervalAndLogger) ReplaceFunction.RuntimeCodeBlockList[index];
            break;
          }
        }
      }
      if (intervalAndLogger1 == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Logger block not found.");
        return false;
      }
      intervalAndLogger1.EntrySize = this.MyLogger.EntrySize;
      intervalAndLogger1.P_EndAddress.ValueEprom = intervalAndLogger1.P_StartAddress.ValueEprom + (long) (intervalAndLogger1.EntrySize * this.MaxEntries);
      intervalAndLogger1.MaxEntries = this.MaxEntries;
      for (int index = 0; index < intervalAndLogger1.CodeList.Count; ++index)
        this.MyLogger.MyMeter.MyCompiler.CompileCodeObject((CodeObject) intervalAndLogger1.CodeList[index]);
      return this.MyLogger.MyMeter.MyHandler.MyMeters.ChangeConfigLogger(ReplaceFunction);
    }

    public bool CreateNewLogger()
    {
      ArrayList FunctionParameterList = new ArrayList();
      for (int index = 0; index < this.AllParameters.Length; ++index)
      {
        foreach (Parameter parameter in (IEnumerable<Parameter>) this.MyLogger.MyMeter.PotentialLoggerParameters.Values)
        {
          if (parameter.LoggerData.PValueDescription.ValueName == this.AllParameters[index].PValueDescription.ValueName)
          {
            FunctionParameterList.Add((object) parameter);
            break;
          }
        }
      }
      IntervalAndLogger intervalAndLogger = this.MyLogger.Clone(this.MyLogger.MyMeter, this.MyLogger.CodeSequenceType, this.MyLogger.FrameType, this.MyLogger.FunctionNumber, FunctionParameterList);
      intervalAndLogger.Interval = IntervalAndLogger.CodeIntervalls[this.TimeListIndex].Secounds;
      CodeObject codeObject1 = new CodeObject(this.MyLogger.FunctionNumber);
      codeObject1.Size = 1;
      codeObject1.CodeType = CodeObject.CodeTypes.BYTE;
      codeObject1.CodeValue = this.MyLogger.Type != LoggerTypes.ShortCycleLogger ? IntervalAndLogger.CodeIntervalls[this.TimeListIndex].RuntimeCodeString : "RUI_CODE_Interval RUI_TIME_Extern";
      intervalAndLogger.CodeList.Add((object) codeObject1);
      CodeObject codeObject2 = new CodeObject(this.MyLogger.FunctionNumber);
      codeObject2.Size = 2;
      codeObject2.CodeType = CodeObject.CodeTypes.ePTR;
      codeObject2.CodeValue = this.MyLogger.P_NextTimePoint.Name;
      intervalAndLogger.CodeList.Add((object) codeObject2);
      CodeObject codeObject3 = new CodeObject(this.MyLogger.FunctionNumber);
      codeObject3.Size = 1;
      codeObject3.CodeType = CodeObject.CodeTypes.BYTE;
      intervalAndLogger.CodeList.Add((object) codeObject3);
      int num1 = 0;
      int num2 = 0;
      foreach (Parameter parameter in FunctionParameterList)
      {
        CodeObject codeObject4 = new CodeObject(this.MyLogger.FunctionNumber);
        codeObject4.Size = 1;
        ++num1;
        codeObject4.CodeType = CodeObject.CodeTypes.BYTE;
        intervalAndLogger.CodeList.Add((object) codeObject4);
        bool flag = false;
        switch (parameter.FullName)
        {
          case "DefaultFunction.Sta_Secounds":
            codeObject4.CodeValue = "RUI_CODE_Load_SysTime";
            break;
          case "Energ_WaermeEnergDisplay":
            codeObject4.CodeValue = "RUI_CODE_Load_Energie";
            break;
          case "Vol_VolumenDisplay":
            codeObject4.CodeValue = "RUI_CODE_Load_Volume";
            break;
          default:
            flag = true;
            codeObject4.CodeValue = parameter.Size != 4 ? (parameter.Size != 2 ? "RUI_CODE_Load RUI_VAR_1BYTE" : "RUI_CODE_Load RUI_VAR_2BYTE") : "RUI_CODE_Load RUI_VAR_4BYTE";
            if (!parameter.ExistOnCPU)
            {
              codeObject4.CodeValue += " RUI_VAR_EEPROM";
              break;
            }
            break;
        }
        if (flag)
        {
          CodeObject codeObject5 = new CodeObject(this.MyLogger.FunctionNumber);
          codeObject5.Size = 2;
          num1 += 2;
          if (parameter.ExistOnCPU)
          {
            codeObject5.CodeType = CodeObject.CodeTypes.iPTR;
            codeObject5.CodeValue = parameter.FullName;
          }
          else
          {
            codeObject5.CodeType = CodeObject.CodeTypes.ePTR;
            codeObject5.CodeValue = parameter.FullName;
          }
          intervalAndLogger.CodeList.Add((object) codeObject5);
        }
        CodeObject codeObject6 = new CodeObject(this.MyLogger.FunctionNumber);
        codeObject6.Size = 1;
        ++num1;
        codeObject6.CodeType = CodeObject.CodeTypes.BYTE;
        if (parameter.Size == 4)
        {
          codeObject6.CodeValue = "RUI_CODE_LOGGER_STORE_4BYTE";
          num2 += 4;
        }
        else if (parameter.Size == 2)
        {
          codeObject6.CodeValue = "RUI_CODE_LOGGER_STORE_2BYTE";
          num2 += 2;
        }
        else
        {
          codeObject6.CodeValue = "RUI_CODE_LOGGER_STORE_1BYTE";
          ++num2;
        }
        intervalAndLogger.CodeList.Add((object) codeObject6);
      }
      int num3 = num1 + 1;
      codeObject3.CodeValue = num3.ToString();
      Function function = (Function) this.MyLogger.MyMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) this.MyLogger.FunctionNumber];
      Function ReplaceFunction = function.Clone(this.MyLogger.MyMeter);
      for (int index = 0; index < function.RuntimeCodeBlockList.Count; ++index)
      {
        CodeBlock runtimeCodeBlock = (CodeBlock) function.RuntimeCodeBlockList[index];
        if (runtimeCodeBlock is IntervalAndLogger && (IntervalAndLogger) runtimeCodeBlock == this.MyLogger)
        {
          ReplaceFunction.RuntimeCodeBlockList[index] = (object) intervalAndLogger;
          break;
        }
      }
      foreach (Parameter parameter in ReplaceFunction.ParameterList)
      {
        switch (parameter.StoreType)
        {
          case Parameter.ParamStorageType.INTERVALPOINT:
            intervalAndLogger.P_NextTimePoint = parameter;
            intervalAndLogger.InitialiseNextTimePoint();
            intervalAndLogger.P_NextTimePoint.UpdateByteList();
            break;
          case Parameter.ParamStorageType.INTERVAL:
            intervalAndLogger.P_Intervall = parameter;
            intervalAndLogger.P_Intervall.ValueEprom = (long) intervalAndLogger.Interval;
            intervalAndLogger.P_Intervall.UpdateByteList();
            break;
          case Parameter.ParamStorageType.STARTADDRESS:
            intervalAndLogger.P_StartAddress = parameter;
            intervalAndLogger.P_StartAddress.ValueEprom = 0L;
            intervalAndLogger.P_StartAddress.UpdateByteList();
            break;
          case Parameter.ParamStorageType.ENDADDRESS:
            intervalAndLogger.P_EndAddress = parameter;
            intervalAndLogger.P_EndAddress.ValueEprom = (long) (num2 * this.MaxEntries);
            intervalAndLogger.P_EndAddress.UpdateByteList();
            break;
          case Parameter.ParamStorageType.WRITEPTR:
            intervalAndLogger.P_WriteAddress = parameter;
            intervalAndLogger.P_WriteAddress.ValueEprom = 0L;
            intervalAndLogger.P_WriteAddress.UpdateByteList();
            break;
          case Parameter.ParamStorageType.FLAGS:
            intervalAndLogger.P_Flags = parameter;
            intervalAndLogger.P_Flags.ValueEprom = 0L;
            intervalAndLogger.P_WriteAddress.UpdateByteList();
            break;
          default:
            throw new ArgumentOutOfRangeException("Illegal Parameter at configurable logger");
        }
      }
      for (int index = 0; index < intervalAndLogger.CodeList.Count; ++index)
        this.MyLogger.MyMeter.MyCompiler.CompileCodeObject((CodeObject) intervalAndLogger.CodeList[index]);
      return this.MyLogger.MyMeter.MyHandler.MyMeters.ChangeConfigLogger(ReplaceFunction);
    }

    public bool WriteChangedDataToLogger()
    {
      if (this.LoggerDataTable.Rows.Count > this.MaxEntries)
        throw new ArgumentOutOfRangeException("More lines then logger entries!");
      ByteField LoggerData = new ByteField(this.EntrySize * this.LoggerDataTable.Rows.Count);
      int index1 = 0;
      try
      {
        for (index1 = this.LoggerDataTable.Rows.Count - 1; index1 >= 0; --index1)
        {
          int num = 1;
          for (int index2 = 0; index2 < this.MyLogger.LoggerParameter.Count; ++index2)
          {
            int size = this.MyLogger.LoggerParameter[index2].Size;
            long meterTime;
            if (this.MyLogger.LoggerParameter[index2].FullName == "DefaultFunction.Sta_Secounds")
            {
              meterTime = (long) ZR_Calendar.Cal_GetMeterTime(DateTime.Parse(this.LoggerDataTable.Rows[index1][0].ToString()));
              num = 0;
            }
            else
            {
              StringBuilder PValue = new StringBuilder(this.LoggerDataTable.Rows[index1][index2 + num].ToString().Replace(SystemValues.ZRDezimalSeparator, "."));
              int unitExponent = this.AllParameters[index2].UnitExponent;
              ParameterService.ResetStringExpo(ref PValue, unitExponent * -1);
              string s = PValue.ToString();
              int startIndex = s.IndexOf('.');
              if (startIndex >= 0)
                s = s.Remove(startIndex);
              meterTime = long.Parse(s);
            }
            for (int index3 = 0; index3 < this.MyLogger.LoggerParameter[index2].Size; ++index3)
            {
              LoggerData.Add((byte) ((ulong) meterTime & (ulong) byte.MaxValue));
              meterTime >>= 8;
            }
          }
        }
      }
      catch
      {
        int num = (int) GMM_MessageBox.ShowMessage("Write logger data", "Illegal data at line: " + index1.ToString());
        return false;
      }
      if (!this.MyLogger.WriteDataToLogger(LoggerData))
        return false;
      this.AvailableEntries = this.LoggerDataTable.Rows.Count;
      this.WriteAddress = (int) this.MyLogger.P_WriteAddress.ValueEprom;
      return true;
    }

    public bool LoadLoggerDataFromFile(List<string[]> LineList)
    {
      this.LoggerDataTable.Clear();
      for (int index = 0; index < LineList.Count; ++index)
      {
        DataRow row = this.LoggerDataTable.NewRow();
        for (int columnIndex = 0; columnIndex < this.LoggerDataTable.Columns.Count; ++columnIndex)
          row[columnIndex] = columnIndex >= LineList[index].Length ? (object) "0" : (object) LineList[index][columnIndex];
        this.LoggerDataTable.Rows.Add(row);
      }
      return true;
    }
  }
}


--- LoggerParameterData.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LoggerParameterData
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using DeviceCollector;

#nullable disable
namespace GMM_Handler
{
  public class LoggerParameterData
  {
    public int ParameterSize;
    public Parameter.BaseParameterFormat ParameterFormat;
    public string ZDF_ParameterID;
    public string ParameterUnit;
    public int UnitExponent;
    public DataBaseAccess.PValueDescription PValueDescription;

    public LoggerParameterData(Parameter BaseParameter, Meter TheMeter)
    {
      this.ParameterSize = BaseParameter.Size;
      this.ParameterFormat = BaseParameter.ParameterFormat;
      long difVifs = BaseParameter.DifVifs;
      short difVifSize = BaseParameter.DifVifSize;
      if (MBusDevice.GetZR_MBusLoggerDivVif(ref difVifs, ref difVifSize))
      {
        MBusDevice.GetZR_MBusParameterID(BaseParameter.DifVifs, BaseParameter.DifVifSize, out this.ZDF_ParameterID, out this.ParameterUnit, out this.UnitExponent);
        this.PValueDescription = TheMeter.MyHandler.MyDataBaseAccess.GetValueDescriptions(TheMeter, this.ZDF_ParameterID);
      }
      else
      {
        this.ZDF_ParameterID = "NoZDF_Param";
        this.ParameterUnit = "_";
        this.UnitExponent = 0;
      }
      if (this.PValueDescription != null)
        return;
      this.PValueDescription = new DataBaseAccess.PValueDescription();
      this.PValueDescription.ValueName = BaseParameter.NameTranslated;
      this.PValueDescription.ValueDescription = "-";
      this.PValueDescription.Unit = this.ParameterUnit;
    }
  }
}


--- LoggerRestor.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LoggerRestor
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public enum LoggerRestor
  {
    ClearAll,
    RestoreBaseLoggers,
    RestoreAll,
  }
}


--- LoggerStore.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LoggerStore
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class LoggerStore : LinkBlock
  {
    internal LoggerStore(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.LoggerStore)
    {
    }

    internal bool InitialiseTheLoggerAreas()
    {
      int blockStartAddress = this.BlockStartAddress;
      foreach (IntervalAndLogger allIntervallCode in this.MyMeter.MyLinker.AllIntervallCodes)
      {
        if (allIntervallCode.MaxEntries < 0)
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Negative number of logger entries");
          return false;
        }
        if (allIntervallCode.MaxEntries > 0)
        {
          allIntervallCode.P_StartAddress.ValueEprom = (long) blockStartAddress;
          blockStartAddress += allIntervallCode.MaxEntries * allIntervallCode.EntrySize;
          allIntervallCode.P_EndAddress.ValueEprom = (long) blockStartAddress;
          if (!this.MyMeter.MyHandler.BaseTypeEditMode && blockStartAddress > this.MyMeter.MyIdent.extEEPSize)
          {
            ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Out of eeprom space");
            return false;
          }
        }
      }
      this.StartAddressOfNextBlock = blockStartAddress;
      this.MyMeter.MyIdent.extEEPUsed = this.StartAddressOfNextBlock;
      return true;
    }
  }
}


--- LoggerTypes.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.LoggerTypes
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public enum LoggerTypes
  {
    NoLogger,
    IntervalTest,
    FixedLogger,
    ConfigLogger,
    FixedLoggerFuture,
    ShortCycleLogger,
  }
}


--- MBusInfo.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MBusInfo
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;

#nullable disable
namespace GMM_Handler
{
  public class MBusInfo
  {
    public SortedList AllParametersWithLength;
    public ArrayList ShortListParameterNames;
    public ArrayList FullListParameterNames;
  }
}


--- MBusList.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MBusList
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class MBusList : LinkBlock
  {
    internal SortedList AllMBusParameters;
    internal int MBusRuntimePointer;
    internal byte FullParameterListDataLength;
    internal byte ShortParameterListDataLength;
    internal ArrayList ShortListParameterNames;
    internal ArrayList FullListParameterNames;
    internal SortedList<string, MBusLoggerInfo> MBusLoggerInfos;
    public short ActiveLoggerFunctionNumber = -1;
    private bool MasksOk;
    private ushort DifVifCountMask;
    private ushort LengthCountMask;
    private ushort ParamCodeMask;
    private ushort EepromMask;
    private ushort LoggerMask;
    private ushort LoggerLastMask;
    private ushort RuntimeMask;
    private ushort MinListMask;
    private ushort DateMask;
    private ushort DateTimeMask;

    internal MBusList(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.MBusList)
    {
    }

    internal MBusList Clone(Meter NewMeter)
    {
      MBusList mbusList = new MBusList(NewMeter);
      mbusList.MBusRuntimePointer = this.MBusRuntimePointer;
      mbusList.FullParameterListDataLength = this.FullParameterListDataLength;
      mbusList.ShortParameterListDataLength = this.ShortParameterListDataLength;
      mbusList.ShortListParameterNames = (ArrayList) this.ShortListParameterNames.Clone();
      mbusList.FullListParameterNames = (ArrayList) this.FullListParameterNames.Clone();
      mbusList.MBusLoggerInfos = new SortedList<string, MBusLoggerInfo>();
      for (int index = 0; index < this.MBusLoggerInfos.Count; ++index)
        mbusList.MBusLoggerInfos.Add(this.MBusLoggerInfos.Keys[index], this.MBusLoggerInfos.Values[index].Clone());
      mbusList.ActiveLoggerFunctionNumber = this.ActiveLoggerFunctionNumber;
      mbusList.MasksOk = this.MasksOk;
      mbusList.DifVifCountMask = this.DifVifCountMask;
      mbusList.LengthCountMask = this.LengthCountMask;
      mbusList.ParamCodeMask = this.ParamCodeMask;
      mbusList.EepromMask = this.EepromMask;
      mbusList.LoggerMask = this.LoggerMask;
      mbusList.LoggerLastMask = this.LoggerLastMask;
      mbusList.RuntimeMask = this.RuntimeMask;
      mbusList.MinListMask = this.MinListMask;
      mbusList.DateMask = this.DateMask;
      mbusList.DateTimeMask = this.DateTimeMask;
      return mbusList;
    }

    internal bool LoadFromByteArray(byte[] TheArray, int Offset)
    {
      if (!this.LoadAllLogger() || !this.LoadTypeMasks())
        return false;
      for (int index = 0; index < this.MyMeter.AllParameters.Count; ++index)
      {
        Parameter byIndex = (Parameter) this.MyMeter.AllParameters.GetByIndex(index);
        byIndex.MBusOn = false;
        byIndex.MBusShortOn = false;
      }
      this.ShortListParameterNames = new ArrayList();
      this.FullListParameterNames = new ArrayList();
      CodeBlock codeBlock = new CodeBlock(CodeBlock.CodeSequenceTypes.LinkerGeneratedCodeBlock, FrameTypes.None, -1);
      this.MBusRuntimePointer = (int) ParameterService.GetFromByteArray_ushort(TheArray, ref Offset);
      codeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Runtime Pointer", (ushort) this.MBusRuntimePointer));
      this.FullParameterListDataLength = TheArray[Offset++];
      this.ShortParameterListDataLength = TheArray[Offset++];
      codeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Full len", this.FullParameterListDataLength));
      codeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Short len", this.ShortParameterListDataLength));
      bool flag = false;
      ushort fromByteArrayUshort1;
      while ((fromByteArrayUshort1 = ParameterService.GetFromByteArray_ushort(TheArray, ref Offset)) > (ushort) 0)
      {
        codeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Control word", fromByteArrayUshort1));
        int valueFromMask1 = (int) this.GetValueFromMask(fromByteArrayUshort1, this.LengthCountMask);
        bool boolFromMask1 = this.GetBoolFromMask(fromByteArrayUshort1, this.EepromMask);
        bool boolFromMask2 = this.GetBoolFromMask(fromByteArrayUshort1, this.LoggerMask);
        bool boolFromMask3 = this.GetBoolFromMask(fromByteArrayUshort1, this.LoggerLastMask);
        this.GetBoolFromMask(fromByteArrayUshort1, this.RuntimeMask);
        bool boolFromMask4 = this.GetBoolFromMask(fromByteArrayUshort1, this.MinListMask);
        this.GetBoolFromMask(fromByteArrayUshort1, this.DateMask);
        this.GetBoolFromMask(fromByteArrayUshort1, this.DateTimeMask);
        if (boolFromMask2)
        {
          if (!flag)
          {
            ushort fromByteArrayUshort2 = ParameterService.GetFromByteArray_ushort(TheArray, ref Offset);
            ushort functionNumber;
            try
            {
              functionNumber = (ushort) ((Parameter) this.MyMeter.AllEpromParametersByAddress[(object) (int) fromByteArrayUshort2]).FunctionNumber;
            }
            catch
            {
              ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "MBus logger function not found");
              return false;
            }
            for (ushort index = 0; (int) index < this.MBusLoggerInfos.Count; ++index)
            {
              MBusLoggerInfo mbusLoggerInfo = this.MBusLoggerInfos.Values[(int) index];
              if ((int) mbusLoggerInfo.FunctionNumber == (int) functionNumber)
              {
                if (boolFromMask4)
                  this.ShortListParameterNames.Add((object) mbusLoggerInfo.LoggerFunctionName);
                else
                  this.FullListParameterNames.Add((object) mbusLoggerInfo.LoggerFunctionName);
                mbusLoggerInfo.LoggerNumberOfEntrys = TheArray[Offset++];
                Parameter parameter = (Parameter) this.MyMeter.AllEpromParametersByAddress[(object) (int) fromByteArrayUshort2];
                CodeObject codeObject = CodeObject.GetCodeObject("Logger Pointer", fromByteArrayUshort2);
                codeObject.CodeValue = parameter.FullName;
                codeObject.CodeType = CodeObject.CodeTypes.ePTR;
                codeBlock.CodeList.Add((object) codeObject);
                codeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Repeat number", mbusLoggerInfo.LoggerNumberOfEntrys));
                flag = true;
                goto label_20;
              }
            }
            throw new ArgumentOutOfRangeException("MBus-Logger-Function not found");
          }
label_20:
          if (boolFromMask3)
            flag = false;
        }
        else
        {
          int fromByteArrayUshort3 = (int) ParameterService.GetFromByteArray_ushort(TheArray, ref Offset);
          Parameter TheParameter = !boolFromMask1 ? (Parameter) this.MyMeter.AllRamParametersByAddress[(object) fromByteArrayUshort3] : (Parameter) this.MyMeter.AllEpromParametersByAddress[(object) fromByteArrayUshort3];
          if (TheParameter == null)
          {
            codeBlock.CodeList.RemoveAt(codeBlock.CodeList.Count - 1);
            break;
          }
          if (boolFromMask4)
          {
            this.ShortListParameterNames.Add((object) TheParameter.FullName);
            TheParameter.MBusShortOn = true;
            TheParameter.MBusOn = true;
          }
          else
          {
            this.FullListParameterNames.Add((object) TheParameter.FullName);
            TheParameter.MBusOn = true;
          }
          CodeObject pointerCodeObject = this.GetPointerCodeObject(TheParameter);
          if (pointerCodeObject == null)
            return false;
          pointerCodeObject.CodeValueCompiled = (long) fromByteArrayUshort3;
          this.MyMeter.MyCompiler.GenerateCodeFromCodeObject(pointerCodeObject);
          codeBlock.CodeList.Add((object) pointerCodeObject);
        }
        ushort valueFromMask2 = this.GetValueFromMask(fromByteArrayUshort1, this.DifVifCountMask);
        long fromByteArrayUlong = (long) ParameterService.GetFromByteArray_ulong(TheArray, valueFromMask2, ref Offset);
        codeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Dif Vif", (ulong) fromByteArrayUlong, (int) valueFromMask2));
      }
      codeBlock.CodeList.Add((object) CodeObject.GetCodeObject("MBus end", (ushort) 0));
      this.LinkObjList.Add((object) codeBlock);
      return true;
    }

    internal bool GenerateNewList()
    {
      if (!this.LoadAllLogger() || !this.LoadTypeMasks())
        return false;
      CodeBlock TheCodeBlock = new CodeBlock(CodeBlock.CodeSequenceTypes.LinkerGeneratedCodeBlock, FrameTypes.None, -1);
      this.MBusRuntimePointer = 0;
      if (this.MyMeter.MyLinker.MBus_Runtime.Count > 0)
        this.MBusRuntimePointer = ((LinkObj) ((CodeBlock) this.MyMeter.MyLinker.MBus_Runtime[0]).CodeList[0]).Address;
      TheCodeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Runtime Pointer", (ushort) this.MBusRuntimePointer));
      this.ShortParameterListDataLength = (byte) 0;
      this.FullParameterListDataLength = (byte) 0;
      TheCodeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Full len", this.FullParameterListDataLength));
      TheCodeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Short len", this.ShortParameterListDataLength));
      for (int index = 0; index < this.MyMeter.AllParameters.Count; ++index)
        ((Parameter) this.MyMeter.AllParameters.GetByIndex(index)).MBusOn = false;
      for (int index1 = 0; index1 < this.ShortListParameterNames.Count; ++index1)
      {
        int index2 = this.AllMBusParameters.IndexOfKey((object) (string) this.ShortListParameterNames[index1]);
        if (index2 >= 0)
        {
          Parameter byIndex = (Parameter) this.AllMBusParameters.GetByIndex(index2);
          if (byIndex == null || byIndex.DifVifSize == (short) 0)
          {
            this.ShortListParameterNames.RemoveAt(index1);
            --index1;
          }
          else
          {
            this.AdjustDifVifCode(byIndex);
            byIndex.MBusOn = true;
            byIndex.MBusShortOn = true;
            if (!this.AddParameterToMBusList(TheCodeBlock, byIndex))
              return false;
          }
        }
        else if (!this.AddLoggerToMBusList((string) this.ShortListParameterNames[index1], TheCodeBlock, true))
          return false;
      }
      this.FullParameterListDataLength = this.ShortParameterListDataLength;
      for (int index3 = 0; index3 < this.FullListParameterNames.Count; ++index3)
      {
        int index4 = this.AllMBusParameters.IndexOfKey((object) (string) this.FullListParameterNames[index3]);
        if (index4 >= 0)
        {
          Parameter byIndex = (Parameter) this.AllMBusParameters.GetByIndex(index4);
          if (byIndex == null || byIndex.DifVifSize == (short) 0)
          {
            this.ShortListParameterNames.RemoveAt(index3);
            --index3;
          }
          else
          {
            this.AdjustDifVifCode(byIndex);
            byIndex.MBusOn = true;
            byIndex.MBusShortOn = false;
            if (!this.AddParameterToMBusList(TheCodeBlock, byIndex))
              return false;
          }
        }
        else if (!this.AddLoggerToMBusList((string) this.FullListParameterNames[index3], TheCodeBlock, false))
          return false;
      }
      ((CodeObject) TheCodeBlock.CodeList[1]).CodeValueCompiled = (long) this.FullParameterListDataLength;
      ((CodeObject) TheCodeBlock.CodeList[2]).CodeValueCompiled = (long) this.ShortParameterListDataLength;
      TheCodeBlock.CodeList.Add((object) CodeObject.GetCodeObject("MBus end", (ushort) 0));
      this.LinkObjList.Add((object) TheCodeBlock);
      return this.MyMeter.MyCompiler.GenerateCodeFromCodeBlockList(this.LinkObjList);
    }

    private bool AddParameterToMBusList(CodeBlock TheCodeBlock, Parameter TheParameter)
    {
      ushort wordFromParameter = this.GetControlWordFromParameter(TheParameter);
      byte mbusParameterLength = (byte) TheParameter.MBusParameterLength;
      TheCodeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Control word", wordFromParameter));
      CodeObject pointerCodeObject = this.GetPointerCodeObject(TheParameter);
      if (pointerCodeObject == null)
        return false;
      TheCodeBlock.CodeList.Add((object) pointerCodeObject);
      this.MyMeter.MyCompiler.AddPointer(pointerCodeObject);
      TheCodeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Dif Vif", (ulong) TheParameter.DifVifs, (int) TheParameter.DifVifSize));
      byte num = (byte) ((uint) mbusParameterLength + (uint) (byte) TheParameter.DifVifSize);
      if (TheParameter.MBusShortOn)
        this.ShortParameterListDataLength += num;
      else
        this.FullParameterListDataLength += num;
      return true;
    }

    private bool AddLoggerToMBusList(
      string LoggerFunctionName,
      CodeBlock TheCodeBlock,
      bool ShortList)
    {
      byte num1 = 0;
      if (!this.MBusLoggerInfos.ContainsKey(LoggerFunctionName))
        return true;
      MBusLoggerInfo mbusLoggerInfo = this.MBusLoggerInfos[LoggerFunctionName];
      Function function = (Function) this.MyMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) mbusLoggerInfo.FunctionNumber];
      if (function == null)
      {
        this.MBusLoggerInfos.Remove(LoggerFunctionName);
        return true;
      }
      CodeObject codeObject = CodeObject.GetCodeObject("Logger Pointer", (ushort) 0);
      codeObject.CodeType = CodeObject.CodeTypes.ePTR;
      ArrayList arrayList = new ArrayList();
      foreach (Parameter parameter in function.ParameterList)
      {
        if (parameter.Name.EndsWith("_2S"))
          codeObject.CodeValue = parameter.FullName;
        if (parameter.BlockMark == LinkBlockTypes.LoggerStore)
          arrayList.Add((object) parameter);
      }
      if (arrayList.Count < 1 || codeObject.CodeValue.Length < 1)
        return false;
      for (int index = 0; index < arrayList.Count; ++index)
      {
        Parameter TheParameter = (Parameter) arrayList[index];
        this.AdjustDifVifCode(TheParameter);
        ushort wordFromParameter = this.GetControlWordFromParameter(TheParameter);
        this.SetBoolWithMask(ref wordFromParameter, true, this.LoggerMask);
        this.SetBoolWithMask(ref wordFromParameter, ShortList, this.MinListMask);
        if (index == arrayList.Count - 1)
          this.SetBoolWithMask(ref wordFromParameter, true, this.LoggerLastMask);
        byte num2 = (byte) ((uint) num1 + (uint) (byte) ((uint) TheParameter.MBusParameterLength * (uint) mbusLoggerInfo.LoggerNumberOfEntrys));
        TheCodeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Control word", wordFromParameter));
        if (index == 0)
        {
          TheCodeBlock.CodeList.Add((object) codeObject);
          this.MyMeter.MyCompiler.AddPointer(codeObject);
          TheCodeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Repeat number", mbusLoggerInfo.LoggerNumberOfEntrys));
        }
        TheCodeBlock.CodeList.Add((object) CodeObject.GetCodeObject("Dif Vif", (ulong) TheParameter.DifVifs, (int) TheParameter.DifVifSize));
        num1 = (byte) ((uint) num2 + (uint) (byte) ((uint) TheParameter.DifVifSize * (uint) mbusLoggerInfo.LoggerNumberOfEntrys));
      }
      if (ShortList)
        this.ShortParameterListDataLength += num1;
      else
        this.FullParameterListDataLength += num1;
      return true;
    }

    private CodeObject GetPointerCodeObject(Parameter TheParameter)
    {
      CodeObject pointerCodeObject;
      if (TheParameter.ExistOnCPU)
      {
        pointerCodeObject = CodeObject.GetPointerCodeObject("CPU Parameter address: " + TheParameter.FullName, TheParameter.FullName);
        pointerCodeObject.CodeType = CodeObject.CodeTypes.iPTR;
      }
      else if (TheParameter.ExistOnEprom)
      {
        pointerCodeObject = CodeObject.GetPointerCodeObject("Eprom Parameter address: " + TheParameter.FullName, TheParameter.FullName);
        pointerCodeObject.CodeType = CodeObject.CodeTypes.ePTR;
      }
      else
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "MBus parameter code object not found");
        return (CodeObject) null;
      }
      return pointerCodeObject;
    }

    private ushort GetControlWordFromParameter(Parameter TheParameter)
    {
      ushort ChangedValue = 0;
      this.SetValueWithMask(ref ChangedValue, (ushort) TheParameter.Size, this.LengthCountMask);
      this.SetValueWithMask(ref ChangedValue, (ushort) TheParameter.DifVifSize, this.DifVifCountMask);
      this.SetBoolWithMask(ref ChangedValue, !TheParameter.ExistOnCPU, this.EepromMask);
      this.SetBoolWithMask(ref ChangedValue, TheParameter.MBusShortOn, this.MinListMask);
      this.SetBoolWithMask(ref ChangedValue, TheParameter.MBusParamConvertion == Parameter.MBusParameterConversion.Date, this.DateMask);
      this.SetBoolWithMask(ref ChangedValue, TheParameter.MBusParamConvertion == Parameter.MBusParameterConversion.DateTime, this.DateTimeMask);
      return ChangedValue;
    }

    private ushort GetValueFromMask(ushort Control, ushort Mask)
    {
      if (Mask == (ushort) 0)
        return 0;
      for (; ((int) Mask & 1) == 0; Mask >>= 1)
        Control >>= 1;
      return (ushort) ((uint) Control & (uint) Mask);
    }

    private bool GetBoolFromMask(ushort Control, ushort Mask) => ((int) Control & (int) Mask) != 0;

    private void SetValueWithMask(ref ushort ChangedValue, ushort TheValue, ushort Mask)
    {
      for (ushort index = 1; ((int) Mask & (int) index) == 0; index <<= 1)
        TheValue <<= 1;
      ChangedValue += (ushort) ((uint) TheValue & (uint) Mask);
    }

    private void SetBoolWithMask(ref ushort ChangedValue, bool TheValue, ushort Mask)
    {
      if (!TheValue)
        return;
      ChangedValue |= Mask;
    }

    private bool LoadTypeMasks()
    {
      if (!this.MasksOk)
      {
        this.DifVifCountMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_DIFVIF_COUNT"];
        this.LengthCountMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_LENGTH_COUNT"];
        this.ParamCodeMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_PARAM_CODE"];
        this.EepromMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_EEPROM_PTR"];
        this.LoggerMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_LOGGER"];
        this.LoggerLastMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_LOGGER_LAST"];
        this.RuntimeMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_RUNTIME"];
        this.MinListMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_MIN_LIST"];
        this.DateMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_DATE"];
        this.DateTimeMask = (ushort) (int) this.MyMeter.MyCompiler.Includes[(object) "MBU_PARA_CONTROL_DATE_TIME"];
        this.MasksOk = true;
      }
      return true;
    }

    private bool LoadAllLogger()
    {
      SortedList<string, MBusLoggerInfo> sortedList = (SortedList<string, MBusLoggerInfo>) null;
      if (this.MBusLoggerInfos != null)
        sortedList = this.MBusLoggerInfos;
      this.MBusLoggerInfos = new SortedList<string, MBusLoggerInfo>();
      foreach (Function function in this.MyMeter.MyFunctionTable.FunctionList)
      {
        int index = -1;
        if (sortedList != null)
          index = sortedList.IndexOfKey(function.FullName);
        if (index >= 0)
        {
          this.MBusLoggerInfos.Add(function.FullName, sortedList.Values[index]);
        }
        else
        {
          foreach (CodeBlock runtimeCodeBlock in function.RuntimeCodeBlockList)
          {
            if (runtimeCodeBlock is IntervalAndLogger)
            {
              IntervalAndLogger intervalAndLogger = runtimeCodeBlock as IntervalAndLogger;
              if (intervalAndLogger.MaxEntries > 0 && intervalAndLogger.MBusParameterLength > 0)
              {
                MBusLoggerInfo mbusLoggerInfo = new MBusLoggerInfo();
                mbusLoggerInfo.FunctionNumber = (short) function.Number;
                mbusLoggerInfo.LoggerFunctionName = function.FullName;
                mbusLoggerInfo.LoggerNumberOfEntrys = intervalAndLogger.MBusMaxEntries;
                mbusLoggerInfo.LoggerMaxNumberOfEntrys = intervalAndLogger.MaxEntries;
                mbusLoggerInfo.MBusParameterLength = intervalAndLogger.MBusParameterLength;
                mbusLoggerInfo.LoggerDifVifBytesPerEntry = intervalAndLogger.DifVifEntrySize;
                mbusLoggerInfo.LoggerBytesPerTransmit = 0;
                foreach (Parameter parameter in function.ParameterList)
                {
                  if (parameter.BlockMark == LinkBlockTypes.LoggerStore)
                    mbusLoggerInfo.LoggerBytesPerTransmit += parameter.MBusParameterLength;
                }
                this.MBusLoggerInfos.Add(function.FullName, mbusLoggerInfo);
              }
            }
          }
        }
      }
      return true;
    }

    internal bool AdjustAllMBusParameterDivVifs()
    {
      foreach (Parameter TheParameter in (IEnumerable) this.AllMBusParameters.Values)
        this.AdjustDifVifCode(TheParameter);
      return true;
    }

    internal void AdjustDifVifCode(Parameter TheParameter)
    {
      if ((TheParameter.DifVifs & 12416L) == 4224L && this.MyMeter.MyMath.MyBaseSettings.BaseConfig[0] == 'F')
        TheParameter.DifVifs &= -4097L;
      if (TheParameter.DifVifsByRes != null)
      {
        int index1;
        for (index1 = TheParameter.DifVifsByRes.Count - 1; index1 >= 0; --index1)
        {
          string key = (string) TheParameter.DifVifsByRes.GetKey(index1);
          if (!(key != string.Empty) || this.MyMeter.IsMeterResourceAvailable((MeterResources) Enum.Parse(typeof (MeterResources), key, true)))
            break;
        }
        byte[] byIndex = (byte[]) TheParameter.DifVifsByRes.GetByIndex(index1);
        TheParameter.DifVifSize = (short) byIndex.Length;
        TheParameter.DifVifs = 0L;
        for (int index2 = 0; index2 < byIndex.Length; ++index2)
          TheParameter.DifVifs += (long) byIndex[index2] << 8 * index2;
      }
      long num1;
      switch (TheParameter.MBusParameterOverride)
      {
        case Parameter.MBusParameterOverrideType.Energy:
          num1 = (long) this.MyMeter.MyMath.MyBaseSettings.MBusEnergieVIF;
          break;
        case Parameter.MBusParameterOverrideType.Volume:
          num1 = (long) this.MyMeter.MyMath.MyBaseSettings.MBusVolumeVIF;
          break;
        case Parameter.MBusParameterOverrideType.Flow:
          num1 = (long) this.MyMeter.MyMath.MyBaseSettings.MBusFlowVIF;
          break;
        case Parameter.MBusParameterOverrideType.Power:
          num1 = (long) this.MyMeter.MyMath.MyBaseSettings.MBusPowerVIF;
          break;
        case Parameter.MBusParameterOverrideType.INPUT_1:
          num1 = (long) this.MyMeter.MyMath.MyBaseSettings.MBusInput1VIF;
          break;
        case Parameter.MBusParameterOverrideType.INPUT_2:
          num1 = (long) this.MyMeter.MyMath.MyBaseSettings.MBusInput2VIF;
          break;
        default:
          return;
      }
      if (num1 < 0L)
      {
        TheParameter.MBusOn = false;
        TheParameter.MBusShortOn = false;
        ZR_ClassLibMessages.AddWarning("!! MBus VIF not available for parameter: " + TheParameter.FullName);
      }
      else
      {
        long num2 = num1 << 8;
        long num3 = 65280;
        for (long index = 128; (TheParameter.DifVifs & index) > 0L; index <<= 8)
        {
          num2 <<= 8;
          num3 <<= 8;
        }
        TheParameter.DifVifs = TheParameter.DifVifs & ~num3 | num2;
      }
    }

    public bool GetMBusVariableLists(out MBusInfo TheInfo)
    {
      TheInfo = new MBusInfo();
      TheInfo.AllParametersWithLength = new SortedList();
      TheInfo.ShortListParameterNames = new ArrayList();
      TheInfo.FullListParameterNames = new ArrayList();
      for (int index1 = 0; index1 < this.AllMBusParameters.Count; ++index1)
      {
        Parameter byIndex = (Parameter) this.AllMBusParameters.GetByIndex(index1);
        MBusParameterInfo mbusParameterInfo = new MBusParameterInfo();
        byte[] numArray = new byte[(int) byIndex.DifVifSize];
        for (int index2 = 0; index2 < (int) byIndex.DifVifSize; ++index2)
          numArray[index2] = (byte) (byIndex.DifVifs >> 8 * index2);
        mbusParameterInfo.DifVifs = numArray;
        mbusParameterInfo.ParameterInfo = byIndex.ParameterInfo;
        mbusParameterInfo.BytesPerFrame = (int) byIndex.DifVifSize + byIndex.MBusParameterLength;
        TheInfo.AllParametersWithLength.Add((object) byIndex.NameTranslated, (object) mbusParameterInfo);
      }
      for (short index3 = 0; (int) index3 < this.MBusLoggerInfos.Count; ++index3)
      {
        MBusLoggerInfo mbusLoggerInfo = this.MBusLoggerInfos.Values[(int) index3];
        MBusParameterInfo mbusParameterInfo = new MBusParameterInfo();
        mbusParameterInfo.BytesPerFrame = mbusLoggerInfo.LoggerBytesPerTransmit + mbusLoggerInfo.LoggerDifVifBytesPerEntry;
        mbusParameterInfo.ParameterInfo = mbusLoggerInfo.LoggerFunctionName;
        mbusParameterInfo.LoggerMaxEntries = mbusLoggerInfo.LoggerMaxNumberOfEntrys;
        mbusParameterInfo.LoggerEntries = (int) mbusLoggerInfo.LoggerNumberOfEntrys;
        if (mbusParameterInfo.LoggerEntries == 0)
          mbusParameterInfo.LoggerEntries = 1;
        if (this.MyMeter.MyFunctionTable.FunctionListByNumber.ContainsKey((object) (ushort) mbusLoggerInfo.FunctionNumber))
        {
          Function function = (Function) this.MyMeter.MyFunctionTable.FunctionListByNumber[(object) (ushort) mbusLoggerInfo.FunctionNumber];
          List<byte> byteList = new List<byte>(100);
          mbusParameterInfo.DifVifs = new byte[100];
          foreach (Parameter parameter in function.ParameterList)
          {
            if (parameter.BlockMark == LinkBlockTypes.LoggerStore)
            {
              long difVifs = parameter.DifVifs;
              for (int index4 = 0; index4 < (int) parameter.DifVifSize; ++index4)
              {
                byteList.Add((byte) difVifs);
                difVifs >>= 8;
              }
            }
          }
          mbusParameterInfo.DifVifs = byteList.ToArray();
          TheInfo.AllParametersWithLength.Add((object) mbusLoggerInfo.LoggerFunctionName, (object) mbusParameterInfo);
        }
      }
      foreach (string listParameterName in this.ShortListParameterNames)
      {
        Parameter allMbusParameter = (Parameter) this.AllMBusParameters[(object) listParameterName];
        string key;
        if (allMbusParameter == null)
        {
          if (this.MBusLoggerInfos.ContainsKey(listParameterName))
            key = listParameterName;
          else
            continue;
        }
        else
          key = allMbusParameter.NameTranslated;
        if (TheInfo.AllParametersWithLength.IndexOfKey((object) key) >= 0)
          TheInfo.ShortListParameterNames.Add((object) key);
      }
      foreach (string listParameterName in this.FullListParameterNames)
      {
        Parameter allMbusParameter = (Parameter) this.AllMBusParameters[(object) listParameterName];
        string key;
        if (allMbusParameter == null)
        {
          if (this.MBusLoggerInfos.ContainsKey(listParameterName))
            key = listParameterName;
          else
            continue;
        }
        else
          key = allMbusParameter.NameTranslated;
        if (TheInfo.AllParametersWithLength.IndexOfKey((object) key) >= 0)
          TheInfo.FullListParameterNames.Add((object) key);
      }
      return true;
    }

    internal bool SetMBusVariables(MBusInfo TheInfo)
    {
      if (!this.LoadAllLogger())
        return false;
      foreach (MBusParameterInfo mbusParameterInfo in (IEnumerable) TheInfo.AllParametersWithLength.Values)
      {
        if (mbusParameterInfo.LoggerMaxEntries > 0)
        {
          string parameterInfo = mbusParameterInfo.ParameterInfo;
          if (this.MBusLoggerInfos.ContainsKey(parameterInfo))
            this.MBusLoggerInfos[parameterInfo].LoggerNumberOfEntrys = (byte) mbusParameterInfo.LoggerEntries;
        }
      }
      this.ShortListParameterNames = new ArrayList();
      foreach (string listParameterName in TheInfo.ShortListParameterNames)
      {
        for (int index = 0; index < this.AllMBusParameters.Count; ++index)
        {
          Parameter byIndex = (Parameter) this.AllMBusParameters.GetByIndex(index);
          if (byIndex.NameTranslated == listParameterName)
          {
            this.ShortListParameterNames.Add((object) byIndex.FullName);
            goto label_22;
          }
        }
        int index1 = this.MBusLoggerInfos.IndexOfKey(listParameterName);
        if (index1 >= 0)
          this.ShortListParameterNames.Add((object) this.MBusLoggerInfos.Values[index1].LoggerFunctionName);
label_22:;
      }
      this.FullListParameterNames = new ArrayList();
      foreach (string listParameterName in TheInfo.FullListParameterNames)
      {
        for (int index = 0; index < this.AllMBusParameters.Count; ++index)
        {
          Parameter byIndex = (Parameter) this.AllMBusParameters.GetByIndex(index);
          if (byIndex.NameTranslated == listParameterName)
          {
            this.FullListParameterNames.Add((object) byIndex.FullName);
            goto label_36;
          }
        }
        int index2 = this.MBusLoggerInfos.IndexOfKey(listParameterName);
        if (index2 >= 0)
          this.FullListParameterNames.Add((object) this.MBusLoggerInfos.Values[index2].LoggerFunctionName);
label_36:;
      }
      return this.GenerateNewList();
    }
  }
}


--- MBusLoggerInfo.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MBusLoggerInfo
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public class MBusLoggerInfo
  {
    public string LoggerFunctionName = string.Empty;
    public byte LoggerNumberOfEntrys = 0;
    public int LoggerMaxNumberOfEntrys = 0;
    public int LoggerBytesPerTransmit = 0;
    public int MBusParameterLength = 0;
    public int LoggerDifVifBytesPerEntry = 0;
    public short FunctionNumber = -1;

    public MBusLoggerInfo Clone()
    {
      return new MBusLoggerInfo()
      {
        LoggerFunctionName = this.LoggerFunctionName,
        LoggerNumberOfEntrys = this.LoggerNumberOfEntrys,
        LoggerMaxNumberOfEntrys = this.LoggerMaxNumberOfEntrys,
        LoggerBytesPerTransmit = this.LoggerBytesPerTransmit,
        LoggerDifVifBytesPerEntry = this.LoggerDifVifBytesPerEntry,
        MBusParameterLength = this.MBusParameterLength,
        FunctionNumber = this.FunctionNumber
      };
    }
  }
}


--- MBusParameterInfo.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MBusParameterInfo
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public class MBusParameterInfo
  {
    public int BytesPerFrame;
    public string ParameterInfo;
    public byte[] DifVifs;
    public int LoggerEntries;
    public int LoggerMaxEntries;
  }
}


--- MenuItem.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MenuItem
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;

#nullable disable
namespace GMM_Handler
{
  internal class MenuItem
  {
    internal readonly ushort FunctionNumber;
    internal readonly string MenuName;
    internal Function MyFunction;
    internal int MenuIndex;
    internal int XPos;
    internal int YPos;
    internal readonly int InterpreterCode;
    internal ArrayList DisplayCodeBlocks = new ArrayList();
    internal string ClickEvent;
    internal string PressEvent;
    internal string HoldEvent;
    internal string TimeoutEvent;
    internal string Description;

    internal MenuItem(ushort FunctionNumberIn, string MenuNameIn, int InterpreterCodeReference)
    {
      this.FunctionNumber = FunctionNumberIn;
      this.MenuName = MenuNameIn;
      this.InterpreterCode = InterpreterCodeReference;
    }

    internal MenuItem Clone()
    {
      MenuItem menuItem = new MenuItem(this.FunctionNumber, this.MenuName, this.InterpreterCode);
      menuItem.XPos = this.XPos;
      menuItem.YPos = this.YPos;
      if (this.DisplayCodeBlocks != null)
      {
        menuItem.DisplayCodeBlocks = new ArrayList();
        foreach (CodeBlock displayCodeBlock in this.DisplayCodeBlocks)
          menuItem.DisplayCodeBlocks.Add((object) displayCodeBlock.Clone());
      }
      menuItem.ClickEvent = this.ClickEvent;
      menuItem.PressEvent = this.PressEvent;
      menuItem.HoldEvent = this.HoldEvent;
      menuItem.TimeoutEvent = this.TimeoutEvent;
      menuItem.Description = this.Description;
      return menuItem;
    }
  }
}


--- MenuItemBrunch.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MenuItemBrunch
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  internal class MenuItemBrunch : CodeBlock
  {
    internal MenuItem MyMenuItem;
    internal bool ClickAvailable = false;
    internal bool PressAvailable = false;
    internal bool HoldAvailable = false;
    internal bool TimeoutAvailable = false;

    internal MenuItemBrunch(MenuItem MenuItemIn, ArrayList MenuItemList)
      : base(CodeBlock.CodeSequenceTypes.Brunch, FrameTypes.None, (int) MenuItemIn.FunctionNumber)
    {
      this.MyMenuItem = MenuItemIn;
      if (this.MyMenuItem.ClickEvent != "NONE")
        this.ClickAvailable = true;
      if (this.MyMenuItem.PressEvent != "NONE")
        this.PressAvailable = true;
      if (this.MyMenuItem.HoldEvent != "NONE")
        this.HoldAvailable = true;
      if (!(this.MyMenuItem.TimeoutEvent != "NONE"))
        return;
      this.TimeoutAvailable = true;
    }
  }
}


--- Meter.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.Meter
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class Meter
  {
    internal Meter.MeterDataStates MeterDataState = Meter.MeterDataStates.New;
    internal ZR_HandlerFunctions MyHandler;
    internal MeterCommunication MyCommunication;
    internal ZR_MeterIdent MyIdent;
    internal Linker MyLinker;
    internal Compiler MyCompiler;
    internal FunctionPalette MyPalette;
    internal ZelsiusMath MyMath = new ZelsiusMath();
    internal EpromHeader MyEpromHeader;
    internal RamParameter MyRamParameter;
    internal Backup MyBackup;
    internal FixedParameter MyFixedParameter;
    internal WritePermTable MyWritePermTable;
    internal DisplayCode MyDisplayCode;
    internal RuntimeVars MyRuntimeVars;
    internal RuntimeCode MyRuntimeCode;
    internal EpromVars MyEpromVars;
    internal EpromParameter MyEpromParameter;
    internal EpromRuntime MyEpromRuntime;
    internal MBusList MyMBusList;
    internal FunctionTable MyFunctionTable;
    internal LoggerStore MyLoggerStore;
    internal byte[] Eprom;
    internal int UsedEpromSize = 0;
    internal bool WriteEnable = false;
    internal bool WriteEnableWithOpen = false;
    internal bool KeyDataActual = false;
    internal bool DatabaseKeyIsAvailable = false;
    internal long MyDatabaseKey = 0;
    internal bool MeterKeyIsAvailable = false;
    internal long MyMeterKey = 0;
    internal bool DatabaseKeyIsSaved = false;
    internal bool MeterKeyIsSaved = false;
    internal InOutFunctions InOut1Function = InOutFunctions.IO_EnumError;
    internal InOutFunctions InOut2Function = InOutFunctions.IO_EnumError;
    internal bool[] EpromWriteEnable;
    internal bool[] RamWriteEnable;
    internal bool SecoundWriteRunning = false;
    internal SortedList<uint, Function> ConfigLoggers;
    internal ArrayList Map;
    internal ArrayList BlockLinkOrder;
    internal SortedList AllParameters;
    internal SortedList AllParametersByResource;
    internal SortedList AllEpromParametersByAddress;
    internal SortedList AllRamParametersByAddress;
    internal SortedList AliasParameters;
    internal SortedList<string, Parameter> PotentialLoggerParameters;
    internal SortedList AvailableMeterResouces;
    internal SortedList NeadedMeterResources;
    internal DateTime MeterTime;
    internal DateTime DatabaseTime = DateTime.MinValue;
    private static string[] CriticalBlockPointers = new string[7]
    {
      "EEP_Header.EEP_HEADER_RuntimeVarsAdr",
      "EEP_Header.EEP_HEADER_RuntimeCodeAdr",
      "EEP_Header.EEP_HEADER_EpromVarsAdr",
      "EEP_Header.EEP_HEADER_ParamBlockAdr",
      "EEP_Header.EEP_HEADER_EpromRuntimeAdr",
      "EEP_Header.EEP_HEADER_MBusBlockAdr",
      "EEP_Header.EEP_HEADER_FunctionTableAdr"
    };
    private static string[] ActualVariablesList = new string[14]
    {
      "DefaultFunction.Sta_Secounds",
      "Itr_NextIntervalTime",
      "DefaultFunction.Waerme_EnergSum",
      "DefaultFunction.Kaelte_EnergSum",
      "DefaultFunction.Vol_VolSum",
      "DefaultFunction.TAR_EnergySumTar0",
      "DefaultFunction.TAR_EnergySumTar1",
      "DefaultFunction.In1Display",
      "DefaultFunction.In2Display",
      "vorlauftemperatur",
      "ruecklauftemperatur",
      "delta_t",
      "Vol_Flow",
      "Leistung"
    };
    private int RamCacheAddress;
    private int RamCacheSize = 0;

    public Meter(ZR_HandlerFunctions MyHandlerIn) => this.MyHandler = MyHandlerIn;

    internal Meter BaseClone()
    {
      Meter meter = new Meter(this.MyHandler);
      meter.MyMath.MyBaseSettings = this.MyMath.MyBaseSettings.Clone();
      meter.MyIdent = this.MyIdent.Clone();
      ++meter.MyIdent.MeterClonNumber;
      meter.MyLinker = this.MyLinker.Clone(meter);
      meter.MyCompiler = this.MyCompiler.Clone(meter);
      if (this.MyPalette != null)
        meter.MyPalette = this.MyPalette.Clone(meter);
      meter.AllParameters = new SortedList();
      meter.AliasParameters = new SortedList();
      meter.MyEpromHeader = new EpromHeader(meter);
      meter.MyMBusList = this.MyMBusList.Clone(meter);
      meter.MyFunctionTable = this.MyFunctionTable.Clone(meter);
      if (this.ConfigLoggers != null)
      {
        meter.ConfigLoggers = new SortedList<uint, Function>();
        foreach (Function function in (IEnumerable<Function>) this.ConfigLoggers.Values)
          meter.ConfigLoggers.Add((uint) function.Number, function.Clone(meter));
      }
      meter.Map = this.Map;
      meter.BlockLinkOrder = this.BlockLinkOrder;
      meter.WriteEnable = this.WriteEnable;
      meter.WriteEnableWithOpen = this.WriteEnableWithOpen;
      meter.KeyDataActual = this.KeyDataActual;
      meter.DatabaseKeyIsAvailable = this.DatabaseKeyIsAvailable;
      meter.MyDatabaseKey = this.MyDatabaseKey;
      meter.MeterKeyIsAvailable = this.MeterKeyIsAvailable;
      meter.MyMeterKey = this.MyMeterKey;
      meter.DatabaseKeyIsSaved = this.DatabaseKeyIsSaved;
      meter.MeterKeyIsSaved = this.MeterKeyIsSaved;
      meter.InOut1Function = this.InOut1Function;
      meter.InOut2Function = this.InOut2Function;
      DateTime databaseTime = this.DatabaseTime;
      if (true)
        meter.DatabaseTime = this.DatabaseTime;
      return meter;
    }

    internal bool ChangeBaseCloneToCompatibeleType(ZR_MeterIdent CompatibleIdent)
    {
      if (!this.MyHandler.MyDataBaseAccess.GetHardwareTables(CompatibleIdent, out this.Map, out this.MyCompiler.Includes, out this.BlockLinkOrder))
        return false;
      this.MyIdent = CompatibleIdent;
      return true;
    }

    internal bool AddDatabaseOverridesToBaseClone()
    {
      ArrayList Overrides;
      if (!this.MyHandler.MyDataBaseAccess.GetOverrides(this.MyIdent.MeterInfoID, out Overrides))
        return false;
      foreach (OverrideParameter TheOverrideParameter in Overrides)
        OverrideParameter.ChangeOrAddOverrideParameter(this.MyFunctionTable.OverridesList, TheOverrideParameter);
      return true;
    }

    internal bool CompleteTheClone(SortedList BaseAllParameters, bool IgnoreOverrides)
    {
      return this.CompleteTheCloneToCompiledFunctions(BaseAllParameters, IgnoreOverrides) && this.MyMBusList.GenerateNewList() && this.CompleteTheCloneFromCreateFunctionTable();
    }

    internal bool CompleteTheCloneAndSetMeterKey(SortedList BaseAllParameters, uint MeterKey)
    {
      if (!this.CompleteTheCloneToCompiledFunctions(BaseAllParameters, false))
        return false;
      Parameter allParameter1 = (Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterKey"];
      allParameter1.ValueEprom = (long) MeterKey;
      allParameter1.UpdateByteList();
      Parameter allParameter2 = (Parameter) this.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"];
      allParameter2.ValueEprom = 0L;
      allParameter2.UpdateByteList();
      return this.MyMBusList.GenerateNewList() && this.CompleteTheCloneFromCreateFunctionTable();
    }

    internal bool CompleteTheCloneToCompiledFunctions(
      SortedList BaseAllParameters,
      bool IgnoreOverrides)
    {
      this.MyLinker.LinkBlockList.Add((object) this.MyEpromHeader);
      if (!this.MyLinker.GenerateBlockList() || !this.MyHandler.MyLoadedFunctions.GarantAllFunctionsLoaded(this.MyFunctionTable.FunctionNumbersList) || !this.CreateMeterResourceInformation() || !this.MyFunctionTable.DeleteFunctionsWithMissedResources() || !this.MyLinker.IncludeAllFunctions() || !this.MyCompiler.GenerateMenuObjects() || !this.MyLinker.GenerateObjectLists() || !this.MyLinker.AddMapVariables())
        return false;
      if (this.MyHandler.UseOnlyDefaultValues)
      {
        ((Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterTypeID"]).ValueEprom = (long) this.MyIdent.MeterInfoID;
        ((Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterInfoID"]).ValueEprom = (long) this.MyIdent.MeterInfoID;
      }
      else
        this.UpdateParametersFromExternalParameterList(BaseAllParameters, Parameter.ParameterGroups.All);
      if (!IgnoreOverrides && !this.MyFunctionTable.CopyBaseOverridesToParameter() || !this.MyLinker.UpdateAdressesAtBlockRange((LinkBlock) this.MyLinker.LinkBlockList[0], (LinkBlock) this.MyDisplayCode) || !this.CopyNeadedVars(false) || !this.MyMath.CreateBaseSettings(this.MyFunctionTable.OverridesList))
        return false;
      if (!this.MyMath.CalculateMeterSettings(this.MyIdent.lFirmwareVersion))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, this.MyMath.getLastErrorString());
        return false;
      }
      if (!this.MyDisplayCode.AdjustFunctions() || !this.ReloadNeadedVars() || !IgnoreOverrides && !this.MyFunctionTable.CopyValuesFromOverriedesToParameter() || !this.MyLinker.UpdateAdressesAtBlockRange((LinkBlock) this.MyDisplayCode, (LinkBlock) null) || !this.MyLinker.CreateParameterAddressLists())
        return false;
      this.MyEpromHeader.ClearChecksumsAndAddresses();
      return this.MyCompiler.CompileFunctions() && this.MyLinker.CompleteAllLoggerData();
    }

    internal bool CompleteTheCloneFromCreateFunctionTable()
    {
      if (!this.MyFunctionTable.GenerateNewList() || !this.MyLinker.UpdateMBusAndFunctionTableAdresses() || !this.MyLinker.SetAddressReferences() || !this.MyLinker.LinkAllPointers() || !this.MyLoggerStore.InitialiseTheLoggerAreas() || !this.MyFixedParameter.LoadEmergencyFrame() || !this.MyEpromHeader.UpdateMBusHeaderData() || !this.MyLinker.UpdateEpromParameterData() || !this.MyFunctionTable.AddOverridesFromParameter())
        return false;
      this.MeterDataState = Meter.MeterDataStates.CloneComplete;
      return true;
    }

    internal bool LoadType(int MeterInfoID) => this.LoadType(MeterInfoID, 0);

    internal bool LoadType(int MeterInfoID, int lFirmwareVersion)
    {
      try
      {
        this.MyMath = new ZelsiusMath();
        this.MyLinker = new Linker(this);
        this.MyCompiler = new Compiler(this);
        this.AllParameters = new SortedList();
        this.AliasParameters = new SortedList();
        if (!this.MyHandler.MyDataBaseAccess.GetTypeBaseData(MeterInfoID, out this.MyIdent, out this.Eprom))
          return false;
        this.MyEpromHeader = new EpromHeader(this);
        this.MyLinker.LinkBlockList.Add((object) this.MyEpromHeader);
        if (!this.MyLinker.UpdateAdresses() || !this.UpdateParameterFromEprom(true))
          return false;
        this.MyIdent.lFirmwareVersion = (long) lFirmwareVersion;
        if (!this.MyHandler.MyDataBaseAccess.GetHardwareInfo(this.MyIdent) || !this.MyHandler.MyDataBaseAccess.GetHardwareTables(this.MyIdent, out this.Map, out this.MyCompiler.Includes, out this.BlockLinkOrder))
          return false;
        this.MyFunctionTable = new FunctionTable(this);
        if (!this.MyFunctionTable.ReadFunctionTableFromEprom() || !this.CreateMeterFromFunctionTable() || !this.MyHandler.UseOnlyDefaultValues && !this.MyFunctionTable.AddOverridesFromParameter())
          return false;
        Parameter allParameter1 = (Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterInfoID"];
        allParameter1.ValueEprom = (long) this.MyIdent.MeterInfoBaseID;
        allParameter1.UpdateByteList();
        Parameter allParameter2 = (Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterTypeID"];
        allParameter2.ValueEprom = (long) this.MyIdent.MeterInfoID;
        allParameter2.UpdateByteList();
        this.WriteEnable = true;
        return true;
      }
      catch (Exception ex)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "LoadTypeException:" + ZR_Constants.SystemNewLine + ex.ToString());
        return false;
      }
    }

    internal bool LoadTypeToFunctionTable(int MeterInfoID)
    {
      this.MyMath = new ZelsiusMath();
      this.MyLinker = new Linker(this);
      this.MyCompiler = new Compiler(this);
      this.AllParameters = new SortedList();
      this.AliasParameters = new SortedList();
      if (!this.MyHandler.MyDataBaseAccess.GetTypeBaseData(MeterInfoID, out this.MyIdent, out this.Eprom))
        return false;
      this.MyEpromHeader = new EpromHeader(this);
      this.MyLinker.LinkBlockList.Add((object) this.MyEpromHeader);
      if (!this.MyLinker.UpdateAdresses() || !this.UpdateParameterFromEprom(true) || !this.MyHandler.MyDataBaseAccess.GetHardwareInfo(this.MyIdent) || !this.MyHandler.MyDataBaseAccess.GetHardwareTables(this.MyIdent, out this.Map, out this.MyCompiler.Includes, out this.BlockLinkOrder))
        return false;
      this.MyFunctionTable = new FunctionTable(this);
      return this.MyFunctionTable.ReadFunctionTableFromEprom() && this.CreateMeterFromFunctionTable();
    }

    internal bool LoadMeter(ZR_MeterIdent TheMeterIdent, DateTime StorageTime)
    {
      if (!this.MyHandler.MyDataBaseAccess.GetMeterEpromData(TheMeterIdent, ref StorageTime, out this.Eprom))
        return false;
      this.MyHandler.MyMeters.DbMeterReadEEProm = (byte[]) this.Eprom.Clone();
      this.DatabaseTime = StorageTime;
      this.MyLinker = new Linker(this);
      this.MyCompiler = new Compiler(this);
      this.AllParameters = new SortedList();
      this.AliasParameters = new SortedList();
      this.MyIdent = new ZR_MeterIdent(MeterBasis.DbMeter);
      this.MyEpromHeader = new EpromHeader(this);
      this.MyLinker.LinkBlockList.Add((object) this.MyEpromHeader);
      if (!this.MyLinker.UpdateAdresses() || !this.UpdateParameterFromEprom(true))
        return false;
      this.MyEpromHeader.UpdateIdentData();
      if (TheMeterIdent.lFirmwareVersion > 0L)
        this.MyIdent.lFirmwareVersion = TheMeterIdent.lFirmwareVersion;
      if (!this.MyHandler.MyDataBaseAccess.GetHardwareInfo(this.MyIdent))
        return false;
      if (this.Eprom.Length != this.MyIdent.extEEPSize)
      {
        byte[] numArray = new byte[this.MyIdent.extEEPSize];
        for (int index = 0; index < numArray.Length && index < this.Eprom.Length; ++index)
          numArray[index] = this.Eprom[index];
        this.Eprom = numArray;
      }
      if (!this.MyHandler.MyDataBaseAccess.GetHardwareTables(this.MyIdent, out this.Map, out this.MyCompiler.Includes, out this.BlockLinkOrder))
        return false;
      this.MyFunctionTable = new FunctionTable(this);
      return this.MyFunctionTable.ReadFunctionTableFromEprom() && this.CreateMeterFromFunctionTable();
    }

    internal bool ConnectMeter()
    {
      this.MyCommunication = new MeterCommunication(this);
      this.MyIdent = new ZR_MeterIdent(MeterBasis.Read);
      if (!this.MyCommunication.ReadVersion(this.MyIdent))
      {
        ZR_ClassLibMessages.AddErrorDescription(this.MyHandler.MyRes.GetString("ConnectMeterError"));
        return false;
      }
      this.MeterDataState = Meter.MeterDataStates.Connected;
      return true;
    }

    internal bool IdentConnectedMeter()
    {
      this.MyLinker = new Linker(this);
      this.MyCompiler = new Compiler(this);
      this.AllParameters = new SortedList();
      this.AliasParameters = new SortedList();
      this.MyEpromHeader = new EpromHeader(this);
      this.MyLinker.LinkBlockList.Add((object) this.MyEpromHeader);
      if (!this.MyLinker.UpdateAdresses() || !this.MyEpromHeader.ReadHeaderFromConnectedDevice() || !this.UpdateParameterFromEprom(true))
        return false;
      this.MyEpromHeader.UpdateIdentData();
      return true;
    }

    internal bool ReadConnectedMeter()
    {
      if (this.MeterDataState != Meter.MeterDataStates.Connected)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
        return false;
      }
      if (!this.MyHandler.ReadWithoutBackup && !this.MyCommunication.MyBus.RunBackup() || !this.IdentConnectedMeter() || !this.MyHandler.MyDataBaseAccess.GetHardwareInfo(this.MyIdent) || !this.MyHandler.MyDataBaseAccess.GetHardwareTables(this.MyIdent, out this.Map, out this.MyCompiler.Includes, out this.BlockLinkOrder))
        return false;
      int address = ((LinkObj) this.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupChecksum"]).Address;
      int num = (int) ((Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_FunctionTableAdr"]).ValueEprom + 6 - address;
      ByteField MemoryData = new ByteField(num);
      if (!this.MyCommunication.MyBus.ReadMemory(MemoryLocation.EEPROM, address, num, out MemoryData))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Read memory error");
        return false;
      }
      byte[] numArray = new byte[this.MyIdent.extEEPSize];
      this.Eprom.CopyTo((Array) numArray, 0);
      this.Eprom = numArray;
      for (int index = 0; index < num; ++index)
        this.Eprom[index + address] = MemoryData.Data[index];
      this.MyFunctionTable = new FunctionTable(this);
      if (!this.MyFunctionTable.ReadFunctionTableFromConnectedDevice() || !this.MyEpromHeader.AllChecksumsOk() || !this.CreateMeterFromFunctionTable() || !this.MyMBusList.AdjustAllMBusParameterDivVifs())
        return false;
      this.WriteEnable = false;
      this.WriteEnableWithOpen = false;
      Parameter allParameter1 = (Parameter) this.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"];
      if (allParameter1.ValueEprom == (long) byte.MaxValue)
      {
        this.WriteEnable = true;
      }
      else
      {
        if (!this.MyCommunication.ReadParameterValue(allParameter1, MemoryLocation.RAM))
          return false;
        if (allParameter1.ValueCPU == (long) byte.MaxValue)
          this.WriteEnable = true;
      }
      if (this.WriteEnable)
      {
        Parameter allParameter2 = (Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterKey"];
        if (!this.MyCommunication.ReadParameterValue(allParameter2, MemoryLocation.EEPROM))
          return false;
        this.MyMeterKey = allParameter2.ValueEprom;
        this.MeterKeyIsAvailable = true;
        this.KeyDataActual = true;
      }
      else
      {
        this.GenerateWriteEnableLists(false);
        if (this.RamWriteEnable[allParameter1.AddressCPU])
          this.WriteEnableWithOpen = true;
      }
      return true;
    }

    internal bool ReadConnectedMeterLoggerData()
    {
      if (this.UsedEpromSize > 0)
        return true;
      this.UsedEpromSize = this.MyLoggerStore.BlockStartAddress;
      foreach (IntervalAndLogger allIntervallCode in this.MyLinker.AllIntervallCodes)
      {
        if ((allIntervallCode.Type != LoggerTypes.ConfigLogger || this.MyHandler.LoggerRestoreState == LoggerRestor.RestoreAll) && !allIntervallCode.ReadDataToEpromArray())
          return false;
      }
      return true;
    }

    internal List<LoggerInfo> GetLoggerInfos(out int LoggerMemorySize)
    {
      LoggerMemorySize = 0;
      List<LoggerInfo> loggerInfos = new List<LoggerInfo>();
      foreach (IntervalAndLogger allIntervallCode in this.MyLinker.AllIntervallCodes)
      {
        LoggerInfo loggerInfo = allIntervallCode.GetLoggerInfo(out LoggerMemorySize);
        if (loggerInfo != null)
          loggerInfos.Add(loggerInfo);
      }
      return loggerInfos;
    }

    internal List<LoggerInfo> ReadFixedLoggers()
    {
      int LoggerMemorySize = 0;
      List<LoggerInfo> loggerInfoList = new List<LoggerInfo>();
      foreach (IntervalAndLogger allIntervallCode in this.MyLinker.AllIntervallCodes)
      {
        if (allIntervallCode.Type == LoggerTypes.FixedLogger || allIntervallCode.Type == LoggerTypes.FixedLoggerFuture)
        {
          LoggerInfo loggerInfo = allIntervallCode.GetLoggerInfo(out LoggerMemorySize);
          if (loggerInfo != null)
          {
            if (loggerInfo.ReadLogger(DateTime.MinValue, DateTime.MaxValue))
              loggerInfoList.Add(loggerInfo);
            else
              ZR_ClassLibMessages.AddErrorDescription("Read error on logger: " + loggerInfo.LoggerName);
          }
        }
      }
      return loggerInfoList;
    }

    internal bool ReprogramLoggerData(List<LoggerInfo> OldLoggers)
    {
      foreach (LoggerInfo oldLogger in OldLoggers)
      {
        bool flag = false;
        foreach (IntervalAndLogger allIntervallCode in this.MyLinker.AllIntervallCodes)
        {
          if (allIntervallCode.FunctionNumber == oldLogger.MyLogger.FunctionNumber)
          {
            if (!allIntervallCode.ReprogramLoggerData(oldLogger))
            {
              ZR_ClassLibMessages.AddErrorDescription("Error on reload logger data: " + oldLogger.LoggerName);
              break;
            }
            flag = true;
            break;
          }
        }
        if (!flag)
          ZR_ClassLibMessages.AddErrorDescription("Logger not reloaded: " + oldLogger.LoggerName);
      }
      return true;
    }

    private bool CreateMeterFromFunctionTable()
    {
      if (!this.MyLinker.GenerateBlockList() || !this.MyHandler.MyLoadedFunctions.GarantAllFunctionsLoaded(this.MyFunctionTable.FunctionNumbersList) || !this.CreateMeterResourceInformation() || !this.MyLinker.IncludeAllFunctions())
        return false;
      this.MyFunctionTable.AddFunctionNames();
      if (!this.MyCompiler.GenerateMenuObjects() || !this.MyLinker.GenerateObjectLists() || !this.MyLinker.AdjustConfigLoggers() || !this.MyLinker.AddMapVariables() || !this.MyLinker.UpdateAdressesAtBlockRange((LinkBlock) this.MyLinker.LinkBlockList[1], (LinkBlock) this.MyDisplayCode))
        return false;
      if (this.MyHandler.UseOnlyDefaultValues)
      {
        if (!this.CopyNeadedVars(false))
          return false;
      }
      else if (!this.CopyNeadedVars(true))
        return false;
      if (!this.MyMath.GetNotAvailableOverrides(this.MyFunctionTable.OverridesList))
      {
        this.MyHandler.AddErrorPointMessage(this.MyMath.getLastErrorString());
        return false;
      }
      if (!this.MyMath.CreateBaseSettings(this.MyFunctionTable.OverridesList))
        return false;
      if (!this.MyMath.CalculateMeterSettings(this.MyIdent.lFirmwareVersion))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, this.MyMath.getLastErrorString());
        return false;
      }
      if (!this.MyDisplayCode.AdjustFunctions() || !this.MyCompiler.CompileFunctions() || !this.MyLinker.UpdateAdressesAtBlockRange((LinkBlock) this.MyDisplayCode, (LinkBlock) this.MyMBusList) || !this.UpdateParameterFromEprom(false) || !this.AdjustAdditionalImpulsValues())
        return false;
      this.MyLinker.ReloadRuntimeVarsRamAdresses();
      return this.MyLinker.CreateParameterAddressLists() && this.MyLinker.UpdateAdressesAtBlockRange((LinkBlock) this.MyMBusList, (LinkBlock) null) && this.MyLinker.CompleteAllLoggerData() && this.MyMBusList.LoadFromByteArray(this.Eprom, (int) ((Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusBlockAdr"]).ValueEprom) && this.MyLinker.UpdateAdressesAtBlockRange((LinkBlock) this.MyMBusList, (LinkBlock) null) && this.MyLinker.LoadAllPointersFromEprom() && this.MyLinker.UpdateEpromParameterData() && this.MyCompiler.GenerateCodeFromCodeBlockList(this.MyMBusList.LinkObjList) && this.MyFunctionTable.GarantTypeSpecOverrides();
    }

    private bool AdjustAdditionalImpulsValues()
    {
      Parameter parameter1 = (Parameter) this.AllParametersByResource[(object) "Inp1Factor"];
      if (parameter1 != null)
      {
        OverrideParameter overrides = (OverrideParameter) this.MyFunctionTable.OverridesList[(object) OverrideID.Input1PulsValue];
        Decimal num = (Decimal) Math.Pow(10.0, (double) MeterMath.InputUnits[this.MyMath.MyBaseSettings.Input1UnitIndex].AfterPointDigits);
        string StringValue = ((Decimal) parameter1.ValueEprom / 64M / num).ToString();
        overrides.SetValueFromStringWin(StringValue);
      }
      Parameter parameter2 = (Parameter) this.AllParametersByResource[(object) "Inp2Factor"];
      if (parameter2 != null)
      {
        OverrideParameter overrides = (OverrideParameter) this.MyFunctionTable.OverridesList[(object) OverrideID.Input2PulsValue];
        Decimal num = (Decimal) Math.Pow(10.0, (double) MeterMath.InputUnits[this.MyMath.MyBaseSettings.Input2UnitIndex].AfterPointDigits);
        string StringValue = ((Decimal) parameter2.ValueEprom / 64M / num).ToString();
        overrides.SetValueFromStringWin(StringValue);
      }
      return true;
    }

    private bool CopyNeadedVars(bool UpdateFromEprom)
    {
      for (int index = 0; index < this.MyMath.NeadedMeterVars.Count; ++index)
      {
        string key = (string) this.MyMath.NeadedMeterVars.GetKey(index);
        if (!key.StartsWith("R:"))
        {
          Parameter allParameter = (Parameter) this.AllParameters[(object) key];
          if (allParameter == null || UpdateFromEprom && !allParameter.LoadValueFromEprom(this.Eprom))
            return false;
          this.MyMath.NeadedMeterVars.SetByIndex(index, (object) allParameter.ValueEprom);
        }
      }
      return true;
    }

    private bool ReloadNeadedVars()
    {
      for (int index = 0; index < this.MyMath.NeadedMeterVars.Count; ++index)
      {
        string key1 = (string) this.MyMath.NeadedMeterVars.GetKey(index);
        Parameter allParameter;
        if (key1.StartsWith("R:"))
        {
          string key2 = key1.Substring(2);
          if (this.AllParametersByResource != null)
          {
            allParameter = (Parameter) this.AllParametersByResource[(object) key2];
            if (allParameter == null)
              continue;
          }
          else
            continue;
        }
        else
          allParameter = (Parameter) this.AllParameters[(object) key1];
        if (allParameter == null)
          return false;
        object byIndex = this.MyMath.NeadedMeterVars.GetByIndex(index);
        if (byIndex != null)
        {
          if (allParameter.FullName == "DefaultFunction.PulsValue1")
          {
            long num = (long) byIndex;
            if (num != allParameter.ValueEprom + 1L && num != allParameter.ValueEprom - 1L)
              allParameter.ValueEprom = (long) byIndex;
          }
          else
            allParameter.ValueEprom = (long) byIndex;
        }
      }
      return true;
    }

    internal bool OverrideAllLinkerObjectsWithEpromData()
    {
      foreach (LinkBlock linkBlock in this.MyLinker.LinkBlockList)
      {
        foreach (object linkObj in linkBlock.LinkObjList)
        {
          if (linkObj is Parameter)
          {
            Parameter parameter = (Parameter) linkObj;
            if (parameter.ExistOnEprom)
              parameter.LoadValueFromEprom(this.Eprom);
          }
          else
          {
            foreach (LinkObj code in ((CodeBlock) linkObj).CodeList)
              this.OverrideLinkObjectData(code);
          }
        }
      }
      this.MeterDataState = Meter.MeterDataStates.EpromDataReloaded;
      return true;
    }

    private void OverrideLinkObjectData(LinkObj TheObject)
    {
      try
      {
        if (TheObject.LinkByteList == null)
        {
          ZR_ClassLibMessages.AddWarning("missing: LinkByteList");
        }
        else
        {
          for (int index = 0; index < TheObject.LinkByteList.Length; ++index)
            TheObject.LinkByteList[index] = this.Eprom[TheObject.Address + index];
        }
      }
      catch
      {
      }
    }

    internal bool GenerateEprom()
    {
      this.Eprom = new byte[this.MyIdent.extEEPSize];
      if (!this.MyCompiler.CopyToEprom())
        return false;
      this.MyFunctionTable.GenerateChecksum();
      this.MyEpromHeader.GenerateChecksums();
      return true;
    }

    internal bool GenerateWriteEnableLists(bool GenerateAllways)
    {
      if (!GenerateAllways && this.WriteEnable)
        return true;
      if (this.MyWritePermTable.LinkObjList.Count < 1)
        return false;
      this.EpromWriteEnable = new bool[this.MyIdent.extEEPSize];
      this.RamWriteEnable = new bool[65536];
      try
      {
        int num1 = 0;
        while (true)
        {
          ushort num2;
          ushort valueEprom;
          do
          {
            do
            {
              ArrayList linkObjList1 = this.MyWritePermTable.LinkObjList;
              int index1 = num1;
              int num3 = index1 + 1;
              num2 = (ushort) ((Parameter) linkObjList1[index1]).ValueEprom;
              if (num2 != (ushort) 0)
              {
                ArrayList linkObjList2 = this.MyWritePermTable.LinkObjList;
                int index2 = num3;
                num1 = index2 + 1;
                valueEprom = (ushort) ((Parameter) linkObjList2[index2]).ValueEprom;
                bool flag = false;
                if (((uint) num2 & 32768U) > 0U)
                {
                  num2 &= (ushort) short.MaxValue;
                  flag = true;
                }
                if (flag)
                  goto label_9;
              }
              else
                goto label_24;
            }
            while ((int) valueEprom >= this.EpromWriteEnable.Length);
            goto label_16;
label_9:;
          }
          while ((int) valueEprom >= this.RamWriteEnable.Length);
          if ((long) valueEprom + (long) num2 > (long) this.RamWriteEnable.Length)
            num2 = (ushort) ((uint) this.RamWriteEnable.Length - (uint) valueEprom);
          for (ushort index = 0; (int) index < (int) num2; ++index)
            this.RamWriteEnable[(int) valueEprom + (int) index] = true;
          goto label_21;
label_16:
          if ((long) valueEprom + (long) num2 > (long) this.EpromWriteEnable.Length)
            num2 = (ushort) ((uint) this.EpromWriteEnable.Length - (uint) valueEprom);
          for (ushort index = 0; (int) index < (int) num2; ++index)
            this.EpromWriteEnable[(int) valueEprom + (int) index] = true;
label_21:;
        }
      }
      catch
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, "Write permition table error");
        return false;
      }
label_24:
      return true;
    }

    internal bool UpdateParameterFromEprom(bool IncludeHeaderPointer)
    {
      foreach (DictionaryEntry allParameter in this.AllParameters)
      {
        Parameter parameter = (Parameter) allParameter.Value;
        if (IncludeHeaderPointer || !parameter.FullName.StartsWith("EEP_Header."))
          parameter.LoadValueFromEprom(this.Eprom);
      }
      return true;
    }

    internal bool AreBlocksizesUnchanged(byte[] CompareEEProm)
    {
      for (int index = 0; index < Meter.CriticalBlockPointers.Length; ++index)
      {
        Parameter allParameter = (Parameter) this.AllParameters[(object) Meter.CriticalBlockPointers[index]];
        if (allParameter.ValueEprom != allParameter.GetValueFromMap(CompareEEProm))
          ZR_ClassLibMessages.AddWarning("Pointer changed: " + allParameter.Name);
      }
      return true;
    }

    internal bool UpdateParametersFromExternalParameterList(
      SortedList ExternalParameter,
      Parameter.ParameterGroups TheOption)
    {
      foreach (DictionaryEntry allParameter in this.AllParameters)
      {
        string key = (string) allParameter.Key;
        Parameter parameter1 = (Parameter) allParameter.Value;
        Parameter parameter2 = (Parameter) ExternalParameter[(object) key];
        if (parameter2 != null && (TheOption == Parameter.ParameterGroups.All || parameter1.GroupMember[(int) TheOption]))
        {
          parameter1.CPU_ValueIsInitialised = parameter2.CPU_ValueIsInitialised;
          parameter1.ValueCPU = parameter2.ValueCPU;
          parameter1.EpromValueIsInitialised = parameter2.CPU_ValueIsInitialised;
          parameter1.ValueEprom = parameter2.ValueEprom;
          parameter1.MBusShortOn = parameter2.MBusShortOn;
          parameter1.MBusOn = parameter2.MBusOn;
        }
      }
      return true;
    }

    internal bool InitialiseAllTimes()
    {
      Parameter allParameter = (Parameter) this.AllParameters[(object) "DefaultFunction.Sta_Secounds"];
      allParameter.ValueEprom = (long) ZR_Calendar.Cal_GetMeterTime(this.MeterTime);
      if (!allParameter.UpdateByteList())
        return false;
      foreach (IntervalAndLogger allIntervallCode in this.MyLinker.AllIntervallCodes)
      {
        allIntervallCode.ClearLogger();
        allIntervallCode.InitialiseTimeVariablesFromMeterTime(this.MeterTime);
      }
      return true;
    }

    internal bool GetParameterValue(
      string Varname,
      MemoryLocation Location,
      bool DeviceRead,
      out long TheValue)
    {
      TheValue = 0L;
      Parameter allParameter = (Parameter) this.AllParameters[(object) Varname];
      if (allParameter == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Parameter not available: " + Varname);
        return false;
      }
      if (!DeviceRead && Location == MemoryLocation.RAM && !allParameter.CPU_ValueIsInitialised)
        DeviceRead = true;
      if (DeviceRead && !this.MyCommunication.ReadParameterValue(allParameter, Location))
        return false;
      TheValue = Location != MemoryLocation.RAM ? allParameter.ValueEprom : allParameter.ValueCPU;
      return true;
    }

    public bool SetParameterValue(
      string Varname,
      MemoryLocation Location,
      bool WriteImmediatly,
      long Value)
    {
      Parameter allParameter = (Parameter) this.AllParameters[(object) Varname];
      if (allParameter == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Parameter not available: " + Varname);
        return false;
      }
      if (Location == MemoryLocation.RAM)
      {
        allParameter.ValueCPU = Value;
        allParameter.CPU_ValueIsInitialised = true;
      }
      else
      {
        allParameter.ValueEprom = Value;
        allParameter.EpromValueIsInitialised = true;
        allParameter.UpdateByteList();
      }
      if (WriteImmediatly)
      {
        if (this.MyCommunication == null)
        {
          ZR_MeterIdent ident = this.MyIdent;
          if (!this.ConnectMeter())
          {
            ZR_ClassLibMessages.AddErrorDescription(this.MyHandler.MyRes.GetString("ConnectMeterError"));
            return false;
          }
          if (ident.lFirmwareVersion != this.MyIdent.lFirmwareVersion)
          {
            ZR_ClassLibMessages.AddErrorDescription("DifferentFirmware");
            return false;
          }
        }
        if (!this.MyCommunication.WriteParameterValue(allParameter, Location))
          return false;
      }
      return true;
    }

    public bool ChangeRamParameterBitsImmediately(string Varname, uint AndMask, uint OrMask)
    {
      Parameter allParameter = (Parameter) this.AllParameters[(object) Varname];
      if (allParameter == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Parameter not available: " + Varname);
        return false;
      }
      if (!allParameter.ExistOnCPU)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "No available at RAM");
        return false;
      }
      uint maxValue = (uint) byte.MaxValue;
      for (int index = 0; index < 4; ++index)
      {
        if (((int) AndMask | ~(int) maxValue) != -1)
        {
          if (((int) AndMask | (int) maxValue) != -1 || (OrMask & ~maxValue) > 0U)
            break;
        }
        else if ((OrMask & maxValue) > 0U)
        {
          if ((OrMask & ~maxValue) > 0U || ((int) AndMask | (int) maxValue) != -1)
            break;
        }
        else
        {
          maxValue <<= 8;
          continue;
        }
        byte AndMask1 = (byte) (AndMask >>= 8 * index);
        byte OrMask1 = (byte) (OrMask >>= 8 * index);
        return this.MyCommunication.MyBus.WriteBitfield(allParameter.AddressCPU + index, AndMask1, OrMask1);
      }
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal mask");
      return false;
    }

    internal bool SetMeterKey(long MeterKey, long DatabaseKey)
    {
      this.MyMeterKey = MeterKey;
      this.MeterKeyIsAvailable = true;
      this.MyDatabaseKey = DatabaseKey;
      this.DatabaseKeyIsAvailable = true;
      this.KeyDataActual = true;
      Parameter allParameter = (Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterKey"];
      allParameter.ValueEprom = MeterKey;
      allParameter.UpdateByteList();
      return true;
    }

    internal bool DeleteMeterKey(long LockKey)
    {
      int MeterKey;
      if (this.MeterKeyIsAvailable)
        MeterKey = (int) this.MyMeterKey;
      else if (this.DatabaseKeyIsAvailable)
      {
        MeterKey = (int) ((this.MyDatabaseKey ^ LockKey) & (long) uint.MaxValue);
      }
      else
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "No key available");
        return false;
      }
      if (this.MyCommunication.MyBus.DeleteMeterKey(MeterKey))
      {
        this.WriteEnable = true;
        return true;
      }
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Communication error or wrong meter key!");
      return false;
    }

    internal bool SaveKeyToDatabase(long LockKey)
    {
      this.KeyDataActual = false;
      MeterDBAccess.ValueTypes ValueType;
      long Key;
      if (LockKey == 0L)
      {
        ValueType = MeterDBAccess.ValueTypes.MeterKey;
        Key = this.MyMeterKey;
      }
      else
      {
        ValueType = MeterDBAccess.ValueTypes.GovernmentRandomNr;
        this.MyDatabaseKey = this.MyMeterKey ^ LockKey;
        Key = this.MyDatabaseKey;
      }
      return this.MyHandler.MyDataBaseAccess.SetDeviceKey(this.MyIdent.MeterID, Key, ValueType);
    }

    public bool GetWriteState(
      out bool WriteIsEnabled,
      out bool WriteProtectionIsSet,
      out bool DatabaseKeyIsAvailable,
      out bool MeterKeyIsAvailable,
      out bool DatabaseKeyIsSaved,
      out bool MeterKeyIsSaved)
    {
      WriteIsEnabled = this.WriteEnable;
      WriteProtectionIsSet = ((Parameter) this.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"]).ValueEprom != (long) byte.MaxValue;
      DatabaseKeyIsAvailable = this.DatabaseKeyIsAvailable;
      MeterKeyIsAvailable = this.MeterKeyIsAvailable;
      DatabaseKeyIsSaved = this.DatabaseKeyIsSaved;
      MeterKeyIsSaved = this.MeterKeyIsSaved;
      if (!this.KeyDataActual)
      {
        this.KeyDataActual = true;
        DatabaseKeyIsSaved = false;
        MeterKeyIsSaved = false;
        long Key;
        MeterDBAccess.ValueTypes ValueType;
        if (!this.MyHandler.MyDataBaseAccess.GetDeviceKeys(this.MyIdent.MeterID, out Key, out ValueType))
          return true;
        if (ValueType == MeterDBAccess.ValueTypes.GovernmentRandomNr)
        {
          this.DatabaseKeyIsSaved = true;
          this.MeterKeyIsSaved = false;
          if (this.DatabaseKeyIsAvailable)
          {
            if (Key != this.MyDatabaseKey)
              ZR_ClassLibMessages.AddWarning("DatabaseKey different in database and data");
          }
          else
          {
            this.DatabaseKeyIsAvailable = true;
            this.DatabaseKeyIsSaved = true;
            this.MyDatabaseKey = Key;
          }
        }
        else
        {
          this.DatabaseKeyIsSaved = false;
          this.MeterKeyIsSaved = true;
          if (this.MeterKeyIsAvailable)
          {
            if (Key != this.MyMeterKey)
              ZR_ClassLibMessages.AddWarning("MeterKey different in database and data");
          }
          else
          {
            this.MeterKeyIsAvailable = true;
            this.MeterKeyIsSaved = true;
            this.MyMeterKey = Key;
          }
        }
      }
      DatabaseKeyIsAvailable = this.DatabaseKeyIsAvailable;
      MeterKeyIsAvailable = this.MeterKeyIsAvailable;
      DatabaseKeyIsSaved = this.DatabaseKeyIsSaved;
      MeterKeyIsSaved = this.MeterKeyIsSaved;
      return true;
    }

    public bool ClearWriteProtection()
    {
      Parameter allParameter = (Parameter) this.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"];
      allParameter.ValueEprom = (long) byte.MaxValue;
      allParameter.UpdateByteList();
      return true;
    }

    public bool SetWriteProtection()
    {
      Parameter allParameter = (Parameter) this.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"];
      allParameter.ValueEprom = 0L;
      allParameter.UpdateByteList();
      return true;
    }

    internal bool CreateMeterResourceInformation()
    {
      SortedList fullLoadedFunctions = this.MyHandler.MyLoadedFunctions.FullLoadedFunctions;
      this.AvailableMeterResouces = new SortedList();
      this.NeadedMeterResources = new SortedList();
      MeterResource meterResource1 = new MeterResource(MeterResources.CEnergy.ToString(), (ushort) 0);
      this.AvailableMeterResouces.Add((object) meterResource1.Name, (object) meterResource1);
      string hardwareResource = this.MyIdent.HardwareResource;
      char[] chArray1 = new char[1]{ ';' };
      foreach (string str in hardwareResource.Split(chArray1))
      {
        string TheResourceName = str.Trim();
        if (TheResourceName.Length > 0)
        {
          MeterResource meterResource2 = new MeterResource(TheResourceName, (ushort) 0);
          this.AvailableMeterResouces.Add((object) meterResource2.Name, (object) meterResource2);
        }
      }
      for (ushort index1 = 0; (int) index1 < this.MyFunctionTable.FunctionNumbersList.Count; ++index1)
      {
        Function function = (Function) fullLoadedFunctions[this.MyFunctionTable.FunctionNumbersList[(int) index1]];
        for (int index2 = 0; index2 < function.SuppliedResources.Length; ++index2)
        {
          MeterResource meterResource3 = new MeterResource(function.SuppliedResources[index2], function.Number);
          if (!this.AvailableMeterResouces.ContainsKey((object) meterResource3.Name))
            this.AvailableMeterResouces.Add((object) meterResource3.Name, (object) meterResource3);
        }
        for (int index3 = 0; index3 < function.NeadedResources.Length; ++index3)
        {
          string neadedResource = function.NeadedResources[index3];
          char[] chArray2 = new char[1]{ '|' };
          foreach (string key in neadedResource.Split(chArray2))
          {
            if (key.Length > 0)
            {
              if (key.Length > 2 && key[1] == ':')
                key = key.Substring(2);
              if (this.NeadedMeterResources[(object) key] == null)
                this.NeadedMeterResources.Add((object) key, (object) 0);
            }
          }
        }
      }
      if (!this.MyFunctionTable.ChangeResourcesFromOverrides())
        return false;
      for (ushort index4 = 0; (int) index4 < this.MyFunctionTable.FunctionNumbersList.Count; ++index4)
      {
        Function function = (Function) fullLoadedFunctions[this.MyFunctionTable.FunctionNumbersList[(int) index4]];
        for (int index5 = 0; index5 < function.NeadedResources.Length; ++index5)
        {
          string neadedResource = function.NeadedResources[index5];
          char[] chArray3 = new char[1]{ '|' };
          foreach (string str in neadedResource.Split(chArray3))
          {
            string key = str.Trim();
            bool Exclusive = false;
            if (key.StartsWith("e:"))
            {
              key = key.Substring(2);
              Exclusive = true;
            }
            MeterResource availableMeterResouce = (MeterResource) this.AvailableMeterResouces[(object) key];
            if (availableMeterResouce != null)
            {
              availableMeterResouce.AddUsing(function.Number, Exclusive);
              break;
            }
          }
        }
      }
      return true;
    }

    internal bool IsMeterResourceAvailable(MeterResources TheResource)
    {
      if (TheResource == MeterResources.NoResource)
        return true;
      MeterResource availableMeterResouce = (MeterResource) this.AvailableMeterResouces[(object) TheResource.ToString()];
      return availableMeterResouce != null && !availableMeterResouce.IsBusy();
    }

    internal bool DeleteIdentData()
    {
      Parameter allParameter1 = (Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterKey"];
      allParameter1.ValueEprom = 0L;
      allParameter1.UpdateByteList();
      Parameter allParameter2 = (Parameter) this.AllParameters[(object) "DefaultFunction.RAM_WriteLimit"];
      allParameter2.ValueEprom = (long) byte.MaxValue;
      allParameter2.UpdateByteList();
      Parameter allParameter3 = (Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_SerialNr"];
      allParameter3.ValueEprom = 0L;
      allParameter3.UpdateByteList();
      Parameter allParameter4 = (Parameter) this.AllParameters[(object) "EEP_Header.EEP_HEADER_MBusSerialNr"];
      allParameter4.ValueEprom = 0L;
      allParameter4.UpdateByteList();
      this.MeterTime = DateTime.Now;
      if (!this.InitialiseAllTimes())
        return false;
      this.GenerateEprom();
      return true;
    }

    internal bool GetOverrideParameterList(out SortedList TheList)
    {
      TheList = new SortedList();
      for (int index = 0; index < this.MyFunctionTable.OverridesList.Count; ++index)
      {
        OverrideParameter byIndex = (OverrideParameter) this.MyFunctionTable.OverridesList.GetByIndex(index);
        if (byIndex.NeadedRessource == MeterResources.NoResource || this.IsMeterResourceAvailable(byIndex.NeadedRessource))
        {
          OverrideParameter overrideParameter = byIndex.Clone();
          if (this.WriteEnable)
            overrideParameter.HasWritePermission = true;
          TheList.Add((object) overrideParameter.ParameterID, (object) overrideParameter);
        }
      }
      int index1 = TheList.IndexOfKey((object) OverrideID.BaseConfig);
      if (index1 >= 0 && OverrideParameter.GetBaseConfigStruct(((ConfigurationParameter) TheList.GetByIndex(index1)).GetStringValueDb()) != null)
      {
        int index2 = TheList.IndexOfKey((object) OverrideID.VolumeResolution);
        if (index2 >= 0)
          ((ConfigurationParameter) TheList.GetByIndex(index2)).AllowedValues = ZelsiusMath.GetRestrictedVolumeUnitList();
      }
      return true;
    }

    internal bool SetOverrideParameterFromList(SortedList TheParameterList)
    {
      for (int index = 0; index < TheParameterList.Count; ++index)
      {
        OverrideParameter byIndex = (OverrideParameter) TheParameterList.GetByIndex(index);
        if (this.MyFunctionTable.OverridesList[(object) byIndex.ParameterID] != null)
          this.MyFunctionTable.OverridesList[(object) byIndex.ParameterID] = (object) byIndex;
        else
          this.MyFunctionTable.OverridesList.Add((object) byIndex.ParameterID, (object) byIndex);
      }
      return true;
    }

    internal bool CompleteTheCloneWithTypeOverride(Meter MeterToOverride, Meter TypeMeter)
    {
      this.MyLinker.LinkBlockList.Add((object) this.MyEpromHeader);
      if (!this.MyLinker.GenerateBlockList() || !this.MyHandler.MyLoadedFunctions.GarantAllFunctionsLoaded(this.MyFunctionTable.FunctionNumbersList) || !this.CreateMeterResourceInformation() || !this.MyFunctionTable.DeleteFunctionsWithMissedResources() || !this.MyLinker.IncludeAllFunctions() || !this.MyCompiler.GenerateMenuObjects() || !this.MyLinker.GenerateObjectLists() || !this.MyLinker.AddMapVariables())
        return false;
      this.UpdateParametersFromExternalParameterList(MeterToOverride.AllParameters, Parameter.ParameterGroups.All);
      if (!this.MyFunctionTable.CopyBaseOverridesToParameter() || !this.MyLinker.UpdateAdressesAtBlockRange((LinkBlock) this.MyLinker.LinkBlockList[0], (LinkBlock) this.MyDisplayCode) || !this.CopyNeadedVars(false) || !this.MyMath.CreateBaseSettings(this.MyFunctionTable.OverridesList))
        return false;
      if (!this.MyMath.CalculateMeterSettings(this.MyIdent.lFirmwareVersion))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, this.MyMath.getLastErrorString());
        return false;
      }
      if (!this.MyDisplayCode.AdjustFunctions() || !this.ReloadNeadedVars() || !this.MyFunctionTable.CopyValuesFromOverriedesToParameter() || !this.MyLinker.UpdateAdressesAtBlockRange((LinkBlock) this.MyDisplayCode, (LinkBlock) null) || !this.MyLinker.CreateParameterAddressLists())
        return false;
      this.MyEpromHeader.ClearChecksumsAndAddresses();
      return this.MyCompiler.CompileFunctions();
    }

    internal int GetBaudrate()
    {
      Parameter allParameter = (Parameter) this.AllParameters[(object) "DefaultFunction.Itr_Prozessabbild"];
      try
      {
        int index1 = this.MyCompiler.Includes.IndexOfKey((object) "ITR_PAB_BAUD_MASK");
        if (index1 < 0)
        {
          int index2 = this.MyCompiler.Includes.IndexOfKey((object) "RUI_PAB_2400BAUD");
          if (index2 < 0)
            return 2400;
          int num = 1 << ((int) this.MyCompiler.Includes.GetByIndex(index2) >> 3);
          return ((int) allParameter.ValueEprom & num) == 0 ? 4800 : 2400;
        }
        int byIndex = (int) this.MyCompiler.Includes.GetByIndex(index1);
        int num1 = (int) allParameter.ValueEprom & byIndex;
        if (num1 == (int) this.MyCompiler.Includes[(object) "ITR_PAB_BAUD_2400"])
          return 2400;
        if (num1 == (int) this.MyCompiler.Includes[(object) "ITR_PAB_BAUD_9600"])
          return 9600;
        if (num1 == (int) this.MyCompiler.Includes[(object) "ITR_PAB_BAUD_38400"])
          return 38400;
        if (num1 == (int) this.MyCompiler.Includes[(object) "ITR_PAB_BAUD_300"])
          return 300;
      }
      catch
      {
      }
      return 2400;
    }

    internal void SetBaudrate(int Baudrate)
    {
      Parameter allParameter = (Parameter) this.AllParameters[(object) "DefaultFunction.Itr_Prozessabbild"];
      try
      {
        int index1 = this.MyCompiler.Includes.IndexOfKey((object) "ITR_PAB_BAUD_MASK");
        if (index1 < 0)
        {
          int index2 = this.MyCompiler.Includes.IndexOfKey((object) "RUI_PAB_2400BAUD");
          if (index2 >= 0)
          {
            long num = (long) (1 << ((int) this.MyCompiler.Includes.GetByIndex(index2) >> 3));
            if (Baudrate == 2400)
            {
              allParameter.ValueEprom |= num;
              return;
            }
            allParameter.ValueEprom &= ~num;
            return;
          }
        }
        else
        {
          long byIndex = (long) (int) this.MyCompiler.Includes.GetByIndex(index1);
          allParameter.ValueEprom &= ~byIndex;
          switch (Baudrate)
          {
            case 300:
              allParameter.ValueEprom = (long) ((int) allParameter.ValueEprom | (int) this.MyCompiler.Includes[(object) "ITR_PAB_BAUD_300"]);
              return;
            case 2400:
              allParameter.ValueEprom = (long) ((int) allParameter.ValueEprom | (int) this.MyCompiler.Includes[(object) "ITR_PAB_BAUD_2400"]);
              return;
            case 9600:
              allParameter.ValueEprom = (long) ((int) allParameter.ValueEprom | (int) this.MyCompiler.Includes[(object) "ITR_PAB_BAUD_9600"]);
              return;
            case 38400:
              allParameter.ValueEprom = (long) ((int) allParameter.ValueEprom | (int) this.MyCompiler.Includes[(object) "ITR_PAB_BAUD_38400"]);
              return;
          }
        }
      }
      catch
      {
      }
      throw new ArgumentException("Data to set baudrate not found");
    }

    internal string[] GetBaudrateList()
    {
      Parameter allParameter = (Parameter) this.AllParameters[(object) "DefaultFunction.Itr_Prozessabbild"];
      string[] baudrateList;
      if (this.MyCompiler.Includes.IndexOfKey((object) "ITR_PAB_BAUD_MASK") < 0)
        baudrateList = new string[2]{ "2400", "4800" };
      else
        baudrateList = new string[4]
        {
          "300",
          "2400",
          "9600",
          "38400"
        };
      return baudrateList;
    }

    internal char GetEEPromWriteProtectionChar(byte[] LinkByteList, int Address)
    {
      if (this.EpromWriteEnable == null && !this.GenerateWriteEnableLists(true))
        this.EpromWriteEnable = (bool[]) null;
      if (this.EpromWriteEnable == null)
        return '?';
      if (LinkByteList == null || Address < 0)
        return '*';
      for (ushort index = (ushort) Address; (int) index < Address + LinkByteList.Length; ++index)
      {
        if (!this.EpromWriteEnable[(int) index])
          return '!';
      }
      return ' ';
    }

    internal char GetRamWriteProtectionChar(int Size, int Address)
    {
      if (this.RamWriteEnable == null && !this.GenerateWriteEnableLists(true))
        this.RamWriteEnable = (bool[]) null;
      if (this.RamWriteEnable == null)
        return '?';
      if (Size == 0 || Address < 0)
        return '*';
      for (ushort index = (ushort) Address; (int) index < Address + Size; ++index)
      {
        if (!this.RamWriteEnable[(int) index])
          return '!';
      }
      return ' ';
    }

    internal SortedList<MeterDBAccess.ValueTypes, string> GetActualValues()
    {
      if (this.RamCacheSize == 0)
      {
        int num1 = 0;
        this.RamCacheAddress = 16777215;
        for (int index1 = 0; index1 < Meter.ActualVariablesList.Length; ++index1)
        {
          int index2 = this.AllParameters.IndexOfKey((object) Meter.ActualVariablesList[index1]);
          if (index2 > 0)
          {
            Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index2);
            int addressCpu = byIndex.AddressCPU;
            int num2 = addressCpu + byIndex.Size - 1;
            if (addressCpu < this.RamCacheAddress)
              this.RamCacheAddress = addressCpu;
            if (num2 > num1)
              num1 = num2;
          }
        }
        this.RamCacheSize = num1 - this.RamCacheAddress + 1;
      }
      if (this.MyCommunication.CacheParameterValues(this.RamCacheAddress, this.RamCacheSize))
      {
        SortedList<MeterDBAccess.ValueTypes, string> actualValues = new SortedList<MeterDBAccess.ValueTypes, string>();
        Decimal num3 = (Decimal) Math.Pow(10.0, (double) MeterMath.EnergyUnits[this.MyMath.MyBaseSettings.EnergyUnitIndex].AfterPointDigits);
        Decimal ScaleFactor1 = (Decimal) Math.Pow(2.0, (double) this.MyMath.MyBaseSettings.Energy_SumExpo) * num3;
        string str1 = " " + MeterMath.GetUnitText(MeterMath.EnergyUnits[this.MyMath.MyBaseSettings.EnergyUnitIndex].EnergieUnitString);
        string str2 = " " + MeterMath.GetUnitText(MeterMath.EnergyUnits[this.MyMath.MyBaseSettings.EnergyUnitIndex].PowerUnitString);
        Decimal num4 = (Decimal) Math.Pow(10.0, (double) MeterMath.VolumeUnits[this.MyMath.MyBaseSettings.VolumeUnitIndex].AfterPointDigits);
        Decimal ScaleFactor2 = (Decimal) Math.Pow(2.0, (double) this.MyMath.MyBaseSettings.Vol_SumExpo) * num4;
        string str3 = " " + MeterMath.GetUnitText(MeterMath.VolumeUnits[this.MyMath.MyBaseSettings.VolumeUnitIndex].VolumeUnitString);
        string str4 = " " + MeterMath.GetUnitText(MeterMath.VolumeUnits[this.MyMath.MyBaseSettings.VolumeUnitIndex].FlowUnitString);
        int index3 = this.AllParameters.IndexOfKey((object) "DefaultFunction.Waerme_EnergSum");
        if (index3 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index3);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str5 = new OverrideParameter(OverrideID.EnergyActualValue, (ulong) byIndex.ValueCPU, ScaleFactor1).GetStringValueWin() + str1;
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterEnergy, str5);
          }
          else
            goto label_55;
        }
        int index4 = this.AllParameters.IndexOfKey((object) "DefaultFunction.Kaelte_EnergSum");
        if (index4 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index4);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str6 = new OverrideParameter(OverrideID.CEnergyActualValue, (ulong) byIndex.ValueCPU, ScaleFactor1).GetStringValueWin() + str1;
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterNegativeEnergy, str6);
          }
          else
            goto label_55;
        }
        int index5 = this.AllParameters.IndexOfKey((object) "DefaultFunction.Vol_VolSum");
        if (index5 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index5);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str7 = new OverrideParameter(OverrideID.VolumeActualValue, (ulong) byIndex.ValueCPU, ScaleFactor2).GetStringValueWin() + str3;
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterVolume, str7);
          }
          else
            goto label_55;
        }
        int index6 = this.AllParameters.IndexOfKey((object) "DefaultFunction.TAR_EnergySumTar0");
        if (index6 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index6);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str8 = new OverrideParameter(OverrideID.TarifEnergy0, (ulong) byIndex.ValueCPU, ScaleFactor1).GetStringValueWin() + str1;
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterTarifEnergy0, str8);
          }
          else
            goto label_55;
        }
        int index7 = this.AllParameters.IndexOfKey((object) "DefaultFunction.TAR_EnergySumTar1");
        if (index7 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index7);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str9 = new OverrideParameter(OverrideID.TarifEnergy1, (ulong) byIndex.ValueCPU, ScaleFactor1).GetStringValueWin() + str1;
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterTarifEnergy1, str9);
          }
          else
            goto label_55;
        }
        Decimal ScaleFactor3 = (Decimal) Math.Pow(10.0, (double) MeterMath.InputUnits[this.MyMath.MyBaseSettings.Input1UnitIndex].AfterPointDigits);
        string str10 = " " + MeterMath.GetUnitText(MeterMath.InputUnits[this.MyMath.MyBaseSettings.Input1UnitIndex].InputUnitString);
        int index8 = this.AllParameters.IndexOfKey((object) "DefaultFunction.In1Display");
        if (index8 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index8);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str11 = new OverrideParameter(OverrideID.Input1ActualValue, (ulong) byIndex.ValueCPU, ScaleFactor3).GetStringValueWin() + str10;
            actualValues.Add(MeterDBAccess.ValueTypes.VolumeCounter1Input, str11);
          }
          else
            goto label_55;
        }
        Decimal ScaleFactor4 = (Decimal) Math.Pow(10.0, (double) MeterMath.InputUnits[this.MyMath.MyBaseSettings.Input2UnitIndex].AfterPointDigits);
        string str12 = " " + MeterMath.GetUnitText(MeterMath.InputUnits[this.MyMath.MyBaseSettings.Input2UnitIndex].InputUnitString);
        int index9 = this.AllParameters.IndexOfKey((object) "DefaultFunction.In2Display");
        if (index9 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index9);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str13 = new OverrideParameter(OverrideID.Input2ActualValue, (ulong) byIndex.ValueCPU, ScaleFactor4).GetStringValueWin() + str12;
            actualValues.Add(MeterDBAccess.ValueTypes.VolumeCounter2Input, str13);
          }
          else
            goto label_55;
        }
        int index10 = this.AllParameters.IndexOfKey((object) "vorlauftemperatur");
        if (index10 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index10);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str14 = ((double) (short) byIndex.ValueCPU / 100.0).ToString("0.00") + " Â°C";
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterUpperTemperature, str14);
          }
          else
            goto label_55;
        }
        int index11 = this.AllParameters.IndexOfKey((object) "ruecklauftemperatur");
        if (index11 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index11);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str15 = ((double) (short) byIndex.ValueCPU / 100.0).ToString("0.00") + " Â°C";
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterLowerTemperature, str15);
          }
          else
            goto label_55;
        }
        int index12 = this.AllParameters.IndexOfKey((object) "delta_t");
        if (index12 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index12);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str16 = ((double) (short) byIndex.ValueCPU / 100.0).ToString("0.00") + " Â°C";
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterTemperatureDifference, str16);
          }
          else
            goto label_55;
        }
        int index13 = this.AllParameters.IndexOfKey((object) "Vol_Flow");
        if (index13 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index13);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str17 = byIndex.ValueCPU != 0L ? ((Decimal) byIndex.ValueCPU / num4).ToString() + str4 : "0" + str4;
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterFlow, str17);
          }
          else
            goto label_55;
        }
        int index14 = this.AllParameters.IndexOfKey((object) "Leistung");
        if (index14 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index14);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str18 = byIndex.ValueCPU != 0L ? ((Decimal) byIndex.ValueCPU / num3).ToString() + str2 : "0" + str4;
            actualValues.Add(MeterDBAccess.ValueTypes.HeatMeterPower, str18);
          }
          else
            goto label_55;
        }
        int index15 = this.AllParameters.IndexOfKey((object) "DefaultFunction.Sta_Secounds");
        if (index15 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index15);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str19 = ZR_Calendar.Cal_GetDateTime((uint) byIndex.ValueCPU).ToString("dd.MM.yyyy_HH:mm:ss");
            actualValues.Add(MeterDBAccess.ValueTypes.DeviceDateTime, str19);
          }
          else
            goto label_55;
        }
        int index16 = this.AllParameters.IndexOfKey((object) "Itr_NextIntervalTime");
        if (index16 > 0)
        {
          Parameter byIndex = (Parameter) this.AllParameters.GetByIndex(index16);
          if (this.MyCommunication.ReadParameterValue(byIndex, MemoryLocation.RAM))
          {
            string str20 = ZR_Calendar.Cal_GetDateTime((uint) byIndex.ValueCPU).ToString("dd.MM.yyyy_HH:mm:ss");
            actualValues.Add(MeterDBAccess.ValueTypes.DeviceNextEventDateTime, str20);
          }
          else
            goto label_55;
        }
        this.MyCommunication.CacheParameterValues(0, 0);
        return actualValues;
      }
label_55:
      this.MyCommunication.CacheParameterValues(0, 0);
      return (SortedList<MeterDBAccess.ValueTypes, string>) null;
    }

    internal GlobalDeviceId GetGlobalDeviceIdentification()
    {
      GlobalDeviceId deviceIdentification = new GlobalDeviceId();
      int index1 = this.MyFunctionTable.OverridesList.IndexOfKey((object) OverrideID.SerialNumber);
      if (index1 >= 0)
      {
        ConfigurationParameter byIndex = (ConfigurationParameter) this.MyFunctionTable.OverridesList.GetByIndex(index1);
        deviceIdentification.Serialnumber = byIndex.GetStringValueWin();
      }
      if (this.MyFunctionTable.OverridesList.IndexOfKey((object) OverrideID.Input1PulsValue) >= 0)
      {
        deviceIdentification.SubDevices = new List<GlobalDeviceId>();
        GlobalDeviceId globalDeviceId = new GlobalDeviceId();
        deviceIdentification.SubDevices.Add(globalDeviceId);
        int index2 = this.MyFunctionTable.OverridesList.IndexOfKey((object) OverrideID.Input1IdNumber);
        if (index2 >= 0)
        {
          ConfigurationParameter byIndex = (ConfigurationParameter) this.MyFunctionTable.OverridesList.GetByIndex(index2);
          globalDeviceId.Serialnumber = byIndex.GetStringValueWin();
        }
      }
      if (this.MyFunctionTable.OverridesList.IndexOfKey((object) OverrideID.Input2PulsValue) >= 0)
      {
        GlobalDeviceId globalDeviceId = new GlobalDeviceId();
        deviceIdentification.SubDevices.Add(globalDeviceId);
        int index3 = this.MyFunctionTable.OverridesList.IndexOfKey((object) OverrideID.Input2IdNumber);
        if (index3 >= 0)
        {
          ConfigurationParameter byIndex = (ConfigurationParameter) this.MyFunctionTable.OverridesList.GetByIndex(index3);
          globalDeviceId.Serialnumber = byIndex.GetStringValueWin();
        }
      }
      return deviceIdentification;
    }

    internal SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      SortedList<OverrideID, ConfigurationParameter> configurationParameters = new SortedList<OverrideID, ConfigurationParameter>();
      for (int index1 = 0; index1 < this.MyFunctionTable.OverridesList.Count; ++index1)
      {
        ConfigurationParameter byIndex = (ConfigurationParameter) this.MyFunctionTable.OverridesList.GetByIndex(index1);
        int index2 = ConfigurationParameter.ConfigParametersByOverrideID.IndexOfKey(byIndex.ParameterID);
        if (index2 >= 0)
        {
          ConfigurationParameter.ConPaInfo conPaInfo = ConfigurationParameter.ConfigParametersByOverrideID.Values[index2];
          if (conPaInfo.SubdeviceNumber == SubDevice)
          {
            if (conPaInfo.NewOverrideId == OverrideID.Unknown)
            {
              configurationParameters.Add(byIndex.ParameterID, byIndex);
            }
            else
            {
              ConfigurationParameter configurationParameter = byIndex.CloneWithNewId(conPaInfo.NewOverrideId);
              configurationParameters.Add(configurationParameter.ParameterID, configurationParameter);
            }
          }
        }
      }
      return configurationParameters;
    }

    internal bool SetConfigurationParameter(
      SortedList<OverrideID, ConfigurationParameter> parameterList,
      int SubDevice)
    {
      return false;
    }

    internal enum MeterDataStates
    {
      New,
      Connected,
      MapComplete,
      CloneComplete,
      EpromDataReloaded,
    }
  }
}


--- MeterBasis.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MeterBasis
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public enum MeterBasis
  {
    No,
    Read,
    Work,
    Type,
    DbMeter,
  }
}


--- MeterCommunication.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MeterCommunication
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using DeviceCollector;
using System;
using System.Collections.Generic;
using System.Globalization;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class MeterCommunication
  {
    private Meter MyMeter;
    internal IDeviceCollector MyBus;
    private bool SimulatedCommunication = false;
    private SortedList<int, byte[]> CachedRamData;
    private ByteField RamParameterCacheData = (ByteField) null;
    private int RamParameterCacheAddress;

    public MeterCommunication(Meter MyMeterIn)
    {
      this.MyMeter = MyMeterIn;
      this.MyBus = this.MyMeter.MyHandler.SerBus;
      this.MyMeter.MyMath.GetCpuData += new ZelsiusMath.CpuRead(this.GetDataToInterpreter);
    }

    public MeterCommunication(Meter MyMeterIn, bool SimulatedCommunication)
    {
      this.SimulatedCommunication = SimulatedCommunication;
      this.MyMeter = MyMeterIn;
      this.MyBus = this.MyMeter.MyHandler.SerBus;
      this.MyMeter.MyMath.GetCpuData += new ZelsiusMath.CpuRead(this.GetDataToInterpreter);
    }

    private bool GetDataToInterpreter(
      string NameOrAddress,
      int NumberOfBytes,
      MemoryLocation Location,
      out byte[] Data)
    {
      Data = new byte[NumberOfBytes];
      if (!this.MyMeter.MyHandler.actualValueReadingState && !this.SimulatedCommunication)
        return true;
      try
      {
        Parameter parameter = (Parameter) null;
        int num;
        if (NameOrAddress.StartsWith("0x"))
        {
          num = int.Parse(NameOrAddress.Substring(2), NumberStyles.HexNumber);
          if (this.SimulatedCommunication)
          {
            if (Location == MemoryLocation.RAM)
            {
              int index = this.MyMeter.AllRamParametersByAddress.IndexOfKey((object) num);
              if (index >= 0)
                parameter = (Parameter) this.MyMeter.AllRamParametersByAddress.GetByIndex(index);
            }
            else
            {
              int index = this.MyMeter.AllEpromParametersByAddress.IndexOfKey((object) num);
              if (index >= 0)
                parameter = (Parameter) this.MyMeter.AllEpromParametersByAddress.GetByIndex(index);
            }
            if (parameter != null && parameter.Size != NumberOfBytes)
              parameter = (Parameter) null;
          }
        }
        else
        {
          parameter = (Parameter) this.MyMeter.AllParameters[(object) NameOrAddress] ?? (Parameter) this.MyMeter.AllParameters[(object) ("DefaultFunction." + NameOrAddress)];
          if (parameter == null)
          {
            if (this.SimulatedCommunication)
              return true;
            goto label_50;
          }
          else
            num = Location != MemoryLocation.EEPROM ? parameter.AddressCPU : parameter.Address;
        }
        if (this.SimulatedCommunication)
        {
          if (parameter == null)
            return true;
          parameter.UpdateByteList();
          if (parameter.LinkByteList == null)
            return true;
          for (int index = 0; index < NumberOfBytes; ++index)
            Data[index] = parameter.LinkByteList[index];
          return true;
        }
        if (num >= 0 && num <= (int) ushort.MaxValue)
        {
          if (Location == MemoryLocation.EEPROM)
          {
            if (num >= this.MyMeter.MyLoggerStore.BlockStartAddress)
            {
              ByteField MemoryData;
              if (this.MyBus.ReadMemory(MemoryLocation.EEPROM, num, NumberOfBytes, out MemoryData))
              {
                for (int index = 0; index < NumberOfBytes; ++index)
                  Data[index] = MemoryData.Data[index];
              }
              else
                goto label_50;
            }
            else
            {
              for (int index = 0; index < NumberOfBytes; ++index)
                Data[index] = this.MyMeter.Eprom[num + index];
            }
          }
          else
          {
            if (this.CachedRamData == null)
            {
              this.CachedRamData = new SortedList<int, byte[]>();
            }
            else
            {
              int index = this.CachedRamData.IndexOfKey(num);
              if (index >= 0)
              {
                Data = this.CachedRamData.Values[index];
                if (Data.Length == NumberOfBytes)
                  return true;
                this.CachedRamData.RemoveAt(index);
              }
            }
            ByteField MemoryData;
            if (this.MyBus.ReadMemory(MemoryLocation.RAM, num, NumberOfBytes, out MemoryData))
            {
              for (int index = 0; index < NumberOfBytes; ++index)
                Data[index] = MemoryData.Data[index];
              this.CachedRamData.Add(num, MemoryData.Data);
            }
            else
              goto label_50;
          }
        }
        else
          goto label_50;
      }
      catch
      {
        goto label_50;
      }
      return true;
label_50:
      this.MyMeter.MyHandler.actualValueReadingState = false;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Illegal interpreter data");
      return false;
    }

    internal bool ReadVersion(ZR_MeterIdent TheIdent)
    {
      return this.MyBus.ReadVersion(out TheIdent.MBus_Manufacturer, out TheIdent.MBus_Medium, out TheIdent.MBus_MeterType, out TheIdent.lFirmwareVersion, out TheIdent.MBus_SerialNumber);
    }

    internal bool CacheParameterValues(int StartAdress, int Size)
    {
      this.RamParameterCacheAddress = StartAdress;
      if (Size == 0)
        this.RamParameterCacheData = (ByteField) null;
      else if (!this.MyBus.ReadMemory(MemoryLocation.RAM, StartAdress, Size, out this.RamParameterCacheData))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Read parameter error");
        return false;
      }
      return true;
    }

    internal bool ReadParameterValue(Parameter TheParameter, MemoryLocation TheLocation)
    {
      ByteField MemoryData = new ByteField(TheParameter.Size);
      long num1 = 0;
      int StartAddress;
      if (TheLocation == MemoryLocation.RAM)
      {
        StartAddress = TheParameter.AddressCPU;
        if (this.RamParameterCacheData != null && StartAddress >= this.RamParameterCacheAddress && StartAddress <= this.RamParameterCacheAddress + this.RamParameterCacheData.Data.Length - TheParameter.Size)
        {
          int num2 = StartAddress - this.RamParameterCacheAddress;
          for (int index = 0; index < TheParameter.Size; ++index)
            num1 |= (long) this.RamParameterCacheData.Data[num2 + index] << index * 8;
          TheParameter.ValueCPU = num1;
          TheParameter.CPU_ValueIsInitialised = true;
          return true;
        }
      }
      else
        StartAddress = TheParameter.Address;
      if (!this.MyBus.ReadMemory(TheLocation, StartAddress, TheParameter.Size, out MemoryData))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Read parameter error");
        return false;
      }
      for (int index = 0; index < TheParameter.Size; ++index)
        num1 |= (long) MemoryData.Data[index] << index * 8;
      if (TheLocation == MemoryLocation.RAM)
      {
        TheParameter.ValueCPU = num1;
        TheParameter.CPU_ValueIsInitialised = true;
      }
      else
      {
        TheParameter.ValueEprom = num1;
        TheParameter.EpromValueIsInitialised = true;
        TheParameter.LinkByteList = MemoryData.Data;
      }
      return true;
    }

    internal bool WriteParameterValue(Parameter TheParameter, MemoryLocation TheLocation)
    {
      ByteField data = new ByteField(TheParameter.Size);
      int StartAddress;
      long num;
      if (TheLocation == MemoryLocation.RAM)
      {
        StartAddress = TheParameter.AddressCPU;
        num = TheParameter.ValueCPU;
      }
      else
      {
        StartAddress = TheParameter.Address;
        num = TheParameter.ValueEprom;
      }
      for (int index = 0; index < TheParameter.Size; ++index)
      {
        data.Add((byte) num);
        num >>= 8;
      }
      if (this.MyBus.WriteMemory(TheLocation, StartAddress, data))
        return true;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Write parameter error");
      return false;
    }

    internal bool getDeviceTime(out DateTime ClockTime, out DateTime NextEventTime)
    {
      Parameter allParameter1 = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Sta_Secounds"];
      if (this.ReadParameterValue(allParameter1, MemoryLocation.RAM))
      {
        ClockTime = ZR_Calendar.Cal_GetDateTime((uint) allParameter1.ValueCPU);
        Parameter allParameter2 = (Parameter) this.MyMeter.AllParameters[(object) "Itr_NextIntervalTime"];
        if (this.ReadParameterValue(allParameter2, MemoryLocation.RAM))
        {
          NextEventTime = ZR_Calendar.Cal_GetDateTime((uint) allParameter2.ValueCPU);
          return true;
        }
      }
      ClockTime = DateTime.MinValue;
      NextEventTime = DateTime.MinValue;
      return false;
    }

    internal bool setDeviceTime(DateTime NewTime)
    {
      Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "DefaultFunction.Sta_Secounds"];
      allParameter.ValueCPU = (long) ZR_Calendar.Cal_GetMeterTime(NewTime);
      allParameter.CPU_ValueIsInitialised = true;
      return this.WriteParameterValue(allParameter, MemoryLocation.RAM);
    }

    internal bool VerifyCheckSum(bool IncludeBackupChecksum)
    {
      Parameter allParameter1 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_StaticChecksum"];
      Parameter allParameter2 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_HeaderChecksum"];
      Parameter allParameter3 = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_BackupChecksum"];
      int num = !IncludeBackupChecksum ? allParameter2.Address + allParameter2.Size - allParameter1.Address : allParameter3.Address + allParameter3.Size - allParameter1.Address;
      ByteField MemoryData = new ByteField(num);
      if (!this.MyBus.ReadMemory(MemoryLocation.EEPROM, allParameter1.Address, num, out MemoryData))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Verify checksum error");
        return false;
      }
      for (int index = 0; index < num; ++index)
      {
        if ((int) MemoryData.Data[index] != (int) this.MyMeter.Eprom[index + allParameter1.Address])
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Meter replaced");
          return false;
        }
      }
      return true;
    }

    internal bool VerifyMeterID()
    {
      Parameter allParameter = (Parameter) this.MyMeter.AllParameters[(object) "EEP_Header.EEP_HEADER_MeterID"];
      int size = allParameter.Size;
      ByteField MemoryData = new ByteField(size);
      if (!this.MyBus.ReadMemory(MemoryLocation.EEPROM, allParameter.Address, allParameter.Address, out MemoryData))
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Verify meter ID error");
        return false;
      }
      for (int index = 0; index < size; ++index)
      {
        if ((int) MemoryData.Data[index] != (int) this.MyMeter.Eprom[index + allParameter.Address])
        {
          ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData, "Meter replaced");
          return false;
        }
      }
      return true;
    }
  }
}


--- MeterObjectSelector.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MeterObjectSelector
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public enum MeterObjectSelector
  {
    ReadMeter,
    WorkMeter,
  }
}


--- MeterResource.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.MeterResource
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;

#nullable disable
namespace GMM_Handler
{
  public class MeterResource
  {
    public readonly string Name;
    public readonly ushort SuppliedFromFunction;
    private bool Busy;
    public ArrayList UsedFromFunctions = new ArrayList();

    public MeterResource(string TheResourceName, ushort SuppliedFrom)
    {
      this.Name = TheResourceName;
      this.SuppliedFromFunction = SuppliedFrom;
      this.Busy = false;
    }

    public MeterResource Clone() => new MeterResource(this.Name, this.SuppliedFromFunction);

    public bool AddUsing(ushort FromFunction, bool Exclusive)
    {
      if (this.Busy)
        return false;
      this.UsedFromFunctions.Add((object) FromFunction);
      if (Exclusive)
        this.Busy = true;
      return true;
    }

    public bool IsBusy() => this.Busy;

    internal static bool GetNeadedIOFunction(
      string[] SuppliedResList,
      out ulong NeadedIOFunction,
      out ulong NeadedIOFunctionMask)
    {
      NeadedIOFunction = 0UL;
      NeadedIOFunctionMask = 0UL;
      for (int index = 0; index < SuppliedResList.Length; ++index)
      {
        string suppliedRes = SuppliedResList[index];
        char[] chArray = new char[1]{ '|' };
        foreach (string str in suppliedRes.Split(chArray))
        {
          string ResString = str.Trim();
          if (ResString.Length > 0 && IoFunctionResourceCorrelation.GetNeadedIOFunction(ResString, out NeadedIOFunction, out NeadedIOFunctionMask))
            return true;
        }
      }
      return false;
    }
  }
}


--- OverrideParameter.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.OverrideParameter
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using NLog;
using System;
using System.Collections;
using System.Globalization;
using System.Text;
using System.Threading;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class OverrideParameter : ConfigurationParameter
  {
    private static Logger logger = LogManager.GetLogger(nameof (OverrideParameter));
    public static OverrideParameter.OverrideParameterTypeIdent[] OverrideParameterInfoList;
    public static OverrideParameter.BaseConfigStruct[] BaseConfigTable;
    public bool AtFunctionTabel;

    public ushort ByteSize
    {
      get => OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].ByteSize;
    }

    public bool IsStructureParameter
    {
      get => OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].IsStruct;
    }

    public MeterResources NeadedRessource
    {
      get => OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].NeadedResource;
    }

    public ulong Value
    {
      set
      {
        this.SetValueFromULong(value);
        this.TrueDivisor = 0M;
      }
      get => this.GetValueAsULong();
    }

    public OverrideParameter(OverrideParameter ParameterToCopy)
      : base((ConfigurationParameter) ParameterToCopy)
    {
      this.AtFunctionTabel = ParameterToCopy.AtFunctionTabel;
    }

    public OverrideParameter(OverrideID TheID)
      : base(TheID)
    {
      this.AtFunctionTabel = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].AtFunctionTable;
      this.HasWritePermission = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].HasWritePermission;
      this.SetValueFromStringDb(OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].DefaultValue);
    }

    public OverrideParameter(OverrideID TheID, ulong LongValue)
      : base(TheID)
    {
      this.Value = LongValue;
      this.AtFunctionTabel = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].AtFunctionTable;
      this.HasWritePermission = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].HasWritePermission;
    }

    public OverrideParameter(OverrideID TheID, DateTime dateTimeValue)
      : base(TheID)
    {
      this.Value = (ulong) dateTimeValue.Year;
      this.AtFunctionTabel = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].AtFunctionTable;
      this.HasWritePermission = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].HasWritePermission;
    }

    public OverrideParameter(OverrideID TheID, ulong LongValue, Decimal ScaleFactor)
      : base(TheID)
    {
      this.TrueDivisor = ScaleFactor;
      this.Value = LongValue;
      this.AtFunctionTabel = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].AtFunctionTable;
      this.HasWritePermission = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].HasWritePermission;
    }

    public OverrideParameter(OverrideID TheID, string StringValue, bool DbString)
      : base(TheID, StringValue, DbString)
    {
      this.AtFunctionTabel = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].AtFunctionTable;
      this.HasWritePermission = OverrideParameter.OverrideParameterInfoList[(int) this.ParameterID].HasWritePermission;
    }

    public OverrideParameter Clone() => new OverrideParameter(this);

    public static SortedList GetNewOverridesList()
    {
      SortedList newOverridesList = new SortedList();
      OverrideParameter overrideParameter1 = new OverrideParameter(OverrideID.BaseConfig);
      newOverridesList.Add((object) overrideParameter1.ParameterID, (object) overrideParameter1);
      OverrideParameter overrideParameter2 = new OverrideParameter(OverrideID.EnergyResolution);
      newOverridesList.Add((object) overrideParameter2.ParameterID, (object) overrideParameter2);
      OverrideParameter overrideParameter3 = new OverrideParameter(OverrideID.VolumeResolution);
      newOverridesList.Add((object) overrideParameter3.ParameterID, (object) overrideParameter3);
      OverrideParameter overrideParameter4 = new OverrideParameter(OverrideID.Input1Unit);
      newOverridesList.Add((object) overrideParameter4.ParameterID, (object) overrideParameter4);
      OverrideParameter overrideParameter5 = new OverrideParameter(OverrideID.Input2Unit);
      newOverridesList.Add((object) overrideParameter5.ParameterID, (object) overrideParameter5);
      return newOverridesList;
    }

    public static SortedList GetOverridesListClone(SortedList OverridesList)
    {
      SortedList overridesListClone = new SortedList();
      for (int index = 0; index < OverridesList.Count; ++index)
      {
        OverrideParameter overrideParameter = ((OverrideParameter) OverridesList.GetByIndex(index)).Clone();
        overridesListClone.Add((object) overrideParameter.ParameterID, (object) overrideParameter);
      }
      return overridesListClone;
    }

    public static void ChangeOrAddOverrideParameter(
      SortedList TheList,
      OverrideParameter TheOverrideParameter)
    {
      int index = TheList.IndexOfKey((object) TheOverrideParameter.ParameterID);
      if (index < 0)
        TheList.Add((object) TheOverrideParameter.ParameterID, (object) TheOverrideParameter);
      else
        TheList.SetByIndex(index, (object) TheOverrideParameter);
    }

    public static void DeleteOverrideParameter(SortedList TheList, OverrideID TheId)
    {
      int index = TheList.IndexOfKey((object) TheId);
      if (index < 0)
        return;
      TheList.RemoveAt(index);
    }

    public bool LoadDataFromByteArray(byte[] TheArray, ref int Offset)
    {
      if (this.ByteSize < (ushort) 1)
        return false;
      ulong num = 0;
      for (int index = 0; index < (int) this.ByteSize; ++index)
        num += (ulong) TheArray[Offset++] << index * 8;
      this.Value = num;
      this.AtFunctionTabel = true;
      return true;
    }

    public ulong GetValueAsULong()
    {
      ulong valueAsUlong;
      switch (this.ParameterID)
      {
        case OverrideID.WarmerPipe:
        case OverrideID.ChangeOver:
          valueAsUlong = !(bool) this.ParameterValue ? 0UL : 1UL;
          break;
        case OverrideID.CustomID:
        case OverrideID.MBusAddress:
        case OverrideID.MeterID:
        case OverrideID.BaseTypeID:
        case OverrideID.FactoryTypeID:
        case OverrideID.Baudrate:
        case OverrideID.CycleTimeFast:
        case OverrideID.CycleTimeStandard:
          valueAsUlong = (ulong) this.ParameterValue;
          break;
        case OverrideID.ReadingDate:
          valueAsUlong = (ulong) ZR_Calendar.Cal_GetMeterTime((DateTime) this.ParameterValue);
          break;
        case OverrideID.MBusIdentificationNo:
        case OverrideID.SerialNumber:
        case OverrideID.Input1IdNumber:
        case OverrideID.Input2IdNumber:
          valueAsUlong = ulong.Parse((string) this.ParameterValue, NumberStyles.HexNumber);
          break;
        case OverrideID.EnergyResolution:
          valueAsUlong = (ulong) MeterMath.GetEnergyUnitOverwriteID((string) this.ParameterValue);
          break;
        case OverrideID.VolumeResolution:
          valueAsUlong = (ulong) MeterMath.GetVolumeUnitIndex((string) this.ParameterValue);
          break;
        case OverrideID.VolumePulsValue:
        case OverrideID.Input1PulsValue:
        case OverrideID.Input2PulsValue:
          int BCDValue;
          if (!OverrideParameter.DoubleToPackedBCD((double) this.ParameterValue, out BCDValue))
            throw new ArgumentException("Illegal ulong puls value");
          valueAsUlong = (ulong) BCDValue;
          break;
        case OverrideID.Input1Unit:
        case OverrideID.Input2Unit:
          valueAsUlong = (ulong) MeterMath.GetInputUnitIndex((string) this.ParameterValue);
          break;
        case OverrideID.Output1Function:
        case OverrideID.Output2Function:
          valueAsUlong = (ulong) (int) Enum.Parse(typeof (ConfigurationParameter.OutputFunctions), (string) this.ParameterValue, true);
          break;
        case OverrideID.BaseConfig:
          valueAsUlong = (ulong) (int) this.ParameterValue;
          break;
        case OverrideID.EnergyActualValue:
        case OverrideID.EnergyDueDateValue:
        case OverrideID.EnergyDueDateLastValue:
        case OverrideID.VolumeActualValue:
        case OverrideID.VolumeDueDateValue:
        case OverrideID.VolumeDueDateLastValue:
        case OverrideID.Input1ActualValue:
        case OverrideID.Input1DueDateValue:
        case OverrideID.Input1DueDateLastValue:
        case OverrideID.Input2ActualValue:
        case OverrideID.Input2DueDateValue:
        case OverrideID.Input2DueDateLastValue:
        case OverrideID.CEnergyActualValue:
        case OverrideID.CEnergyDueDateValue:
        case OverrideID.CEnergyDueDateLastValue:
        case OverrideID.TarifEnergy0:
        case OverrideID.TarifEnergy1:
          valueAsUlong = this.GetULongParameterValue();
          break;
        case OverrideID.ModuleType:
          ulong num1 = 0;
          string parameterValue1 = (string) this.ParameterValue;
          char[] chArray1 = new char[1]{ ';' };
          foreach (string str1 in parameterValue1.Split(chArray1))
          {
            string str2 = str1.Trim();
            if (str2.Length != 0)
              num1 += (ulong) (ModuleTypeValues) Enum.Parse(typeof (ModuleTypeValues), str2, true);
          }
          valueAsUlong = num1;
          break;
        case OverrideID.IO_Functions:
          ulong num2 = 0;
          string parameterValue2 = (string) this.ParameterValue;
          char[] chArray2 = new char[1]{ ';' };
          foreach (string str in parameterValue2.Split(chArray2))
            num2 += (ulong) (InOutFunctions) Enum.Parse(typeof (InOutFunctions), str, true);
          valueAsUlong = num2;
          break;
        case OverrideID.Input1Type:
        case OverrideID.Input2Type:
          valueAsUlong = (ulong) this.ParameterValue;
          break;
        case OverrideID.FixedTempSetup:
          valueAsUlong = (ulong) (FixedTempSetup) this.ParameterValue;
          break;
        case OverrideID.FixedTempValue:
        case OverrideID.MinTempDiffPlusTemp:
        case OverrideID.MinTempDiffMinusTemp:
        case OverrideID.TarifRefTemp:
        case OverrideID.HeatThresholdTemp:
          valueAsUlong = (ulong) (long) ((Decimal) this.ParameterValue * 100M);
          break;
        case OverrideID.MimTempDiffSetup:
          valueAsUlong = (ulong) (MinimalTempDiffSetup) this.ParameterValue;
          break;
        case OverrideID.TarifFunction:
          valueAsUlong = (ulong) (TarifSetup) this.ParameterValue;
          break;
        case OverrideID.EndOfBattery:
          valueAsUlong = (ulong) ((DateTime) this.ParameterValue).Year;
          break;
        case OverrideID.EndOfCalibration:
          valueAsUlong = (ulong) (int) this.ParameterValue;
          break;
        case OverrideID.CycleTimeDynamic:
          valueAsUlong = (ulong) (CycleTimeChangeMethode) this.ParameterValue;
          break;
        case OverrideID.Medium:
          valueAsUlong = (ulong) (MBusDeviceType) this.ParameterValue;
          break;
        default:
          throw new ArgumentException("Parameter without ulong type");
      }
      return valueAsUlong;
    }

    public void SetValueFromULong(ulong ULongValue)
    {
      string message1;
      try
      {
        OverrideParameter.logger.Trace("SetValueFromUlong: " + ULongValue.ToString() + " ParameterID: " + this.ParameterID.ToString());
        switch (this.ParameterID)
        {
          case OverrideID.WarmerPipe:
          case OverrideID.ChangeOver:
            if (ULongValue == 0UL)
            {
              this.ParameterValue = (object) false;
              return;
            }
            this.ParameterValue = (object) true;
            return;
          case OverrideID.CustomID:
          case OverrideID.MBusAddress:
          case OverrideID.MeterID:
          case OverrideID.BaseTypeID:
          case OverrideID.FactoryTypeID:
          case OverrideID.Baudrate:
          case OverrideID.CycleTimeFast:
          case OverrideID.CycleTimeStandard:
            this.ParameterValue = (object) ULongValue;
            return;
          case OverrideID.ReadingDate:
            this.ParameterValue = (object) ZR_Calendar.Cal_GetDateTime((uint) ULongValue);
            return;
          case OverrideID.MBusIdentificationNo:
          case OverrideID.SerialNumber:
          case OverrideID.Input1IdNumber:
          case OverrideID.Input2IdNumber:
            string StringValue;
            if (!OverrideParameter.PackedBCD_ToString((int) ULongValue, out StringValue))
              throw new ArgumentException("Illegal override string value");
            this.ParameterValue = (object) StringValue;
            return;
          case OverrideID.EnergyResolution:
            this.ParameterValue = (object) MeterMath.GetEnergyUnitOfID((int) ULongValue);
            return;
          case OverrideID.VolumeResolution:
            this.ParameterValue = (object) MeterMath.GetVolumeUnitOfID((int) ULongValue);
            return;
          case OverrideID.VolumePulsValue:
          case OverrideID.Input1PulsValue:
          case OverrideID.Input2PulsValue:
            double num;
            if (!OverrideParameter.PackedBCD_ToDouble((int) ULongValue, out num))
              throw new ArgumentException("Illegal ulong puls value");
            this.ParameterValue = (object) num;
            return;
          case OverrideID.Input1Unit:
          case OverrideID.Input2Unit:
            this.ParameterValue = (object) MeterMath.GetInputUnitOfID((int) ULongValue);
            return;
          case OverrideID.Output1Function:
          case OverrideID.Output2Function:
            this.ParameterValue = (object) (ConfigurationParameter.OutputFunctions) ULongValue;
            return;
          case OverrideID.BaseConfig:
            this.ParameterValue = (object) (ConfigurationParameter.BaseConfigSettings) ULongValue;
            return;
          case OverrideID.EnergyActualValue:
          case OverrideID.EnergyDueDateValue:
          case OverrideID.EnergyDueDateLastValue:
          case OverrideID.VolumeActualValue:
          case OverrideID.VolumeDueDateValue:
          case OverrideID.VolumeDueDateLastValue:
          case OverrideID.Input1ActualValue:
          case OverrideID.Input1DueDateValue:
          case OverrideID.Input1DueDateLastValue:
          case OverrideID.Input2ActualValue:
          case OverrideID.Input2DueDateValue:
          case OverrideID.Input2DueDateLastValue:
          case OverrideID.CEnergyActualValue:
          case OverrideID.CEnergyDueDateValue:
          case OverrideID.CEnergyDueDateLastValue:
          case OverrideID.TarifEnergy0:
          case OverrideID.TarifEnergy1:
            this.ParameterValue = (object) this.GetTrueDecimalValue(ULongValue, this.TrueDivisor);
            return;
          case OverrideID.ModuleType:
            string empty1 = string.Empty;
            string empty2 = string.Empty;
            string str1 = ((ModuleTypeValues) ((int) ULongValue & 48)).ToString();
            string str2 = str1;
            ModuleTypeValues moduleTypeValues = ModuleTypeValues.NoValue;
            string str3 = moduleTypeValues.ToString();
            if (str2 != str3)
              empty1 += str1;
            moduleTypeValues = (ModuleTypeValues) ((int) ULongValue & 3);
            string str4 = moduleTypeValues.ToString();
            string str5 = str4;
            moduleTypeValues = ModuleTypeValues.NoValue;
            string str6 = moduleTypeValues.ToString();
            if (str5 != str6)
            {
              if (empty1.Length > 0)
                empty1 += ";";
              empty1 += str4;
            }
            moduleTypeValues = (ModuleTypeValues) ((int) ULongValue & 12);
            string str7 = moduleTypeValues.ToString();
            string str8 = str7;
            moduleTypeValues = ModuleTypeValues.NoValue;
            string str9 = moduleTypeValues.ToString();
            if (str8 != str9)
            {
              if (empty1.Length > 0)
                empty1 += ";";
              empty1 += str7;
            }
            this.ParameterValue = (object) empty1;
            return;
          case OverrideID.IO_Functions:
            this.ParameterValue = (object) (((InOutFunctions) ((long) ULongValue & 15L)).ToString() + ";" + ((InOutFunctions) ((long) ULongValue & 240L)).ToString());
            return;
          case OverrideID.Input1Type:
          case OverrideID.Input2Type:
            this.ParameterValue = (object) ULongValue;
            return;
          case OverrideID.FixedTempSetup:
            this.ParameterValue = (object) (FixedTempSetup) ULongValue;
            return;
          case OverrideID.FixedTempValue:
          case OverrideID.MinTempDiffPlusTemp:
          case OverrideID.MinTempDiffMinusTemp:
          case OverrideID.TarifRefTemp:
          case OverrideID.HeatThresholdTemp:
            this.ParameterValue = (object) ((Decimal) (short) ULongValue / 100M);
            return;
          case OverrideID.MimTempDiffSetup:
            this.ParameterValue = (object) (MinimalTempDiffSetup) ULongValue;
            return;
          case OverrideID.TarifFunction:
            this.ParameterValue = (object) (TarifSetup) ULongValue;
            return;
          case OverrideID.EndOfBattery:
            this.ParameterValue = (object) new DateTime((int) ULongValue, 1, 1);
            return;
          case OverrideID.EndOfCalibration:
            this.ParameterValue = (object) (int) ULongValue;
            return;
          case OverrideID.CycleTimeDynamic:
            this.ParameterValue = (object) (CycleTimeChangeMethode) ULongValue;
            return;
          case OverrideID.Medium:
            this.ParameterValue = (object) (MBusDeviceType) ULongValue;
            return;
          default:
            throw new ArgumentException("Parameter without ulong type");
        }
      }
      catch (Exception ex)
      {
        message1 = ex.Message;
      }
      string message2 = "Illegal override parameter value " + ULongValue.ToString() + " ParameterID: " + this.ParameterID.ToString();
      OverrideParameter.logger.Trace("SetValueFromULong: " + message2);
      if (message1 == null)
        throw new ArgumentException(message2);
      throw new ArgumentException(message2 + ZR_Constants.SystemNewLine + message1);
    }

    public static bool OverrideIdAtString(string TheString, OverrideID TheID)
    {
      return TheString.IndexOf(" " + ((int) TheID).ToString() + " ") >= 0;
    }

    public static void CopyOverrideParameter(
      SortedList DestinationList,
      SortedList SourceList,
      OverrideID TheID)
    {
      DestinationList.Remove((object) TheID);
      OverrideParameter source = (OverrideParameter) SourceList[(object) TheID];
      if (source == null)
        return;
      DestinationList.Add((object) TheID, (object) source);
    }

    public static void CopyIOFunctionOverrideParameter(
      SortedList DestinationList,
      SortedList SourceList,
      ulong IO_Mask)
    {
      OverrideParameter source = (OverrideParameter) SourceList[(object) OverrideID.IO_Functions];
      OverrideParameter destination = (OverrideParameter) DestinationList[(object) OverrideID.IO_Functions];
      DestinationList.Remove((object) OverrideID.IO_Functions);
      if (source == null)
        return;
      destination.Value = (ulong) ((long) destination.Value & ~(long) IO_Mask | (long) source.Value & (long) IO_Mask);
      DestinationList.Add((object) OverrideID.IO_Functions, (object) destination);
    }

    public static void ClearProtectedValues(SortedList AllOverrides)
    {
      for (int index = 0; index < OverrideParameter.OverrideParameterInfoList.Length; ++index)
      {
        OverrideParameter.OverrideParameterTypeIdent overrideParameterInfo = OverrideParameter.OverrideParameterInfoList[index];
        if (overrideParameterInfo.ValueType == OverrideParameter.ValueAccessType.Protected)
        {
          AllOverrides.Remove((object) overrideParameterInfo.OverrideTypeID);
          OverrideParameter overrideParameter = new OverrideParameter(overrideParameterInfo.OverrideTypeID);
          AllOverrides.Add((object) overrideParameter.ParameterID, (object) overrideParameter);
        }
      }
    }

    public static void ClearNotProtectedValues(SortedList AllOverrides)
    {
      for (int index = 0; index < OverrideParameter.OverrideParameterInfoList.Length; ++index)
      {
        OverrideParameter.OverrideParameterTypeIdent overrideParameterInfo = OverrideParameter.OverrideParameterInfoList[index];
        if (overrideParameterInfo.ValueType == OverrideParameter.ValueAccessType.NotProtected)
        {
          AllOverrides.Remove((object) overrideParameterInfo.OverrideTypeID);
          OverrideParameter overrideParameter = new OverrideParameter(overrideParameterInfo.OverrideTypeID);
          AllOverrides.Add((object) overrideParameter.ParameterID, (object) overrideParameter);
        }
      }
    }

    public ulong GetParameterValue(Decimal NewFactor)
    {
      if (this.TrueDivisor == 0M)
        return (ulong) ((Decimal) this.ParameterValue * NewFactor);
      return NewFactor != this.TrueDivisor ? (ulong) ((Decimal) this.ParameterValue * NewFactor) : (ulong) ((Decimal) this.ParameterValue * this.TrueDivisor);
    }

    public ulong GetULongParameterValue()
    {
      return this.TrueDivisor == 0M ? (ulong) (Decimal) this.ParameterValue : (ulong) ((Decimal) this.ParameterValue * this.TrueDivisor);
    }

    internal string GetTrueStringValue()
    {
      long parameterValue = (long) this.ParameterValue;
      Decimal trueDivisor = this.TrueDivisor;
      try
      {
        if (trueDivisor == 1M)
          return parameterValue.ToString();
        Decimal num1 = 1M / trueDivisor;
        string str = num1.ToString();
        if (str.StartsWith("0" + SystemValues.ZRDezimalSeparator))
        {
          int num2 = 2;
          while (num2 < str.Length && str[num2] == '0')
            ++num2;
          if (num2 != str.Length)
          {
            num1 = Decimal.Parse(str.Substring(0, num2) + "1");
            Decimal num3 = (Decimal) parameterValue / trueDivisor;
            for (int index = 0; index < 100; ++index)
            {
              string s = num3.ToString();
              int num4 = s.IndexOf(SystemValues.ZRDezimalSeparator);
              if (num4 >= 0)
              {
                int length = num4 + num2;
                if (length < s.Length)
                  s = s.Substring(0, length);
              }
              long num5 = (long) (Decimal.Parse(s) * trueDivisor);
              if (num5 == parameterValue)
              {
                this.ParameterValue = (object) num5;
                return s;
              }
              num3 += num1;
            }
          }
        }
      }
      catch
      {
      }
      throw new ArgumentException("True string convertion error");
    }

    internal Decimal GetTrueDecimalValue(ulong LongValue, Decimal TheDevisor)
    {
      try
      {
        if (TheDevisor == 1M)
          return (Decimal) LongValue;
        string str = (1M / TheDevisor).ToString();
        if (str.StartsWith("0" + SystemValues.ZRDezimalSeparator))
        {
          int num1 = 2;
          while (num1 < str.Length && str[num1] == '0')
            ++num1;
          if (num1 != str.Length)
          {
            Decimal num2 = Decimal.Parse(str.Substring(0, num1) + "1");
            Decimal num3 = (Decimal) LongValue / TheDevisor;
            for (int index = 0; index < 100; ++index)
            {
              string s = num3.ToString();
              int num4 = s.IndexOf(SystemValues.ZRDezimalSeparator);
              if (num4 >= 0)
              {
                int length = num4 + num1;
                if (length < s.Length)
                  s = s.Substring(0, length);
              }
              Decimal trueDecimalValue = Decimal.Parse(s);
              if ((long) (ulong) (trueDecimalValue * TheDevisor) == (long) LongValue)
              {
                this.ParameterValue = (object) trueDecimalValue;
                return trueDecimalValue;
              }
              num3 += num2;
            }
          }
        }
      }
      catch
      {
      }
      OverrideParameter.logger.Error("GetTrueDecimalVal: " + LongValue.ToString() + " Divisor: " + TheDevisor.ToString());
      throw new ArgumentException("True string convertion error " + LongValue.ToString() + " Divisor: " + TheDevisor.ToString());
    }

    internal static bool PackedBCD_ToDouble(int BCDValue, out double Value)
    {
      Value = double.NaN;
      string StringValue;
      if (!OverrideParameter.PackedBCD_ToString(BCDValue, out StringValue))
        return false;
      Value = double.Parse(StringValue);
      return true;
    }

    internal static bool PackedBCD_ToString(int BCDValue, out string StringValue)
    {
      StringValue = string.Empty;
      StringBuilder stringBuilder = new StringBuilder(20);
      bool flag = false;
      for (int index = 0; index < 8; ++index)
      {
        int num = BCDValue >> (7 - index) * 4 & 15;
        if (num < 10)
        {
          stringBuilder.Append(num.ToString());
        }
        else
        {
          if (num != 15 || flag)
            return false;
          flag = true;
          if (stringBuilder.Length == 0)
            stringBuilder.Append('0');
          stringBuilder.Append(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
        }
      }
      StringValue = stringBuilder.ToString();
      return true;
    }

    internal static bool DoubleToPackedBCD(double Value, out int BCDValue)
    {
      BCDValue = 0;
      short num1 = 0;
      Decimal d1 = (Decimal) Value;
      while (d1 >= 1M)
      {
        ++num1;
        d1 /= 10M;
      }
      Decimal num2 = Decimal.Round(d1, 7);
      for (short index = 0; index < (short) 8; ++index)
      {
        if (num1 == (short) 0)
        {
          BCDValue = (BCDValue << 4) + 15;
        }
        else
        {
          Decimal d2 = num2 * 10M;
          Decimal num3 = Math.Truncate(d2);
          num2 = d2 - num3;
          BCDValue = (BCDValue << 4) + (int) num3;
        }
        --num1;
      }
      return true;
    }

    public static OverrideParameter.BaseConfigStruct GetBaseConfigStruct(string StringValueWin)
    {
      for (int index = 0; index < OverrideParameter.BaseConfigTable.Length; ++index)
      {
        OverrideParameter.BaseConfigStruct baseConfigStruct = OverrideParameter.BaseConfigTable[index];
        if (baseConfigStruct.TheConfigID.ToString() == StringValueWin)
          return baseConfigStruct;
      }
      return (OverrideParameter.BaseConfigStruct) null;
    }

    static OverrideParameter()
    {
      OverrideParameter.OverrideParameterTypeIdent[] parameterTypeIdentArray = new OverrideParameter.OverrideParameterTypeIdent[83];
      parameterTypeIdentArray[0] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Unknown, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.NoResource, string.Empty);
      parameterTypeIdentArray[1] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.WarmerPipe, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, ConfigurationParameter.WormerPipeValues.RETURN.ToString());
      parameterTypeIdentArray[2] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.CustomID, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.NoResource, "0");
      parameterTypeIdentArray[3] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.ReadingDate, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.NoResource, "01.01");
      parameterTypeIdentArray[4] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.MBusIdentificationNo, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.NoResource, "0");
      parameterTypeIdentArray[5] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.EnergyResolution, (ushort) 1, OverrideParameter.ValueAccessType.NoValue, true, true, false, MeterResources.NoResource, "0.000MWh");
      parameterTypeIdentArray[6] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.ChangeOver, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, ConfigurationParameter.ChangeOverValues.Heating.ToString());
      parameterTypeIdentArray[7] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.VolumeResolution, (ushort) 1, OverrideParameter.ValueAccessType.NoValue, true, true, false, MeterResources.NoResource, "0.000m\u00B3");
      parameterTypeIdentArray[8] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.VolumePulsValue, (ushort) 4, OverrideParameter.ValueAccessType.NoValue, false, true, false, MeterResources.NoResource, 0.01.ToString());
      parameterTypeIdentArray[9] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input1PulsValue, (ushort) 4, OverrideParameter.ValueAccessType.NoValue, false, true, true, MeterResources.Inp1On, 0.01.ToString());
      parameterTypeIdentArray[10] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input1Unit, (ushort) 1, OverrideParameter.ValueAccessType.NoValue, true, true, true, MeterResources.Inp1On, "0.000m\u00B3");
      parameterTypeIdentArray[11] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input2PulsValue, (ushort) 4, OverrideParameter.ValueAccessType.NoValue, false, true, true, MeterResources.Inp2On, 0.01.ToString());
      parameterTypeIdentArray[12] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input2Unit, (ushort) 1, OverrideParameter.ValueAccessType.NoValue, true, true, true, MeterResources.Inp2On, "0.000m\u00B3");
      parameterTypeIdentArray[13] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Output1Function, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.Out1On, ConfigurationParameter.OutputFunctions.KEINE.ToString());
      parameterTypeIdentArray[14] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Output2Function, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.Out2On, ConfigurationParameter.OutputFunctions.KEINE.ToString());
      parameterTypeIdentArray[15] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.BaseConfig, (ushort) 1, OverrideParameter.ValueAccessType.NoValue, true, true, false, MeterResources.NoResource, ConfigurationParameter.BaseConfigSettings.HSrH.ToString());
      parameterTypeIdentArray[16] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.MBusAddress, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.NoResource, "0");
      parameterTypeIdentArray[17] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.SerialNumber, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[18] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.MeterID, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[19] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.BaseTypeID, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[20] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.EnergyActualValue, (ushort) 0, OverrideParameter.ValueAccessType.Protected, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[21] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.EnergyDueDateValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[22] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.EnergyDueDateLastValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[23] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.VolumeActualValue, (ushort) 0, OverrideParameter.ValueAccessType.Protected, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[24] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.VolumeDueDateValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[25] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.VolumeDueDateLastValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[26] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input1ActualValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, true, MeterResources.Inp1On, "0");
      parameterTypeIdentArray[27] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input1DueDateValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, true, MeterResources.Inp1On, "0");
      parameterTypeIdentArray[28] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input1DueDateLastValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, true, MeterResources.Inp1On, "0");
      parameterTypeIdentArray[29] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input2ActualValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, true, MeterResources.Inp2On, "0");
      parameterTypeIdentArray[30] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input2DueDateValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, true, MeterResources.Inp2On, "0");
      parameterTypeIdentArray[31] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input2DueDateLastValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, true, MeterResources.Inp2On, "0");
      parameterTypeIdentArray[32] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.CEnergyActualValue, (ushort) 0, OverrideParameter.ValueAccessType.Protected, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[33] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.CEnergyDueDateValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[34] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.CEnergyDueDateLastValue, (ushort) 0, OverrideParameter.ValueAccessType.NotProtected, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[35] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.FactoryTypeID, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[36] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.ModuleType, (ushort) 1, OverrideParameter.ValueAccessType.NoValue, false, true, false, MeterResources.NoResource, ModuleTypeValues.NoValue.ToString());
      InOutFunctions inOutFunctions = InOutFunctions.IO1_Off;
      string str1 = inOutFunctions.ToString();
      inOutFunctions = InOutFunctions.IO2_Off;
      string str2 = inOutFunctions.ToString();
      parameterTypeIdentArray[37] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.IO_Functions, (ushort) 1, OverrideParameter.ValueAccessType.NoValue, false, true, false, MeterResources.NoResource, str1 + ";" + str2);
      parameterTypeIdentArray[38] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input1IdNumber, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.Inp1On, "0");
      parameterTypeIdentArray[39] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input2IdNumber, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.Inp2On, "0");
      parameterTypeIdentArray[40] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input1Type, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.Inp1Type, "0");
      parameterTypeIdentArray[41] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Input2Type, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.Inp1Type, "0");
      parameterTypeIdentArray[42] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.MenuOverride, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[43] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.MBusListOverride, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[44] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.ClearNotProtectedValues, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.NoResource, "0");
      parameterTypeIdentArray[45] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.ClearProtectedValues, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[46] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Baudrate, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.NoResource, "2400");
      parameterTypeIdentArray[47] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.FixedTempSetup, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "OFF");
      parameterTypeIdentArray[48] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.FixedTempValue, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[49] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.MimTempDiffSetup, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "OFF");
      parameterTypeIdentArray[50] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.MinTempDiffPlusTemp, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "1");
      parameterTypeIdentArray[51] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.MinTempDiffMinusTemp, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "1");
      parameterTypeIdentArray[52] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.TarifFunction, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "OFF");
      parameterTypeIdentArray[53] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.TarifRefTemp, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[54] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.TarifEnergy0, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[55] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.TarifEnergy1, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[56] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.CycleTimeFast, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "10");
      parameterTypeIdentArray[57] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.CycleTimeStandard, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "30");
      parameterTypeIdentArray[58] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.HeatThresholdTemp, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "18");
      parameterTypeIdentArray[59] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.EndOfBattery, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.NoResource, "1980");
      parameterTypeIdentArray[60] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.EndOfCalibration, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, true, MeterResources.NoResource, "1980");
      parameterTypeIdentArray[61] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.CycleTimeDynamic, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "OFF");
      parameterTypeIdentArray[62] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.DeviceClock, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[63] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.HCA_Factor_Weighting, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[64] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.HCA_SensorMode, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[65] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.HCA_Scale, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[66] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.HCA_Factor_CH, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[67] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.HCA_Factor_CHR, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[68] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.HCA_ActualValue, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[69] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.RadioSendInterval, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[70] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.LastErrorDate, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[71] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.SleepMode, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[72] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.NumberOfSubDevices, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[73] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.DeviceName, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[74] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.ErrorDate, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[75] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Medium, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[76] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.FirmwareVersion, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[77] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.DiagnosticString, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[78] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.DeviceHasError, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[79] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.Protected, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[80] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.DeviceUnit, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[81] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.DaKonSerialNumber, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      parameterTypeIdentArray[82] = new OverrideParameter.OverrideParameterTypeIdent(OverrideID.DaKonRegisterNumber, (ushort) 0, OverrideParameter.ValueAccessType.NoValue, false, false, false, MeterResources.NoResource, "0");
      OverrideParameter.OverrideParameterInfoList = parameterTypeIdentArray;
      OverrideParameter.BaseConfigTable = new OverrideParameter.BaseConfigStruct[16]
      {
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.HSrL, false, false, false, true, false, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.HSrH, false, false, false, false, false, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.HdrL, false, false, false, true, true, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.HEnL, false, false, false, true, false, true),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.CSrL, false, true, false, true, false, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.CSrH, false, true, false, false, false, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.CdrL, false, true, false, true, true, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.CEnL, false, true, false, true, false, true),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.OSrL, false, false, true, true, false, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.OSrH, false, false, true, false, false, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.OdrL, false, false, true, true, true, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.OEnL, false, false, true, true, false, true),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.FSrL, true, false, false, true, false, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.FSrH, true, false, false, false, false, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.FdrL, true, false, false, true, true, false),
        new OverrideParameter.BaseConfigStruct(ConfigurationParameter.BaseConfigSettings.FEnL, true, false, false, true, false, true)
      };
    }

    public enum ValueAccessType
    {
      NoValue,
      Protected,
      NotProtected,
    }

    public struct OverrideParameterTypeIdent
    {
      public OverrideID OverrideTypeID;
      public ushort ByteSize;
      public bool IsStruct;
      public OverrideParameter.ValueAccessType ValueType;
      public bool AtFunctionTable;
      public string DefaultValue;
      public MeterResources NeadedResource;
      public bool HasWritePermission;

      internal OverrideParameterTypeIdent(
        OverrideID OverrideTypeID_In,
        ushort ByteSizeIn,
        OverrideParameter.ValueAccessType ValueTypeIn,
        bool IsStructIn,
        bool AtFunctionTableIn,
        bool HasWritePermissionIn,
        MeterResources NeadedResourceIn,
        string DefaultValueIn)
      {
        this.OverrideTypeID = OverrideTypeID_In;
        this.ByteSize = ByteSizeIn;
        this.ValueType = ValueTypeIn;
        this.IsStruct = IsStructIn;
        this.HasWritePermission = HasWritePermissionIn;
        this.AtFunctionTable = AtFunctionTableIn;
        this.NeadedResource = NeadedResourceIn;
        this.DefaultValue = DefaultValueIn;
      }
    }

    public class BaseConfigStruct
    {
      public ConfigurationParameter.BaseConfigSettings TheConfigID;
      public bool Cooling;
      public bool HeatAndCooling;
      public bool EnergyOff;
      public bool FrequenzLimitTo1Hz;
      public bool DoubleReed;
      public bool Encoder;

      public BaseConfigStruct(
        ConfigurationParameter.BaseConfigSettings TheId,
        bool Cool,
        bool HeatAndCool,
        bool EnOff,
        bool Freq1Hz,
        bool DReed,
        bool Enc)
      {
        this.TheConfigID = TheId;
        this.Cooling = Cool;
        this.HeatAndCooling = HeatAndCool;
        this.EnergyOff = EnOff;
        this.FrequenzLimitTo1Hz = Freq1Hz;
        this.DoubleReed = DReed;
        this.Encoder = Enc;
      }
    }
  }
}


--- PalettData.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.PalettData
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;

#nullable disable
namespace GMM_Handler
{
  public class PalettData
  {
    public SortedList GroupsAndFunctions = new SortedList();
    public SortedList PalettFunctions = new SortedList();
    public SortedList AvailableResources = new SortedList();
    public SortedList NonFunctionResources = new SortedList();
    public ArrayList MenuFunctions = new ArrayList();
    public ArrayList NonMenuFunctions = new ArrayList();
    public SortedList LoadedFunctions = new SortedList();
  }
}


--- Parameter.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.Parameter
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Globalization;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class Parameter : LinkObj
  {
    private static string[] ParameterGroupNames = Enum.GetNames(typeof (Parameter.ParameterGroups));
    internal string Name;
    public string FullName;
    internal string MeterResource = string.Empty;
    internal int FunctionNumber = -1;
    internal int FunctionIndex = -1;
    internal bool ExistOnCPU = false;
    internal bool ExistOnEprom = false;
    internal bool EpromValueIsInitialised = false;
    internal bool CPU_ValueIsInitialised = false;
    internal int AddressCPU = -1;
    internal LinkBlockTypes BlockMark;
    internal Parameter.ParamStorageType StoreType;
    internal bool[] GroupMember;
    internal long ValueCPU;
    internal long ValueEprom;
    internal long DefaultValue;
    internal long MinValue;
    internal long MaxValue;
    internal string Unit;
    internal Parameter.BaseParameterFormat ParameterFormat = Parameter.BaseParameterFormat.Integer;
    internal SortedList DifVifsByRes;
    internal long DifVifs;
    internal short DifVifSize = 0;
    internal bool MBusOn;
    internal bool MBusShortOn;
    internal int MBusParameterLength;
    internal string MBusNeadedResources = string.Empty;
    internal Parameter.MBusParameterConversion MBusParamConvertion = Parameter.MBusParameterConversion.None;
    internal LoggerParameterData LoggerData;
    internal int LoggerID;
    internal Parameter.MBusParameterOverrideType MBusParameterOverride;
    public string NameTranslated;
    public string ParameterInfo;
    internal int StructureNr;
    internal int StructureIndex;

    internal Parameter(string ParameterName, int ParameterSize, LinkBlockTypes Block)
    {
      this.GroupMember = new bool[Parameter.ParameterGroupNames.Length];
      this.Name = ParameterName;
      this.Size = ParameterSize;
      this.BlockMark = Block;
      if (this.BlockMark != LinkBlockTypes.RuntimeVars)
        return;
      this.ExistOnCPU = true;
    }

    internal bool LoadValueFromEprom(byte[] Eprom)
    {
      if (!this.ExistOnEprom || this.Size <= 0)
        return false;
      this.ValueEprom = 0L;
      for (int index = 0; index < this.Size; ++index)
        this.ValueEprom += (long) Eprom[this.Address + index] << index * 8;
      this.EpromValueIsInitialised = true;
      return true;
    }

    internal long GetValueFromMap(byte[] Eprom)
    {
      if (!this.ExistOnEprom || this.Size <= 0)
        throw new ArgumentException("Variable has no map size");
      long valueFromMap = 0;
      for (int index = 0; index < this.Size; ++index)
        valueFromMap += (long) Eprom[this.Address + index] << index * 8;
      return valueFromMap;
    }

    internal override void GetObjectInfo(StringBuilder InfoString, Meter TheMeter)
    {
      if (this.Address < 0)
        InfoString.Append("----");
      else
        InfoString.Append(this.Address.ToString("x04"));
      if (this.ExistOnCPU)
        InfoString.Append("=" + this.AddressCPU.ToString("x04"));
      InfoString.Append(TheMeter.GetEEPromWriteProtectionChar(this.LinkByteList, this.Address));
      if (this.Size < 1)
      {
        InfoString.Append(" -- -- -- -- -- -- -- --");
      }
      else
      {
        for (int index = 0; index < 8; ++index)
        {
          if (index >= this.Size)
            InfoString.Append(" ..");
          else if (this.LinkByteList == null)
            InfoString.Append(" --");
          else
            InfoString.Append(" " + this.LinkByteList[index].ToString("x02"));
        }
      }
      if (this.ExistOnEprom)
      {
        InfoString.Append(" V:0x");
        InfoString.Append(this.ValueEprom.ToString("x08"));
        InfoString.Append(" = ");
        if (this.ParameterFormat == Parameter.BaseParameterFormat.DateTime)
        {
          DateTime dateTime = ZR_Calendar.Cal_GetDateTime((uint) this.ValueEprom);
          InfoString.Append(" Time:'" + dateTime.ToString("dd.MM.yyyy HH:mm:ss") + "'");
        }
        else
          InfoString.Append(this.ValueEprom.ToString("d012"));
      }
      if (this.FunctionNumber >= 0)
      {
        if (TheMeter.MyHandler.MyInfoFlags.ShowFunctionNumbers)
          InfoString.Append(" F:" + this.FunctionNumber.ToString("d4"));
        if (TheMeter.MyHandler.MyInfoFlags.ShowFunctionNames)
          InfoString.Append(" Fn:" + ((Function) TheMeter.MyHandler.MyLoadedFunctions.LoadedFunctionHeaders[(object) (ushort) this.FunctionNumber]).Name);
      }
      InfoString.Append(" Pn:'" + this.Name + "'");
      InfoString.Append(ZR_Constants.SystemNewLine);
    }

    internal Parameter Clone()
    {
      Parameter parameter = new Parameter(this.Name, this.Size, this.BlockMark);
      parameter.MeterResource = this.MeterResource;
      parameter.FullName = this.FullName;
      parameter.FunctionNumber = this.FunctionNumber;
      parameter.FunctionIndex = this.FunctionIndex;
      parameter.ExistOnCPU = this.ExistOnCPU;
      parameter.ExistOnEprom = this.ExistOnEprom;
      parameter.EpromValueIsInitialised = this.EpromValueIsInitialised;
      parameter.CPU_ValueIsInitialised = this.CPU_ValueIsInitialised;
      parameter.AddressCPU = this.AddressCPU;
      parameter.StoreType = this.StoreType;
      if (this.GroupMember != null)
        parameter.GroupMember = (bool[]) this.GroupMember.Clone();
      parameter.ValueCPU = this.ValueCPU;
      parameter.ValueEprom = this.ValueEprom;
      parameter.DefaultValue = this.DefaultValue;
      parameter.MinValue = this.MinValue;
      parameter.MaxValue = this.MaxValue;
      parameter.Unit = this.Unit;
      parameter.ParameterFormat = this.ParameterFormat;
      parameter.DifVifsByRes = this.DifVifsByRes;
      parameter.DifVifs = this.DifVifs;
      parameter.DifVifSize = this.DifVifSize;
      parameter.MBusOn = this.MBusOn;
      parameter.MBusShortOn = this.MBusShortOn;
      parameter.MBusParameterLength = this.MBusParameterLength;
      parameter.MBusNeadedResources = this.MBusNeadedResources;
      parameter.MBusParamConvertion = this.MBusParamConvertion;
      parameter.LoggerID = this.LoggerID;
      parameter.MBusParameterOverride = this.MBusParameterOverride;
      parameter.NameTranslated = this.NameTranslated;
      parameter.ParameterInfo = this.ParameterInfo;
      parameter.StructureNr = this.StructureNr;
      parameter.StructureIndex = this.StructureIndex;
      parameter.Address = this.Address;
      if (this.LinkByteList != null)
        parameter.LinkByteList = (byte[]) this.LinkByteList.Clone();
      if (this.LinkByteComment != null)
        parameter.LinkByteComment = (string[]) this.LinkByteComment.Clone();
      return parameter;
    }

    internal bool UpdateByteList()
    {
      if (!this.ExistOnEprom)
        return true;
      if (this.LinkByteList == null || this.LinkByteList.Length != this.Size)
        this.LinkByteList = new byte[this.Size];
      for (int index = 0; index < this.Size; ++index)
        this.LinkByteList[index] = (byte) ((ulong) (this.ValueEprom >> 8 * index) & (ulong) byte.MaxValue);
      return true;
    }

    internal bool CopyToEprom(byte[] Eprom)
    {
      if (!this.ExistOnEprom)
        return false;
      for (int index = 0; index < this.LinkByteList.Length; ++index)
        Eprom[this.Address + index] = this.LinkByteList[index];
      return true;
    }

    internal void AddParameterToGroup(string GroupNamesString)
    {
      for (int index = 0; index < Parameter.ParameterGroupNames.Length; ++index)
      {
        if (GroupNamesString.IndexOf(Parameter.ParameterGroupNames[index]) >= 0)
          this.GroupMember[index] = true;
      }
    }

    internal bool SetDifVifValues(string DifVifString)
    {
      SortedList sortedList = (SortedList) null;
      this.DifVifs = 0L;
      this.DifVifSize = (short) 0;
      try
      {
        string str1 = DifVifString;
        char[] chArray = new char[1]{ '|' };
        foreach (string str2 in str1.Split(chArray))
        {
          string str3 = str2.Trim();
          if (str3.Length >= 1)
          {
            if (sortedList == null)
              sortedList = new SortedList();
            string[] strArray = str3.Split(' ');
            string key = string.Empty;
            byte[] numArray = (byte[]) null;
            int num = 0;
            for (int index = 0; index < strArray.Length; ++index)
            {
              if (index == 0)
              {
                if (strArray[index].StartsWith("R:"))
                {
                  key = strArray[0].Substring(2);
                  numArray = new byte[strArray.Length - 1];
                  sortedList.Add((object) key, (object) numArray);
                  continue;
                }
                numArray = new byte[strArray.Length];
                sortedList.Add((object) key, (object) numArray);
              }
              if (!strArray[index].StartsWith("0x"))
                return false;
              numArray[num++] = byte.Parse(strArray[index].Substring(2), NumberStyles.HexNumber);
            }
            if (key == string.Empty)
            {
              this.DifVifs = 0L;
              this.DifVifSize = (short) numArray.Length;
              for (int index = 0; index < numArray.Length; ++index)
                this.DifVifs += (long) numArray[index] << 8 * index;
            }
          }
          else
            break;
        }
      }
      catch
      {
        return false;
      }
      if (sortedList != null && sortedList.Count > 1)
        this.DifVifsByRes = sortedList;
      return true;
    }

    internal enum ParamStorageType
    {
      VALUE,
      PREPAIDFILE,
      INTERVALPOINT,
      INTERVAL,
      INTERVALOFFSET,
      STARTADDRESS,
      ENDADDRESS,
      WRITEPTR,
      FLAGS,
      COUNTERVAR,
      BYTEARRAY,
      TIMEPOINT,
    }

    public enum ParameterGroups
    {
      All,
      IDENT,
      CALIB,
      SHOWMBUS,
      CONSUMATION,
      EXTERNAL_IDENT,
    }

    internal enum MBusParameterOverrideType
    {
      None,
      Energy,
      Volume,
      Flow,
      Power,
      INPUT_1,
      INPUT_2,
    }

    internal enum MBusParameterConversion
    {
      None,
      Date,
      DateTime,
    }

    public enum BaseParameterFormat
    {
      Integer,
      BCD,
      Date,
      DateTime,
      TimeSpan,
    }
  }
}


--- PlugInAnchor.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.PlugInAnchor
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using PlugInLib;
using StartupLib;

#nullable disable
namespace GMM_Handler
{
  [ComponentPath("Configuration/Handler")]
  internal class PlugInAnchor : GmmPlugIn
  {
    private ZR_HandlerFunctions MyFunctions;
    internal static string[] UsedRights = new string[5]
    {
      "DeviceCollector",
      "DesignerChangeMenu",
      "ProfessionalConfig",
      "Developer",
      "Right\\ReadOnly"
    };

    public PlugInAnchor()
    {
      if (!PlugInLoader.IsPluginLoaderInitialised())
        return;
      this.MyFunctions = new ZR_HandlerFunctions();
    }

    public override void Dispose() => this.MyFunctions.GMM_Dispose();

    public override string ShowMainWindow() => this.MyFunctions.ShowHandlerWindow("");

    public override PlugInInfo GetPluginInfo()
    {
      return new PlugInInfo("GMM_Handler", "Configuration", "Change serie2 device settings", "View and change device settings.", new string[2]
      {
        "AsyncCom",
        "DeviceCollector"
      }, PlugInAnchor.UsedRights, (object) this.MyFunctions);
    }
  }
}


--- PTypeToDo.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.PTypeToDo
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public enum PTypeToDo
  {
    Copy,
    BitSet,
    BitClear,
  }
}


--- RamParameter.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.RamParameter
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class RamParameter : LinkBlock
  {
    internal RamParameter(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.RamParameter)
    {
    }
  }
}


--- RuntimeCode.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.RuntimeCode
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class RuntimeCode : LinkBlock
  {
    internal RuntimeCode(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.RuntimeCode)
    {
    }
  }
}


--- RuntimeVars.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.RuntimeVars
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class RuntimeVars : LinkBlock
  {
    internal RuntimeVars(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.RuntimeVars)
    {
    }
  }
}


--- ScalingPermissionsStruct.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.ScalingPermissionsStruct
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public struct ScalingPermissionsStruct
  {
    public bool EnergyScalingAllowed;
    public bool VolumeScalingAllowed;
    public bool Input1ScalingAllowed;
    public bool Input2ScalingAllowed;
    public bool BasicConfigAllowed;
  }
}


--- SpecialFunctionSelection.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.SpecialFunctionSelection
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public enum SpecialFunctionSelection
  {
    Err2008,
  }
}


--- TypeAnalysis.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.TypeAnalysis
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using NLog;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.Text;
using System.Windows.Forms;
using ZR_ClassLibrary;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace GMM_Handler
{
  public class TypeAnalysis : Form
  {
    private ZR_HandlerFunctions MyHandler;
    private bool BreakLoop;
    private SortedList<ushort, SortedList<int, string>> UsedFunctions;
    private SortedList<int, string> MBusLists;
    private SortedList<int, SortedList<int, string>> UsedMBusLists;
    private DataTable FunctionList;
    private DataTable MBusListsTable;
    private DataTable MeterDetailsTable;
    private DataTable ExtendetMeterInfoTable;
    private DataTable ReducedExtendetMeterInfoTable;
    private static Logger logger = LogManager.GetLogger(nameof (TypeAnalysis));
    private TypeDetailWindow DetailWindow;
    private DataRow AnalyseRow;
    private IContainer components = (IContainer) null;
    private DataGridView dataGridView1;
    private Button buttonShowTypeList;
    private TextBox textBoxState;
    private Button buttonBreak;
    private Button buttonFunctionUsage;
    private Button buttonMBusListeTypes;
    private Button buttonReduceTypeList;
    private TextBox textBoxReduceTypeList;
    private Label label1;
    private Button buttonTypeListWithoutMeterDate;
    private TextBox textBoxFromMeterId;
    private Label label2;
    private Label label3;
    private TextBox textBoxToMeterInfoId;
    private Button buttonDetailWindow;
    private Label label4;
    private TextBox textBoxMaxNumberOfTypes;
    private Button buttonClearData;
    private Button buttonGenerateTypeInfos;
    private Button buttonAnalyseMeters;
    private TabControl tabControl1;
    private TabPage tabPageTable;
    private TabPage tabPageSettings;
    private Label label5;
    private Button buttonAnalyseAllMeters;
    private DateTimePicker dateTimePicker1;

    public TypeAnalysis(ZR_HandlerFunctions MyHandler)
    {
      this.InitializeComponent();
      this.MyHandler = MyHandler;
      this.dataGridView1.CellDoubleClick += new DataGridViewCellEventHandler(this.dataGridView1_CellDoubleClick);
    }

    private void buttonBreak_Click(object sender, EventArgs e) => this.BreakLoop = true;

    private void buttonShowTypeList_Click(object sender, EventArgs e)
    {
      this.dataGridView1.DataSource = (object) null;
      if (!this.GeneratInfoLists())
        return;
      this.textBoxState.Text = "Generate meter overview";
      this.Refresh();
      this.ExtendetMeterInfoTable = this.MyHandler.MyDataBaseAccess.MeterInfoTable.Clone();
      DataColumnCollection columns1 = this.ExtendetMeterInfoTable.Columns;
      TypeAnalysis.ExtendedMeterInfoColum extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.First_prod;
      string columnName1 = extendedMeterInfoColum.ToString();
      System.Type type1 = typeof (DateTime);
      columns1.Add(columnName1, type1);
      DataColumnCollection columns2 = this.ExtendetMeterInfoTable.Columns;
      extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.Last_prod;
      string columnName2 = extendedMeterInfoColum.ToString();
      System.Type type2 = typeof (DateTime);
      columns2.Add(columnName2, type2);
      DataColumnCollection columns3 = this.ExtendetMeterInfoTable.Columns;
      extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.Meters;
      string columnName3 = extendedMeterInfoColum.ToString();
      System.Type type3 = typeof (int);
      columns3.Add(columnName3, type3);
      DataColumnCollection columns4 = this.ExtendetMeterInfoTable.Columns;
      extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.TypLoad;
      string columnName4 = extendedMeterInfoColum.ToString();
      System.Type type4 = typeof (string);
      columns4.Add(columnName4, type4);
      DataColumnCollection columns5 = this.ExtendetMeterInfoTable.Columns;
      extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.MeterLoad;
      string columnName5 = extendedMeterInfoColum.ToString();
      System.Type type5 = typeof (string);
      columns5.Add(columnName5, type5);
      DataColumnCollection columns6 = this.ExtendetMeterInfoTable.Columns;
      extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.MeterMBusLists;
      string columnName6 = extendedMeterInfoColum.ToString();
      System.Type type6 = typeof (string);
      columns6.Add(columnName6, type6);
      int count = this.MyHandler.MyDataBaseAccess.MeterInfoTable.Columns.Count;
      foreach (Schema.MeterInfoRow meterInfoRow in (TypedTableBase<Schema.MeterInfoRow>) this.MyHandler.MyDataBaseAccess.MeterInfoTable)
      {
        DataRow row = this.ExtendetMeterInfoTable.NewRow();
        for (int columnIndex = 0; columnIndex < count; ++columnIndex)
          row[columnIndex] = meterInfoRow[columnIndex];
        Schema.MeterRow[] meterRowArray = (Schema.MeterRow[]) this.MyHandler.MyDataBaseAccess.MeterTable.Select("MeterInfoID = " + meterInfoRow.MeterInfoID.ToString());
        DataRow dataRow1 = row;
        extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.Meters;
        string columnName7 = extendedMeterInfoColum.ToString();
        // ISSUE: variable of a boxed type
        __Boxed<int> length = (System.ValueType) meterRowArray.Length;
        dataRow1[columnName7] = (object) length;
        if (meterRowArray.Length != 0)
        {
          DataRow dataRow2 = row;
          extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.First_prod;
          string columnName8 = extendedMeterInfoColum.ToString();
          // ISSUE: variable of a boxed type
          __Boxed<DateTime> productionDate1 = (System.ValueType) meterRowArray[0].ProductionDate;
          dataRow2[columnName8] = (object) productionDate1;
          DataRow dataRow3 = row;
          extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.Last_prod;
          string columnName9 = extendedMeterInfoColum.ToString();
          // ISSUE: variable of a boxed type
          __Boxed<DateTime> productionDate2 = (System.ValueType) meterRowArray[meterRowArray.Length - 1].ProductionDate;
          dataRow3[columnName9] = (object) productionDate2;
        }
        this.ExtendetMeterInfoTable.Rows.Add(row);
      }
      this.dataGridView1.DataSource = (object) this.ExtendetMeterInfoTable;
    }

    private void dataGridView1_CellDoubleClick(object sender, EventArgs e)
    {
      this.dataGridView1.Rows[((DataGridViewCellEventArgs) e).RowIndex].Cells[0].Value.ToString();
    }

    private bool GeneratInfoLists()
    {
      this.ExtendetMeterInfoTable = (DataTable) null;
      this.textBoxState.Text = "Load type list";
      this.Refresh();
      if (!this.MyHandler.MyDataBaseAccess.LoadTypeList())
        return false;
      this.textBoxState.Text = "Load meter list";
      this.Refresh();
      if (!this.MyHandler.MyDataBaseAccess.LoadMeterList())
        return false;
      this.buttonGenerateTypeInfos.Enabled = true;
      return true;
    }

    private bool IsRangeDefined()
    {
      return this.textBoxFromMeterId.Text.Length != 0 && !(this.textBoxFromMeterId.Text == "0") || this.textBoxToMeterInfoId.Text.Length != 0 && !(this.textBoxToMeterInfoId.Text == "1000000000");
    }

    private bool GeneratTypeInfos()
    {
      this.dataGridView1.DataSource = (object) null;
      this.UsedFunctions = new SortedList<ushort, SortedList<int, string>>();
      this.MBusLists = new SortedList<int, string>();
      this.UsedMBusLists = new SortedList<int, SortedList<int, string>>();
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      int num4 = 0;
      string str1 = this.MyHandler.MyDataBaseAccess.MeterInfoTable.Count.ToString();
      int num5 = 0;
      string str2 = string.Empty;
      this.BreakLoop = false;
      int result1;
      if (int.TryParse(this.textBoxMaxNumberOfTypes.Text, out result1))
      {
        if (result1 > this.MyHandler.MyDataBaseAccess.MeterInfoTable.Rows.Count)
          result1 = this.MyHandler.MyDataBaseAccess.MeterInfoTable.Rows.Count;
      }
      else
        result1 = this.MyHandler.MyDataBaseAccess.MeterInfoTable.Rows.Count;
      for (int index1 = 0; index1 < result1; ++index1)
      {
        Schema.MeterInfoRow meterInfoRow = this.MyHandler.MyDataBaseAccess.MeterInfoTable[index1];
        DataRow row = this.ExtendetMeterInfoTable.Rows[index1];
        ++num5;
        this.textBoxState.Text = num5.ToString() + "/" + str1 + "; Loaded:" + num1.ToString() + "; ErrorOn:" + num2.ToString() + "; Exception:" + num3.ToString();
        Application.DoEvents();
        if (!this.BreakLoop)
        {
          if (meterInfoRow.IsDescriptionNull())
          {
            ++num4;
          }
          else
          {
            str2 = meterInfoRow.Description;
            if (!this.MyHandler.MyDataBaseAccess.IsSerie2Type(meterInfoRow.MeterTypeID))
            {
              ++num4;
            }
            else
            {
              int result2 = 0;
              int result3 = 1000000000;
              if (!int.TryParse(this.textBoxFromMeterId.Text, out result2))
                result2 = 0;
              if (!int.TryParse(this.textBoxToMeterInfoId.Text, out result3))
                result3 = 1000000000;
              this.textBoxFromMeterId.Text = result2.ToString();
              this.textBoxToMeterInfoId.Text = result3.ToString();
              if (meterInfoRow.MeterInfoID >= result2 && meterInfoRow.MeterInfoID <= result3)
              {
                try
                {
                  TypeAnalysis.ExtendedMeterInfoColum extendedMeterInfoColum;
                  if (this.MyHandler.MyMeters.LoadType(meterInfoRow.MeterInfoID, true))
                  {
                    this.MyHandler.MyMeters.CopyMeter(ZR_HandlerFunctions.MeterObjects.Work);
                    string str3 = "true";
                    for (int index2 = 0; index2 < this.MyHandler.MyMeters.WorkMeter.MyFunctionTable.FunctionListByNumber.Count; ++index2)
                    {
                      ushort key = (ushort) this.MyHandler.MyMeters.WorkMeter.MyFunctionTable.FunctionListByNumber.GetKey(index2);
                      if (!this.UsedFunctions.ContainsKey(key))
                        this.UsedFunctions.Add(key, new SortedList<int, string>());
                      this.UsedFunctions[key].Add(meterInfoRow.MeterInfoID, meterInfoRow.Description);
                    }
                    ++num1;
                    StringBuilder stringBuilder1 = new StringBuilder(1000);
                    int key1 = 0;
                    string str4;
                    string str5;
                    try
                    {
                      stringBuilder1.AppendLine("ShortList:");
                      for (int index3 = 0; index3 < this.MyHandler.MyMeters.WorkMeter.MyMBusList.ShortListParameterNames.Count; ++index3)
                        stringBuilder1.AppendLine((string) this.MyHandler.MyMeters.WorkMeter.MyMBusList.ShortListParameterNames[index3]);
                      stringBuilder1.AppendLine("FullList:");
                      for (int index4 = 0; index4 < this.MyHandler.MyMeters.WorkMeter.MyMBusList.FullListParameterNames.Count; ++index4)
                        stringBuilder1.AppendLine((string) this.MyHandler.MyMeters.WorkMeter.MyMBusList.FullListParameterNames[index4]);
                      str4 = stringBuilder1.ToString();
                      for (int index5 = 0; index5 < str4.Length; ++index5)
                        key1 += (int) str4[index5] + index5;
                      str5 = str3 + ";MBusOk";
                    }
                    catch
                    {
                      key1 = -1;
                      str4 = "MBus list exception";
                      str5 = str3 + ";MBusException";
                    }
                    if (!this.UsedMBusLists.ContainsKey(key1))
                    {
                      this.MBusLists.Add(key1, str4);
                      this.UsedMBusLists.Add(key1, new SortedList<int, string>());
                    }
                    this.UsedMBusLists[key1].Add(meterInfoRow.MeterInfoID, meterInfoRow.Description);
                    row[TypeAnalysis.ExtendedMeterInfoColum.TypLoad.ToString()] = (object) str5;
                    bool flag1;
                    int num6;
                    Schema.MeterRow[] meterRowArray;
                    if (this.dateTimePicker1.Value > new DateTime(2000, 1, 1))
                    {
                      flag1 = false;
                      Schema.MeterDataTable meterTable = this.MyHandler.MyDataBaseAccess.MeterTable;
                      num6 = meterInfoRow.MeterInfoID;
                      string filterExpression = "MeterInfoID = " + num6.ToString() + " AND ApprovalDate >= " + this.dateTimePicker1.Value.ToString((IFormatProvider) DateTimeFormatInfo.InvariantInfo);
                      meterRowArray = (Schema.MeterRow[]) meterTable.Select(filterExpression);
                    }
                    else
                    {
                      flag1 = true;
                      Schema.MeterDataTable meterTable = this.MyHandler.MyDataBaseAccess.MeterTable;
                      num6 = meterInfoRow.MeterInfoID;
                      string filterExpression = "MeterInfoID = " + num6.ToString();
                      meterRowArray = (Schema.MeterRow[]) meterTable.Select(filterExpression);
                    }
                    if (meterInfoRow.PPSArtikelNr.StartsWith("HWTOTYPE"))
                    {
                      DataRow dataRow = row;
                      extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.MeterLoad;
                      string columnName = extendedMeterInfoColum.ToString();
                      dataRow[columnName] = (object) "Hardware test type: Meters not checked";
                    }
                    else if (meterRowArray.Length == 0)
                    {
                      row[TypeAnalysis.ExtendedMeterInfoColum.MeterLoad.ToString()] = !flag1 ? (object) ("Not produced since " + this.dateTimePicker1.Value.ToShortDateString()) : (object) "Not produced";
                    }
                    else
                    {
                      bool flag2 = false;
                      StringBuilder stringBuilder2 = new StringBuilder(500);
                      StringBuilder stringBuilder3 = new StringBuilder(500);
                      int num7 = 0;
                      int index6 = meterRowArray.Length - 1;
                      while (true)
                      {
                        Schema.MeterRow meterRow = meterRowArray[index6];
                        try
                        {
                          if (stringBuilder2.Length != 0)
                            stringBuilder2.Append(";");
                          StringBuilder stringBuilder4 = stringBuilder2;
                          num6 = meterRow.MeterID;
                          string str6 = "M:" + num6.ToString();
                          stringBuilder4.Append(str6);
                          stringBuilder2.Append(";P:" + meterRow.ProductionDate.ToShortDateString());
                          if (!meterRow.IsApprovalDateNull())
                            stringBuilder2.Append(";A:" + meterRow.ApprovalDate.ToShortDateString());
                          else
                            stringBuilder2.Append(";A:Missing");
                          if (this.MyHandler.MyMeters.LoadMeter(new ZR_MeterIdent(MeterBasis.DbMeter)
                          {
                            MeterID = meterRow.MeterID
                          }, DateTime.MaxValue))
                          {
                            stringBuilder2.Append(";D:" + this.MyHandler.MyMeters.DbMeter.DatabaseTime.ToShortDateString());
                            if (this.MyHandler.MyMeters.DbMeter.MyIdent.lFirmwareVersion != this.MyHandler.MyMeters.SavedMeter.MyIdent.lFirmwareVersion)
                            {
                              stringBuilder2.Append(";LoadExactFirmwareType");
                              if (this.MyHandler.MyMeters.LoadType(meterInfoRow.MeterInfoID, (int) this.MyHandler.MyMeters.DbMeter.MyIdent.lFirmwareVersion, true))
                                this.MyHandler.MyMeters.CopyMeter(ZR_HandlerFunctions.MeterObjects.Work);
                              else
                                stringBuilder2.Append(";--Load exact type error--");
                            }
                            stringBuilder1.Length = 0;
                            int key2 = 0;
                            try
                            {
                              stringBuilder1.AppendLine("ShortList:");
                              for (int index7 = 0; index7 < this.MyHandler.MyMeters.WorkMeter.MyMBusList.ShortListParameterNames.Count; ++index7)
                                stringBuilder1.AppendLine((string) this.MyHandler.MyMeters.WorkMeter.MyMBusList.ShortListParameterNames[index7]);
                              stringBuilder1.AppendLine("FullList:");
                              for (int index8 = 0; index8 < this.MyHandler.MyMeters.WorkMeter.MyMBusList.FullListParameterNames.Count; ++index8)
                                stringBuilder1.AppendLine((string) this.MyHandler.MyMeters.WorkMeter.MyMBusList.FullListParameterNames[index8]);
                              str4 = stringBuilder1.ToString();
                              for (int index9 = 0; index9 < str4.Length; ++index9)
                                key2 += (int) str4[index9] + index9;
                            }
                            catch
                            {
                              key2 = -1;
                              stringBuilder2.Append(";MBusException");
                            }
                            if (!this.UsedMBusLists.ContainsKey(key2))
                            {
                              this.MBusLists.Add(key2, str4);
                              this.UsedMBusLists.Add(key2, new SortedList<int, string>());
                            }
                            if (num7 != key2)
                            {
                              if (stringBuilder3.Length > 0)
                              {
                                if (stringBuilder3[0] != '@')
                                  stringBuilder3.Insert(0, '@');
                                stringBuilder3.Append(";" + key2.ToString());
                              }
                              else
                                stringBuilder3.Append(key2.ToString());
                              num7 = key2;
                            }
                            if (!DataChecker.IsEqualMap(this.MyHandler.MyMeters.WorkMeter, this.MyHandler.MyMeters.SavedMeter))
                            {
                              stringBuilder2.Append(";MapDiff");
                              flag2 = true;
                            }
                            if (!DataChecker.IsEqualAllPointers(this.MyHandler.MyMeters.WorkMeter, this.MyHandler.MyMeters.SavedMeter))
                            {
                              stringBuilder2.Append(";PointerDiff");
                              flag2 = true;
                            }
                            if (!DataChecker.IsEqualProtectedArea(this.MyHandler.MyMeters.WorkMeter, this.MyHandler.MyMeters.SavedMeter))
                            {
                              stringBuilder2.Append(";ProtAreaDiff");
                              flag2 = true;
                            }
                            if (!DataChecker.AreOverridesEqualToDatabase(this.MyHandler.MyMeters.WorkMeter))
                            {
                              stringBuilder2.Append(";OverridesChanged");
                              flag2 = true;
                            }
                            stringBuilder2.Append("|");
                          }
                          else
                          {
                            if (TypeAnalysis.logger.IsDebugEnabled)
                            {
                              TypeAnalysis.logger.Debug("     Load meter error (MeterInfoId): " + this.MyHandler.MyMeters.WorkMeter.MyIdent.MeterInfoID.ToString());
                              ZR_ClassLibMessages.LastErrorInfo errorAndClearError = ZR_ClassLibMessages.GetLastErrorAndClearError();
                              if (errorAndClearError.LastErrorDescription != null && errorAndClearError.LastErrorDescription.Length > 0)
                                TypeAnalysis.logger.Debug("           ----->" + errorAndClearError.LastErrorDescription);
                            }
                            stringBuilder2.Append(";LoadErr|");
                            if (!this.MyHandler.MyDataBaseAccess.IsMeterInfoProperty(this.MyHandler.MyMeters.WorkMeter.MyIdent.MeterInfoID, DataBaseAccess.MeterInfoProperties.DatasetError, "LoadDevice"))
                              flag2 = true;
                          }
                        }
                        catch
                        {
                          stringBuilder2.Append(";Exception|");
                          flag2 = true;
                        }
                        DateTime dateTime1 = meterRow.ProductionDate.AddMonths(-6);
                        --index6;
                        DateTime dateTime2 = meterRow.ProductionDate;
                        for (; index6 >= 0; --index6)
                        {
                          if (!meterRowArray[index6].IsApprovalDateNull())
                            dateTime2 = meterRowArray[index6].ApprovalDate;
                          else if (!meterRowArray[index6].IsProductionDateNull())
                            dateTime2 = meterRowArray[index6].ProductionDate;
                          else
                            continue;
                          if (dateTime2 < dateTime1)
                            break;
                        }
                        if (index6 < 0)
                        {
                          if (dateTime2 != meterRow.ProductionDate)
                            index6 = 0;
                          else
                            break;
                        }
                      }
                      row[TypeAnalysis.ExtendedMeterInfoColum.MeterLoad.ToString()] = !flag2 ? (object) stringBuilder2.ToString() : (object) ("@@@|" + stringBuilder2.ToString());
                      row[TypeAnalysis.ExtendedMeterInfoColum.MeterMBusLists.ToString()] = (object) stringBuilder3.ToString();
                    }
                  }
                  else
                  {
                    if (TypeAnalysis.logger.IsDebugEnabled)
                    {
                      TypeAnalysis.logger.Debug("Load type error: " + meterInfoRow.MeterInfoID.ToString());
                      ZR_ClassLibMessages.LastErrorInfo errorAndClearError = ZR_ClassLibMessages.GetLastErrorAndClearError();
                      if (errorAndClearError.LastErrorDescription != null && errorAndClearError.LastErrorDescription.Length > 0)
                        TypeAnalysis.logger.Debug("           ----->" + errorAndClearError.LastErrorDescription);
                    }
                    ++num2;
                    DataRow dataRow = row;
                    extendedMeterInfoColum = TypeAnalysis.ExtendedMeterInfoColum.TypLoad;
                    string columnName = extendedMeterInfoColum.ToString();
                    dataRow[columnName] = (object) "false";
                  }
                }
                catch
                {
                  ++num3;
                  row[TypeAnalysis.ExtendedMeterInfoColum.TypLoad.ToString()] = (object) "exception";
                }
              }
            }
          }
        }
        else
          break;
      }
      this.dataGridView1.DataSource = (object) this.ExtendetMeterInfoTable;
      return true;
    }

    private void buttonFunctionUsage_Click(object sender, EventArgs e)
    {
      this.FunctionList = new DataTable();
      this.FunctionList.Columns.Add("FunctionId", typeof (ushort));
      this.FunctionList.Columns.Add("FunctionName", typeof (string));
      this.FunctionList.Columns.Add("FunctionVersion", typeof (int));
      this.FunctionList.Columns.Add("Used on types", typeof (int));
      for (int index = 0; index < this.UsedFunctions.Count; ++index)
      {
        ushort key = this.UsedFunctions.Keys[index];
        Function fullLoadedFunction = (Function) this.MyHandler.MyLoadedFunctions.FullLoadedFunctions[(object) key];
        DataRow row = this.FunctionList.NewRow();
        row[0] = (object) key;
        row[1] = (object) fullLoadedFunction.Name;
        row[2] = (object) fullLoadedFunction.Version;
        row[3] = (object) this.UsedFunctions.Values[index].Count;
        this.FunctionList.Rows.Add(row);
      }
      this.dataGridView1.DataSource = (object) this.FunctionList;
    }

    private void buttonMBusListeTypes_Click(object sender, EventArgs e)
    {
      this.MBusListsTable = new DataTable();
      this.MBusListsTable.Columns.Add("MBus list index", typeof (int));
      this.MBusListsTable.Columns.Add("Used on types", typeof (int));
      this.MBusListsTable.Columns.Add("The list", typeof (string));
      for (int index = 0; index < this.UsedMBusLists.Count; ++index)
      {
        int key = this.UsedMBusLists.Keys[index];
        DataRow row = this.MBusListsTable.NewRow();
        row[0] = (object) key;
        row[1] = (object) this.UsedMBusLists.Values[index].Count;
        row[2] = (object) this.MBusLists.Values[index].Replace(Environment.NewLine, ";");
        this.MBusListsTable.Rows.Add(row);
      }
      this.dataGridView1.DataSource = (object) this.MBusListsTable;
    }

    private void buttonReduceTypeList_Click(object sender, EventArgs e)
    {
      if (this.ExtendetMeterInfoTable == null)
        return;
      this.ReducedExtendetMeterInfoTable = this.ExtendetMeterInfoTable.Clone();
      foreach (DataRow dataRow in this.ExtendetMeterInfoTable.Select("Description LIKE '" + this.textBoxReduceTypeList.Text + "'"))
      {
        DataRow row = this.ReducedExtendetMeterInfoTable.NewRow();
        for (int columnIndex = 0; columnIndex < this.ReducedExtendetMeterInfoTable.Columns.Count; ++columnIndex)
          row[columnIndex] = dataRow[columnIndex];
        this.ReducedExtendetMeterInfoTable.Rows.Add(row);
      }
      this.dataGridView1.DataSource = (object) this.ReducedExtendetMeterInfoTable;
    }

    private void buttonTypeListWithoutMeterDate_Click(object sender, EventArgs e)
    {
      if (this.ExtendetMeterInfoTable == null)
        return;
      this.ReducedExtendetMeterInfoTable = this.ExtendetMeterInfoTable.Clone();
      StringBuilder stringBuilder = new StringBuilder();
      string columnName = TypeAnalysis.ExtendedMeterInfoColum.MeterLoad.ToString();
      foreach (DataRow row1 in (InternalDataCollectionBase) this.ExtendetMeterInfoTable.Rows)
      {
        DataRow row2 = this.ReducedExtendetMeterInfoTable.NewRow();
        for (int columnIndex = 0; columnIndex < this.ReducedExtendetMeterInfoTable.Columns.Count; ++columnIndex)
          row2[columnIndex] = row1[columnIndex];
        string str1 = row2[columnName].ToString();
        if (str1.Length == 0)
        {
          row2[columnName] = (object) "NoData";
        }
        else
        {
          stringBuilder.Length = 0;
          string str2 = str1;
          char[] chArray1 = new char[1]{ '|' };
          foreach (string str3 in str2.Split(chArray1))
          {
            char[] chArray2 = new char[1]{ ';' };
            string[] strArray = str3.Split(chArray2);
            for (int index = 0; index < strArray.Length; ++index)
            {
              if (strArray[index].Length <= 1 || strArray[index][1] != ':')
              {
                if (stringBuilder.Length > 0)
                  stringBuilder.Append(';');
                stringBuilder.Append(strArray[index]);
              }
            }
          }
          row2[columnName] = stringBuilder.Length != 0 ? (object) stringBuilder.ToString() : (object) "ok";
        }
        this.ReducedExtendetMeterInfoTable.Rows.Add(row2);
      }
      this.dataGridView1.DataSource = (object) this.ReducedExtendetMeterInfoTable;
    }

    private void buttonDetailWindow_Click(object sender, EventArgs e)
    {
      if (this.DetailWindow != null && !this.DetailWindow.IsDisposed)
        return;
      this.DetailWindow = new TypeDetailWindow();
      this.DetailWindow.Show();
    }

    private void dataGridView1_CurrentCellChanged(object sender, EventArgs e)
    {
      this.buttonDetailWindow.Enabled = false;
      this.buttonAnalyseMeters.Enabled = false;
      if (this.dataGridView1.CurrentRow == null || this.dataGridView1.CurrentRow.DataBoundItem == null || !(this.dataGridView1.CurrentRow.DataBoundItem is DataRowView))
        return;
      this.AnalyseRow = ((DataRowView) this.dataGridView1.CurrentRow.DataBoundItem).Row;
      this.buttonAnalyseMeters.Enabled = true;
      if (this.DetailWindow == null || this.DetailWindow.IsDisposed)
        this.buttonDetailWindow.Enabled = true;
      else
        this.DetailWindow.SetDataFromRow(this.AnalyseRow);
    }

    private void buttonClearData_Click(object sender, EventArgs e)
    {
      this.UsedFunctions = (SortedList<ushort, SortedList<int, string>>) null;
      this.buttonGenerateTypeInfos.Enabled = false;
      this.buttonMBusListeTypes.Enabled = false;
      this.buttonFunctionUsage.Enabled = false;
      this.buttonAnalyseMeters.Enabled = false;
    }

    private void buttonGenerateTypeInfos_Click(object sender, EventArgs e)
    {
      if (!this.GeneratTypeInfos())
        return;
      this.buttonMBusListeTypes.Enabled = true;
      this.buttonFunctionUsage.Enabled = true;
    }

    private void buttonAnalyseMeters_Click(object sender, EventArgs e)
    {
      this.dataGridView1.DataSource = (object) null;
      this.MeterDetailsTable = new DataTable();
      this.MeterDetailsTable.Columns.Add("SerialNumber", typeof (int));
      this.MeterDetailsTable.Columns.Add("OrderNumber", typeof (string));
      this.MeterDetailsTable.Columns.Add("ApprovalDate", typeof (string));
      this.MeterDetailsTable.Columns.Add("LoadError", typeof (bool));
      this.MeterDetailsTable.Columns.Add("EndDateError", typeof (bool));
      this.MeterDetailsTable.Columns.Add("EndDateInfo", typeof (string));
      Schema.MeterRow[] meterRowArray = (Schema.MeterRow[]) this.MyHandler.MyDataBaseAccess.MeterTable.Select("MeterInfoID = " + this.AnalyseRow["MeterInfoID"].ToString());
      this.BreakLoop = false;
      int num1 = 0;
      int num2 = 0;
      for (int index = 0; index < meterRowArray.Length && !this.BreakLoop; ++index)
      {
        this.textBoxState.Text = "Check meter " + index.ToString() + "/" + meterRowArray.Length.ToString() + "; LoadErrors:" + num1.ToString() + "; EndDateErrors:" + num2.ToString();
        Application.DoEvents();
        DataRow row = this.MeterDetailsTable.NewRow();
        row["SerialNumber"] = (object) meterRowArray[index].SerialNr;
        row["OrderNumber"] = (object) meterRowArray[index].OrderNr.ToString();
        row["ApprovalDate"] = (object) meterRowArray[index].ApprovalDate.ToString();
        row["LoadError"] = (object) true;
        if (this.MyHandler.MyMeters.LoadMeter(new ZR_MeterIdent(MeterBasis.DbMeter)
        {
          MeterID = meterRowArray[index].MeterID
        }, DateTime.MaxValue))
        {
          string Info;
          bool flag = DataChecker.IsEndTimeOk(this.MyHandler.MyMeters.DbMeter, out Info);
          if (!flag)
            ++num2;
          row["LoadError"] = (object) false;
          row["EndDateError"] = (object) !flag;
          row["EndDateInfo"] = (object) Info;
        }
        else
          ++num1;
        this.MeterDetailsTable.Rows.Add(row);
      }
      this.dataGridView1.DataSource = (object) this.MeterDetailsTable;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.dataGridView1 = new DataGridView();
      this.buttonShowTypeList = new Button();
      this.textBoxState = new TextBox();
      this.buttonBreak = new Button();
      this.buttonFunctionUsage = new Button();
      this.buttonMBusListeTypes = new Button();
      this.buttonReduceTypeList = new Button();
      this.textBoxReduceTypeList = new TextBox();
      this.label1 = new Label();
      this.buttonTypeListWithoutMeterDate = new Button();
      this.textBoxFromMeterId = new TextBox();
      this.label2 = new Label();
      this.label3 = new Label();
      this.textBoxToMeterInfoId = new TextBox();
      this.buttonDetailWindow = new Button();
      this.label4 = new Label();
      this.textBoxMaxNumberOfTypes = new TextBox();
      this.buttonClearData = new Button();
      this.buttonGenerateTypeInfos = new Button();
      this.buttonAnalyseMeters = new Button();
      this.tabControl1 = new TabControl();
      this.tabPageTable = new TabPage();
      this.tabPageSettings = new TabPage();
      this.buttonAnalyseAllMeters = new Button();
      this.label5 = new Label();
      this.dateTimePicker1 = new DateTimePicker();
      ((ISupportInitialize) this.dataGridView1).BeginInit();
      this.tabControl1.SuspendLayout();
      this.tabPageTable.SuspendLayout();
      this.tabPageSettings.SuspendLayout();
      this.SuspendLayout();
      this.dataGridView1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.dataGridView1.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dataGridView1.Location = new Point(10, 7);
      this.dataGridView1.Margin = new Padding(4, 4, 4, 4);
      this.dataGridView1.Name = "dataGridView1";
      this.dataGridView1.RowTemplate.Height = 24;
      this.dataGridView1.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.dataGridView1.Size = new Size(1153, 560);
      this.dataGridView1.TabIndex = 0;
      this.dataGridView1.CurrentCellChanged += new System.EventHandler(this.dataGridView1_CurrentCellChanged);
      this.buttonShowTypeList.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonShowTypeList.Location = new Point(1060, 640);
      this.buttonShowTypeList.Margin = new Padding(4, 4, 4, 4);
      this.buttonShowTypeList.Name = "buttonShowTypeList";
      this.buttonShowTypeList.Size = new Size(118, 28);
      this.buttonShowTypeList.TabIndex = 1;
      this.buttonShowTypeList.Text = "Show type list";
      this.buttonShowTypeList.UseVisualStyleBackColor = true;
      this.buttonShowTypeList.Click += new System.EventHandler(this.buttonShowTypeList_Click);
      this.textBoxState.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.textBoxState.Location = new Point(3, 610);
      this.textBoxState.Margin = new Padding(4, 4, 4, 4);
      this.textBoxState.Name = "textBoxState";
      this.textBoxState.Size = new Size(1179, 22);
      this.textBoxState.TabIndex = 2;
      this.buttonBreak.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.buttonBreak.Location = new Point(3, 640);
      this.buttonBreak.Margin = new Padding(4, 4, 4, 4);
      this.buttonBreak.Name = "buttonBreak";
      this.buttonBreak.Size = new Size(72, 28);
      this.buttonBreak.TabIndex = 1;
      this.buttonBreak.Text = "Break";
      this.buttonBreak.UseVisualStyleBackColor = true;
      this.buttonBreak.Click += new System.EventHandler(this.buttonBreak_Click);
      this.buttonFunctionUsage.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonFunctionUsage.Enabled = false;
      this.buttonFunctionUsage.Location = new Point(773, 640);
      this.buttonFunctionUsage.Margin = new Padding(4, 4, 4, 4);
      this.buttonFunctionUsage.Name = "buttonFunctionUsage";
      this.buttonFunctionUsage.Size = new Size(126, 28);
      this.buttonFunctionUsage.TabIndex = 1;
      this.buttonFunctionUsage.Text = "Function usage";
      this.buttonFunctionUsage.UseVisualStyleBackColor = true;
      this.buttonFunctionUsage.Click += new System.EventHandler(this.buttonFunctionUsage_Click);
      this.buttonMBusListeTypes.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonMBusListeTypes.Enabled = false;
      this.buttonMBusListeTypes.Location = new Point(640, 640);
      this.buttonMBusListeTypes.Margin = new Padding(4, 4, 4, 4);
      this.buttonMBusListeTypes.Name = "buttonMBusListeTypes";
      this.buttonMBusListeTypes.Size = new Size(125, 28);
      this.buttonMBusListeTypes.TabIndex = 1;
      this.buttonMBusListeTypes.Text = "MBus list types";
      this.buttonMBusListeTypes.UseVisualStyleBackColor = true;
      this.buttonMBusListeTypes.Click += new System.EventHandler(this.buttonMBusListeTypes_Click);
      this.buttonReduceTypeList.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.buttonReduceTypeList.Enabled = false;
      this.buttonReduceTypeList.Location = new Point(682, 539);
      this.buttonReduceTypeList.Margin = new Padding(4, 4, 4, 4);
      this.buttonReduceTypeList.Name = "buttonReduceTypeList";
      this.buttonReduceTypeList.Size = new Size(239, 28);
      this.buttonReduceTypeList.TabIndex = 1;
      this.buttonReduceTypeList.Text = "Reduce type list by like pattern";
      this.buttonReduceTypeList.UseVisualStyleBackColor = true;
      this.buttonReduceTypeList.Click += new System.EventHandler(this.buttonReduceTypeList_Click);
      this.textBoxReduceTypeList.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.textBoxReduceTypeList.Location = new Point(196, 111);
      this.textBoxReduceTypeList.Margin = new Padding(4, 4, 4, 4);
      this.textBoxReduceTypeList.Name = "textBoxReduceTypeList";
      this.textBoxReduceTypeList.Size = new Size(723, 22);
      this.textBoxReduceTypeList.TabIndex = 3;
      this.label1.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label1.AutoSize = true;
      this.label1.Location = new Point(15, 115);
      this.label1.Margin = new Padding(4, 0, 4, 0);
      this.label1.Name = "label1";
      this.label1.Size = new Size(180, 17);
      this.label1.TabIndex = 4;
      this.label1.Text = "Like pattern on description:";
      this.buttonTypeListWithoutMeterDate.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.buttonTypeListWithoutMeterDate.Enabled = false;
      this.buttonTypeListWithoutMeterDate.Location = new Point(929, 539);
      this.buttonTypeListWithoutMeterDate.Margin = new Padding(4, 4, 4, 4);
      this.buttonTypeListWithoutMeterDate.Name = "buttonTypeListWithoutMeterDate";
      this.buttonTypeListWithoutMeterDate.Size = new Size(239, 28);
      this.buttonTypeListWithoutMeterDate.TabIndex = 1;
      this.buttonTypeListWithoutMeterDate.Text = "Type list without meter date";
      this.buttonTypeListWithoutMeterDate.UseVisualStyleBackColor = true;
      this.buttonTypeListWithoutMeterDate.Click += new System.EventHandler(this.buttonTypeListWithoutMeterDate_Click);
      this.textBoxFromMeterId.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.textBoxFromMeterId.Location = new Point(196, 143);
      this.textBoxFromMeterId.Margin = new Padding(4, 4, 4, 4);
      this.textBoxFromMeterId.Name = "textBoxFromMeterId";
      this.textBoxFromMeterId.Size = new Size(132, 22);
      this.textBoxFromMeterId.TabIndex = 5;
      this.label2.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label2.AutoSize = true;
      this.label2.Location = new Point(29, 147);
      this.label2.Margin = new Padding(4, 0, 4, 0);
      this.label2.Name = "label2";
      this.label2.Size = new Size(151, 17);
      this.label2.TabIndex = 4;
      this.label2.Text = "Work from MeterInfoId:";
      this.label3.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label3.AutoSize = true;
      this.label3.Location = new Point(49, 181);
      this.label3.Margin = new Padding(4, 0, 4, 0);
      this.label3.Name = "label3";
      this.label3.Size = new Size(139, 17);
      this.label3.TabIndex = 4;
      this.label3.Text = "Work to MeterInfoId::";
      this.textBoxToMeterInfoId.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.textBoxToMeterInfoId.Location = new Point(196, 176);
      this.textBoxToMeterInfoId.Margin = new Padding(4, 4, 4, 4);
      this.textBoxToMeterInfoId.Name = "textBoxToMeterInfoId";
      this.textBoxToMeterInfoId.Size = new Size(132, 22);
      this.textBoxToMeterInfoId.TabIndex = 5;
      this.buttonDetailWindow.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.buttonDetailWindow.Enabled = false;
      this.buttonDetailWindow.Location = new Point(186, 640);
      this.buttonDetailWindow.Margin = new Padding(4, 4, 4, 4);
      this.buttonDetailWindow.Name = "buttonDetailWindow";
      this.buttonDetailWindow.Size = new Size(106, 28);
      this.buttonDetailWindow.TabIndex = 1;
      this.buttonDetailWindow.Text = "Detail Window";
      this.buttonDetailWindow.UseVisualStyleBackColor = true;
      this.buttonDetailWindow.Click += new System.EventHandler(this.buttonDetailWindow_Click);
      this.label4.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label4.AutoSize = true;
      this.label4.Location = new Point(49, 213);
      this.label4.Margin = new Padding(4, 0, 4, 0);
      this.label4.Name = "label4";
      this.label4.Size = new Size(143, 17);
      this.label4.TabIndex = 4;
      this.label4.Text = "Max number of types:";
      this.textBoxMaxNumberOfTypes.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.textBoxMaxNumberOfTypes.Location = new Point(196, 208);
      this.textBoxMaxNumberOfTypes.Margin = new Padding(4, 4, 4, 4);
      this.textBoxMaxNumberOfTypes.Name = "textBoxMaxNumberOfTypes";
      this.textBoxMaxNumberOfTypes.Size = new Size(132, 22);
      this.textBoxMaxNumberOfTypes.TabIndex = 5;
      this.buttonClearData.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.buttonClearData.Location = new Point(83, 640);
      this.buttonClearData.Margin = new Padding(4, 4, 4, 4);
      this.buttonClearData.Name = "buttonClearData";
      this.buttonClearData.Size = new Size(95, 28);
      this.buttonClearData.TabIndex = 1;
      this.buttonClearData.Text = "Clear data";
      this.buttonClearData.UseVisualStyleBackColor = true;
      this.buttonClearData.Click += new System.EventHandler(this.buttonClearData_Click);
      this.buttonGenerateTypeInfos.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonGenerateTypeInfos.Enabled = false;
      this.buttonGenerateTypeInfos.Location = new Point(907, 640);
      this.buttonGenerateTypeInfos.Margin = new Padding(4);
      this.buttonGenerateTypeInfos.Name = "buttonGenerateTypeInfos";
      this.buttonGenerateTypeInfos.Size = new Size(145, 28);
      this.buttonGenerateTypeInfos.TabIndex = 1;
      this.buttonGenerateTypeInfos.Text = "Generate type infos";
      this.buttonGenerateTypeInfos.UseVisualStyleBackColor = true;
      this.buttonGenerateTypeInfos.Click += new System.EventHandler(this.buttonGenerateTypeInfos_Click);
      this.buttonAnalyseMeters.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonAnalyseMeters.Enabled = false;
      this.buttonAnalyseMeters.Location = new Point(503, 640);
      this.buttonAnalyseMeters.Margin = new Padding(4);
      this.buttonAnalyseMeters.Name = "buttonAnalyseMeters";
      this.buttonAnalyseMeters.Size = new Size(129, 28);
      this.buttonAnalyseMeters.TabIndex = 1;
      this.buttonAnalyseMeters.Text = "Analyse Meters";
      this.buttonAnalyseMeters.UseVisualStyleBackColor = true;
      this.buttonAnalyseMeters.Click += new System.EventHandler(this.buttonAnalyseMeters_Click);
      this.tabControl1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tabControl1.Controls.Add((Control) this.tabPageTable);
      this.tabControl1.Controls.Add((Control) this.tabPageSettings);
      this.tabControl1.Location = new Point(-1, 0);
      this.tabControl1.Name = "tabControl1";
      this.tabControl1.SelectedIndex = 0;
      this.tabControl1.Size = new Size(1183, 603);
      this.tabControl1.TabIndex = 6;
      this.tabPageTable.Controls.Add((Control) this.dataGridView1);
      this.tabPageTable.Location = new Point(4, 25);
      this.tabPageTable.Name = "tabPageTable";
      this.tabPageTable.Padding = new Padding(3);
      this.tabPageTable.Size = new Size(1175, 574);
      this.tabPageTable.TabIndex = 0;
      this.tabPageTable.Text = "Table";
      this.tabPageTable.UseVisualStyleBackColor = true;
      this.tabPageSettings.Controls.Add((Control) this.dateTimePicker1);
      this.tabPageSettings.Controls.Add((Control) this.textBoxFromMeterId);
      this.tabPageSettings.Controls.Add((Control) this.textBoxMaxNumberOfTypes);
      this.tabPageSettings.Controls.Add((Control) this.buttonReduceTypeList);
      this.tabPageSettings.Controls.Add((Control) this.label4);
      this.tabPageSettings.Controls.Add((Control) this.buttonTypeListWithoutMeterDate);
      this.tabPageSettings.Controls.Add((Control) this.textBoxToMeterInfoId);
      this.tabPageSettings.Controls.Add((Control) this.label3);
      this.tabPageSettings.Controls.Add((Control) this.textBoxReduceTypeList);
      this.tabPageSettings.Controls.Add((Control) this.label5);
      this.tabPageSettings.Controls.Add((Control) this.label1);
      this.tabPageSettings.Controls.Add((Control) this.label2);
      this.tabPageSettings.Location = new Point(4, 25);
      this.tabPageSettings.Name = "tabPageSettings";
      this.tabPageSettings.Padding = new Padding(3);
      this.tabPageSettings.Size = new Size(1175, 574);
      this.tabPageSettings.TabIndex = 1;
      this.tabPageSettings.Text = "Settings";
      this.tabPageSettings.UseVisualStyleBackColor = true;
      this.buttonAnalyseAllMeters.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.buttonAnalyseAllMeters.Enabled = false;
      this.buttonAnalyseAllMeters.Location = new Point(328, 640);
      this.buttonAnalyseAllMeters.Margin = new Padding(4);
      this.buttonAnalyseAllMeters.Name = "buttonAnalyseAllMeters";
      this.buttonAnalyseAllMeters.Size = new Size(167, 28);
      this.buttonAnalyseAllMeters.TabIndex = 1;
      this.buttonAnalyseAllMeters.Text = "Analyse all Meters";
      this.buttonAnalyseAllMeters.UseVisualStyleBackColor = true;
      this.buttonAnalyseAllMeters.Click += new System.EventHandler(this.buttonAnalyseMeters_Click);
      this.label5.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label5.AutoSize = true;
      this.label5.Location = new Point(114, 15);
      this.label5.Margin = new Padding(4, 0, 4, 0);
      this.label5.Name = "label5";
      this.label5.Size = new Size(74, 17);
      this.label5.TabIndex = 4;
      this.label5.Text = "Start date:";
      this.dateTimePicker1.Format = DateTimePickerFormat.Short;
      this.dateTimePicker1.Location = new Point(196, 15);
      this.dateTimePicker1.Name = "dateTimePicker1";
      this.dateTimePicker1.Size = new Size(132, 22);
      this.dateTimePicker1.TabIndex = 6;
      this.dateTimePicker1.Value = new DateTime(2000, 1, 1, 0, 0, 0, 0);
      this.AutoScaleDimensions = new SizeF(8f, 16f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1185, 671);
      this.Controls.Add((Control) this.tabControl1);
      this.Controls.Add((Control) this.textBoxState);
      this.Controls.Add((Control) this.buttonAnalyseAllMeters);
      this.Controls.Add((Control) this.buttonAnalyseMeters);
      this.Controls.Add((Control) this.buttonDetailWindow);
      this.Controls.Add((Control) this.buttonMBusListeTypes);
      this.Controls.Add((Control) this.buttonClearData);
      this.Controls.Add((Control) this.buttonBreak);
      this.Controls.Add((Control) this.buttonFunctionUsage);
      this.Controls.Add((Control) this.buttonGenerateTypeInfos);
      this.Controls.Add((Control) this.buttonShowTypeList);
      this.Margin = new Padding(4, 4, 4, 4);
      this.Name = nameof (TypeAnalysis);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = nameof (TypeAnalysis);
      ((ISupportInitialize) this.dataGridView1).EndInit();
      this.tabControl1.ResumeLayout(false);
      this.tabPageTable.ResumeLayout(false);
      this.tabPageSettings.ResumeLayout(false);
      this.tabPageSettings.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private enum ExtendedMeterInfoColum
    {
      First_prod,
      Last_prod,
      Meters,
      TypLoad,
      MeterLoad,
      MeterMBusLists,
    }
  }
}


--- TypeDetailWindow.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.TypeDetailWindow
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace GMM_Handler
{
  public class TypeDetailWindow : Form
  {
    private IContainer components = (IContainer) null;
    private DataGridView dataGridViewDetails;
    private DataGridViewTextBoxColumn InfoName;
    private DataGridViewTextBoxColumn InfoValue;

    public TypeDetailWindow() => this.InitializeComponent();

    internal void SetDataFromRow(DataRow TheRow)
    {
      this.dataGridViewDetails.Rows.Clear();
      for (int index1 = 0; index1 < TheRow.Table.Columns.Count; ++index1)
      {
        string columnName = TheRow.Table.Columns[index1].ColumnName;
        string str = TheRow[index1].ToString();
        if (columnName == "MeterLoad")
        {
          int num = 0;
          string[] strArray1 = str.Split('|');
          if (!(strArray1[0] == ""))
          {
            for (int index2 = 0; index2 < strArray1.Length; ++index2)
            {
              string[] strArray2 = strArray1[index2].Split(';');
              if (strArray2.Length != 1 || !(strArray2[0] == ""))
              {
                for (int index3 = 0; index3 < strArray2.Length; ++index3)
                {
                  if (!(strArray2[index3] == ""))
                  {
                    int index4 = this.dataGridViewDetails.Rows.Add();
                    if (strArray2[index3].StartsWith("M:"))
                    {
                      ++num;
                      this.dataGridViewDetails.Rows[index4].Cells[0].Value = (object) (num.ToString() + ": MeterNumber");
                      this.dataGridViewDetails.Rows[index4].Cells[1].Value = (object) strArray2[index3].Substring(2);
                    }
                    else if (strArray2[index3].StartsWith("P:"))
                    {
                      this.dataGridViewDetails.Rows[index4].Cells[0].Value = (object) (num.ToString() + ": Production");
                      this.dataGridViewDetails.Rows[index4].Cells[1].Value = (object) strArray2[index3].Substring(2);
                    }
                    else if (strArray2[index3].StartsWith("A:"))
                    {
                      this.dataGridViewDetails.Rows[index4].Cells[0].Value = (object) (num.ToString() + ": Aproval");
                      this.dataGridViewDetails.Rows[index4].Cells[1].Value = (object) strArray2[index3].Substring(2);
                    }
                    else if (strArray2[index3].StartsWith("D:"))
                    {
                      this.dataGridViewDetails.Rows[index4].Cells[0].Value = (object) (num.ToString() + ": LastDataFrom");
                      this.dataGridViewDetails.Rows[index4].Cells[1].Value = (object) strArray2[index3].Substring(2);
                    }
                    else
                    {
                      this.dataGridViewDetails.Rows[index4].Cells[0].Value = (object) (num.ToString() + ": MeterInfo");
                      this.dataGridViewDetails.Rows[index4].Cells[1].Value = (object) strArray2[index3];
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          int index5 = this.dataGridViewDetails.Rows.Add();
          this.dataGridViewDetails.Rows[index5].Cells[0].Value = (object) columnName;
          this.dataGridViewDetails.Rows[index5].Cells[1].Value = (object) str;
        }
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.dataGridViewDetails = new DataGridView();
      this.InfoName = new DataGridViewTextBoxColumn();
      this.InfoValue = new DataGridViewTextBoxColumn();
      ((ISupportInitialize) this.dataGridViewDetails).BeginInit();
      this.SuspendLayout();
      this.dataGridViewDetails.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dataGridViewDetails.Columns.AddRange((DataGridViewColumn) this.InfoName, (DataGridViewColumn) this.InfoValue);
      this.dataGridViewDetails.Dock = DockStyle.Fill;
      this.dataGridViewDetails.Location = new Point(0, 0);
      this.dataGridViewDetails.Name = "dataGridViewDetails";
      this.dataGridViewDetails.Size = new Size(730, 417);
      this.dataGridViewDetails.TabIndex = 0;
      this.InfoName.AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
      this.InfoName.HeaderText = "InfoName";
      this.InfoName.Name = "InfoName";
      this.InfoName.Width = 78;
      this.InfoValue.AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
      this.InfoValue.HeaderText = "InfoValue";
      this.InfoValue.Name = "InfoValue";
      this.InfoValue.Width = 77;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(730, 417);
      this.Controls.Add((Control) this.dataGridViewDetails);
      this.Name = nameof (TypeDetailWindow);
      this.Text = nameof (TypeDetailWindow);
      ((ISupportInitialize) this.dataGridViewDetails).EndInit();
      this.ResumeLayout(false);
    }
  }
}


--- WritePermTable.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.WritePermTable
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  internal class WritePermTable : LinkBlock
  {
    internal WritePermTable(Meter MyMeterIn)
      : base(MyMeterIn, LinkBlockTypes.WritePermTable)
    {
    }
  }
}


--- ZelsiusBaseSettings.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.ZelsiusBaseSettings
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System.Collections;

#nullable disable
namespace GMM_Handler
{
  public class ZelsiusBaseSettings
  {
    public bool complete;
    public double PulsValueInLiterPerImpuls;
    public string EnergyUnit;
    public string VolumeUnit;
    public string VisibleEnergyUnit;
    public string VisibleVolumeUnit;
    internal double PulsValueInLiterPerImpulsUsed;
    public int VolumeUnitIndex;
    public int VolumeLinearUnitIndex;
    internal int ZelsiusVolPulsValue;
    public sbyte Vol_SumExpo;
    public int EnergyUnitIndex;
    public int EnergyLinearUnitIndex;
    public byte Energy_SumExpo;
    internal int ZelsiusEnergyPulsValue;
    internal int PowerUnitIndex;
    internal int PowerLinearUnitIndex;
    public string Input1Unit;
    public double Input1PulsValue;
    public string Input2Unit;
    public double Input2PulsValue;
    public int Input1UnitIndex;
    public int Input2UnitIndex;
    public short MBusVolumeVIF = -1;
    public short MBusFlowVIF = -1;
    public short MBusEnergieVIF = -1;
    public short MBusPowerVIF = -1;
    public short MBusInput1VIF = -1;
    public short MBusInput2VIF = -1;
    public string BaseConfig;
    internal int BaseConfigIndex;
    public ArrayList Frames;
    public SortedList MeterBaseParameter;

    public ZelsiusBaseSettings()
    {
      this.PulsValueInLiterPerImpuls = -1.0;
      this.EnergyUnit = "?";
      this.VolumeUnit = "?";
      this.Input1Unit = "?";
      this.Input2Unit = "?";
      this.VisibleEnergyUnit = "?";
      this.VisibleVolumeUnit = "?";
      this.BaseConfig = "nil";
      this.Vol_SumExpo = (sbyte) 0;
      this.Energy_SumExpo = (byte) 0;
    }

    public ZelsiusBaseSettings(bool UseDefaultValues)
    {
      if (!UseDefaultValues)
        return;
      this.PulsValueInLiterPerImpuls = 10.0;
      this.EnergyUnit = "0.000MWH";
      this.VolumeUnit = "0.000m\u00B3";
      this.Input1Unit = "m\u00B3";
      this.Input2Unit = "m\u00B3";
      this.VisibleEnergyUnit = "?";
      this.VisibleVolumeUnit = "?";
      this.BaseConfig = "nil";
      this.Vol_SumExpo = (sbyte) 0;
      this.Energy_SumExpo = (byte) 0;
    }

    public ZelsiusBaseSettings Clone()
    {
      return new ZelsiusBaseSettings(false)
      {
        complete = this.complete,
        PulsValueInLiterPerImpuls = this.PulsValueInLiterPerImpuls,
        EnergyUnit = this.EnergyUnit,
        VolumeUnit = this.VolumeUnit,
        VisibleEnergyUnit = this.VisibleEnergyUnit,
        VisibleVolumeUnit = this.VisibleVolumeUnit,
        PulsValueInLiterPerImpulsUsed = this.PulsValueInLiterPerImpulsUsed,
        VolumeUnitIndex = this.VolumeUnitIndex,
        VolumeLinearUnitIndex = this.VolumeLinearUnitIndex,
        ZelsiusVolPulsValue = this.ZelsiusVolPulsValue,
        Vol_SumExpo = this.Vol_SumExpo,
        EnergyUnitIndex = this.EnergyUnitIndex,
        EnergyLinearUnitIndex = this.EnergyLinearUnitIndex,
        Energy_SumExpo = this.Energy_SumExpo,
        ZelsiusEnergyPulsValue = this.ZelsiusEnergyPulsValue,
        PowerUnitIndex = this.PowerUnitIndex,
        PowerLinearUnitIndex = this.PowerLinearUnitIndex,
        Input1Unit = this.Input1Unit,
        Input1PulsValue = this.Input1PulsValue,
        Input2Unit = this.Input2Unit,
        Input2PulsValue = this.Input2PulsValue,
        Input1UnitIndex = this.Input1UnitIndex,
        Input2UnitIndex = this.Input2UnitIndex,
        MBusVolumeVIF = this.MBusVolumeVIF,
        MBusFlowVIF = this.MBusFlowVIF,
        MBusEnergieVIF = this.MBusEnergieVIF,
        MBusPowerVIF = this.MBusPowerVIF,
        MBusInput1VIF = this.MBusInput1VIF,
        MBusInput2VIF = this.MBusInput2VIF,
        BaseConfig = this.BaseConfig,
        BaseConfigIndex = this.BaseConfigIndex
      };
    }
  }
}


--- ZelsiusInterpreter.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.ZelsiusInterpreter
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Diagnostics;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class ZelsiusInterpreter
  {
    private ZelsiusMath MyZelsiusMath;
    private uint TheEepAdr;
    private byte[] TheRam = new byte[512];
    private byte[] TheEEProm;
    private uint TheEEPromSize;
    private bool[] TheDisplay;
    private int Dis_Flags = 0;
    private uint Dis_Address = 0;
    private ushort Sta_Status = 0;
    private ushort Mai_Events2 = 0;
    private ushort Itr_Prozessabbild = 0;
    private const byte DII_FRAME_SEGS1 = 1;
    private const byte DII_FRAME_SEGS2 = 2;
    private const byte DII_FRAME_SEGS3 = 4;
    private const byte DII_FRAME_SEGS4 = 8;
    private const byte DII_FRAME_MENUPOS = 16;
    private const byte DII_FRAME_BLINK = 32;
    private const byte DII_FRAME_TEXT = 128;
    private const byte DII_FRAME_SEGS1_DEC1 = 1;
    private const byte DII_FRAME_SEGS1_DEC2 = 2;
    private const byte DII_FRAME_SEGS1_DEC3 = 4;
    private const byte DII_FRAME_SEGS1_FRAME1 = 8;
    private const byte DII_FRAME_SEGS1_FRAME2 = 16;
    private const byte DII_FRAME_SEGS1_FRAME3 = 32;
    private const byte DII_FRAME_SEGS1_VL_TEMP = 64;
    private const byte DII_FRAME_SEGS1_RL_TEMP = 128;
    private const byte DII_FRAME_SEGS2_CUBIC_M = 1;
    private const byte DII_FRAME_SEGS2_LITRE = 2;
    private const byte DII_FRAME_SEGS2_SLASH = 4;
    private const byte DII_FRAME_SEGS2_HOUR = 8;
    private const byte DII_FRAME_SEGS2_KILO = 16;
    private const byte DII_FRAME_SEGS2_WATT = 32;
    private const byte DII_FRAME_SEGS2_MEGA = 64;
    private const byte DII_FRAME_SEGS2_MEGA_JOULE = 128;
    private const byte DII_FRAME_SEGS3_DEC4 = 1;
    private const byte DII_FRAME_SEGS3_DEC7 = 2;
    private const byte DII_FRAME_SEGS3_COLON = 4;
    private const byte DII_FRAME_SEGS3_VL_FLOW = 8;
    private const byte DII_FRAME_SEGS3_D0_SEGB = 16;
    private const byte DII_FRAME_SEGS3_D0_SEGC = 32;
    private const byte DII_FRAME_SEGS3_DOOR = 64;
    private const byte DII_FRAME_SEGS3_WARNING = 128;
    private const byte DII_FRAME_SEGS4_COLD = 1;
    private const byte DII_FRAME_SEGS4_CAL = 2;
    private const byte DII_FRAME_SEGS4_MAX_VAL = 4;
    private const byte DII_FRAME_SEGS4_RADIO = 8;
    private const byte DII_FRAME_SEGS4_TOWER = 16;
    private const byte DII_FRAME_SEGS4_Special = 224;
    private const byte DII_FRAME_SEGS4frei_20 = 32;
    private const byte DII_FRAME_SEGS4frei_40 = 64;
    private const byte DII_FRAME_SEGS4_Status_On = 128;
    private const byte DII_FRAME_TEXTFOLLOW = 16;
    private static byte[] LCDZ1_FrameByteList = new byte[32]
    {
      (byte) 16,
      (byte) 16,
      (byte) 16,
      (byte) 16,
      (byte) 2,
      (byte) 1,
      (byte) 16,
      (byte) 128,
      (byte) 8,
      (byte) 128,
      (byte) 64,
      (byte) 16,
      (byte) 2,
      (byte) 4,
      (byte) 1,
      (byte) 32,
      (byte) 16,
      (byte) 16,
      (byte) 16,
      (byte) 16,
      (byte) 32,
      (byte) 64,
      (byte) 32,
      (byte) 8,
      (byte) 4,
      (byte) 4,
      (byte) 64,
      (byte) 16,
      (byte) 128,
      (byte) 0,
      (byte) 0,
      (byte) 0
    };
    private const int DESIGNER_LCD_MENU2_BIT = 0;
    private const int DESIGNER_LCD_MENU3_BIT = 1;
    private const int DESIGNER_LCD_MENU_ZEILE = 2;
    private const int DESIGNER_LCD_MONEY_BIT = 3;
    private const int DESIGNER_LCD_TAP_BIT = 4;
    private const int DESIGNER_LCD_WARNING_BIT = 5;
    private const int DESIGNER_LCD_BATTERY_BIT = 6;
    private const int DESIGNER_LCD_DOSE_BIT = 7;
    private const int DESIGNER_LCD_LETTER_BIT = 8;
    private const int DESIGNER_LCD_TARIF_BIT = 9;
    private const int DESIGNER_LCD_MONTH_BIT = 10;
    private const int DESIGNER_LCD_DAY_BIT = 11;
    private const int DESIGNER_LCD_SINUS_BIT = 12;
    private const int DESIGNER_LCD_UP_BIT = 13;
    private const int DESIGNER_LCD_DOWN_BIT = 14;
    private const int DESIGNER_LCD_LEFT_BIT = 15;
    private const int DESIGNER_LCD_RIGHT_BIT = 16;
    private const int DESIGNER_LCD_STORAGE_BIT = 17;
    private const int DESIGNER_LCD_WARM_BIT = 18;
    private const int DESIGNER_LCD_DOOR_BIT = 19;
    private const int DESIGNER_LCD_SLASH_BIT = 20;
    private const int DESIGNER_LCD_LITRE_BIT = 21;
    private const int DESIGNER_LCD_HOUR_BIT = 22;
    private const int DESIGNER_LCD_CUBIC_M_BIT = 23;
    private const int DESIGNER_LCD_DEC4_K_BIT = 24;
    private const int DESIGNER_LCD_DEC4_BIT = 26;
    private const int DESIGNER_LCD_DEC3_BIT = 27;
    private const int DESIGNER_LCD_DEC2_BIT = 28;
    private const int DESIGNER_LCD_DEC1_BIT = 29;
    private const int DESIGNER_LCD_COLON_BIT = 30;
    private const int DESIGNER_LCD_DEC7_BIT = 31;
    private const int DESIGNER_LCD_FRAME1_BIT = 32;
    private const int DESIGNER_LCD_FRAME2_BIT = 33;
    private const int DESIGNER_LCD_FRAME3_BIT = 34;
    private const int DESIGNER_LCD_VL_TEMP_BIT = 35;
    private const int DESIGNER_LCD_RL_TEMP_BIT = 36;
    private const int DESIGNER_LCD_KILO_BIT = 37;
    private const int DESIGNER_LCD_WATT_BIT = 38;
    private const int DESIGNER_LCD_MEGA_BIT = 39;
    private const int DESIGNER_LCD_MEGA_JOULE_BIT = 40;
    private const int DESIGNER_LCD_VL_FLOW_BIT = 41;
    private const int DESIGNER_LCD_D0_SEGC_BIT = 42;
    private const int DESIGNER_LCD_D0_SEGB_BIT = 43;
    private const int DESIGNER_LCD_COLD_BIT = 44;
    private const int DESIGNER_LCD_CAL_BIT = 45;
    private const int DESIGNER_LCD_MAX_VAL_BIT = 46;
    private const int DESIGNER_LCD_RADIO_BIT = 47;
    private const int DESIGNER_LCD_TOWER_BIT = 48;
    private const int DESIGNER_LCD_ROWSEG_DP = 49;
    private const int DESIGNER_LCD_ROWSEG_A = 50;
    private const int DESIGNER_LCD_ROWSEG_B = 51;
    private const int DESIGNER_LCD_ROWSEG_C = 52;
    private const int DESIGNER_LCD_ROWSEG_D = 53;
    private const int DESIGNER_LCD_ROWSEG_E = 54;
    private const int DESIGNER_LCD_ROWSEG_F = 55;
    private const int DESIGNER_LCD_ROWSEG_G = 56;
    private const int DESIGNER_LCD_MENU1_BIT = 57;
    private const int DESIGNER_LCD_TEXT_BIT_ADR = 60;
    private const int DESIGNER_LCD_DIGIT_MASK_S1 = 254;
    private const int DESIGNER_LCD_DIGIT_MASK_Z1 = 239;
    private const int DESIGNER_LCD_SEG_A = 1;
    private const int DESIGNER_LCD_SEG_B = 2;
    private const int DESIGNER_LCD_SEG_C = 3;
    private const int DESIGNER_LCD_SEG_D = 4;
    private const int DESIGNER_LCD_SEG_E = 5;
    private const int DESIGNER_LCD_SEG_F = 6;
    private const int DESIGNER_LCD_SEG_G = 7;
    private const int DESIGNER_LCD_SEG_DP = 0;
    private ZelsiusInterpreter.DisplayFunction[] Itr_DispFunctionTab;
    private ZelsiusInterpreter.RuntimeFunction[] Itr_RunFunctionTab;
    private const byte DII_BY_CLICK_FOLLOW = 8;
    private const byte DII_BY_PRESS_FOLLOW = 4;
    private const byte DII_BY_HOLD_FOLLOW = 2;
    private const byte DII_BY_TIMEOUT_FOLLOW = 1;
    private const byte DII_BY_CLICK_JUMP = 128;
    private const byte DII_BY_PRESS_JUMP = 64;
    private const byte DII_BY_HOLD_JUMP = 32;
    private const byte DII_BY_TIMEOUT_JUMP = 16;
    private const byte DII_BY_CLICK_NONE = 0;
    private const byte DII_BY_PRESS_NONE = 0;
    private const byte DII_BY_HOLD_NONE = 0;
    private const byte DII_BY_TIMEOUT_NONE = 0;
    private const ushort ITR_EDIT_ACTIVE = 256;
    private const ushort ITR_DISPLAY_DOOR = 512;
    private const ushort ITR_DISPLAY_BATTERY = 1024;
    private const ushort ITR_EEPROM_RUNTIME = 2048;
    private const ushort ITR_EEPROM_TEMP_RUNTIME = 4096;
    private const ushort ITR_RUNTIME_STOP = 8192;
    private const ushort ITR_DISPLAY_DIRECT = 16384;
    private const ushort ITR_DOOR_ON = 32768;
    private const ushort ITR_JUMP_MASK = 255;
    private const ushort ITR_FUNC_RESET_SAMPLE = 0;
    private const bool ITR_CODE_FROM_EEPROM = true;
    private const bool ITR_CODE_FROM_RAM = false;
    private const byte RUI_CODE_Set = 129;
    private const byte RUI_CODE_Clear = 1;
    private const byte RUI_CODE_SkipT = 130;
    private const byte RUI_CODE_SkipF = 2;
    private const byte RUI_PAB_OUT1 = 0;
    private const byte RUI_PAB_OUT2 = 8;
    private const byte RUI_PAB_IN1 = 16;
    private const byte RUI_PAB_IN2 = 24;
    private const byte RUI_PAB_Flow = 32;
    private const byte RUI_PAB_Carry = 40;
    private const byte RUI_PAB_Zero = 48;
    private const byte RUI_PAB_INDIRECT = 56;
    private const byte RUI_PAB_IR_PER_KEY = 64;
    private const byte RUI_PAB_IR_ON = 72;
    private const byte RUI_PAB_2400BAUD = 80;
    private const byte RUI_PAB_Flag0 = 88;
    private const byte RUI_PAB_Flag1 = 96;
    private const byte RUI_PAB_Flag2 = 104;
    private const byte RUI_PAB_Flag3 = 112;
    private const byte RUI_PAB_Unlocked = 120;
    private const ushort ITR_PAB_OUT1 = 1;
    private const ushort ITR_PAB_OUT2 = 2;
    private const ushort ITR_PAB_IN1 = 4;
    private const ushort ITR_PAB_IN2 = 8;
    private const ushort ITR_PAB_FLOW = 16;
    private const ushort ITR_PAB_CARRY = 32;
    private const ushort ITR_PAB_ZERO = 64;
    private const ushort ITR_PAB_INDIRECT = 128;
    private const ushort ITR_PAB_IR_PER_KEY = 256;
    private const ushort ITR_PAB_IR_ON = 512;
    private const ushort ITR_PAB_2400BAUD = 1024;
    private const ushort ITR_PAB_BACK = 0;
    private const ushort ITR_PAB_RESET_CLR_MASK = 63740;
    private const ushort ITR_PAB_RESET_SET_MASK = 3;
    private const ushort ITR_PAB_RESET_BUS_START = 32768;
    private const byte RUI_CODE_SkipGE = 42;
    private const byte RUI_CODE_SkipLT = 170;
    private const byte RUI_CODE_SkipEQ = 178;
    private const byte RUI_CODE_SkipNE = 50;
    private const byte RUI_CODE_Load = 131;
    private const byte RUI_CODE_Store = 3;
    private const byte RUI_CODE_Add = 132;
    private const byte RUI_CODE_Sub = 4;
    private const byte RUI_CODE_Mul = 133;
    private const byte RUI_CODE_Div = 5;
    private const byte RUI_VAR_EEPROM = 64;
    private const byte RUI_VAR_1BYTE = 0;
    private const byte RUI_VAR_2BYTE = 8;
    private const byte RUI_VAR_4BYTE = 24;
    private const byte RUI_KONST_1BYTE = 32;
    private const byte RUI_KONST_2BYTE = 40;
    private const byte RUI_KONST_4BYTE = 56;
    private const byte RUI_VAR_UINT32_1 = 96;
    private const byte RUI_VAR_UINT32_2 = 104;
    private const byte RUI_VAR_UINT32_3 = 112;
    private const byte RUI_VAR_UINT32_4 = 120;
    private const byte RUI_VAR_Volume = 16;
    private const byte RUI_VAR_AkkuX = 48;
    private const byte RUI_VAR_Flow = 80;
    private const byte RUI_CODE_And = 192;
    private const byte RUI_CODE_Or = 200;
    private const byte RUI_CODE_Xor = 208;
    private const byte RUI_CODE_Mod = 216;
    private const byte RUI_CODE_Mul64 = 224;
    private const byte RUI_CODE_Div64 = 232;
    private const byte RUI_CODE_Compare = 240;
    private const byte RUI_CODE_Load_Volume = 147;
    private const byte RUI_CODE_Load_AkkuX = 179;
    private const byte RUI_CODE_Load_PulsTime = 211;
    private const byte RUI_CODE_Load_HighResVol = 19;
    private const byte RUI_CODE_Load_SysTime = 51;
    private const byte RUI_CODE_Load_Energie = 83;
    private const byte RUI_CODE_LOGGER_STORE_1BYTE = 35;
    private const byte RUI_CODE_LOGGER_STORE_2BYTE = 43;
    private const byte RUI_CODE_LOGGER_STORE_4BYTE = 59;
    private const byte RUI_CODE_End = 0;
    private const byte RUI_CODE_IntervalNew = 8;
    private const byte RUI_CODE_DecDiff = 16;
    private const byte RUI_CODE_SetClick = 24;
    private const byte RUI_CODE_SetPress = 32;
    private const byte RUI_CODE_SetHold = 40;
    private const byte RUI_CODE_Load0 = 48;
    private const byte RUI_CODE_NextLoggerEntry = 56;
    private const byte RUI_CODE_Xch = 64;
    private const byte RUI_CODE_SetDisplay = 72;
    private const byte RUI_CODE_Backup = 80;
    private const byte RUI_CODE_Store_CycleTime = 88;
    private const byte RUI_CODE_Store_TimeoutTime = 96;
    private const byte RUI_CODE_ExtractMonth = 104;
    private const byte RUI_CODE_ExtractYear = 112;
    private const byte RUI_CODE_EepRuntime = 120;
    private const byte RUI_CODE_ChangeMonth = 128;
    private const byte RUI_CODE_SetToNextYear = 136;
    private const byte RUI_CODE_Copy = 144;
    private const byte RUI_CODE_Past = 152;
    private const byte RUI_CODE_Load_ColdEnergie = 160;
    private const byte RUI_CODE_ManageOpto = 168;
    private const byte RUI_CODE_Jump = 6;
    private const byte RUI_CODE_Interval = 7;
    private const byte RUI_CODE_Logger = 135;
    private const byte RUI_CODE_IntervalTest = 127;
    private const byte RUI_TIME_Week = 0;
    private const byte RUI_TIME_Day = 8;
    private const byte RUI_TIME_Hours12 = 16;
    private const byte RUI_TIME_Hours6 = 24;
    private const byte RUI_TIME_Hours2 = 32;
    private const byte RUI_TIME_Hour = 40;
    private const byte RUI_TIME_Minutes30 = 48;
    private const byte RUI_TIME_Minutes15 = 56;
    private const byte RUI_TIME_Minutes10 = 64;
    private const byte RUI_TIME_Minutes5 = 72;
    private const byte RUI_TIME_Year = 80;
    private const byte RUI_TIME_Month6 = 88;
    private const byte RUI_TIME_Month3 = 96;
    private const byte RUI_TIME_Month = 104;
    private const byte RUI_TIME_Extern = 112;
    private const byte LOG_FLAGS_OVERRUN = 128;
    private const byte LOG_FLAGS_EVENT_SIZE = 127;
    private const byte MAI_EVENT2_BACKUP = 1;
    private const byte MAI_EVENT2_ADC_MEASUREMENT = 2;
    private const byte MAI_EVENT2_SOFTWARE_RESET = 4;
    private const byte MAI_EVENT2_500MS_TASK = 8;
    private const ushort STA_GS_ADC_ERROR_MASK = 7;
    private const ushort STA_GS_ERR_FLAGS_MASK = 65528;
    private const ushort STA_GS_ERR_RESET_MASK = 65535;
    private const ushort STA_GS_INTERPRETER_ERROR = 256;
    private const ushort STA_GS_ERROR_WRITE_PERMISSION = 512;
    private const ushort STA_GS_BATTERY_END = 4096;
    private const ushort STA_GS_DATE_END = 8192;
    private const ushort STA_GS_SPECIAL_STATE = 16384;
    private bool Itr_SkipRequest;
    private ushort Itr_State;
    private ushort Itr_BitMask;
    private uint Itr_Akku;
    private uint Itr_Akku2;
    private uint Itr_AkkuX;
    private byte Itr_Code;
    private byte Itr_LoopCounter;
    private static byte[] SkipBytes = new byte[16]
    {
      (byte) 2,
      (byte) 2,
      (byte) 0,
      (byte) 2,
      (byte) 1,
      (byte) 2,
      (byte) 0,
      (byte) 4,
      (byte) 2,
      (byte) 2,
      (byte) 0,
      (byte) 2,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0
    };
    private const int DII_VARIABLE_FLAG_BYTES = 768;
    private const int DII_VARIABLE_1_BYTE = 0;
    private const int DII_VARIABLE_2_BYTE = 256;
    private const int DII_VARIABLE_4_BYTE = 768;
    private const int DII_VARIABLE_FLAG_RUNTIME = 512;
    private const int DII_VARIABLE_FLAG_REFRESH = 1024;
    private const int DII_VARIABLE_FLAG_EEPROM = 2048;
    private const int DII_VARIABLE_FLAG_ITR_NEXT = 4096;
    private const int DII_VARIABLE_FLAG_DIS_INT = 8192;
    private const int DII_VARIABLE_FLAG_TIME_FORM = 16384;
    private const int DII_VARIABLE_FLAG_INDIRECT = 32768;
    private const int DII_VARIABLE_FLAG_DIGITS = 7;
    private const int DII_VARIABLE_1_DIGIT = 0;
    private const int DII_VARIABLE_2_DIGIT = 1;
    private const int DII_VARIABLE_3_DIGIT = 2;
    private const int DII_VARIABLE_4_DIGIT = 3;
    private const int DII_VARIABLE_5_DIGIT = 4;
    private const int DII_VARIABLE_6_DIGIT = 5;
    private const int DII_VARIABLE_7_DIGIT = 6;
    private const int DII_VARIABLE_8_DIGIT = 7;
    private const int DII_VARIABLE_POSSITION_MASK = 56;
    private const int DII_VARIABLE_POSSITION_0 = 0;
    private const int DII_VARIABLE_POSSITION_1 = 8;
    private const int DII_VARIABLE_POSSITION_2 = 16;
    private const int DII_VARIABLE_POSSITION_3 = 24;
    private const int DII_VARIABLE_POSSITION_4 = 32;
    private const int DII_VARIABLE_POSSITION_5 = 40;
    private const int DII_VARIABLE_POSSITION_6 = 48;
    private const int DII_VARIABLE_POSSITION_7 = 56;
    private const int DII_VARIABLE_FLAG_FILL_0 = 64;
    private const int DII_VARIABLE_FLAG_HEX = 128;
    private const int DII_VARIABLE_FLAG_DATE = 0;
    private const int DII_VARIABLE_FLAG_TIME = 16;
    private const int DII_VARIABLE_FLAG_TEMP = 64;
    private const int DII_VARIABLE_FLAG_ST_MONTH = 32;
    private const int DII_VARIABLE_FLAG_DAY_MONTH = 64;
    private const int DII_VARIABLE_SF_TIME = 16403;
    private const int DII_VARIABLE_SF_TEMP = 16464;
    private const int DII_VARIABLE_SF_DATE = 16389;
    private const int DII_VARIABLE_SF_ST_MONTH = 16417;
    private const int DII_VARIABLE_SF_DAY_MONTH = 16451;
    private const int DII_VARIABLE_FLAG_MASK = 1024;
    private const int DII_VARIABLE_FLAG_MIN_MAX = 4096;
    private const int DII_VARIABLE_FLAG_FUTURE = 128;
    private const int SLCD_DIGIT_BASE_ADR = 153;
    private const int SLCD_RAM_NIBBLE_ADR = 157;
    private const int SLCD_BLINK_MASK_ADR = 158;
    private const int SLCD_BLINK_OFFSET_ADR = 159;
    private const int SLCD_BLINK_STATE_ADR = 160;
    private const byte SLCD_DIGIT_MASK = 239;
    private const byte SLCD_RAM_CLEAR = 16;
    private const int SLCD_DEC1_ADR = 152;
    private const int SLCD_DEC2_ADR = 151;
    private const int SLCD_DEC3_ADR = 150;
    private const int SLCD_DEC4_ADR = 149;
    private const int SLCD_DEC7_ADR = 146;
    private const int SLCD_FRAME1_ADR = 153;
    private const int SLCD_FRAME2_ADR = 155;
    private const int SLCD_FRAME3_ADR = 155;
    private const int SLCD_COLON_ADR = 148;
    private const int SLCD_MENU1_ADR = 145;
    private const int SLCD_MENU2_ADR = 145;
    private const int SLCD_MENU3_ADR = 145;
    private const int SLCD_DOOR_ADR = 156;
    private const int SLCD_WARNING_ADR = 155;
    private const int SLCD_COLD_ADR = 145;
    private const int SLCD_CAL_ADR = 155;
    private const int SLCD_MAX_VAL_ADR = 155;
    private const int SLCD_RADIO_ADR = 155;
    private const int SLCD_TOWER_ADR = 155;
    private const int SLCD_VL_FLOW_ADR = 147;
    private const int SLCD_VL_TEMP_ADR = 145;
    private const int SLCD_RL_TEMP_ADR = 145;
    private const int SLCD_CUBIC_M_ADR = 156;
    private const int SLCD_LITRE_ADR = 156;
    private const int SLCD_SLASH_ADR = 156;
    private const int SLCD_HOUR_ADR = 156;
    private const int SLCD_KILO_ADR = 156;
    private const int SLCD_WATT_ADR = 156;
    private const int SLCD_MEGA_ADR = 156;
    private const int SLCD_MEGA_JOULE_ADR = 155;
    private const int SLCD_D0_SEGB_ADR = 145;
    private const int SLCD_D0_SEGC_ADR = 145;
    private const int SLCD_DEC1_BIT = 16;
    private const int SLCD_DEC2_BIT = 16;
    private const int SLCD_DEC3_BIT = 16;
    private const int SLCD_DEC4_BIT = 16;
    private const int SLCD_DEC7_BIT = 16;
    private const int SLCD_FRAME1_BIT = 16;
    private const int SLCD_FRAME2_BIT = 2;
    private const int SLCD_FRAME3_BIT = 1;
    private const int SLCD_COLON_BIT = 16;
    private const int SLCD_MENU1_BIT = 8;
    private const int SLCD_MENU2_BIT = 2;
    private const int SLCD_MENU3_BIT = 1;
    private const int SLCD_DOOR_BIT = 32;
    private const int SLCD_WARNING_BIT = 8;
    private const int SLCD_COLD_BIT = 4;
    private const int SLCD_CAL_BIT = 4;
    private const int SLCD_MAX_VAL_BIT = 64;
    private const int SLCD_RADIO_BIT = 16;
    private const int SLCD_TOWER_BIT = 128;
    private const int SLCD_VL_FLOW_BIT = 16;
    private const int SLCD_RL_TEMP_BIT = 128;
    private const int SLCD_VL_TEMP_BIT = 16;
    private const int SLCD_CUBIC_M_BIT = 8;
    private const int SLCD_LITRE_BIT = 128;
    private const int SLCD_SLASH_BIT = 64;
    private const int SLCD_HOUR_BIT = 16;
    private const int SLCD_KILO_BIT = 2;
    private const int SLCD_WATT_BIT = 4;
    private const int SLCD_MEGA_BIT = 1;
    private const int SLCD_MEGA_JOULE_BIT = 32;
    private const int SLCD_D0_SEGB_BIT = 32;
    private const int SLCD_D0_SEGC_BIT = 64;
    private const int SLCD_DIGIT_SEG_A_Bit = 128;
    private const int SLCD_DIGIT_SEG_B_Bit = 64;
    private const int SLCD_DIGIT_SEG_C_Bit = 32;
    private const int SLCD_DIGIT_SEG_D_Bit = 1;
    private const int SLCD_DIGIT_SEG_E_Bit = 2;
    private const int SLCD_DIGIT_SEG_F_Bit = 8;
    private const int SLCD_DIGIT_SEG_G_Bit = 4;
    private const int LCD_FORMAT_DIGITS = 7;
    private const int LCD_FORMAT_DIGIT_NR = 56;
    private const int LCD_FORMAT_FILL_BIT = 64;
    private const int LCD_FORMAT_HEX = 128;
    private byte[] Lcd_CodeList = new byte[16]
    {
      (byte) 235,
      (byte) 96,
      (byte) 199,
      (byte) 229,
      (byte) 108,
      (byte) 173,
      (byte) 175,
      (byte) 224,
      (byte) 239,
      (byte) 237,
      (byte) 238,
      (byte) 47,
      (byte) 139,
      (byte) 103,
      (byte) 143,
      (byte) 142
    };
    private byte[] Lcd_DecimalList = new byte[10]
    {
      (byte) 152,
      (byte) 151,
      (byte) 150,
      (byte) 149,
      (byte) 146,
      (byte) 16,
      (byte) 16,
      (byte) 16,
      (byte) 16,
      (byte) 16
    };
    private byte[] LCD_FrameByteList = new byte[58]
    {
      (byte) 152,
      (byte) 16,
      (byte) 151,
      (byte) 16,
      (byte) 150,
      (byte) 16,
      (byte) 153,
      (byte) 16,
      (byte) 155,
      (byte) 2,
      (byte) 155,
      (byte) 1,
      (byte) 145,
      (byte) 16,
      (byte) 145,
      (byte) 128,
      (byte) 156,
      (byte) 8,
      (byte) 156,
      (byte) 128,
      (byte) 156,
      (byte) 64,
      (byte) 156,
      (byte) 16,
      (byte) 156,
      (byte) 2,
      (byte) 156,
      (byte) 4,
      (byte) 156,
      (byte) 1,
      (byte) 155,
      (byte) 32,
      (byte) 149,
      (byte) 16,
      (byte) 146,
      (byte) 16,
      (byte) 148,
      (byte) 16,
      (byte) 147,
      (byte) 16,
      (byte) 145,
      (byte) 32,
      (byte) 145,
      (byte) 64,
      (byte) 156,
      (byte) 32,
      (byte) 155,
      (byte) 8,
      (byte) 145,
      (byte) 4,
      (byte) 155,
      (byte) 4,
      (byte) 155,
      (byte) 64,
      (byte) 155,
      (byte) 16,
      (byte) 155,
      (byte) 128
    };
    private byte[] Lcd_MenueColumnList = new byte[7]
    {
      (byte) 8,
      (byte) 2,
      (byte) 1,
      (byte) 10,
      (byte) 9,
      (byte) 3,
      (byte) 11
    };

    public ZelsiusInterpreter(ZelsiusMath ZelsiusMath)
    {
      this.MyZelsiusMath = ZelsiusMath;
      this.Itr_DispFunctionTab = new ZelsiusInterpreter.DisplayFunction[7]
      {
        new ZelsiusInterpreter.DisplayFunction(this.ITR_Nop),
        new ZelsiusInterpreter.DisplayFunction(this.Itr_JumpAbsolut),
        new ZelsiusInterpreter.DisplayFunction(this.Dis_Edit),
        new ZelsiusInterpreter.DisplayFunction(this.Itr_RuntimeBlock),
        new ZelsiusInterpreter.DisplayFunction(this.Dis_Constant),
        new ZelsiusInterpreter.DisplayFunction(this.Dis_Variable),
        new ZelsiusInterpreter.DisplayFunction(this.Itr_CalcJump)
      };
      this.Itr_RunFunctionTab = new ZelsiusInterpreter.RuntimeFunction[8]
      {
        new ZelsiusInterpreter.RuntimeFunction(this.Itr_SpecialFunction),
        new ZelsiusInterpreter.RuntimeFunction(this.Itr_SetClear),
        new ZelsiusInterpreter.RuntimeFunction(this.Itr_SkipT_SkipF),
        new ZelsiusInterpreter.RuntimeFunction(this.Itr_LoadStore),
        new ZelsiusInterpreter.RuntimeFunction(this.Itr_AddSub),
        new ZelsiusInterpreter.RuntimeFunction(this.Itr_MulDiv),
        new ZelsiusInterpreter.RuntimeFunction(this.Itr_Jump),
        new ZelsiusInterpreter.RuntimeFunction(this.Itr_Interval)
      };
    }

    internal static string GetUnitString(byte[] EEP_Data, int FrameOffset)
    {
      byte[] numArray1 = new byte[5];
      int num1 = FrameOffset + 1;
      if (((uint) EEP_Data[FrameOffset] & 1U) > 0U)
        numArray1[1] = EEP_Data[num1++];
      if (((uint) EEP_Data[FrameOffset] & 2U) > 0U)
        numArray1[2] = EEP_Data[num1++];
      if (((uint) EEP_Data[FrameOffset] & 4U) > 0U)
        numArray1[3] = EEP_Data[num1++];
      if (((uint) EEP_Data[FrameOffset] & 8U) > 0U)
      {
        byte[] numArray2 = numArray1;
        byte[] numArray3 = EEP_Data;
        int index = num1;
        int num2 = index + 1;
        int num3 = (int) numArray3[index];
        numArray2[4] = (byte) num3;
      }
      string str = ((uint) numArray1[2] & 128U) <= 0U ? (((uint) numArray1[2] & 1U) <= 0U ? (((uint) numArray1[2] & 2U) <= 0U ? (((uint) numArray1[2] & 32U) <= 0U ? "" : "W") : "L") : "m\u00B3") : "GJ";
      if (((uint) numArray1[2] & 16U) > 0U)
        str = "k" + str;
      else if (((uint) numArray1[2] & 64U) > 0U)
        str = "M" + str;
      if (((int) numArray1[2] & 4) != 0 && ((uint) numArray1[2] & 8U) > 0U)
        str += "/h";
      else if (((uint) numArray1[2] & 8U) > 0U)
        str += "h";
      return ((uint) numArray1[1] & 1U) <= 0U ? (((uint) numArray1[1] & 2U) <= 0U ? (((uint) numArray1[1] & 4U) <= 0U ? (((uint) numArray1[3] & 1U) <= 0U ? "0" + str : "0.0000" + str) : "0.000" + str) : "0.00" + str) : "0.0" + str;
    }

    internal bool GetDisplay(
      ByteField EEProm,
      uint EEPromSize,
      uint EEPromStartOffset,
      out bool[] Display)
    {
      this.TheEEProm = EEProm.Data;
      this.TheEEPromSize = EEPromSize;
      this.TheEepAdr = EEPromStartOffset;
      return this.GetDisplay(out Display);
    }

    internal bool GetDisplay(
      byte[] EEProm,
      uint EEPromSize,
      uint EEPromStartOffset,
      out bool[] Display)
    {
      this.TheEEProm = EEProm;
      this.TheEEPromSize = EEPromSize;
      this.TheEepAdr = EEPromStartOffset;
      return this.GetDisplay(out Display);
    }

    internal bool GetDisplay(out bool[] Display)
    {
      this.Itr_Prozessabbild = (ushort) 0;
      byte[] Data;
      if (this.MyZelsiusMath.GetCpuDataWork("DefaultFunction.Itr_Prozessabbild", 2, MemoryLocation.RAM, out Data) && Data != null && Data.Length == 2)
        this.Itr_Prozessabbild = (ushort) ((uint) Data[0] + ((uint) Data[1] << 8));
      int num1 = 0;
      Display = new bool[200];
      this.TheDisplay = Display;
      try
      {
        byte index1;
        do
        {
          index1 = (byte) this.LoadEEPromBYTE((int) this.TheEepAdr);
          if ((int) index1 >= this.Itr_DispFunctionTab.Length)
            return false;
          ++this.TheEepAdr;
          ++num1;
          if (num1 > 20)
            return false;
        }
        while (this.Itr_DispFunctionTab[(int) index1]());
        Display[57] = ((uint) this.TheRam[145] & 8U) > 0U;
        Display[0] = ((uint) this.TheRam[145] & 2U) > 0U;
        Display[1] = ((uint) this.TheRam[145] & 1U) > 0U;
        Display[5] = ((uint) this.TheRam[155] & 8U) > 0U;
        Display[19] = ((uint) this.TheRam[156] & 32U) > 0U;
        Display[20] = ((uint) this.TheRam[156] & 64U) > 0U;
        Display[21] = ((uint) this.TheRam[156] & 128U) > 0U;
        Display[22] = ((uint) this.TheRam[156] & 16U) > 0U;
        Display[23] = ((uint) this.TheRam[156] & 8U) > 0U;
        Display[26] = ((uint) this.TheRam[149] & 16U) > 0U;
        Display[27] = ((uint) this.TheRam[150] & 16U) > 0U;
        Display[28] = ((uint) this.TheRam[151] & 16U) > 0U;
        Display[29] = ((uint) this.TheRam[152] & 16U) > 0U;
        Display[30] = ((uint) this.TheRam[148] & 16U) > 0U;
        Display[35] = ((uint) this.TheRam[145] & 16U) > 0U;
        Display[36] = ((uint) this.TheRam[145] & 128U) > 0U;
        Display[37] = ((uint) this.TheRam[156] & 2U) > 0U;
        Display[38] = ((uint) this.TheRam[156] & 4U) > 0U;
        Display[39] = ((uint) this.TheRam[156] & 1U) > 0U;
        Display[40] = ((uint) this.TheRam[155] & 32U) > 0U;
        Display[32] = ((uint) this.TheRam[153] & 16U) > 0U;
        Display[33] = ((uint) this.TheRam[155] & 2U) > 0U;
        Display[34] = ((uint) this.TheRam[155] & 1U) > 0U;
        Display[44] = ((uint) this.TheRam[145] & 4U) > 0U;
        Display[45] = ((uint) this.TheRam[155] & 4U) > 0U;
        Display[46] = ((uint) this.TheRam[155] & 64U) > 0U;
        Display[47] = ((uint) this.TheRam[155] & 16U) > 0U;
        Display[48] = ((uint) this.TheRam[155] & 128U) > 0U;
        Display[41] = ((uint) this.TheRam[147] & 16U) > 0U;
        Display[43] = ((uint) this.TheRam[145] & 32U) > 0U;
        Display[42] = ((uint) this.TheRam[145] & 64U) > 0U;
        Display[31] = ((uint) this.TheRam[146] & 16U) > 0U;
        int index2 = 146;
        int num2 = 60;
        for (int index3 = 0; index3 < 8; ++index3)
        {
          Display[num2 + 1] = ((uint) this.TheRam[index2] & 128U) > 0U;
          Display[num2 + 2] = ((uint) this.TheRam[index2] & 64U) > 0U;
          Display[num2 + 3] = ((uint) this.TheRam[index2] & 32U) > 0U;
          Display[num2 + 4] = ((uint) this.TheRam[index2] & 1U) > 0U;
          Display[num2 + 5] = ((uint) this.TheRam[index2] & 2U) > 0U;
          Display[num2 + 6] = ((uint) this.TheRam[index2] & 8U) > 0U;
          Display[num2 + 7] = ((uint) this.TheRam[index2] & 4U) > 0U;
          num2 += 8;
          ++index2;
        }
        return true;
      }
      catch (Exception ex)
      {
        Debug.WriteLine("IErr: " + ex.ToString());
        int num3 = 60;
        for (int index = 0; index < 8; ++index)
        {
          Display[num3 + 1] = true;
          Display[num3 + 2] = false;
          Display[num3 + 3] = false;
          Display[num3 + 4] = false;
          Display[num3 + 5] = false;
          Display[num3 + 6] = false;
          Display[num3 + 7] = false;
          num3 += 8;
        }
        return false;
      }
    }

    private bool ITR_Nop() => true;

    private bool Itr_JumpAbsolut()
    {
      this.TheEepAdr = (uint) this.TheEEProm[(int) this.TheEepAdr] + ((uint) this.TheEEProm[(int) this.TheEepAdr + 1] << 8);
      return true;
    }

    private bool Dis_Edit()
    {
      this.Dis_VariableParam();
      if ((this.Dis_Flags & 1024) != 0)
        this.TheEepAdr += 8U;
      if ((this.Dis_Flags & 4096) != 0)
        this.TheEepAdr += 8U;
      this.LCD_Clear();
      this.LCD_WorkFrame();
      this.Dis_VariableRef();
      this.Itr_State |= (ushort) 272;
      return false;
    }

    private bool Itr_RuntimeBlock()
    {
      int num = (int) this.Itr_RunInter();
      return true;
    }

    private bool Dis_Constant()
    {
      this.LCD_Clear();
      this.LCD_WorkFrame();
      return false;
    }

    private bool Itr_CalcJump()
    {
      uint num1 = this.Itr_RunInter();
      byte num2 = this.TheEEProm[(int) this.TheEepAdr];
      if (num2 == byte.MaxValue)
      {
        this.TheEepAdr = num1;
      }
      else
      {
        if (num1 >= (uint) num2)
          num1 = 0U;
        uint index = (uint) ((int) this.TheEepAdr + 1 + (int) num1 * 2);
        this.TheEepAdr = (uint) this.TheEEProm[(int) index] + ((uint) this.TheEEProm[(int) index + 1] << 8);
      }
      return true;
    }

    private bool Value_WorkValueOverrun(ref uint DisplayValue)
    {
      if (DisplayValue <= 99999999U)
        return false;
      if ((DisplayValue & 2147483648U) > 0U)
        DisplayValue += 100000000U;
      else
        DisplayValue -= 100000000U;
      return true;
    }

    private uint Itr_RunInter()
    {
      if (((uint) this.Sta_Status & 256U) > 0U)
        return 0;
      if (this.TheEepAdr != 0U)
      {
        this.Itr_State &= (ushort) 53247;
        this.Itr_LoopCounter = (byte) 0;
        this.Itr_SkipRequest = false;
        do
        {
          this.Itr_Code = this.TheEEProm[(int) this.TheEepAdr];
          if (this.Itr_Code != (byte) 0)
          {
            if (this.Itr_LoopCounter++ != byte.MaxValue)
            {
              this.Itr_Code >>= 3;
              this.Itr_BitMask = (ushort) (1 << ((int) this.Itr_Code & 15));
              this.Itr_RunFunctionTab[(int) this.TheEEProm[(int) this.TheEepAdr++] & 7]();
            }
            else
              goto label_6;
          }
          else
            goto label_4;
        }
        while (((uint) this.Itr_State & 8192U) <= 0U);
        goto label_9;
label_4:
        ++this.TheEepAdr;
        goto label_9;
label_6:
        this.MyZelsiusMath.LastError = MeterMath.Errors.InternalError;
        this.MyZelsiusMath.LastErrorInfo = "Runtime Loop";
      }
label_9:
      return this.Itr_Akku;
    }

    private void Itr_SpecialFunction()
    {
      byte itrCode = this.Itr_Code;
      if (itrCode >= (byte) 24)
      {
        this.Itr_Code = (byte) ((uint) this.TheEEProm[(int) this.TheEepAdr++] >> 3);
        if (this.Itr_SkipIfRequest())
          return;
        this.Itr_LoadStoreWork();
      }
      else if (this.Itr_SkipRequest)
      {
        this.Itr_SkipRequest = false;
        return;
      }
      switch (itrCode)
      {
        case 2:
          this.Value_WorkValueOverrun(ref this.Itr_Akku);
          break;
        case 6:
          this.Itr_Akku = 0U;
          break;
        case 7:
          this.Itr_NextLoggerEntry();
          break;
        case 8:
          uint itrAkku = this.Itr_Akku;
          this.Itr_Akku = this.Itr_AkkuX;
          this.Itr_AkkuX = itrAkku;
          break;
        case 9:
          this.TheEepAdr += 2U;
          break;
        case 10:
          this.Mai_Events2 |= (ushort) 1;
          break;
        case 13:
          this.Itr_Akku = ZR_Calendar.Cal_Sec80ToDate(this.Itr_Akku).Month;
          break;
        case 14:
          this.Itr_Akku = ZR_Calendar.Cal_Sec80ToDate(this.Itr_Akku).Year;
          break;
        case 16:
          this.MyZelsiusMath.LastError = MeterMath.Errors.InternalError;
          this.MyZelsiusMath.LastErrorInfo = "Illegal funtime function ChangeMonth";
          break;
        case 17:
          this.MyZelsiusMath.LastError = MeterMath.Errors.InternalError;
          this.MyZelsiusMath.LastErrorInfo = "Illegal funtime function SetToNextYear";
          break;
        case 18:
          this.Itr_AkkuX = this.Itr_Akku;
          break;
        case 19:
          this.Itr_Akku = this.Itr_AkkuX;
          break;
        case 20:
          this.Itr_Akku = this.LoadRamUINT("Energ_KaelteEnergDisplay");
          break;
        case 24:
          this.Itr_Akku &= this.Itr_Akku2;
          this.Itr_SetFlags();
          break;
        case 25:
          this.Itr_Akku |= this.Itr_Akku2;
          this.Itr_SetFlags();
          break;
        case 26:
          this.Itr_Akku ^= this.Itr_Akku2;
          this.Itr_SetFlags();
          break;
        case 27:
          this.Itr_Akku = this.Itr_Akku2 % this.Itr_Akku;
          this.Itr_SetFlags();
          break;
        case 28:
          ulong num = (ulong) this.Itr_Akku * (ulong) this.Itr_Akku2;
          this.Itr_Akku = (uint) (ushort) num;
          this.Itr_AkkuX = (uint) (ushort) (num >> 32);
          break;
        case 29:
          if (this.Itr_Akku == 0U)
          {
            this.Itr_AkkuX = 0U;
            break;
          }
          this.Itr_Akku = (uint) (((ulong) this.Itr_Akku + (ulong) this.Itr_Akku2) / (ulong) this.Itr_Akku);
          break;
        case 30:
          this.Itr_Akku = this.Itr_Akku2 - this.Itr_Akku;
          this.Itr_SetFlags();
          this.Itr_Akku = this.Itr_Akku2;
          break;
      }
    }

    private void Itr_SetClear()
    {
      if (this.Itr_SkipRequest)
        this.Itr_SkipRequest = false;
      else if (((uint) this.Itr_Code & 16U) > 0U)
        this.Itr_Prozessabbild |= this.Itr_BitMask;
      else
        this.Itr_Prozessabbild &= ~this.Itr_BitMask;
    }

    private void Itr_SkipT_SkipF()
    {
      if (((uint) this.Itr_Code & 16U) > 0U)
      {
        if (((uint) this.Itr_Prozessabbild & (uint) this.Itr_BitMask) <= 0U)
          return;
        this.Itr_SkipRequest = true;
      }
      else if (((int) this.Itr_Prozessabbild & (int) this.Itr_BitMask) == 0)
        this.Itr_SkipRequest = true;
    }

    private void Itr_LoadStore()
    {
      if (this.Itr_SkipIfRequest())
        return;
      this.Itr_LoadStoreWork();
    }

    private void Itr_AddSub()
    {
      if (this.Itr_SkipIfRequest())
        return;
      this.Itr_Akku = this.Itr_Preload() <= (ushort) 0 ? this.Itr_Akku2 - this.Itr_Akku : this.Itr_Akku2 + this.Itr_Akku;
      this.Itr_SetFlags();
    }

    private void Itr_MulDiv()
    {
      if (this.Itr_SkipIfRequest())
        return;
      ushort num = this.Itr_Preload();
      if (this.Itr_Akku == 0U)
      {
        this.Itr_AkkuX = 0U;
      }
      else
      {
        if (num > (ushort) 0)
          this.Itr_Akku *= this.Itr_Akku2;
        else
          this.Itr_Akku = this.Itr_Akku2 / this.Itr_Akku;
        this.Itr_SetFlags();
      }
    }

    private void Itr_Jump()
    {
      ushort num;
      if (this.Itr_Code == (byte) 0)
      {
        num = (ushort) ((ulong) this.TheEepAdr + (ulong) (sbyte) this.TheEEProm[(int) this.TheEepAdr]);
        ++this.TheEepAdr;
      }
      else
        num = (ushort) (this.TheEepAdr + (uint) this.Itr_Code);
      if (this.Itr_SkipRequest)
        this.Itr_SkipRequest = false;
      else
        this.TheEepAdr = (uint) num;
    }

    private void Itr_Interval()
    {
      this.MyZelsiusMath.LastError = MeterMath.Errors.InternalError;
      this.MyZelsiusMath.LastErrorInfo = "Illegal runtime interval function";
    }

    private void Itr_NextLoggerEntry()
    {
      byte[] Data = new byte[14];
      uint num1 = this.LoadEEPromUSHORT((int) this.TheEepAdr);
      this.TheEepAdr += 2U;
      this.MyZelsiusMath.GetCpuDataWork("0x" + (num1 - 3U).ToString("x04"), Data.Length, MemoryLocation.EEPROM, out Data);
      int num2 = this.LoadArrayUSHORT(Data, 1) - (int) Data[0];
      if (num2 < this.LoadArrayUSHORT(Data, 7))
        num2 = (((int) Data[13] & 128) != 128 ? this.LoadArrayUSHORT(Data, 11) : this.LoadArrayUSHORT(Data, 9)) - (int) Data[0];
      this.TheEEProm[(int) num1 - 2] = (byte) num2;
      this.TheEEProm[(int) num1 - 1] = (byte) (num2 >> 8);
    }

    private void Itr_SetFlags()
    {
      this.Itr_Prozessabbild &= (ushort) 65439;
      if (this.Itr_Akku == 0U)
        this.Itr_Prozessabbild |= (ushort) 64;
      if (this.Itr_Akku <= this.Itr_Akku2)
        return;
      this.Itr_Prozessabbild |= (ushort) 32;
    }

    private bool Itr_SkipIfRequest()
    {
      if (!this.Itr_SkipRequest)
        return false;
      this.TheEepAdr += (uint) ZelsiusInterpreter.SkipBytes[(int) this.Itr_Code & 15];
      this.Itr_SkipRequest = false;
      return true;
    }

    private void Itr_LoadStoreWork()
    {
      if (((uint) this.Itr_Code & 16U) > 0U)
        this.Itr_Akku2 = this.Itr_Akku;
      uint num = (uint) (((int) this.Itr_Code & 3) + 1);
      if (num == 3U)
      {
        if (this.Itr_Code == (byte) 18)
          this.Itr_Akku = this.LoadRamUINT("Vol_VolumenDisplay");
        else if (this.Itr_Code == (byte) 22)
          this.Itr_Akku = this.Itr_AkkuX;
        else if (this.Itr_Code == (byte) 26)
          this.Itr_Akku = this.LoadRamUSHORT("Vol_Flow");
        else if (this.Itr_Code == (byte) 2)
        {
          this.MyZelsiusMath.LastError = MeterMath.Errors.InternalError;
          this.MyZelsiusMath.LastErrorInfo = "Illegal access to high resolution infos";
        }
        else if (this.Itr_Code == (byte) 6)
        {
          this.Itr_Akku = this.LoadRamUINT("Sta_Secounds");
        }
        else
        {
          if (this.Itr_Code != (byte) 10)
            return;
          this.Itr_Akku = this.LoadRamUINT("Energ_WaermeEnergDisplay");
        }
      }
      else if (((uint) this.Itr_Code & 4U) > 0U)
      {
        if (((uint) this.Itr_Code & 16U) <= 0U)
          return;
        uint theEepAdr = this.TheEepAdr;
        this.TheEepAdr += num;
        switch (num)
        {
          case 1:
            this.Itr_Akku = this.LoadEEPromBYTE((int) theEepAdr);
            break;
          case 2:
            this.Itr_Akku = this.LoadEEPromUSHORT((int) theEepAdr);
            break;
          case 4:
            this.Itr_Akku = this.LoadEEPromUINT((int) theEepAdr);
            break;
        }
      }
      else
      {
        uint Address;
        if (((uint) this.Itr_Prozessabbild & 128U) > 0U)
        {
          Address = this.Itr_Akku;
          this.Itr_Prozessabbild &= (ushort) 65407;
        }
        else
        {
          Address = this.LoadEEPromUSHORT((int) this.TheEepAdr);
          this.TheEepAdr += 2U;
        }
        if (((uint) this.Itr_Code & 8U) > 0U)
        {
          if (((uint) this.Itr_Code & 16U) <= 0U)
            return;
          switch (num)
          {
            case 1:
              this.Itr_Akku = this.LoadEEPromBYTE((int) Address);
              break;
            case 2:
              this.Itr_Akku = this.LoadEEPromUSHORT((int) Address);
              break;
            case 4:
              this.Itr_Akku = this.LoadEEPromUINT((int) Address);
              break;
          }
        }
        else
        {
          if (((uint) this.Itr_Code & 16U) <= 0U)
            return;
          switch (num)
          {
            case 1:
              this.Itr_Akku = this.LoadRamBYTE("0x" + Address.ToString("x04"));
              break;
            case 2:
              this.Itr_Akku = this.LoadRamUSHORT("0x" + Address.ToString("x04"));
              break;
            case 4:
              this.Itr_Akku = this.LoadRamUINT("0x" + Address.ToString("x04"));
              break;
          }
        }
      }
    }

    private ushort Itr_Preload()
    {
      ushort num = (ushort) ((uint) this.Itr_Code & 16U);
      this.Itr_Code |= (byte) 16;
      this.Itr_LoadStoreWork();
      return num;
    }

    private bool Dis_Variable()
    {
      this.Dis_VariableParam();
      if ((this.Dis_Flags & 4096) == 0)
      {
        if (((int) this.TheRam[157] & 16) == 0)
          this.LCD_Clear();
        this.LCD_WorkFrame();
        byte num = ~(byte) 16;
        this.TheRam[157] &= (byte) 239;
      }
      else if (((int) this.TheRam[157] & 16) == 0)
      {
        this.LCD_Clear();
        this.TheRam[157] |= (byte) 16;
      }
      if ((this.Dis_Flags & 768) == 512)
        this.Dis_Address = this.TheEepAdr;
      this.Dis_VariableRef();
      return (this.Dis_Flags & 4096) != 0;
    }

    private void Dis_VariableParam()
    {
      this.Dis_Flags = (int) this.LoadEEPromUSHORT((int) this.TheEepAdr);
      this.TheEepAdr += 2U;
      if ((this.Dis_Flags & 768) == 512)
        return;
      this.Dis_Address = this.LoadEEPromUSHORT((int) this.TheEepAdr);
      this.TheEepAdr += 2U;
      if ((this.Dis_Flags & 32768) != 0)
        this.Dis_Address = (uint) this.TheEEProm[(int) this.Dis_Address] + ((uint) this.TheEEProm[(int) this.Dis_Address + 1] << 8);
    }

    private void Dis_VariableRef()
    {
      uint num = this.Dis_VariableLoadValue();
      if ((this.Dis_Flags & 16384) == 0)
        this.LCD_Number(num, (byte) this.Dis_Flags);
      else if ((this.Dis_Flags & 16) != 0)
      {
        if ((this.Dis_Flags & 64) != 0)
        {
          this.LCD_ShowTemperature((ushort) num);
        }
        else
        {
          CalTime time = ZR_Calendar.Cal_Sec80ToTime(num);
          this.LCD_Number(time.Minute, this.LCD_FORMAT_FILL_DEC(2, 3));
          this.LCD_Number(time.Hour, this.LCD_FORMAT_FILL_DEC(2, 5));
        }
      }
      else
      {
        CalDate date = ZR_Calendar.Cal_Sec80ToDate(num);
        if ((this.Dis_Flags & 64) != 0)
        {
          this.LCD_Number(date.Month, this.LCD_FORMAT_FILL_DEC(2, 0));
          this.LCD_Number(date.Day, this.LCD_FORMAT_FILL_DEC(2, 2));
        }
        else
        {
          this.LCD_Number(date.Year, this.LCD_FORMAT_FILL_DEC(2, 0));
          this.LCD_Number(date.Month, this.LCD_FORMAT_FILL_DEC(2, 2));
          this.LCD_Number(date.Day, this.LCD_FORMAT_FILL_DEC(2, 4));
        }
      }
    }

    private uint Dis_VariableLoadValue()
    {
      byte num1 = (byte) (((this.Dis_Flags & 768) >> 8) + 1);
      uint num2 = 0;
      if ((this.Dis_Flags & 2048) != 0)
      {
        switch (num1)
        {
          case 1:
            num2 = this.LoadEEPromBYTE((int) this.Dis_Address);
            break;
          case 2:
            num2 = this.LoadEEPromUSHORT((int) this.Dis_Address);
            break;
          case 4:
            num2 = this.LoadEEPromUINT((int) this.Dis_Address);
            break;
        }
      }
      else if ((this.Dis_Flags & 768) != 512)
      {
        switch (num1)
        {
          case 1:
            num2 = this.LoadRamBYTE("0x" + this.Dis_Address.ToString("x04"));
            break;
          case 2:
            num2 = this.LoadRamUSHORT("0x" + this.Dis_Address.ToString("x04"));
            break;
          case 4:
            num2 = this.LoadRamUINT("0x" + this.Dis_Address.ToString("x04"));
            break;
        }
      }
      else
      {
        this.TheEepAdr = this.Dis_Address;
        num2 = this.Itr_RunInter();
      }
      return num2;
    }

    private byte LCD_FORMAT_BLANK_DEC(int digits, int start_digit)
    {
      return (byte) (digits - 1 | start_digit << 3);
    }

    private byte LCD_FORMAT_FILL_DEC(int digits, int start_digit)
    {
      return (byte) (digits - 1 | start_digit << 3 | 64);
    }

    private byte LCD_FORMAT_BLANK_HEX(int digits, int start_digit)
    {
      return (byte) (digits - 1 | start_digit << 3 | 128);
    }

    private byte LCD_FORMAT_FILL_HEX(int digits, int start_digit)
    {
      return (byte) (digits - 1 | start_digit << 3 | 64 | 128);
    }

    private void LCD_Clear()
    {
      for (int index = 145; index <= 160; ++index)
        this.TheRam[index] = (byte) 0;
    }

    private void LCD_WorkFrame()
    {
      byte[] CopyList = new byte[15];
      for (int index = 0; index < 15; ++index)
        CopyList[index] = this.TheEEProm[(long) this.TheEepAdr + (long) index];
      this.TheEepAdr += this.LCD_WorkFrameInternal(CopyList);
    }

    private uint LCD_WorkFrameInternal(byte[] CopyList)
    {
      int index1 = 0;
      uint index2 = 1;
      for (int index3 = 1; index3 <= 8; index3 <<= 1)
      {
        if (((uint) CopyList[0] & (uint) index3) > 0U)
        {
          for (byte index4 = 1; index4 > (byte) 0; index4 <<= 1)
          {
            if (index3 != 8 || ((uint) index4 & 224U) <= 0U)
            {
              if (((uint) CopyList[(int) index2] & (uint) index4) > 0U)
                this.TheRam[(int) this.LCD_FrameByteList[index1]] |= this.LCD_FrameByteList[index1 + 1];
              index1 += 2;
            }
          }
          ++index2;
        }
        else
          index1 += 16;
      }
      if (((uint) CopyList[0] & 16U) > 0U)
      {
        int index5 = ((int) CopyList[(int) index2] & 240) >> 4;
        if (index5 < 7)
          this.TheRam[145] |= this.Lcd_MenueColumnList[index5];
        ++index2;
      }
      if (((uint) CopyList[0] & 32U) > 0U)
      {
        byte[] theRam1 = this.TheRam;
        byte[] numArray1 = CopyList;
        int index6 = (int) index2;
        uint num1 = (uint) (index6 + 1);
        int num2 = (int) numArray1[index6];
        theRam1[158] = (byte) num2;
        byte[] theRam2 = this.TheRam;
        byte[] numArray2 = CopyList;
        int index7 = (int) num1;
        index2 = (uint) (index7 + 1);
        int num3 = (int) numArray2[index7];
        theRam2[159] = (byte) num3;
        if (this.TheRam[158] == byte.MaxValue)
        {
          for (int index8 = 145; index8 <= 156; ++index8)
            this.TheRam[index8] = byte.MaxValue;
        }
      }
      if (((uint) CopyList[0] & 128U) > 0U)
      {
        int index9 = 146;
        do
        {
          this.TheRam[index9] = (byte) ((int) this.TheRam[index9] & -240 | (int) CopyList[(int) index2] & 239);
          ++index9;
        }
        while (((uint) CopyList[(int) index2++] & 16U) > 0U);
      }
      return index2;
    }

    private void LCD_Number(uint zahl, byte format)
    {
      bool flag = false;
      byte num = (byte) (((int) format & 56) >> 3);
      for (byte index1 = (byte) ((uint) num + ((uint) format & 7U)); (int) num <= (int) index1; ++num)
      {
        this.TheRam[153 - (int) num] &= (byte) 16;
        if (!flag)
        {
          byte index2;
          if (((uint) format & 128U) > 0U)
          {
            index2 = (byte) (zahl & 15U);
            zahl >>= 4;
          }
          else
          {
            if (zahl == uint.MaxValue)
            {
              this.TheRam[153 - (int) num] |= (byte) 4;
              continue;
            }
            index2 = (byte) (zahl % 10U);
            zahl /= 10U;
          }
          this.TheRam[153 - (int) num] |= this.Lcd_CodeList[(int) index2];
          if (zahl == 0U && ((int) format & 64) == 0)
          {
            for (byte index3 = 0; index3 < (byte) 5; ++index3)
            {
              if (((uint) this.TheRam[(int) this.Lcd_DecimalList[(int) index3]] & (uint) this.Lcd_DecimalList[(int) index3 + 5]) > 0U)
              {
                if ((int) num > (int) index3)
                  break;
                goto label_15;
              }
            }
            flag = true;
label_15:;
          }
        }
      }
    }

    private void LCD_ShowTemperature(ushort temperature)
    {
      byte num = 0;
      if (((uint) temperature & 32768U) > 0U)
      {
        num = (byte) 1;
        temperature = ~temperature;
        ++temperature;
      }
      this.LCD_Number((uint) temperature, this.LCD_FORMAT_BLANK_DEC(5, 2));
      if (num != (byte) 1)
        return;
      if (temperature > (ushort) 9999)
        this.TheRam[146] = (byte) 4;
      else if (temperature > (ushort) 999)
        this.TheRam[147] = (byte) 4;
      else
        this.TheRam[148] = (byte) 4;
    }

    private uint LoadEEPromUINT(int Address) => this.LoadEEProm(Address, 4);

    private uint LoadEEPromUSHORT(int Address) => this.LoadEEProm(Address, 2);

    private uint LoadEEPromBYTE(int Address) => this.LoadEEProm(Address, 1);

    private uint LoadEEProm(int Address, int Size)
    {
      uint num = 0;
      if ((long) Address < (long) this.TheEEPromSize - (long) Size)
      {
        for (int index = 0; index < Size; ++index)
          num += (uint) this.TheEEProm[Address + index] << index * 8;
      }
      else
      {
        byte[] Data;
        if (this.MyZelsiusMath.GetCpuDataWork("0x" + Address.ToString("x04"), Size, MemoryLocation.EEPROM, out Data))
        {
          for (int index = 0; index < Size; ++index)
            num += (uint) Data[index] << index * 8;
        }
      }
      return num;
    }

    private uint LoadRamUINT(string Address)
    {
      byte[] Data;
      if (!this.MyZelsiusMath.GetCpuDataWork(Address, 4, MemoryLocation.RAM, out Data))
        return 0;
      uint num = 0;
      for (int index = 0; index < 4; ++index)
        num += (uint) Data[index] << index * 8;
      return num;
    }

    private uint LoadRamUSHORT(string Address)
    {
      byte[] Data;
      if (!this.MyZelsiusMath.GetCpuDataWork(Address, 2, MemoryLocation.RAM, out Data))
        return 0;
      uint num = 0;
      for (int index = 0; index < 2; ++index)
        num += (uint) Data[index] << index * 8;
      return num;
    }

    private int LoadArrayUSHORT(byte[] TheArray, int Address)
    {
      return (int) TheArray[Address] + ((int) TheArray[Address + 1] << 8);
    }

    private uint LoadRamBYTE(string Address)
    {
      byte[] Data;
      return !this.MyZelsiusMath.GetCpuDataWork(Address, 1, MemoryLocation.RAM, out Data) ? 0U : (uint) Data[0];
    }

    private delegate bool DisplayFunction();

    private delegate void RuntimeFunction();
  }
}


--- ZelsiusMath.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.ZelsiusMath
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using System;
using System.Collections;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class ZelsiusMath : MeterMath
  {
    private ZelsiusInterpreter MyZelsiusInterpreter;
    public SortedList NeadedMeterVars;
    public ZelsiusBaseSettings MyBaseSettings;
    private const double PulsValueMax = 10000.0;
    private const double PulsValueMin = 0.001;
    private static MeterMath.BC_FRAMES[] ZelsiusBCFrames = new MeterMath.BC_FRAMES[17]
    {
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_H DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_5 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_H DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_5 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_H"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_H DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_d_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_H DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_E DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_n_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_C DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_5 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_C DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_5 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_H"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_C DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_d_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_C DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_E DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_n_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_0 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_5 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_0 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_5 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_H"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_0 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_d_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_0 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_E DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_n_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_F DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_5 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_F DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_5 DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_H"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_F DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_d_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_r_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_F DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_E DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_n_klein DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_L"
      }),
      new MeterMath.BC_FRAMES(new string[4]
      {
        "DII_FRAME_TEXT_MINUS DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_MINUS DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_MINUS DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_MINUS"
      })
    };
    private static ZelsiusMath.BC_Settings BC_SettingsMask = new ZelsiusMath.BC_Settings((byte) 32, (byte) 151);
    private static ZelsiusMath.BC_Settings[] BC_SettingsList = new ZelsiusMath.BC_Settings[16]
    {
      new ZelsiusMath.BC_Settings((byte) 0, (byte) 3),
      new ZelsiusMath.BC_Settings((byte) 0, (byte) 0),
      new ZelsiusMath.BC_Settings((byte) 0, (byte) 5),
      new ZelsiusMath.BC_Settings(byte.MaxValue, byte.MaxValue),
      new ZelsiusMath.BC_Settings((byte) 32, (byte) 3),
      new ZelsiusMath.BC_Settings((byte) 32, (byte) 0),
      new ZelsiusMath.BC_Settings((byte) 32, (byte) 5),
      new ZelsiusMath.BC_Settings(byte.MaxValue, byte.MaxValue),
      new ZelsiusMath.BC_Settings((byte) 0, (byte) 131),
      new ZelsiusMath.BC_Settings((byte) 0, (byte) 128),
      new ZelsiusMath.BC_Settings((byte) 0, (byte) 133),
      new ZelsiusMath.BC_Settings(byte.MaxValue, byte.MaxValue),
      new ZelsiusMath.BC_Settings((byte) 0, (byte) 19),
      new ZelsiusMath.BC_Settings((byte) 0, (byte) 16),
      new ZelsiusMath.BC_Settings((byte) 0, (byte) 21),
      new ZelsiusMath.BC_Settings(byte.MaxValue, byte.MaxValue)
    };
    private static MeterMath.ENERGY_FRAMES[] ZelsiusEnergyFrames = new MeterMath.ENERGY_FRAMES[35]
    {
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[3]
      {
        "",
        "DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR",
        "DII_FRAME_SEGS3_DEC4"
      }, new string[3]
      {
        "",
        "DII_FRAME_SEGS2_WATT",
        "DII_FRAME_SEGS3_DEC4"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "",
        "DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "",
        "DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "",
        "DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "",
        "DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_MEGA DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_MEGA DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_MEGA DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_MEGA DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_MEGA DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_MEGA DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "",
        "DII_FRAME_SEGS2_MEGA DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_HOUR"
      }, new string[2]
      {
        "",
        "DII_FRAME_SEGS2_MEGA DII_FRAME_SEGS2_WATT"
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[3]
      {
        "",
        "DII_FRAME_SEGS2_MEGA_JOULE",
        "DII_FRAME_SEGS3_DEC7"
      }, new string[1]{ "" }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[3]
      {
        "",
        "DII_FRAME_SEGS2_MEGA_JOULE DII_FRAME_SEGS2_SLASH DII_FRAME_SEGS2_HOUR",
        "DII_FRAME_SEGS3_DEC4"
      }),
      new MeterMath.ENERGY_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_MEGA_JOULE"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_MEGA_JOULE DII_FRAME_SEGS2_SLASH DII_FRAME_SEGS2_HOUR"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_MEGA_JOULE"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_MEGA_JOULE DII_FRAME_SEGS2_SLASH DII_FRAME_SEGS2_HOUR"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_MEGA_JOULE"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_MEGA_JOULE DII_FRAME_SEGS2_SLASH DII_FRAME_SEGS2_HOUR"
      }),
      new MeterMath.ENERGY_FRAMES(new string[2]
      {
        "",
        "DII_FRAME_SEGS2_MEGA_JOULE"
      }, new string[2]
      {
        "",
        "DII_FRAME_SEGS2_MEGA_JOULE DII_FRAME_SEGS2_SLASH DII_FRAME_SEGS2_HOUR"
      })
    };
    private static MeterMath.VOLUME_FRAMES[] ZelsiusVolumeFrames = new MeterMath.VOLUME_FRAMES[11]
    {
      new MeterMath.VOLUME_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.VOLUME_FRAMES(new string[1]{ "" }, new string[1]
      {
        ""
      }),
      new MeterMath.VOLUME_FRAMES(new string[3]
      {
        "",
        "DII_FRAME_SEGS2_LITRE",
        "DII_FRAME_SEGS3_DEC4"
      }, new string[3]
      {
        "",
        "DII_FRAME_SEGS2_LITRE DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_SLASH",
        "DII_FRAME_SEGS3_DEC4"
      }),
      new MeterMath.VOLUME_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_LITRE"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_LITRE DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_SLASH"
      }),
      new MeterMath.VOLUME_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_LITRE"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_LITRE DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_SLASH"
      }),
      new MeterMath.VOLUME_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_LITRE"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_LITRE DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_SLASH"
      }),
      new MeterMath.VOLUME_FRAMES(new string[2]
      {
        "",
        "DII_FRAME_SEGS2_LITRE"
      }, new string[2]
      {
        "",
        "DII_FRAME_SEGS2_LITRE DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_SLASH"
      }),
      new MeterMath.VOLUME_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_CUBIC_M"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        "DII_FRAME_SEGS2_CUBIC_M DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_SLASH"
      }),
      new MeterMath.VOLUME_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_CUBIC_M"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        "DII_FRAME_SEGS2_CUBIC_M DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_SLASH"
      }),
      new MeterMath.VOLUME_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_CUBIC_M"
      }, new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        "DII_FRAME_SEGS2_CUBIC_M DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_SLASH"
      }),
      new MeterMath.VOLUME_FRAMES(new string[2]
      {
        "",
        "DII_FRAME_SEGS2_CUBIC_M"
      }, new string[2]
      {
        "",
        "DII_FRAME_SEGS2_CUBIC_M DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_SLASH"
      })
    };
    private static MeterMath.EMPTY_FRAMES[] ZelsiusEmptyFrames = new MeterMath.EMPTY_FRAMES[8]
    {
      new MeterMath.EMPTY_FRAMES(new string[3]
      {
        "",
        "",
        "DII_FRAME_SEGS3_DEC7"
      }),
      new MeterMath.EMPTY_FRAMES(new string[1]{ "" }),
      new MeterMath.EMPTY_FRAMES(new string[1]{ "" }),
      new MeterMath.EMPTY_FRAMES(new string[3]
      {
        "",
        "",
        "DII_FRAME_SEGS3_DEC4"
      }),
      new MeterMath.EMPTY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC3",
        ""
      }),
      new MeterMath.EMPTY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC2",
        ""
      }),
      new MeterMath.EMPTY_FRAMES(new string[2]
      {
        "DII_FRAME_SEGS1_DEC1",
        ""
      }),
      new MeterMath.EMPTY_FRAMES(new string[2]{ "0x00", "" })
    };
    private static short[] ZelsiusInfoByte1 = new short[11]
    {
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 48,
      (short) 49,
      (short) 50,
      (short) 51,
      (short) 99,
      (short) 100,
      (short) 101,
      (short) 102
    };
    private static short FirstLinearIndexEnergyInJoule = 16;
    private static short FirstIndexEnergyInJoule = 19;
    private static short[] ZelsiusInfoByte2 = new short[35]
    {
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 0,
      (short) 48,
      (short) 49,
      (short) 50,
      (short) 51,
      (short) 99,
      (short) 100,
      (short) 101,
      (short) 102,
      (short) 150,
      (short) 151,
      (short) 152,
      (short) 153,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 0,
      (short) 48,
      (short) 49,
      (short) 50,
      (short) 51,
      (short) 99,
      (short) 100,
      (short) 101,
      (short) 102,
      (short) 150,
      (short) 151,
      (short) 152,
      (short) 153
    };
    private static MeterMath.ENERGY_FRAMES[] ZelsiusSonderFrames = new MeterMath.ENERGY_FRAMES[1]
    {
      new MeterMath.ENERGY_FRAMES(new string[3]
      {
        "",
        "DII_FRAME_SEGS2_MEGA_JOULE",
        "DII_FRAME_SEGS3_DEC7"
      }, new string[3]
      {
        "",
        "DII_FRAME_SEGS2_MEGA_JOULE DII_FRAME_SEGS2_SLASH DII_FRAME_SEGS2_HOUR",
        "DII_FRAME_SEGS3_DEC4"
      })
    };
    public static string[] ClearZelsiusUnitFrameMasks = new string[3]
    {
      "DII_FRAME_SEGS1_DEC1 DII_FRAME_SEGS1_DEC2 DII_FRAME_SEGS1_DEC3 DII_FRAME_SEGS1_FRAME1 DII_FRAME_SEGS1_FRAME2 DII_FRAME_SEGS1_FRAME3",
      "DII_FRAME_SEGS2_CUBIC_M DII_FRAME_SEGS2_LITRE DII_FRAME_SEGS2_SLASH DII_FRAME_SEGS2_HOUR DII_FRAME_SEGS2_KILO DII_FRAME_SEGS2_WATT DII_FRAME_SEGS2_MEGA DII_FRAME_SEGS2_MEGA_JOULE",
      "DII_FRAME_SEGS3_DEC4"
    };
    private static string[] RestrictedEnergyUnitsList = (string[]) null;
    private static string[] RestrictedVolumeUnitsList = (string[]) null;
    private static string[] RestrictedInputUnitsList = (string[]) null;

    public ZelsiusMath()
    {
      this.NeadedMeterVars = new SortedList();
      this.NeadedMeterVars.Add((object) "DefaultFunction.Vol_SumExpo", (object) null);
      this.NeadedMeterVars.Add((object) "DefaultFunction.PulsValue1", (object) null);
      this.NeadedMeterVars.Add((object) "DefaultFunction.Energ_SumExpo", (object) null);
      this.NeadedMeterVars.Add((object) "DefaultFunction.Energ_ImpulsFaktor", (object) null);
      this.NeadedMeterVars.Add((object) "DefaultFunction.Zaehler_Info_Byte1", (object) null);
      this.NeadedMeterVars.Add((object) "DefaultFunction.Zaehler_Info_Byte2", (object) null);
      this.NeadedMeterVars.Add((object) "DefaultFunction.Energie_Konfiguration", (object) null);
      this.NeadedMeterVars.Add((object) "DefaultFunction.RW_Typ_Konfiguration", (object) null);
      this.NeadedMeterVars.Add((object) "R:Inp1Factor", (object) null);
      this.NeadedMeterVars.Add((object) "R:Inp2Factor", (object) null);
    }

    public static string[] GetRestrictedEnergyUnitList()
    {
      if (ZelsiusMath.RestrictedEnergyUnitsList == null)
      {
        List<string> stringList = new List<string>();
        for (int index = 0; index < MeterMath.EnergyUnits.Length; ++index)
        {
          if (ZelsiusMath.ZelsiusEnergyFrames[index].EnergyFrame[0].Length > 0 || ZelsiusMath.ZelsiusEnergyFrames[index].EnergyFrame.Length > 1)
            stringList.Add(MeterMath.EnergyUnits[index].EnergieUnitString);
        }
        ZelsiusMath.RestrictedEnergyUnitsList = new string[stringList.Count];
        for (int index = 0; index < stringList.Count; ++index)
          ZelsiusMath.RestrictedEnergyUnitsList[index] = stringList[index];
      }
      return ZelsiusMath.RestrictedEnergyUnitsList;
    }

    public static string[] GetRestrictedVolumeUnitList()
    {
      if (ZelsiusMath.RestrictedVolumeUnitsList == null)
      {
        List<string> stringList = new List<string>();
        for (int index = 0; index < MeterMath.VolumeUnits.Length; ++index)
        {
          if (ZelsiusMath.ZelsiusVolumeFrames[index].VolumeFrame[0].Length > 0 || ZelsiusMath.ZelsiusVolumeFrames[index].VolumeFrame.Length > 1)
            stringList.Add(MeterMath.VolumeUnits[index].VolumeUnitString);
        }
        ZelsiusMath.RestrictedVolumeUnitsList = new string[stringList.Count];
        for (int index = 0; index < stringList.Count; ++index)
          ZelsiusMath.RestrictedVolumeUnitsList[index] = stringList[index];
      }
      return ZelsiusMath.RestrictedVolumeUnitsList;
    }

    public static string[] GetRestrictedInputUnitList()
    {
      if (ZelsiusMath.RestrictedInputUnitsList == null)
      {
        List<string> stringList = new List<string>();
        for (int index1 = 0; index1 < MeterMath.InputUnits.Length; ++index1)
        {
          MeterMath.INPUT_UNIT_DEFS inputUnit = MeterMath.InputUnits[index1];
          if (inputUnit.FrameType == MeterMath.InputFrameType.Energy)
          {
            for (int index2 = 0; index2 < MeterMath.EnergyUnits.Length; ++index2)
            {
              if (!(inputUnit.InputUnitString != MeterMath.EnergyUnits[index2].EnergieUnitString))
              {
                if (ZelsiusMath.ZelsiusEnergyFrames[index2].EnergyFrame[0].Length > 0 || ZelsiusMath.ZelsiusEnergyFrames[index2].EnergyFrame.Length > 1)
                {
                  stringList.Add(MeterMath.EnergyUnits[index2].EnergieUnitString);
                  break;
                }
                break;
              }
            }
          }
          else if (inputUnit.FrameType == MeterMath.InputFrameType.Volume)
          {
            for (int index3 = 0; index3 < MeterMath.VolumeUnits.Length; ++index3)
            {
              if (!(inputUnit.InputUnitString != MeterMath.VolumeUnits[index3].VolumeUnitString))
              {
                if (ZelsiusMath.ZelsiusVolumeFrames[index3].VolumeFrame[0].Length > 0 || ZelsiusMath.ZelsiusVolumeFrames[index3].VolumeFrame.Length > 1)
                {
                  stringList.Add(MeterMath.VolumeUnits[index3].VolumeUnitString);
                  break;
                }
                break;
              }
            }
          }
          else
          {
            for (int index4 = 0; index4 < MeterMath.EmptyUnits.Length; ++index4)
            {
              if (!(inputUnit.InputUnitString != MeterMath.EmptyUnits[index4].EmptyUnitString))
              {
                if (ZelsiusMath.ZelsiusEmptyFrames[index4].EmptyFrame[0].Length > 0 || ZelsiusMath.ZelsiusEmptyFrames[index4].EmptyFrame.Length > 1)
                {
                  stringList.Add(MeterMath.EmptyUnits[index4].EmptyUnitString);
                  break;
                }
                break;
              }
            }
          }
        }
        ZelsiusMath.RestrictedInputUnitsList = new string[stringList.Count];
        for (int index = 0; index < stringList.Count; ++index)
          ZelsiusMath.RestrictedInputUnitsList[index] = stringList[index];
      }
      return ZelsiusMath.RestrictedInputUnitsList;
    }

    public bool GetNotAvailableOverrides(SortedList OverridesList)
    {
      byte neadedMeterVar1 = (byte) (long) this.NeadedMeterVars[(object) "DefaultFunction.Energie_Konfiguration"];
      object neadedMeterVar2 = this.NeadedMeterVars[(object) "DefaultFunction.RW_Typ_Konfiguration"];
      byte num1 = neadedMeterVar2 != null ? (byte) (long) neadedMeterVar2 : (byte) 0;
      OverrideParameter overrideParameter1 = new OverrideParameter(OverrideID.WarmerPipe);
      overrideParameter1.Value = ((int) neadedMeterVar1 & 1) != 0 ? 1UL : 0UL;
      OverridesList.Add((object) overrideParameter1.ParameterID, (object) overrideParameter1);
      OverrideParameter TheOverrideParameter1 = new OverrideParameter(OverrideID.BaseConfig);
      TheOverrideParameter1.Value = 1000000UL;
      byte num2 = (byte) ((uint) neadedMeterVar1 & (uint) ZelsiusMath.BC_SettingsMask.Energie_Konfiguration);
      byte num3 = (byte) ((uint) num1 & (uint) ZelsiusMath.BC_SettingsMask.RW_Typ_Konfiguration);
      for (int index = 0; index < ZelsiusMath.BC_SettingsList.Length; ++index)
      {
        if ((int) num2 == (int) ZelsiusMath.BC_SettingsList[index].Energie_Konfiguration && (int) num3 == (int) ZelsiusMath.BC_SettingsList[index].RW_Typ_Konfiguration)
        {
          TheOverrideParameter1.Value = (ulong) index;
          break;
        }
      }
      if (TheOverrideParameter1.Value > 1000UL)
      {
        this.LastError = MeterMath.Errors.InternalError;
        this.LastErrorInfo = "Illegal BaseConfig";
        return false;
      }
      OverrideParameter.ChangeOrAddOverrideParameter(OverridesList, TheOverrideParameter1);
      if ((OverrideParameter) OverridesList[(object) OverrideID.EnergyResolution] == null)
      {
        OverrideParameter overrideParameter2 = new OverrideParameter(OverrideID.EnergyResolution);
        OverridesList.Add((object) overrideParameter2.ParameterID, (object) overrideParameter2);
      }
      OverrideParameter overrideParameter3 = (OverrideParameter) OverridesList[(object) OverrideID.VolumeResolution];
      if (overrideParameter3 == null)
      {
        overrideParameter3 = new OverrideParameter(OverrideID.VolumeResolution);
        OverridesList.Add((object) overrideParameter3.ParameterID, (object) overrideParameter3);
      }
      if ((OverrideParameter) OverridesList[(object) OverrideID.VolumePulsValue] == null)
      {
        Decimal neadedMeterVar3 = (Decimal) (long) this.NeadedMeterVars[(object) "DefaultFunction.PulsValue1"];
        OverrideParameter overrideParameter4 = new OverrideParameter(OverrideID.VolumePulsValue, ((Decimal) (1.0 / Math.Pow(2.0, (double) (Decimal) (long) this.NeadedMeterVars[(object) "DefaultFunction.Vol_SumExpo"])) / (Decimal) MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[overrideParameter3.Value].LinearUnitIndex].UnitFactorFromLiter * neadedMeterVar3).ToString((IFormatProvider) FixedFormates.TheFormates.NumberFormat), true);
        OverridesList.Add((object) overrideParameter4.ParameterID, (object) overrideParameter4);
      }
      OverrideParameter overrides1 = (OverrideParameter) OverridesList[(object) OverrideID.Input1Unit];
      OverrideParameter overrides2 = (OverrideParameter) OverridesList[(object) OverrideID.Input1PulsValue];
      if (overrides1 == null || overrides2 == null)
      {
        OverrideParameter TheOverrideParameter2 = new OverrideParameter(OverrideID.Input1Unit);
        OverrideParameter.ChangeOrAddOverrideParameter(OverridesList, TheOverrideParameter2);
        OverrideParameter TheOverrideParameter3 = new OverrideParameter(OverrideID.Input1PulsValue);
        OverrideParameter.ChangeOrAddOverrideParameter(OverridesList, TheOverrideParameter3);
      }
      OverrideParameter overrides3 = (OverrideParameter) OverridesList[(object) OverrideID.Input2Unit];
      OverrideParameter overrides4 = (OverrideParameter) OverridesList[(object) OverrideID.Input2PulsValue];
      if (overrides3 == null || overrides4 == null)
      {
        OverrideParameter TheOverrideParameter4 = new OverrideParameter(OverrideID.Input2Unit);
        OverrideParameter.ChangeOrAddOverrideParameter(OverridesList, TheOverrideParameter4);
        OverrideParameter TheOverrideParameter5 = new OverrideParameter(OverrideID.Input2PulsValue);
        OverrideParameter.ChangeOrAddOverrideParameter(OverridesList, TheOverrideParameter5);
      }
      return true;
    }

    public bool CreateBaseSettings(SortedList OverridesList)
    {
      this.MyBaseSettings = new ZelsiusBaseSettings();
      OverrideParameter overrides1 = (OverrideParameter) OverridesList[(object) OverrideID.BaseConfig];
      if (overrides1 != null)
        this.MyBaseSettings.BaseConfig = ((ConfigurationParameter.BaseConfigSettings) overrides1.Value).ToString();
      OverrideParameter overrides2 = (OverrideParameter) OverridesList[(object) OverrideID.EnergyResolution];
      if (overrides2 != null)
        this.MyBaseSettings.EnergyUnit = MeterMath.GetEnergyUnitOfID((int) overrides2.Value);
      OverrideParameter overrides3 = (OverrideParameter) OverridesList[(object) OverrideID.VolumeResolution];
      if (overrides3 != null)
        this.MyBaseSettings.VolumeUnit = MeterMath.GetVolumeUnitOfID((int) overrides3.Value);
      OverrideParameter overrides4 = (OverrideParameter) OverridesList[(object) OverrideID.VolumePulsValue];
      if (overrides4 != null && !OverrideParameter.PackedBCD_ToDouble((int) overrides4.Value, out this.MyBaseSettings.PulsValueInLiterPerImpuls))
      {
        this.LastError = MeterMath.Errors.InternalError;
        this.LastErrorInfo = "Volume puls value convertion error";
        return false;
      }
      OverrideParameter overrides5 = (OverrideParameter) OverridesList[(object) OverrideID.WarmerPipe];
      if (overrides5 == null)
      {
        this.LastError = MeterMath.Errors.InternalError;
        this.LastErrorInfo = "Missing WarmerPipe override";
        return false;
      }
      byte neadedMeterVar = (byte) (long) this.NeadedMeterVars[(object) "DefaultFunction.Energie_Konfiguration"];
      this.NeadedMeterVars[(object) "DefaultFunction.Energie_Konfiguration"] = (object) (overrides5.Value != 0UL ? (long) (byte) ((uint) neadedMeterVar | 1U) : (long) (byte) ((uint) neadedMeterVar & 254U));
      OverrideParameter overrides6 = (OverrideParameter) OverridesList[(object) OverrideID.Input1Unit];
      if (overrides6 != null)
        this.MyBaseSettings.Input1Unit = MeterMath.GetInputUnitOfID((int) overrides6.Value);
      OverrideParameter overrides7 = (OverrideParameter) OverridesList[(object) OverrideID.Input1PulsValue];
      if (overrides7 != null && !OverrideParameter.PackedBCD_ToDouble((int) overrides7.Value, out this.MyBaseSettings.Input1PulsValue))
      {
        this.LastError = MeterMath.Errors.InternalError;
        this.LastErrorInfo = "Input1 puls value convertion error";
        return false;
      }
      OverrideParameter overrides8 = (OverrideParameter) OverridesList[(object) OverrideID.Input2Unit];
      if (overrides8 != null)
        this.MyBaseSettings.Input2Unit = MeterMath.GetInputUnitOfID((int) overrides8.Value);
      OverrideParameter overrides9 = (OverrideParameter) OverridesList[(object) OverrideID.Input2PulsValue];
      if (overrides9 == null || OverrideParameter.PackedBCD_ToDouble((int) overrides9.Value, out this.MyBaseSettings.Input2PulsValue))
        return true;
      this.LastError = MeterMath.Errors.InternalError;
      this.LastErrorInfo = "Input2 puls value convertion error";
      return false;
    }

    public override double calcPulsValue(int PulsValue, string UnitString)
    {
      int decimalCounts;
      ParameterService.GetValueAndUnit(UnitString, out string _, out string _, out decimalCounts);
      if (decimalCounts < 0)
        decimalCounts = 0;
      double num = Math.Pow(10.0, (double) decimalCounts);
      return (double) (PulsValue / 64) / num;
    }

    public override double calcPulsValue(double PulsValue, double Vol_SumExpo, string VolumeUnit)
    {
      double num1 = PulsValue / Math.Pow(2.0, Vol_SumExpo);
      double num2 = -1.0;
      for (int index = 0; index < MeterMath.VolumeUnits.Length; ++index)
      {
        if (MeterMath.VolumeUnits[index].VolumeUnitString == VolumeUnit)
          num2 = MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[index].LinearUnitIndex].UnitFactorFromLiter;
      }
      if (num2 < 0.0)
        return -1.0;
      double num3 = num1 / num2;
      double num4 = 0.9999;
      double num5 = 1.0;
      for (double num6 = 1.0001; num3 > num4 && num6 < 100000.0; num6 *= 10.0)
      {
        if (num3 > num4 && num3 < num6)
        {
          num3 = num5;
          break;
        }
        num4 *= 10.0;
        num5 *= 10.0;
      }
      return num3;
    }

    public override bool GetSpecialOverrideFrame(
      FrameTypes FrameType,
      string SpecialOptions,
      out MeterMath.FrameDescription TheFrame,
      out int FactorShift)
    {
      TheFrame = (MeterMath.FrameDescription) null;
      FactorShift = 0;
      bool flag = false;
      int num = 0;
      string[] strArray1 = SpecialOptions.Split(' ');
      if (strArray1[0].Length > 0)
      {
        for (int index = 0; index < strArray1.Length; ++index)
        {
          string[] strArray2 = strArray1[index].Split('=');
          if (strArray2.Length != 2)
          {
            this.LastError = MeterMath.Errors.InternalError;
            this.LastErrorInfo = "Partial special frame option";
            return false;
          }
          if (strArray1[index] == "F=1")
            flag = true;
          else if (strArray2[0] == "S" || strArray2[0] == "OS")
          {
            try
            {
              num = int.Parse(strArray2[1]);
            }
            catch
            {
              this.LastError = MeterMath.Errors.InternalError;
              this.LastErrorInfo = "Illegal special frame constant";
              return false;
            }
          }
          else
          {
            this.LastError = MeterMath.Errors.InternalError;
            this.LastErrorInfo = "Unknown special frame option";
            return false;
          }
        }
      }
      if (num != 0)
      {
        if (this.MyBaseSettings.PulsValueInLiterPerImpuls < 0.0)
          return false;
        switch (FrameType)
        {
          case FrameTypes.Energy:
            int LinearUnitIndex = this.MyBaseSettings.EnergyLinearUnitIndex - num;
            int fromLiniarUnitIndex1 = MeterMath.GetEnergyUnitIndexFromLiniarUnitIndex(LinearUnitIndex);
            if (this.MyBaseSettings.EnergyLinearUnitIndex < (int) ZelsiusMath.FirstLinearIndexEnergyInJoule)
            {
              if (fromLiniarUnitIndex1 < 0 || ZelsiusMath.ZelsiusEnergyFrames[fromLiniarUnitIndex1].EnergyFrame.Length < 2)
              {
                this.LastError = MeterMath.Errors.EnergyUnitNotAvailable;
                this.LastErrorInfo = "Special frame format";
                return false;
              }
            }
            else
            {
              while (true)
              {
                if (fromLiniarUnitIndex1 >= (int) ZelsiusMath.FirstIndexEnergyInJoule)
                {
                  if (ZelsiusMath.ZelsiusEnergyFrames[fromLiniarUnitIndex1].EnergyFrame.Length < 3)
                  {
                    --FactorShift;
                    ++LinearUnitIndex;
                    fromLiniarUnitIndex1 = MeterMath.GetEnergyUnitIndexFromLiniarUnitIndex(LinearUnitIndex);
                  }
                  else
                    goto label_23;
                }
                else
                  break;
              }
              this.LastError = MeterMath.Errors.EnergyUnitNotAvailable;
              this.LastErrorInfo = "Special frame format";
              return false;
            }
label_23:
            TheFrame = new MeterMath.FrameDescription(ZR_Constants.FrameNames.EnergyFrame.ToString(), ZelsiusMath.ZelsiusEnergyFrames[fromLiniarUnitIndex1].EnergyFrame);
            break;
          case FrameTypes.Flow:
            int fromLiniarUnitIndex2 = this.GetVolumeUnitIndexFromLiniarUnitIndex(this.MyBaseSettings.VolumeLinearUnitIndex - num);
            if (fromLiniarUnitIndex2 < 0 || ZelsiusMath.ZelsiusVolumeFrames[fromLiniarUnitIndex2].FlowFrame.Length < 2)
            {
              this.LastError = MeterMath.Errors.FlowOutOfRange;
              this.LastErrorInfo = "Special frame format";
              return false;
            }
            TheFrame = new MeterMath.FrameDescription(ZR_Constants.FrameNames.FlowFrame.ToString(), ZelsiusMath.ZelsiusVolumeFrames[fromLiniarUnitIndex2].FlowFrame);
            break;
          case FrameTypes.Volume:
            int fromLiniarUnitIndex3 = this.GetVolumeUnitIndexFromLiniarUnitIndex(this.MyBaseSettings.VolumeLinearUnitIndex - num);
            if (fromLiniarUnitIndex3 < 0 || ZelsiusMath.ZelsiusVolumeFrames[fromLiniarUnitIndex3].VolumeFrame.Length < 2)
            {
              this.LastError = MeterMath.Errors.VolumeUnitNotAvailable;
              this.LastErrorInfo = "Special frame format";
              return false;
            }
            TheFrame = new MeterMath.FrameDescription(ZR_Constants.FrameNames.VolumeFrame.ToString(), ZelsiusMath.ZelsiusVolumeFrames[fromLiniarUnitIndex3].VolumeFrame);
            break;
          default:
            this.LastError = MeterMath.Errors.InternalError;
            this.LastErrorInfo = "Illegal frame type";
            return false;
        }
      }
      else
      {
        foreach (MeterMath.FrameDescription frame in this.MyBaseSettings.Frames)
        {
          if (frame.Type == FrameType)
          {
            TheFrame = frame.Clone();
            break;
          }
        }
      }
      if (TheFrame == null)
        return false;
      if (flag)
      {
        if (TheFrame.FrameByteDescription[0].IndexOf("DII_FRAME_SEGS1_DEC1") >= 0)
        {
          // ISSUE: explicit reference operation
          ^ref TheFrame.FrameByteDescription[0] += " DII_FRAME_SEGS1_FRAME1";
        }
        else if (TheFrame.FrameByteDescription[0].IndexOf("DII_FRAME_SEGS1_DEC2") >= 0)
        {
          // ISSUE: explicit reference operation
          ^ref TheFrame.FrameByteDescription[0] += " DII_FRAME_SEGS1_FRAME1 DII_FRAME_SEGS1_FRAME2";
        }
        else if (TheFrame.FrameByteDescription[0].IndexOf("DII_FRAME_SEGS1_DEC3") >= 0)
        {
          // ISSUE: explicit reference operation
          ^ref TheFrame.FrameByteDescription[0] += " DII_FRAME_SEGS1_FRAME1 DII_FRAME_SEGS1_FRAME2 DII_FRAME_SEGS1_FRAME3";
        }
      }
      return true;
    }

    public override bool CalculateMeterSettings(long FirmwareVersion)
    {
      try
      {
        this.MyBaseSettings.Frames = new ArrayList();
        this.MyBaseSettings.BaseConfigIndex = (int) Enum.Parse(typeof (BaseConfigID), this.MyBaseSettings.BaseConfig, true);
        OverrideParameter.GetBaseConfigStruct(this.MyBaseSettings.BaseConfig);
        this.MyBaseSettings.Frames.Add((object) new MeterMath.FrameDescription(ZR_Constants.FrameNames.BCFrame.ToString(), ZelsiusMath.ZelsiusBCFrames[this.MyBaseSettings.BaseConfigIndex].BC_Frame));
        this.MyBaseSettings.VolumeUnitIndex = MeterMath.GetVolumeUnitIndex(this.MyBaseSettings.VolumeUnit);
        if (this.MyBaseSettings.VolumeUnitIndex < 0 || this.MyBaseSettings.VolumeUnitIndex >= MeterMath.VolumeUnits.Length)
        {
          this.LastError = MeterMath.Errors.VolumeUnitNotAvailable;
          return false;
        }
        ArrayList frames1 = this.MyBaseSettings.Frames;
        ZR_Constants.FrameNames frameNames = ZR_Constants.FrameNames.VolumeFrame;
        MeterMath.FrameDescription frameDescription1 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusVolumeFrames[this.MyBaseSettings.VolumeUnitIndex].VolumeFrame);
        frames1.Add((object) frameDescription1);
        ArrayList frames2 = this.MyBaseSettings.Frames;
        frameNames = ZR_Constants.FrameNames.FlowFrame;
        MeterMath.FrameDescription frameDescription2 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusVolumeFrames[this.MyBaseSettings.VolumeUnitIndex].FlowFrame);
        frames2.Add((object) frameDescription2);
        this.MyBaseSettings.VolumeLinearUnitIndex = (int) MeterMath.VolumeUnits[this.MyBaseSettings.VolumeUnitIndex].LinearUnitIndex;
        if (this.MyBaseSettings.VolumeUnitIndex >= ZelsiusMath.ZelsiusInfoByte1.Length)
        {
          this.LastError = MeterMath.Errors.VolumeUnitNotAvailable;
          this.LastErrorInfo = "ZÃ¤hler_Info_Byte1";
          return false;
        }
        short num1 = ZelsiusMath.ZelsiusInfoByte1[this.MyBaseSettings.VolumeUnitIndex];
        if (num1 == (short) -1)
        {
          this.LastError = MeterMath.Errors.VolumeUnitNotAvailable;
          this.LastErrorInfo = "ZÃ¤hler_Info_Byte1";
          return false;
        }
        this.NeadedMeterVars[(object) "DefaultFunction.Zaehler_Info_Byte1"] = (object) (long) num1;
        this.MyBaseSettings.MBusVolumeVIF = MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[this.MyBaseSettings.VolumeUnitIndex].LinearUnitIndex].MBusVolumeVIF;
        this.MyBaseSettings.MBusFlowVIF = MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[this.MyBaseSettings.VolumeUnitIndex].LinearUnitIndex].MBusFlowVIF;
        long num2 = 0;
        this.MyBaseSettings.EnergyUnitIndex = MeterMath.GetEnergyUnitIndex(this.MyBaseSettings.EnergyUnit);
        if (this.MyBaseSettings.EnergyUnitIndex < 0 || this.MyBaseSettings.EnergyUnitIndex >= MeterMath.EnergyUnits.Length)
        {
          this.LastError = MeterMath.Errors.EnergyUnitNotAvailable;
          return false;
        }
        ArrayList frames3 = this.MyBaseSettings.Frames;
        frameNames = ZR_Constants.FrameNames.EnergyFrame;
        MeterMath.FrameDescription frameDescription3 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusEnergyFrames[this.MyBaseSettings.EnergyUnitIndex].EnergyFrame);
        frames3.Add((object) frameDescription3);
        this.MyBaseSettings.EnergyLinearUnitIndex = (int) MeterMath.EnergyUnits[this.MyBaseSettings.EnergyUnitIndex].LinearUnitIndex;
        if (this.MyBaseSettings.EnergyUnitIndex >= ZelsiusMath.ZelsiusInfoByte2.Length)
        {
          this.LastError = MeterMath.Errors.EnergyUnitNotAvailable;
          this.LastErrorInfo = "ZÃ¤hler_Info_Byte2";
          return false;
        }
        short num3 = ZelsiusMath.ZelsiusInfoByte2[this.MyBaseSettings.EnergyUnitIndex];
        if (num3 == (short) -1)
        {
          this.LastError = MeterMath.Errors.EnergyUnitNotAvailable;
          this.LastErrorInfo = "ZÃ¤hler_Info_Byte2";
          return false;
        }
        this.NeadedMeterVars[(object) "DefaultFunction.Zaehler_Info_Byte2"] = (object) (long) num3;
        bool flag = this.MyBaseSettings.EnergyLinearUnitIndex >= (int) ZelsiusMath.FirstLinearIndexEnergyInJoule;
        this.MyBaseSettings.PowerLinearUnitIndex = (int) MeterMath.EnergyUnits[this.MyBaseSettings.EnergyUnitIndex].LinearUnitIndex;
        --this.MyBaseSettings.PowerLinearUnitIndex;
        this.MyBaseSettings.PowerUnitIndex = MeterMath.GetEnergyUnitIndexFromLiniarUnitIndex(this.MyBaseSettings.PowerLinearUnitIndex);
        if (this.MyBaseSettings.PowerUnitIndex < 0)
        {
          this.LastError = MeterMath.Errors.PowerUnitNotAvailable;
          return false;
        }
        if (flag && this.MyBaseSettings.PowerLinearUnitIndex < (int) ZelsiusMath.FirstLinearIndexEnergyInJoule)
        {
          this.LastError = MeterMath.Errors.PowerUnitNotAvailable;
          return false;
        }
        if (flag)
        {
          if (this.MyBaseSettings.PowerUnitIndex == 29)
          {
            ArrayList frames4 = this.MyBaseSettings.Frames;
            frameNames = ZR_Constants.FrameNames.PowerFrame;
            MeterMath.FrameDescription frameDescription4 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusSonderFrames[0].PowerFrame);
            frames4.Add((object) frameDescription4);
          }
          else
          {
            ArrayList frames5 = this.MyBaseSettings.Frames;
            frameNames = ZR_Constants.FrameNames.PowerFrame;
            MeterMath.FrameDescription frameDescription5 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusEnergyFrames[this.MyBaseSettings.PowerUnitIndex].PowerFrame);
            frames5.Add((object) frameDescription5);
          }
        }
        else
        {
          ArrayList frames6 = this.MyBaseSettings.Frames;
          frameNames = ZR_Constants.FrameNames.PowerFrame;
          MeterMath.FrameDescription frameDescription6 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusEnergyFrames[this.MyBaseSettings.PowerUnitIndex].PowerFrame);
          frames6.Add((object) frameDescription6);
        }
        if (FirmwareVersion <= 17039360L && this.MyBaseSettings.VolumeUnit != "?")
        {
          if (this.MyBaseSettings.VolumeUnitIndex < 0 || this.MyBaseSettings.VolumeUnitIndex >= ZelsiusMath.ZelsiusInfoByte1.Length)
          {
            this.LastError = MeterMath.Errors.VolumeUnitNotAvailable;
            this.LastErrorInfo = "ZÃ¤hler_Info_Byte1";
            return false;
          }
          int num4 = (int) ZelsiusMath.ZelsiusInfoByte1[this.MyBaseSettings.VolumeUnitIndex];
          if (num4 == -1)
          {
            this.LastError = MeterMath.Errors.VolumeUnitNotAvailable;
            this.LastErrorInfo = "ZÃ¤hler_Info_Byte1";
            return false;
          }
          int y = num4 & 15;
          if (this.MyBaseSettings.EnergyUnitIndex < 0 || this.MyBaseSettings.EnergyUnitIndex >= ZelsiusMath.ZelsiusInfoByte2.Length)
          {
            this.LastError = MeterMath.Errors.EnergyUnitNotAvailable;
            this.LastErrorInfo = "ZÃ¤hler_Info_Byte2";
            return false;
          }
          int num5 = (int) ZelsiusMath.ZelsiusInfoByte2[this.MyBaseSettings.EnergyUnitIndex];
          if (num5 == -1)
          {
            this.LastError = MeterMath.Errors.EnergyUnitNotAvailable;
            this.LastErrorInfo = "ZÃ¤hler_Info_Byte2";
            return false;
          }
          int num6 = num5 & 15;
          long num7 = 1000000;
          long num8 = (long) Math.Pow(10.0, (double) y);
          long num9;
          long num10;
          if (flag)
          {
            num9 = 1000L;
            num10 = (long) Math.Pow(10.0, (double) (num6 - 1));
          }
          else
          {
            num9 = 1L;
            num10 = (long) Math.Pow(10.0, (double) (num6 - 1));
          }
          num2 = num7 * num10 / (num9 * num8) / 100L;
          if (num2 <= 0L || num2 > 10000L)
          {
            this.LastError = MeterMath.Errors.PowerUnitNotAvailable;
            return false;
          }
        }
        this.MyBaseSettings.MBusEnergieVIF = MeterMath.LinearEnergyUnits[(int) MeterMath.EnergyUnits[this.MyBaseSettings.EnergyUnitIndex].LinearUnitIndex].MBusEnergieVIF;
        this.MyBaseSettings.MBusPowerVIF = MeterMath.LinearEnergyUnits[(int) MeterMath.EnergyUnits[this.MyBaseSettings.PowerUnitIndex].LinearUnitIndex].MBusPowerVIF;
        if (this.MyBaseSettings.PulsValueInLiterPerImpuls > 0.0)
        {
          if (this.MyBaseSettings.PulsValueInLiterPerImpuls > 10000.0 || this.MyBaseSettings.PulsValueInLiterPerImpuls < 0.001)
          {
            this.LastError = MeterMath.Errors.PulsValueOutOfRange;
            return false;
          }
          ArrayList frames7 = this.MyBaseSettings.Frames;
          frameNames = ZR_Constants.FrameNames.ImpulsValueFrame;
          MeterMath.FrameDescription frameDescription7 = new MeterMath.FrameDescription(frameNames.ToString(), this.GetImpulseValueFrame(this.MyBaseSettings.PulsValueInLiterPerImpuls));
          frames7.Add((object) frameDescription7);
          double a = this.MyBaseSettings.PulsValueInLiterPerImpuls * MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[this.MyBaseSettings.VolumeUnitIndex].LinearUnitIndex].UnitFactorFromLiter;
          int num11 = 0;
          while (a < 65536.0)
          {
            a *= 2.0;
            ++num11;
          }
          while (a >= 65535.5)
          {
            a /= 2.0;
            --num11;
          }
          this.MyBaseSettings.ZelsiusVolPulsValue = (int) Math.Round(a);
          this.MyBaseSettings.Vol_SumExpo = (sbyte) num11;
          this.MyBaseSettings.PulsValueInLiterPerImpulsUsed = (double) this.MyBaseSettings.ZelsiusVolPulsValue / Math.Pow(2.0, (double) this.MyBaseSettings.Vol_SumExpo);
          this.NeadedMeterVars[(object) "DefaultFunction.Vol_SumExpo"] = (object) (long) this.MyBaseSettings.Vol_SumExpo;
          this.NeadedMeterVars[(object) "DefaultFunction.PulsValue1"] = (object) (long) this.MyBaseSettings.ZelsiusVolPulsValue;
          double num12 = 1E-05;
          double num13 = 1.0 / MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[this.MyBaseSettings.VolumeUnitIndex].LinearUnitIndex].UnitFactorFromLiter;
          double unitFactorFromWh = MeterMath.LinearEnergyUnits[(int) MeterMath.EnergyUnits[this.MyBaseSettings.EnergyUnitIndex].LinearUnitIndex].UnitFactorFromWh;
          if (this.MyBaseSettings.EnergyUnitIndex >= (int) ZelsiusMath.FirstIndexEnergyInJoule)
            unitFactorFromWh /= 3.6;
          double num14 = num12 * num13 * unitFactorFromWh;
          int num15 = 0;
          while (num14 < 65536.0)
          {
            num14 *= 2.0;
            ++num15;
          }
          while (num14 >= 65536.0)
          {
            num14 /= 2.0;
            --num15;
          }
          int num16 = (int) this.MyBaseSettings.Vol_SumExpo + num15 - 32;
          this.MyBaseSettings.ZelsiusEnergyPulsValue = (int) num14;
          this.MyBaseSettings.Energy_SumExpo = (byte) num16;
          this.NeadedMeterVars[(object) "DefaultFunction.Energ_SumExpo"] = (object) (long) this.MyBaseSettings.Energy_SumExpo;
          this.NeadedMeterVars[(object) "DefaultFunction.Energ_ImpulsFaktor"] = (object) (long) this.MyBaseSettings.ZelsiusEnergyPulsValue;
          if (64 - (int) this.MyBaseSettings.Vol_SumExpo < 28 || this.MyBaseSettings.Vol_SumExpo < (sbyte) 0)
          {
            this.LastError = MeterMath.Errors.VolumeUnitNotAvailable;
            this.LastErrorInfo = "Resolution out of range!";
            return false;
          }
          if (64 - (int) this.MyBaseSettings.Energy_SumExpo < 28 || this.MyBaseSettings.Energy_SumExpo < (byte) 0)
          {
            this.LastError = MeterMath.Errors.EnergyUnitNotAvailable;
            this.LastErrorInfo = "Resolution out of range!";
            return false;
          }
          if (FirmwareVersion <= 17039360L && this.MyBaseSettings.Vol_SumExpo < (sbyte) 4)
          {
            this.LastError = MeterMath.Errors.FlowOutOfRange;
            this.LastErrorInfo = "Firmware <= 1.4.0";
            return false;
          }
          byte num17 = (byte) (long) this.NeadedMeterVars[(object) "DefaultFunction.Energie_Konfiguration"];
          object neadedMeterVar = this.NeadedMeterVars[(object) "DefaultFunction.RW_Typ_Konfiguration"];
          byte num18 = neadedMeterVar != null ? (byte) (long) neadedMeterVar : (byte) 0;
          if (this.MyBaseSettings.EnergyUnit != "?")
          {
            if (this.MyBaseSettings.EnergyUnitIndex >= (int) ZelsiusMath.FirstIndexEnergyInJoule)
              num17 |= (byte) 8;
            else
              num17 &= (byte) 247;
          }
          if (this.MyBaseSettings.BaseConfig != "nil")
          {
            byte num19 = (byte) ((uint) num17 & (uint) ~ZelsiusMath.BC_SettingsMask.Energie_Konfiguration);
            byte num20 = (byte) ((uint) num18 & (uint) ~ZelsiusMath.BC_SettingsMask.RW_Typ_Konfiguration);
            num17 = (byte) ((uint) num19 | (uint) ZelsiusMath.BC_SettingsList[this.MyBaseSettings.BaseConfigIndex].Energie_Konfiguration);
            num18 = (byte) ((uint) num20 | (uint) ZelsiusMath.BC_SettingsList[this.MyBaseSettings.BaseConfigIndex].RW_Typ_Konfiguration);
          }
          this.NeadedMeterVars[(object) "DefaultFunction.Energie_Konfiguration"] = (object) (long) num17;
          if (neadedMeterVar != null)
            this.NeadedMeterVars[(object) "DefaultFunction.RW_Typ_Konfiguration"] = (object) (long) num18;
          if (FirmwareVersion <= 17039360L && num2 <= 0L)
          {
            this.LastError = MeterMath.Errors.PowerOutOfRange;
            this.LastErrorInfo = "Firmware <= 1.4.0";
            return false;
          }
        }
        for (int index1 = 1; index1 < 3; ++index1)
        {
          string DisplayValue;
          double num21;
          if (index1 == 1)
          {
            if (!(this.MyBaseSettings.Input1Unit == "?"))
            {
              DisplayValue = this.MyBaseSettings.Input1Unit;
              num21 = this.MyBaseSettings.Input1PulsValue;
            }
            else
              continue;
          }
          else if (!(this.MyBaseSettings.Input2Unit == "?"))
          {
            DisplayValue = this.MyBaseSettings.Input2Unit;
            num21 = this.MyBaseSettings.Input2PulsValue;
          }
          else
            continue;
          int inputUnitIndex = MeterMath.GetInputUnitIndex(DisplayValue);
          if (inputUnitIndex < 0)
          {
            this.LastError = MeterMath.Errors.Input1UnitNotAvailable;
            return false;
          }
          MeterMath.InputFrameType frameType = MeterMath.InputUnits[inputUnitIndex].FrameType;
          int index2;
          int afterPointDigits;
          switch (frameType)
          {
            case MeterMath.InputFrameType.Empty:
              index2 = MeterMath.GetEmptyUnitIndex(DisplayValue);
              if (index2 >= 0)
              {
                afterPointDigits = (int) MeterMath.EmptyUnits[index2].AfterPointDigits;
                break;
              }
              goto default;
            case MeterMath.InputFrameType.Energy:
              index2 = MeterMath.GetEnergyUnitIndex(DisplayValue);
              if (index2 >= 0)
              {
                afterPointDigits = (int) MeterMath.EnergyUnits[index2].AfterPointDigits;
                break;
              }
              goto default;
            case MeterMath.InputFrameType.Volume:
              index2 = MeterMath.GetVolumeUnitIndex(DisplayValue);
              if (index2 >= 0)
              {
                afterPointDigits = (int) MeterMath.VolumeUnits[index2].AfterPointDigits;
                break;
              }
              goto default;
            default:
              if (index1 == 1)
                this.LastError = MeterMath.Errors.Input1UnitNotAvailable;
              else
                this.LastError = MeterMath.Errors.Input2UnitNotAvailable;
              return false;
          }
          if (afterPointDigits > 3)
          {
            if (index1 == 1)
              this.LastError = MeterMath.Errors.Input1ToManyDecimalPlaces;
            else
              this.LastError = MeterMath.Errors.Input2ToManyDecimalPlaces;
            return false;
          }
          double num22 = 64.0 * Math.Pow(10.0, (double) afterPointDigits);
          long num23 = (long) (num21 * num22);
          double num24 = (double) num23 / num22;
          double num25 = num21 * 0.01;
          if (num23 <= 0L || num23 > (long) ushort.MaxValue || num24 > num21 + num25 || num24 < num21 - num25)
          {
            if (index1 == 1)
              this.LastError = MeterMath.Errors.Input1ToOutOfRange;
            else
              this.LastError = MeterMath.Errors.Input2ToOutOfRange;
            return false;
          }
          int index3 = 7 - (afterPointDigits + 1);
          if (index1 == 1)
          {
            switch (frameType)
            {
              case MeterMath.InputFrameType.Empty:
                ArrayList frames8 = this.MyBaseSettings.Frames;
                frameNames = ZR_Constants.FrameNames.Input1Frame;
                MeterMath.FrameDescription frameDescription8 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusEmptyFrames[index2].EmptyFrame);
                frames8.Add((object) frameDescription8);
                this.MyBaseSettings.MBusInput1VIF = MeterMath.LinearEmptyUnits[(int) MeterMath.EmptyUnits[index2].LinearUnitIndex].MBusEmptyVIF;
                break;
              case MeterMath.InputFrameType.Energy:
                ArrayList frames9 = this.MyBaseSettings.Frames;
                frameNames = ZR_Constants.FrameNames.Input1Frame;
                MeterMath.FrameDescription frameDescription9 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusEnergyFrames[index2].EnergyFrame);
                frames9.Add((object) frameDescription9);
                this.MyBaseSettings.MBusInput1VIF = MeterMath.LinearEnergyUnits[(int) MeterMath.EnergyUnits[index2].LinearUnitIndex].MBusEnergieVIF;
                break;
              case MeterMath.InputFrameType.Volume:
                ArrayList frames10 = this.MyBaseSettings.Frames;
                frameNames = ZR_Constants.FrameNames.Input1Frame;
                MeterMath.FrameDescription frameDescription10 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusVolumeFrames[index2].VolumeFrame);
                frames10.Add((object) frameDescription10);
                this.MyBaseSettings.MBusInput1VIF = MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[index2].LinearUnitIndex].MBusVolumeVIF;
                break;
              default:
                this.LastError = MeterMath.Errors.Input1UnitNotAvailable;
                return false;
            }
            this.MyBaseSettings.Input1UnitIndex = inputUnitIndex;
            this.NeadedMeterVars[(object) "R:Inp1Factor"] = (object) num23;
            ArrayList frames11 = this.MyBaseSettings.Frames;
            frameNames = ZR_Constants.FrameNames.Input1ImpValFrame;
            MeterMath.FrameDescription frameDescription11 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusEmptyFrames[index3].EmptyFrame);
            frames11.Add((object) frameDescription11);
          }
          else
          {
            switch (frameType)
            {
              case MeterMath.InputFrameType.Empty:
                ArrayList frames12 = this.MyBaseSettings.Frames;
                frameNames = ZR_Constants.FrameNames.Input2Frame;
                MeterMath.FrameDescription frameDescription12 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusEmptyFrames[index2].EmptyFrame);
                frames12.Add((object) frameDescription12);
                this.MyBaseSettings.MBusInput2VIF = MeterMath.LinearEmptyUnits[(int) MeterMath.EmptyUnits[index2].LinearUnitIndex].MBusEmptyVIF;
                break;
              case MeterMath.InputFrameType.Energy:
                ArrayList frames13 = this.MyBaseSettings.Frames;
                frameNames = ZR_Constants.FrameNames.Input2Frame;
                MeterMath.FrameDescription frameDescription13 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusEnergyFrames[index2].EnergyFrame);
                frames13.Add((object) frameDescription13);
                this.MyBaseSettings.MBusInput2VIF = MeterMath.LinearEnergyUnits[(int) MeterMath.EnergyUnits[index2].LinearUnitIndex].MBusEnergieVIF;
                break;
              case MeterMath.InputFrameType.Volume:
                ArrayList frames14 = this.MyBaseSettings.Frames;
                frameNames = ZR_Constants.FrameNames.Input2Frame;
                MeterMath.FrameDescription frameDescription14 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusVolumeFrames[index2].VolumeFrame);
                frames14.Add((object) frameDescription14);
                this.MyBaseSettings.MBusInput2VIF = MeterMath.LinearVolumeUnits[(int) MeterMath.VolumeUnits[index2].LinearUnitIndex].MBusVolumeVIF;
                break;
              default:
                this.LastError = MeterMath.Errors.Input1UnitNotAvailable;
                return false;
            }
            this.MyBaseSettings.Input2UnitIndex = inputUnitIndex;
            this.NeadedMeterVars[(object) "R:Inp2Factor"] = (object) num23;
            ArrayList frames15 = this.MyBaseSettings.Frames;
            frameNames = ZR_Constants.FrameNames.Input2ImpValFrame;
            MeterMath.FrameDescription frameDescription15 = new MeterMath.FrameDescription(frameNames.ToString(), ZelsiusMath.ZelsiusEmptyFrames[index3].EmptyFrame);
            frames15.Add((object) frameDescription15);
          }
        }
      }
      catch (Exception ex)
      {
        this.LastError = MeterMath.Errors.MathematicError;
        this.LastErrorInfo = ex.ToString();
        return false;
      }
      return true;
    }

    private string[] GetImpulseValueFrame(double PulsValueInLiterPerImpuls)
    {
      string[] impulseValueFrame = new string[12]
      {
        "0",
        "-",
        "0",
        "-",
        "DII_FRAME_TEXT_SPACE DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_SPACE DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_SPACE DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_SPACE DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_SPACE DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_SPACE DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_SPACE DII_FRAME_TEXTFOLLOW",
        "DII_FRAME_TEXT_SPACE"
      };
      Decimal num1 = Decimal.Truncate((Decimal) PulsValueInLiterPerImpuls);
      Decimal num2 = (Decimal) PulsValueInLiterPerImpuls % 1M;
      if (num1 == 0M)
      {
        if (num2 == 0M)
          throw new ArgumentException("Impuls value == 0");
        impulseValueFrame[2] = "DII_FRAME_SEGS3_DEC7";
        impulseValueFrame[4] = "DII_FRAME_TEXT_0 DII_FRAME_TEXTFOLLOW";
        for (int index = 5; index < 12; ++index)
        {
          Decimal d = num2 * 10M;
          Decimal Digit = Math.Truncate(d);
          num2 = d % 1M;
          impulseValueFrame[index] = this.GetDigitText(Digit);
          if (index != 11)
          {
            // ISSUE: explicit reference operation
            ^ref impulseValueFrame[index] += " DII_FRAME_TEXTFOLLOW";
          }
        }
      }
      else if (num2 > 0M)
      {
        if (num1 > 9999M)
          throw new ArgumentException("Wrong impuls value");
        impulseValueFrame[2] = "DII_FRAME_SEGS3_DEC4";
        int index1 = 7;
        while (num1 > 0M)
        {
          Decimal Digit = num1 % 10M;
          num1 = Decimal.Truncate(num1 / 10M);
          impulseValueFrame[index1] = this.GetDigitText(Digit);
          // ISSUE: explicit reference operation
          ^ref impulseValueFrame[index1] += " DII_FRAME_TEXTFOLLOW";
          --index1;
        }
        for (int index2 = 8; index2 < 12; ++index2)
        {
          Decimal d = num2 * 10M;
          Decimal Digit = Decimal.Truncate(d);
          num2 = d % 1M;
          impulseValueFrame[index2] = this.GetDigitText(Digit);
          if (index2 != 11)
          {
            // ISSUE: explicit reference operation
            ^ref impulseValueFrame[index2] += " DII_FRAME_TEXTFOLLOW";
          }
        }
      }
      else
      {
        if (num1 > 99999999M)
          throw new ArgumentException("Wrong impuls value");
        int index = 11;
        while (num1 > 0M)
        {
          Decimal Digit = num1 % 10M;
          num1 = Decimal.Truncate(num1 / 10M);
          impulseValueFrame[index] = this.GetDigitText(Digit);
          if (index != 11)
          {
            // ISSUE: explicit reference operation
            ^ref impulseValueFrame[index] += " DII_FRAME_TEXTFOLLOW";
          }
          --index;
        }
      }
      return impulseValueFrame;
    }

    private string GetDigitText(Decimal Digit)
    {
      if (Digit == 0M)
        return "DII_FRAME_TEXT_0";
      if (Digit == 1M)
        return "DII_FRAME_TEXT_1";
      if (Digit == 2M)
        return "DII_FRAME_TEXT_2";
      if (Digit == 3M)
        return "DII_FRAME_TEXT_3";
      if (Digit == 4M)
        return "DII_FRAME_TEXT_4";
      if (Digit == 5M)
        return "DII_FRAME_TEXT_5";
      if (Digit == 6M)
        return "DII_FRAME_TEXT_6";
      if (Digit == 7M)
        return "DII_FRAME_TEXT_7";
      if (Digit == 8M)
        return "DII_FRAME_TEXT_8";
      if (Digit == 9M)
        return "DII_FRAME_TEXT_9";
      throw new ArgumentException("Wrong impuls value digit");
    }

    public override string GetUnitString(byte[] EEP_Data, int FrameOffset)
    {
      return ZelsiusInterpreter.GetUnitString(EEP_Data, FrameOffset);
    }

    public override bool GetDisplay(
      ByteField EEProm,
      uint EEPromSize,
      uint EEPromStartOffset,
      out bool[] Display)
    {
      if (this.MyZelsiusInterpreter == null)
        this.MyZelsiusInterpreter = new ZelsiusInterpreter(this);
      return this.MyZelsiusInterpreter.GetDisplay(EEProm, EEPromSize, EEPromStartOffset, out Display);
    }

    public override bool GetDisplay(
      byte[] EEProm,
      uint EEPromSize,
      uint EEPromStartOffset,
      out bool[] Display)
    {
      if (this.MyZelsiusInterpreter == null)
        this.MyZelsiusInterpreter = new ZelsiusInterpreter(this);
      return this.MyZelsiusInterpreter.GetDisplay(EEProm, EEPromSize, EEPromStartOffset, out Display);
    }

    public event ZelsiusMath.CpuRead GetCpuData;

    internal bool GetCpuDataWork(
      string NameOrAddress,
      int NumberOfBytes,
      MemoryLocation Location,
      out byte[] Data)
    {
      Data = (byte[]) null;
      return this.GetCpuData != null && this.GetCpuData(NameOrAddress, NumberOfBytes, Location, out Data);
    }

    internal struct BC_Settings
    {
      internal byte Energie_Konfiguration;
      internal byte RW_Typ_Konfiguration;

      internal BC_Settings(byte Energie_KonfigurationIn, byte RW_Typ_KonfigurationIn)
      {
        this.Energie_Konfiguration = Energie_KonfigurationIn;
        this.RW_Typ_Konfiguration = RW_Typ_KonfigurationIn;
      }
    }

    public delegate bool CpuRead(
      string NameOrAddress,
      int NumberOfBytes,
      MemoryLocation Location,
      out byte[] Data);
  }
}


--- ZR_HandlerFunctions.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.ZR_HandlerFunctions
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

using AsyncCom;
using DeviceCollector;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Resources;
using System.Text;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace GMM_Handler
{
  public class ZR_HandlerFunctions : IZR_HandlerFunctions, I_ZR_Component
  {
    internal bool actualValueReadingState = false;
    internal ResourceManager MyRes;
    internal GMMConfig opConfig = (GMMConfig) null;
    private IAsyncFunctions ascom;
    public IDeviceCollector SerBus;
    internal HandlerWindow MyWindow;
    internal AllMeters MyMeters;
    internal LoadedFunctions MyLoadedFunctions;
    internal DataBaseAccess MyDataBaseAccess;
    internal InfoFlags MyInfoFlags = new InfoFlags();
    internal bool DisableChecks = false;
    internal bool ReadWithoutBackup = false;
    internal bool BackupForEachReadInternal = false;
    internal LoggerRestor LoggerRestoreState = LoggerRestor.RestoreBaseLoggers;
    internal bool ExtendedTypeEditMode = false;
    internal bool useBaseTypeTemplate = true;
    internal bool showFunctionAddDelMessages = true;
    internal bool showFunctionRemoveMessages = false;
    internal bool UseOnlyDefaultValues = false;
    internal bool checksumErrorsAsWarning = false;
    internal bool IgnoreIntervalMinutesRaster = false;
    private ERR8002_Form ErrForm;
    private string CSV_FileName = string.Empty;

    public bool BackupForEachRead
    {
      get => this.BackupForEachReadInternal;
      set => this.BackupForEachReadInternal = value;
    }

    public LoggerRestor LoggerRestoreSetup
    {
      get => this.LoggerRestoreState;
      set => this.LoggerRestoreState = value;
    }

    public bool BaseTypeEditMode
    {
      get => this.ExtendedTypeEditMode;
      set => this.ExtendedTypeEditMode = value;
    }

    public bool UseBaseTypeTemplate
    {
      get => this.useBaseTypeTemplate;
      set => this.useBaseTypeTemplate = value;
    }

    public bool ShowFunctionAddDelMessages
    {
      get => this.showFunctionAddDelMessages;
      set => this.showFunctionAddDelMessages = value;
    }

    public bool ShowFunctionRemoveMessages
    {
      get => this.showFunctionRemoveMessages;
      set => this.showFunctionRemoveMessages = value;
    }

    public bool ChecksumErrorsAsWarning
    {
      get => this.checksumErrorsAsWarning;
      set => this.checksumErrorsAsWarning = value;
    }

    public ZR_HandlerFunctions()
    {
      this.BaseConstructor((IDeviceCollector) null, (IAsyncFunctions) null);
    }

    public ZR_HandlerFunctions(IDeviceCollector TheSerialBus, IAsyncFunctions TheAsyncCom)
    {
      this.BaseConstructor(TheSerialBus, TheAsyncCom);
    }

    private void BaseConstructor(IDeviceCollector TheSerialBus, IAsyncFunctions TheAsyncCom)
    {
      this.MyRes = new ResourceManager("GMM_Handler.GMM_HandlerRes", typeof (ZR_HandlerFunctions).Assembly);
      if (TheSerialBus == null)
      {
        ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.DeviceCollector);
        this.SerBus = (IDeviceCollector) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.DeviceCollector];
      }
      else
        this.SerBus = TheSerialBus;
      this.ascom = TheAsyncCom != null ? TheAsyncCom : (IAsyncFunctions) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.AsyncCom];
      if (ZR_Component.CommonGmmInterface != null)
        this.opConfig = (GMMConfig) ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.KonfigGroup];
      this.MyMeters = new AllMeters(this);
      this.MyLoadedFunctions = new LoadedFunctions(this);
      this.MyDataBaseAccess = new DataBaseAccess(this);
      BusDevice selectedDevice = this.SerBus.GetSelectedDevice();
      if (selectedDevice != null && (!(selectedDevice is Serie2MBus) || selectedDevice is Serie3MBus))
      {
        if (this.SerBus.GetBaseMode() == BusMode.MBusPointToPoint && (UserRights.GlobalUserRights.PackageName == UserRights.Packages.ConfigurationManager.ToString() || UserRights.GlobalUserRights.PackageName == UserRights.Packages.ConfigurationManagerPro.ToString()))
        {
          this.SerBus.DeleteBusInfo();
          if (this.SerBus.AddDevice(DeviceTypes.ZR_Serie2, 0))
            goto label_10;
        }
        ZR_ClassLibMessages.AddWarning(this.MyRes.GetString("IllegalBusDevice"), "IllegalBusDevice");
label_10:;
      }
      try
      {
        if (this.opConfig == null)
          return;
        string str1 = this.opConfig.GetValue("GMM_Handler", "LoggerRestoreSetup");
        if (str1 != "")
          this.LoggerRestoreSetup = (LoggerRestor) Enum.Parse(typeof (LoggerRestor), str1, true);
        string str2 = this.opConfig.GetValue("GMM_Handler", "ShowFunctionAddDelMessages");
        if (str2 != "")
          this.showFunctionAddDelMessages = bool.Parse(str2);
        string str3 = this.opConfig.GetValue("GMM_Handler", "ShowFunctionRemoveMessages");
        if (str3 != "")
          this.showFunctionRemoveMessages = bool.Parse(str3);
        string str4 = this.opConfig.GetValue("GMM_Handler", "UseBaseTypeTemplate");
        if (str4 != "")
          this.useBaseTypeTemplate = bool.Parse(str4);
      }
      catch
      {
      }
    }

    public void GMM_Dispose()
    {
      this.opConfig.SetOrUpdateValue("GMM_Handler", "LoggerRestoreSetup", this.LoggerRestoreSetup.ToString());
      this.opConfig.SetOrUpdateValue("GMM_Handler", "ShowFunctionAddDelMessages", this.showFunctionAddDelMessages.ToString());
      this.opConfig.SetOrUpdateValue("GMM_Handler", "ShowFunctionRemoveMessages", this.showFunctionRemoveMessages.ToString());
      this.opConfig.SetOrUpdateValue("GMM_Handler", "UseBaseTypeTemplate", this.useBaseTypeTemplate.ToString());
    }

    internal bool AddErrorPointMessage()
    {
      StackFrame stackFrame = new StackFrame(1, true);
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("Error at File: '" + stackFrame.GetFileName() + "'");
      stringBuilder.Append(" Line: '" + stackFrame.GetFileLineNumber().ToString() + "'" + ZR_Constants.SystemNewLine);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, stringBuilder.ToString());
      return false;
    }

    internal bool AddErrorPointMessage(string AdditionalMessage)
    {
      StackFrame stackFrame = new StackFrame(1, true);
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("Error at File: '" + stackFrame.GetFileName() + "'");
      stringBuilder.Append(" Line: '" + stackFrame.GetFileLineNumber().ToString() + "'" + ZR_Constants.SystemNewLine);
      stringBuilder.Append(ZR_Constants.SystemNewLine);
      stringBuilder.Append(AdditionalMessage + ZR_Constants.SystemNewLine);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.InternalError, stringBuilder.ToString());
      return false;
    }

    public string GetLastError() => ZR_ClassLibMessages.GetLastErrorStringTranslated();

    public string getErrorMsg()
    {
      return Environment.NewLine + ZR_ClassLibMessages.GetLastErrorMessageAndClearError();
    }

    public bool Undo() => this.MyMeters.Undo();

    public void ShowHandlerWindow() => this.ShowHandlerWindow("");

    public string ShowHandlerWindow(string ComponentList)
    {
      if (this.MyWindow == null)
        this.MyWindow = new HandlerWindow(this);
      this.MyWindow.InitStartMenu(ComponentList);
      int num = (int) this.MyWindow.ShowDialog();
      return this.MyWindow.StartComponentName;
    }

    public bool setMaximumBaudrate(bool setMaxBaudrate) => true;

    public int ClearAll()
    {
      this.MyMeters = new AllMeters(this);
      ZR_ClassLibMessages.ClearErrors();
      return 0;
    }

    public void ClearConnectedReadAndWorkMeter()
    {
      this.MyMeters.ConnectedMeter = (Meter) null;
      this.MyMeters.ReadMeter = (Meter) null;
      this.MyMeters.WorkMeter = (Meter) null;
      this.MyMeters.BaseTypeMeter = (Meter) null;
      this.MyMeters.LoggerDataFromMeter = (List<LoggerInfo>) null;
      this.MyMeters.ClearUndoStack();
      ZR_ClassLibMessages.ClearErrors();
    }

    public int openDBDevice(ref ZR_MeterIdent theIdentity, DateTime theTimePoint)
    {
      if (!this.MyMeters.LoadMeter(theIdentity, theTimePoint))
        return 2;
      theIdentity = this.MyMeters.WorkMeter.MyIdent.Clone();
      return 0;
    }

    public bool GetSavedDBDeviceData(out ZR_MeterIdent theIdentity, out DateTime theTimePoint)
    {
      theIdentity = (ZR_MeterIdent) null;
      theTimePoint = DateTime.MinValue;
      if (this.MyMeters.ReadMeter == null || this.MyMeters.ReadMeter.DatabaseTime == DateTime.MinValue)
        return false;
      theIdentity = this.MyMeters.ReadMeter.MyIdent.Clone();
      theTimePoint = this.MyMeters.ReadMeter.DatabaseTime;
      return true;
    }

    public int openType(int TypeMeterInfoID) => this.openType(TypeMeterInfoID, false);

    public int openType(int TypeMeterInfoID, bool DeleteReadMeter)
    {
      return !this.MyMeters.LoadType(TypeMeterInfoID, DeleteReadMeter) ? 2 : 0;
    }

    public bool openType(int TypeMeterInfoID, int FirmwareVersion, bool DeleteReadMeter)
    {
      return this.MyMeters.LoadType(TypeMeterInfoID, FirmwareVersion, DeleteReadMeter);
    }

    public int openType(ref ZR_MeterIdent theIdentity, bool DeleteReadMeter)
    {
      if (!this.MyMeters.LoadType(theIdentity.MeterInfoID, DeleteReadMeter))
        return 2;
      theIdentity = this.MyMeters.WorkMeter.MyIdent.Clone();
      return 0;
    }

    public bool OverloadType(string OverloadSettings)
    {
      return this.MyMeters.OverloadType(OverloadSettings);
    }

    public bool OverloadIdentAndCalibrationData(ZR_HandlerFunctions.MeterObjects SourceMeterObject)
    {
      try
      {
        if (!this.MyMeters.OverloadIdentAndCalibrationData(SourceMeterObject))
          return false;
      }
      catch
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
        return false;
      }
      return true;
    }

    public bool DeleteMeter(ZR_HandlerFunctions.MeterObjects MeterObject)
    {
      return this.MyMeters.DeleteMeter(MeterObject);
    }

    public bool CopyMeter(ZR_HandlerFunctions.MeterObjects SourceMeterObject)
    {
      return this.MyMeters.CopyMeter(SourceMeterObject);
    }

    public bool PastMeter(ZR_HandlerFunctions.MeterObjects MeterObject)
    {
      return this.MyMeters.PastMeter(MeterObject);
    }

    public bool IsMeterObjectAvailable(ZR_HandlerFunctions.MeterObjects MeterObject)
    {
      switch (MeterObject)
      {
        case ZR_HandlerFunctions.MeterObjects.Read:
          if (this.MyMeters.ReadMeter != null)
            return true;
          break;
        case ZR_HandlerFunctions.MeterObjects.Work:
          if (this.MyMeters.WorkMeter != null)
            return true;
          break;
        case ZR_HandlerFunctions.MeterObjects.Type:
          if (this.MyMeters.TypeMeter != null)
            return true;
          break;
        case ZR_HandlerFunctions.MeterObjects.DbMeter:
          if (this.MyMeters.DbMeter != null)
            return true;
          break;
        case ZR_HandlerFunctions.MeterObjects.WorkUndo0:
          if (this.MyMeters.WorkMeterUndoStack[0] != null)
            return true;
          break;
        case ZR_HandlerFunctions.MeterObjects.WorkUndo1:
          if (this.MyMeters.WorkMeterUndoStack[1] != null)
            return true;
          break;
        case ZR_HandlerFunctions.MeterObjects.WorkUndo2:
          if (this.MyMeters.WorkMeterUndoStack[2] != null)
            return true;
          break;
      }
      return false;
    }

    public bool IsDatabaseSwitchTrue(string Switch)
    {
      return this.MyDataBaseAccess.IsDatabaseSwitchTrue(Switch);
    }

    public int saveType(ZR_MeterIdent TypeOverrideIdent)
    {
      return !this.MyMeters.SaveType(TypeOverrideIdent) ? 1 : 0;
    }

    public int saveAsType(ZR_MeterIdent NewTypeIdent)
    {
      return !this.MyMeters.SaveAsNewType(NewTypeIdent) ? 1 : 0;
    }

    public int saveAsType(string IdentNumber, string TypeDescription)
    {
      ZR_MeterIdent TheIdent;
      this.GetIdent(out TheIdent);
      TheIdent.PPSArtikelNr = IdentNumber;
      TheIdent.MeterInfoDescription = TypeDescription;
      TheIdent.TypeOverrideString = string.Empty;
      TheIdent.MeterInfoID = 0;
      return !this.MyMeters.SaveAsNewType(TheIdent) ? 1 : 0;
    }

    public bool SpecialFunction(SpecialFunctionSelection TheSelection, object TheParameterObject)
    {
      if (TheSelection != SpecialFunctionSelection.Err2008)
        return false;
      if (this.ErrForm == null)
        this.ErrForm = new ERR8002_Form(this);
      try
      {
        int num = (int) this.ErrForm.ShowDialog();
      }
      catch
      {
      }
      return true;
    }

    public int checkConnection() => this.checkConnection(out string _);

    public int checkConnection(out string theFirmwareVersion)
    {
      theFirmwareVersion = "0";
      return !this.MyMeters.ConnectMeter() ? 1 : 0;
    }

    public bool IdentConnectedMeter(out ZR_MeterIdent theIdentity)
    {
      return this.MyMeters.IdentConnectedMeter(out theIdentity);
    }

    public bool IsReadMeterUnchanged()
    {
      return this.MyMeters.ReadMeter != null && this.MyMeters.ReadMeter.MyCommunication.VerifyCheckSum(false);
    }

    public bool ReadConnectedDevice()
    {
      ZR_ClassLibMessages.ClearErrors();
      return this.MyMeters.ReadConnectedMeter();
    }

    public bool ReadConnectedDevice(out ZR_MeterIdent theIdentity)
    {
      ZR_ClassLibMessages.ClearErrors();
      theIdentity = this.MyMeters.ConnectedMeter.MyIdent;
      return this.MyMeters.ReadConnectedMeter();
    }

    public int progDevice() => !this.progDevice(DateTime.Now, false, false, false, false) ? 99 : 0;

    public bool progDevice(DateTime NewMeterTime)
    {
      return this.MyMeters.ProgramDevice(NewMeterTime, false, false, false, false, false);
    }

    public bool progDevice(
      DateTime NewMeterTime,
      bool SetWriteProtect,
      bool DisableReset,
      bool DisableTimeUpdate,
      bool DisableDbWrite)
    {
      return this.MyMeters.ProgramDevice(NewMeterTime, SetWriteProtect, DisableReset, DisableTimeUpdate, DisableDbWrite, false);
    }

    public bool progDevice(
      DateTime NewMeterTime,
      bool SetWriteProtect,
      bool DisableReset,
      bool DisableTimeUpdate,
      bool DisableDbWrite,
      bool HoldReadMeter)
    {
      return this.MyMeters.ProgramDevice(NewMeterTime, SetWriteProtect, DisableReset, DisableTimeUpdate, DisableDbWrite, HoldReadMeter);
    }

    public bool progDeviceOrigional() => this.MyMeters.ProgramDeviceOrigional();

    public bool ClearWriteProtection()
    {
      return this.MyMeters.WorkMeter != null && this.MyMeters.WorkMeter.ClearWriteProtection();
    }

    public bool SetWriteProtection()
    {
      return this.MyMeters.WorkMeter != null && this.MyMeters.WorkMeter.SetWriteProtection();
    }

    public bool GetFirmwareVersion(out long FirmwareVersion)
    {
      FirmwareVersion = 0L;
      if (this.MyMeters.WorkMeter == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
        return false;
      }
      FirmwareVersion = this.MyMeters.WorkMeter.MyIdent.lFirmwareVersion;
      return true;
    }

    public int getVersionNr(out string FirmwareVersion)
    {
      FirmwareVersion = "00.00";
      if (this.MyMeters.WorkMeter == null)
        return 1;
      FirmwareVersion = this.MyMeters.WorkMeter.MyIdent.sFirmwareVersion;
      return 0;
    }

    public bool GetIdent(out ZR_MeterIdent TheIdent)
    {
      TheIdent = (ZR_MeterIdent) null;
      if (this.MyMeters.WorkMeter == null)
        return false;
      TheIdent = this.MyMeters.WorkMeter.MyIdent.Clone();
      return true;
    }

    public bool GetIdent(ZR_HandlerFunctions.MeterObjects TheObject, out ZR_MeterIdent TheIdent)
    {
      TheIdent = (ZR_MeterIdent) null;
      switch (TheObject)
      {
        case ZR_HandlerFunctions.MeterObjects.Work:
          if (this.MyMeters.WorkMeter != null)
          {
            TheIdent = this.MyMeters.WorkMeter.MyIdent.Clone();
            return true;
          }
          break;
        case ZR_HandlerFunctions.MeterObjects.Type:
          if (this.MyMeters.TypeMeter != null)
          {
            TheIdent = this.MyMeters.TypeMeter.MyIdent.Clone();
            return true;
          }
          break;
      }
      return false;
    }

    public int getSerialNr(out string SerialNr)
    {
      SerialNr = "00000000";
      if (this.MyMeters.WorkMeter == null)
        return 1;
      SerialNr = this.MyMeters.WorkMeter.MyIdent.SerialNr;
      return 0;
    }

    public int setDeviceTime(DateTime newDeviceTime)
    {
      if (this.MyMeters.WorkMeter == null || this.MyMeters.WorkMeter.MyCommunication == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
        return 1;
      }
      return !this.MyMeters.WorkMeter.MyCommunication.setDeviceTime(newDeviceTime) ? 1 : 0;
    }

    public bool getDeviceTime(out DateTime ClockTime, out DateTime NextEventTime)
    {
      ClockTime = DateTime.MinValue;
      NextEventTime = DateTime.MinValue;
      return this.MyMeters.ReadMeter != null && this.MyMeters.ReadMeter.MyCommunication.getDeviceTime(out ClockTime, out NextEventTime);
    }

    public SortedList<MeterDBAccess.ValueTypes, string> GetActualValues()
    {
      SortedList<MeterDBAccess.ValueTypes, string> sortedList = (SortedList<MeterDBAccess.ValueTypes, string>) null;
      return this.MyMeters.WorkMeter == null ? sortedList : this.MyMeters.WorkMeter.GetActualValues();
    }

    public bool GetPalettData(bool AllVersions, out PalettData TheData)
    {
      TheData = (PalettData) null;
      if (this.MyMeters.WorkMeter == null)
        return true;
      this.MyMeters.WorkMeter.MyPalette = new FunctionPalette(this.MyMeters.WorkMeter);
      return this.MyMeters.WorkMeter.MyPalette.GetPalettData(AllVersions, out TheData);
    }

    public bool checkFunctionInPaletteDisplayFunction(int FunctionNumber)
    {
      return this.MyMeters.WorkMeter.MyPalette.IsNewestFunctionVersion((ushort) FunctionNumber);
    }

    public int getPaletteFunctionLCD(
      int FunctionNr,
      out bool[] LCDSegments,
      out string Resources,
      int x,
      int y)
    {
      Resources = string.Empty;
      if (this.MyMeters.WorkMeter.MyPalette.GetLCDList((ushort) FunctionNr, out LCDSegments))
        return 0;
      LCDSegments = new bool[128];
      return 1;
    }

    public bool GetOverrideParameterList(out SortedList TheList)
    {
      TheList = (SortedList) null;
      return this.MyMeters.WorkMeter != null && this.MyMeters.WorkMeter.GetOverrideParameterList(out TheList);
    }

    public bool GetBaudrateList(out string[] TheList)
    {
      TheList = (string[]) null;
      if (this.MyMeters.WorkMeter == null)
        return false;
      TheList = this.MyMeters.WorkMeter.GetBaudrateList();
      return true;
    }

    public GlobalDeviceId GetDeviceIdentification()
    {
      return this.MyMeters.WorkMeter == null ? (GlobalDeviceId) null : this.MyMeters.WorkMeter.GetGlobalDeviceIdentification();
    }

    public SortedList<OverrideID, ConfigurationParameter> GetConfigurationParameters(
      ConfigurationParameter.ValueType ConfigurationType,
      int SubDevice)
    {
      return this.MyMeters.WorkMeter == null ? (SortedList<OverrideID, ConfigurationParameter>) null : this.MyMeters.WorkMeter.GetConfigurationParameters(ConfigurationType, SubDevice);
    }

    public bool SetConfigurationParameter(
      SortedList<OverrideID, ConfigurationParameter> parameterList,
      int SubDevice)
    {
      return this.MyMeters.WorkMeter != null && this.MyMeters.WorkMeter.SetConfigurationParameter(parameterList, SubDevice);
    }

    public bool SetOverrideParameterFromList(SortedList TheParameterList)
    {
      return this.MyMeters.SetNewOverrides(TheParameterList);
    }

    public bool ResetAllData() => this.MyMeters.ResetAllData();

    public bool ChangeMeterData(List<Parameter.ParameterGroups> SelectedGroups)
    {
      return this.MyMeters.ChangeMeterData(SelectedGroups);
    }

    public bool IsStructureUnchangedToReadMeter()
    {
      return this.MyMeters.ReadMeter != null && this.MyMeters.WorkMeter != null && DataChecker.IsEqualMap(this.MyMeters.WorkMeter, this.MyMeters.ReadMeter);
    }

    public bool GetMBusVariableLists(out MBusInfo TheBusInfo)
    {
      TheBusInfo = (MBusInfo) null;
      return this.MyMeters.WorkMeter != null && this.MyMeters.WorkMeter.MyMBusList.GetMBusVariableLists(out TheBusInfo);
    }

    public bool SetMBusVariables(MBusInfo TheBusInfo) => this.MyMeters.SetMBusVariables(TheBusInfo);

    public bool GetParameterValue(
      string Varname,
      MemoryLocation Location,
      bool DeviceRead,
      out long Value)
    {
      Value = 0L;
      if (this.MyMeters.WorkMeter != null)
        return this.MyMeters.WorkMeter.GetParameterValue(Varname, Location, DeviceRead, out Value);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
      return false;
    }

    public bool SetParameterValue(
      string Varname,
      MemoryLocation Location,
      bool WriteImmediatly,
      long Value)
    {
      if (this.MyMeters.WorkMeter != null)
        return this.MyMeters.WorkMeter.SetParameterValue(Varname, Location, WriteImmediatly, Value);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
      return false;
    }

    public bool ChangeRamParameterBitsImmediately(string Varname, uint AndMask, uint OrMask)
    {
      if (this.MyMeters.WorkMeter != null)
        return this.MyMeters.WorkMeter.ChangeRamParameterBitsImmediately(Varname, AndMask, OrMask);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
      return false;
    }

    public bool GetMenuFunctionData(int x, int y, out FunctionData TheData)
    {
      TheData = (FunctionData) null;
      if (this.MyMeters.WorkMeter != null)
        return this.MyMeters.WorkMeter.MyPalette.GetMenuFunctionData(x, y, out TheData);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
      return false;
    }

    public int setNewMenuFunction(int x, int y, int iFunctionNr)
    {
      if (this.MyMeters.WorkMeter == null)
        return 16;
      return !this.MyMeters.AddFunction(x, y, iFunctionNr) ? 1073741824 : 0;
    }

    public int deleteMenuFunction(int x, int y)
    {
      return !this.MyMeters.DeleteFunction(x, y) ? 1073741824 : 0;
    }

    public bool DeleteFunctions(ArrayList FunctionNumbersList)
    {
      return !this.MyMeters.DeleteFunctions(FunctionNumbersList);
    }

    public int moveMenuFunction(int x1, int y1, int x2, int y2) => 0;

    public List<LoggerInfo> GetLoggerInfos(
      out int LoggerMemorySize,
      MeterObjectSelector meterObject)
    {
      LoggerMemorySize = 0;
      return meterObject == MeterObjectSelector.ReadMeter ? (this.MyMeters.ReadMeter == null ? (List<LoggerInfo>) null : this.MyMeters.ReadMeter.GetLoggerInfos(out LoggerMemorySize)) : (this.MyMeters.WorkMeter == null ? (List<LoggerInfo>) null : this.MyMeters.WorkMeter.GetLoggerInfos(out LoggerMemorySize));
    }

    public int setEmergencyMode()
    {
      if (this.SerBus.SetEmergencyMode())
        return 0;
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Set emergency mode error");
      return 1;
    }

    public int resetCounter()
    {
      if (!this.SerBus.ResetDevice())
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.CommunicationError, "Reset device error");
        return 1;
      }
      this.ClearAll();
      return 0;
    }

    public int DeleteMeterKey(int MeterKey)
    {
      if (this.MyMeters.WorkMeter == null || this.MyMeters.WorkMeter.MyCommunication == null)
      {
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
        return 1;
      }
      return !this.MyMeters.WorkMeter.MyCommunication.MyBus.DeleteMeterKey(MeterKey) ? 1 : 0;
    }

    public bool IsWriteEnabled()
    {
      return this.MyMeters.WorkMeter != null && this.MyMeters.WorkMeter.WriteEnable;
    }

    public bool DeleteMeterKey(long LockKey)
    {
      if (this.MyMeters.WorkMeter != null)
        return this.MyMeters.WorkMeter.DeleteMeterKey(LockKey);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
      return false;
    }

    public bool SetMeterKey(long DeviceKey, long DatabaseKey)
    {
      if (this.MyMeters.WorkMeter != null)
        return this.MyMeters.WorkMeter.SetMeterKey(DeviceKey, DatabaseKey);
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.IllegalData);
      return false;
    }

    public bool GetWriteState(
      out bool WriteIsEnabled,
      out bool WriteProtectionIsSet,
      out bool DatabaseKeyIsAvailable,
      out bool MeterKeyIsAvailable,
      out bool DatabaseKeyIsSaved,
      out bool MeterKeyIsSaved)
    {
      WriteIsEnabled = false;
      WriteProtectionIsSet = false;
      DatabaseKeyIsAvailable = false;
      MeterKeyIsAvailable = false;
      DatabaseKeyIsSaved = false;
      MeterKeyIsSaved = false;
      return this.MyMeters.WorkMeter != null && this.MyMeters.WorkMeter.GetWriteState(out WriteIsEnabled, out WriteProtectionIsSet, out DatabaseKeyIsAvailable, out MeterKeyIsAvailable, out DatabaseKeyIsSaved, out MeterKeyIsSaved);
    }

    public bool SaveKeyToDatabase(long LockKey)
    {
      return this.MyMeters.WorkMeter != null && this.MyMeters.WorkMeter.SaveKeyToDatabase(LockKey);
    }

    public bool getActualValueReadingState() => this.actualValueReadingState;

    public void setActualValueReadingState(bool theNewState)
    {
      this.actualValueReadingState = theNewState;
    }

    internal void WriteAndShowFile(string BaseName, StringBuilder TheData)
    {
      this.WriteAndShowFile(BaseName, TheData.ToString());
    }

    internal void WriteAndShowFile(string BaseName, string TheData)
    {
      string str = this.WriteInfoFile(BaseName, TheData);
      new Process() { StartInfo = { FileName = str } }.Start();
    }

    internal void WriteFilesAndShowFileDifferences(
      string BaseName1,
      StringBuilder TheData1,
      string BaseName2,
      StringBuilder TheData2)
    {
      string str1 = this.WriteInfoFile(BaseName1, TheData1.ToString());
      string str2 = this.WriteInfoFile(BaseName2, TheData2.ToString());
      new Process()
      {
        StartInfo = {
          FileName = "TortoiseMerge",
          Arguments = ("\"" + str1 + "\" \"" + str2 + "\"")
        }
      }.Start();
    }

    internal string WriteInfoFile(string BaseName, string TheData)
    {
      string str = Path.Combine(Path.GetDirectoryName(Application.ExecutablePath), "LoggData");
      Directory.CreateDirectory(str);
      DateTime now = DateTime.Now;
      string path = Path.Combine(str, now.ToString("yyMMddHHmmss") + "_Log_" + BaseName + ".txt");
      using (StreamWriter streamWriter = new StreamWriter(path))
      {
        streamWriter.WriteLine("GMM-Handler diagnostic            '" + BaseName + "'         " + now.ToLongDateString() + " " + now.ToLongTimeString());
        streamWriter.Write(TheData);
        streamWriter.Flush();
        streamWriter.Close();
      }
      return path;
    }

    internal void AppandToCSV_LogFile(string TheData)
    {
      if (this.CSV_FileName.Length < 1)
      {
        this.CSV_FileName = Path.GetDirectoryName(Application.ExecutablePath);
        this.CSV_FileName = Path.Combine(this.CSV_FileName, "LoggData");
        Directory.CreateDirectory(this.CSV_FileName);
        this.CSV_FileName = Path.Combine(this.CSV_FileName, "LogFile.csv");
      }
      using (StreamWriter streamWriter = File.AppendText(this.CSV_FileName))
      {
        streamWriter.WriteLine(DateTime.Now.ToString("yyMMddHHmmss") + "\t" + TheData);
        streamWriter.Close();
      }
    }

    internal bool GetMeterObject(string SelectionString, out Meter TheMeter)
    {
      return this.GetMeterObject((ZR_HandlerFunctions.MeterObjects) Enum.Parse(typeof (ZR_HandlerFunctions.MeterObjects), SelectionString, true), out TheMeter);
    }

    internal bool GetMeterObject(ZR_HandlerFunctions.MeterObjects SelectedMeter, out Meter TheMeter)
    {
      TheMeter = (Meter) null;
      switch (SelectedMeter)
      {
        case ZR_HandlerFunctions.MeterObjects.Read:
          TheMeter = this.MyMeters.ReadMeter;
          break;
        case ZR_HandlerFunctions.MeterObjects.Work:
          TheMeter = this.MyMeters.WorkMeter;
          break;
        case ZR_HandlerFunctions.MeterObjects.Type:
          TheMeter = this.MyMeters.TypeMeter;
          break;
        case ZR_HandlerFunctions.MeterObjects.DbMeter:
          TheMeter = this.MyMeters.DbMeter;
          break;
        case ZR_HandlerFunctions.MeterObjects.SavedMeter:
          TheMeter = this.MyMeters.SavedMeter;
          break;
        case ZR_HandlerFunctions.MeterObjects.WorkUndo0:
          TheMeter = this.MyMeters.WorkMeterUndoStack[0];
          break;
        case ZR_HandlerFunctions.MeterObjects.WorkUndo1:
          TheMeter = this.MyMeters.WorkMeterUndoStack[1];
          break;
        case ZR_HandlerFunctions.MeterObjects.WorkUndo2:
          TheMeter = this.MyMeters.WorkMeterUndoStack[1];
          break;
      }
      if (TheMeter != null)
        return true;
      ZR_ClassLibMessages.AddErrorDescription("Object not available");
      return false;
    }

    public bool IsEqual(
      ZR_HandlerFunctions.IsEqualFunctions CompareFunction,
      ZR_HandlerFunctions.MeterObjects OriginalMeter,
      ZR_HandlerFunctions.MeterObjects CompareMeter)
    {
      Meter TheMeter1;
      Meter TheMeter2;
      if (!this.GetMeterObject(OriginalMeter, out TheMeter1) || !this.GetMeterObject(CompareMeter, out TheMeter2))
        return false;
      switch (CompareFunction)
      {
        case ZR_HandlerFunctions.IsEqualFunctions.Map:
          return DataChecker.IsEqualMap(TheMeter1, TheMeter2);
        case ZR_HandlerFunctions.IsEqualFunctions.ProtectedArea:
          return DataChecker.IsEqualProtectedArea(TheMeter1, TheMeter2);
        case ZR_HandlerFunctions.IsEqualFunctions.AllPointers:
          return DataChecker.IsEqualAllPointers(TheMeter1, TheMeter2);
        case ZR_HandlerFunctions.IsEqualFunctions.LoggerInit:
          return DataChecker.IsLoggerEqualToTable(TheMeter1) && DataChecker.IsLoggerEqualToTable(TheMeter2);
        case ZR_HandlerFunctions.IsEqualFunctions.Overrides:
          return DataChecker.AreOverridesEqualToDatabase(TheMeter1);
        default:
          return false;
      }
    }

    public string[] GetList(
      ZR_HandlerFunctions.GetListFunctions ListFunction,
      ZR_HandlerFunctions.MeterObjects TheMeterObj)
    {
      string[] list1 = (string[]) null;
      Meter TheMeter;
      if (!this.GetMeterObject(TheMeterObj, out TheMeter))
        return list1;
      string[] list2;
      switch (ListFunction)
      {
        case ZR_HandlerFunctions.GetListFunctions.UsedFunctions:
          list2 = DataChecker.GetFunctionList(TheMeter);
          break;
        case ZR_HandlerFunctions.GetListFunctions.UsedFunctionNumbers:
          list2 = DataChecker.GetFunctionNumbersList(TheMeter);
          break;
        case ZR_HandlerFunctions.GetListFunctions.MBusParameter:
          list2 = DataChecker.GetMBusParameterList(TheMeter);
          break;
        case ZR_HandlerFunctions.GetListFunctions.MBusParameterWhithListInfo:
          list2 = DataChecker.GetMBusParameterListWithListInfo(TheMeter);
          break;
        default:
          throw new NotImplementedException();
      }
      return list2;
    }

    public enum MeterObjects
    {
      Read,
      Work,
      Type,
      DbMeter,
      SavedMeter,
      WorkUndo0,
      WorkUndo1,
      WorkUndo2,
      Old,
    }

    public enum IsEqualFunctions
    {
      Map,
      ProtectedArea,
      AllPointers,
      LoggerInit,
      Overrides,
    }

    public enum GetListFunctions
    {
      UsedFunctions,
      UsedFunctionNumbers,
      MBusParameter,
      MBusParameterWhithListInfo,
    }
  }
}


--- ZR_MeterIdent.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GMM_Handler.ZR_MeterIdent
// Assembly: GMM_Handler, Version=4.4.1.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 45504820-369B-4484-B911-CB82C9D368B6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GMM_Handler.dll

#nullable disable
namespace GMM_Handler
{
  public class ZR_MeterIdent
  {
    public MeterBasis TheMeterBasis;
    public short MeterClonNumber = 0;
    public int MeterID;
    public int MeterInfoID;
    public int MeterInfoBaseID;
    public int MeterTypeID;
    public int MapId;
    public int LinkerTableID;
    public int MeterHardwareID;
    public int HardwareTypeID;
    public ushort DefaultFunctionNr;
    public string sFirmwareVersion;
    public long lFirmwareVersion;
    public int extEEPSize;
    public int extEEPUsed;
    public string HardwareVersion;
    public string HardwareName;
    public string SerialNr;
    public string MBusSerialNr;
    public string HardwareResource;
    public string MeterInfoDescription;
    public string PPSArtikelNr;
    public string TypeOverrideString = string.Empty;
    public short MBus_Manufacturer;
    public byte MBus_MeterType;
    public byte MBus_Medium;
    public int MBus_SerialNumber;

    public ZR_MeterIdent(MeterBasis TheMeterBasisIn)
    {
      this.Clear();
      this.TheMeterBasis = TheMeterBasisIn;
    }

    public ZR_MeterIdent(bool Init, MeterBasis TheMeterBasisIn)
    {
      if (Init)
        this.Clear();
      this.TheMeterBasis = TheMeterBasisIn;
    }

    public ZR_MeterIdent Clone()
    {
      return new ZR_MeterIdent(false, this.TheMeterBasis)
      {
        MeterClonNumber = this.MeterClonNumber,
        MeterID = this.MeterID,
        MeterInfoID = this.MeterInfoID,
        MeterInfoBaseID = this.MeterInfoBaseID,
        MapId = this.MapId,
        LinkerTableID = this.LinkerTableID,
        MeterTypeID = this.MeterTypeID,
        MeterHardwareID = this.MeterHardwareID,
        HardwareTypeID = this.HardwareTypeID,
        DefaultFunctionNr = this.DefaultFunctionNr,
        sFirmwareVersion = this.sFirmwareVersion,
        lFirmwareVersion = this.lFirmwareVersion,
        extEEPSize = this.extEEPSize,
        extEEPUsed = this.extEEPUsed,
        HardwareVersion = this.HardwareVersion,
        HardwareName = this.HardwareName,
        SerialNr = this.SerialNr,
        MBusSerialNr = this.MBusSerialNr,
        HardwareResource = this.HardwareResource,
        MeterInfoDescription = this.MeterInfoDescription,
        PPSArtikelNr = this.PPSArtikelNr,
        TypeOverrideString = this.TypeOverrideString,
        MBus_Manufacturer = this.MBus_Manufacturer,
        MBus_MeterType = this.MBus_MeterType,
        MBus_Medium = this.MBus_Medium,
        MBus_SerialNumber = this.MBus_SerialNumber
      };
    }

    public int setIdent(ZR_MeterIdent theIdent)
    {
      int num = 0;
      this.MeterID = theIdent.MeterID;
      this.MeterInfoID = theIdent.MeterInfoID;
      this.MeterInfoBaseID = theIdent.MeterInfoBaseID;
      this.DefaultFunctionNr = theIdent.DefaultFunctionNr;
      this.sFirmwareVersion = theIdent.sFirmwareVersion;
      this.lFirmwareVersion = theIdent.lFirmwareVersion;
      this.HardwareVersion = theIdent.HardwareVersion;
      this.HardwareName = theIdent.HardwareName;
      this.SerialNr = theIdent.SerialNr;
      this.MBusSerialNr = theIdent.MBusSerialNr;
      this.HardwareResource = theIdent.HardwareResource;
      this.MeterInfoDescription = theIdent.MeterInfoDescription;
      this.PPSArtikelNr = theIdent.PPSArtikelNr;
      return num;
    }

    public void Clear()
    {
      this.MeterID = 0;
      this.MeterInfoID = 0;
      this.MeterInfoBaseID = 0;
      this.DefaultFunctionNr = (ushort) 0;
      this.sFirmwareVersion = "0";
      this.lFirmwareVersion = 0L;
      this.HardwareVersion = "0";
      this.HardwareName = "-";
      this.SerialNr = "00000000";
      this.MBusSerialNr = "00000000";
      this.HardwareResource = "";
      this.MeterInfoDescription = "";
      this.PPSArtikelNr = "";
    }
  }
}

