
--- BaseTables.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DataSets.BaseTables
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace GmmDbLib.DataSets
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("BaseTables")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class BaseTables : DataSet
  {
    private BaseTables.MeterDataTable tableMeter;
    private BaseTables.MeterChangesDataTable tableMeterChanges;
    private BaseTables.DatabaseLocationDataTable tableDatabaseLocation;
    private BaseTables.DatabaseIdentificationDataTable tableDatabaseIdentification;
    private BaseTables.ZRGlobalIDDataTable tableZRGlobalID;
    private BaseTables.MeterDataDataTable tableMeterData;
    private BaseTables.HardwareTypeDataTable tableHardwareType;
    private BaseTables.OnlineTranslationBaseMassagesDataTable tableOnlineTranslationBaseMassages;
    private BaseTables.OnlineTranslationsDataTable tableOnlineTranslations;
    private BaseTables.MeterInfoDataTable tableMeterInfo;
    private BaseTables.LocationDataTable tableLocation;
    private BaseTables.MeterUniqueIdByARMDataTable tableMeterUniqueIdByARM;
    private BaseTables.ApprovalTypesDataTable tableApprovalTypes;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public BaseTables()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected BaseTables(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (Meter)] != null)
            base.Tables.Add((DataTable) new BaseTables.MeterDataTable(dataSet.Tables[nameof (Meter)]));
          if (dataSet.Tables[nameof (MeterChanges)] != null)
            base.Tables.Add((DataTable) new BaseTables.MeterChangesDataTable(dataSet.Tables[nameof (MeterChanges)]));
          if (dataSet.Tables[nameof (DatabaseLocation)] != null)
            base.Tables.Add((DataTable) new BaseTables.DatabaseLocationDataTable(dataSet.Tables[nameof (DatabaseLocation)]));
          if (dataSet.Tables[nameof (DatabaseIdentification)] != null)
            base.Tables.Add((DataTable) new BaseTables.DatabaseIdentificationDataTable(dataSet.Tables[nameof (DatabaseIdentification)]));
          if (dataSet.Tables[nameof (ZRGlobalID)] != null)
            base.Tables.Add((DataTable) new BaseTables.ZRGlobalIDDataTable(dataSet.Tables[nameof (ZRGlobalID)]));
          if (dataSet.Tables[nameof (MeterData)] != null)
            base.Tables.Add((DataTable) new BaseTables.MeterDataDataTable(dataSet.Tables[nameof (MeterData)]));
          if (dataSet.Tables[nameof (HardwareType)] != null)
            base.Tables.Add((DataTable) new BaseTables.HardwareTypeDataTable(dataSet.Tables[nameof (HardwareType)]));
          if (dataSet.Tables[nameof (OnlineTranslationBaseMassages)] != null)
            base.Tables.Add((DataTable) new BaseTables.OnlineTranslationBaseMassagesDataTable(dataSet.Tables[nameof (OnlineTranslationBaseMassages)]));
          if (dataSet.Tables[nameof (OnlineTranslations)] != null)
            base.Tables.Add((DataTable) new BaseTables.OnlineTranslationsDataTable(dataSet.Tables[nameof (OnlineTranslations)]));
          if (dataSet.Tables[nameof (MeterInfo)] != null)
            base.Tables.Add((DataTable) new BaseTables.MeterInfoDataTable(dataSet.Tables[nameof (MeterInfo)]));
          if (dataSet.Tables[nameof (Location)] != null)
            base.Tables.Add((DataTable) new BaseTables.LocationDataTable(dataSet.Tables[nameof (Location)]));
          if (dataSet.Tables[nameof (MeterUniqueIdByARM)] != null)
            base.Tables.Add((DataTable) new BaseTables.MeterUniqueIdByARMDataTable(dataSet.Tables[nameof (MeterUniqueIdByARM)]));
          if (dataSet.Tables[nameof (ApprovalTypes)] != null)
            base.Tables.Add((DataTable) new BaseTables.ApprovalTypesDataTable(dataSet.Tables[nameof (ApprovalTypes)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.MeterDataTable Meter => this.tableMeter;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.MeterChangesDataTable MeterChanges => this.tableMeterChanges;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.DatabaseLocationDataTable DatabaseLocation => this.tableDatabaseLocation;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.DatabaseIdentificationDataTable DatabaseIdentification
    {
      get => this.tableDatabaseIdentification;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.ZRGlobalIDDataTable ZRGlobalID => this.tableZRGlobalID;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.MeterDataDataTable MeterData => this.tableMeterData;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.HardwareTypeDataTable HardwareType => this.tableHardwareType;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.OnlineTranslationBaseMassagesDataTable OnlineTranslationBaseMassages
    {
      get => this.tableOnlineTranslationBaseMassages;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.OnlineTranslationsDataTable OnlineTranslations
    {
      get => this.tableOnlineTranslations;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.MeterInfoDataTable MeterInfo => this.tableMeterInfo;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.LocationDataTable Location => this.tableLocation;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.MeterUniqueIdByARMDataTable MeterUniqueIdByARM
    {
      get => this.tableMeterUniqueIdByARM;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public BaseTables.ApprovalTypesDataTable ApprovalTypes => this.tableApprovalTypes;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public override DataSet Clone()
    {
      BaseTables baseTables = (BaseTables) base.Clone();
      baseTables.InitVars();
      baseTables.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) baseTables;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["Meter"] != null)
          base.Tables.Add((DataTable) new BaseTables.MeterDataTable(dataSet.Tables["Meter"]));
        if (dataSet.Tables["MeterChanges"] != null)
          base.Tables.Add((DataTable) new BaseTables.MeterChangesDataTable(dataSet.Tables["MeterChanges"]));
        if (dataSet.Tables["DatabaseLocation"] != null)
          base.Tables.Add((DataTable) new BaseTables.DatabaseLocationDataTable(dataSet.Tables["DatabaseLocation"]));
        if (dataSet.Tables["DatabaseIdentification"] != null)
          base.Tables.Add((DataTable) new BaseTables.DatabaseIdentificationDataTable(dataSet.Tables["DatabaseIdentification"]));
        if (dataSet.Tables["ZRGlobalID"] != null)
          base.Tables.Add((DataTable) new BaseTables.ZRGlobalIDDataTable(dataSet.Tables["ZRGlobalID"]));
        if (dataSet.Tables["MeterData"] != null)
          base.Tables.Add((DataTable) new BaseTables.MeterDataDataTable(dataSet.Tables["MeterData"]));
        if (dataSet.Tables["HardwareType"] != null)
          base.Tables.Add((DataTable) new BaseTables.HardwareTypeDataTable(dataSet.Tables["HardwareType"]));
        if (dataSet.Tables["OnlineTranslationBaseMassages"] != null)
          base.Tables.Add((DataTable) new BaseTables.OnlineTranslationBaseMassagesDataTable(dataSet.Tables["OnlineTranslationBaseMassages"]));
        if (dataSet.Tables["OnlineTranslations"] != null)
          base.Tables.Add((DataTable) new BaseTables.OnlineTranslationsDataTable(dataSet.Tables["OnlineTranslations"]));
        if (dataSet.Tables["MeterInfo"] != null)
          base.Tables.Add((DataTable) new BaseTables.MeterInfoDataTable(dataSet.Tables["MeterInfo"]));
        if (dataSet.Tables["Location"] != null)
          base.Tables.Add((DataTable) new BaseTables.LocationDataTable(dataSet.Tables["Location"]));
        if (dataSet.Tables["MeterUniqueIdByARM"] != null)
          base.Tables.Add((DataTable) new BaseTables.MeterUniqueIdByARMDataTable(dataSet.Tables["MeterUniqueIdByARM"]));
        if (dataSet.Tables["ApprovalTypes"] != null)
          base.Tables.Add((DataTable) new BaseTables.ApprovalTypesDataTable(dataSet.Tables["ApprovalTypes"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableMeter = (BaseTables.MeterDataTable) base.Tables["Meter"];
      if (initTable && this.tableMeter != null)
        this.tableMeter.InitVars();
      this.tableMeterChanges = (BaseTables.MeterChangesDataTable) base.Tables["MeterChanges"];
      if (initTable && this.tableMeterChanges != null)
        this.tableMeterChanges.InitVars();
      this.tableDatabaseLocation = (BaseTables.DatabaseLocationDataTable) base.Tables["DatabaseLocation"];
      if (initTable && this.tableDatabaseLocation != null)
        this.tableDatabaseLocation.InitVars();
      this.tableDatabaseIdentification = (BaseTables.DatabaseIdentificationDataTable) base.Tables["DatabaseIdentification"];
      if (initTable && this.tableDatabaseIdentification != null)
        this.tableDatabaseIdentification.InitVars();
      this.tableZRGlobalID = (BaseTables.ZRGlobalIDDataTable) base.Tables["ZRGlobalID"];
      if (initTable && this.tableZRGlobalID != null)
        this.tableZRGlobalID.InitVars();
      this.tableMeterData = (BaseTables.MeterDataDataTable) base.Tables["MeterData"];
      if (initTable && this.tableMeterData != null)
        this.tableMeterData.InitVars();
      this.tableHardwareType = (BaseTables.HardwareTypeDataTable) base.Tables["HardwareType"];
      if (initTable && this.tableHardwareType != null)
        this.tableHardwareType.InitVars();
      this.tableOnlineTranslationBaseMassages = (BaseTables.OnlineTranslationBaseMassagesDataTable) base.Tables["OnlineTranslationBaseMassages"];
      if (initTable && this.tableOnlineTranslationBaseMassages != null)
        this.tableOnlineTranslationBaseMassages.InitVars();
      this.tableOnlineTranslations = (BaseTables.OnlineTranslationsDataTable) base.Tables["OnlineTranslations"];
      if (initTable && this.tableOnlineTranslations != null)
        this.tableOnlineTranslations.InitVars();
      this.tableMeterInfo = (BaseTables.MeterInfoDataTable) base.Tables["MeterInfo"];
      if (initTable && this.tableMeterInfo != null)
        this.tableMeterInfo.InitVars();
      this.tableLocation = (BaseTables.LocationDataTable) base.Tables["Location"];
      if (initTable && this.tableLocation != null)
        this.tableLocation.InitVars();
      this.tableMeterUniqueIdByARM = (BaseTables.MeterUniqueIdByARMDataTable) base.Tables["MeterUniqueIdByARM"];
      if (initTable && this.tableMeterUniqueIdByARM != null)
        this.tableMeterUniqueIdByARM.InitVars();
      this.tableApprovalTypes = (BaseTables.ApprovalTypesDataTable) base.Tables["ApprovalTypes"];
      if (!initTable || this.tableApprovalTypes == null)
        return;
      this.tableApprovalTypes.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (BaseTables);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/BaseTables.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableMeter = new BaseTables.MeterDataTable();
      base.Tables.Add((DataTable) this.tableMeter);
      this.tableMeterChanges = new BaseTables.MeterChangesDataTable();
      base.Tables.Add((DataTable) this.tableMeterChanges);
      this.tableDatabaseLocation = new BaseTables.DatabaseLocationDataTable();
      base.Tables.Add((DataTable) this.tableDatabaseLocation);
      this.tableDatabaseIdentification = new BaseTables.DatabaseIdentificationDataTable();
      base.Tables.Add((DataTable) this.tableDatabaseIdentification);
      this.tableZRGlobalID = new BaseTables.ZRGlobalIDDataTable();
      base.Tables.Add((DataTable) this.tableZRGlobalID);
      this.tableMeterData = new BaseTables.MeterDataDataTable();
      base.Tables.Add((DataTable) this.tableMeterData);
      this.tableHardwareType = new BaseTables.HardwareTypeDataTable();
      base.Tables.Add((DataTable) this.tableHardwareType);
      this.tableOnlineTranslationBaseMassages = new BaseTables.OnlineTranslationBaseMassagesDataTable();
      base.Tables.Add((DataTable) this.tableOnlineTranslationBaseMassages);
      this.tableOnlineTranslations = new BaseTables.OnlineTranslationsDataTable();
      base.Tables.Add((DataTable) this.tableOnlineTranslations);
      this.tableMeterInfo = new BaseTables.MeterInfoDataTable();
      base.Tables.Add((DataTable) this.tableMeterInfo);
      this.tableLocation = new BaseTables.LocationDataTable();
      base.Tables.Add((DataTable) this.tableLocation);
      this.tableMeterUniqueIdByARM = new BaseTables.MeterUniqueIdByARMDataTable();
      base.Tables.Add((DataTable) this.tableMeterUniqueIdByARM);
      this.tableApprovalTypes = new BaseTables.ApprovalTypesDataTable();
      base.Tables.Add((DataTable) this.tableApprovalTypes);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeMeter() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeMeterChanges() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeDatabaseLocation() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeDatabaseIdentification() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeZRGlobalID() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeMeterData() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeHardwareType() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeOnlineTranslationBaseMassages() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeOnlineTranslations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeMeterInfo() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeLocation() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeMeterUniqueIdByARM() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeApprovalTypes() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      BaseTables baseTables = new BaseTables();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = baseTables.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void MeterRowChangeEventHandler(object sender, BaseTables.MeterRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void MeterChangesRowChangeEventHandler(
      object sender,
      BaseTables.MeterChangesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void DatabaseLocationRowChangeEventHandler(
      object sender,
      BaseTables.DatabaseLocationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void DatabaseIdentificationRowChangeEventHandler(
      object sender,
      BaseTables.DatabaseIdentificationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void ZRGlobalIDRowChangeEventHandler(
      object sender,
      BaseTables.ZRGlobalIDRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void MeterDataRowChangeEventHandler(
      object sender,
      BaseTables.MeterDataRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void HardwareTypeRowChangeEventHandler(
      object sender,
      BaseTables.HardwareTypeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void OnlineTranslationBaseMassagesRowChangeEventHandler(
      object sender,
      BaseTables.OnlineTranslationBaseMassagesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void OnlineTranslationsRowChangeEventHandler(
      object sender,
      BaseTables.OnlineTranslationsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void MeterInfoRowChangeEventHandler(
      object sender,
      BaseTables.MeterInfoRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void LocationRowChangeEventHandler(
      object sender,
      BaseTables.LocationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void MeterUniqueIdByARMRowChangeEventHandler(
      object sender,
      BaseTables.MeterUniqueIdByARMRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void ApprovalTypesRowChangeEventHandler(
      object sender,
      BaseTables.ApprovalTypesRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterDataTable : TypedTableBase<BaseTables.MeterRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnMeterInfoID;
      private DataColumn columnSerialNr;
      private DataColumn columnProductionDate;
      private DataColumn columnApprovalDate;
      private DataColumn columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterDataTable()
      {
        this.TableName = "Meter";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected MeterDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn SerialNrColumn => this.columnSerialNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ProductionDateColumn => this.columnProductionDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ApprovalDateColumn => this.columnApprovalDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn OrderNrColumn => this.columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterRow this[int index] => (BaseTables.MeterRow) this.Rows[index];

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterRowChangeEventHandler MeterRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterRowChangeEventHandler MeterRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterRowChangeEventHandler MeterRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterRowChangeEventHandler MeterRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddMeterRow(BaseTables.MeterRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterRow AddMeterRow(
        int MeterID,
        int MeterInfoID,
        string SerialNr,
        DateTime ProductionDate,
        DateTime ApprovalDate,
        string OrderNr)
      {
        BaseTables.MeterRow row = (BaseTables.MeterRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) MeterID,
          (object) MeterInfoID,
          (object) SerialNr,
          (object) ProductionDate,
          (object) ApprovalDate,
          (object) OrderNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterRow FindByMeterID(int MeterID)
      {
        return (BaseTables.MeterRow) this.Rows.Find(new object[1]
        {
          (object) MeterID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.MeterDataTable meterDataTable = (BaseTables.MeterDataTable) base.Clone();
        meterDataTable.InitVars();
        return (DataTable) meterDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance() => (DataTable) new BaseTables.MeterDataTable();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnSerialNr = this.Columns["SerialNr"];
        this.columnProductionDate = this.Columns["ProductionDate"];
        this.columnApprovalDate = this.Columns["ApprovalDate"];
        this.columnOrderNr = this.Columns["OrderNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnSerialNr = new DataColumn("SerialNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNr);
        this.columnProductionDate = new DataColumn("ProductionDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnProductionDate);
        this.columnApprovalDate = new DataColumn("ApprovalDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalDate);
        this.columnOrderNr = new DataColumn("OrderNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOrderNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterID
        }, true));
        this.columnMeterID.AllowDBNull = false;
        this.columnMeterID.Unique = true;
        this.columnSerialNr.MaxLength = 50;
        this.columnProductionDate.DateTimeMode = DataSetDateTime.Utc;
        this.columnApprovalDate.DateTimeMode = DataSetDateTime.Utc;
        this.columnOrderNr.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterRow NewMeterRow() => (BaseTables.MeterRow) this.NewRow();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.MeterRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.MeterRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterRowChanged == null)
          return;
        this.MeterRowChanged((object) this, new BaseTables.MeterRowChangeEvent((BaseTables.MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterRowChanging == null)
          return;
        this.MeterRowChanging((object) this, new BaseTables.MeterRowChangeEvent((BaseTables.MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterRowDeleted == null)
          return;
        this.MeterRowDeleted((object) this, new BaseTables.MeterRowChangeEvent((BaseTables.MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterRowDeleting == null)
          return;
        this.MeterRowDeleting((object) this, new BaseTables.MeterRowChangeEvent((BaseTables.MeterRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveMeterRow(BaseTables.MeterRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterChangesDataTable : TypedTableBase<BaseTables.MeterChangesRow>
    {
      private DataColumn columnChangeID;
      private DataColumn columnMeterID;
      private DataColumn columnChangeDate;
      private DataColumn columnMeterInfoID;
      private DataColumn columnSerialNr;
      private DataColumn columnProductionDate;
      private DataColumn columnApprovalDate;
      private DataColumn columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterChangesDataTable()
      {
        this.TableName = "MeterChanges";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterChangesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected MeterChangesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ChangeIDColumn => this.columnChangeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ChangeDateColumn => this.columnChangeDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn SerialNrColumn => this.columnSerialNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ProductionDateColumn => this.columnProductionDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ApprovalDateColumn => this.columnApprovalDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn OrderNrColumn => this.columnOrderNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterChangesRow this[int index]
      {
        get => (BaseTables.MeterChangesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterChangesRowChangeEventHandler MeterChangesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterChangesRowChangeEventHandler MeterChangesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterChangesRowChangeEventHandler MeterChangesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterChangesRowChangeEventHandler MeterChangesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddMeterChangesRow(BaseTables.MeterChangesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterChangesRow AddMeterChangesRow(
        int ChangeID,
        int MeterID,
        DateTime ChangeDate,
        int MeterInfoID,
        string SerialNr,
        DateTime ProductionDate,
        DateTime ApprovalDate,
        string OrderNr)
      {
        BaseTables.MeterChangesRow row = (BaseTables.MeterChangesRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) ChangeID,
          (object) MeterID,
          (object) ChangeDate,
          (object) MeterInfoID,
          (object) SerialNr,
          (object) ProductionDate,
          (object) ApprovalDate,
          (object) OrderNr
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterChangesRow FindByChangeID(int ChangeID)
      {
        return (BaseTables.MeterChangesRow) this.Rows.Find(new object[1]
        {
          (object) ChangeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.MeterChangesDataTable changesDataTable = (BaseTables.MeterChangesDataTable) base.Clone();
        changesDataTable.InitVars();
        return (DataTable) changesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.MeterChangesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnChangeID = this.Columns["ChangeID"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnChangeDate = this.Columns["ChangeDate"];
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnSerialNr = this.Columns["SerialNr"];
        this.columnProductionDate = this.Columns["ProductionDate"];
        this.columnApprovalDate = this.Columns["ApprovalDate"];
        this.columnOrderNr = this.Columns["OrderNr"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnChangeID = new DataColumn("ChangeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeID);
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnChangeDate = new DataColumn("ChangeDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeDate);
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnSerialNr = new DataColumn("SerialNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNr);
        this.columnProductionDate = new DataColumn("ProductionDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnProductionDate);
        this.columnApprovalDate = new DataColumn("ApprovalDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalDate);
        this.columnOrderNr = new DataColumn("OrderNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOrderNr);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnChangeID
        }, true));
        this.columnChangeID.AllowDBNull = false;
        this.columnChangeID.Unique = true;
        this.columnChangeDate.DateTimeMode = DataSetDateTime.Utc;
        this.columnSerialNr.MaxLength = 50;
        this.columnProductionDate.DateTimeMode = DataSetDateTime.Utc;
        this.columnApprovalDate.DateTimeMode = DataSetDateTime.Utc;
        this.columnOrderNr.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterChangesRow NewMeterChangesRow()
      {
        return (BaseTables.MeterChangesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.MeterChangesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.MeterChangesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterChangesRowChanged == null)
          return;
        this.MeterChangesRowChanged((object) this, new BaseTables.MeterChangesRowChangeEvent((BaseTables.MeterChangesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterChangesRowChanging == null)
          return;
        this.MeterChangesRowChanging((object) this, new BaseTables.MeterChangesRowChangeEvent((BaseTables.MeterChangesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterChangesRowDeleted == null)
          return;
        this.MeterChangesRowDeleted((object) this, new BaseTables.MeterChangesRowChangeEvent((BaseTables.MeterChangesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterChangesRowDeleting == null)
          return;
        this.MeterChangesRowDeleting((object) this, new BaseTables.MeterChangesRowChangeEvent((BaseTables.MeterChangesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveMeterChangesRow(BaseTables.MeterChangesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterChangesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DatabaseLocationDataTable : TypedTableBase<BaseTables.DatabaseLocationRow>
    {
      private DataColumn columnDatabaseLocationName;
      private DataColumn columnLand;
      private DataColumn columnTown;
      private DataColumn columnCompanyName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DatabaseLocationDataTable()
      {
        this.TableName = "DatabaseLocation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal DatabaseLocationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected DatabaseLocationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DatabaseLocationNameColumn => this.columnDatabaseLocationName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LandColumn => this.columnLand;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn TownColumn => this.columnTown;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn CompanyNameColumn => this.columnCompanyName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseLocationRow this[int index]
      {
        get => (BaseTables.DatabaseLocationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.DatabaseLocationRowChangeEventHandler DatabaseLocationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.DatabaseLocationRowChangeEventHandler DatabaseLocationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.DatabaseLocationRowChangeEventHandler DatabaseLocationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.DatabaseLocationRowChangeEventHandler DatabaseLocationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddDatabaseLocationRow(BaseTables.DatabaseLocationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseLocationRow AddDatabaseLocationRow(
        string DatabaseLocationName,
        string Land,
        string Town,
        string CompanyName)
      {
        BaseTables.DatabaseLocationRow row = (BaseTables.DatabaseLocationRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) DatabaseLocationName,
          (object) Land,
          (object) Town,
          (object) CompanyName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseLocationRow FindByDatabaseLocationName(string DatabaseLocationName)
      {
        return (BaseTables.DatabaseLocationRow) this.Rows.Find(new object[1]
        {
          (object) DatabaseLocationName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.DatabaseLocationDataTable locationDataTable = (BaseTables.DatabaseLocationDataTable) base.Clone();
        locationDataTable.InitVars();
        return (DataTable) locationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.DatabaseLocationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnDatabaseLocationName = this.Columns["DatabaseLocationName"];
        this.columnLand = this.Columns["Land"];
        this.columnTown = this.Columns["Town"];
        this.columnCompanyName = this.Columns["CompanyName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnDatabaseLocationName = new DataColumn("DatabaseLocationName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDatabaseLocationName);
        this.columnLand = new DataColumn("Land", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLand);
        this.columnTown = new DataColumn("Town", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTown);
        this.columnCompanyName = new DataColumn("CompanyName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCompanyName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnDatabaseLocationName
        }, true));
        this.columnDatabaseLocationName.AllowDBNull = false;
        this.columnDatabaseLocationName.Unique = true;
        this.columnDatabaseLocationName.MaxLength = 50;
        this.columnLand.MaxLength = 50;
        this.columnTown.MaxLength = 50;
        this.columnCompanyName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseLocationRow NewDatabaseLocationRow()
      {
        return (BaseTables.DatabaseLocationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.DatabaseLocationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.DatabaseLocationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DatabaseLocationRowChanged == null)
          return;
        this.DatabaseLocationRowChanged((object) this, new BaseTables.DatabaseLocationRowChangeEvent((BaseTables.DatabaseLocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DatabaseLocationRowChanging == null)
          return;
        this.DatabaseLocationRowChanging((object) this, new BaseTables.DatabaseLocationRowChangeEvent((BaseTables.DatabaseLocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DatabaseLocationRowDeleted == null)
          return;
        this.DatabaseLocationRowDeleted((object) this, new BaseTables.DatabaseLocationRowChangeEvent((BaseTables.DatabaseLocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DatabaseLocationRowDeleting == null)
          return;
        this.DatabaseLocationRowDeleting((object) this, new BaseTables.DatabaseLocationRowChangeEvent((BaseTables.DatabaseLocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveDatabaseLocationRow(BaseTables.DatabaseLocationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DatabaseLocationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class DatabaseIdentificationDataTable : 
      TypedTableBase<BaseTables.DatabaseIdentificationRow>
    {
      private DataColumn columnInfoName;
      private DataColumn columnInfoData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DatabaseIdentificationDataTable()
      {
        this.TableName = "DatabaseIdentification";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal DatabaseIdentificationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected DatabaseIdentificationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn InfoNameColumn => this.columnInfoName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn InfoDataColumn => this.columnInfoData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseIdentificationRow this[int index]
      {
        get => (BaseTables.DatabaseIdentificationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.DatabaseIdentificationRowChangeEventHandler DatabaseIdentificationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.DatabaseIdentificationRowChangeEventHandler DatabaseIdentificationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.DatabaseIdentificationRowChangeEventHandler DatabaseIdentificationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.DatabaseIdentificationRowChangeEventHandler DatabaseIdentificationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddDatabaseIdentificationRow(BaseTables.DatabaseIdentificationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseIdentificationRow AddDatabaseIdentificationRow(
        string InfoName,
        string InfoData)
      {
        BaseTables.DatabaseIdentificationRow row = (BaseTables.DatabaseIdentificationRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) InfoName,
          (object) InfoData
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseIdentificationRow FindByInfoName(string InfoName)
      {
        return (BaseTables.DatabaseIdentificationRow) this.Rows.Find(new object[1]
        {
          (object) InfoName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.DatabaseIdentificationDataTable identificationDataTable = (BaseTables.DatabaseIdentificationDataTable) base.Clone();
        identificationDataTable.InitVars();
        return (DataTable) identificationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.DatabaseIdentificationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnInfoName = this.Columns["InfoName"];
        this.columnInfoData = this.Columns["InfoData"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnInfoName = new DataColumn("InfoName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfoName);
        this.columnInfoData = new DataColumn("InfoData", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInfoData);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnInfoName
        }, true));
        this.columnInfoName.AllowDBNull = false;
        this.columnInfoName.Unique = true;
        this.columnInfoName.MaxLength = 50;
        this.columnInfoData.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseIdentificationRow NewDatabaseIdentificationRow()
      {
        return (BaseTables.DatabaseIdentificationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.DatabaseIdentificationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.DatabaseIdentificationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.DatabaseIdentificationRowChanged == null)
          return;
        this.DatabaseIdentificationRowChanged((object) this, new BaseTables.DatabaseIdentificationRowChangeEvent((BaseTables.DatabaseIdentificationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.DatabaseIdentificationRowChanging == null)
          return;
        this.DatabaseIdentificationRowChanging((object) this, new BaseTables.DatabaseIdentificationRowChangeEvent((BaseTables.DatabaseIdentificationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.DatabaseIdentificationRowDeleted == null)
          return;
        this.DatabaseIdentificationRowDeleted((object) this, new BaseTables.DatabaseIdentificationRowChangeEvent((BaseTables.DatabaseIdentificationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.DatabaseIdentificationRowDeleting == null)
          return;
        this.DatabaseIdentificationRowDeleting((object) this, new BaseTables.DatabaseIdentificationRowChangeEvent((BaseTables.DatabaseIdentificationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveDatabaseIdentificationRow(BaseTables.DatabaseIdentificationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (DatabaseIdentificationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ZRGlobalIDDataTable : TypedTableBase<BaseTables.ZRGlobalIDRow>
    {
      private DataColumn columnZRTableName;
      private DataColumn columnZRFieldName;
      private DataColumn columnZRNextNr;
      private DataColumn columnZRFirstNr;
      private DataColumn columnZRLastNr;
      private DataColumn columnDatabaseLocationName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public ZRGlobalIDDataTable()
      {
        this.TableName = "ZRGlobalID";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal ZRGlobalIDDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected ZRGlobalIDDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ZRTableNameColumn => this.columnZRTableName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ZRFieldNameColumn => this.columnZRFieldName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ZRNextNrColumn => this.columnZRNextNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ZRFirstNrColumn => this.columnZRFirstNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ZRLastNrColumn => this.columnZRLastNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DatabaseLocationNameColumn => this.columnDatabaseLocationName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ZRGlobalIDRow this[int index]
      {
        get => (BaseTables.ZRGlobalIDRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.ZRGlobalIDRowChangeEventHandler ZRGlobalIDRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.ZRGlobalIDRowChangeEventHandler ZRGlobalIDRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.ZRGlobalIDRowChangeEventHandler ZRGlobalIDRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.ZRGlobalIDRowChangeEventHandler ZRGlobalIDRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddZRGlobalIDRow(BaseTables.ZRGlobalIDRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ZRGlobalIDRow AddZRGlobalIDRow(
        string ZRTableName,
        string ZRFieldName,
        int ZRNextNr,
        int ZRFirstNr,
        int ZRLastNr,
        string DatabaseLocationName)
      {
        BaseTables.ZRGlobalIDRow row = (BaseTables.ZRGlobalIDRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) ZRTableName,
          (object) ZRFieldName,
          (object) ZRNextNr,
          (object) ZRFirstNr,
          (object) ZRLastNr,
          (object) DatabaseLocationName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ZRGlobalIDRow FindByZRTableNameDatabaseLocationName(
        string ZRTableName,
        string DatabaseLocationName)
      {
        return (BaseTables.ZRGlobalIDRow) this.Rows.Find(new object[2]
        {
          (object) ZRTableName,
          (object) DatabaseLocationName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.ZRGlobalIDDataTable globalIdDataTable = (BaseTables.ZRGlobalIDDataTable) base.Clone();
        globalIdDataTable.InitVars();
        return (DataTable) globalIdDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.ZRGlobalIDDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnZRTableName = this.Columns["ZRTableName"];
        this.columnZRFieldName = this.Columns["ZRFieldName"];
        this.columnZRNextNr = this.Columns["ZRNextNr"];
        this.columnZRFirstNr = this.Columns["ZRFirstNr"];
        this.columnZRLastNr = this.Columns["ZRLastNr"];
        this.columnDatabaseLocationName = this.Columns["DatabaseLocationName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnZRTableName = new DataColumn("ZRTableName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRTableName);
        this.columnZRFieldName = new DataColumn("ZRFieldName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRFieldName);
        this.columnZRNextNr = new DataColumn("ZRNextNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRNextNr);
        this.columnZRFirstNr = new DataColumn("ZRFirstNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRFirstNr);
        this.columnZRLastNr = new DataColumn("ZRLastNr", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZRLastNr);
        this.columnDatabaseLocationName = new DataColumn("DatabaseLocationName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDatabaseLocationName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnZRTableName,
          this.columnDatabaseLocationName
        }, true));
        this.columnZRTableName.AllowDBNull = false;
        this.columnZRTableName.MaxLength = 50;
        this.columnZRFieldName.MaxLength = 50;
        this.columnDatabaseLocationName.AllowDBNull = false;
        this.columnDatabaseLocationName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ZRGlobalIDRow NewZRGlobalIDRow()
      {
        return (BaseTables.ZRGlobalIDRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.ZRGlobalIDRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.ZRGlobalIDRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ZRGlobalIDRowChanged == null)
          return;
        this.ZRGlobalIDRowChanged((object) this, new BaseTables.ZRGlobalIDRowChangeEvent((BaseTables.ZRGlobalIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ZRGlobalIDRowChanging == null)
          return;
        this.ZRGlobalIDRowChanging((object) this, new BaseTables.ZRGlobalIDRowChangeEvent((BaseTables.ZRGlobalIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ZRGlobalIDRowDeleted == null)
          return;
        this.ZRGlobalIDRowDeleted((object) this, new BaseTables.ZRGlobalIDRowChangeEvent((BaseTables.ZRGlobalIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ZRGlobalIDRowDeleting == null)
          return;
        this.ZRGlobalIDRowDeleting((object) this, new BaseTables.ZRGlobalIDRowChangeEvent((BaseTables.ZRGlobalIDRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveZRGlobalIDRow(BaseTables.ZRGlobalIDRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ZRGlobalIDDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterDataDataTable : TypedTableBase<BaseTables.MeterDataRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnTimePoint;
      private DataColumn columnPValueID;
      private DataColumn columnPValue;
      private DataColumn columnPValueBinary;
      private DataColumn columnSyncStatus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterDataDataTable()
      {
        this.TableName = "MeterData";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterDataDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected MeterDataDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn PValueIDColumn => this.columnPValueID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn PValueColumn => this.columnPValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn PValueBinaryColumn => this.columnPValueBinary;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn SyncStatusColumn => this.columnSyncStatus;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterDataRow this[int index] => (BaseTables.MeterDataRow) this.Rows[index];

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterDataRowChangeEventHandler MeterDataRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterDataRowChangeEventHandler MeterDataRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterDataRowChangeEventHandler MeterDataRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterDataRowChangeEventHandler MeterDataRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddMeterDataRow(BaseTables.MeterDataRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterDataRow AddMeterDataRow(
        int MeterID,
        DateTime TimePoint,
        int PValueID,
        string PValue,
        byte[] PValueBinary,
        byte SyncStatus)
      {
        BaseTables.MeterDataRow row = (BaseTables.MeterDataRow) this.NewRow();
        object[] objArray = new object[6]
        {
          (object) MeterID,
          (object) TimePoint,
          (object) PValueID,
          (object) PValue,
          (object) PValueBinary,
          (object) SyncStatus
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterDataRow FindByMeterIDTimePointPValueID(
        int MeterID,
        DateTime TimePoint,
        int PValueID)
      {
        return (BaseTables.MeterDataRow) this.Rows.Find(new object[3]
        {
          (object) MeterID,
          (object) TimePoint,
          (object) PValueID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.MeterDataDataTable meterDataDataTable = (BaseTables.MeterDataDataTable) base.Clone();
        meterDataDataTable.InitVars();
        return (DataTable) meterDataDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.MeterDataDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnPValueID = this.Columns["PValueID"];
        this.columnPValue = this.Columns["PValue"];
        this.columnPValueBinary = this.Columns["PValueBinary"];
        this.columnSyncStatus = this.Columns["SyncStatus"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnTimePoint = new DataColumn("TimePoint", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnPValueID = new DataColumn("PValueID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueID);
        this.columnPValue = new DataColumn("PValue", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValue);
        this.columnPValueBinary = new DataColumn("PValueBinary", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPValueBinary);
        this.columnSyncStatus = new DataColumn("SyncStatus", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSyncStatus);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnMeterID,
          this.columnTimePoint,
          this.columnPValueID
        }, true));
        this.columnMeterID.AllowDBNull = false;
        this.columnTimePoint.AllowDBNull = false;
        this.columnTimePoint.DateTimeMode = DataSetDateTime.Utc;
        this.columnPValueID.AllowDBNull = false;
        this.columnPValue.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterDataRow NewMeterDataRow() => (BaseTables.MeterDataRow) this.NewRow();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.MeterDataRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.MeterDataRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterDataRowChanged == null)
          return;
        this.MeterDataRowChanged((object) this, new BaseTables.MeterDataRowChangeEvent((BaseTables.MeterDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterDataRowChanging == null)
          return;
        this.MeterDataRowChanging((object) this, new BaseTables.MeterDataRowChangeEvent((BaseTables.MeterDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterDataRowDeleted == null)
          return;
        this.MeterDataRowDeleted((object) this, new BaseTables.MeterDataRowChangeEvent((BaseTables.MeterDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterDataRowDeleting == null)
          return;
        this.MeterDataRowDeleting((object) this, new BaseTables.MeterDataRowChangeEvent((BaseTables.MeterDataRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveMeterDataRow(BaseTables.MeterDataRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterDataDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class HardwareTypeDataTable : TypedTableBase<BaseTables.HardwareTypeRow>
    {
      private DataColumn columnHardwareTypeID;
      private DataColumn columnMapID;
      private DataColumn columnLinkerTableID;
      private DataColumn columnFirmwareVersion;
      private DataColumn columnHardwareName;
      private DataColumn columnHardwareVersion;
      private DataColumn columnHardwareResource;
      private DataColumn columnextEEPSize;
      private DataColumn columnmaxStackSize;
      private DataColumn columnRAMSize;
      private DataColumn columnRAMStartAdr;
      private DataColumn columnintEEPStartAdr;
      private DataColumn columnintEEPSize;
      private DataColumn columnDescription;
      private DataColumn columnTestinfo;
      private DataColumn columnHardwareOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeDataTable()
      {
        this.TableName = "HardwareType";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal HardwareTypeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected HardwareTypeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LinkerTableIDColumn => this.columnLinkerTableID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FirmwareVersionColumn => this.columnFirmwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareNameColumn => this.columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareVersionColumn => this.columnHardwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareResourceColumn => this.columnHardwareResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn extEEPSizeColumn => this.columnextEEPSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn maxStackSizeColumn => this.columnmaxStackSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn RAMSizeColumn => this.columnRAMSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn RAMStartAdrColumn => this.columnRAMStartAdr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn intEEPStartAdrColumn => this.columnintEEPStartAdr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn intEEPSizeColumn => this.columnintEEPSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn TestinfoColumn => this.columnTestinfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareOptionsColumn => this.columnHardwareOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.HardwareTypeRow this[int index]
      {
        get => (BaseTables.HardwareTypeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.HardwareTypeRowChangeEventHandler HardwareTypeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.HardwareTypeRowChangeEventHandler HardwareTypeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.HardwareTypeRowChangeEventHandler HardwareTypeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.HardwareTypeRowChangeEventHandler HardwareTypeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddHardwareTypeRow(BaseTables.HardwareTypeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.HardwareTypeRow AddHardwareTypeRow(
        int HardwareTypeID,
        int MapID,
        int LinkerTableID,
        int FirmwareVersion,
        string HardwareName,
        int HardwareVersion,
        string HardwareResource,
        int extEEPSize,
        short maxStackSize,
        short RAMSize,
        short RAMStartAdr,
        short intEEPStartAdr,
        short intEEPSize,
        string Description,
        string Testinfo,
        string HardwareOptions)
      {
        BaseTables.HardwareTypeRow row = (BaseTables.HardwareTypeRow) this.NewRow();
        object[] objArray = new object[16]
        {
          (object) HardwareTypeID,
          (object) MapID,
          (object) LinkerTableID,
          (object) FirmwareVersion,
          (object) HardwareName,
          (object) HardwareVersion,
          (object) HardwareResource,
          (object) extEEPSize,
          (object) maxStackSize,
          (object) RAMSize,
          (object) RAMStartAdr,
          (object) intEEPStartAdr,
          (object) intEEPSize,
          (object) Description,
          (object) Testinfo,
          (object) HardwareOptions
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.HardwareTypeRow FindByHardwareTypeID(int HardwareTypeID)
      {
        return (BaseTables.HardwareTypeRow) this.Rows.Find(new object[1]
        {
          (object) HardwareTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.HardwareTypeDataTable hardwareTypeDataTable = (BaseTables.HardwareTypeDataTable) base.Clone();
        hardwareTypeDataTable.InitVars();
        return (DataTable) hardwareTypeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.HardwareTypeDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
        this.columnMapID = this.Columns["MapID"];
        this.columnLinkerTableID = this.Columns["LinkerTableID"];
        this.columnFirmwareVersion = this.Columns["FirmwareVersion"];
        this.columnHardwareName = this.Columns["HardwareName"];
        this.columnHardwareVersion = this.Columns["HardwareVersion"];
        this.columnHardwareResource = this.Columns["HardwareResource"];
        this.columnextEEPSize = this.Columns["extEEPSize"];
        this.columnmaxStackSize = this.Columns["maxStackSize"];
        this.columnRAMSize = this.Columns["RAMSize"];
        this.columnRAMStartAdr = this.Columns["RAMStartAdr"];
        this.columnintEEPStartAdr = this.Columns["intEEPStartAdr"];
        this.columnintEEPSize = this.Columns["intEEPSize"];
        this.columnDescription = this.Columns["Description"];
        this.columnTestinfo = this.Columns["Testinfo"];
        this.columnHardwareOptions = this.Columns["HardwareOptions"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnLinkerTableID = new DataColumn("LinkerTableID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLinkerTableID);
        this.columnFirmwareVersion = new DataColumn("FirmwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersion);
        this.columnHardwareName = new DataColumn("HardwareName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareName);
        this.columnHardwareVersion = new DataColumn("HardwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareVersion);
        this.columnHardwareResource = new DataColumn("HardwareResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareResource);
        this.columnextEEPSize = new DataColumn("extEEPSize", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnextEEPSize);
        this.columnmaxStackSize = new DataColumn("maxStackSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnmaxStackSize);
        this.columnRAMSize = new DataColumn("RAMSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRAMSize);
        this.columnRAMStartAdr = new DataColumn("RAMStartAdr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRAMStartAdr);
        this.columnintEEPStartAdr = new DataColumn("intEEPStartAdr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnintEEPStartAdr);
        this.columnintEEPSize = new DataColumn("intEEPSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnintEEPSize);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnTestinfo = new DataColumn("Testinfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestinfo);
        this.columnHardwareOptions = new DataColumn("HardwareOptions", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareOptions);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnHardwareTypeID
        }, true));
        this.columnHardwareTypeID.AllowDBNull = false;
        this.columnHardwareTypeID.Unique = true;
        this.columnHardwareName.MaxLength = 50;
        this.columnHardwareResource.MaxLength = 536870910;
        this.columnDescription.MaxLength = 536870910;
        this.columnTestinfo.MaxLength = 536870910;
        this.columnHardwareOptions.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.HardwareTypeRow NewHardwareTypeRow()
      {
        return (BaseTables.HardwareTypeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.HardwareTypeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.HardwareTypeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.HardwareTypeRowChanged == null)
          return;
        this.HardwareTypeRowChanged((object) this, new BaseTables.HardwareTypeRowChangeEvent((BaseTables.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.HardwareTypeRowChanging == null)
          return;
        this.HardwareTypeRowChanging((object) this, new BaseTables.HardwareTypeRowChangeEvent((BaseTables.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.HardwareTypeRowDeleted == null)
          return;
        this.HardwareTypeRowDeleted((object) this, new BaseTables.HardwareTypeRowChangeEvent((BaseTables.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.HardwareTypeRowDeleting == null)
          return;
        this.HardwareTypeRowDeleting((object) this, new BaseTables.HardwareTypeRowChangeEvent((BaseTables.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveHardwareTypeRow(BaseTables.HardwareTypeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (HardwareTypeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class OnlineTranslationBaseMassagesDataTable : 
      TypedTableBase<BaseTables.OnlineTranslationBaseMassagesRow>
    {
      private DataColumn columnMessageTree;
      private DataColumn columnDefaultText;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public OnlineTranslationBaseMassagesDataTable()
      {
        this.TableName = "OnlineTranslationBaseMassages";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal OnlineTranslationBaseMassagesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected OnlineTranslationBaseMassagesDataTable(
        SerializationInfo info,
        StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MessageTreeColumn => this.columnMessageTree;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DefaultTextColumn => this.columnDefaultText;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationBaseMassagesRow this[int index]
      {
        get => (BaseTables.OnlineTranslationBaseMassagesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.OnlineTranslationBaseMassagesRowChangeEventHandler OnlineTranslationBaseMassagesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.OnlineTranslationBaseMassagesRowChangeEventHandler OnlineTranslationBaseMassagesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.OnlineTranslationBaseMassagesRowChangeEventHandler OnlineTranslationBaseMassagesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.OnlineTranslationBaseMassagesRowChangeEventHandler OnlineTranslationBaseMassagesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddOnlineTranslationBaseMassagesRow(
        BaseTables.OnlineTranslationBaseMassagesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationBaseMassagesRow AddOnlineTranslationBaseMassagesRow(
        string MessageTree,
        string DefaultText)
      {
        BaseTables.OnlineTranslationBaseMassagesRow row = (BaseTables.OnlineTranslationBaseMassagesRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) MessageTree,
          (object) DefaultText
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationBaseMassagesRow FindByMessageTree(string MessageTree)
      {
        return (BaseTables.OnlineTranslationBaseMassagesRow) this.Rows.Find(new object[1]
        {
          (object) MessageTree
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.OnlineTranslationBaseMassagesDataTable massagesDataTable = (BaseTables.OnlineTranslationBaseMassagesDataTable) base.Clone();
        massagesDataTable.InitVars();
        return (DataTable) massagesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.OnlineTranslationBaseMassagesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnMessageTree = this.Columns["MessageTree"];
        this.columnDefaultText = this.Columns["DefaultText"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnMessageTree = new DataColumn("MessageTree", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMessageTree);
        this.columnDefaultText = new DataColumn("DefaultText", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDefaultText);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMessageTree
        }, true));
        this.columnMessageTree.AllowDBNull = false;
        this.columnMessageTree.Unique = true;
        this.columnMessageTree.MaxLength = 50;
        this.columnDefaultText.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationBaseMassagesRow NewOnlineTranslationBaseMassagesRow()
      {
        return (BaseTables.OnlineTranslationBaseMassagesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.OnlineTranslationBaseMassagesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.OnlineTranslationBaseMassagesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.OnlineTranslationBaseMassagesRowChanged == null)
          return;
        this.OnlineTranslationBaseMassagesRowChanged((object) this, new BaseTables.OnlineTranslationBaseMassagesRowChangeEvent((BaseTables.OnlineTranslationBaseMassagesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.OnlineTranslationBaseMassagesRowChanging == null)
          return;
        this.OnlineTranslationBaseMassagesRowChanging((object) this, new BaseTables.OnlineTranslationBaseMassagesRowChangeEvent((BaseTables.OnlineTranslationBaseMassagesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.OnlineTranslationBaseMassagesRowDeleted == null)
          return;
        this.OnlineTranslationBaseMassagesRowDeleted((object) this, new BaseTables.OnlineTranslationBaseMassagesRowChangeEvent((BaseTables.OnlineTranslationBaseMassagesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.OnlineTranslationBaseMassagesRowDeleting == null)
          return;
        this.OnlineTranslationBaseMassagesRowDeleting((object) this, new BaseTables.OnlineTranslationBaseMassagesRowChangeEvent((BaseTables.OnlineTranslationBaseMassagesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveOnlineTranslationBaseMassagesRow(
        BaseTables.OnlineTranslationBaseMassagesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (OnlineTranslationBaseMassagesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class OnlineTranslationsDataTable : TypedTableBase<BaseTables.OnlineTranslationsRow>
    {
      private DataColumn columnTranslationGroup;
      private DataColumn columnTextKey;
      private DataColumn columnLanguageCode;
      private DataColumn columnLanguageText;
      private DataColumn columnMessageNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public OnlineTranslationsDataTable()
      {
        this.TableName = "OnlineTranslations";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal OnlineTranslationsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected OnlineTranslationsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn TranslationGroupColumn => this.columnTranslationGroup;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn TextKeyColumn => this.columnTextKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LanguageCodeColumn => this.columnLanguageCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LanguageTextColumn => this.columnLanguageText;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MessageNumberColumn => this.columnMessageNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationsRow this[int index]
      {
        get => (BaseTables.OnlineTranslationsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.OnlineTranslationsRowChangeEventHandler OnlineTranslationsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.OnlineTranslationsRowChangeEventHandler OnlineTranslationsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.OnlineTranslationsRowChangeEventHandler OnlineTranslationsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.OnlineTranslationsRowChangeEventHandler OnlineTranslationsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddOnlineTranslationsRow(BaseTables.OnlineTranslationsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationsRow AddOnlineTranslationsRow(
        int TranslationGroup,
        string TextKey,
        string LanguageCode,
        string LanguageText,
        int MessageNumber)
      {
        BaseTables.OnlineTranslationsRow row = (BaseTables.OnlineTranslationsRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) TranslationGroup,
          (object) TextKey,
          (object) LanguageCode,
          (object) LanguageText,
          (object) MessageNumber
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationsRow FindByTranslationGroupTextKeyLanguageCode(
        int TranslationGroup,
        string TextKey,
        string LanguageCode)
      {
        return (BaseTables.OnlineTranslationsRow) this.Rows.Find(new object[3]
        {
          (object) TranslationGroup,
          (object) TextKey,
          (object) LanguageCode
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.OnlineTranslationsDataTable translationsDataTable = (BaseTables.OnlineTranslationsDataTable) base.Clone();
        translationsDataTable.InitVars();
        return (DataTable) translationsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.OnlineTranslationsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnTranslationGroup = this.Columns["TranslationGroup"];
        this.columnTextKey = this.Columns["TextKey"];
        this.columnLanguageCode = this.Columns["LanguageCode"];
        this.columnLanguageText = this.Columns["LanguageText"];
        this.columnMessageNumber = this.Columns["MessageNumber"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnTranslationGroup = new DataColumn("TranslationGroup", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTranslationGroup);
        this.columnTextKey = new DataColumn("TextKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTextKey);
        this.columnLanguageCode = new DataColumn("LanguageCode", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLanguageCode);
        this.columnLanguageText = new DataColumn("LanguageText", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLanguageText);
        this.columnMessageNumber = new DataColumn("MessageNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMessageNumber);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnTranslationGroup,
          this.columnTextKey,
          this.columnLanguageCode
        }, true));
        this.columnTranslationGroup.AllowDBNull = false;
        this.columnTextKey.AllowDBNull = false;
        this.columnTextKey.MaxLength = 100;
        this.columnLanguageCode.AllowDBNull = false;
        this.columnLanguageCode.MaxLength = 10;
        this.columnLanguageText.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationsRow NewOnlineTranslationsRow()
      {
        return (BaseTables.OnlineTranslationsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.OnlineTranslationsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.OnlineTranslationsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.OnlineTranslationsRowChanged == null)
          return;
        this.OnlineTranslationsRowChanged((object) this, new BaseTables.OnlineTranslationsRowChangeEvent((BaseTables.OnlineTranslationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.OnlineTranslationsRowChanging == null)
          return;
        this.OnlineTranslationsRowChanging((object) this, new BaseTables.OnlineTranslationsRowChangeEvent((BaseTables.OnlineTranslationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.OnlineTranslationsRowDeleted == null)
          return;
        this.OnlineTranslationsRowDeleted((object) this, new BaseTables.OnlineTranslationsRowChangeEvent((BaseTables.OnlineTranslationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.OnlineTranslationsRowDeleting == null)
          return;
        this.OnlineTranslationsRowDeleting((object) this, new BaseTables.OnlineTranslationsRowChangeEvent((BaseTables.OnlineTranslationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveOnlineTranslationsRow(BaseTables.OnlineTranslationsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (OnlineTranslationsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterInfoDataTable : TypedTableBase<BaseTables.MeterInfoRow>
    {
      private DataColumn columnMeterInfoID;
      private DataColumn columnMeterHardwareID;
      private DataColumn columnMeterTypeID;
      private DataColumn columnPPSArtikelNr;
      private DataColumn columnDefaultFunctionNr;
      private DataColumn columnDescription;
      private DataColumn columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterInfoDataTable()
      {
        this.TableName = "MeterInfo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterInfoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected MeterInfoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterInfoIDColumn => this.columnMeterInfoID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterHardwareIDColumn => this.columnMeterHardwareID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterTypeIDColumn => this.columnMeterTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn PPSArtikelNrColumn => this.columnPPSArtikelNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DefaultFunctionNrColumn => this.columnDefaultFunctionNr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterInfoRow this[int index] => (BaseTables.MeterInfoRow) this.Rows[index];

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterInfoRowChangeEventHandler MeterInfoRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterInfoRowChangeEventHandler MeterInfoRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterInfoRowChangeEventHandler MeterInfoRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterInfoRowChangeEventHandler MeterInfoRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddMeterInfoRow(BaseTables.MeterInfoRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterInfoRow AddMeterInfoRow(
        int MeterInfoID,
        int MeterHardwareID,
        int MeterTypeID,
        string PPSArtikelNr,
        string DefaultFunctionNr,
        string Description,
        int HardwareTypeID)
      {
        BaseTables.MeterInfoRow row = (BaseTables.MeterInfoRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) MeterInfoID,
          (object) MeterHardwareID,
          (object) MeterTypeID,
          (object) PPSArtikelNr,
          (object) DefaultFunctionNr,
          (object) Description,
          (object) HardwareTypeID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.MeterInfoDataTable meterInfoDataTable = (BaseTables.MeterInfoDataTable) base.Clone();
        meterInfoDataTable.InitVars();
        return (DataTable) meterInfoDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.MeterInfoDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterInfoID = this.Columns["MeterInfoID"];
        this.columnMeterHardwareID = this.Columns["MeterHardwareID"];
        this.columnMeterTypeID = this.Columns["MeterTypeID"];
        this.columnPPSArtikelNr = this.Columns["PPSArtikelNr"];
        this.columnDefaultFunctionNr = this.Columns["DefaultFunctionNr"];
        this.columnDescription = this.Columns["Description"];
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnMeterInfoID = new DataColumn("MeterInfoID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterInfoID);
        this.columnMeterHardwareID = new DataColumn("MeterHardwareID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterHardwareID);
        this.columnMeterTypeID = new DataColumn("MeterTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterTypeID);
        this.columnPPSArtikelNr = new DataColumn("PPSArtikelNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPPSArtikelNr);
        this.columnDefaultFunctionNr = new DataColumn("DefaultFunctionNr", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDefaultFunctionNr);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMeterInfoID
        }, false));
        this.columnMeterInfoID.Unique = true;
        this.columnPPSArtikelNr.MaxLength = 50;
        this.columnDefaultFunctionNr.MaxLength = 50;
        this.columnDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterInfoRow NewMeterInfoRow() => (BaseTables.MeterInfoRow) this.NewRow();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.MeterInfoRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.MeterInfoRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterInfoRowChanged == null)
          return;
        this.MeterInfoRowChanged((object) this, new BaseTables.MeterInfoRowChangeEvent((BaseTables.MeterInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterInfoRowChanging == null)
          return;
        this.MeterInfoRowChanging((object) this, new BaseTables.MeterInfoRowChangeEvent((BaseTables.MeterInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterInfoRowDeleted == null)
          return;
        this.MeterInfoRowDeleted((object) this, new BaseTables.MeterInfoRowChangeEvent((BaseTables.MeterInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterInfoRowDeleting == null)
          return;
        this.MeterInfoRowDeleting((object) this, new BaseTables.MeterInfoRowChangeEvent((BaseTables.MeterInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveMeterInfoRow(BaseTables.MeterInfoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterInfoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class LocationDataTable : TypedTableBase<BaseTables.LocationRow>
    {
      private DataColumn columnLocationID;
      private DataColumn columnCountry;
      private DataColumn columnRegion;
      private DataColumn columnCity;
      private DataColumn columnZip;
      private DataColumn columnStreet;
      private DataColumn columnFloor;
      private DataColumn columnHouseNumber;
      private DataColumn columnRoomNumber;
      private DataColumn columnLatitude;
      private DataColumn columnLongitude;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public LocationDataTable()
      {
        this.TableName = "Location";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal LocationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected LocationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LocationIDColumn => this.columnLocationID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn CountryColumn => this.columnCountry;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn RegionColumn => this.columnRegion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn CityColumn => this.columnCity;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ZipColumn => this.columnZip;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn StreetColumn => this.columnStreet;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FloorColumn => this.columnFloor;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HouseNumberColumn => this.columnHouseNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn RoomNumberColumn => this.columnRoomNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LatitudeColumn => this.columnLatitude;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LongitudeColumn => this.columnLongitude;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.LocationRow this[int index] => (BaseTables.LocationRow) this.Rows[index];

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.LocationRowChangeEventHandler LocationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.LocationRowChangeEventHandler LocationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.LocationRowChangeEventHandler LocationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.LocationRowChangeEventHandler LocationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddLocationRow(BaseTables.LocationRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.LocationRow AddLocationRow(
        int LocationID,
        string Country,
        string Region,
        string City,
        string Zip,
        string Street,
        string Floor,
        string HouseNumber,
        string RoomNumber,
        double Latitude,
        double Longitude,
        string Description)
      {
        BaseTables.LocationRow row = (BaseTables.LocationRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) LocationID,
          (object) Country,
          (object) Region,
          (object) City,
          (object) Zip,
          (object) Street,
          (object) Floor,
          (object) HouseNumber,
          (object) RoomNumber,
          (object) Latitude,
          (object) Longitude,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.LocationRow FindByLocationID(int LocationID)
      {
        return (BaseTables.LocationRow) this.Rows.Find(new object[1]
        {
          (object) LocationID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.LocationDataTable locationDataTable = (BaseTables.LocationDataTable) base.Clone();
        locationDataTable.InitVars();
        return (DataTable) locationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.LocationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnLocationID = this.Columns["LocationID"];
        this.columnCountry = this.Columns["Country"];
        this.columnRegion = this.Columns["Region"];
        this.columnCity = this.Columns["City"];
        this.columnZip = this.Columns["Zip"];
        this.columnStreet = this.Columns["Street"];
        this.columnFloor = this.Columns["Floor"];
        this.columnHouseNumber = this.Columns["HouseNumber"];
        this.columnRoomNumber = this.Columns["RoomNumber"];
        this.columnLatitude = this.Columns["Latitude"];
        this.columnLongitude = this.Columns["Longitude"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnLocationID = new DataColumn("LocationID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLocationID);
        this.columnCountry = new DataColumn("Country", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCountry);
        this.columnRegion = new DataColumn("Region", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRegion);
        this.columnCity = new DataColumn("City", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCity);
        this.columnZip = new DataColumn("Zip", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnZip);
        this.columnStreet = new DataColumn("Street", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStreet);
        this.columnFloor = new DataColumn("Floor", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFloor);
        this.columnHouseNumber = new DataColumn("HouseNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHouseNumber);
        this.columnRoomNumber = new DataColumn("RoomNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRoomNumber);
        this.columnLatitude = new DataColumn("Latitude", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLatitude);
        this.columnLongitude = new DataColumn("Longitude", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLongitude);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnLocationID
        }, true));
        this.columnLocationID.AllowDBNull = false;
        this.columnLocationID.Unique = true;
        this.columnCountry.MaxLength = 50;
        this.columnRegion.MaxLength = 50;
        this.columnCity.MaxLength = 50;
        this.columnZip.MaxLength = 50;
        this.columnStreet.MaxLength = 50;
        this.columnFloor.MaxLength = 50;
        this.columnHouseNumber.MaxLength = 50;
        this.columnRoomNumber.MaxLength = 50;
        this.columnDescription.MaxLength = 200;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.LocationRow NewLocationRow() => (BaseTables.LocationRow) this.NewRow();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.LocationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.LocationRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.LocationRowChanged == null)
          return;
        this.LocationRowChanged((object) this, new BaseTables.LocationRowChangeEvent((BaseTables.LocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.LocationRowChanging == null)
          return;
        this.LocationRowChanging((object) this, new BaseTables.LocationRowChangeEvent((BaseTables.LocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.LocationRowDeleted == null)
          return;
        this.LocationRowDeleted((object) this, new BaseTables.LocationRowChangeEvent((BaseTables.LocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.LocationRowDeleting == null)
          return;
        this.LocationRowDeleting((object) this, new BaseTables.LocationRowChangeEvent((BaseTables.LocationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveLocationRow(BaseTables.LocationRow row) => this.Rows.Remove((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (LocationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterUniqueIdByARMDataTable : TypedTableBase<BaseTables.MeterUniqueIdByARMRow>
    {
      private DataColumn columnUniqueIdPart1;
      private DataColumn columnUniqueIdPart2;
      private DataColumn columnUniqueIdPart3;
      private DataColumn columnMeterID;
      private DataColumn columnCreateDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterUniqueIdByARMDataTable()
      {
        this.TableName = "MeterUniqueIdByARM";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterUniqueIdByARMDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected MeterUniqueIdByARMDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn UniqueIdPart1Column => this.columnUniqueIdPart1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn UniqueIdPart2Column => this.columnUniqueIdPart2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn UniqueIdPart3Column => this.columnUniqueIdPart3;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn CreateDateColumn => this.columnCreateDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterUniqueIdByARMRow this[int index]
      {
        get => (BaseTables.MeterUniqueIdByARMRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterUniqueIdByARMRowChangeEventHandler MeterUniqueIdByARMRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterUniqueIdByARMRowChangeEventHandler MeterUniqueIdByARMRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterUniqueIdByARMRowChangeEventHandler MeterUniqueIdByARMRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.MeterUniqueIdByARMRowChangeEventHandler MeterUniqueIdByARMRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddMeterUniqueIdByARMRow(BaseTables.MeterUniqueIdByARMRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterUniqueIdByARMRow AddMeterUniqueIdByARMRow(
        uint UniqueIdPart1,
        uint UniqueIdPart2,
        uint UniqueIdPart3,
        uint MeterID,
        DateTime CreateDate)
      {
        BaseTables.MeterUniqueIdByARMRow row = (BaseTables.MeterUniqueIdByARMRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) UniqueIdPart1,
          (object) UniqueIdPart2,
          (object) UniqueIdPart3,
          (object) MeterID,
          (object) CreateDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterUniqueIdByARMRow FindByUniqueIdPart1UniqueIdPart2UniqueIdPart3(
        uint UniqueIdPart1,
        uint UniqueIdPart2,
        uint UniqueIdPart3)
      {
        return (BaseTables.MeterUniqueIdByARMRow) this.Rows.Find(new object[3]
        {
          (object) UniqueIdPart1,
          (object) UniqueIdPart2,
          (object) UniqueIdPart3
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.MeterUniqueIdByARMDataTable idByArmDataTable = (BaseTables.MeterUniqueIdByARMDataTable) base.Clone();
        idByArmDataTable.InitVars();
        return (DataTable) idByArmDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.MeterUniqueIdByARMDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnUniqueIdPart1 = this.Columns["UniqueIdPart1"];
        this.columnUniqueIdPart2 = this.Columns["UniqueIdPart2"];
        this.columnUniqueIdPart3 = this.Columns["UniqueIdPart3"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnCreateDate = this.Columns["CreateDate"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnUniqueIdPart1 = new DataColumn("UniqueIdPart1", typeof (uint), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUniqueIdPart1);
        this.columnUniqueIdPart2 = new DataColumn("UniqueIdPart2", typeof (uint), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUniqueIdPart2);
        this.columnUniqueIdPart3 = new DataColumn("UniqueIdPart3", typeof (uint), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUniqueIdPart3);
        this.columnMeterID = new DataColumn("MeterID", typeof (uint), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnCreateDate = new DataColumn("CreateDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCreateDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[3]
        {
          this.columnUniqueIdPart1,
          this.columnUniqueIdPart2,
          this.columnUniqueIdPart3
        }, true));
        this.columnUniqueIdPart1.AllowDBNull = false;
        this.columnUniqueIdPart2.AllowDBNull = false;
        this.columnUniqueIdPart3.AllowDBNull = false;
        this.columnMeterID.AllowDBNull = false;
        this.columnCreateDate.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterUniqueIdByARMRow NewMeterUniqueIdByARMRow()
      {
        return (BaseTables.MeterUniqueIdByARMRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.MeterUniqueIdByARMRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.MeterUniqueIdByARMRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterUniqueIdByARMRowChanged == null)
          return;
        this.MeterUniqueIdByARMRowChanged((object) this, new BaseTables.MeterUniqueIdByARMRowChangeEvent((BaseTables.MeterUniqueIdByARMRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterUniqueIdByARMRowChanging == null)
          return;
        this.MeterUniqueIdByARMRowChanging((object) this, new BaseTables.MeterUniqueIdByARMRowChangeEvent((BaseTables.MeterUniqueIdByARMRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterUniqueIdByARMRowDeleted == null)
          return;
        this.MeterUniqueIdByARMRowDeleted((object) this, new BaseTables.MeterUniqueIdByARMRowChangeEvent((BaseTables.MeterUniqueIdByARMRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterUniqueIdByARMRowDeleting == null)
          return;
        this.MeterUniqueIdByARMRowDeleting((object) this, new BaseTables.MeterUniqueIdByARMRowChangeEvent((BaseTables.MeterUniqueIdByARMRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveMeterUniqueIdByARMRow(BaseTables.MeterUniqueIdByARMRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterUniqueIdByARMDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ApprovalTypesDataTable : TypedTableBase<BaseTables.ApprovalTypesRow>
    {
      private DataColumn columnApprovalID;
      private DataColumn columnApproval;
      private DataColumn columnRevision;
      private DataColumn columnValidFrom;
      private DataColumn columnValidTo;
      private DataColumn columnMeterHardwareID;
      private DataColumn columnRestrictions;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public ApprovalTypesDataTable()
      {
        this.TableName = "ApprovalTypes";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal ApprovalTypesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected ApprovalTypesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ApprovalIDColumn => this.columnApprovalID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ApprovalColumn => this.columnApproval;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn RevisionColumn => this.columnRevision;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ValidFromColumn => this.columnValidFrom;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ValidToColumn => this.columnValidTo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MeterHardwareIDColumn => this.columnMeterHardwareID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn RestrictionsColumn => this.columnRestrictions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ApprovalTypesRow this[int index]
      {
        get => (BaseTables.ApprovalTypesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.ApprovalTypesRowChangeEventHandler ApprovalTypesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.ApprovalTypesRowChangeEventHandler ApprovalTypesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.ApprovalTypesRowChangeEventHandler ApprovalTypesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event BaseTables.ApprovalTypesRowChangeEventHandler ApprovalTypesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddApprovalTypesRow(BaseTables.ApprovalTypesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ApprovalTypesRow AddApprovalTypesRow(
        int ApprovalID,
        string Approval,
        string Revision,
        DateTime ValidFrom,
        DateTime ValidTo,
        int MeterHardwareID,
        string Restrictions,
        string Description)
      {
        BaseTables.ApprovalTypesRow row = (BaseTables.ApprovalTypesRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) ApprovalID,
          (object) Approval,
          (object) Revision,
          (object) ValidFrom,
          (object) ValidTo,
          (object) MeterHardwareID,
          (object) Restrictions,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ApprovalTypesRow FindByApprovalRevisionRestrictions(
        string Approval,
        string Revision,
        string Restrictions)
      {
        return (BaseTables.ApprovalTypesRow) this.Rows.Find(new object[3]
        {
          (object) Approval,
          (object) Revision,
          (object) Restrictions
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        BaseTables.ApprovalTypesDataTable approvalTypesDataTable = (BaseTables.ApprovalTypesDataTable) base.Clone();
        approvalTypesDataTable.InitVars();
        return (DataTable) approvalTypesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new BaseTables.ApprovalTypesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnApprovalID = this.Columns["ApprovalID"];
        this.columnApproval = this.Columns["Approval"];
        this.columnRevision = this.Columns["Revision"];
        this.columnValidFrom = this.Columns["ValidFrom"];
        this.columnValidTo = this.Columns["ValidTo"];
        this.columnMeterHardwareID = this.Columns["MeterHardwareID"];
        this.columnRestrictions = this.Columns["Restrictions"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnApprovalID = new DataColumn("ApprovalID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApprovalID);
        this.columnApproval = new DataColumn("Approval", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnApproval);
        this.columnRevision = new DataColumn("Revision", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRevision);
        this.columnValidFrom = new DataColumn("ValidFrom", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidFrom);
        this.columnValidTo = new DataColumn("ValidTo", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValidTo);
        this.columnMeterHardwareID = new DataColumn("MeterHardwareID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterHardwareID);
        this.columnRestrictions = new DataColumn("Restrictions", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRestrictions);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint2", new DataColumn[3]
        {
          this.columnApproval,
          this.columnRevision,
          this.columnRestrictions
        }, true));
        this.columnApprovalID.AllowDBNull = false;
        this.columnApproval.AllowDBNull = false;
        this.columnApproval.MaxLength = (int) byte.MaxValue;
        this.columnRevision.AllowDBNull = false;
        this.columnRevision.MaxLength = (int) byte.MaxValue;
        this.columnValidFrom.AllowDBNull = false;
        this.columnMeterHardwareID.AllowDBNull = false;
        this.columnRestrictions.AllowDBNull = false;
        this.columnRestrictions.MaxLength = (int) byte.MaxValue;
        this.columnDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ApprovalTypesRow NewApprovalTypesRow()
      {
        return (BaseTables.ApprovalTypesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new BaseTables.ApprovalTypesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (BaseTables.ApprovalTypesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ApprovalTypesRowChanged == null)
          return;
        this.ApprovalTypesRowChanged((object) this, new BaseTables.ApprovalTypesRowChangeEvent((BaseTables.ApprovalTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ApprovalTypesRowChanging == null)
          return;
        this.ApprovalTypesRowChanging((object) this, new BaseTables.ApprovalTypesRowChangeEvent((BaseTables.ApprovalTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ApprovalTypesRowDeleted == null)
          return;
        this.ApprovalTypesRowDeleted((object) this, new BaseTables.ApprovalTypesRowChangeEvent((BaseTables.ApprovalTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ApprovalTypesRowDeleting == null)
          return;
        this.ApprovalTypesRowDeleting((object) this, new BaseTables.ApprovalTypesRowChangeEvent((BaseTables.ApprovalTypesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveApprovalTypesRow(BaseTables.ApprovalTypesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        BaseTables baseTables = new BaseTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = baseTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ApprovalTypesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = baseTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class MeterRow : DataRow
    {
      private BaseTables.MeterDataTable tableMeter;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeter = (BaseTables.MeterDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MeterID
      {
        get => (int) this[this.tableMeter.MeterIDColumn];
        set => this[this.tableMeter.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MeterInfoID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeter.MeterInfoIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterInfoID' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string SerialNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeter.SerialNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SerialNr' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.SerialNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DateTime ProductionDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeter.ProductionDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ProductionDate' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.ProductionDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DateTime ApprovalDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeter.ApprovalDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalDate' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.ApprovalDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string OrderNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeter.OrderNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'OrderNr' in table 'Meter' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeter.OrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMeterInfoIDNull() => this.IsNull(this.tableMeter.MeterInfoIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMeterInfoIDNull() => this[this.tableMeter.MeterInfoIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsSerialNrNull() => this.IsNull(this.tableMeter.SerialNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetSerialNrNull() => this[this.tableMeter.SerialNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsProductionDateNull() => this.IsNull(this.tableMeter.ProductionDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetProductionDateNull()
      {
        this[this.tableMeter.ProductionDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsApprovalDateNull() => this.IsNull(this.tableMeter.ApprovalDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetApprovalDateNull()
      {
        this[this.tableMeter.ApprovalDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsOrderNrNull() => this.IsNull(this.tableMeter.OrderNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetOrderNrNull() => this[this.tableMeter.OrderNrColumn] = Convert.DBNull;
    }

    public class MeterChangesRow : DataRow
    {
      private BaseTables.MeterChangesDataTable tableMeterChanges;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterChangesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterChanges = (BaseTables.MeterChangesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int ChangeID
      {
        get => (int) this[this.tableMeterChanges.ChangeIDColumn];
        set => this[this.tableMeterChanges.ChangeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MeterID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterChanges.MeterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterID' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DateTime ChangeDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeterChanges.ChangeDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChangeDate' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.ChangeDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MeterInfoID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterChanges.MeterInfoIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterInfoID' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string SerialNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterChanges.SerialNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SerialNr' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.SerialNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DateTime ProductionDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeterChanges.ProductionDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ProductionDate' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.ProductionDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DateTime ApprovalDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableMeterChanges.ApprovalDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ApprovalDate' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.ApprovalDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string OrderNr
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterChanges.OrderNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'OrderNr' in table 'MeterChanges' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterChanges.OrderNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMeterIDNull() => this.IsNull(this.tableMeterChanges.MeterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMeterIDNull() => this[this.tableMeterChanges.MeterIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsChangeDateNull() => this.IsNull(this.tableMeterChanges.ChangeDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetChangeDateNull()
      {
        this[this.tableMeterChanges.ChangeDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMeterInfoIDNull() => this.IsNull(this.tableMeterChanges.MeterInfoIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMeterInfoIDNull()
      {
        this[this.tableMeterChanges.MeterInfoIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsSerialNrNull() => this.IsNull(this.tableMeterChanges.SerialNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetSerialNrNull() => this[this.tableMeterChanges.SerialNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsProductionDateNull()
      {
        return this.IsNull(this.tableMeterChanges.ProductionDateColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetProductionDateNull()
      {
        this[this.tableMeterChanges.ProductionDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsApprovalDateNull() => this.IsNull(this.tableMeterChanges.ApprovalDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetApprovalDateNull()
      {
        this[this.tableMeterChanges.ApprovalDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsOrderNrNull() => this.IsNull(this.tableMeterChanges.OrderNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetOrderNrNull() => this[this.tableMeterChanges.OrderNrColumn] = Convert.DBNull;
    }

    public class DatabaseLocationRow : DataRow
    {
      private BaseTables.DatabaseLocationDataTable tableDatabaseLocation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal DatabaseLocationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDatabaseLocation = (BaseTables.DatabaseLocationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string DatabaseLocationName
      {
        get => (string) this[this.tableDatabaseLocation.DatabaseLocationNameColumn];
        set => this[this.tableDatabaseLocation.DatabaseLocationNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Land
      {
        get
        {
          try
          {
            return (string) this[this.tableDatabaseLocation.LandColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Land' in table 'DatabaseLocation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatabaseLocation.LandColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Town
      {
        get
        {
          try
          {
            return (string) this[this.tableDatabaseLocation.TownColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Town' in table 'DatabaseLocation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatabaseLocation.TownColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string CompanyName
      {
        get
        {
          try
          {
            return (string) this[this.tableDatabaseLocation.CompanyNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CompanyName' in table 'DatabaseLocation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatabaseLocation.CompanyNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsLandNull() => this.IsNull(this.tableDatabaseLocation.LandColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetLandNull() => this[this.tableDatabaseLocation.LandColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsTownNull() => this.IsNull(this.tableDatabaseLocation.TownColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetTownNull() => this[this.tableDatabaseLocation.TownColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsCompanyNameNull() => this.IsNull(this.tableDatabaseLocation.CompanyNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetCompanyNameNull()
      {
        this[this.tableDatabaseLocation.CompanyNameColumn] = Convert.DBNull;
      }
    }

    public class DatabaseIdentificationRow : DataRow
    {
      private BaseTables.DatabaseIdentificationDataTable tableDatabaseIdentification;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal DatabaseIdentificationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableDatabaseIdentification = (BaseTables.DatabaseIdentificationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string InfoName
      {
        get => (string) this[this.tableDatabaseIdentification.InfoNameColumn];
        set => this[this.tableDatabaseIdentification.InfoNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string InfoData
      {
        get
        {
          try
          {
            return (string) this[this.tableDatabaseIdentification.InfoDataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InfoData' in table 'DatabaseIdentification' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableDatabaseIdentification.InfoDataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsInfoDataNull() => this.IsNull(this.tableDatabaseIdentification.InfoDataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetInfoDataNull()
      {
        this[this.tableDatabaseIdentification.InfoDataColumn] = Convert.DBNull;
      }
    }

    public class ZRGlobalIDRow : DataRow
    {
      private BaseTables.ZRGlobalIDDataTable tableZRGlobalID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal ZRGlobalIDRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableZRGlobalID = (BaseTables.ZRGlobalIDDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string ZRTableName
      {
        get => (string) this[this.tableZRGlobalID.ZRTableNameColumn];
        set => this[this.tableZRGlobalID.ZRTableNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string ZRFieldName
      {
        get
        {
          try
          {
            return (string) this[this.tableZRGlobalID.ZRFieldNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZRFieldName' in table 'ZRGlobalID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRGlobalID.ZRFieldNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int ZRNextNr
      {
        get
        {
          try
          {
            return (int) this[this.tableZRGlobalID.ZRNextNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZRNextNr' in table 'ZRGlobalID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRGlobalID.ZRNextNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int ZRFirstNr
      {
        get
        {
          try
          {
            return (int) this[this.tableZRGlobalID.ZRFirstNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZRFirstNr' in table 'ZRGlobalID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRGlobalID.ZRFirstNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int ZRLastNr
      {
        get
        {
          try
          {
            return (int) this[this.tableZRGlobalID.ZRLastNrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ZRLastNr' in table 'ZRGlobalID' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableZRGlobalID.ZRLastNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string DatabaseLocationName
      {
        get => (string) this[this.tableZRGlobalID.DatabaseLocationNameColumn];
        set => this[this.tableZRGlobalID.DatabaseLocationNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsZRFieldNameNull() => this.IsNull(this.tableZRGlobalID.ZRFieldNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetZRFieldNameNull()
      {
        this[this.tableZRGlobalID.ZRFieldNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsZRNextNrNull() => this.IsNull(this.tableZRGlobalID.ZRNextNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetZRNextNrNull() => this[this.tableZRGlobalID.ZRNextNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsZRFirstNrNull() => this.IsNull(this.tableZRGlobalID.ZRFirstNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetZRFirstNrNull() => this[this.tableZRGlobalID.ZRFirstNrColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsZRLastNrNull() => this.IsNull(this.tableZRGlobalID.ZRLastNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetZRLastNrNull() => this[this.tableZRGlobalID.ZRLastNrColumn] = Convert.DBNull;
    }

    public class MeterDataRow : DataRow
    {
      private BaseTables.MeterDataDataTable tableMeterData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterDataRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterData = (BaseTables.MeterDataDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MeterID
      {
        get => (int) this[this.tableMeterData.MeterIDColumn];
        set => this[this.tableMeterData.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DateTime TimePoint
      {
        get => (DateTime) this[this.tableMeterData.TimePointColumn];
        set => this[this.tableMeterData.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int PValueID
      {
        get => (int) this[this.tableMeterData.PValueIDColumn];
        set => this[this.tableMeterData.PValueIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string PValue
      {
        get
        {
          try
          {
            return (string) this[this.tableMeterData.PValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PValue' in table 'MeterData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterData.PValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public byte[] PValueBinary
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableMeterData.PValueBinaryColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PValueBinary' in table 'MeterData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterData.PValueBinaryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public byte SyncStatus
      {
        get
        {
          try
          {
            return (byte) this[this.tableMeterData.SyncStatusColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SyncStatus' in table 'MeterData' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterData.SyncStatusColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsPValueNull() => this.IsNull(this.tableMeterData.PValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetPValueNull() => this[this.tableMeterData.PValueColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsPValueBinaryNull() => this.IsNull(this.tableMeterData.PValueBinaryColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetPValueBinaryNull()
      {
        this[this.tableMeterData.PValueBinaryColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsSyncStatusNull() => this.IsNull(this.tableMeterData.SyncStatusColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetSyncStatusNull()
      {
        this[this.tableMeterData.SyncStatusColumn] = Convert.DBNull;
      }
    }

    public class HardwareTypeRow : DataRow
    {
      private BaseTables.HardwareTypeDataTable tableHardwareType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal HardwareTypeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableHardwareType = (BaseTables.HardwareTypeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int HardwareTypeID
      {
        get => (int) this[this.tableHardwareType.HardwareTypeIDColumn];
        set => this[this.tableHardwareType.HardwareTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MapID
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.MapIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MapID' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int LinkerTableID
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.LinkerTableIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LinkerTableID' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.LinkerTableIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int FirmwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.FirmwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersion' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.FirmwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareName
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.HardwareNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareName' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int HardwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.HardwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareVersion' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareResource
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.HardwareResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareResource' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int extEEPSize
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.extEEPSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'extEEPSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.extEEPSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short maxStackSize
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.maxStackSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'maxStackSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.maxStackSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short RAMSize
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.RAMSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RAMSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.RAMSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short RAMStartAdr
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.RAMStartAdrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RAMStartAdr' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.RAMStartAdrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short intEEPStartAdr
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.intEEPStartAdrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'intEEPStartAdr' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.intEEPStartAdrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short intEEPSize
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.intEEPSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'intEEPSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.intEEPSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Testinfo
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.TestinfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Testinfo' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.TestinfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareOptions
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.HardwareOptionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareOptions' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareOptionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMapIDNull() => this.IsNull(this.tableHardwareType.MapIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMapIDNull() => this[this.tableHardwareType.MapIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsLinkerTableIDNull() => this.IsNull(this.tableHardwareType.LinkerTableIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetLinkerTableIDNull()
      {
        this[this.tableHardwareType.LinkerTableIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFirmwareVersionNull()
      {
        return this.IsNull(this.tableHardwareType.FirmwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFirmwareVersionNull()
      {
        this[this.tableHardwareType.FirmwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareNameNull() => this.IsNull(this.tableHardwareType.HardwareNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareNameNull()
      {
        this[this.tableHardwareType.HardwareNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareVersionNull()
      {
        return this.IsNull(this.tableHardwareType.HardwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareVersionNull()
      {
        this[this.tableHardwareType.HardwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareResourceNull()
      {
        return this.IsNull(this.tableHardwareType.HardwareResourceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareResourceNull()
      {
        this[this.tableHardwareType.HardwareResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsextEEPSizeNull() => this.IsNull(this.tableHardwareType.extEEPSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetextEEPSizeNull()
      {
        this[this.tableHardwareType.extEEPSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsmaxStackSizeNull() => this.IsNull(this.tableHardwareType.maxStackSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetmaxStackSizeNull()
      {
        this[this.tableHardwareType.maxStackSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsRAMSizeNull() => this.IsNull(this.tableHardwareType.RAMSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetRAMSizeNull() => this[this.tableHardwareType.RAMSizeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsRAMStartAdrNull() => this.IsNull(this.tableHardwareType.RAMStartAdrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetRAMStartAdrNull()
      {
        this[this.tableHardwareType.RAMStartAdrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsintEEPStartAdrNull()
      {
        return this.IsNull(this.tableHardwareType.intEEPStartAdrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetintEEPStartAdrNull()
      {
        this[this.tableHardwareType.intEEPStartAdrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsintEEPSizeNull() => this.IsNull(this.tableHardwareType.intEEPSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetintEEPSizeNull()
      {
        this[this.tableHardwareType.intEEPSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableHardwareType.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableHardwareType.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsTestinfoNull() => this.IsNull(this.tableHardwareType.TestinfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetTestinfoNull() => this[this.tableHardwareType.TestinfoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareOptionsNull()
      {
        return this.IsNull(this.tableHardwareType.HardwareOptionsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareOptionsNull()
      {
        this[this.tableHardwareType.HardwareOptionsColumn] = Convert.DBNull;
      }
    }

    public class OnlineTranslationBaseMassagesRow : DataRow
    {
      private BaseTables.OnlineTranslationBaseMassagesDataTable tableOnlineTranslationBaseMassages;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal OnlineTranslationBaseMassagesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableOnlineTranslationBaseMassages = (BaseTables.OnlineTranslationBaseMassagesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string MessageTree
      {
        get => (string) this[this.tableOnlineTranslationBaseMassages.MessageTreeColumn];
        set => this[this.tableOnlineTranslationBaseMassages.MessageTreeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string DefaultText
      {
        get
        {
          try
          {
            return (string) this[this.tableOnlineTranslationBaseMassages.DefaultTextColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'DefaultText' in table 'OnlineTranslationBaseMassages' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableOnlineTranslationBaseMassages.DefaultTextColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDefaultTextNull()
      {
        return this.IsNull(this.tableOnlineTranslationBaseMassages.DefaultTextColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDefaultTextNull()
      {
        this[this.tableOnlineTranslationBaseMassages.DefaultTextColumn] = Convert.DBNull;
      }
    }

    public class OnlineTranslationsRow : DataRow
    {
      private BaseTables.OnlineTranslationsDataTable tableOnlineTranslations;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal OnlineTranslationsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableOnlineTranslations = (BaseTables.OnlineTranslationsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int TranslationGroup
      {
        get => (int) this[this.tableOnlineTranslations.TranslationGroupColumn];
        set => this[this.tableOnlineTranslations.TranslationGroupColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string TextKey
      {
        get => (string) this[this.tableOnlineTranslations.TextKeyColumn];
        set => this[this.tableOnlineTranslations.TextKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string LanguageCode
      {
        get => (string) this[this.tableOnlineTranslations.LanguageCodeColumn];
        set => this[this.tableOnlineTranslations.LanguageCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string LanguageText
      {
        get
        {
          try
          {
            return (string) this[this.tableOnlineTranslations.LanguageTextColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LanguageText' in table 'OnlineTranslations' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableOnlineTranslations.LanguageTextColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MessageNumber
      {
        get
        {
          try
          {
            return (int) this[this.tableOnlineTranslations.MessageNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MessageNumber' in table 'OnlineTranslations' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableOnlineTranslations.MessageNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsLanguageTextNull()
      {
        return this.IsNull(this.tableOnlineTranslations.LanguageTextColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetLanguageTextNull()
      {
        this[this.tableOnlineTranslations.LanguageTextColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMessageNumberNull()
      {
        return this.IsNull(this.tableOnlineTranslations.MessageNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMessageNumberNull()
      {
        this[this.tableOnlineTranslations.MessageNumberColumn] = Convert.DBNull;
      }
    }

    public class MeterInfoRow : DataRow
    {
      private BaseTables.MeterInfoDataTable tableMeterInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterInfoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterInfo = (BaseTables.MeterInfoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MeterInfoID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfo.MeterInfoIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterInfoID' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.MeterInfoIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MeterHardwareID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfo.MeterHardwareIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterHardwareID' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.MeterHardwareIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MeterTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfo.MeterTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterTypeID' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.MeterTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string PPSArtikelNr
      {
        get
        {
          return this.IsPPSArtikelNrNull() ? (string) null : (string) this[this.tableMeterInfo.PPSArtikelNrColumn];
        }
        set => this[this.tableMeterInfo.PPSArtikelNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string DefaultFunctionNr
      {
        get
        {
          return this.IsDefaultFunctionNrNull() ? (string) null : (string) this[this.tableMeterInfo.DefaultFunctionNrColumn];
        }
        set => this[this.tableMeterInfo.DefaultFunctionNrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Description
      {
        get
        {
          return this.IsDescriptionNull() ? (string) null : (string) this[this.tableMeterInfo.DescriptionColumn];
        }
        set => this[this.tableMeterInfo.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int HardwareTypeID
      {
        get
        {
          try
          {
            return (int) this[this.tableMeterInfo.HardwareTypeIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareTypeID' in table 'MeterInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterInfo.HardwareTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMeterInfoIDNull() => this.IsNull(this.tableMeterInfo.MeterInfoIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMeterInfoIDNull()
      {
        this[this.tableMeterInfo.MeterInfoIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMeterHardwareIDNull() => this.IsNull(this.tableMeterInfo.MeterHardwareIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMeterHardwareIDNull()
      {
        this[this.tableMeterInfo.MeterHardwareIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMeterTypeIDNull() => this.IsNull(this.tableMeterInfo.MeterTypeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMeterTypeIDNull()
      {
        this[this.tableMeterInfo.MeterTypeIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsPPSArtikelNrNull() => this.IsNull(this.tableMeterInfo.PPSArtikelNrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetPPSArtikelNrNull()
      {
        this[this.tableMeterInfo.PPSArtikelNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDefaultFunctionNrNull()
      {
        return this.IsNull(this.tableMeterInfo.DefaultFunctionNrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDefaultFunctionNrNull()
      {
        this[this.tableMeterInfo.DefaultFunctionNrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableMeterInfo.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMeterInfo.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareTypeIDNull() => this.IsNull(this.tableMeterInfo.HardwareTypeIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareTypeIDNull()
      {
        this[this.tableMeterInfo.HardwareTypeIDColumn] = Convert.DBNull;
      }
    }

    public class LocationRow : DataRow
    {
      private BaseTables.LocationDataTable tableLocation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal LocationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableLocation = (BaseTables.LocationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int LocationID
      {
        get => (int) this[this.tableLocation.LocationIDColumn];
        set => this[this.tableLocation.LocationIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Country
      {
        get
        {
          try
          {
            return (string) this[this.tableLocation.CountryColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Country' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.CountryColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Region
      {
        get
        {
          try
          {
            return (string) this[this.tableLocation.RegionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Region' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.RegionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string City
      {
        get
        {
          try
          {
            return (string) this[this.tableLocation.CityColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'City' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.CityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Zip
      {
        get
        {
          try
          {
            return (string) this[this.tableLocation.ZipColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Zip' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.ZipColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Street
      {
        get
        {
          try
          {
            return (string) this[this.tableLocation.StreetColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Street' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.StreetColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Floor
      {
        get
        {
          try
          {
            return (string) this[this.tableLocation.FloorColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Floor' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.FloorColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HouseNumber
      {
        get
        {
          try
          {
            return (string) this[this.tableLocation.HouseNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HouseNumber' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.HouseNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string RoomNumber
      {
        get
        {
          try
          {
            return (string) this[this.tableLocation.RoomNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RoomNumber' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.RoomNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public double Latitude
      {
        get
        {
          try
          {
            return (double) this[this.tableLocation.LatitudeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Latitude' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.LatitudeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public double Longitude
      {
        get
        {
          try
          {
            return (double) this[this.tableLocation.LongitudeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Longitude' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.LongitudeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableLocation.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'Location' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableLocation.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsCountryNull() => this.IsNull(this.tableLocation.CountryColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetCountryNull() => this[this.tableLocation.CountryColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsRegionNull() => this.IsNull(this.tableLocation.RegionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetRegionNull() => this[this.tableLocation.RegionColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsCityNull() => this.IsNull(this.tableLocation.CityColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetCityNull() => this[this.tableLocation.CityColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsZipNull() => this.IsNull(this.tableLocation.ZipColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetZipNull() => this[this.tableLocation.ZipColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsStreetNull() => this.IsNull(this.tableLocation.StreetColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetStreetNull() => this[this.tableLocation.StreetColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFloorNull() => this.IsNull(this.tableLocation.FloorColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFloorNull() => this[this.tableLocation.FloorColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHouseNumberNull() => this.IsNull(this.tableLocation.HouseNumberColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHouseNumberNull()
      {
        this[this.tableLocation.HouseNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsRoomNumberNull() => this.IsNull(this.tableLocation.RoomNumberColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetRoomNumberNull() => this[this.tableLocation.RoomNumberColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsLatitudeNull() => this.IsNull(this.tableLocation.LatitudeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetLatitudeNull() => this[this.tableLocation.LatitudeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsLongitudeNull() => this.IsNull(this.tableLocation.LongitudeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetLongitudeNull() => this[this.tableLocation.LongitudeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableLocation.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableLocation.DescriptionColumn] = Convert.DBNull;
      }
    }

    public class MeterUniqueIdByARMRow : DataRow
    {
      private BaseTables.MeterUniqueIdByARMDataTable tableMeterUniqueIdByARM;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MeterUniqueIdByARMRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterUniqueIdByARM = (BaseTables.MeterUniqueIdByARMDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public uint UniqueIdPart1
      {
        get => (uint) this[this.tableMeterUniqueIdByARM.UniqueIdPart1Column];
        set => this[this.tableMeterUniqueIdByARM.UniqueIdPart1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public uint UniqueIdPart2
      {
        get => (uint) this[this.tableMeterUniqueIdByARM.UniqueIdPart2Column];
        set => this[this.tableMeterUniqueIdByARM.UniqueIdPart2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public uint UniqueIdPart3
      {
        get => (uint) this[this.tableMeterUniqueIdByARM.UniqueIdPart3Column];
        set => this[this.tableMeterUniqueIdByARM.UniqueIdPart3Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public uint MeterID
      {
        get => (uint) this[this.tableMeterUniqueIdByARM.MeterIDColumn];
        set => this[this.tableMeterUniqueIdByARM.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DateTime CreateDate
      {
        get => (DateTime) this[this.tableMeterUniqueIdByARM.CreateDateColumn];
        set => this[this.tableMeterUniqueIdByARM.CreateDateColumn] = (object) value;
      }
    }

    public class ApprovalTypesRow : DataRow
    {
      private BaseTables.ApprovalTypesDataTable tableApprovalTypes;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal ApprovalTypesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableApprovalTypes = (BaseTables.ApprovalTypesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int ApprovalID
      {
        get => (int) this[this.tableApprovalTypes.ApprovalIDColumn];
        set => this[this.tableApprovalTypes.ApprovalIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Approval
      {
        get => (string) this[this.tableApprovalTypes.ApprovalColumn];
        set => this[this.tableApprovalTypes.ApprovalColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Revision
      {
        get => (string) this[this.tableApprovalTypes.RevisionColumn];
        set => this[this.tableApprovalTypes.RevisionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DateTime ValidFrom
      {
        get => (DateTime) this[this.tableApprovalTypes.ValidFromColumn];
        set => this[this.tableApprovalTypes.ValidFromColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DateTime ValidTo
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableApprovalTypes.ValidToColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ValidTo' in table 'ApprovalTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableApprovalTypes.ValidToColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MeterHardwareID
      {
        get => (int) this[this.tableApprovalTypes.MeterHardwareIDColumn];
        set => this[this.tableApprovalTypes.MeterHardwareIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Restrictions
      {
        get => (string) this[this.tableApprovalTypes.RestrictionsColumn];
        set => this[this.tableApprovalTypes.RestrictionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableApprovalTypes.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'ApprovalTypes' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableApprovalTypes.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsValidToNull() => this.IsNull(this.tableApprovalTypes.ValidToColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetValidToNull() => this[this.tableApprovalTypes.ValidToColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableApprovalTypes.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableApprovalTypes.DescriptionColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class MeterRowChangeEvent : EventArgs
    {
      private BaseTables.MeterRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterRowChangeEvent(BaseTables.MeterRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class MeterChangesRowChangeEvent : EventArgs
    {
      private BaseTables.MeterChangesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterChangesRowChangeEvent(BaseTables.MeterChangesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterChangesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class DatabaseLocationRowChangeEvent : EventArgs
    {
      private BaseTables.DatabaseLocationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DatabaseLocationRowChangeEvent(
        BaseTables.DatabaseLocationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseLocationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class DatabaseIdentificationRowChangeEvent : EventArgs
    {
      private BaseTables.DatabaseIdentificationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DatabaseIdentificationRowChangeEvent(
        BaseTables.DatabaseIdentificationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.DatabaseIdentificationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class ZRGlobalIDRowChangeEvent : EventArgs
    {
      private BaseTables.ZRGlobalIDRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public ZRGlobalIDRowChangeEvent(BaseTables.ZRGlobalIDRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ZRGlobalIDRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class MeterDataRowChangeEvent : EventArgs
    {
      private BaseTables.MeterDataRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterDataRowChangeEvent(BaseTables.MeterDataRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterDataRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class HardwareTypeRowChangeEvent : EventArgs
    {
      private BaseTables.HardwareTypeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeRowChangeEvent(BaseTables.HardwareTypeRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.HardwareTypeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class OnlineTranslationBaseMassagesRowChangeEvent : EventArgs
    {
      private BaseTables.OnlineTranslationBaseMassagesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public OnlineTranslationBaseMassagesRowChangeEvent(
        BaseTables.OnlineTranslationBaseMassagesRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationBaseMassagesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class OnlineTranslationsRowChangeEvent : EventArgs
    {
      private BaseTables.OnlineTranslationsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public OnlineTranslationsRowChangeEvent(
        BaseTables.OnlineTranslationsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.OnlineTranslationsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class MeterInfoRowChangeEvent : EventArgs
    {
      private BaseTables.MeterInfoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterInfoRowChangeEvent(BaseTables.MeterInfoRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterInfoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class LocationRowChangeEvent : EventArgs
    {
      private BaseTables.LocationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public LocationRowChangeEvent(BaseTables.LocationRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.LocationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class MeterUniqueIdByARMRowChangeEvent : EventArgs
    {
      private BaseTables.MeterUniqueIdByARMRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MeterUniqueIdByARMRowChangeEvent(
        BaseTables.MeterUniqueIdByARMRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.MeterUniqueIdByARMRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class ApprovalTypesRowChangeEvent : EventArgs
    {
      private BaseTables.ApprovalTypesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public ApprovalTypesRowChangeEvent(BaseTables.ApprovalTypesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public BaseTables.ApprovalTypesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}


--- DriverTables.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DataSets.DriverTables
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace GmmDbLib.DataSets
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("DriverTables")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class DriverTables : DataSet
  {
    private DriverTables.MeterMSSDataTable tableMeterMSS;
    private DriverTables.MeterValuesMSSDataTable tableMeterValuesMSS;
    private DriverTables.ServiceTaskResultDataTable tableServiceTaskResult;
    private DriverTables.MinomatListDataTable tableMinomatList;
    private DriverTables.MinomatDataLogsDataTable tableMinomatDataLogs;
    private DriverTables.MinomatConnectionLogsDataTable tableMinomatConnectionLogs;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public DriverTables()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected DriverTables(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (MeterMSS)] != null)
            base.Tables.Add((DataTable) new DriverTables.MeterMSSDataTable(dataSet.Tables[nameof (MeterMSS)]));
          if (dataSet.Tables[nameof (MeterValuesMSS)] != null)
            base.Tables.Add((DataTable) new DriverTables.MeterValuesMSSDataTable(dataSet.Tables[nameof (MeterValuesMSS)]));
          if (dataSet.Tables[nameof (ServiceTaskResult)] != null)
            base.Tables.Add((DataTable) new DriverTables.ServiceTaskResultDataTable(dataSet.Tables[nameof (ServiceTaskResult)]));
          if (dataSet.Tables[nameof (MinomatList)] != null)
            base.Tables.Add((DataTable) new DriverTables.MinomatListDataTable(dataSet.Tables[nameof (MinomatList)]));
          if (dataSet.Tables[nameof (MinomatDataLogs)] != null)
            base.Tables.Add((DataTable) new DriverTables.MinomatDataLogsDataTable(dataSet.Tables[nameof (MinomatDataLogs)]));
          if (dataSet.Tables[nameof (MinomatConnectionLogs)] != null)
            base.Tables.Add((DataTable) new DriverTables.MinomatConnectionLogsDataTable(dataSet.Tables[nameof (MinomatConnectionLogs)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DriverTables.MeterMSSDataTable MeterMSS => this.tableMeterMSS;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DriverTables.MeterValuesMSSDataTable MeterValuesMSS => this.tableMeterValuesMSS;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DriverTables.ServiceTaskResultDataTable ServiceTaskResult => this.tableServiceTaskResult;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DriverTables.MinomatListDataTable MinomatList => this.tableMinomatList;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DriverTables.MinomatDataLogsDataTable MinomatDataLogs => this.tableMinomatDataLogs;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public DriverTables.MinomatConnectionLogsDataTable MinomatConnectionLogs
    {
      get => this.tableMinomatConnectionLogs;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public override DataSet Clone()
    {
      DriverTables driverTables = (DriverTables) base.Clone();
      driverTables.InitVars();
      driverTables.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) driverTables;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["MeterMSS"] != null)
          base.Tables.Add((DataTable) new DriverTables.MeterMSSDataTable(dataSet.Tables["MeterMSS"]));
        if (dataSet.Tables["MeterValuesMSS"] != null)
          base.Tables.Add((DataTable) new DriverTables.MeterValuesMSSDataTable(dataSet.Tables["MeterValuesMSS"]));
        if (dataSet.Tables["ServiceTaskResult"] != null)
          base.Tables.Add((DataTable) new DriverTables.ServiceTaskResultDataTable(dataSet.Tables["ServiceTaskResult"]));
        if (dataSet.Tables["MinomatList"] != null)
          base.Tables.Add((DataTable) new DriverTables.MinomatListDataTable(dataSet.Tables["MinomatList"]));
        if (dataSet.Tables["MinomatDataLogs"] != null)
          base.Tables.Add((DataTable) new DriverTables.MinomatDataLogsDataTable(dataSet.Tables["MinomatDataLogs"]));
        if (dataSet.Tables["MinomatConnectionLogs"] != null)
          base.Tables.Add((DataTable) new DriverTables.MinomatConnectionLogsDataTable(dataSet.Tables["MinomatConnectionLogs"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableMeterMSS = (DriverTables.MeterMSSDataTable) base.Tables["MeterMSS"];
      if (initTable && this.tableMeterMSS != null)
        this.tableMeterMSS.InitVars();
      this.tableMeterValuesMSS = (DriverTables.MeterValuesMSSDataTable) base.Tables["MeterValuesMSS"];
      if (initTable && this.tableMeterValuesMSS != null)
        this.tableMeterValuesMSS.InitVars();
      this.tableServiceTaskResult = (DriverTables.ServiceTaskResultDataTable) base.Tables["ServiceTaskResult"];
      if (initTable && this.tableServiceTaskResult != null)
        this.tableServiceTaskResult.InitVars();
      this.tableMinomatList = (DriverTables.MinomatListDataTable) base.Tables["MinomatList"];
      if (initTable && this.tableMinomatList != null)
        this.tableMinomatList.InitVars();
      this.tableMinomatDataLogs = (DriverTables.MinomatDataLogsDataTable) base.Tables["MinomatDataLogs"];
      if (initTable && this.tableMinomatDataLogs != null)
        this.tableMinomatDataLogs.InitVars();
      this.tableMinomatConnectionLogs = (DriverTables.MinomatConnectionLogsDataTable) base.Tables["MinomatConnectionLogs"];
      if (!initTable || this.tableMinomatConnectionLogs == null)
        return;
      this.tableMinomatConnectionLogs.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (DriverTables);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/DriverTables.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableMeterMSS = new DriverTables.MeterMSSDataTable();
      base.Tables.Add((DataTable) this.tableMeterMSS);
      this.tableMeterValuesMSS = new DriverTables.MeterValuesMSSDataTable();
      base.Tables.Add((DataTable) this.tableMeterValuesMSS);
      this.tableServiceTaskResult = new DriverTables.ServiceTaskResultDataTable();
      base.Tables.Add((DataTable) this.tableServiceTaskResult);
      this.tableMinomatList = new DriverTables.MinomatListDataTable();
      base.Tables.Add((DataTable) this.tableMinomatList);
      this.tableMinomatDataLogs = new DriverTables.MinomatDataLogsDataTable();
      base.Tables.Add((DataTable) this.tableMinomatDataLogs);
      this.tableMinomatConnectionLogs = new DriverTables.MinomatConnectionLogsDataTable();
      base.Tables.Add((DataTable) this.tableMinomatConnectionLogs);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterMSS() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMeterValuesMSS() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeServiceTaskResult() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMinomatList() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMinomatDataLogs() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeMinomatConnectionLogs() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      DriverTables driverTables = new DriverTables();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = driverTables.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = driverTables.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterMSSRowChangeEventHandler(
      object sender,
      DriverTables.MeterMSSRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MeterValuesMSSRowChangeEventHandler(
      object sender,
      DriverTables.MeterValuesMSSRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void ServiceTaskResultRowChangeEventHandler(
      object sender,
      DriverTables.ServiceTaskResultRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MinomatListRowChangeEventHandler(
      object sender,
      DriverTables.MinomatListRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MinomatDataLogsRowChangeEventHandler(
      object sender,
      DriverTables.MinomatDataLogsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void MinomatConnectionLogsRowChangeEventHandler(
      object sender,
      DriverTables.MinomatConnectionLogsRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterMSSDataTable : TypedTableBase<DriverTables.MeterMSSRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnSerialNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterMSSDataTable()
      {
        this.TableName = "MeterMSS";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterMSSDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterMSSDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SerialNumberColumn => this.columnSerialNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterMSSRow this[int index]
      {
        get => (DriverTables.MeterMSSRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MeterMSSRowChangeEventHandler MeterMSSRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MeterMSSRowChangeEventHandler MeterMSSRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MeterMSSRowChangeEventHandler MeterMSSRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MeterMSSRowChangeEventHandler MeterMSSRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterMSSRow(DriverTables.MeterMSSRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterMSSRow AddMeterMSSRow(Guid MeterID, string SerialNumber)
      {
        DriverTables.MeterMSSRow row = (DriverTables.MeterMSSRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) MeterID,
          (object) SerialNumber
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterMSSRow FindByMeterIDSerialNumber(Guid MeterID, string SerialNumber)
      {
        return (DriverTables.MeterMSSRow) this.Rows.Find(new object[2]
        {
          (object) MeterID,
          (object) SerialNumber
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DriverTables.MeterMSSDataTable meterMssDataTable = (DriverTables.MeterMSSDataTable) base.Clone();
        meterMssDataTable.InitVars();
        return (DataTable) meterMssDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DriverTables.MeterMSSDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnSerialNumber = this.Columns["SerialNumber"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (Guid), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnSerialNumber = new DataColumn("SerialNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNumber);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnMeterID,
          this.columnSerialNumber
        }, true));
        this.columnMeterID.AllowDBNull = false;
        this.columnSerialNumber.AllowDBNull = false;
        this.columnSerialNumber.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterMSSRow NewMeterMSSRow() => (DriverTables.MeterMSSRow) this.NewRow();

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DriverTables.MeterMSSRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DriverTables.MeterMSSRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterMSSRowChanged == null)
          return;
        this.MeterMSSRowChanged((object) this, new DriverTables.MeterMSSRowChangeEvent((DriverTables.MeterMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterMSSRowChanging == null)
          return;
        this.MeterMSSRowChanging((object) this, new DriverTables.MeterMSSRowChangeEvent((DriverTables.MeterMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterMSSRowDeleted == null)
          return;
        this.MeterMSSRowDeleted((object) this, new DriverTables.MeterMSSRowChangeEvent((DriverTables.MeterMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterMSSRowDeleting == null)
          return;
        this.MeterMSSRowDeleting((object) this, new DriverTables.MeterMSSRowChangeEvent((DriverTables.MeterMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterMSSRow(DriverTables.MeterMSSRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DriverTables driverTables = new DriverTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = driverTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterMSSDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = driverTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MeterValuesMSSDataTable : TypedTableBase<DriverTables.MeterValuesMSSRow>
    {
      private DataColumn columnMeterID;
      private DataColumn columnValueIdentIndex;
      private DataColumn columnTimePoint;
      private DataColumn columnValue;
      private DataColumn columnPhysicalQuantity;
      private DataColumn columnMeterType;
      private DataColumn columnCalculation;
      private DataColumn columnCalculationStart;
      private DataColumn columnStorageInterval;
      private DataColumn columnCreation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterValuesMSSDataTable()
      {
        this.TableName = "MeterValuesMSS";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterValuesMSSDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MeterValuesMSSDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueIdentIndexColumn => this.columnValueIdentIndex;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ValueColumn => this.columnValue;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PhysicalQuantityColumn => this.columnPhysicalQuantity;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterTypeColumn => this.columnMeterType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalculationColumn => this.columnCalculation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CalculationStartColumn => this.columnCalculationStart;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn StorageIntervalColumn => this.columnStorageInterval;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CreationColumn => this.columnCreation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterValuesMSSRow this[int index]
      {
        get => (DriverTables.MeterValuesMSSRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MeterValuesMSSRowChangeEventHandler MeterValuesMSSRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MeterValuesMSSRowChangeEventHandler MeterValuesMSSRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MeterValuesMSSRowChangeEventHandler MeterValuesMSSRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MeterValuesMSSRowChangeEventHandler MeterValuesMSSRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMeterValuesMSSRow(DriverTables.MeterValuesMSSRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterValuesMSSRow AddMeterValuesMSSRow(
        Guid MeterID,
        byte ValueIdentIndex,
        DateTime TimePoint,
        double Value,
        byte PhysicalQuantity,
        byte MeterType,
        byte Calculation,
        byte CalculationStart,
        byte StorageInterval,
        byte Creation)
      {
        DriverTables.MeterValuesMSSRow row = (DriverTables.MeterValuesMSSRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) MeterID,
          (object) ValueIdentIndex,
          (object) TimePoint,
          (object) Value,
          (object) PhysicalQuantity,
          (object) MeterType,
          (object) Calculation,
          (object) CalculationStart,
          (object) StorageInterval,
          (object) Creation
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterValuesMSSRow FindByMeterIDValueIdentIndexTimePointPhysicalQuantityMeterTypeCalculationCalculationStartStorageIntervalCreation(
        Guid MeterID,
        byte ValueIdentIndex,
        DateTime TimePoint,
        byte PhysicalQuantity,
        byte MeterType,
        byte Calculation,
        byte CalculationStart,
        byte StorageInterval,
        byte Creation)
      {
        return (DriverTables.MeterValuesMSSRow) this.Rows.Find(new object[9]
        {
          (object) MeterID,
          (object) ValueIdentIndex,
          (object) TimePoint,
          (object) PhysicalQuantity,
          (object) MeterType,
          (object) Calculation,
          (object) CalculationStart,
          (object) StorageInterval,
          (object) Creation
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DriverTables.MeterValuesMSSDataTable valuesMssDataTable = (DriverTables.MeterValuesMSSDataTable) base.Clone();
        valuesMssDataTable.InitVars();
        return (DataTable) valuesMssDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DriverTables.MeterValuesMSSDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMeterID = this.Columns["MeterID"];
        this.columnValueIdentIndex = this.Columns["ValueIdentIndex"];
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnValue = this.Columns["Value"];
        this.columnPhysicalQuantity = this.Columns["PhysicalQuantity"];
        this.columnMeterType = this.Columns["MeterType"];
        this.columnCalculation = this.Columns["Calculation"];
        this.columnCalculationStart = this.Columns["CalculationStart"];
        this.columnStorageInterval = this.Columns["StorageInterval"];
        this.columnCreation = this.Columns["Creation"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMeterID = new DataColumn("MeterID", typeof (Guid), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnValueIdentIndex = new DataColumn("ValueIdentIndex", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValueIdentIndex);
        this.columnTimePoint = new DataColumn("TimePoint", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnValue = new DataColumn("Value", typeof (double), (string) null, MappingType.Element);
        this.Columns.Add(this.columnValue);
        this.columnPhysicalQuantity = new DataColumn("PhysicalQuantity", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPhysicalQuantity);
        this.columnMeterType = new DataColumn("MeterType", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterType);
        this.columnCalculation = new DataColumn("Calculation", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalculation);
        this.columnCalculationStart = new DataColumn("CalculationStart", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCalculationStart);
        this.columnStorageInterval = new DataColumn("StorageInterval", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnStorageInterval);
        this.columnCreation = new DataColumn("Creation", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCreation);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[9]
        {
          this.columnMeterID,
          this.columnValueIdentIndex,
          this.columnTimePoint,
          this.columnPhysicalQuantity,
          this.columnMeterType,
          this.columnCalculation,
          this.columnCalculationStart,
          this.columnStorageInterval,
          this.columnCreation
        }, true));
        this.columnMeterID.AllowDBNull = false;
        this.columnValueIdentIndex.AllowDBNull = false;
        this.columnTimePoint.AllowDBNull = false;
        this.columnPhysicalQuantity.AllowDBNull = false;
        this.columnMeterType.AllowDBNull = false;
        this.columnCalculation.AllowDBNull = false;
        this.columnCalculationStart.AllowDBNull = false;
        this.columnStorageInterval.AllowDBNull = false;
        this.columnCreation.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterValuesMSSRow NewMeterValuesMSSRow()
      {
        return (DriverTables.MeterValuesMSSRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DriverTables.MeterValuesMSSRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DriverTables.MeterValuesMSSRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MeterValuesMSSRowChanged == null)
          return;
        this.MeterValuesMSSRowChanged((object) this, new DriverTables.MeterValuesMSSRowChangeEvent((DriverTables.MeterValuesMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MeterValuesMSSRowChanging == null)
          return;
        this.MeterValuesMSSRowChanging((object) this, new DriverTables.MeterValuesMSSRowChangeEvent((DriverTables.MeterValuesMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MeterValuesMSSRowDeleted == null)
          return;
        this.MeterValuesMSSRowDeleted((object) this, new DriverTables.MeterValuesMSSRowChangeEvent((DriverTables.MeterValuesMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MeterValuesMSSRowDeleting == null)
          return;
        this.MeterValuesMSSRowDeleting((object) this, new DriverTables.MeterValuesMSSRowChangeEvent((DriverTables.MeterValuesMSSRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMeterValuesMSSRow(DriverTables.MeterValuesMSSRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DriverTables driverTables = new DriverTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = driverTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MeterValuesMSSDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = driverTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ServiceTaskResultDataTable : TypedTableBase<DriverTables.ServiceTaskResultRow>
    {
      private DataColumn columnTimePoint;
      private DataColumn columnSerialNumber;
      private DataColumn columnJobID;
      private DataColumn columnMeterID;
      private DataColumn columnMethodName;
      private DataColumn columnResultType;
      private DataColumn columnResultObject;
      private DataColumn columnRawData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ServiceTaskResultDataTable()
      {
        this.TableName = "ServiceTaskResult";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ServiceTaskResultDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected ServiceTaskResultDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SerialNumberColumn => this.columnSerialNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn JobIDColumn => this.columnJobID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MeterIDColumn => this.columnMeterID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MethodNameColumn => this.columnMethodName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResultTypeColumn => this.columnResultType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ResultObjectColumn => this.columnResultObject;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RawDataColumn => this.columnRawData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.ServiceTaskResultRow this[int index]
      {
        get => (DriverTables.ServiceTaskResultRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.ServiceTaskResultRowChangeEventHandler ServiceTaskResultRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.ServiceTaskResultRowChangeEventHandler ServiceTaskResultRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.ServiceTaskResultRowChangeEventHandler ServiceTaskResultRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.ServiceTaskResultRowChangeEventHandler ServiceTaskResultRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddServiceTaskResultRow(DriverTables.ServiceTaskResultRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.ServiceTaskResultRow AddServiceTaskResultRow(
        DateTime TimePoint,
        string SerialNumber,
        Guid JobID,
        Guid MeterID,
        string MethodName,
        string ResultType,
        string ResultObject,
        string RawData)
      {
        DriverTables.ServiceTaskResultRow row = (DriverTables.ServiceTaskResultRow) this.NewRow();
        object[] objArray = new object[8]
        {
          (object) TimePoint,
          (object) SerialNumber,
          (object) JobID,
          (object) MeterID,
          (object) MethodName,
          (object) ResultType,
          (object) ResultObject,
          (object) RawData
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.ServiceTaskResultRow FindByTimePointSerialNumber(
        DateTime TimePoint,
        string SerialNumber)
      {
        return (DriverTables.ServiceTaskResultRow) this.Rows.Find(new object[2]
        {
          (object) TimePoint,
          (object) SerialNumber
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DriverTables.ServiceTaskResultDataTable taskResultDataTable = (DriverTables.ServiceTaskResultDataTable) base.Clone();
        taskResultDataTable.InitVars();
        return (DataTable) taskResultDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DriverTables.ServiceTaskResultDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnSerialNumber = this.Columns["SerialNumber"];
        this.columnJobID = this.Columns["JobID"];
        this.columnMeterID = this.Columns["MeterID"];
        this.columnMethodName = this.Columns["MethodName"];
        this.columnResultType = this.Columns["ResultType"];
        this.columnResultObject = this.Columns["ResultObject"];
        this.columnRawData = this.Columns["RawData"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTimePoint = new DataColumn("TimePoint", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnSerialNumber = new DataColumn("SerialNumber", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSerialNumber);
        this.columnJobID = new DataColumn("JobID", typeof (Guid), (string) null, MappingType.Element);
        this.Columns.Add(this.columnJobID);
        this.columnMeterID = new DataColumn("MeterID", typeof (Guid), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMeterID);
        this.columnMethodName = new DataColumn("MethodName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMethodName);
        this.columnResultType = new DataColumn("ResultType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResultType);
        this.columnResultObject = new DataColumn("ResultObject", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnResultObject);
        this.columnRawData = new DataColumn("RawData", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRawData);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnTimePoint,
          this.columnSerialNumber
        }, true));
        this.columnTimePoint.AllowDBNull = false;
        this.columnSerialNumber.AllowDBNull = false;
        this.columnSerialNumber.MaxLength = 100;
        this.columnMethodName.MaxLength = (int) byte.MaxValue;
        this.columnResultType.MaxLength = (int) byte.MaxValue;
        this.columnResultObject.MaxLength = 536870910;
        this.columnRawData.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.ServiceTaskResultRow NewServiceTaskResultRow()
      {
        return (DriverTables.ServiceTaskResultRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DriverTables.ServiceTaskResultRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DriverTables.ServiceTaskResultRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ServiceTaskResultRowChanged == null)
          return;
        this.ServiceTaskResultRowChanged((object) this, new DriverTables.ServiceTaskResultRowChangeEvent((DriverTables.ServiceTaskResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ServiceTaskResultRowChanging == null)
          return;
        this.ServiceTaskResultRowChanging((object) this, new DriverTables.ServiceTaskResultRowChangeEvent((DriverTables.ServiceTaskResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ServiceTaskResultRowDeleted == null)
          return;
        this.ServiceTaskResultRowDeleted((object) this, new DriverTables.ServiceTaskResultRowChangeEvent((DriverTables.ServiceTaskResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ServiceTaskResultRowDeleting == null)
          return;
        this.ServiceTaskResultRowDeleting((object) this, new DriverTables.ServiceTaskResultRowChangeEvent((DriverTables.ServiceTaskResultRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveServiceTaskResultRow(DriverTables.ServiceTaskResultRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DriverTables driverTables = new DriverTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = driverTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ServiceTaskResultDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = driverTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MinomatListDataTable : TypedTableBase<DriverTables.MinomatListRow>
    {
      private DataColumn columnGsmID;
      private DataColumn columnMinolID;
      private DataColumn columnChallengeKey;
      private DataColumn columnSessionKey;
      private DataColumn columnChallengeKeyOld;
      private DataColumn columnSessionKeyOld;
      private DataColumn columnConnectionDate;
      private DataColumn columnConnectionLog;
      private DataColumn columnGsmIDEncoded;
      private DataColumn columnChallengeKeyEncoded;
      private DataColumn columnGsmIDEncodedOld;
      private DataColumn columnChallengeKeyEncodedOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatListDataTable()
      {
        this.TableName = "MinomatList";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatListDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MinomatListDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GsmIDColumn => this.columnGsmID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MinolIDColumn => this.columnMinolID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyColumn => this.columnChallengeKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SessionKeyColumn => this.columnSessionKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyOldColumn => this.columnChallengeKeyOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SessionKeyOldColumn => this.columnSessionKeyOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionDateColumn => this.columnConnectionDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionLogColumn => this.columnConnectionLog;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GsmIDEncodedColumn => this.columnGsmIDEncoded;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyEncodedColumn => this.columnChallengeKeyEncoded;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GsmIDEncodedOldColumn => this.columnGsmIDEncodedOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyEncodedOldColumn => this.columnChallengeKeyEncodedOld;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatListRow this[int index]
      {
        get => (DriverTables.MinomatListRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatListRowChangeEventHandler MinomatListRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatListRowChangeEventHandler MinomatListRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatListRowChangeEventHandler MinomatListRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatListRowChangeEventHandler MinomatListRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMinomatListRow(DriverTables.MinomatListRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatListRow AddMinomatListRow(
        string GsmID,
        string MinolID,
        string ChallengeKey,
        string SessionKey,
        string ChallengeKeyOld,
        string SessionKeyOld,
        string ConnectionDate,
        string ConnectionLog,
        string GsmIDEncoded,
        string ChallengeKeyEncoded,
        string GsmIDEncodedOld,
        string ChallengeKeyEncodedOld)
      {
        DriverTables.MinomatListRow row = (DriverTables.MinomatListRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) GsmID,
          (object) MinolID,
          (object) ChallengeKey,
          (object) SessionKey,
          (object) ChallengeKeyOld,
          (object) SessionKeyOld,
          (object) ConnectionDate,
          (object) ConnectionLog,
          (object) GsmIDEncoded,
          (object) ChallengeKeyEncoded,
          (object) GsmIDEncodedOld,
          (object) ChallengeKeyEncodedOld
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatListRow FindByGsmID(string GsmID)
      {
        return (DriverTables.MinomatListRow) this.Rows.Find(new object[1]
        {
          (object) GsmID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DriverTables.MinomatListDataTable minomatListDataTable = (DriverTables.MinomatListDataTable) base.Clone();
        minomatListDataTable.InitVars();
        return (DataTable) minomatListDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DriverTables.MinomatListDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnGsmID = this.Columns["GsmID"];
        this.columnMinolID = this.Columns["MinolID"];
        this.columnChallengeKey = this.Columns["ChallengeKey"];
        this.columnSessionKey = this.Columns["SessionKey"];
        this.columnChallengeKeyOld = this.Columns["ChallengeKeyOld"];
        this.columnSessionKeyOld = this.Columns["SessionKeyOld"];
        this.columnConnectionDate = this.Columns["ConnectionDate"];
        this.columnConnectionLog = this.Columns["ConnectionLog"];
        this.columnGsmIDEncoded = this.Columns["GsmIDEncoded"];
        this.columnChallengeKeyEncoded = this.Columns["ChallengeKeyEncoded"];
        this.columnGsmIDEncodedOld = this.Columns["GsmIDEncodedOld"];
        this.columnChallengeKeyEncodedOld = this.Columns["ChallengeKeyEncodedOld"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnGsmID = new DataColumn("GsmID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGsmID);
        this.columnMinolID = new DataColumn("MinolID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinolID);
        this.columnChallengeKey = new DataColumn("ChallengeKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKey);
        this.columnSessionKey = new DataColumn("SessionKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSessionKey);
        this.columnChallengeKeyOld = new DataColumn("ChallengeKeyOld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKeyOld);
        this.columnSessionKeyOld = new DataColumn("SessionKeyOld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSessionKeyOld);
        this.columnConnectionDate = new DataColumn("ConnectionDate", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionDate);
        this.columnConnectionLog = new DataColumn("ConnectionLog", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionLog);
        this.columnGsmIDEncoded = new DataColumn("GsmIDEncoded", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGsmIDEncoded);
        this.columnChallengeKeyEncoded = new DataColumn("ChallengeKeyEncoded", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKeyEncoded);
        this.columnGsmIDEncodedOld = new DataColumn("GsmIDEncodedOld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGsmIDEncodedOld);
        this.columnChallengeKeyEncodedOld = new DataColumn("ChallengeKeyEncodedOld", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKeyEncodedOld);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnGsmID
        }, true));
        this.columnGsmID.AllowDBNull = false;
        this.columnGsmID.Unique = true;
        this.columnGsmID.MaxLength = 8;
        this.columnMinolID.MaxLength = 8;
        this.columnChallengeKey.MaxLength = 8;
        this.columnSessionKey.MaxLength = 16;
        this.columnChallengeKeyOld.MaxLength = 8;
        this.columnSessionKeyOld.MaxLength = 16;
        this.columnConnectionDate.MaxLength = 14;
        this.columnConnectionLog.MaxLength = 150;
        this.columnGsmIDEncoded.MaxLength = 8;
        this.columnChallengeKeyEncoded.MaxLength = 8;
        this.columnGsmIDEncodedOld.MaxLength = 8;
        this.columnChallengeKeyEncodedOld.MaxLength = 8;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatListRow NewMinomatListRow()
      {
        return (DriverTables.MinomatListRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DriverTables.MinomatListRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DriverTables.MinomatListRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MinomatListRowChanged == null)
          return;
        this.MinomatListRowChanged((object) this, new DriverTables.MinomatListRowChangeEvent((DriverTables.MinomatListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MinomatListRowChanging == null)
          return;
        this.MinomatListRowChanging((object) this, new DriverTables.MinomatListRowChangeEvent((DriverTables.MinomatListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MinomatListRowDeleted == null)
          return;
        this.MinomatListRowDeleted((object) this, new DriverTables.MinomatListRowChangeEvent((DriverTables.MinomatListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MinomatListRowDeleting == null)
          return;
        this.MinomatListRowDeleting((object) this, new DriverTables.MinomatListRowChangeEvent((DriverTables.MinomatListRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMinomatListRow(DriverTables.MinomatListRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DriverTables driverTables = new DriverTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = driverTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MinomatListDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = driverTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MinomatDataLogsDataTable : TypedTableBase<DriverTables.MinomatDataLogsRow>
    {
      private DataColumn columnMinomatDataLogID;
      private DataColumn columnConnectionID;
      private DataColumn columnTimePoint;
      private DataColumn columnRawData;
      private DataColumn columnChallengeKey;
      private DataColumn columnSessionKey;
      private DataColumn columnIsIncoming;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatDataLogsDataTable()
      {
        this.TableName = "MinomatDataLogs";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatDataLogsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MinomatDataLogsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MinomatDataLogIDColumn => this.columnMinomatDataLogID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionIDColumn => this.columnConnectionID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RawDataColumn => this.columnRawData;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChallengeKeyColumn => this.columnChallengeKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SessionKeyColumn => this.columnSessionKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IsIncomingColumn => this.columnIsIncoming;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatDataLogsRow this[int index]
      {
        get => (DriverTables.MinomatDataLogsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatDataLogsRowChangeEventHandler MinomatDataLogsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatDataLogsRowChangeEventHandler MinomatDataLogsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatDataLogsRowChangeEventHandler MinomatDataLogsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatDataLogsRowChangeEventHandler MinomatDataLogsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMinomatDataLogsRow(DriverTables.MinomatDataLogsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatDataLogsRow AddMinomatDataLogsRow(
        string MinomatDataLogID,
        string ConnectionID,
        string TimePoint,
        string RawData,
        string ChallengeKey,
        string SessionKey,
        bool IsIncoming)
      {
        DriverTables.MinomatDataLogsRow row = (DriverTables.MinomatDataLogsRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) MinomatDataLogID,
          (object) ConnectionID,
          (object) TimePoint,
          (object) RawData,
          (object) ChallengeKey,
          (object) SessionKey,
          (object) IsIncoming
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatDataLogsRow FindByMinomatDataLogID(string MinomatDataLogID)
      {
        return (DriverTables.MinomatDataLogsRow) this.Rows.Find(new object[1]
        {
          (object) MinomatDataLogID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DriverTables.MinomatDataLogsDataTable dataLogsDataTable = (DriverTables.MinomatDataLogsDataTable) base.Clone();
        dataLogsDataTable.InitVars();
        return (DataTable) dataLogsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DriverTables.MinomatDataLogsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnMinomatDataLogID = this.Columns["MinomatDataLogID"];
        this.columnConnectionID = this.Columns["ConnectionID"];
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnRawData = this.Columns["RawData"];
        this.columnChallengeKey = this.Columns["ChallengeKey"];
        this.columnSessionKey = this.Columns["SessionKey"];
        this.columnIsIncoming = this.Columns["IsIncoming"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnMinomatDataLogID = new DataColumn("MinomatDataLogID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMinomatDataLogID);
        this.columnConnectionID = new DataColumn("ConnectionID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionID);
        this.columnTimePoint = new DataColumn("TimePoint", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnRawData = new DataColumn("RawData", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRawData);
        this.columnChallengeKey = new DataColumn("ChallengeKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChallengeKey);
        this.columnSessionKey = new DataColumn("SessionKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSessionKey);
        this.columnIsIncoming = new DataColumn("IsIncoming", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIsIncoming);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMinomatDataLogID
        }, true));
        this.columnMinomatDataLogID.AllowDBNull = false;
        this.columnMinomatDataLogID.Unique = true;
        this.columnMinomatDataLogID.MaxLength = 36;
        this.columnConnectionID.MaxLength = 36;
        this.columnTimePoint.MaxLength = 14;
        this.columnRawData.MaxLength = 536870910;
        this.columnChallengeKey.MaxLength = 8;
        this.columnSessionKey.MaxLength = 16;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatDataLogsRow NewMinomatDataLogsRow()
      {
        return (DriverTables.MinomatDataLogsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DriverTables.MinomatDataLogsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DriverTables.MinomatDataLogsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MinomatDataLogsRowChanged == null)
          return;
        this.MinomatDataLogsRowChanged((object) this, new DriverTables.MinomatDataLogsRowChangeEvent((DriverTables.MinomatDataLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MinomatDataLogsRowChanging == null)
          return;
        this.MinomatDataLogsRowChanging((object) this, new DriverTables.MinomatDataLogsRowChangeEvent((DriverTables.MinomatDataLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MinomatDataLogsRowDeleted == null)
          return;
        this.MinomatDataLogsRowDeleted((object) this, new DriverTables.MinomatDataLogsRowChangeEvent((DriverTables.MinomatDataLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MinomatDataLogsRowDeleting == null)
          return;
        this.MinomatDataLogsRowDeleting((object) this, new DriverTables.MinomatDataLogsRowChangeEvent((DriverTables.MinomatDataLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMinomatDataLogsRow(DriverTables.MinomatDataLogsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DriverTables driverTables = new DriverTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = driverTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MinomatDataLogsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = driverTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MinomatConnectionLogsDataTable : 
      TypedTableBase<DriverTables.MinomatConnectionLogsRow>
    {
      private DataColumn columnConnectionID;
      private DataColumn columnTimePoint;
      private DataColumn columnClientIP;
      private DataColumn columnGsmID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatConnectionLogsDataTable()
      {
        this.TableName = "MinomatConnectionLogs";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatConnectionLogsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected MinomatConnectionLogsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ConnectionIDColumn => this.columnConnectionID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TimePointColumn => this.columnTimePoint;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ClientIPColumn => this.columnClientIP;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn GsmIDColumn => this.columnGsmID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatConnectionLogsRow this[int index]
      {
        get => (DriverTables.MinomatConnectionLogsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatConnectionLogsRowChangeEventHandler MinomatConnectionLogsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatConnectionLogsRowChangeEventHandler MinomatConnectionLogsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatConnectionLogsRowChangeEventHandler MinomatConnectionLogsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event DriverTables.MinomatConnectionLogsRowChangeEventHandler MinomatConnectionLogsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddMinomatConnectionLogsRow(DriverTables.MinomatConnectionLogsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatConnectionLogsRow AddMinomatConnectionLogsRow(
        string ConnectionID,
        string TimePoint,
        string ClientIP,
        string GsmID)
      {
        DriverTables.MinomatConnectionLogsRow row = (DriverTables.MinomatConnectionLogsRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) ConnectionID,
          (object) TimePoint,
          (object) ClientIP,
          (object) GsmID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatConnectionLogsRow FindByConnectionID(string ConnectionID)
      {
        return (DriverTables.MinomatConnectionLogsRow) this.Rows.Find(new object[1]
        {
          (object) ConnectionID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        DriverTables.MinomatConnectionLogsDataTable connectionLogsDataTable = (DriverTables.MinomatConnectionLogsDataTable) base.Clone();
        connectionLogsDataTable.InitVars();
        return (DataTable) connectionLogsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new DriverTables.MinomatConnectionLogsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnConnectionID = this.Columns["ConnectionID"];
        this.columnTimePoint = this.Columns["TimePoint"];
        this.columnClientIP = this.Columns["ClientIP"];
        this.columnGsmID = this.Columns["GsmID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnConnectionID = new DataColumn("ConnectionID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnConnectionID);
        this.columnTimePoint = new DataColumn("TimePoint", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTimePoint);
        this.columnClientIP = new DataColumn("ClientIP", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnClientIP);
        this.columnGsmID = new DataColumn("GsmID", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGsmID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnConnectionID
        }, true));
        this.columnConnectionID.AllowDBNull = false;
        this.columnConnectionID.Unique = true;
        this.columnConnectionID.MaxLength = 36;
        this.columnTimePoint.MaxLength = 14;
        this.columnClientIP.MaxLength = 46;
        this.columnGsmID.MaxLength = 8;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatConnectionLogsRow NewMinomatConnectionLogsRow()
      {
        return (DriverTables.MinomatConnectionLogsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new DriverTables.MinomatConnectionLogsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (DriverTables.MinomatConnectionLogsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MinomatConnectionLogsRowChanged == null)
          return;
        this.MinomatConnectionLogsRowChanged((object) this, new DriverTables.MinomatConnectionLogsRowChangeEvent((DriverTables.MinomatConnectionLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MinomatConnectionLogsRowChanging == null)
          return;
        this.MinomatConnectionLogsRowChanging((object) this, new DriverTables.MinomatConnectionLogsRowChangeEvent((DriverTables.MinomatConnectionLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MinomatConnectionLogsRowDeleted == null)
          return;
        this.MinomatConnectionLogsRowDeleted((object) this, new DriverTables.MinomatConnectionLogsRowChangeEvent((DriverTables.MinomatConnectionLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MinomatConnectionLogsRowDeleting == null)
          return;
        this.MinomatConnectionLogsRowDeleting((object) this, new DriverTables.MinomatConnectionLogsRowChangeEvent((DriverTables.MinomatConnectionLogsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveMinomatConnectionLogsRow(DriverTables.MinomatConnectionLogsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        DriverTables driverTables = new DriverTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = driverTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MinomatConnectionLogsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = driverTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class MeterMSSRow : DataRow
    {
      private DriverTables.MeterMSSDataTable tableMeterMSS;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterMSSRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterMSS = (DriverTables.MeterMSSDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Guid MeterID
      {
        get => (Guid) this[this.tableMeterMSS.MeterIDColumn];
        set => this[this.tableMeterMSS.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SerialNumber
      {
        get => (string) this[this.tableMeterMSS.SerialNumberColumn];
        set => this[this.tableMeterMSS.SerialNumberColumn] = (object) value;
      }
    }

    public class MeterValuesMSSRow : DataRow
    {
      private DriverTables.MeterValuesMSSDataTable tableMeterValuesMSS;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MeterValuesMSSRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMeterValuesMSS = (DriverTables.MeterValuesMSSDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Guid MeterID
      {
        get => (Guid) this[this.tableMeterValuesMSS.MeterIDColumn];
        set => this[this.tableMeterValuesMSS.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte ValueIdentIndex
      {
        get => (byte) this[this.tableMeterValuesMSS.ValueIdentIndexColumn];
        set => this[this.tableMeterValuesMSS.ValueIdentIndexColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime TimePoint
      {
        get => (DateTime) this[this.tableMeterValuesMSS.TimePointColumn];
        set => this[this.tableMeterValuesMSS.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public double Value
      {
        get
        {
          try
          {
            return (double) this[this.tableMeterValuesMSS.ValueColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Value' in table 'MeterValuesMSS' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMeterValuesMSS.ValueColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte PhysicalQuantity
      {
        get => (byte) this[this.tableMeterValuesMSS.PhysicalQuantityColumn];
        set => this[this.tableMeterValuesMSS.PhysicalQuantityColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte MeterType
      {
        get => (byte) this[this.tableMeterValuesMSS.MeterTypeColumn];
        set => this[this.tableMeterValuesMSS.MeterTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte Calculation
      {
        get => (byte) this[this.tableMeterValuesMSS.CalculationColumn];
        set => this[this.tableMeterValuesMSS.CalculationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte CalculationStart
      {
        get => (byte) this[this.tableMeterValuesMSS.CalculationStartColumn];
        set => this[this.tableMeterValuesMSS.CalculationStartColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte StorageInterval
      {
        get => (byte) this[this.tableMeterValuesMSS.StorageIntervalColumn];
        set => this[this.tableMeterValuesMSS.StorageIntervalColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public byte Creation
      {
        get => (byte) this[this.tableMeterValuesMSS.CreationColumn];
        set => this[this.tableMeterValuesMSS.CreationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsValueNull() => this.IsNull(this.tableMeterValuesMSS.ValueColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetValueNull() => this[this.tableMeterValuesMSS.ValueColumn] = Convert.DBNull;
    }

    public class ServiceTaskResultRow : DataRow
    {
      private DriverTables.ServiceTaskResultDataTable tableServiceTaskResult;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal ServiceTaskResultRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableServiceTaskResult = (DriverTables.ServiceTaskResultDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime TimePoint
      {
        get => (DateTime) this[this.tableServiceTaskResult.TimePointColumn];
        set => this[this.tableServiceTaskResult.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SerialNumber
      {
        get => (string) this[this.tableServiceTaskResult.SerialNumberColumn];
        set => this[this.tableServiceTaskResult.SerialNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Guid JobID
      {
        get
        {
          try
          {
            return (Guid) this[this.tableServiceTaskResult.JobIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'JobID' in table 'ServiceTaskResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableServiceTaskResult.JobIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Guid MeterID
      {
        get
        {
          try
          {
            return (Guid) this[this.tableServiceTaskResult.MeterIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MeterID' in table 'ServiceTaskResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableServiceTaskResult.MeterIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MethodName
      {
        get
        {
          try
          {
            return (string) this[this.tableServiceTaskResult.MethodNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MethodName' in table 'ServiceTaskResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableServiceTaskResult.MethodNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResultType
      {
        get
        {
          try
          {
            return (string) this[this.tableServiceTaskResult.ResultTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResultType' in table 'ServiceTaskResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableServiceTaskResult.ResultTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ResultObject
      {
        get
        {
          try
          {
            return (string) this[this.tableServiceTaskResult.ResultObjectColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ResultObject' in table 'ServiceTaskResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableServiceTaskResult.ResultObjectColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RawData
      {
        get
        {
          try
          {
            return (string) this[this.tableServiceTaskResult.RawDataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RawData' in table 'ServiceTaskResult' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableServiceTaskResult.RawDataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsJobIDNull() => this.IsNull(this.tableServiceTaskResult.JobIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetJobIDNull() => this[this.tableServiceTaskResult.JobIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMeterIDNull() => this.IsNull(this.tableServiceTaskResult.MeterIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMeterIDNull()
      {
        this[this.tableServiceTaskResult.MeterIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMethodNameNull() => this.IsNull(this.tableServiceTaskResult.MethodNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMethodNameNull()
      {
        this[this.tableServiceTaskResult.MethodNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResultTypeNull() => this.IsNull(this.tableServiceTaskResult.ResultTypeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResultTypeNull()
      {
        this[this.tableServiceTaskResult.ResultTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsResultObjectNull()
      {
        return this.IsNull(this.tableServiceTaskResult.ResultObjectColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetResultObjectNull()
      {
        this[this.tableServiceTaskResult.ResultObjectColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRawDataNull() => this.IsNull(this.tableServiceTaskResult.RawDataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRawDataNull()
      {
        this[this.tableServiceTaskResult.RawDataColumn] = Convert.DBNull;
      }
    }

    public class MinomatListRow : DataRow
    {
      private DriverTables.MinomatListDataTable tableMinomatList;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatListRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMinomatList = (DriverTables.MinomatListDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string GsmID
      {
        get => (string) this[this.tableMinomatList.GsmIDColumn];
        set => this[this.tableMinomatList.GsmIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MinolID
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.MinolIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MinolID' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.MinolIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKey
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ChallengeKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKey' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ChallengeKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SessionKey
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.SessionKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SessionKey' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.SessionKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKeyOld
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ChallengeKeyOldColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKeyOld' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ChallengeKeyOldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SessionKeyOld
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.SessionKeyOldColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SessionKeyOld' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.SessionKeyOldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConnectionDate
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ConnectionDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ConnectionDate' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ConnectionDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConnectionLog
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ConnectionLogColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ConnectionLog' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ConnectionLogColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string GsmIDEncoded
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.GsmIDEncodedColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GsmIDEncoded' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.GsmIDEncodedColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKeyEncoded
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ChallengeKeyEncodedColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKeyEncoded' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ChallengeKeyEncodedColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string GsmIDEncodedOld
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.GsmIDEncodedOldColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GsmIDEncodedOld' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.GsmIDEncodedOldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKeyEncodedOld
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatList.ChallengeKeyEncodedOldColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKeyEncodedOld' in table 'MinomatList' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatList.ChallengeKeyEncodedOldColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMinolIDNull() => this.IsNull(this.tableMinomatList.MinolIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMinolIDNull() => this[this.tableMinomatList.MinolIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyNull() => this.IsNull(this.tableMinomatList.ChallengeKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyNull()
      {
        this[this.tableMinomatList.ChallengeKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSessionKeyNull() => this.IsNull(this.tableMinomatList.SessionKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSessionKeyNull()
      {
        this[this.tableMinomatList.SessionKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyOldNull()
      {
        return this.IsNull(this.tableMinomatList.ChallengeKeyOldColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyOldNull()
      {
        this[this.tableMinomatList.ChallengeKeyOldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSessionKeyOldNull() => this.IsNull(this.tableMinomatList.SessionKeyOldColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSessionKeyOldNull()
      {
        this[this.tableMinomatList.SessionKeyOldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsConnectionDateNull() => this.IsNull(this.tableMinomatList.ConnectionDateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetConnectionDateNull()
      {
        this[this.tableMinomatList.ConnectionDateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsConnectionLogNull() => this.IsNull(this.tableMinomatList.ConnectionLogColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetConnectionLogNull()
      {
        this[this.tableMinomatList.ConnectionLogColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGsmIDEncodedNull() => this.IsNull(this.tableMinomatList.GsmIDEncodedColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGsmIDEncodedNull()
      {
        this[this.tableMinomatList.GsmIDEncodedColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyEncodedNull()
      {
        return this.IsNull(this.tableMinomatList.ChallengeKeyEncodedColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyEncodedNull()
      {
        this[this.tableMinomatList.ChallengeKeyEncodedColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGsmIDEncodedOldNull()
      {
        return this.IsNull(this.tableMinomatList.GsmIDEncodedOldColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGsmIDEncodedOldNull()
      {
        this[this.tableMinomatList.GsmIDEncodedOldColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyEncodedOldNull()
      {
        return this.IsNull(this.tableMinomatList.ChallengeKeyEncodedOldColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyEncodedOldNull()
      {
        this[this.tableMinomatList.ChallengeKeyEncodedOldColumn] = Convert.DBNull;
      }
    }

    public class MinomatDataLogsRow : DataRow
    {
      private DriverTables.MinomatDataLogsDataTable tableMinomatDataLogs;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatDataLogsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMinomatDataLogs = (DriverTables.MinomatDataLogsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string MinomatDataLogID
      {
        get => (string) this[this.tableMinomatDataLogs.MinomatDataLogIDColumn];
        set => this[this.tableMinomatDataLogs.MinomatDataLogIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConnectionID
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatDataLogs.ConnectionIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ConnectionID' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.ConnectionIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TimePoint
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatDataLogs.TimePointColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TimePoint' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string RawData
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatDataLogs.RawDataColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RawData' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.RawDataColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChallengeKey
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatDataLogs.ChallengeKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChallengeKey' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.ChallengeKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SessionKey
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatDataLogs.SessionKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SessionKey' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.SessionKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIncoming
      {
        get
        {
          try
          {
            return (bool) this[this.tableMinomatDataLogs.IsIncomingColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'IsIncoming' in table 'MinomatDataLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatDataLogs.IsIncomingColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsConnectionIDNull() => this.IsNull(this.tableMinomatDataLogs.ConnectionIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetConnectionIDNull()
      {
        this[this.tableMinomatDataLogs.ConnectionIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTimePointNull() => this.IsNull(this.tableMinomatDataLogs.TimePointColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTimePointNull()
      {
        this[this.tableMinomatDataLogs.TimePointColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRawDataNull() => this.IsNull(this.tableMinomatDataLogs.RawDataColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRawDataNull()
      {
        this[this.tableMinomatDataLogs.RawDataColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChallengeKeyNull() => this.IsNull(this.tableMinomatDataLogs.ChallengeKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChallengeKeyNull()
      {
        this[this.tableMinomatDataLogs.ChallengeKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSessionKeyNull() => this.IsNull(this.tableMinomatDataLogs.SessionKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSessionKeyNull()
      {
        this[this.tableMinomatDataLogs.SessionKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIsIncomingNull() => this.IsNull(this.tableMinomatDataLogs.IsIncomingColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetIsIncomingNull()
      {
        this[this.tableMinomatDataLogs.IsIncomingColumn] = Convert.DBNull;
      }
    }

    public class MinomatConnectionLogsRow : DataRow
    {
      private DriverTables.MinomatConnectionLogsDataTable tableMinomatConnectionLogs;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal MinomatConnectionLogsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMinomatConnectionLogs = (DriverTables.MinomatConnectionLogsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ConnectionID
      {
        get => (string) this[this.tableMinomatConnectionLogs.ConnectionIDColumn];
        set => this[this.tableMinomatConnectionLogs.ConnectionIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TimePoint
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatConnectionLogs.TimePointColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TimePoint' in table 'MinomatConnectionLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatConnectionLogs.TimePointColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ClientIP
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatConnectionLogs.ClientIPColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ClientIP' in table 'MinomatConnectionLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatConnectionLogs.ClientIPColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string GsmID
      {
        get
        {
          try
          {
            return (string) this[this.tableMinomatConnectionLogs.GsmIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GsmID' in table 'MinomatConnectionLogs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMinomatConnectionLogs.GsmIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTimePointNull() => this.IsNull(this.tableMinomatConnectionLogs.TimePointColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTimePointNull()
      {
        this[this.tableMinomatConnectionLogs.TimePointColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsClientIPNull() => this.IsNull(this.tableMinomatConnectionLogs.ClientIPColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetClientIPNull()
      {
        this[this.tableMinomatConnectionLogs.ClientIPColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsGsmIDNull() => this.IsNull(this.tableMinomatConnectionLogs.GsmIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetGsmIDNull()
      {
        this[this.tableMinomatConnectionLogs.GsmIDColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterMSSRowChangeEvent : EventArgs
    {
      private DriverTables.MeterMSSRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterMSSRowChangeEvent(DriverTables.MeterMSSRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterMSSRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MeterValuesMSSRowChangeEvent : EventArgs
    {
      private DriverTables.MeterValuesMSSRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MeterValuesMSSRowChangeEvent(DriverTables.MeterValuesMSSRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MeterValuesMSSRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class ServiceTaskResultRowChangeEvent : EventArgs
    {
      private DriverTables.ServiceTaskResultRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public ServiceTaskResultRowChangeEvent(
        DriverTables.ServiceTaskResultRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.ServiceTaskResultRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MinomatListRowChangeEvent : EventArgs
    {
      private DriverTables.MinomatListRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatListRowChangeEvent(DriverTables.MinomatListRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatListRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MinomatDataLogsRowChangeEvent : EventArgs
    {
      private DriverTables.MinomatDataLogsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatDataLogsRowChangeEvent(
        DriverTables.MinomatDataLogsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatDataLogsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class MinomatConnectionLogsRowChangeEvent : EventArgs
    {
      private DriverTables.MinomatConnectionLogsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public MinomatConnectionLogsRowChangeEvent(
        DriverTables.MinomatConnectionLogsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DriverTables.MinomatConnectionLogsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}


--- HandlerTables.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DataSets.HandlerTables
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace GmmDbLib.DataSets
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("HandlerTables")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class HandlerTables : DataSet
  {
    private HandlerTables.SmartFunctionsDataTable tableSmartFunctions;
    private HandlerTables.ScenarioDefinitionDataTable tableScenarioDefinition;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public HandlerTables()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected HandlerTables(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (SmartFunctions)] != null)
            base.Tables.Add((DataTable) new HandlerTables.SmartFunctionsDataTable(dataSet.Tables[nameof (SmartFunctions)]));
          if (dataSet.Tables[nameof (ScenarioDefinition)] != null)
            base.Tables.Add((DataTable) new HandlerTables.ScenarioDefinitionDataTable(dataSet.Tables[nameof (ScenarioDefinition)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public HandlerTables.SmartFunctionsDataTable SmartFunctions => this.tableSmartFunctions;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public HandlerTables.ScenarioDefinitionDataTable ScenarioDefinition
    {
      get => this.tableScenarioDefinition;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public override DataSet Clone()
    {
      HandlerTables handlerTables = (HandlerTables) base.Clone();
      handlerTables.InitVars();
      handlerTables.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) handlerTables;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["SmartFunctions"] != null)
          base.Tables.Add((DataTable) new HandlerTables.SmartFunctionsDataTable(dataSet.Tables["SmartFunctions"]));
        if (dataSet.Tables["ScenarioDefinition"] != null)
          base.Tables.Add((DataTable) new HandlerTables.ScenarioDefinitionDataTable(dataSet.Tables["ScenarioDefinition"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableSmartFunctions = (HandlerTables.SmartFunctionsDataTable) base.Tables["SmartFunctions"];
      if (initTable && this.tableSmartFunctions != null)
        this.tableSmartFunctions.InitVars();
      this.tableScenarioDefinition = (HandlerTables.ScenarioDefinitionDataTable) base.Tables["ScenarioDefinition"];
      if (!initTable || this.tableScenarioDefinition == null)
        return;
      this.tableScenarioDefinition.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (HandlerTables);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/HandlerTables.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableSmartFunctions = new HandlerTables.SmartFunctionsDataTable();
      base.Tables.Add((DataTable) this.tableSmartFunctions);
      this.tableScenarioDefinition = new HandlerTables.ScenarioDefinitionDataTable();
      base.Tables.Add((DataTable) this.tableScenarioDefinition);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeSmartFunctions() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeScenarioDefinition() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      HandlerTables handlerTables = new HandlerTables();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = handlerTables.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = handlerTables.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void SmartFunctionsRowChangeEventHandler(
      object sender,
      HandlerTables.SmartFunctionsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void ScenarioDefinitionRowChangeEventHandler(
      object sender,
      HandlerTables.ScenarioDefinitionRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SmartFunctionsDataTable : TypedTableBase<HandlerTables.SmartFunctionsRow>
    {
      private DataColumn columnFunctionName;
      private DataColumn columnFunctionVersion;
      private DataColumn columnLoadOrder;
      private DataColumn columnInterpreterVersion;
      private DataColumn columnFunctionEvent;
      private DataColumn columnFunctionCode;
      private DataColumn columnFunctionDescription;
      private DataColumn columnRequiredFunctions;
      private DataColumn columnMemberOfGroups;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public SmartFunctionsDataTable()
      {
        this.TableName = "SmartFunctions";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal SmartFunctionsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected SmartFunctionsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FunctionNameColumn => this.columnFunctionName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FunctionVersionColumn => this.columnFunctionVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LoadOrderColumn => this.columnLoadOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn InterpreterVersionColumn => this.columnInterpreterVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FunctionEventColumn => this.columnFunctionEvent;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FunctionCodeColumn => this.columnFunctionCode;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FunctionDescriptionColumn => this.columnFunctionDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn RequiredFunctionsColumn => this.columnRequiredFunctions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MemberOfGroupsColumn => this.columnMemberOfGroups;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.SmartFunctionsRow this[int index]
      {
        get => (HandlerTables.SmartFunctionsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HandlerTables.SmartFunctionsRowChangeEventHandler SmartFunctionsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HandlerTables.SmartFunctionsRowChangeEventHandler SmartFunctionsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HandlerTables.SmartFunctionsRowChangeEventHandler SmartFunctionsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HandlerTables.SmartFunctionsRowChangeEventHandler SmartFunctionsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddSmartFunctionsRow(HandlerTables.SmartFunctionsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.SmartFunctionsRow AddSmartFunctionsRow(
        string FunctionName,
        byte FunctionVersion,
        short LoadOrder,
        byte InterpreterVersion,
        string FunctionEvent,
        byte[] FunctionCode,
        string FunctionDescription,
        string RequiredFunctions,
        string MemberOfGroups)
      {
        HandlerTables.SmartFunctionsRow row = (HandlerTables.SmartFunctionsRow) this.NewRow();
        object[] objArray = new object[9]
        {
          (object) FunctionName,
          (object) FunctionVersion,
          (object) LoadOrder,
          (object) InterpreterVersion,
          (object) FunctionEvent,
          (object) FunctionCode,
          (object) FunctionDescription,
          (object) RequiredFunctions,
          (object) MemberOfGroups
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.SmartFunctionsRow FindByFunctionNameFunctionVersion(
        string FunctionName,
        byte FunctionVersion)
      {
        return (HandlerTables.SmartFunctionsRow) this.Rows.Find(new object[2]
        {
          (object) FunctionName,
          (object) FunctionVersion
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        HandlerTables.SmartFunctionsDataTable functionsDataTable = (HandlerTables.SmartFunctionsDataTable) base.Clone();
        functionsDataTable.InitVars();
        return (DataTable) functionsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new HandlerTables.SmartFunctionsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnFunctionName = this.Columns["FunctionName"];
        this.columnFunctionVersion = this.Columns["FunctionVersion"];
        this.columnLoadOrder = this.Columns["LoadOrder"];
        this.columnInterpreterVersion = this.Columns["InterpreterVersion"];
        this.columnFunctionEvent = this.Columns["FunctionEvent"];
        this.columnFunctionCode = this.Columns["FunctionCode"];
        this.columnFunctionDescription = this.Columns["FunctionDescription"];
        this.columnRequiredFunctions = this.Columns["RequiredFunctions"];
        this.columnMemberOfGroups = this.Columns["MemberOfGroups"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnFunctionName = new DataColumn("FunctionName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionName);
        this.columnFunctionVersion = new DataColumn("FunctionVersion", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionVersion);
        this.columnLoadOrder = new DataColumn("LoadOrder", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoadOrder);
        this.columnInterpreterVersion = new DataColumn("InterpreterVersion", typeof (byte), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInterpreterVersion);
        this.columnFunctionEvent = new DataColumn("FunctionEvent", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionEvent);
        this.columnFunctionCode = new DataColumn("FunctionCode", typeof (byte[]), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionCode);
        this.columnFunctionDescription = new DataColumn("FunctionDescription", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFunctionDescription);
        this.columnRequiredFunctions = new DataColumn("RequiredFunctions", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRequiredFunctions);
        this.columnMemberOfGroups = new DataColumn("MemberOfGroups", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMemberOfGroups);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnFunctionName,
          this.columnFunctionVersion
        }, true));
        this.columnFunctionName.AllowDBNull = false;
        this.columnFunctionName.MaxLength = 64;
        this.columnFunctionVersion.AllowDBNull = false;
        this.columnLoadOrder.AllowDBNull = false;
        this.columnLoadOrder.DefaultValue = (object) (short) 0;
        this.columnFunctionEvent.MaxLength = 64;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.SmartFunctionsRow NewSmartFunctionsRow()
      {
        return (HandlerTables.SmartFunctionsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new HandlerTables.SmartFunctionsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (HandlerTables.SmartFunctionsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SmartFunctionsRowChanged == null)
          return;
        this.SmartFunctionsRowChanged((object) this, new HandlerTables.SmartFunctionsRowChangeEvent((HandlerTables.SmartFunctionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SmartFunctionsRowChanging == null)
          return;
        this.SmartFunctionsRowChanging((object) this, new HandlerTables.SmartFunctionsRowChangeEvent((HandlerTables.SmartFunctionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SmartFunctionsRowDeleted == null)
          return;
        this.SmartFunctionsRowDeleted((object) this, new HandlerTables.SmartFunctionsRowChangeEvent((HandlerTables.SmartFunctionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SmartFunctionsRowDeleting == null)
          return;
        this.SmartFunctionsRowDeleting((object) this, new HandlerTables.SmartFunctionsRowChangeEvent((HandlerTables.SmartFunctionsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveSmartFunctionsRow(HandlerTables.SmartFunctionsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        HandlerTables handlerTables = new HandlerTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = handlerTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SmartFunctionsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = handlerTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ScenarioDefinitionDataTable : TypedTableBase<HandlerTables.ScenarioDefinitionRow>
    {
      private DataColumn columnScenario;
      private DataColumn columnGroupNames;
      private DataColumn columnScenarioSource;
      private DataColumn columnLoadDefines;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public ScenarioDefinitionDataTable()
      {
        this.TableName = "ScenarioDefinition";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal ScenarioDefinitionDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected ScenarioDefinitionDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ScenarioColumn => this.columnScenario;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn GroupNamesColumn => this.columnGroupNames;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ScenarioSourceColumn => this.columnScenarioSource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LoadDefinesColumn => this.columnLoadDefines;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.ScenarioDefinitionRow this[int index]
      {
        get => (HandlerTables.ScenarioDefinitionRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HandlerTables.ScenarioDefinitionRowChangeEventHandler ScenarioDefinitionRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HandlerTables.ScenarioDefinitionRowChangeEventHandler ScenarioDefinitionRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HandlerTables.ScenarioDefinitionRowChangeEventHandler ScenarioDefinitionRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HandlerTables.ScenarioDefinitionRowChangeEventHandler ScenarioDefinitionRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddScenarioDefinitionRow(HandlerTables.ScenarioDefinitionRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.ScenarioDefinitionRow AddScenarioDefinitionRow(
        int Scenario,
        string GroupNames,
        string ScenarioSource,
        string LoadDefines)
      {
        HandlerTables.ScenarioDefinitionRow row = (HandlerTables.ScenarioDefinitionRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) Scenario,
          (object) GroupNames,
          (object) ScenarioSource,
          (object) LoadDefines
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.ScenarioDefinitionRow FindByScenario(int Scenario)
      {
        return (HandlerTables.ScenarioDefinitionRow) this.Rows.Find(new object[1]
        {
          (object) Scenario
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        HandlerTables.ScenarioDefinitionDataTable definitionDataTable = (HandlerTables.ScenarioDefinitionDataTable) base.Clone();
        definitionDataTable.InitVars();
        return (DataTable) definitionDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new HandlerTables.ScenarioDefinitionDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnScenario = this.Columns["Scenario"];
        this.columnGroupNames = this.Columns["GroupNames"];
        this.columnScenarioSource = this.Columns["ScenarioSource"];
        this.columnLoadDefines = this.Columns["LoadDefines"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnScenario = new DataColumn("Scenario", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnScenario);
        this.columnGroupNames = new DataColumn("GroupNames", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnGroupNames);
        this.columnScenarioSource = new DataColumn("ScenarioSource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnScenarioSource);
        this.columnLoadDefines = new DataColumn("LoadDefines", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLoadDefines);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnScenario
        }, true));
        this.columnScenario.AllowDBNull = false;
        this.columnScenario.Unique = true;
        this.columnGroupNames.MaxLength = (int) byte.MaxValue;
        this.columnScenarioSource.MaxLength = 536870910;
        this.columnLoadDefines.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.ScenarioDefinitionRow NewScenarioDefinitionRow()
      {
        return (HandlerTables.ScenarioDefinitionRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new HandlerTables.ScenarioDefinitionRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (HandlerTables.ScenarioDefinitionRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ScenarioDefinitionRowChanged == null)
          return;
        this.ScenarioDefinitionRowChanged((object) this, new HandlerTables.ScenarioDefinitionRowChangeEvent((HandlerTables.ScenarioDefinitionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ScenarioDefinitionRowChanging == null)
          return;
        this.ScenarioDefinitionRowChanging((object) this, new HandlerTables.ScenarioDefinitionRowChangeEvent((HandlerTables.ScenarioDefinitionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ScenarioDefinitionRowDeleted == null)
          return;
        this.ScenarioDefinitionRowDeleted((object) this, new HandlerTables.ScenarioDefinitionRowChangeEvent((HandlerTables.ScenarioDefinitionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ScenarioDefinitionRowDeleting == null)
          return;
        this.ScenarioDefinitionRowDeleting((object) this, new HandlerTables.ScenarioDefinitionRowChangeEvent((HandlerTables.ScenarioDefinitionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveScenarioDefinitionRow(HandlerTables.ScenarioDefinitionRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        HandlerTables handlerTables = new HandlerTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = handlerTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ScenarioDefinitionDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = handlerTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class SmartFunctionsRow : DataRow
    {
      private HandlerTables.SmartFunctionsDataTable tableSmartFunctions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal SmartFunctionsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSmartFunctions = (HandlerTables.SmartFunctionsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string FunctionName
      {
        get => (string) this[this.tableSmartFunctions.FunctionNameColumn];
        set => this[this.tableSmartFunctions.FunctionNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public byte FunctionVersion
      {
        get => (byte) this[this.tableSmartFunctions.FunctionVersionColumn];
        set => this[this.tableSmartFunctions.FunctionVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short LoadOrder
      {
        get => (short) this[this.tableSmartFunctions.LoadOrderColumn];
        set => this[this.tableSmartFunctions.LoadOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public byte InterpreterVersion
      {
        get
        {
          try
          {
            return (byte) this[this.tableSmartFunctions.InterpreterVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InterpreterVersion' in table 'SmartFunctions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSmartFunctions.InterpreterVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string FunctionEvent
      {
        get
        {
          try
          {
            return (string) this[this.tableSmartFunctions.FunctionEventColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FunctionEvent' in table 'SmartFunctions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSmartFunctions.FunctionEventColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public byte[] FunctionCode
      {
        get
        {
          try
          {
            return (byte[]) this[this.tableSmartFunctions.FunctionCodeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FunctionCode' in table 'SmartFunctions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSmartFunctions.FunctionCodeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string FunctionDescription
      {
        get
        {
          try
          {
            return (string) this[this.tableSmartFunctions.FunctionDescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FunctionDescription' in table 'SmartFunctions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSmartFunctions.FunctionDescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string RequiredFunctions
      {
        get
        {
          try
          {
            return (string) this[this.tableSmartFunctions.RequiredFunctionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RequiredFunctions' in table 'SmartFunctions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSmartFunctions.RequiredFunctionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string MemberOfGroups
      {
        get
        {
          try
          {
            return (string) this[this.tableSmartFunctions.MemberOfGroupsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MemberOfGroups' in table 'SmartFunctions' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSmartFunctions.MemberOfGroupsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsInterpreterVersionNull()
      {
        return this.IsNull(this.tableSmartFunctions.InterpreterVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetInterpreterVersionNull()
      {
        this[this.tableSmartFunctions.InterpreterVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFunctionEventNull()
      {
        return this.IsNull(this.tableSmartFunctions.FunctionEventColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFunctionEventNull()
      {
        this[this.tableSmartFunctions.FunctionEventColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFunctionCodeNull() => this.IsNull(this.tableSmartFunctions.FunctionCodeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFunctionCodeNull()
      {
        this[this.tableSmartFunctions.FunctionCodeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFunctionDescriptionNull()
      {
        return this.IsNull(this.tableSmartFunctions.FunctionDescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFunctionDescriptionNull()
      {
        this[this.tableSmartFunctions.FunctionDescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsRequiredFunctionsNull()
      {
        return this.IsNull(this.tableSmartFunctions.RequiredFunctionsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetRequiredFunctionsNull()
      {
        this[this.tableSmartFunctions.RequiredFunctionsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMemberOfGroupsNull()
      {
        return this.IsNull(this.tableSmartFunctions.MemberOfGroupsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMemberOfGroupsNull()
      {
        this[this.tableSmartFunctions.MemberOfGroupsColumn] = Convert.DBNull;
      }
    }

    public class ScenarioDefinitionRow : DataRow
    {
      private HandlerTables.ScenarioDefinitionDataTable tableScenarioDefinition;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal ScenarioDefinitionRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableScenarioDefinition = (HandlerTables.ScenarioDefinitionDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int Scenario
      {
        get => (int) this[this.tableScenarioDefinition.ScenarioColumn];
        set => this[this.tableScenarioDefinition.ScenarioColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string GroupNames
      {
        get
        {
          try
          {
            return (string) this[this.tableScenarioDefinition.GroupNamesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'GroupNames' in table 'ScenarioDefinition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableScenarioDefinition.GroupNamesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string ScenarioSource
      {
        get
        {
          try
          {
            return (string) this[this.tableScenarioDefinition.ScenarioSourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ScenarioSource' in table 'ScenarioDefinition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableScenarioDefinition.ScenarioSourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string LoadDefines
      {
        get
        {
          try
          {
            return (string) this[this.tableScenarioDefinition.LoadDefinesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LoadDefines' in table 'ScenarioDefinition' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableScenarioDefinition.LoadDefinesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsGroupNamesNull() => this.IsNull(this.tableScenarioDefinition.GroupNamesColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetGroupNamesNull()
      {
        this[this.tableScenarioDefinition.GroupNamesColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsScenarioSourceNull()
      {
        return this.IsNull(this.tableScenarioDefinition.ScenarioSourceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetScenarioSourceNull()
      {
        this[this.tableScenarioDefinition.ScenarioSourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsLoadDefinesNull()
      {
        return this.IsNull(this.tableScenarioDefinition.LoadDefinesColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetLoadDefinesNull()
      {
        this[this.tableScenarioDefinition.LoadDefinesColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class SmartFunctionsRowChangeEvent : EventArgs
    {
      private HandlerTables.SmartFunctionsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public SmartFunctionsRowChangeEvent(HandlerTables.SmartFunctionsRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.SmartFunctionsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class ScenarioDefinitionRowChangeEvent : EventArgs
    {
      private HandlerTables.ScenarioDefinitionRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public ScenarioDefinitionRowChangeEvent(
        HandlerTables.ScenarioDefinitionRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HandlerTables.ScenarioDefinitionRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}


--- HardwareTypeTables.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DataSets.HardwareTypeTables
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace GmmDbLib.DataSets
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("HardwareTypeTables")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class HardwareTypeTables : DataSet
  {
    private HardwareTypeTables.HardwareTypeDataTable tableHardwareType;
    private HardwareTypeTables.MapBaseDataTable tableMapBase;
    private HardwareTypeTables.ProgFilesDataTable tableProgFiles;
    private HardwareTypeTables.HardwareOverviewDataTable tableHardwareOverview;
    private HardwareTypeTables.HardwareAndFirmwareInfoDataTable tableHardwareAndFirmwareInfo;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public HardwareTypeTables()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected HardwareTypeTables(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (HardwareType)] != null)
            base.Tables.Add((DataTable) new HardwareTypeTables.HardwareTypeDataTable(dataSet.Tables[nameof (HardwareType)]));
          if (dataSet.Tables[nameof (MapBase)] != null)
            base.Tables.Add((DataTable) new HardwareTypeTables.MapBaseDataTable(dataSet.Tables[nameof (MapBase)]));
          if (dataSet.Tables[nameof (ProgFiles)] != null)
            base.Tables.Add((DataTable) new HardwareTypeTables.ProgFilesDataTable(dataSet.Tables[nameof (ProgFiles)]));
          if (dataSet.Tables[nameof (HardwareOverview)] != null)
            base.Tables.Add((DataTable) new HardwareTypeTables.HardwareOverviewDataTable(dataSet.Tables[nameof (HardwareOverview)]));
          if (dataSet.Tables[nameof (HardwareAndFirmwareInfo)] != null)
            base.Tables.Add((DataTable) new HardwareTypeTables.HardwareAndFirmwareInfoDataTable(dataSet.Tables[nameof (HardwareAndFirmwareInfo)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public HardwareTypeTables.HardwareTypeDataTable HardwareType => this.tableHardwareType;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public HardwareTypeTables.MapBaseDataTable MapBase => this.tableMapBase;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public HardwareTypeTables.ProgFilesDataTable ProgFiles => this.tableProgFiles;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public HardwareTypeTables.HardwareOverviewDataTable HardwareOverview
    {
      get => this.tableHardwareOverview;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public HardwareTypeTables.HardwareAndFirmwareInfoDataTable HardwareAndFirmwareInfo
    {
      get => this.tableHardwareAndFirmwareInfo;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public override DataSet Clone()
    {
      HardwareTypeTables hardwareTypeTables = (HardwareTypeTables) base.Clone();
      hardwareTypeTables.InitVars();
      hardwareTypeTables.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) hardwareTypeTables;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["HardwareType"] != null)
          base.Tables.Add((DataTable) new HardwareTypeTables.HardwareTypeDataTable(dataSet.Tables["HardwareType"]));
        if (dataSet.Tables["MapBase"] != null)
          base.Tables.Add((DataTable) new HardwareTypeTables.MapBaseDataTable(dataSet.Tables["MapBase"]));
        if (dataSet.Tables["ProgFiles"] != null)
          base.Tables.Add((DataTable) new HardwareTypeTables.ProgFilesDataTable(dataSet.Tables["ProgFiles"]));
        if (dataSet.Tables["HardwareOverview"] != null)
          base.Tables.Add((DataTable) new HardwareTypeTables.HardwareOverviewDataTable(dataSet.Tables["HardwareOverview"]));
        if (dataSet.Tables["HardwareAndFirmwareInfo"] != null)
          base.Tables.Add((DataTable) new HardwareTypeTables.HardwareAndFirmwareInfoDataTable(dataSet.Tables["HardwareAndFirmwareInfo"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableHardwareType = (HardwareTypeTables.HardwareTypeDataTable) base.Tables["HardwareType"];
      if (initTable && this.tableHardwareType != null)
        this.tableHardwareType.InitVars();
      this.tableMapBase = (HardwareTypeTables.MapBaseDataTable) base.Tables["MapBase"];
      if (initTable && this.tableMapBase != null)
        this.tableMapBase.InitVars();
      this.tableProgFiles = (HardwareTypeTables.ProgFilesDataTable) base.Tables["ProgFiles"];
      if (initTable && this.tableProgFiles != null)
        this.tableProgFiles.InitVars();
      this.tableHardwareOverview = (HardwareTypeTables.HardwareOverviewDataTable) base.Tables["HardwareOverview"];
      if (initTable && this.tableHardwareOverview != null)
        this.tableHardwareOverview.InitVars();
      this.tableHardwareAndFirmwareInfo = (HardwareTypeTables.HardwareAndFirmwareInfoDataTable) base.Tables["HardwareAndFirmwareInfo"];
      if (!initTable || this.tableHardwareAndFirmwareInfo == null)
        return;
      this.tableHardwareAndFirmwareInfo.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (HardwareTypeTables);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/HardwareTypeTables.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableHardwareType = new HardwareTypeTables.HardwareTypeDataTable();
      base.Tables.Add((DataTable) this.tableHardwareType);
      this.tableMapBase = new HardwareTypeTables.MapBaseDataTable();
      base.Tables.Add((DataTable) this.tableMapBase);
      this.tableProgFiles = new HardwareTypeTables.ProgFilesDataTable();
      base.Tables.Add((DataTable) this.tableProgFiles);
      this.tableHardwareOverview = new HardwareTypeTables.HardwareOverviewDataTable();
      base.Tables.Add((DataTable) this.tableHardwareOverview);
      this.tableHardwareAndFirmwareInfo = new HardwareTypeTables.HardwareAndFirmwareInfoDataTable();
      base.Tables.Add((DataTable) this.tableHardwareAndFirmwareInfo);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeHardwareType() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeMapBase() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeProgFiles() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeHardwareOverview() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private bool ShouldSerializeHardwareAndFirmwareInfo() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      HardwareTypeTables hardwareTypeTables = new HardwareTypeTables();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = hardwareTypeTables.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = hardwareTypeTables.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class HardwareAndFirmwareInfoDataTable : 
      TypedTableBase<HardwareTypeTables.HardwareAndFirmwareInfoRow>
    {
      private DataColumn columnHardwareVersion;
      private DataColumn columnFirmwareVersion;
      private DataColumn columnHardwareTypeID;
      private DataColumn columnHardwareName;
      private DataColumn columnHardwareResource;
      private DataColumn columnDescription;
      private DataColumn columnTestinfo;
      private DataColumn columnHardwareOptions;
      private DataColumn columnMapID;
      private DataColumn columnOptions;
      private DataColumn columnSourceInfo;
      private DataColumn columnReleasedName;
      private DataColumn columnCompatibleOverwriteGroups;
      private DataColumn columnReleaseComments;
      private DataColumn columnFirmwareDependencies;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareAndFirmwareInfoDataTable()
      {
        this.TableName = "HardwareAndFirmwareInfo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal HardwareAndFirmwareInfoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected HardwareAndFirmwareInfoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareVersionColumn => this.columnHardwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FirmwareVersionColumn => this.columnFirmwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareNameColumn => this.columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareResourceColumn => this.columnHardwareResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn TestinfoColumn => this.columnTestinfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareOptionsColumn => this.columnHardwareOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn OptionsColumn => this.columnOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn SourceInfoColumn => this.columnSourceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ReleasedNameColumn => this.columnReleasedName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn CompatibleOverwriteGroupsColumn => this.columnCompatibleOverwriteGroups;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ReleaseCommentsColumn => this.columnReleaseComments;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FirmwareDependenciesColumn => this.columnFirmwareDependencies;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareAndFirmwareInfoRow this[int index]
      {
        get => (HardwareTypeTables.HardwareAndFirmwareInfoRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareAndFirmwareInfoRowChangeEventHandler HardwareAndFirmwareInfoRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareAndFirmwareInfoRowChangeEventHandler HardwareAndFirmwareInfoRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareAndFirmwareInfoRowChangeEventHandler HardwareAndFirmwareInfoRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareAndFirmwareInfoRowChangeEventHandler HardwareAndFirmwareInfoRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddHardwareAndFirmwareInfoRow(HardwareTypeTables.HardwareAndFirmwareInfoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareAndFirmwareInfoRow AddHardwareAndFirmwareInfoRow(
        int HardwareVersion,
        int FirmwareVersion,
        int HardwareTypeID,
        string HardwareName,
        string HardwareResource,
        string Description,
        string Testinfo,
        string HardwareOptions,
        int MapID,
        string Options,
        string SourceInfo,
        string ReleasedName,
        string CompatibleOverwriteGroups,
        string ReleaseComments,
        string FirmwareDependencies)
      {
        HardwareTypeTables.HardwareAndFirmwareInfoRow row = (HardwareTypeTables.HardwareAndFirmwareInfoRow) this.NewRow();
        object[] objArray = new object[15]
        {
          (object) HardwareVersion,
          (object) FirmwareVersion,
          (object) HardwareTypeID,
          (object) HardwareName,
          (object) HardwareResource,
          (object) Description,
          (object) Testinfo,
          (object) HardwareOptions,
          (object) MapID,
          (object) Options,
          (object) SourceInfo,
          (object) ReleasedName,
          (object) CompatibleOverwriteGroups,
          (object) ReleaseComments,
          (object) FirmwareDependencies
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareAndFirmwareInfoRow FindByHardwareVersionFirmwareVersion(
        int HardwareVersion,
        int FirmwareVersion)
      {
        return (HardwareTypeTables.HardwareAndFirmwareInfoRow) this.Rows.Find(new object[2]
        {
          (object) HardwareVersion,
          (object) FirmwareVersion
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        HardwareTypeTables.HardwareAndFirmwareInfoDataTable firmwareInfoDataTable = (HardwareTypeTables.HardwareAndFirmwareInfoDataTable) base.Clone();
        firmwareInfoDataTable.InitVars();
        return (DataTable) firmwareInfoDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new HardwareTypeTables.HardwareAndFirmwareInfoDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnHardwareVersion = this.Columns["HardwareVersion"];
        this.columnFirmwareVersion = this.Columns["FirmwareVersion"];
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
        this.columnHardwareName = this.Columns["HardwareName"];
        this.columnHardwareResource = this.Columns["HardwareResource"];
        this.columnDescription = this.Columns["Description"];
        this.columnTestinfo = this.Columns["Testinfo"];
        this.columnHardwareOptions = this.Columns["HardwareOptions"];
        this.columnMapID = this.Columns["MapID"];
        this.columnOptions = this.Columns["Options"];
        this.columnSourceInfo = this.Columns["SourceInfo"];
        this.columnReleasedName = this.Columns["ReleasedName"];
        this.columnCompatibleOverwriteGroups = this.Columns["CompatibleOverwriteGroups"];
        this.columnReleaseComments = this.Columns["ReleaseComments"];
        this.columnFirmwareDependencies = this.Columns["FirmwareDependencies"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnHardwareVersion = new DataColumn("HardwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareVersion);
        this.columnFirmwareVersion = new DataColumn("FirmwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersion);
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.columnHardwareName = new DataColumn("HardwareName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareName);
        this.columnHardwareResource = new DataColumn("HardwareResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareResource);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnTestinfo = new DataColumn("Testinfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestinfo);
        this.columnHardwareOptions = new DataColumn("HardwareOptions", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareOptions);
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnOptions = new DataColumn("Options", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOptions);
        this.columnSourceInfo = new DataColumn("SourceInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSourceInfo);
        this.columnReleasedName = new DataColumn("ReleasedName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReleasedName);
        this.columnCompatibleOverwriteGroups = new DataColumn("CompatibleOverwriteGroups", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCompatibleOverwriteGroups);
        this.columnReleaseComments = new DataColumn("ReleaseComments", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReleaseComments);
        this.columnFirmwareDependencies = new DataColumn("FirmwareDependencies", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareDependencies);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnHardwareVersion,
          this.columnFirmwareVersion
        }, true));
        this.columnHardwareVersion.AllowDBNull = false;
        this.columnFirmwareVersion.AllowDBNull = false;
        this.columnHardwareTypeID.AllowDBNull = false;
        this.columnHardwareName.MaxLength = 50;
        this.columnHardwareResource.MaxLength = 536870910;
        this.columnDescription.MaxLength = 536870910;
        this.columnTestinfo.MaxLength = 536870910;
        this.columnHardwareOptions.MaxLength = (int) byte.MaxValue;
        this.columnMapID.AllowDBNull = false;
        this.columnOptions.MaxLength = (int) byte.MaxValue;
        this.columnSourceInfo.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareAndFirmwareInfoRow NewHardwareAndFirmwareInfoRow()
      {
        return (HardwareTypeTables.HardwareAndFirmwareInfoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new HardwareTypeTables.HardwareAndFirmwareInfoRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType()
      {
        return typeof (HardwareTypeTables.HardwareAndFirmwareInfoRow);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.HardwareAndFirmwareInfoRowChanged == null)
          return;
        this.HardwareAndFirmwareInfoRowChanged((object) this, new HardwareTypeTables.HardwareAndFirmwareInfoRowChangeEvent((HardwareTypeTables.HardwareAndFirmwareInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.HardwareAndFirmwareInfoRowChanging == null)
          return;
        this.HardwareAndFirmwareInfoRowChanging((object) this, new HardwareTypeTables.HardwareAndFirmwareInfoRowChangeEvent((HardwareTypeTables.HardwareAndFirmwareInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.HardwareAndFirmwareInfoRowDeleted == null)
          return;
        this.HardwareAndFirmwareInfoRowDeleted((object) this, new HardwareTypeTables.HardwareAndFirmwareInfoRowChangeEvent((HardwareTypeTables.HardwareAndFirmwareInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.HardwareAndFirmwareInfoRowDeleting == null)
          return;
        this.HardwareAndFirmwareInfoRowDeleting((object) this, new HardwareTypeTables.HardwareAndFirmwareInfoRowChangeEvent((HardwareTypeTables.HardwareAndFirmwareInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveHardwareAndFirmwareInfoRow(HardwareTypeTables.HardwareAndFirmwareInfoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        HardwareTypeTables hardwareTypeTables = new HardwareTypeTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = hardwareTypeTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (HardwareAndFirmwareInfoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = hardwareTypeTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class HardwareOverviewDataTable : TypedTableBase<HardwareTypeTables.HardwareOverviewRow>
    {
      private DataColumn columnHardwareName;
      private DataColumn columnHardwareTypeID;
      private DataColumn columnMapID;
      private DataColumn columnFirmwareVersion;
      private DataColumn columnHardwareVersion;
      private DataColumn columnHardwareResource;
      private DataColumn columnDescription;
      private DataColumn columnTestinfo;
      private DataColumn columnHardwareOptions;
      private DataColumn columnCompatibleFirmwares;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareOverviewDataTable()
      {
        this.TableName = "HardwareOverview";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal HardwareOverviewDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected HardwareOverviewDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareNameColumn => this.columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FirmwareVersionColumn => this.columnFirmwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareVersionColumn => this.columnHardwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareResourceColumn => this.columnHardwareResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn TestinfoColumn => this.columnTestinfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareOptionsColumn => this.columnHardwareOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn CompatibleFirmwaresColumn => this.columnCompatibleFirmwares;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareOverviewRow this[int index]
      {
        get => (HardwareTypeTables.HardwareOverviewRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareOverviewRowChangeEventHandler HardwareOverviewRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareOverviewRowChangeEventHandler HardwareOverviewRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareOverviewRowChangeEventHandler HardwareOverviewRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareOverviewRowChangeEventHandler HardwareOverviewRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddHardwareOverviewRow(HardwareTypeTables.HardwareOverviewRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareOverviewRow AddHardwareOverviewRow(
        string HardwareName,
        int HardwareTypeID,
        int MapID,
        string FirmwareVersion,
        string HardwareVersion,
        string HardwareResource,
        string Description,
        string Testinfo,
        string HardwareOptions,
        int CompatibleFirmwares)
      {
        HardwareTypeTables.HardwareOverviewRow row = (HardwareTypeTables.HardwareOverviewRow) this.NewRow();
        object[] objArray = new object[10]
        {
          (object) HardwareName,
          (object) HardwareTypeID,
          (object) MapID,
          (object) FirmwareVersion,
          (object) HardwareVersion,
          (object) HardwareResource,
          (object) Description,
          (object) Testinfo,
          (object) HardwareOptions,
          (object) CompatibleFirmwares
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        HardwareTypeTables.HardwareOverviewDataTable overviewDataTable = (HardwareTypeTables.HardwareOverviewDataTable) base.Clone();
        overviewDataTable.InitVars();
        return (DataTable) overviewDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new HardwareTypeTables.HardwareOverviewDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnHardwareName = this.Columns["HardwareName"];
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
        this.columnMapID = this.Columns["MapID"];
        this.columnFirmwareVersion = this.Columns["FirmwareVersion"];
        this.columnHardwareVersion = this.Columns["HardwareVersion"];
        this.columnHardwareResource = this.Columns["HardwareResource"];
        this.columnDescription = this.Columns["Description"];
        this.columnTestinfo = this.Columns["Testinfo"];
        this.columnHardwareOptions = this.Columns["HardwareOptions"];
        this.columnCompatibleFirmwares = this.Columns["CompatibleFirmwares"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnHardwareName = new DataColumn("HardwareName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareName);
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnFirmwareVersion = new DataColumn("FirmwareVersion", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersion);
        this.columnHardwareVersion = new DataColumn("HardwareVersion", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareVersion);
        this.columnHardwareResource = new DataColumn("HardwareResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareResource);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnTestinfo = new DataColumn("Testinfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestinfo);
        this.columnHardwareOptions = new DataColumn("HardwareOptions", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareOptions);
        this.columnCompatibleFirmwares = new DataColumn("CompatibleFirmwares", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCompatibleFirmwares);
        this.columnHardwareName.MaxLength = 50;
        this.columnHardwareTypeID.AllowDBNull = false;
        this.columnHardwareResource.MaxLength = 536870910;
        this.columnDescription.MaxLength = 536870910;
        this.columnTestinfo.MaxLength = 536870910;
        this.columnHardwareOptions.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareOverviewRow NewHardwareOverviewRow()
      {
        return (HardwareTypeTables.HardwareOverviewRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new HardwareTypeTables.HardwareOverviewRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (HardwareTypeTables.HardwareOverviewRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.HardwareOverviewRowChanged == null)
          return;
        this.HardwareOverviewRowChanged((object) this, new HardwareTypeTables.HardwareOverviewRowChangeEvent((HardwareTypeTables.HardwareOverviewRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.HardwareOverviewRowChanging == null)
          return;
        this.HardwareOverviewRowChanging((object) this, new HardwareTypeTables.HardwareOverviewRowChangeEvent((HardwareTypeTables.HardwareOverviewRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.HardwareOverviewRowDeleted == null)
          return;
        this.HardwareOverviewRowDeleted((object) this, new HardwareTypeTables.HardwareOverviewRowChangeEvent((HardwareTypeTables.HardwareOverviewRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.HardwareOverviewRowDeleting == null)
          return;
        this.HardwareOverviewRowDeleting((object) this, new HardwareTypeTables.HardwareOverviewRowChangeEvent((HardwareTypeTables.HardwareOverviewRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveHardwareOverviewRow(HardwareTypeTables.HardwareOverviewRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        HardwareTypeTables hardwareTypeTables = new HardwareTypeTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = hardwareTypeTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (HardwareOverviewDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = hardwareTypeTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void HardwareTypeRowChangeEventHandler(
      object sender,
      HardwareTypeTables.HardwareTypeRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void MapBaseRowChangeEventHandler(
      object sender,
      HardwareTypeTables.MapBaseRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void ProgFilesRowChangeEventHandler(
      object sender,
      HardwareTypeTables.ProgFilesRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void HardwareOverviewRowChangeEventHandler(
      object sender,
      HardwareTypeTables.HardwareOverviewRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public delegate void HardwareAndFirmwareInfoRowChangeEventHandler(
      object sender,
      HardwareTypeTables.HardwareAndFirmwareInfoRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class HardwareTypeDataTable : TypedTableBase<HardwareTypeTables.HardwareTypeRow>
    {
      private DataColumn columnHardwareTypeID;
      private DataColumn columnMapID;
      private DataColumn columnLinkerTableID;
      private DataColumn columnFirmwareVersion;
      private DataColumn columnHardwareName;
      private DataColumn columnHardwareVersion;
      private DataColumn columnHardwareResource;
      private DataColumn columnextEEPSize;
      private DataColumn columnmaxStackSize;
      private DataColumn columnRAMSize;
      private DataColumn columnRAMStartAdr;
      private DataColumn columnintEEPStartAdr;
      private DataColumn columnintEEPSize;
      private DataColumn columnDescription;
      private DataColumn columnTestinfo;
      private DataColumn columnHardwareOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeDataTable()
      {
        this.TableName = "HardwareType";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal HardwareTypeDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected HardwareTypeDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareTypeIDColumn => this.columnHardwareTypeID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn LinkerTableIDColumn => this.columnLinkerTableID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FirmwareVersionColumn => this.columnFirmwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareNameColumn => this.columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareVersionColumn => this.columnHardwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareResourceColumn => this.columnHardwareResource;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn extEEPSizeColumn => this.columnextEEPSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn maxStackSizeColumn => this.columnmaxStackSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn RAMSizeColumn => this.columnRAMSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn RAMStartAdrColumn => this.columnRAMStartAdr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn intEEPStartAdrColumn => this.columnintEEPStartAdr;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn intEEPSizeColumn => this.columnintEEPSize;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn TestinfoColumn => this.columnTestinfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareOptionsColumn => this.columnHardwareOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareTypeRow this[int index]
      {
        get => (HardwareTypeTables.HardwareTypeRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareTypeRowChangeEventHandler HardwareTypeRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareTypeRowChangeEventHandler HardwareTypeRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareTypeRowChangeEventHandler HardwareTypeRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.HardwareTypeRowChangeEventHandler HardwareTypeRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddHardwareTypeRow(HardwareTypeTables.HardwareTypeRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareTypeRow AddHardwareTypeRow(
        int HardwareTypeID,
        int MapID,
        int LinkerTableID,
        int FirmwareVersion,
        string HardwareName,
        int HardwareVersion,
        string HardwareResource,
        int extEEPSize,
        short maxStackSize,
        short RAMSize,
        short RAMStartAdr,
        short intEEPStartAdr,
        short intEEPSize,
        string Description,
        string Testinfo,
        string HardwareOptions)
      {
        HardwareTypeTables.HardwareTypeRow row = (HardwareTypeTables.HardwareTypeRow) this.NewRow();
        object[] objArray = new object[16]
        {
          (object) HardwareTypeID,
          (object) MapID,
          (object) LinkerTableID,
          (object) FirmwareVersion,
          (object) HardwareName,
          (object) HardwareVersion,
          (object) HardwareResource,
          (object) extEEPSize,
          (object) maxStackSize,
          (object) RAMSize,
          (object) RAMStartAdr,
          (object) intEEPStartAdr,
          (object) intEEPSize,
          (object) Description,
          (object) Testinfo,
          (object) HardwareOptions
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareTypeRow FindByHardwareTypeID(int HardwareTypeID)
      {
        return (HardwareTypeTables.HardwareTypeRow) this.Rows.Find(new object[1]
        {
          (object) HardwareTypeID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        HardwareTypeTables.HardwareTypeDataTable hardwareTypeDataTable = (HardwareTypeTables.HardwareTypeDataTable) base.Clone();
        hardwareTypeDataTable.InitVars();
        return (DataTable) hardwareTypeDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new HardwareTypeTables.HardwareTypeDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnHardwareTypeID = this.Columns["HardwareTypeID"];
        this.columnMapID = this.Columns["MapID"];
        this.columnLinkerTableID = this.Columns["LinkerTableID"];
        this.columnFirmwareVersion = this.Columns["FirmwareVersion"];
        this.columnHardwareName = this.Columns["HardwareName"];
        this.columnHardwareVersion = this.Columns["HardwareVersion"];
        this.columnHardwareResource = this.Columns["HardwareResource"];
        this.columnextEEPSize = this.Columns["extEEPSize"];
        this.columnmaxStackSize = this.Columns["maxStackSize"];
        this.columnRAMSize = this.Columns["RAMSize"];
        this.columnRAMStartAdr = this.Columns["RAMStartAdr"];
        this.columnintEEPStartAdr = this.Columns["intEEPStartAdr"];
        this.columnintEEPSize = this.Columns["intEEPSize"];
        this.columnDescription = this.Columns["Description"];
        this.columnTestinfo = this.Columns["Testinfo"];
        this.columnHardwareOptions = this.Columns["HardwareOptions"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnHardwareTypeID = new DataColumn("HardwareTypeID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeID);
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnLinkerTableID = new DataColumn("LinkerTableID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLinkerTableID);
        this.columnFirmwareVersion = new DataColumn("FirmwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersion);
        this.columnHardwareName = new DataColumn("HardwareName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareName);
        this.columnHardwareVersion = new DataColumn("HardwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareVersion);
        this.columnHardwareResource = new DataColumn("HardwareResource", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareResource);
        this.columnextEEPSize = new DataColumn("extEEPSize", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnextEEPSize);
        this.columnmaxStackSize = new DataColumn("maxStackSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnmaxStackSize);
        this.columnRAMSize = new DataColumn("RAMSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRAMSize);
        this.columnRAMStartAdr = new DataColumn("RAMStartAdr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRAMStartAdr);
        this.columnintEEPStartAdr = new DataColumn("intEEPStartAdr", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnintEEPStartAdr);
        this.columnintEEPSize = new DataColumn("intEEPSize", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnintEEPSize);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.columnTestinfo = new DataColumn("Testinfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTestinfo);
        this.columnHardwareOptions = new DataColumn("HardwareOptions", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareOptions);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnHardwareTypeID
        }, true));
        this.columnHardwareTypeID.AllowDBNull = false;
        this.columnHardwareTypeID.Unique = true;
        this.columnHardwareName.MaxLength = 50;
        this.columnHardwareResource.MaxLength = 536870910;
        this.columnDescription.MaxLength = 536870910;
        this.columnTestinfo.MaxLength = 536870910;
        this.columnHardwareOptions.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareTypeRow NewHardwareTypeRow()
      {
        return (HardwareTypeTables.HardwareTypeRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new HardwareTypeTables.HardwareTypeRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (HardwareTypeTables.HardwareTypeRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.HardwareTypeRowChanged == null)
          return;
        this.HardwareTypeRowChanged((object) this, new HardwareTypeTables.HardwareTypeRowChangeEvent((HardwareTypeTables.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.HardwareTypeRowChanging == null)
          return;
        this.HardwareTypeRowChanging((object) this, new HardwareTypeTables.HardwareTypeRowChangeEvent((HardwareTypeTables.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.HardwareTypeRowDeleted == null)
          return;
        this.HardwareTypeRowDeleted((object) this, new HardwareTypeTables.HardwareTypeRowChangeEvent((HardwareTypeTables.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.HardwareTypeRowDeleting == null)
          return;
        this.HardwareTypeRowDeleting((object) this, new HardwareTypeTables.HardwareTypeRowChangeEvent((HardwareTypeTables.HardwareTypeRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveHardwareTypeRow(HardwareTypeTables.HardwareTypeRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        HardwareTypeTables hardwareTypeTables = new HardwareTypeTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = hardwareTypeTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (HardwareTypeDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = hardwareTypeTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class MapBaseDataTable : TypedTableBase<HardwareTypeTables.MapBaseRow>
    {
      private DataColumn columnMapID;
      private DataColumn columnSystemName;
      private DataColumn columnSystemVersion;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MapBaseDataTable()
      {
        this.TableName = "MapBase";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MapBaseDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected MapBaseDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn SystemNameColumn => this.columnSystemName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn SystemVersionColumn => this.columnSystemVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.MapBaseRow this[int index]
      {
        get => (HardwareTypeTables.MapBaseRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.MapBaseRowChangeEventHandler MapBaseRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.MapBaseRowChangeEventHandler MapBaseRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.MapBaseRowChangeEventHandler MapBaseRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.MapBaseRowChangeEventHandler MapBaseRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddMapBaseRow(HardwareTypeTables.MapBaseRow row) => this.Rows.Add((DataRow) row);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.MapBaseRow AddMapBaseRow(
        short MapID,
        string SystemName,
        string SystemVersion,
        string Description)
      {
        HardwareTypeTables.MapBaseRow row = (HardwareTypeTables.MapBaseRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) MapID,
          (object) SystemName,
          (object) SystemVersion,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.MapBaseRow FindByMapID(short MapID)
      {
        return (HardwareTypeTables.MapBaseRow) this.Rows.Find(new object[1]
        {
          (object) MapID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        HardwareTypeTables.MapBaseDataTable mapBaseDataTable = (HardwareTypeTables.MapBaseDataTable) base.Clone();
        mapBaseDataTable.InitVars();
        return (DataTable) mapBaseDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new HardwareTypeTables.MapBaseDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnMapID = this.Columns["MapID"];
        this.columnSystemName = this.Columns["SystemName"];
        this.columnSystemVersion = this.Columns["SystemVersion"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnMapID = new DataColumn("MapID", typeof (short), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnSystemName = new DataColumn("SystemName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSystemName);
        this.columnSystemVersion = new DataColumn("SystemVersion", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSystemVersion);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMapID
        }, true));
        this.columnMapID.AllowDBNull = false;
        this.columnMapID.Unique = true;
        this.columnSystemName.MaxLength = 50;
        this.columnSystemVersion.MaxLength = 50;
        this.columnDescription.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.MapBaseRow NewMapBaseRow()
      {
        return (HardwareTypeTables.MapBaseRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new HardwareTypeTables.MapBaseRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (HardwareTypeTables.MapBaseRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.MapBaseRowChanged == null)
          return;
        this.MapBaseRowChanged((object) this, new HardwareTypeTables.MapBaseRowChangeEvent((HardwareTypeTables.MapBaseRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.MapBaseRowChanging == null)
          return;
        this.MapBaseRowChanging((object) this, new HardwareTypeTables.MapBaseRowChangeEvent((HardwareTypeTables.MapBaseRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.MapBaseRowDeleted == null)
          return;
        this.MapBaseRowDeleted((object) this, new HardwareTypeTables.MapBaseRowChangeEvent((HardwareTypeTables.MapBaseRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.MapBaseRowDeleting == null)
          return;
        this.MapBaseRowDeleting((object) this, new HardwareTypeTables.MapBaseRowChangeEvent((HardwareTypeTables.MapBaseRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveMapBaseRow(HardwareTypeTables.MapBaseRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        HardwareTypeTables hardwareTypeTables = new HardwareTypeTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = hardwareTypeTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (MapBaseDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = hardwareTypeTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class ProgFilesDataTable : TypedTableBase<HardwareTypeTables.ProgFilesRow>
    {
      private DataColumn columnMapID;
      private DataColumn columnProgFileName;
      private DataColumn columnOptions;
      private DataColumn columnHexText;
      private DataColumn columnSourceInfo;
      private DataColumn columnHardwareName;
      private DataColumn columnHardwareTypeMapID;
      private DataColumn columnFirmwareVersion;
      private DataColumn columnReleasedName;
      private DataColumn columnCompatibleOverwriteGroups;
      private DataColumn columnReleaseComments;
      private DataColumn columnFirmwareDependencies;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public ProgFilesDataTable()
      {
        this.TableName = "ProgFiles";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal ProgFilesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected ProgFilesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn MapIDColumn => this.columnMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ProgFileNameColumn => this.columnProgFileName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn OptionsColumn => this.columnOptions;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HexTextColumn => this.columnHexText;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn SourceInfoColumn => this.columnSourceInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareNameColumn => this.columnHardwareName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn HardwareTypeMapIDColumn => this.columnHardwareTypeMapID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FirmwareVersionColumn => this.columnFirmwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ReleasedNameColumn => this.columnReleasedName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn CompatibleOverwriteGroupsColumn => this.columnCompatibleOverwriteGroups;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn ReleaseCommentsColumn => this.columnReleaseComments;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataColumn FirmwareDependenciesColumn => this.columnFirmwareDependencies;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.ProgFilesRow this[int index]
      {
        get => (HardwareTypeTables.ProgFilesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.ProgFilesRowChangeEventHandler ProgFilesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.ProgFilesRowChangeEventHandler ProgFilesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.ProgFilesRowChangeEventHandler ProgFilesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public event HardwareTypeTables.ProgFilesRowChangeEventHandler ProgFilesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void AddProgFilesRow(HardwareTypeTables.ProgFilesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.ProgFilesRow AddProgFilesRow(
        int MapID,
        string ProgFileName,
        string Options,
        string HexText,
        string SourceInfo,
        string HardwareName,
        int HardwareTypeMapID,
        int FirmwareVersion,
        string ReleasedName,
        string CompatibleOverwriteGroups,
        string ReleaseComments,
        string FirmwareDependencies)
      {
        HardwareTypeTables.ProgFilesRow row = (HardwareTypeTables.ProgFilesRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) MapID,
          (object) ProgFileName,
          (object) Options,
          (object) HexText,
          (object) SourceInfo,
          (object) HardwareName,
          (object) HardwareTypeMapID,
          (object) FirmwareVersion,
          (object) ReleasedName,
          (object) CompatibleOverwriteGroups,
          (object) ReleaseComments,
          (object) FirmwareDependencies
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.ProgFilesRow FindByMapID(int MapID)
      {
        return (HardwareTypeTables.ProgFilesRow) this.Rows.Find(new object[1]
        {
          (object) MapID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public override DataTable Clone()
      {
        HardwareTypeTables.ProgFilesDataTable progFilesDataTable = (HardwareTypeTables.ProgFilesDataTable) base.Clone();
        progFilesDataTable.InitVars();
        return (DataTable) progFilesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new HardwareTypeTables.ProgFilesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal void InitVars()
      {
        this.columnMapID = this.Columns["MapID"];
        this.columnProgFileName = this.Columns["ProgFileName"];
        this.columnOptions = this.Columns["Options"];
        this.columnHexText = this.Columns["HexText"];
        this.columnSourceInfo = this.Columns["SourceInfo"];
        this.columnHardwareName = this.Columns["HardwareName"];
        this.columnHardwareTypeMapID = this.Columns["HardwareTypeMapID"];
        this.columnFirmwareVersion = this.Columns["FirmwareVersion"];
        this.columnReleasedName = this.Columns["ReleasedName"];
        this.columnCompatibleOverwriteGroups = this.Columns["CompatibleOverwriteGroups"];
        this.columnReleaseComments = this.Columns["ReleaseComments"];
        this.columnFirmwareDependencies = this.Columns["FirmwareDependencies"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      private void InitClass()
      {
        this.columnMapID = new DataColumn("MapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMapID);
        this.columnProgFileName = new DataColumn("ProgFileName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnProgFileName);
        this.columnOptions = new DataColumn("Options", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnOptions);
        this.columnHexText = new DataColumn("HexText", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHexText);
        this.columnSourceInfo = new DataColumn("SourceInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSourceInfo);
        this.columnHardwareName = new DataColumn("HardwareName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareName);
        this.columnHardwareTypeMapID = new DataColumn("HardwareTypeMapID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnHardwareTypeMapID);
        this.columnFirmwareVersion = new DataColumn("FirmwareVersion", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareVersion);
        this.columnReleasedName = new DataColumn("ReleasedName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReleasedName);
        this.columnCompatibleOverwriteGroups = new DataColumn("CompatibleOverwriteGroups", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCompatibleOverwriteGroups);
        this.columnReleaseComments = new DataColumn("ReleaseComments", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnReleaseComments);
        this.columnFirmwareDependencies = new DataColumn("FirmwareDependencies", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirmwareDependencies);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnMapID
        }, true));
        this.columnMapID.AllowDBNull = false;
        this.columnMapID.Unique = true;
        this.columnProgFileName.MaxLength = 50;
        this.columnOptions.MaxLength = (int) byte.MaxValue;
        this.columnHexText.MaxLength = 536870910;
        this.columnSourceInfo.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.ProgFilesRow NewProgFilesRow()
      {
        return (HardwareTypeTables.ProgFilesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new HardwareTypeTables.ProgFilesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override Type GetRowType() => typeof (HardwareTypeTables.ProgFilesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.ProgFilesRowChanged == null)
          return;
        this.ProgFilesRowChanged((object) this, new HardwareTypeTables.ProgFilesRowChangeEvent((HardwareTypeTables.ProgFilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.ProgFilesRowChanging == null)
          return;
        this.ProgFilesRowChanging((object) this, new HardwareTypeTables.ProgFilesRowChangeEvent((HardwareTypeTables.ProgFilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.ProgFilesRowDeleted == null)
          return;
        this.ProgFilesRowDeleted((object) this, new HardwareTypeTables.ProgFilesRowChangeEvent((HardwareTypeTables.ProgFilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.ProgFilesRowDeleting == null)
          return;
        this.ProgFilesRowDeleting((object) this, new HardwareTypeTables.ProgFilesRowChangeEvent((HardwareTypeTables.ProgFilesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void RemoveProgFilesRow(HardwareTypeTables.ProgFilesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        HardwareTypeTables hardwareTypeTables = new HardwareTypeTables();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = hardwareTypeTables.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (ProgFilesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = hardwareTypeTables.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class HardwareTypeRow : DataRow
    {
      private HardwareTypeTables.HardwareTypeDataTable tableHardwareType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal HardwareTypeRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableHardwareType = (HardwareTypeTables.HardwareTypeDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int HardwareTypeID
      {
        get => (int) this[this.tableHardwareType.HardwareTypeIDColumn];
        set => this[this.tableHardwareType.HardwareTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MapID
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.MapIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MapID' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int LinkerTableID
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.LinkerTableIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LinkerTableID' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.LinkerTableIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int FirmwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.FirmwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersion' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.FirmwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareName
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.HardwareNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareName' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int HardwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.HardwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareVersion' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareResource
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.HardwareResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareResource' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int extEEPSize
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareType.extEEPSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'extEEPSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.extEEPSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short maxStackSize
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.maxStackSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'maxStackSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.maxStackSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short RAMSize
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.RAMSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RAMSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.RAMSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short RAMStartAdr
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.RAMStartAdrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RAMStartAdr' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.RAMStartAdrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short intEEPStartAdr
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.intEEPStartAdrColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'intEEPStartAdr' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.intEEPStartAdrColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short intEEPSize
      {
        get
        {
          try
          {
            return (short) this[this.tableHardwareType.intEEPSizeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'intEEPSize' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.intEEPSizeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Testinfo
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.TestinfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Testinfo' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.TestinfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareOptions
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareType.HardwareOptionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareOptions' in table 'HardwareType' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareType.HardwareOptionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMapIDNull() => this.IsNull(this.tableHardwareType.MapIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMapIDNull() => this[this.tableHardwareType.MapIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsLinkerTableIDNull() => this.IsNull(this.tableHardwareType.LinkerTableIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetLinkerTableIDNull()
      {
        this[this.tableHardwareType.LinkerTableIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFirmwareVersionNull()
      {
        return this.IsNull(this.tableHardwareType.FirmwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFirmwareVersionNull()
      {
        this[this.tableHardwareType.FirmwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareNameNull() => this.IsNull(this.tableHardwareType.HardwareNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareNameNull()
      {
        this[this.tableHardwareType.HardwareNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareVersionNull()
      {
        return this.IsNull(this.tableHardwareType.HardwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareVersionNull()
      {
        this[this.tableHardwareType.HardwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareResourceNull()
      {
        return this.IsNull(this.tableHardwareType.HardwareResourceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareResourceNull()
      {
        this[this.tableHardwareType.HardwareResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsextEEPSizeNull() => this.IsNull(this.tableHardwareType.extEEPSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetextEEPSizeNull()
      {
        this[this.tableHardwareType.extEEPSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsmaxStackSizeNull() => this.IsNull(this.tableHardwareType.maxStackSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetmaxStackSizeNull()
      {
        this[this.tableHardwareType.maxStackSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsRAMSizeNull() => this.IsNull(this.tableHardwareType.RAMSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetRAMSizeNull() => this[this.tableHardwareType.RAMSizeColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsRAMStartAdrNull() => this.IsNull(this.tableHardwareType.RAMStartAdrColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetRAMStartAdrNull()
      {
        this[this.tableHardwareType.RAMStartAdrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsintEEPStartAdrNull()
      {
        return this.IsNull(this.tableHardwareType.intEEPStartAdrColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetintEEPStartAdrNull()
      {
        this[this.tableHardwareType.intEEPStartAdrColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsintEEPSizeNull() => this.IsNull(this.tableHardwareType.intEEPSizeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetintEEPSizeNull()
      {
        this[this.tableHardwareType.intEEPSizeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableHardwareType.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableHardwareType.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsTestinfoNull() => this.IsNull(this.tableHardwareType.TestinfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetTestinfoNull() => this[this.tableHardwareType.TestinfoColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareOptionsNull()
      {
        return this.IsNull(this.tableHardwareType.HardwareOptionsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareOptionsNull()
      {
        this[this.tableHardwareType.HardwareOptionsColumn] = Convert.DBNull;
      }
    }

    public class MapBaseRow : DataRow
    {
      private HardwareTypeTables.MapBaseDataTable tableMapBase;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal MapBaseRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableMapBase = (HardwareTypeTables.MapBaseDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public short MapID
      {
        get => (short) this[this.tableMapBase.MapIDColumn];
        set => this[this.tableMapBase.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string SystemName
      {
        get
        {
          try
          {
            return (string) this[this.tableMapBase.SystemNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SystemName' in table 'MapBase' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMapBase.SystemNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string SystemVersion
      {
        get
        {
          try
          {
            return (string) this[this.tableMapBase.SystemVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SystemVersion' in table 'MapBase' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMapBase.SystemVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableMapBase.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'MapBase' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableMapBase.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsSystemNameNull() => this.IsNull(this.tableMapBase.SystemNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetSystemNameNull() => this[this.tableMapBase.SystemNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsSystemVersionNull() => this.IsNull(this.tableMapBase.SystemVersionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetSystemVersionNull()
      {
        this[this.tableMapBase.SystemVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableMapBase.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableMapBase.DescriptionColumn] = Convert.DBNull;
      }
    }

    public class ProgFilesRow : DataRow
    {
      private HardwareTypeTables.ProgFilesDataTable tableProgFiles;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal ProgFilesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableProgFiles = (HardwareTypeTables.ProgFilesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MapID
      {
        get => (int) this[this.tableProgFiles.MapIDColumn];
        set => this[this.tableProgFiles.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string ProgFileName
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.ProgFileNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ProgFileName' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.ProgFileNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Options
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.OptionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Options' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.OptionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HexText
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.HexTextColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HexText' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.HexTextColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string SourceInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.SourceInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SourceInfo' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.SourceInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareName
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.HardwareNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareName' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.HardwareNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int HardwareTypeMapID
      {
        get
        {
          try
          {
            return (int) this[this.tableProgFiles.HardwareTypeMapIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareTypeMapID' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.HardwareTypeMapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int FirmwareVersion
      {
        get
        {
          try
          {
            return (int) this[this.tableProgFiles.FirmwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersion' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.FirmwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string ReleasedName
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.ReleasedNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ReleasedName' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.ReleasedNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string CompatibleOverwriteGroups
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.CompatibleOverwriteGroupsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CompatibleOverwriteGroups' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.CompatibleOverwriteGroupsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string ReleaseComments
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.ReleaseCommentsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ReleaseComments' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.ReleaseCommentsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string FirmwareDependencies
      {
        get
        {
          try
          {
            return (string) this[this.tableProgFiles.FirmwareDependenciesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareDependencies' in table 'ProgFiles' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableProgFiles.FirmwareDependenciesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsProgFileNameNull() => this.IsNull(this.tableProgFiles.ProgFileNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetProgFileNameNull()
      {
        this[this.tableProgFiles.ProgFileNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsOptionsNull() => this.IsNull(this.tableProgFiles.OptionsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetOptionsNull() => this[this.tableProgFiles.OptionsColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHexTextNull() => this.IsNull(this.tableProgFiles.HexTextColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHexTextNull() => this[this.tableProgFiles.HexTextColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsSourceInfoNull() => this.IsNull(this.tableProgFiles.SourceInfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetSourceInfoNull()
      {
        this[this.tableProgFiles.SourceInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareNameNull() => this.IsNull(this.tableProgFiles.HardwareNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareNameNull()
      {
        this[this.tableProgFiles.HardwareNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareTypeMapIDNull()
      {
        return this.IsNull(this.tableProgFiles.HardwareTypeMapIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareTypeMapIDNull()
      {
        this[this.tableProgFiles.HardwareTypeMapIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFirmwareVersionNull() => this.IsNull(this.tableProgFiles.FirmwareVersionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFirmwareVersionNull()
      {
        this[this.tableProgFiles.FirmwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsReleasedNameNull() => this.IsNull(this.tableProgFiles.ReleasedNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetReleasedNameNull()
      {
        this[this.tableProgFiles.ReleasedNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsCompatibleOverwriteGroupsNull()
      {
        return this.IsNull(this.tableProgFiles.CompatibleOverwriteGroupsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetCompatibleOverwriteGroupsNull()
      {
        this[this.tableProgFiles.CompatibleOverwriteGroupsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsReleaseCommentsNull() => this.IsNull(this.tableProgFiles.ReleaseCommentsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetReleaseCommentsNull()
      {
        this[this.tableProgFiles.ReleaseCommentsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFirmwareDependenciesNull()
      {
        return this.IsNull(this.tableProgFiles.FirmwareDependenciesColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFirmwareDependenciesNull()
      {
        this[this.tableProgFiles.FirmwareDependenciesColumn] = Convert.DBNull;
      }
    }

    public class HardwareOverviewRow : DataRow
    {
      private HardwareTypeTables.HardwareOverviewDataTable tableHardwareOverview;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal HardwareOverviewRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableHardwareOverview = (HardwareTypeTables.HardwareOverviewDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareName
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareOverview.HardwareNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareName' in table 'HardwareOverview' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareOverview.HardwareNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int HardwareTypeID
      {
        get => (int) this[this.tableHardwareOverview.HardwareTypeIDColumn];
        set => this[this.tableHardwareOverview.HardwareTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MapID
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareOverview.MapIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MapID' in table 'HardwareOverview' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareOverview.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string FirmwareVersion
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareOverview.FirmwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareVersion' in table 'HardwareOverview' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareOverview.FirmwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareVersion
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareOverview.HardwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareVersion' in table 'HardwareOverview' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareOverview.HardwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareResource
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareOverview.HardwareResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareResource' in table 'HardwareOverview' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareOverview.HardwareResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareOverview.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'HardwareOverview' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareOverview.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Testinfo
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareOverview.TestinfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Testinfo' in table 'HardwareOverview' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareOverview.TestinfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareOptions
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareOverview.HardwareOptionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareOptions' in table 'HardwareOverview' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareOverview.HardwareOptionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int CompatibleFirmwares
      {
        get
        {
          try
          {
            return (int) this[this.tableHardwareOverview.CompatibleFirmwaresColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CompatibleFirmwares' in table 'HardwareOverview' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareOverview.CompatibleFirmwaresColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareNameNull()
      {
        return this.IsNull(this.tableHardwareOverview.HardwareNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareNameNull()
      {
        this[this.tableHardwareOverview.HardwareNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsMapIDNull() => this.IsNull(this.tableHardwareOverview.MapIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetMapIDNull() => this[this.tableHardwareOverview.MapIDColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFirmwareVersionNull()
      {
        return this.IsNull(this.tableHardwareOverview.FirmwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFirmwareVersionNull()
      {
        this[this.tableHardwareOverview.FirmwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareVersionNull()
      {
        return this.IsNull(this.tableHardwareOverview.HardwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareVersionNull()
      {
        this[this.tableHardwareOverview.HardwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareResourceNull()
      {
        return this.IsNull(this.tableHardwareOverview.HardwareResourceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareResourceNull()
      {
        this[this.tableHardwareOverview.HardwareResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDescriptionNull() => this.IsNull(this.tableHardwareOverview.DescriptionColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableHardwareOverview.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsTestinfoNull() => this.IsNull(this.tableHardwareOverview.TestinfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetTestinfoNull()
      {
        this[this.tableHardwareOverview.TestinfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareOptionsNull()
      {
        return this.IsNull(this.tableHardwareOverview.HardwareOptionsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareOptionsNull()
      {
        this[this.tableHardwareOverview.HardwareOptionsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsCompatibleFirmwaresNull()
      {
        return this.IsNull(this.tableHardwareOverview.CompatibleFirmwaresColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetCompatibleFirmwaresNull()
      {
        this[this.tableHardwareOverview.CompatibleFirmwaresColumn] = Convert.DBNull;
      }
    }

    public class HardwareAndFirmwareInfoRow : DataRow
    {
      private HardwareTypeTables.HardwareAndFirmwareInfoDataTable tableHardwareAndFirmwareInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      internal HardwareAndFirmwareInfoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableHardwareAndFirmwareInfo = (HardwareTypeTables.HardwareAndFirmwareInfoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int HardwareVersion
      {
        get => (int) this[this.tableHardwareAndFirmwareInfo.HardwareVersionColumn];
        set => this[this.tableHardwareAndFirmwareInfo.HardwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int FirmwareVersion
      {
        get => (int) this[this.tableHardwareAndFirmwareInfo.FirmwareVersionColumn];
        set => this[this.tableHardwareAndFirmwareInfo.FirmwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int HardwareTypeID
      {
        get => (int) this[this.tableHardwareAndFirmwareInfo.HardwareTypeIDColumn];
        set => this[this.tableHardwareAndFirmwareInfo.HardwareTypeIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareName
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.HardwareNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareName' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.HardwareNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareResource
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.HardwareResourceColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareResource' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.HardwareResourceColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Testinfo
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.TestinfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Testinfo' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.TestinfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string HardwareOptions
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.HardwareOptionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'HardwareOptions' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.HardwareOptionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public int MapID
      {
        get => (int) this[this.tableHardwareAndFirmwareInfo.MapIDColumn];
        set => this[this.tableHardwareAndFirmwareInfo.MapIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string Options
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.OptionsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Options' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.OptionsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string SourceInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.SourceInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SourceInfo' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.SourceInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string ReleasedName
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.ReleasedNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ReleasedName' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.ReleasedNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string CompatibleOverwriteGroups
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.CompatibleOverwriteGroupsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CompatibleOverwriteGroups' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableHardwareAndFirmwareInfo.CompatibleOverwriteGroupsColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string ReleaseComments
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.ReleaseCommentsColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ReleaseComments' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.ReleaseCommentsColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public string FirmwareDependencies
      {
        get
        {
          try
          {
            return (string) this[this.tableHardwareAndFirmwareInfo.FirmwareDependenciesColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirmwareDependencies' in table 'HardwareAndFirmwareInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableHardwareAndFirmwareInfo.FirmwareDependenciesColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareNameNull()
      {
        return this.IsNull(this.tableHardwareAndFirmwareInfo.HardwareNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareNameNull()
      {
        this[this.tableHardwareAndFirmwareInfo.HardwareNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareResourceNull()
      {
        return this.IsNull(this.tableHardwareAndFirmwareInfo.HardwareResourceColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareResourceNull()
      {
        this[this.tableHardwareAndFirmwareInfo.HardwareResourceColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsDescriptionNull()
      {
        return this.IsNull(this.tableHardwareAndFirmwareInfo.DescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableHardwareAndFirmwareInfo.DescriptionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsTestinfoNull() => this.IsNull(this.tableHardwareAndFirmwareInfo.TestinfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetTestinfoNull()
      {
        this[this.tableHardwareAndFirmwareInfo.TestinfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsHardwareOptionsNull()
      {
        return this.IsNull(this.tableHardwareAndFirmwareInfo.HardwareOptionsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetHardwareOptionsNull()
      {
        this[this.tableHardwareAndFirmwareInfo.HardwareOptionsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsOptionsNull() => this.IsNull(this.tableHardwareAndFirmwareInfo.OptionsColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetOptionsNull()
      {
        this[this.tableHardwareAndFirmwareInfo.OptionsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsSourceInfoNull()
      {
        return this.IsNull(this.tableHardwareAndFirmwareInfo.SourceInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetSourceInfoNull()
      {
        this[this.tableHardwareAndFirmwareInfo.SourceInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsReleasedNameNull()
      {
        return this.IsNull(this.tableHardwareAndFirmwareInfo.ReleasedNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetReleasedNameNull()
      {
        this[this.tableHardwareAndFirmwareInfo.ReleasedNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsCompatibleOverwriteGroupsNull()
      {
        return this.IsNull(this.tableHardwareAndFirmwareInfo.CompatibleOverwriteGroupsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetCompatibleOverwriteGroupsNull()
      {
        this[this.tableHardwareAndFirmwareInfo.CompatibleOverwriteGroupsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsReleaseCommentsNull()
      {
        return this.IsNull(this.tableHardwareAndFirmwareInfo.ReleaseCommentsColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetReleaseCommentsNull()
      {
        this[this.tableHardwareAndFirmwareInfo.ReleaseCommentsColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public bool IsFirmwareDependenciesNull()
      {
        return this.IsNull(this.tableHardwareAndFirmwareInfo.FirmwareDependenciesColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public void SetFirmwareDependenciesNull()
      {
        this[this.tableHardwareAndFirmwareInfo.FirmwareDependenciesColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class HardwareTypeRowChangeEvent : EventArgs
    {
      private HardwareTypeTables.HardwareTypeRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeRowChangeEvent(
        HardwareTypeTables.HardwareTypeRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareTypeRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class MapBaseRowChangeEvent : EventArgs
    {
      private HardwareTypeTables.MapBaseRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public MapBaseRowChangeEvent(HardwareTypeTables.MapBaseRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.MapBaseRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class ProgFilesRowChangeEvent : EventArgs
    {
      private HardwareTypeTables.ProgFilesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public ProgFilesRowChangeEvent(HardwareTypeTables.ProgFilesRow row, DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.ProgFilesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class HardwareOverviewRowChangeEvent : EventArgs
    {
      private HardwareTypeTables.HardwareOverviewRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareOverviewRowChangeEvent(
        HardwareTypeTables.HardwareOverviewRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareOverviewRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
    public class HardwareAndFirmwareInfoRowChangeEvent : EventArgs
    {
      private HardwareTypeTables.HardwareAndFirmwareInfoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareAndFirmwareInfoRowChangeEvent(
        HardwareTypeTables.HardwareAndFirmwareInfoRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public HardwareTypeTables.HardwareAndFirmwareInfoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}


--- Synchronization.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DataSets.Synchronization
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace GmmDbLib.DataSets
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("Synchronization")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class Synchronization : DataSet
  {
    private Synchronization.SynchronizationJobsDataTable tableSynchronizationJobs;
    private Synchronization.SynchronizationTableInfoDataTable tableSynchronizationTableInfo;
    private Synchronization.SynchronizationJobTablesDataTable tableSynchronizationJobTables;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public Synchronization()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected Synchronization(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (SynchronizationJobs)] != null)
            base.Tables.Add((DataTable) new Synchronization.SynchronizationJobsDataTable(dataSet.Tables[nameof (SynchronizationJobs)]));
          if (dataSet.Tables[nameof (SynchronizationTableInfo)] != null)
            base.Tables.Add((DataTable) new Synchronization.SynchronizationTableInfoDataTable(dataSet.Tables[nameof (SynchronizationTableInfo)]));
          if (dataSet.Tables[nameof (SynchronizationJobTables)] != null)
            base.Tables.Add((DataTable) new Synchronization.SynchronizationJobTablesDataTable(dataSet.Tables[nameof (SynchronizationJobTables)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public Synchronization.SynchronizationJobsDataTable SynchronizationJobs
    {
      get => this.tableSynchronizationJobs;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public Synchronization.SynchronizationTableInfoDataTable SynchronizationTableInfo
    {
      get => this.tableSynchronizationTableInfo;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public Synchronization.SynchronizationJobTablesDataTable SynchronizationJobTables
    {
      get => this.tableSynchronizationJobTables;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public override DataSet Clone()
    {
      Synchronization synchronization = (Synchronization) base.Clone();
      synchronization.InitVars();
      synchronization.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) synchronization;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["SynchronizationJobs"] != null)
          base.Tables.Add((DataTable) new Synchronization.SynchronizationJobsDataTable(dataSet.Tables["SynchronizationJobs"]));
        if (dataSet.Tables["SynchronizationTableInfo"] != null)
          base.Tables.Add((DataTable) new Synchronization.SynchronizationTableInfoDataTable(dataSet.Tables["SynchronizationTableInfo"]));
        if (dataSet.Tables["SynchronizationJobTables"] != null)
          base.Tables.Add((DataTable) new Synchronization.SynchronizationJobTablesDataTable(dataSet.Tables["SynchronizationJobTables"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableSynchronizationJobs = (Synchronization.SynchronizationJobsDataTable) base.Tables["SynchronizationJobs"];
      if (initTable && this.tableSynchronizationJobs != null)
        this.tableSynchronizationJobs.InitVars();
      this.tableSynchronizationTableInfo = (Synchronization.SynchronizationTableInfoDataTable) base.Tables["SynchronizationTableInfo"];
      if (initTable && this.tableSynchronizationTableInfo != null)
        this.tableSynchronizationTableInfo.InitVars();
      this.tableSynchronizationJobTables = (Synchronization.SynchronizationJobTablesDataTable) base.Tables["SynchronizationJobTables"];
      if (!initTable || this.tableSynchronizationJobTables == null)
        return;
      this.tableSynchronizationJobTables.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (Synchronization);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/Synchronization.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableSynchronizationJobs = new Synchronization.SynchronizationJobsDataTable();
      base.Tables.Add((DataTable) this.tableSynchronizationJobs);
      this.tableSynchronizationTableInfo = new Synchronization.SynchronizationTableInfoDataTable();
      base.Tables.Add((DataTable) this.tableSynchronizationTableInfo);
      this.tableSynchronizationJobTables = new Synchronization.SynchronizationJobTablesDataTable();
      base.Tables.Add((DataTable) this.tableSynchronizationJobTables);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSynchronizationJobs() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSynchronizationTableInfo() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSynchronizationJobTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      Synchronization synchronization = new Synchronization();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = synchronization.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = synchronization.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SynchronizationJobsRowChangeEventHandler(
      object sender,
      Synchronization.SynchronizationJobsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SynchronizationTableInfoRowChangeEventHandler(
      object sender,
      Synchronization.SynchronizationTableInfoRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SynchronizationJobTablesRowChangeEventHandler(
      object sender,
      Synchronization.SynchronizationJobTablesRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SynchronizationJobsDataTable : 
      TypedTableBase<Synchronization.SynchronizationJobsRow>
    {
      private DataColumn columnSyncJobID;
      private DataColumn columnJobGroup;
      private DataColumn columnJobName;
      private DataColumn columnFirstStartTime;
      private DataColumn columnCycleTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SynchronizationJobsDataTable()
      {
        this.TableName = "SynchronizationJobs";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SynchronizationJobsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected SynchronizationJobsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SyncJobIDColumn => this.columnSyncJobID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn JobGroupColumn => this.columnJobGroup;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn JobNameColumn => this.columnJobName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn FirstStartTimeColumn => this.columnFirstStartTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CycleTimeColumn => this.columnCycleTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationJobsRow this[int index]
      {
        get => (Synchronization.SynchronizationJobsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationJobsRowChangeEventHandler SynchronizationJobsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationJobsRowChangeEventHandler SynchronizationJobsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationJobsRowChangeEventHandler SynchronizationJobsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationJobsRowChangeEventHandler SynchronizationJobsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddSynchronizationJobsRow(Synchronization.SynchronizationJobsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationJobsRow AddSynchronizationJobsRow(
        int SyncJobID,
        string JobGroup,
        string JobName,
        DateTime FirstStartTime,
        DateTime CycleTime)
      {
        Synchronization.SynchronizationJobsRow row = (Synchronization.SynchronizationJobsRow) this.NewRow();
        object[] objArray = new object[5]
        {
          (object) SyncJobID,
          (object) JobGroup,
          (object) JobName,
          (object) FirstStartTime,
          (object) CycleTime
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        Synchronization.SynchronizationJobsDataTable synchronizationJobsDataTable = (Synchronization.SynchronizationJobsDataTable) base.Clone();
        synchronizationJobsDataTable.InitVars();
        return (DataTable) synchronizationJobsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new Synchronization.SynchronizationJobsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnSyncJobID = this.Columns["SyncJobID"];
        this.columnJobGroup = this.Columns["JobGroup"];
        this.columnJobName = this.Columns["JobName"];
        this.columnFirstStartTime = this.Columns["FirstStartTime"];
        this.columnCycleTime = this.Columns["CycleTime"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnSyncJobID = new DataColumn("SyncJobID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSyncJobID);
        this.columnJobGroup = new DataColumn("JobGroup", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnJobGroup);
        this.columnJobName = new DataColumn("JobName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnJobName);
        this.columnFirstStartTime = new DataColumn("FirstStartTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnFirstStartTime);
        this.columnCycleTime = new DataColumn("CycleTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCycleTime);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnSyncJobID
        }, false));
        this.columnSyncJobID.Unique = true;
        this.columnJobGroup.MaxLength = (int) byte.MaxValue;
        this.columnJobName.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationJobsRow NewSynchronizationJobsRow()
      {
        return (Synchronization.SynchronizationJobsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new Synchronization.SynchronizationJobsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (Synchronization.SynchronizationJobsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SynchronizationJobsRowChanged == null)
          return;
        this.SynchronizationJobsRowChanged((object) this, new Synchronization.SynchronizationJobsRowChangeEvent((Synchronization.SynchronizationJobsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SynchronizationJobsRowChanging == null)
          return;
        this.SynchronizationJobsRowChanging((object) this, new Synchronization.SynchronizationJobsRowChangeEvent((Synchronization.SynchronizationJobsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SynchronizationJobsRowDeleted == null)
          return;
        this.SynchronizationJobsRowDeleted((object) this, new Synchronization.SynchronizationJobsRowChangeEvent((Synchronization.SynchronizationJobsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SynchronizationJobsRowDeleting == null)
          return;
        this.SynchronizationJobsRowDeleting((object) this, new Synchronization.SynchronizationJobsRowChangeEvent((Synchronization.SynchronizationJobsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveSynchronizationJobsRow(Synchronization.SynchronizationJobsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        Synchronization synchronization = new Synchronization();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = synchronization.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SynchronizationJobsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = synchronization.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SynchronizationTableInfoDataTable : 
      TypedTableBase<Synchronization.SynchronizationTableInfoRow>
    {
      private DataColumn columnTableName;
      private DataColumn columnTableUsing;
      private DataColumn columnID_Generation;
      private DataColumn columnIdColumnName;
      private DataColumn columnSyncType;
      private DataColumn columnRecordsNeverChanged;
      private DataColumn columnPartOfDatabaseSynchronisation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SynchronizationTableInfoDataTable()
      {
        this.TableName = "SynchronizationTableInfo";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SynchronizationTableInfoDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected SynchronizationTableInfoDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TableNameColumn => this.columnTableName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TableUsingColumn => this.columnTableUsing;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ID_GenerationColumn => this.columnID_Generation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn IdColumnNameColumn => this.columnIdColumnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SyncTypeColumn => this.columnSyncType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn RecordsNeverChangedColumn => this.columnRecordsNeverChanged;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PartOfDatabaseSynchronisationColumn
      {
        get => this.columnPartOfDatabaseSynchronisation;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationTableInfoRow this[int index]
      {
        get => (Synchronization.SynchronizationTableInfoRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationTableInfoRowChangeEventHandler SynchronizationTableInfoRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationTableInfoRowChangeEventHandler SynchronizationTableInfoRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationTableInfoRowChangeEventHandler SynchronizationTableInfoRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationTableInfoRowChangeEventHandler SynchronizationTableInfoRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddSynchronizationTableInfoRow(Synchronization.SynchronizationTableInfoRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationTableInfoRow AddSynchronizationTableInfoRow(
        string TableName,
        string TableUsing,
        string ID_Generation,
        string IdColumnName,
        string SyncType,
        bool RecordsNeverChanged,
        bool PartOfDatabaseSynchronisation)
      {
        Synchronization.SynchronizationTableInfoRow row = (Synchronization.SynchronizationTableInfoRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) TableName,
          (object) TableUsing,
          (object) ID_Generation,
          (object) IdColumnName,
          (object) SyncType,
          (object) RecordsNeverChanged,
          (object) PartOfDatabaseSynchronisation
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationTableInfoRow FindByTableName(string TableName)
      {
        return (Synchronization.SynchronizationTableInfoRow) this.Rows.Find(new object[1]
        {
          (object) TableName
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        Synchronization.SynchronizationTableInfoDataTable tableInfoDataTable = (Synchronization.SynchronizationTableInfoDataTable) base.Clone();
        tableInfoDataTable.InitVars();
        return (DataTable) tableInfoDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new Synchronization.SynchronizationTableInfoDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnTableName = this.Columns["TableName"];
        this.columnTableUsing = this.Columns["TableUsing"];
        this.columnID_Generation = this.Columns["ID_Generation"];
        this.columnIdColumnName = this.Columns["IdColumnName"];
        this.columnSyncType = this.Columns["SyncType"];
        this.columnRecordsNeverChanged = this.Columns["RecordsNeverChanged"];
        this.columnPartOfDatabaseSynchronisation = this.Columns["PartOfDatabaseSynchronisation"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnTableName = new DataColumn("TableName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTableName);
        this.columnTableUsing = new DataColumn("TableUsing", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTableUsing);
        this.columnID_Generation = new DataColumn("ID_Generation", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnID_Generation);
        this.columnIdColumnName = new DataColumn("IdColumnName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnIdColumnName);
        this.columnSyncType = new DataColumn("SyncType", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSyncType);
        this.columnRecordsNeverChanged = new DataColumn("RecordsNeverChanged", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnRecordsNeverChanged);
        this.columnPartOfDatabaseSynchronisation = new DataColumn("PartOfDatabaseSynchronisation", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPartOfDatabaseSynchronisation);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnTableName
        }, true));
        this.columnTableName.AllowDBNull = false;
        this.columnTableName.Unique = true;
        this.columnTableName.MaxLength = 50;
        this.columnTableUsing.MaxLength = 536870910;
        this.columnID_Generation.MaxLength = 536870910;
        this.columnIdColumnName.MaxLength = 50;
        this.columnSyncType.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationTableInfoRow NewSynchronizationTableInfoRow()
      {
        return (Synchronization.SynchronizationTableInfoRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new Synchronization.SynchronizationTableInfoRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (Synchronization.SynchronizationTableInfoRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SynchronizationTableInfoRowChanged == null)
          return;
        this.SynchronizationTableInfoRowChanged((object) this, new Synchronization.SynchronizationTableInfoRowChangeEvent((Synchronization.SynchronizationTableInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SynchronizationTableInfoRowChanging == null)
          return;
        this.SynchronizationTableInfoRowChanging((object) this, new Synchronization.SynchronizationTableInfoRowChangeEvent((Synchronization.SynchronizationTableInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SynchronizationTableInfoRowDeleted == null)
          return;
        this.SynchronizationTableInfoRowDeleted((object) this, new Synchronization.SynchronizationTableInfoRowChangeEvent((Synchronization.SynchronizationTableInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SynchronizationTableInfoRowDeleting == null)
          return;
        this.SynchronizationTableInfoRowDeleting((object) this, new Synchronization.SynchronizationTableInfoRowChangeEvent((Synchronization.SynchronizationTableInfoRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveSynchronizationTableInfoRow(Synchronization.SynchronizationTableInfoRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        Synchronization synchronization = new Synchronization();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = synchronization.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SynchronizationTableInfoDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = synchronization.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SynchronizationJobTablesDataTable : 
      TypedTableBase<Synchronization.SynchronizationJobTablesRow>
    {
      private DataColumn columnSyncJobID;
      private DataColumn columnTableOrder;
      private DataColumn columnTableName;
      private DataColumn columnSyncBack;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SynchronizationJobTablesDataTable()
      {
        this.TableName = "SynchronizationJobTables";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SynchronizationJobTablesDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected SynchronizationJobTablesDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SyncJobIDColumn => this.columnSyncJobID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TableOrderColumn => this.columnTableOrder;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn TableNameColumn => this.columnTableName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SyncBackColumn => this.columnSyncBack;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationJobTablesRow this[int index]
      {
        get => (Synchronization.SynchronizationJobTablesRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationJobTablesRowChangeEventHandler SynchronizationJobTablesRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationJobTablesRowChangeEventHandler SynchronizationJobTablesRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationJobTablesRowChangeEventHandler SynchronizationJobTablesRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event Synchronization.SynchronizationJobTablesRowChangeEventHandler SynchronizationJobTablesRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddSynchronizationJobTablesRow(Synchronization.SynchronizationJobTablesRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationJobTablesRow AddSynchronizationJobTablesRow(
        int SyncJobID,
        int TableOrder,
        string TableName,
        bool SyncBack)
      {
        Synchronization.SynchronizationJobTablesRow row = (Synchronization.SynchronizationJobTablesRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) SyncJobID,
          (object) TableOrder,
          (object) TableName,
          (object) SyncBack
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationJobTablesRow FindBySyncJobID(int SyncJobID)
      {
        return (Synchronization.SynchronizationJobTablesRow) this.Rows.Find(new object[1]
        {
          (object) SyncJobID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        Synchronization.SynchronizationJobTablesDataTable jobTablesDataTable = (Synchronization.SynchronizationJobTablesDataTable) base.Clone();
        jobTablesDataTable.InitVars();
        return (DataTable) jobTablesDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new Synchronization.SynchronizationJobTablesDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnSyncJobID = this.Columns["SyncJobID"];
        this.columnTableOrder = this.Columns["TableOrder"];
        this.columnTableName = this.Columns["TableName"];
        this.columnSyncBack = this.Columns["SyncBack"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnSyncJobID = new DataColumn("SyncJobID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSyncJobID);
        this.columnTableOrder = new DataColumn("TableOrder", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTableOrder);
        this.columnTableName = new DataColumn("TableName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnTableName);
        this.columnSyncBack = new DataColumn("SyncBack", typeof (bool), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSyncBack);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnSyncJobID
        }, true));
        this.columnSyncJobID.AllowDBNull = false;
        this.columnSyncJobID.Unique = true;
        this.columnTableName.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationJobTablesRow NewSynchronizationJobTablesRow()
      {
        return (Synchronization.SynchronizationJobTablesRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new Synchronization.SynchronizationJobTablesRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (Synchronization.SynchronizationJobTablesRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SynchronizationJobTablesRowChanged == null)
          return;
        this.SynchronizationJobTablesRowChanged((object) this, new Synchronization.SynchronizationJobTablesRowChangeEvent((Synchronization.SynchronizationJobTablesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SynchronizationJobTablesRowChanging == null)
          return;
        this.SynchronizationJobTablesRowChanging((object) this, new Synchronization.SynchronizationJobTablesRowChangeEvent((Synchronization.SynchronizationJobTablesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SynchronizationJobTablesRowDeleted == null)
          return;
        this.SynchronizationJobTablesRowDeleted((object) this, new Synchronization.SynchronizationJobTablesRowChangeEvent((Synchronization.SynchronizationJobTablesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SynchronizationJobTablesRowDeleting == null)
          return;
        this.SynchronizationJobTablesRowDeleting((object) this, new Synchronization.SynchronizationJobTablesRowChangeEvent((Synchronization.SynchronizationJobTablesRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveSynchronizationJobTablesRow(Synchronization.SynchronizationJobTablesRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        Synchronization synchronization = new Synchronization();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = synchronization.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SynchronizationJobTablesDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = synchronization.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class SynchronizationJobsRow : DataRow
    {
      private Synchronization.SynchronizationJobsDataTable tableSynchronizationJobs;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SynchronizationJobsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSynchronizationJobs = (Synchronization.SynchronizationJobsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int SyncJobID
      {
        get
        {
          try
          {
            return (int) this[this.tableSynchronizationJobs.SyncJobIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SyncJobID' in table 'SynchronizationJobs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationJobs.SyncJobIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string JobGroup
      {
        get
        {
          try
          {
            return (string) this[this.tableSynchronizationJobs.JobGroupColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'JobGroup' in table 'SynchronizationJobs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationJobs.JobGroupColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string JobName
      {
        get
        {
          try
          {
            return (string) this[this.tableSynchronizationJobs.JobNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'JobName' in table 'SynchronizationJobs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationJobs.JobNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime FirstStartTime
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableSynchronizationJobs.FirstStartTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'FirstStartTime' in table 'SynchronizationJobs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationJobs.FirstStartTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime CycleTime
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableSynchronizationJobs.CycleTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CycleTime' in table 'SynchronizationJobs' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationJobs.CycleTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSyncJobIDNull() => this.IsNull(this.tableSynchronizationJobs.SyncJobIDColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSyncJobIDNull()
      {
        this[this.tableSynchronizationJobs.SyncJobIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsJobGroupNull() => this.IsNull(this.tableSynchronizationJobs.JobGroupColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetJobGroupNull()
      {
        this[this.tableSynchronizationJobs.JobGroupColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsJobNameNull() => this.IsNull(this.tableSynchronizationJobs.JobNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetJobNameNull()
      {
        this[this.tableSynchronizationJobs.JobNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsFirstStartTimeNull()
      {
        return this.IsNull(this.tableSynchronizationJobs.FirstStartTimeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetFirstStartTimeNull()
      {
        this[this.tableSynchronizationJobs.FirstStartTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCycleTimeNull() => this.IsNull(this.tableSynchronizationJobs.CycleTimeColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCycleTimeNull()
      {
        this[this.tableSynchronizationJobs.CycleTimeColumn] = Convert.DBNull;
      }
    }

    public class SynchronizationTableInfoRow : DataRow
    {
      private Synchronization.SynchronizationTableInfoDataTable tableSynchronizationTableInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SynchronizationTableInfoRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSynchronizationTableInfo = (Synchronization.SynchronizationTableInfoDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TableName
      {
        get => (string) this[this.tableSynchronizationTableInfo.TableNameColumn];
        set => this[this.tableSynchronizationTableInfo.TableNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TableUsing
      {
        get
        {
          try
          {
            return (string) this[this.tableSynchronizationTableInfo.TableUsingColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TableUsing' in table 'SynchronizationTableInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationTableInfo.TableUsingColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ID_Generation
      {
        get
        {
          try
          {
            return (string) this[this.tableSynchronizationTableInfo.ID_GenerationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ID_Generation' in table 'SynchronizationTableInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationTableInfo.ID_GenerationColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string IdColumnName
      {
        get
        {
          try
          {
            return (string) this[this.tableSynchronizationTableInfo.IdColumnNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'IdColumnName' in table 'SynchronizationTableInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationTableInfo.IdColumnNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SyncType
      {
        get
        {
          try
          {
            return (string) this[this.tableSynchronizationTableInfo.SyncTypeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SyncType' in table 'SynchronizationTableInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationTableInfo.SyncTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool RecordsNeverChanged
      {
        get
        {
          try
          {
            return (bool) this[this.tableSynchronizationTableInfo.RecordsNeverChangedColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'RecordsNeverChanged' in table 'SynchronizationTableInfo' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationTableInfo.RecordsNeverChangedColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool PartOfDatabaseSynchronisation
      {
        get
        {
          try
          {
            return (bool) this[this.tableSynchronizationTableInfo.PartOfDatabaseSynchronisationColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PartOfDatabaseSynchronisation' in table 'SynchronizationTableInfo' is DBNull.", (Exception) ex);
          }
        }
        set
        {
          this[this.tableSynchronizationTableInfo.PartOfDatabaseSynchronisationColumn] = (object) value;
        }
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTableUsingNull()
      {
        return this.IsNull(this.tableSynchronizationTableInfo.TableUsingColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTableUsingNull()
      {
        this[this.tableSynchronizationTableInfo.TableUsingColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsID_GenerationNull()
      {
        return this.IsNull(this.tableSynchronizationTableInfo.ID_GenerationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetID_GenerationNull()
      {
        this[this.tableSynchronizationTableInfo.ID_GenerationColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsIdColumnNameNull()
      {
        return this.IsNull(this.tableSynchronizationTableInfo.IdColumnNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetIdColumnNameNull()
      {
        this[this.tableSynchronizationTableInfo.IdColumnNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSyncTypeNull()
      {
        return this.IsNull(this.tableSynchronizationTableInfo.SyncTypeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSyncTypeNull()
      {
        this[this.tableSynchronizationTableInfo.SyncTypeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsRecordsNeverChangedNull()
      {
        return this.IsNull(this.tableSynchronizationTableInfo.RecordsNeverChangedColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetRecordsNeverChangedNull()
      {
        this[this.tableSynchronizationTableInfo.RecordsNeverChangedColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPartOfDatabaseSynchronisationNull()
      {
        return this.IsNull(this.tableSynchronizationTableInfo.PartOfDatabaseSynchronisationColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPartOfDatabaseSynchronisationNull()
      {
        this[this.tableSynchronizationTableInfo.PartOfDatabaseSynchronisationColumn] = Convert.DBNull;
      }
    }

    public class SynchronizationJobTablesRow : DataRow
    {
      private Synchronization.SynchronizationJobTablesDataTable tableSynchronizationJobTables;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SynchronizationJobTablesRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSynchronizationJobTables = (Synchronization.SynchronizationJobTablesDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int SyncJobID
      {
        get => (int) this[this.tableSynchronizationJobTables.SyncJobIDColumn];
        set => this[this.tableSynchronizationJobTables.SyncJobIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int TableOrder
      {
        get
        {
          try
          {
            return (int) this[this.tableSynchronizationJobTables.TableOrderColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TableOrder' in table 'SynchronizationJobTables' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationJobTables.TableOrderColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string TableName
      {
        get
        {
          try
          {
            return (string) this[this.tableSynchronizationJobTables.TableNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'TableName' in table 'SynchronizationJobTables' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationJobTables.TableNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool SyncBack
      {
        get
        {
          try
          {
            return (bool) this[this.tableSynchronizationJobTables.SyncBackColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SyncBack' in table 'SynchronizationJobTables' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSynchronizationJobTables.SyncBackColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTableOrderNull()
      {
        return this.IsNull(this.tableSynchronizationJobTables.TableOrderColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTableOrderNull()
      {
        this[this.tableSynchronizationJobTables.TableOrderColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsTableNameNull()
      {
        return this.IsNull(this.tableSynchronizationJobTables.TableNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetTableNameNull()
      {
        this[this.tableSynchronizationJobTables.TableNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSyncBackNull()
      {
        return this.IsNull(this.tableSynchronizationJobTables.SyncBackColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSyncBackNull()
      {
        this[this.tableSynchronizationJobTables.SyncBackColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SynchronizationJobsRowChangeEvent : EventArgs
    {
      private Synchronization.SynchronizationJobsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SynchronizationJobsRowChangeEvent(
        Synchronization.SynchronizationJobsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationJobsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SynchronizationTableInfoRowChangeEvent : EventArgs
    {
      private Synchronization.SynchronizationTableInfoRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SynchronizationTableInfoRowChangeEvent(
        Synchronization.SynchronizationTableInfoRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationTableInfoRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SynchronizationJobTablesRowChangeEvent : EventArgs
    {
      private Synchronization.SynchronizationJobTablesRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SynchronizationJobTablesRowChangeEvent(
        Synchronization.SynchronizationJobTablesRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public Synchronization.SynchronizationJobTablesRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}


--- TestbenchesAndEquipment.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DataSets.TestbenchesAndEquipment
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

#nullable disable
namespace GmmDbLib.DataSets
{
  [DesignerCategory("code")]
  [ToolboxItem(true)]
  [XmlSchemaProvider("GetTypedDataSetSchema")]
  [XmlRoot("TestbenchesAndEquipment")]
  [HelpKeyword("vs.data.DataSet")]
  [Serializable]
  public class TestbenchesAndEquipment : DataSet
  {
    private TestbenchesAndEquipment.InstallationsDataTable tableInstallations;
    private TestbenchesAndEquipment.InstallationChangeLogDataTable tableInstallationChangeLog;
    private TestbenchesAndEquipment.EquipmentPartlistCreationDataTable tableEquipmentPartlistCreation;
    private TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable tableEquipmentTypeDescription;
    private TestbenchesAndEquipment.InstallationUsersDataTable tableInstallationUsers;
    private TestbenchesAndEquipment.SoftwareUsersDataTable tableSoftwareUsers;
    private TestbenchesAndEquipment.EquipmentChangeLogDataTable tableEquipmentChangeLog;
    private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public TestbenchesAndEquipment()
    {
      this.BeginInit();
      this.InitClass();
      CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += changeEventHandler;
      base.Relations.CollectionChanged += changeEventHandler;
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected TestbenchesAndEquipment(SerializationInfo info, StreamingContext context)
      : base(info, context, false)
    {
      if (this.IsBinarySerialized(info, context))
      {
        this.InitVars(false);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        this.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
      else
      {
        string s = (string) info.GetValue("XmlSchema", typeof (string));
        if (this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
        {
          DataSet dataSet = new DataSet();
          dataSet.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
          if (dataSet.Tables[nameof (Installations)] != null)
            base.Tables.Add((DataTable) new TestbenchesAndEquipment.InstallationsDataTable(dataSet.Tables[nameof (Installations)]));
          if (dataSet.Tables[nameof (InstallationChangeLog)] != null)
            base.Tables.Add((DataTable) new TestbenchesAndEquipment.InstallationChangeLogDataTable(dataSet.Tables[nameof (InstallationChangeLog)]));
          if (dataSet.Tables[nameof (EquipmentPartlistCreation)] != null)
            base.Tables.Add((DataTable) new TestbenchesAndEquipment.EquipmentPartlistCreationDataTable(dataSet.Tables[nameof (EquipmentPartlistCreation)]));
          if (dataSet.Tables[nameof (EquipmentTypeDescription)] != null)
            base.Tables.Add((DataTable) new TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable(dataSet.Tables[nameof (EquipmentTypeDescription)]));
          if (dataSet.Tables[nameof (InstallationUsers)] != null)
            base.Tables.Add((DataTable) new TestbenchesAndEquipment.InstallationUsersDataTable(dataSet.Tables[nameof (InstallationUsers)]));
          if (dataSet.Tables[nameof (SoftwareUsers)] != null)
            base.Tables.Add((DataTable) new TestbenchesAndEquipment.SoftwareUsersDataTable(dataSet.Tables[nameof (SoftwareUsers)]));
          if (dataSet.Tables[nameof (EquipmentChangeLog)] != null)
            base.Tables.Add((DataTable) new TestbenchesAndEquipment.EquipmentChangeLogDataTable(dataSet.Tables[nameof (EquipmentChangeLog)]));
          this.DataSetName = dataSet.DataSetName;
          this.Prefix = dataSet.Prefix;
          this.Namespace = dataSet.Namespace;
          this.Locale = dataSet.Locale;
          this.CaseSensitive = dataSet.CaseSensitive;
          this.EnforceConstraints = dataSet.EnforceConstraints;
          this.Merge(dataSet, false, MissingSchemaAction.Add);
          this.InitVars();
        }
        else
          this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)));
        this.GetSerializationData(info, context);
        CollectionChangeEventHandler changeEventHandler = new CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += changeEventHandler;
        this.Relations.CollectionChanged += changeEventHandler;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TestbenchesAndEquipment.InstallationsDataTable Installations => this.tableInstallations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TestbenchesAndEquipment.InstallationChangeLogDataTable InstallationChangeLog
    {
      get => this.tableInstallationChangeLog;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TestbenchesAndEquipment.EquipmentPartlistCreationDataTable EquipmentPartlistCreation
    {
      get => this.tableEquipmentPartlistCreation;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable EquipmentTypeDescription
    {
      get => this.tableEquipmentTypeDescription;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TestbenchesAndEquipment.InstallationUsersDataTable InstallationUsers
    {
      get => this.tableInstallationUsers;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TestbenchesAndEquipment.SoftwareUsersDataTable SoftwareUsers => this.tableSoftwareUsers;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
    public TestbenchesAndEquipment.EquipmentChangeLogDataTable EquipmentChangeLog
    {
      get => this.tableEquipmentChangeLog;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [Browsable(true)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
    public override SchemaSerializationMode SchemaSerializationMode
    {
      get => this._schemaSerializationMode;
      set => this._schemaSerializationMode = value;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataTableCollection Tables => base.Tables;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    public new DataRelationCollection Relations => base.Relations;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void InitializeDerivedDataSet()
    {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public override DataSet Clone()
    {
      TestbenchesAndEquipment testbenchesAndEquipment = (TestbenchesAndEquipment) base.Clone();
      testbenchesAndEquipment.InitVars();
      testbenchesAndEquipment.SchemaSerializationMode = this.SchemaSerializationMode;
      return (DataSet) testbenchesAndEquipment;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeTables() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override bool ShouldSerializeRelations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override void ReadXmlSerializable(XmlReader reader)
    {
      if (this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
      {
        this.Reset();
        DataSet dataSet = new DataSet();
        int num = (int) dataSet.ReadXml(reader);
        if (dataSet.Tables["Installations"] != null)
          base.Tables.Add((DataTable) new TestbenchesAndEquipment.InstallationsDataTable(dataSet.Tables["Installations"]));
        if (dataSet.Tables["InstallationChangeLog"] != null)
          base.Tables.Add((DataTable) new TestbenchesAndEquipment.InstallationChangeLogDataTable(dataSet.Tables["InstallationChangeLog"]));
        if (dataSet.Tables["EquipmentPartlistCreation"] != null)
          base.Tables.Add((DataTable) new TestbenchesAndEquipment.EquipmentPartlistCreationDataTable(dataSet.Tables["EquipmentPartlistCreation"]));
        if (dataSet.Tables["EquipmentTypeDescription"] != null)
          base.Tables.Add((DataTable) new TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable(dataSet.Tables["EquipmentTypeDescription"]));
        if (dataSet.Tables["InstallationUsers"] != null)
          base.Tables.Add((DataTable) new TestbenchesAndEquipment.InstallationUsersDataTable(dataSet.Tables["InstallationUsers"]));
        if (dataSet.Tables["SoftwareUsers"] != null)
          base.Tables.Add((DataTable) new TestbenchesAndEquipment.SoftwareUsersDataTable(dataSet.Tables["SoftwareUsers"]));
        if (dataSet.Tables["EquipmentChangeLog"] != null)
          base.Tables.Add((DataTable) new TestbenchesAndEquipment.EquipmentChangeLogDataTable(dataSet.Tables["EquipmentChangeLog"]));
        this.DataSetName = dataSet.DataSetName;
        this.Prefix = dataSet.Prefix;
        this.Namespace = dataSet.Namespace;
        this.Locale = dataSet.Locale;
        this.CaseSensitive = dataSet.CaseSensitive;
        this.EnforceConstraints = dataSet.EnforceConstraints;
        this.Merge(dataSet, false, MissingSchemaAction.Add);
        this.InitVars();
      }
      else
      {
        int num = (int) this.ReadXml(reader);
        this.InitVars();
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    protected override XmlSchema GetSchemaSerializable()
    {
      MemoryStream memoryStream = new MemoryStream();
      this.WriteXmlSchema((XmlWriter) new XmlTextWriter((Stream) memoryStream, (Encoding) null));
      memoryStream.Position = 0L;
      return XmlSchema.Read((XmlReader) new XmlTextReader((Stream) memoryStream), (ValidationEventHandler) null);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars() => this.InitVars(true);

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    internal void InitVars(bool initTable)
    {
      this.tableInstallations = (TestbenchesAndEquipment.InstallationsDataTable) base.Tables["Installations"];
      if (initTable && this.tableInstallations != null)
        this.tableInstallations.InitVars();
      this.tableInstallationChangeLog = (TestbenchesAndEquipment.InstallationChangeLogDataTable) base.Tables["InstallationChangeLog"];
      if (initTable && this.tableInstallationChangeLog != null)
        this.tableInstallationChangeLog.InitVars();
      this.tableEquipmentPartlistCreation = (TestbenchesAndEquipment.EquipmentPartlistCreationDataTable) base.Tables["EquipmentPartlistCreation"];
      if (initTable && this.tableEquipmentPartlistCreation != null)
        this.tableEquipmentPartlistCreation.InitVars();
      this.tableEquipmentTypeDescription = (TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable) base.Tables["EquipmentTypeDescription"];
      if (initTable && this.tableEquipmentTypeDescription != null)
        this.tableEquipmentTypeDescription.InitVars();
      this.tableInstallationUsers = (TestbenchesAndEquipment.InstallationUsersDataTable) base.Tables["InstallationUsers"];
      if (initTable && this.tableInstallationUsers != null)
        this.tableInstallationUsers.InitVars();
      this.tableSoftwareUsers = (TestbenchesAndEquipment.SoftwareUsersDataTable) base.Tables["SoftwareUsers"];
      if (initTable && this.tableSoftwareUsers != null)
        this.tableSoftwareUsers.InitVars();
      this.tableEquipmentChangeLog = (TestbenchesAndEquipment.EquipmentChangeLogDataTable) base.Tables["EquipmentChangeLog"];
      if (!initTable || this.tableEquipmentChangeLog == null)
        return;
      this.tableEquipmentChangeLog.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void InitClass()
    {
      this.DataSetName = nameof (TestbenchesAndEquipment);
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/TestbenchesAndEquipment.xsd";
      this.EnforceConstraints = true;
      this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
      this.tableInstallations = new TestbenchesAndEquipment.InstallationsDataTable();
      base.Tables.Add((DataTable) this.tableInstallations);
      this.tableInstallationChangeLog = new TestbenchesAndEquipment.InstallationChangeLogDataTable();
      base.Tables.Add((DataTable) this.tableInstallationChangeLog);
      this.tableEquipmentPartlistCreation = new TestbenchesAndEquipment.EquipmentPartlistCreationDataTable();
      base.Tables.Add((DataTable) this.tableEquipmentPartlistCreation);
      this.tableEquipmentTypeDescription = new TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable();
      base.Tables.Add((DataTable) this.tableEquipmentTypeDescription);
      this.tableInstallationUsers = new TestbenchesAndEquipment.InstallationUsersDataTable();
      base.Tables.Add((DataTable) this.tableInstallationUsers);
      this.tableSoftwareUsers = new TestbenchesAndEquipment.SoftwareUsersDataTable();
      base.Tables.Add((DataTable) this.tableSoftwareUsers);
      this.tableEquipmentChangeLog = new TestbenchesAndEquipment.EquipmentChangeLogDataTable();
      base.Tables.Add((DataTable) this.tableEquipmentChangeLog);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeInstallations() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeInstallationChangeLog() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeEquipmentPartlistCreation() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeEquipmentTypeDescription() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeInstallationUsers() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeSoftwareUsers() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private bool ShouldSerializeEquipmentChangeLog() => false;

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    private void SchemaChanged(object sender, CollectionChangeEventArgs e)
    {
      if (e.Action != CollectionChangeAction.Remove)
        return;
      this.InitVars();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
    {
      TestbenchesAndEquipment testbenchesAndEquipment = new TestbenchesAndEquipment();
      XmlSchemaComplexType typedDataSetSchema = new XmlSchemaComplexType();
      XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
      xmlSchemaSequence.Items.Add((XmlSchemaObject) new XmlSchemaAny()
      {
        Namespace = testbenchesAndEquipment.Namespace
      });
      typedDataSetSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
      XmlSchema schemaSerializable = testbenchesAndEquipment.GetSchemaSerializable();
      if (xs.Contains(schemaSerializable.TargetNamespace))
      {
        MemoryStream memoryStream1 = new MemoryStream();
        MemoryStream memoryStream2 = new MemoryStream();
        try
        {
          schemaSerializable.Write((Stream) memoryStream1);
          IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
          while (enumerator.MoveNext())
          {
            XmlSchema current = (XmlSchema) enumerator.Current;
            memoryStream2.SetLength(0L);
            current.Write((Stream) memoryStream2);
            if (memoryStream1.Length == memoryStream2.Length)
            {
              memoryStream1.Position = 0L;
              memoryStream2.Position = 0L;
              do
                ;
              while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
              if (memoryStream1.Position == memoryStream1.Length)
                return typedDataSetSchema;
            }
          }
        }
        finally
        {
          memoryStream1?.Close();
          memoryStream2?.Close();
        }
      }
      xs.Add(schemaSerializable);
      return typedDataSetSchema;
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class EquipmentChangeLogDataTable : 
      TypedTableBase<TestbenchesAndEquipment.EquipmentChangeLogRow>
    {
      private DataColumn columnInstallationId;
      private DataColumn columnChangeTime;
      private DataColumn columnPcName;
      private DataColumn columnInstallationPath;
      private DataColumn columnSoftwareVersion;
      private DataColumn columnLicenseName;
      private DataColumn columnLicenseCustomer;
      private DataColumn columnLicenseGeneratorID;
      private DataColumn columnLicenseGenerationTime;
      private DataColumn columnBasicState;
      private DataColumn columnState1;
      private DataColumn columnState2;
      private DataColumn columnChangeInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentChangeLogDataTable()
      {
        this.TableName = "EquipmentChangeLog";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentChangeLogDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected EquipmentChangeLogDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationIdColumn => this.columnInstallationId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeTimeColumn => this.columnChangeTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PcNameColumn => this.columnPcName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationPathColumn => this.columnInstallationPath;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SoftwareVersionColumn => this.columnSoftwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseNameColumn => this.columnLicenseName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseCustomerColumn => this.columnLicenseCustomer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseGeneratorIDColumn => this.columnLicenseGeneratorID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseGenerationTimeColumn => this.columnLicenseGenerationTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BasicStateColumn => this.columnBasicState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn State1Column => this.columnState1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn State2Column => this.columnState2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeInfoColumn => this.columnChangeInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentChangeLogRow this[int index]
      {
        get => (TestbenchesAndEquipment.EquipmentChangeLogRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentChangeLogRowChangeEventHandler EquipmentChangeLogRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentChangeLogRowChangeEventHandler EquipmentChangeLogRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentChangeLogRowChangeEventHandler EquipmentChangeLogRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentChangeLogRowChangeEventHandler EquipmentChangeLogRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddEquipmentChangeLogRow(TestbenchesAndEquipment.EquipmentChangeLogRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentChangeLogRow AddEquipmentChangeLogRow(
        int InstallationId,
        DateTime ChangeTime,
        string PcName,
        string InstallationPath,
        string SoftwareVersion,
        string LicenseName,
        string LicenseCustomer,
        int LicenseGeneratorID,
        DateTime LicenseGenerationTime,
        string BasicState,
        string State1,
        string State2,
        string ChangeInfo)
      {
        TestbenchesAndEquipment.EquipmentChangeLogRow row = (TestbenchesAndEquipment.EquipmentChangeLogRow) this.NewRow();
        object[] objArray = new object[13]
        {
          (object) InstallationId,
          (object) ChangeTime,
          (object) PcName,
          (object) InstallationPath,
          (object) SoftwareVersion,
          (object) LicenseName,
          (object) LicenseCustomer,
          (object) LicenseGeneratorID,
          (object) LicenseGenerationTime,
          (object) BasicState,
          (object) State1,
          (object) State2,
          (object) ChangeInfo
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentChangeLogRow FindByInstallationIdChangeTime(
        int InstallationId,
        DateTime ChangeTime)
      {
        return (TestbenchesAndEquipment.EquipmentChangeLogRow) this.Rows.Find(new object[2]
        {
          (object) InstallationId,
          (object) ChangeTime
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        TestbenchesAndEquipment.EquipmentChangeLogDataTable changeLogDataTable = (TestbenchesAndEquipment.EquipmentChangeLogDataTable) base.Clone();
        changeLogDataTable.InitVars();
        return (DataTable) changeLogDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TestbenchesAndEquipment.EquipmentChangeLogDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnInstallationId = this.Columns["InstallationId"];
        this.columnChangeTime = this.Columns["ChangeTime"];
        this.columnPcName = this.Columns["PcName"];
        this.columnInstallationPath = this.Columns["InstallationPath"];
        this.columnSoftwareVersion = this.Columns["SoftwareVersion"];
        this.columnLicenseName = this.Columns["LicenseName"];
        this.columnLicenseCustomer = this.Columns["LicenseCustomer"];
        this.columnLicenseGeneratorID = this.Columns["LicenseGeneratorID"];
        this.columnLicenseGenerationTime = this.Columns["LicenseGenerationTime"];
        this.columnBasicState = this.Columns["BasicState"];
        this.columnState1 = this.Columns["State1"];
        this.columnState2 = this.Columns["State2"];
        this.columnChangeInfo = this.Columns["ChangeInfo"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnInstallationId = new DataColumn("InstallationId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationId);
        this.columnChangeTime = new DataColumn("ChangeTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeTime);
        this.columnPcName = new DataColumn("PcName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPcName);
        this.columnInstallationPath = new DataColumn("InstallationPath", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationPath);
        this.columnSoftwareVersion = new DataColumn("SoftwareVersion", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSoftwareVersion);
        this.columnLicenseName = new DataColumn("LicenseName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseName);
        this.columnLicenseCustomer = new DataColumn("LicenseCustomer", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseCustomer);
        this.columnLicenseGeneratorID = new DataColumn("LicenseGeneratorID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseGeneratorID);
        this.columnLicenseGenerationTime = new DataColumn("LicenseGenerationTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseGenerationTime);
        this.columnBasicState = new DataColumn("BasicState", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBasicState);
        this.columnState1 = new DataColumn("State1", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnState1);
        this.columnState2 = new DataColumn("State2", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnState2);
        this.columnChangeInfo = new DataColumn("ChangeInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeInfo);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnInstallationId,
          this.columnChangeTime
        }, true));
        this.columnInstallationId.AllowDBNull = false;
        this.columnChangeTime.AllowDBNull = false;
        this.columnPcName.MaxLength = 100;
        this.columnInstallationPath.MaxLength = 536870910;
        this.columnSoftwareVersion.MaxLength = 50;
        this.columnLicenseName.MaxLength = (int) byte.MaxValue;
        this.columnLicenseCustomer.MaxLength = (int) byte.MaxValue;
        this.columnBasicState.MaxLength = 50;
        this.columnState1.MaxLength = 50;
        this.columnState2.MaxLength = 50;
        this.columnChangeInfo.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentChangeLogRow NewEquipmentChangeLogRow()
      {
        return (TestbenchesAndEquipment.EquipmentChangeLogRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TestbenchesAndEquipment.EquipmentChangeLogRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType()
      {
        return typeof (TestbenchesAndEquipment.EquipmentChangeLogRow);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.EquipmentChangeLogRowChanged == null)
          return;
        this.EquipmentChangeLogRowChanged((object) this, new TestbenchesAndEquipment.EquipmentChangeLogRowChangeEvent((TestbenchesAndEquipment.EquipmentChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.EquipmentChangeLogRowChanging == null)
          return;
        this.EquipmentChangeLogRowChanging((object) this, new TestbenchesAndEquipment.EquipmentChangeLogRowChangeEvent((TestbenchesAndEquipment.EquipmentChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.EquipmentChangeLogRowDeleted == null)
          return;
        this.EquipmentChangeLogRowDeleted((object) this, new TestbenchesAndEquipment.EquipmentChangeLogRowChangeEvent((TestbenchesAndEquipment.EquipmentChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.EquipmentChangeLogRowDeleting == null)
          return;
        this.EquipmentChangeLogRowDeleting((object) this, new TestbenchesAndEquipment.EquipmentChangeLogRowChangeEvent((TestbenchesAndEquipment.EquipmentChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveEquipmentChangeLogRow(TestbenchesAndEquipment.EquipmentChangeLogRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TestbenchesAndEquipment testbenchesAndEquipment = new TestbenchesAndEquipment();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = testbenchesAndEquipment.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (EquipmentChangeLogDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = testbenchesAndEquipment.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void InstallationsRowChangeEventHandler(
      object sender,
      TestbenchesAndEquipment.InstallationsRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void InstallationChangeLogRowChangeEventHandler(
      object sender,
      TestbenchesAndEquipment.InstallationChangeLogRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void EquipmentPartlistCreationRowChangeEventHandler(
      object sender,
      TestbenchesAndEquipment.EquipmentPartlistCreationRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void EquipmentTypeDescriptionRowChangeEventHandler(
      object sender,
      TestbenchesAndEquipment.EquipmentTypeDescriptionRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void InstallationUsersRowChangeEventHandler(
      object sender,
      TestbenchesAndEquipment.InstallationUsersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void SoftwareUsersRowChangeEventHandler(
      object sender,
      TestbenchesAndEquipment.SoftwareUsersRowChangeEvent e);

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public delegate void EquipmentChangeLogRowChangeEventHandler(
      object sender,
      TestbenchesAndEquipment.EquipmentChangeLogRowChangeEvent e);

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class InstallationsDataTable : TypedTableBase<TestbenchesAndEquipment.InstallationsRow>
    {
      private DataColumn columnInstallationId;
      private DataColumn columnPcName;
      private DataColumn columnInstallationPath;
      private DataColumn columnInstallataionName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationsDataTable()
      {
        this.TableName = "Installations";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationsDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected InstallationsDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationIdColumn => this.columnInstallationId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PcNameColumn => this.columnPcName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationPathColumn => this.columnInstallationPath;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallataionNameColumn => this.columnInstallataionName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationsRow this[int index]
      {
        get => (TestbenchesAndEquipment.InstallationsRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationsRowChangeEventHandler InstallationsRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationsRowChangeEventHandler InstallationsRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationsRowChangeEventHandler InstallationsRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationsRowChangeEventHandler InstallationsRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddInstallationsRow(TestbenchesAndEquipment.InstallationsRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationsRow AddInstallationsRow(
        int InstallationId,
        string PcName,
        string InstallationPath,
        string InstallataionName)
      {
        TestbenchesAndEquipment.InstallationsRow row = (TestbenchesAndEquipment.InstallationsRow) this.NewRow();
        object[] objArray = new object[4]
        {
          (object) InstallationId,
          (object) PcName,
          (object) InstallationPath,
          (object) InstallataionName
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationsRow FindByInstallationId(int InstallationId)
      {
        return (TestbenchesAndEquipment.InstallationsRow) this.Rows.Find(new object[1]
        {
          (object) InstallationId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        TestbenchesAndEquipment.InstallationsDataTable installationsDataTable = (TestbenchesAndEquipment.InstallationsDataTable) base.Clone();
        installationsDataTable.InitVars();
        return (DataTable) installationsDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TestbenchesAndEquipment.InstallationsDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnInstallationId = this.Columns["InstallationId"];
        this.columnPcName = this.Columns["PcName"];
        this.columnInstallationPath = this.Columns["InstallationPath"];
        this.columnInstallataionName = this.Columns["InstallataionName"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnInstallationId = new DataColumn("InstallationId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationId);
        this.columnPcName = new DataColumn("PcName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPcName);
        this.columnInstallationPath = new DataColumn("InstallationPath", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationPath);
        this.columnInstallataionName = new DataColumn("InstallataionName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallataionName);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnInstallationId
        }, true));
        this.columnInstallationId.AllowDBNull = false;
        this.columnInstallationId.Unique = true;
        this.columnPcName.MaxLength = 100;
        this.columnInstallationPath.MaxLength = 536870910;
        this.columnInstallataionName.MaxLength = (int) byte.MaxValue;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationsRow NewInstallationsRow()
      {
        return (TestbenchesAndEquipment.InstallationsRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TestbenchesAndEquipment.InstallationsRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (TestbenchesAndEquipment.InstallationsRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.InstallationsRowChanged == null)
          return;
        this.InstallationsRowChanged((object) this, new TestbenchesAndEquipment.InstallationsRowChangeEvent((TestbenchesAndEquipment.InstallationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.InstallationsRowChanging == null)
          return;
        this.InstallationsRowChanging((object) this, new TestbenchesAndEquipment.InstallationsRowChangeEvent((TestbenchesAndEquipment.InstallationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.InstallationsRowDeleted == null)
          return;
        this.InstallationsRowDeleted((object) this, new TestbenchesAndEquipment.InstallationsRowChangeEvent((TestbenchesAndEquipment.InstallationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.InstallationsRowDeleting == null)
          return;
        this.InstallationsRowDeleting((object) this, new TestbenchesAndEquipment.InstallationsRowChangeEvent((TestbenchesAndEquipment.InstallationsRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveInstallationsRow(TestbenchesAndEquipment.InstallationsRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TestbenchesAndEquipment testbenchesAndEquipment = new TestbenchesAndEquipment();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = testbenchesAndEquipment.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (InstallationsDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = testbenchesAndEquipment.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class InstallationChangeLogDataTable : 
      TypedTableBase<TestbenchesAndEquipment.InstallationChangeLogRow>
    {
      private DataColumn columnInstallationId;
      private DataColumn columnChangeTime;
      private DataColumn columnSoftwareVersion;
      private DataColumn columnLicenseName;
      private DataColumn columnLicenseCustomer;
      private DataColumn columnLicenseGeneratorID;
      private DataColumn columnLicenseGenerationTime;
      private DataColumn columnBasicState;
      private DataColumn columnState1;
      private DataColumn columnState2;
      private DataColumn columnChangeInfo;
      private DataColumn columnMainEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationChangeLogDataTable()
      {
        this.TableName = "InstallationChangeLog";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationChangeLogDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected InstallationChangeLogDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationIdColumn => this.columnInstallationId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeTimeColumn => this.columnChangeTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn SoftwareVersionColumn => this.columnSoftwareVersion;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseNameColumn => this.columnLicenseName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseCustomerColumn => this.columnLicenseCustomer;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseGeneratorIDColumn => this.columnLicenseGeneratorID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LicenseGenerationTimeColumn => this.columnLicenseGenerationTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn BasicStateColumn => this.columnBasicState;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn State1Column => this.columnState1;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn State2Column => this.columnState2;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeInfoColumn => this.columnChangeInfo;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn MainEquipmentIDColumn => this.columnMainEquipmentID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationChangeLogRow this[int index]
      {
        get => (TestbenchesAndEquipment.InstallationChangeLogRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationChangeLogRowChangeEventHandler InstallationChangeLogRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationChangeLogRowChangeEventHandler InstallationChangeLogRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationChangeLogRowChangeEventHandler InstallationChangeLogRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationChangeLogRowChangeEventHandler InstallationChangeLogRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddInstallationChangeLogRow(
        TestbenchesAndEquipment.InstallationChangeLogRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationChangeLogRow AddInstallationChangeLogRow(
        int InstallationId,
        DateTime ChangeTime,
        string SoftwareVersion,
        string LicenseName,
        string LicenseCustomer,
        int LicenseGeneratorID,
        DateTime LicenseGenerationTime,
        string BasicState,
        string State1,
        string State2,
        string ChangeInfo,
        int MainEquipmentID)
      {
        TestbenchesAndEquipment.InstallationChangeLogRow row = (TestbenchesAndEquipment.InstallationChangeLogRow) this.NewRow();
        object[] objArray = new object[12]
        {
          (object) InstallationId,
          (object) ChangeTime,
          (object) SoftwareVersion,
          (object) LicenseName,
          (object) LicenseCustomer,
          (object) LicenseGeneratorID,
          (object) LicenseGenerationTime,
          (object) BasicState,
          (object) State1,
          (object) State2,
          (object) ChangeInfo,
          (object) MainEquipmentID
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationChangeLogRow FindByInstallationIdChangeTime(
        int InstallationId,
        DateTime ChangeTime)
      {
        return (TestbenchesAndEquipment.InstallationChangeLogRow) this.Rows.Find(new object[2]
        {
          (object) InstallationId,
          (object) ChangeTime
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        TestbenchesAndEquipment.InstallationChangeLogDataTable changeLogDataTable = (TestbenchesAndEquipment.InstallationChangeLogDataTable) base.Clone();
        changeLogDataTable.InitVars();
        return (DataTable) changeLogDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TestbenchesAndEquipment.InstallationChangeLogDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnInstallationId = this.Columns["InstallationId"];
        this.columnChangeTime = this.Columns["ChangeTime"];
        this.columnSoftwareVersion = this.Columns["SoftwareVersion"];
        this.columnLicenseName = this.Columns["LicenseName"];
        this.columnLicenseCustomer = this.Columns["LicenseCustomer"];
        this.columnLicenseGeneratorID = this.Columns["LicenseGeneratorID"];
        this.columnLicenseGenerationTime = this.Columns["LicenseGenerationTime"];
        this.columnBasicState = this.Columns["BasicState"];
        this.columnState1 = this.Columns["State1"];
        this.columnState2 = this.Columns["State2"];
        this.columnChangeInfo = this.Columns["ChangeInfo"];
        this.columnMainEquipmentID = this.Columns["MainEquipmentID"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnInstallationId = new DataColumn("InstallationId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationId);
        this.columnChangeTime = new DataColumn("ChangeTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeTime);
        this.columnSoftwareVersion = new DataColumn("SoftwareVersion", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnSoftwareVersion);
        this.columnLicenseName = new DataColumn("LicenseName", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseName);
        this.columnLicenseCustomer = new DataColumn("LicenseCustomer", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseCustomer);
        this.columnLicenseGeneratorID = new DataColumn("LicenseGeneratorID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseGeneratorID);
        this.columnLicenseGenerationTime = new DataColumn("LicenseGenerationTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLicenseGenerationTime);
        this.columnBasicState = new DataColumn("BasicState", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnBasicState);
        this.columnState1 = new DataColumn("State1", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnState1);
        this.columnState2 = new DataColumn("State2", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnState2);
        this.columnChangeInfo = new DataColumn("ChangeInfo", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeInfo);
        this.columnMainEquipmentID = new DataColumn("MainEquipmentID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnMainEquipmentID);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnInstallationId,
          this.columnChangeTime
        }, true));
        this.columnInstallationId.AllowDBNull = false;
        this.columnChangeTime.AllowDBNull = false;
        this.columnChangeTime.DateTimeMode = DataSetDateTime.Utc;
        this.columnSoftwareVersion.MaxLength = 50;
        this.columnLicenseName.MaxLength = (int) byte.MaxValue;
        this.columnLicenseCustomer.MaxLength = (int) byte.MaxValue;
        this.columnBasicState.MaxLength = 50;
        this.columnState1.MaxLength = 50;
        this.columnState2.MaxLength = 50;
        this.columnChangeInfo.MaxLength = 536870910;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationChangeLogRow NewInstallationChangeLogRow()
      {
        return (TestbenchesAndEquipment.InstallationChangeLogRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TestbenchesAndEquipment.InstallationChangeLogRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType()
      {
        return typeof (TestbenchesAndEquipment.InstallationChangeLogRow);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.InstallationChangeLogRowChanged == null)
          return;
        this.InstallationChangeLogRowChanged((object) this, new TestbenchesAndEquipment.InstallationChangeLogRowChangeEvent((TestbenchesAndEquipment.InstallationChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.InstallationChangeLogRowChanging == null)
          return;
        this.InstallationChangeLogRowChanging((object) this, new TestbenchesAndEquipment.InstallationChangeLogRowChangeEvent((TestbenchesAndEquipment.InstallationChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.InstallationChangeLogRowDeleted == null)
          return;
        this.InstallationChangeLogRowDeleted((object) this, new TestbenchesAndEquipment.InstallationChangeLogRowChangeEvent((TestbenchesAndEquipment.InstallationChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.InstallationChangeLogRowDeleting == null)
          return;
        this.InstallationChangeLogRowDeleting((object) this, new TestbenchesAndEquipment.InstallationChangeLogRowChangeEvent((TestbenchesAndEquipment.InstallationChangeLogRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveInstallationChangeLogRow(
        TestbenchesAndEquipment.InstallationChangeLogRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TestbenchesAndEquipment testbenchesAndEquipment = new TestbenchesAndEquipment();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = testbenchesAndEquipment.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (InstallationChangeLogDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = testbenchesAndEquipment.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class EquipmentPartlistCreationDataTable : 
      TypedTableBase<TestbenchesAndEquipment.EquipmentPartlistCreationRow>
    {
      private DataColumn columnPartlistID;
      private DataColumn columnCreationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentPartlistCreationDataTable()
      {
        this.TableName = "EquipmentPartlistCreation";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentPartlistCreationDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected EquipmentPartlistCreationDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PartlistIDColumn => this.columnPartlistID;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn CreationDateColumn => this.columnCreationDate;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentPartlistCreationRow this[int index]
      {
        get => (TestbenchesAndEquipment.EquipmentPartlistCreationRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentPartlistCreationRowChangeEventHandler EquipmentPartlistCreationRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentPartlistCreationRowChangeEventHandler EquipmentPartlistCreationRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentPartlistCreationRowChangeEventHandler EquipmentPartlistCreationRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentPartlistCreationRowChangeEventHandler EquipmentPartlistCreationRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddEquipmentPartlistCreationRow(
        TestbenchesAndEquipment.EquipmentPartlistCreationRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentPartlistCreationRow AddEquipmentPartlistCreationRow(
        int PartlistID,
        DateTime CreationDate)
      {
        TestbenchesAndEquipment.EquipmentPartlistCreationRow row = (TestbenchesAndEquipment.EquipmentPartlistCreationRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) PartlistID,
          (object) CreationDate
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentPartlistCreationRow FindByPartlistID(int PartlistID)
      {
        return (TestbenchesAndEquipment.EquipmentPartlistCreationRow) this.Rows.Find(new object[1]
        {
          (object) PartlistID
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        TestbenchesAndEquipment.EquipmentPartlistCreationDataTable creationDataTable = (TestbenchesAndEquipment.EquipmentPartlistCreationDataTable) base.Clone();
        creationDataTable.InitVars();
        return (DataTable) creationDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TestbenchesAndEquipment.EquipmentPartlistCreationDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnPartlistID = this.Columns["PartlistID"];
        this.columnCreationDate = this.Columns["CreationDate"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnPartlistID = new DataColumn("PartlistID", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPartlistID);
        this.columnCreationDate = new DataColumn("CreationDate", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnCreationDate);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnPartlistID
        }, true));
        this.columnPartlistID.AllowDBNull = false;
        this.columnPartlistID.Unique = true;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentPartlistCreationRow NewEquipmentPartlistCreationRow()
      {
        return (TestbenchesAndEquipment.EquipmentPartlistCreationRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TestbenchesAndEquipment.EquipmentPartlistCreationRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType()
      {
        return typeof (TestbenchesAndEquipment.EquipmentPartlistCreationRow);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.EquipmentPartlistCreationRowChanged == null)
          return;
        this.EquipmentPartlistCreationRowChanged((object) this, new TestbenchesAndEquipment.EquipmentPartlistCreationRowChangeEvent((TestbenchesAndEquipment.EquipmentPartlistCreationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.EquipmentPartlistCreationRowChanging == null)
          return;
        this.EquipmentPartlistCreationRowChanging((object) this, new TestbenchesAndEquipment.EquipmentPartlistCreationRowChangeEvent((TestbenchesAndEquipment.EquipmentPartlistCreationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.EquipmentPartlistCreationRowDeleted == null)
          return;
        this.EquipmentPartlistCreationRowDeleted((object) this, new TestbenchesAndEquipment.EquipmentPartlistCreationRowChangeEvent((TestbenchesAndEquipment.EquipmentPartlistCreationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.EquipmentPartlistCreationRowDeleting == null)
          return;
        this.EquipmentPartlistCreationRowDeleting((object) this, new TestbenchesAndEquipment.EquipmentPartlistCreationRowChangeEvent((TestbenchesAndEquipment.EquipmentPartlistCreationRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveEquipmentPartlistCreationRow(
        TestbenchesAndEquipment.EquipmentPartlistCreationRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TestbenchesAndEquipment testbenchesAndEquipment = new TestbenchesAndEquipment();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = testbenchesAndEquipment.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (EquipmentPartlistCreationDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = testbenchesAndEquipment.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class EquipmentTypeDescriptionDataTable : 
      TypedTableBase<TestbenchesAndEquipment.EquipmentTypeDescriptionRow>
    {
      private DataColumn columnEquipmentType;
      private DataColumn columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentTypeDescriptionDataTable()
      {
        this.TableName = "EquipmentTypeDescription";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentTypeDescriptionDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected EquipmentTypeDescriptionDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn EquipmentTypeColumn => this.columnEquipmentType;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn DescriptionColumn => this.columnDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentTypeDescriptionRow this[int index]
      {
        get => (TestbenchesAndEquipment.EquipmentTypeDescriptionRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentTypeDescriptionRowChangeEventHandler EquipmentTypeDescriptionRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentTypeDescriptionRowChangeEventHandler EquipmentTypeDescriptionRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentTypeDescriptionRowChangeEventHandler EquipmentTypeDescriptionRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.EquipmentTypeDescriptionRowChangeEventHandler EquipmentTypeDescriptionRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddEquipmentTypeDescriptionRow(
        TestbenchesAndEquipment.EquipmentTypeDescriptionRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentTypeDescriptionRow AddEquipmentTypeDescriptionRow(
        int EquipmentType,
        string Description)
      {
        TestbenchesAndEquipment.EquipmentTypeDescriptionRow row = (TestbenchesAndEquipment.EquipmentTypeDescriptionRow) this.NewRow();
        object[] objArray = new object[2]
        {
          (object) EquipmentType,
          (object) Description
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentTypeDescriptionRow FindByEquipmentType(
        int EquipmentType)
      {
        return (TestbenchesAndEquipment.EquipmentTypeDescriptionRow) this.Rows.Find(new object[1]
        {
          (object) EquipmentType
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable descriptionDataTable = (TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable) base.Clone();
        descriptionDataTable.InitVars();
        return (DataTable) descriptionDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnEquipmentType = this.Columns["EquipmentType"];
        this.columnDescription = this.Columns["Description"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnEquipmentType = new DataColumn("EquipmentType", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnEquipmentType);
        this.columnDescription = new DataColumn("Description", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnDescription);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnEquipmentType
        }, true));
        this.columnEquipmentType.AllowDBNull = false;
        this.columnEquipmentType.Unique = true;
        this.columnDescription.MaxLength = 50;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentTypeDescriptionRow NewEquipmentTypeDescriptionRow()
      {
        return (TestbenchesAndEquipment.EquipmentTypeDescriptionRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TestbenchesAndEquipment.EquipmentTypeDescriptionRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType()
      {
        return typeof (TestbenchesAndEquipment.EquipmentTypeDescriptionRow);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.EquipmentTypeDescriptionRowChanged == null)
          return;
        this.EquipmentTypeDescriptionRowChanged((object) this, new TestbenchesAndEquipment.EquipmentTypeDescriptionRowChangeEvent((TestbenchesAndEquipment.EquipmentTypeDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.EquipmentTypeDescriptionRowChanging == null)
          return;
        this.EquipmentTypeDescriptionRowChanging((object) this, new TestbenchesAndEquipment.EquipmentTypeDescriptionRowChangeEvent((TestbenchesAndEquipment.EquipmentTypeDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.EquipmentTypeDescriptionRowDeleted == null)
          return;
        this.EquipmentTypeDescriptionRowDeleted((object) this, new TestbenchesAndEquipment.EquipmentTypeDescriptionRowChangeEvent((TestbenchesAndEquipment.EquipmentTypeDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.EquipmentTypeDescriptionRowDeleting == null)
          return;
        this.EquipmentTypeDescriptionRowDeleting((object) this, new TestbenchesAndEquipment.EquipmentTypeDescriptionRowChangeEvent((TestbenchesAndEquipment.EquipmentTypeDescriptionRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveEquipmentTypeDescriptionRow(
        TestbenchesAndEquipment.EquipmentTypeDescriptionRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TestbenchesAndEquipment testbenchesAndEquipment = new TestbenchesAndEquipment();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = testbenchesAndEquipment.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (EquipmentTypeDescriptionDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = testbenchesAndEquipment.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class InstallationUsersDataTable : 
      TypedTableBase<TestbenchesAndEquipment.InstallationUsersRow>
    {
      private DataColumn columnInstallationId;
      private DataColumn columnChangeTime;
      private DataColumn columnUserId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationUsersDataTable()
      {
        this.TableName = "InstallationUsers";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationUsersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected InstallationUsersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn InstallationIdColumn => this.columnInstallationId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ChangeTimeColumn => this.columnChangeTime;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserIdColumn => this.columnUserId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationUsersRow this[int index]
      {
        get => (TestbenchesAndEquipment.InstallationUsersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationUsersRowChangeEventHandler InstallationUsersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationUsersRowChangeEventHandler InstallationUsersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationUsersRowChangeEventHandler InstallationUsersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.InstallationUsersRowChangeEventHandler InstallationUsersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddInstallationUsersRow(TestbenchesAndEquipment.InstallationUsersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationUsersRow AddInstallationUsersRow(
        int InstallationId,
        DateTime ChangeTime,
        int UserId)
      {
        TestbenchesAndEquipment.InstallationUsersRow row = (TestbenchesAndEquipment.InstallationUsersRow) this.NewRow();
        object[] objArray = new object[3]
        {
          (object) InstallationId,
          (object) ChangeTime,
          (object) UserId
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationUsersRow FindByInstallationIdChangeTime(
        int InstallationId,
        DateTime ChangeTime)
      {
        return (TestbenchesAndEquipment.InstallationUsersRow) this.Rows.Find(new object[2]
        {
          (object) InstallationId,
          (object) ChangeTime
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        TestbenchesAndEquipment.InstallationUsersDataTable installationUsersDataTable = (TestbenchesAndEquipment.InstallationUsersDataTable) base.Clone();
        installationUsersDataTable.InitVars();
        return (DataTable) installationUsersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TestbenchesAndEquipment.InstallationUsersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnInstallationId = this.Columns["InstallationId"];
        this.columnChangeTime = this.Columns["ChangeTime"];
        this.columnUserId = this.Columns["UserId"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnInstallationId = new DataColumn("InstallationId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnInstallationId);
        this.columnChangeTime = new DataColumn("ChangeTime", typeof (DateTime), (string) null, MappingType.Element);
        this.Columns.Add(this.columnChangeTime);
        this.columnUserId = new DataColumn("UserId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserId);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[2]
        {
          this.columnInstallationId,
          this.columnChangeTime
        }, true));
        this.columnInstallationId.AllowDBNull = false;
        this.columnChangeTime.AllowDBNull = false;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationUsersRow NewInstallationUsersRow()
      {
        return (TestbenchesAndEquipment.InstallationUsersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TestbenchesAndEquipment.InstallationUsersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (TestbenchesAndEquipment.InstallationUsersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.InstallationUsersRowChanged == null)
          return;
        this.InstallationUsersRowChanged((object) this, new TestbenchesAndEquipment.InstallationUsersRowChangeEvent((TestbenchesAndEquipment.InstallationUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.InstallationUsersRowChanging == null)
          return;
        this.InstallationUsersRowChanging((object) this, new TestbenchesAndEquipment.InstallationUsersRowChangeEvent((TestbenchesAndEquipment.InstallationUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.InstallationUsersRowDeleted == null)
          return;
        this.InstallationUsersRowDeleted((object) this, new TestbenchesAndEquipment.InstallationUsersRowChangeEvent((TestbenchesAndEquipment.InstallationUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.InstallationUsersRowDeleting == null)
          return;
        this.InstallationUsersRowDeleting((object) this, new TestbenchesAndEquipment.InstallationUsersRowChangeEvent((TestbenchesAndEquipment.InstallationUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveInstallationUsersRow(TestbenchesAndEquipment.InstallationUsersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TestbenchesAndEquipment testbenchesAndEquipment = new TestbenchesAndEquipment();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = testbenchesAndEquipment.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (InstallationUsersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = testbenchesAndEquipment.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    [XmlSchemaProvider("GetTypedTableSchema")]
    [Serializable]
    public class SoftwareUsersDataTable : TypedTableBase<TestbenchesAndEquipment.SoftwareUsersRow>
    {
      private DataColumn columnUserId;
      private DataColumn columnName;
      private DataColumn columnPersonalNumber;
      private DataColumn columnPassword;
      private DataColumn columnLanguageSetting;
      private DataColumn columnControlKey;
      private DataColumn columnUserRole;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SoftwareUsersDataTable()
      {
        this.TableName = "SoftwareUsers";
        this.BeginInit();
        this.InitClass();
        this.EndInit();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SoftwareUsersDataTable(DataTable table)
      {
        this.TableName = table.TableName;
        if (table.CaseSensitive != table.DataSet.CaseSensitive)
          this.CaseSensitive = table.CaseSensitive;
        if (table.Locale.ToString() != table.DataSet.Locale.ToString())
          this.Locale = table.Locale;
        if (table.Namespace != table.DataSet.Namespace)
          this.Namespace = table.Namespace;
        this.Prefix = table.Prefix;
        this.MinimumCapacity = table.MinimumCapacity;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected SoftwareUsersDataTable(SerializationInfo info, StreamingContext context)
        : base(info, context)
      {
        this.InitVars();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserIdColumn => this.columnUserId;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn NameColumn => this.columnName;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PersonalNumberColumn => this.columnPersonalNumber;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn PasswordColumn => this.columnPassword;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn LanguageSettingColumn => this.columnLanguageSetting;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn ControlKeyColumn => this.columnControlKey;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataColumn UserRoleColumn => this.columnUserRole;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      [Browsable(false)]
      public int Count => this.Rows.Count;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.SoftwareUsersRow this[int index]
      {
        get => (TestbenchesAndEquipment.SoftwareUsersRow) this.Rows[index];
      }

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.SoftwareUsersRowChangeEventHandler SoftwareUsersRowChanging;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.SoftwareUsersRowChangeEventHandler SoftwareUsersRowChanged;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.SoftwareUsersRowChangeEventHandler SoftwareUsersRowDeleting;

      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public event TestbenchesAndEquipment.SoftwareUsersRowChangeEventHandler SoftwareUsersRowDeleted;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void AddSoftwareUsersRow(TestbenchesAndEquipment.SoftwareUsersRow row)
      {
        this.Rows.Add((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.SoftwareUsersRow AddSoftwareUsersRow(
        int UserId,
        string Name,
        int PersonalNumber,
        string Password,
        string LanguageSetting,
        string ControlKey,
        int UserRole)
      {
        TestbenchesAndEquipment.SoftwareUsersRow row = (TestbenchesAndEquipment.SoftwareUsersRow) this.NewRow();
        object[] objArray = new object[7]
        {
          (object) UserId,
          (object) Name,
          (object) PersonalNumber,
          (object) Password,
          (object) LanguageSetting,
          (object) ControlKey,
          (object) UserRole
        };
        row.ItemArray = objArray;
        this.Rows.Add((DataRow) row);
        return row;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.SoftwareUsersRow FindByUserId(int UserId)
      {
        return (TestbenchesAndEquipment.SoftwareUsersRow) this.Rows.Find(new object[1]
        {
          (object) UserId
        });
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public override DataTable Clone()
      {
        TestbenchesAndEquipment.SoftwareUsersDataTable softwareUsersDataTable = (TestbenchesAndEquipment.SoftwareUsersDataTable) base.Clone();
        softwareUsersDataTable.InitVars();
        return (DataTable) softwareUsersDataTable;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataTable CreateInstance()
      {
        return (DataTable) new TestbenchesAndEquipment.SoftwareUsersDataTable();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal void InitVars()
      {
        this.columnUserId = this.Columns["UserId"];
        this.columnName = this.Columns["Name"];
        this.columnPersonalNumber = this.Columns["PersonalNumber"];
        this.columnPassword = this.Columns["Password"];
        this.columnLanguageSetting = this.Columns["LanguageSetting"];
        this.columnControlKey = this.Columns["ControlKey"];
        this.columnUserRole = this.Columns["UserRole"];
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      private void InitClass()
      {
        this.columnUserId = new DataColumn("UserId", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserId);
        this.columnName = new DataColumn("Name", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnName);
        this.columnPersonalNumber = new DataColumn("PersonalNumber", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPersonalNumber);
        this.columnPassword = new DataColumn("Password", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnPassword);
        this.columnLanguageSetting = new DataColumn("LanguageSetting", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnLanguageSetting);
        this.columnControlKey = new DataColumn("ControlKey", typeof (string), (string) null, MappingType.Element);
        this.Columns.Add(this.columnControlKey);
        this.columnUserRole = new DataColumn("UserRole", typeof (int), (string) null, MappingType.Element);
        this.Columns.Add(this.columnUserRole);
        this.Constraints.Add((Constraint) new UniqueConstraint("Constraint1", new DataColumn[1]
        {
          this.columnUserId
        }, true));
        this.columnUserId.AllowDBNull = false;
        this.columnUserId.Unique = true;
        this.columnName.MaxLength = 50;
        this.columnPassword.MaxLength = 100;
        this.columnLanguageSetting.MaxLength = 20;
        this.columnControlKey.MaxLength = 100;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.SoftwareUsersRow NewSoftwareUsersRow()
      {
        return (TestbenchesAndEquipment.SoftwareUsersRow) this.NewRow();
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
      {
        return (DataRow) new TestbenchesAndEquipment.SoftwareUsersRow(builder);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override Type GetRowType() => typeof (TestbenchesAndEquipment.SoftwareUsersRow);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanged(DataRowChangeEventArgs e)
      {
        base.OnRowChanged(e);
        if (this.SoftwareUsersRowChanged == null)
          return;
        this.SoftwareUsersRowChanged((object) this, new TestbenchesAndEquipment.SoftwareUsersRowChangeEvent((TestbenchesAndEquipment.SoftwareUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowChanging(DataRowChangeEventArgs e)
      {
        base.OnRowChanging(e);
        if (this.SoftwareUsersRowChanging == null)
          return;
        this.SoftwareUsersRowChanging((object) this, new TestbenchesAndEquipment.SoftwareUsersRowChangeEvent((TestbenchesAndEquipment.SoftwareUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleted(DataRowChangeEventArgs e)
      {
        base.OnRowDeleted(e);
        if (this.SoftwareUsersRowDeleted == null)
          return;
        this.SoftwareUsersRowDeleted((object) this, new TestbenchesAndEquipment.SoftwareUsersRowChangeEvent((TestbenchesAndEquipment.SoftwareUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      protected override void OnRowDeleting(DataRowChangeEventArgs e)
      {
        base.OnRowDeleting(e);
        if (this.SoftwareUsersRowDeleting == null)
          return;
        this.SoftwareUsersRowDeleting((object) this, new TestbenchesAndEquipment.SoftwareUsersRowChangeEvent((TestbenchesAndEquipment.SoftwareUsersRow) e.Row, e.Action));
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void RemoveSoftwareUsersRow(TestbenchesAndEquipment.SoftwareUsersRow row)
      {
        this.Rows.Remove((DataRow) row);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
      {
        XmlSchemaComplexType typedTableSchema = new XmlSchemaComplexType();
        XmlSchemaSequence xmlSchemaSequence = new XmlSchemaSequence();
        TestbenchesAndEquipment testbenchesAndEquipment = new TestbenchesAndEquipment();
        XmlSchemaAny xmlSchemaAny1 = new XmlSchemaAny();
        xmlSchemaAny1.Namespace = "http://www.w3.org/2001/XMLSchema";
        xmlSchemaAny1.MinOccurs = 0M;
        xmlSchemaAny1.MaxOccurs = Decimal.MaxValue;
        xmlSchemaAny1.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny1);
        XmlSchemaAny xmlSchemaAny2 = new XmlSchemaAny();
        xmlSchemaAny2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
        xmlSchemaAny2.MinOccurs = 1M;
        xmlSchemaAny2.ProcessContents = XmlSchemaContentProcessing.Lax;
        xmlSchemaSequence.Items.Add((XmlSchemaObject) xmlSchemaAny2);
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "namespace",
          FixedValue = testbenchesAndEquipment.Namespace
        });
        typedTableSchema.Attributes.Add((XmlSchemaObject) new XmlSchemaAttribute()
        {
          Name = "tableTypeName",
          FixedValue = nameof (SoftwareUsersDataTable)
        });
        typedTableSchema.Particle = (XmlSchemaParticle) xmlSchemaSequence;
        XmlSchema schemaSerializable = testbenchesAndEquipment.GetSchemaSerializable();
        if (xs.Contains(schemaSerializable.TargetNamespace))
        {
          MemoryStream memoryStream1 = new MemoryStream();
          MemoryStream memoryStream2 = new MemoryStream();
          try
          {
            schemaSerializable.Write((Stream) memoryStream1);
            IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
            while (enumerator.MoveNext())
            {
              XmlSchema current = (XmlSchema) enumerator.Current;
              memoryStream2.SetLength(0L);
              current.Write((Stream) memoryStream2);
              if (memoryStream1.Length == memoryStream2.Length)
              {
                memoryStream1.Position = 0L;
                memoryStream2.Position = 0L;
                do
                  ;
                while (memoryStream1.Position != memoryStream1.Length && memoryStream1.ReadByte() == memoryStream2.ReadByte());
                if (memoryStream1.Position == memoryStream1.Length)
                  return typedTableSchema;
              }
            }
          }
          finally
          {
            memoryStream1?.Close();
            memoryStream2?.Close();
          }
        }
        xs.Add(schemaSerializable);
        return typedTableSchema;
      }
    }

    public class InstallationsRow : DataRow
    {
      private TestbenchesAndEquipment.InstallationsDataTable tableInstallations;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationsRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableInstallations = (TestbenchesAndEquipment.InstallationsDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InstallationId
      {
        get => (int) this[this.tableInstallations.InstallationIdColumn];
        set => this[this.tableInstallations.InstallationIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PcName
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallations.PcNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PcName' in table 'Installations' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallations.PcNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InstallationPath
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallations.InstallationPathColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InstallationPath' in table 'Installations' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallations.InstallationPathColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InstallataionName
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallations.InstallataionNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InstallataionName' in table 'Installations' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallations.InstallataionNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPcNameNull() => this.IsNull(this.tableInstallations.PcNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPcNameNull() => this[this.tableInstallations.PcNameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInstallationPathNull()
      {
        return this.IsNull(this.tableInstallations.InstallationPathColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInstallationPathNull()
      {
        this[this.tableInstallations.InstallationPathColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInstallataionNameNull()
      {
        return this.IsNull(this.tableInstallations.InstallataionNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInstallataionNameNull()
      {
        this[this.tableInstallations.InstallataionNameColumn] = Convert.DBNull;
      }
    }

    public class InstallationChangeLogRow : DataRow
    {
      private TestbenchesAndEquipment.InstallationChangeLogDataTable tableInstallationChangeLog;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationChangeLogRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableInstallationChangeLog = (TestbenchesAndEquipment.InstallationChangeLogDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InstallationId
      {
        get => (int) this[this.tableInstallationChangeLog.InstallationIdColumn];
        set => this[this.tableInstallationChangeLog.InstallationIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ChangeTime
      {
        get => (DateTime) this[this.tableInstallationChangeLog.ChangeTimeColumn];
        set => this[this.tableInstallationChangeLog.ChangeTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SoftwareVersion
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.SoftwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SoftwareVersion' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.SoftwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LicenseName
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.LicenseNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseName' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.LicenseNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LicenseCustomer
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.LicenseCustomerColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseCustomer' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.LicenseCustomerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LicenseGeneratorID
      {
        get
        {
          try
          {
            return (int) this[this.tableInstallationChangeLog.LicenseGeneratorIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseGeneratorID' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.LicenseGeneratorIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime LicenseGenerationTime
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableInstallationChangeLog.LicenseGenerationTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseGenerationTime' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.LicenseGenerationTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string BasicState
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.BasicStateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'BasicState' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.BasicStateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string State1
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.State1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'State1' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.State1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string State2
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.State2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'State2' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.State2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChangeInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableInstallationChangeLog.ChangeInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChangeInfo' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.ChangeInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int MainEquipmentID
      {
        get
        {
          try
          {
            return (int) this[this.tableInstallationChangeLog.MainEquipmentIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'MainEquipmentID' in table 'InstallationChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationChangeLog.MainEquipmentIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSoftwareVersionNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.SoftwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSoftwareVersionNull()
      {
        this[this.tableInstallationChangeLog.SoftwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseNameNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.LicenseNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseNameNull()
      {
        this[this.tableInstallationChangeLog.LicenseNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseCustomerNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.LicenseCustomerColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseCustomerNull()
      {
        this[this.tableInstallationChangeLog.LicenseCustomerColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseGeneratorIDNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.LicenseGeneratorIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseGeneratorIDNull()
      {
        this[this.tableInstallationChangeLog.LicenseGeneratorIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseGenerationTimeNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.LicenseGenerationTimeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseGenerationTimeNull()
      {
        this[this.tableInstallationChangeLog.LicenseGenerationTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBasicStateNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.BasicStateColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBasicStateNull()
      {
        this[this.tableInstallationChangeLog.BasicStateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsState1Null() => this.IsNull(this.tableInstallationChangeLog.State1Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetState1Null()
      {
        this[this.tableInstallationChangeLog.State1Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsState2Null() => this.IsNull(this.tableInstallationChangeLog.State2Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetState2Null()
      {
        this[this.tableInstallationChangeLog.State2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChangeInfoNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.ChangeInfoColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChangeInfoNull()
      {
        this[this.tableInstallationChangeLog.ChangeInfoColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsMainEquipmentIDNull()
      {
        return this.IsNull(this.tableInstallationChangeLog.MainEquipmentIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetMainEquipmentIDNull()
      {
        this[this.tableInstallationChangeLog.MainEquipmentIDColumn] = Convert.DBNull;
      }
    }

    public class EquipmentPartlistCreationRow : DataRow
    {
      private TestbenchesAndEquipment.EquipmentPartlistCreationDataTable tableEquipmentPartlistCreation;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentPartlistCreationRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableEquipmentPartlistCreation = (TestbenchesAndEquipment.EquipmentPartlistCreationDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PartlistID
      {
        get => (int) this[this.tableEquipmentPartlistCreation.PartlistIDColumn];
        set => this[this.tableEquipmentPartlistCreation.PartlistIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime CreationDate
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableEquipmentPartlistCreation.CreationDateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'CreationDate' in table 'EquipmentPartlistCreation' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentPartlistCreation.CreationDateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsCreationDateNull()
      {
        return this.IsNull(this.tableEquipmentPartlistCreation.CreationDateColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetCreationDateNull()
      {
        this[this.tableEquipmentPartlistCreation.CreationDateColumn] = Convert.DBNull;
      }
    }

    public class EquipmentTypeDescriptionRow : DataRow
    {
      private TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable tableEquipmentTypeDescription;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentTypeDescriptionRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableEquipmentTypeDescription = (TestbenchesAndEquipment.EquipmentTypeDescriptionDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int EquipmentType
      {
        get => (int) this[this.tableEquipmentTypeDescription.EquipmentTypeColumn];
        set => this[this.tableEquipmentTypeDescription.EquipmentTypeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Description
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentTypeDescription.DescriptionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Description' in table 'EquipmentTypeDescription' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentTypeDescription.DescriptionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsDescriptionNull()
      {
        return this.IsNull(this.tableEquipmentTypeDescription.DescriptionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetDescriptionNull()
      {
        this[this.tableEquipmentTypeDescription.DescriptionColumn] = Convert.DBNull;
      }
    }

    public class InstallationUsersRow : DataRow
    {
      private TestbenchesAndEquipment.InstallationUsersDataTable tableInstallationUsers;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal InstallationUsersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableInstallationUsers = (TestbenchesAndEquipment.InstallationUsersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InstallationId
      {
        get => (int) this[this.tableInstallationUsers.InstallationIdColumn];
        set => this[this.tableInstallationUsers.InstallationIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ChangeTime
      {
        get => (DateTime) this[this.tableInstallationUsers.ChangeTimeColumn];
        set => this[this.tableInstallationUsers.ChangeTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserId
      {
        get
        {
          try
          {
            return (int) this[this.tableInstallationUsers.UserIdColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UserId' in table 'InstallationUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableInstallationUsers.UserIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUserIdNull() => this.IsNull(this.tableInstallationUsers.UserIdColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUserIdNull()
      {
        this[this.tableInstallationUsers.UserIdColumn] = Convert.DBNull;
      }
    }

    public class SoftwareUsersRow : DataRow
    {
      private TestbenchesAndEquipment.SoftwareUsersDataTable tableSoftwareUsers;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal SoftwareUsersRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableSoftwareUsers = (TestbenchesAndEquipment.SoftwareUsersDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserId
      {
        get => (int) this[this.tableSoftwareUsers.UserIdColumn];
        set => this[this.tableSoftwareUsers.UserIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Name
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.NameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Name' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.NameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int PersonalNumber
      {
        get
        {
          try
          {
            return (int) this[this.tableSoftwareUsers.PersonalNumberColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PersonalNumber' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.PersonalNumberColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string Password
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.PasswordColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'Password' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.PasswordColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LanguageSetting
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.LanguageSettingColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LanguageSetting' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.LanguageSettingColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ControlKey
      {
        get
        {
          try
          {
            return (string) this[this.tableSoftwareUsers.ControlKeyColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ControlKey' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.ControlKeyColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int UserRole
      {
        get
        {
          try
          {
            return (int) this[this.tableSoftwareUsers.UserRoleColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'UserRole' in table 'SoftwareUsers' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableSoftwareUsers.UserRoleColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsNameNull() => this.IsNull(this.tableSoftwareUsers.NameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetNameNull() => this[this.tableSoftwareUsers.NameColumn] = Convert.DBNull;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPersonalNumberNull()
      {
        return this.IsNull(this.tableSoftwareUsers.PersonalNumberColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPersonalNumberNull()
      {
        this[this.tableSoftwareUsers.PersonalNumberColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPasswordNull() => this.IsNull(this.tableSoftwareUsers.PasswordColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPasswordNull()
      {
        this[this.tableSoftwareUsers.PasswordColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLanguageSettingNull()
      {
        return this.IsNull(this.tableSoftwareUsers.LanguageSettingColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLanguageSettingNull()
      {
        this[this.tableSoftwareUsers.LanguageSettingColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsControlKeyNull() => this.IsNull(this.tableSoftwareUsers.ControlKeyColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetControlKeyNull()
      {
        this[this.tableSoftwareUsers.ControlKeyColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsUserRoleNull() => this.IsNull(this.tableSoftwareUsers.UserRoleColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetUserRoleNull()
      {
        this[this.tableSoftwareUsers.UserRoleColumn] = Convert.DBNull;
      }
    }

    public class EquipmentChangeLogRow : DataRow
    {
      private TestbenchesAndEquipment.EquipmentChangeLogDataTable tableEquipmentChangeLog;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      internal EquipmentChangeLogRow(DataRowBuilder rb)
        : base(rb)
      {
        this.tableEquipmentChangeLog = (TestbenchesAndEquipment.EquipmentChangeLogDataTable) this.Table;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int InstallationId
      {
        get => (int) this[this.tableEquipmentChangeLog.InstallationIdColumn];
        set => this[this.tableEquipmentChangeLog.InstallationIdColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime ChangeTime
      {
        get => (DateTime) this[this.tableEquipmentChangeLog.ChangeTimeColumn];
        set => this[this.tableEquipmentChangeLog.ChangeTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string PcName
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentChangeLog.PcNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'PcName' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.PcNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string InstallationPath
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentChangeLog.InstallationPathColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'InstallationPath' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.InstallationPathColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string SoftwareVersion
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentChangeLog.SoftwareVersionColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'SoftwareVersion' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.SoftwareVersionColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LicenseName
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentChangeLog.LicenseNameColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseName' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.LicenseNameColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string LicenseCustomer
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentChangeLog.LicenseCustomerColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseCustomer' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.LicenseCustomerColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public int LicenseGeneratorID
      {
        get
        {
          try
          {
            return (int) this[this.tableEquipmentChangeLog.LicenseGeneratorIDColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseGeneratorID' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.LicenseGeneratorIDColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DateTime LicenseGenerationTime
      {
        get
        {
          try
          {
            return (DateTime) this[this.tableEquipmentChangeLog.LicenseGenerationTimeColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'LicenseGenerationTime' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.LicenseGenerationTimeColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string BasicState
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentChangeLog.BasicStateColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'BasicState' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.BasicStateColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string State1
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentChangeLog.State1Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'State1' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.State1Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string State2
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentChangeLog.State2Column];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'State2' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.State2Column] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public string ChangeInfo
      {
        get
        {
          try
          {
            return (string) this[this.tableEquipmentChangeLog.ChangeInfoColumn];
          }
          catch (InvalidCastException ex)
          {
            throw new StrongTypingException("The value for column 'ChangeInfo' in table 'EquipmentChangeLog' is DBNull.", (Exception) ex);
          }
        }
        set => this[this.tableEquipmentChangeLog.ChangeInfoColumn] = (object) value;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsPcNameNull() => this.IsNull(this.tableEquipmentChangeLog.PcNameColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetPcNameNull()
      {
        this[this.tableEquipmentChangeLog.PcNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsInstallationPathNull()
      {
        return this.IsNull(this.tableEquipmentChangeLog.InstallationPathColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetInstallationPathNull()
      {
        this[this.tableEquipmentChangeLog.InstallationPathColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsSoftwareVersionNull()
      {
        return this.IsNull(this.tableEquipmentChangeLog.SoftwareVersionColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetSoftwareVersionNull()
      {
        this[this.tableEquipmentChangeLog.SoftwareVersionColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseNameNull()
      {
        return this.IsNull(this.tableEquipmentChangeLog.LicenseNameColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseNameNull()
      {
        this[this.tableEquipmentChangeLog.LicenseNameColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseCustomerNull()
      {
        return this.IsNull(this.tableEquipmentChangeLog.LicenseCustomerColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseCustomerNull()
      {
        this[this.tableEquipmentChangeLog.LicenseCustomerColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseGeneratorIDNull()
      {
        return this.IsNull(this.tableEquipmentChangeLog.LicenseGeneratorIDColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseGeneratorIDNull()
      {
        this[this.tableEquipmentChangeLog.LicenseGeneratorIDColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsLicenseGenerationTimeNull()
      {
        return this.IsNull(this.tableEquipmentChangeLog.LicenseGenerationTimeColumn);
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetLicenseGenerationTimeNull()
      {
        this[this.tableEquipmentChangeLog.LicenseGenerationTimeColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsBasicStateNull() => this.IsNull(this.tableEquipmentChangeLog.BasicStateColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetBasicStateNull()
      {
        this[this.tableEquipmentChangeLog.BasicStateColumn] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsState1Null() => this.IsNull(this.tableEquipmentChangeLog.State1Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetState1Null()
      {
        this[this.tableEquipmentChangeLog.State1Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsState2Null() => this.IsNull(this.tableEquipmentChangeLog.State2Column);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetState2Null()
      {
        this[this.tableEquipmentChangeLog.State2Column] = Convert.DBNull;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public bool IsChangeInfoNull() => this.IsNull(this.tableEquipmentChangeLog.ChangeInfoColumn);

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public void SetChangeInfoNull()
      {
        this[this.tableEquipmentChangeLog.ChangeInfoColumn] = Convert.DBNull;
      }
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class InstallationsRowChangeEvent : EventArgs
    {
      private TestbenchesAndEquipment.InstallationsRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationsRowChangeEvent(
        TestbenchesAndEquipment.InstallationsRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationsRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class InstallationChangeLogRowChangeEvent : EventArgs
    {
      private TestbenchesAndEquipment.InstallationChangeLogRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationChangeLogRowChangeEvent(
        TestbenchesAndEquipment.InstallationChangeLogRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationChangeLogRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class EquipmentPartlistCreationRowChangeEvent : EventArgs
    {
      private TestbenchesAndEquipment.EquipmentPartlistCreationRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentPartlistCreationRowChangeEvent(
        TestbenchesAndEquipment.EquipmentPartlistCreationRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentPartlistCreationRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class EquipmentTypeDescriptionRowChangeEvent : EventArgs
    {
      private TestbenchesAndEquipment.EquipmentTypeDescriptionRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentTypeDescriptionRowChangeEvent(
        TestbenchesAndEquipment.EquipmentTypeDescriptionRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentTypeDescriptionRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class InstallationUsersRowChangeEvent : EventArgs
    {
      private TestbenchesAndEquipment.InstallationUsersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public InstallationUsersRowChangeEvent(
        TestbenchesAndEquipment.InstallationUsersRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.InstallationUsersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class SoftwareUsersRowChangeEvent : EventArgs
    {
      private TestbenchesAndEquipment.SoftwareUsersRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public SoftwareUsersRowChangeEvent(
        TestbenchesAndEquipment.SoftwareUsersRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.SoftwareUsersRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }

    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
    public class EquipmentChangeLogRowChangeEvent : EventArgs
    {
      private TestbenchesAndEquipment.EquipmentChangeLogRow eventRow;
      private DataRowAction eventAction;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public EquipmentChangeLogRowChangeEvent(
        TestbenchesAndEquipment.EquipmentChangeLogRow row,
        DataRowAction action)
      {
        this.eventRow = row;
        this.eventAction = action;
      }

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public TestbenchesAndEquipment.EquipmentChangeLogRow Row => this.eventRow;

      [DebuggerNonUserCode]
      [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
      public DataRowAction Action => this.eventAction;
    }
  }
}

