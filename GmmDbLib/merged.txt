
--- AccessDB.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.AccessDB
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System.Data.OleDb;
using System.IO;

#nullable disable
namespace GmmDbLib
{
  public class AccessDB : DbBasis
  {
    public AccessDB(string connectionString)
      : base(connectionString)
    {
    }

    public AccessDB(BaseDbConnection newBaseDbConnection)
      : base(newBaseDbConnection)
    {
    }

    public override long GetDatabaseSize()
    {
      string dataSource = new OleDbConnectionStringBuilder(this.ConnectionString).DataSource;
      if (string.IsNullOrEmpty(dataSource))
        return 0;
      try
      {
        return new FileInfo(dataSource).Length;
      }
      catch
      {
      }
      return 0;
    }
  }
}


--- AssemblyInfo.cs ---

﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

[assembly: Extension]
[assembly: AssemblyTitle("GmmDbLib")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("GmmDbLib")]
[assembly: AssemblyCopyright("Copyright ©  2014")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: ThemeInfo(ResourceDictionaryLocation.None, ResourceDictionaryLocation.SourceAssembly)]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyVersion("1.0.0.0")]


--- BaseDbConnection.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.BaseDbConnection
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using NLog;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Data.SQLite;
using System.Data.SqlServerCe;
using System.IO;
using System.Text;
using System.Threading;

#nullable disable
namespace GmmDbLib
{
  public class BaseDbConnection
  {
    private static Logger DatabaseIdGenLogger = LogManager.GetLogger("DatabaseIdGen");
    private static Logger DatabaseAccessLogger = LogManager.GetLogger("DatabaseAccess");
    public DbConnectionInfo ConnectionInfo;
    public DbProviderFactory ProviderFactory;
    public string DatabaseLocationName;
    internal DbConnection TemplateConnecton;
    internal DbConnection lastConnection;
    private int? MeterIdRangeFirstNumber = new int?();
    private int MeterIdRangeLastNumber;

    public SortedList<string, string> DatabaseIdentification { get; private set; }

    [Obsolete]
    public BaseDbConnection(MeterDbTypes DbType, string connectionString)
    {
      this.NewFromConnectionInfo(new DbConnectionInfo()
      {
        DbType = DbType,
        ConnectionString = connectionString
      });
    }

    public BaseDbConnection(DbConnectionInfo connectionInfo)
    {
      this.NewFromConnectionInfo(connectionInfo);
    }

    internal void NewFromConnectionInfo(DbConnectionInfo connectionInfo)
    {
      this.ConnectionInfo = connectionInfo;
      try
      {
        switch (connectionInfo.DbType)
        {
          case MeterDbTypes.Access:
            this.CreateConnectionOleDbFactory();
            goto case MeterDbTypes.DBISAM;
          case MeterDbTypes.NPGSQL:
            this.CreateConnectionNpgsqlFactory();
            goto case MeterDbTypes.DBISAM;
          case MeterDbTypes.SQLite:
            this.CreateConnectionSQLiteFactory();
            goto case MeterDbTypes.DBISAM;
          case MeterDbTypes.DBISAM:
            if (!string.IsNullOrEmpty(this.ConnectionInfo.DatabaseName))
              break;
            try
            {
              this.ConnectionInfo.DatabaseName = Path.GetFileNameWithoutExtension(this.ConnectionInfo.UrlOrPath);
            }
            catch
            {
            }
            break;
          case MeterDbTypes.MSSQL:
            this.CreateConnectionSqlClientFactory();
            goto case MeterDbTypes.DBISAM;
          case MeterDbTypes.LocalDB:
            this.CreateConnectionSqlClientFactoryLocalDB();
            goto case MeterDbTypes.DBISAM;
          case MeterDbTypes.Microsoft_SQL_Compact:
            this.CreateConnectionSqlCeProviderFactory();
            goto case MeterDbTypes.DBISAM;
          default:
            throw new Exception("Database type not supported!");
        }
      }
      catch (Exception ex)
      {
        throw new Exception("Create database connection error.", ex);
      }
    }

    private void CreateConnectionSQLiteFactory()
    {
      DbConnectionStringBuilder connectionStringBuilder = new DbConnectionStringBuilder();
      if (!string.IsNullOrEmpty(this.ConnectionInfo.ConnectionString))
      {
        connectionStringBuilder.ConnectionString = this.ConnectionInfo.ConnectionString;
        object obj;
        if (connectionStringBuilder.TryGetValue("Data Source", out obj))
          this.ConnectionInfo.UrlOrPath = (string) obj;
        if (connectionStringBuilder.TryGetValue("Password", out obj))
          this.ConnectionInfo.Password = (string) obj;
        connectionStringBuilder.Clear();
      }
      this.ProviderFactory = (DbProviderFactory) SQLiteFactory.Instance;
      this.TemplateConnecton = this.ProviderFactory.CreateConnection();
      connectionStringBuilder.Add("Data Source", (object) this.ConnectionInfo.UrlOrPath);
      connectionStringBuilder.Add("UTF8Encoding", (object) "True");
      connectionStringBuilder.Add("Password", (object) "meterdbpass");
      connectionStringBuilder.Add("journal mode", (object) "wal");
      connectionStringBuilder.Add("synchronous", (object) "off");
      connectionStringBuilder.Add("BinaryGUID", (object) "True");
      connectionStringBuilder.Add("FailIfMissing", (object) "True");
      this.ConnectionInfo.ConnectionString = connectionStringBuilder.ConnectionString;
      this.TemplateConnecton.ConnectionString = this.ConnectionInfo.ConnectionString;
    }

    private void CreateConnectionSqlClientFactory()
    {
      DbConnectionStringBuilder connectionStringBuilder = new DbConnectionStringBuilder();
      if (!string.IsNullOrEmpty(this.ConnectionInfo.ConnectionString))
      {
        connectionStringBuilder.ConnectionString = this.ConnectionInfo.ConnectionString;
        object obj;
        if (connectionStringBuilder.TryGetValue("Data Source", out obj))
          this.ConnectionInfo.UrlOrPath = (string) obj;
        if (connectionStringBuilder.TryGetValue("Database", out obj))
          this.ConnectionInfo.DatabaseName = (string) obj;
        if (connectionStringBuilder.TryGetValue("User Id", out obj))
          this.ConnectionInfo.UserName = (string) obj;
        if (connectionStringBuilder.TryGetValue("Password", out obj))
          this.ConnectionInfo.Password = (string) obj;
        connectionStringBuilder.Clear();
      }
      this.ProviderFactory = (DbProviderFactory) SqlClientFactory.Instance;
      this.TemplateConnecton = this.ProviderFactory.CreateConnection();
      connectionStringBuilder.Add("Data Source", (object) this.ConnectionInfo.UrlOrPath);
      connectionStringBuilder.Add("Database", (object) this.ConnectionInfo.DatabaseName);
      connectionStringBuilder.Add("User ID", (object) this.ConnectionInfo.UserName);
      connectionStringBuilder.Add("Password", (object) this.ConnectionInfo.Password);
      connectionStringBuilder.Add("Persist Security Info", (object) "True");
      this.ConnectionInfo.ConnectionString = connectionStringBuilder.ConnectionString;
      this.TemplateConnecton.ConnectionString = this.ConnectionInfo.ConnectionString;
    }

    private void CreateConnectionSqlCeProviderFactory()
    {
      this.ProviderFactory = (DbProviderFactory) SqlCeProviderFactory.Instance;
      this.TemplateConnecton = this.ProviderFactory.CreateConnection();
      this.TemplateConnecton.ConnectionString = "data source=" + this.ConnectionInfo.UrlOrPath + ";mode=Exclusive";
    }

    private void CreateConnectionSqlClientFactoryLocalDB()
    {
      DbConnectionStringBuilder connectionStringBuilder = new DbConnectionStringBuilder();
      if (!string.IsNullOrEmpty(this.ConnectionInfo.ConnectionString))
      {
        connectionStringBuilder.ConnectionString = this.ConnectionInfo.ConnectionString;
        object obj;
        if (connectionStringBuilder.TryGetValue("AttachDbFilename", out obj))
          this.ConnectionInfo.UrlOrPath = (string) obj;
        connectionStringBuilder.Clear();
      }
      this.ProviderFactory = (DbProviderFactory) SqlClientFactory.Instance;
      this.TemplateConnecton = this.ProviderFactory.CreateConnection();
      connectionStringBuilder.Add("AttachDbFilename", (object) this.ConnectionInfo.UrlOrPath);
      connectionStringBuilder.Add("Data Source", (object) "(LocalDB)\\v11.0");
      connectionStringBuilder.Add("Integrated Security", (object) "True");
      connectionStringBuilder.Add("Connect Timeout", (object) "30");
      this.TemplateConnecton.ConnectionString = connectionStringBuilder.ConnectionString;
    }

    private void CreateConnectionOleDbFactory()
    {
      DbConnectionStringBuilder connectionStringBuilder = new DbConnectionStringBuilder();
      if (!string.IsNullOrEmpty(this.ConnectionInfo.ConnectionString))
      {
        connectionStringBuilder.ConnectionString = this.ConnectionInfo.ConnectionString;
        object obj;
        if (connectionStringBuilder.TryGetValue("Data Source", out obj))
          this.ConnectionInfo.UrlOrPath = (string) obj;
        connectionStringBuilder.Clear();
      }
      this.ProviderFactory = (DbProviderFactory) OleDbFactory.Instance;
      this.TemplateConnecton = this.ProviderFactory.CreateConnection();
      connectionStringBuilder.Remove("Mode");
      connectionStringBuilder.Add("Provider", (object) "Microsoft.Jet.OLEDB.4.0");
      connectionStringBuilder.Add("User ID", (object) "");
      connectionStringBuilder.Add("Data Source", (object) this.ConnectionInfo.UrlOrPath);
      connectionStringBuilder.Add("Extended Properties", (object) "");
      connectionStringBuilder.Add("Jet OLEDB:System database", (object) "");
      connectionStringBuilder.Add("Jet OLEDB:Registry Path", (object) "");
      connectionStringBuilder.Add("Jet OLEDB:Database Password", (object) "meterdbpass");
      connectionStringBuilder.Add("Jet OLEDB:Engine Type", (object) "5");
      connectionStringBuilder.Add("Jet OLEDB:Database Locking Mode", (object) "0");
      connectionStringBuilder.Add("Jet OLEDB:Global Partial Bulk Ops", (object) "2");
      connectionStringBuilder.Add("Jet OLEDB:Global Bulk Transactions", (object) "1");
      connectionStringBuilder.Add("Jet OLEDB:New Database Password", (object) "");
      connectionStringBuilder.Add("Jet OLEDB:Create System Database", (object) "False");
      connectionStringBuilder.Add("Jet OLEDB:Encrypt Database", (object) "False");
      connectionStringBuilder.Add("Jet OLEDB:Don't Copy Locale on Compact", (object) "False");
      connectionStringBuilder.Add("Jet OLEDB:Compact Without Replica Repair", (object) "False");
      connectionStringBuilder.Add("Jet OLEDB:SFP", (object) "False");
      this.ConnectionInfo.ConnectionString = connectionStringBuilder.ConnectionString + ";Mode=ReadWrite|Share Deny None;";
      this.TemplateConnecton.ConnectionString = this.ConnectionInfo.ConnectionString;
    }

    private void CreateConnectionNpgsqlFactory()
    {
      this.ProviderFactory = (DbProviderFactory) NpgsqlFactory.Instance;
      this.TemplateConnecton = this.ProviderFactory.CreateConnection();
      DbConnectionStringBuilder connectionStringBuilder = new DbConnectionStringBuilder()
      {
        ConnectionString = this.TemplateConnecton.ConnectionString
      };
      connectionStringBuilder.Add("Server", (object) this.ConnectionInfo.UrlOrPath);
      connectionStringBuilder.Add("Database", (object) this.ConnectionInfo.DatabaseName);
      connectionStringBuilder.Add("User Id", (object) this.ConnectionInfo.UserName);
      connectionStringBuilder.Add("Password", (object) this.ConnectionInfo.Password);
      connectionStringBuilder.Add("Port", (object) "5432");
      this.ConnectionInfo.ConnectionString = connectionStringBuilder.ConnectionString;
      this.TemplateConnecton.ConnectionString = this.ConnectionInfo.ConnectionString;
    }

    public DbConnection GetNewConnection()
    {
      DbConnection connection = this.ProviderFactory.CreateConnection();
      connection.ConnectionString = this.TemplateConnecton.ConnectionString;
      if (this.ConnectionInfo.DbType == MeterDbTypes.SQLite)
        this.lastConnection = connection;
      return connection;
    }

    public string ConnectDatabase()
    {
      try
      {
        this.DatabaseLocationName = (string) null;
        StringBuilder stringBuilder = new StringBuilder();
        DbDataAdapter dataAdapter = this.GetDataAdapter("SELECT * from DatabaseIdentification", this.TemplateConnecton);
        BaseTables.DatabaseIdentificationDataTable identificationDataTable = new BaseTables.DatabaseIdentificationDataTable();
        dataAdapter.Fill((DataTable) identificationDataTable);
        if (identificationDataTable.Rows.Count <= 0)
          throw new Exception("No database identifcation.");
        this.DatabaseIdentification = new SortedList<string, string>();
        for (int index = 0; index < identificationDataTable.Rows.Count; ++index)
        {
          BaseTables.DatabaseIdentificationRow row = (BaseTables.DatabaseIdentificationRow) identificationDataTable.Rows[index];
          this.DatabaseIdentification.Add(row.InfoName, row.InfoData);
          stringBuilder.AppendLine(row.InfoName + " = " + row.InfoData);
          if (row.InfoName == "DatabaseLocationName")
            this.DatabaseLocationName = row.InfoData;
        }
        if (this.DatabaseLocationName == null)
          throw new Exception("No database location name.");
        return stringBuilder.ToString();
      }
      catch (Exception ex)
      {
        BaseDbConnection.DatabaseAccessLogger.Error("Connect database error." + Environment.NewLine + ex.Message);
        throw new Exception("Connect database error.", ex);
      }
    }

    public string GetDatabaseShortInfo()
    {
      StringBuilder stringBuilder = new StringBuilder(" on ");
      stringBuilder.Append(this.ConnectionInfo.DbType.ToString());
      if (this.ConnectionInfo.DbType == MeterDbTypes.MSSQL || this.ConnectionInfo.DbType == MeterDbTypes.NPGSQL)
      {
        if (!string.IsNullOrEmpty(this.ConnectionInfo.DatabaseName))
        {
          stringBuilder.Append("; ");
          stringBuilder.Append(this.ConnectionInfo.DatabaseName);
        }
        if (!string.IsNullOrEmpty(this.ConnectionInfo.UrlOrPath))
        {
          stringBuilder.Append("; ");
          stringBuilder.Append(this.ConnectionInfo.UrlOrPath);
        }
      }
      else if (!string.IsNullOrEmpty(this.ConnectionInfo.UrlOrPath))
      {
        stringBuilder.Append("; ");
        string str = this.ConnectionInfo.UrlOrPath;
        int num1 = 40;
        try
        {
          int num2;
          for (; str.Length > num1; str = str.Substring(num2 + 1))
          {
            num2 = str.IndexOf("\\");
            if (num2 < 0)
              break;
          }
          stringBuilder.Append(str);
        }
        catch
        {
        }
      }
      return stringBuilder.ToString();
    }

    public string GetDatabaseInfo(string LineStartText)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(LineStartText);
      stringBuilder.AppendLine("Type: ... " + this.ConnectionInfo.DbType.ToString());
      if (!string.IsNullOrEmpty(this.ConnectionInfo.DatabaseName))
      {
        stringBuilder.Append(LineStartText);
        stringBuilder.AppendLine("Name: ... " + this.ConnectionInfo.DatabaseName);
      }
      stringBuilder.Append(LineStartText);
      stringBuilder.AppendLine("Location: " + this.ConnectionInfo.UrlOrPath);
      return stringBuilder.ToString();
    }

    public string GetDatabaseFullInfo(string LineStartText)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(this.GetDatabaseInfo(LineStartText));
      stringBuilder.AppendLine();
      stringBuilder.AppendLine("*** Database settings ***");
      foreach (KeyValuePair<string, string> keyValuePair in this.DatabaseIdentification)
      {
        stringBuilder.Append(LineStartText);
        stringBuilder.Append(keyValuePair.Key);
        stringBuilder.Append("=");
        stringBuilder.AppendLine(keyValuePair.Value);
      }
      return stringBuilder.ToString();
    }

    public string[] GetAvailableLanguages()
    {
      try
      {
        using (DbConnection newConnection = this.GetNewConnection())
        {
          DbDataAdapter dataAdapter = this.GetDataAdapter("SELECT DISTINCT LanguageCode FROM OnlineTranslations", newConnection);
          DataTable dataTable = new DataTable();
          dataAdapter.Fill(dataTable);
          if (dataTable.Rows.Count > 0)
          {
            string[] availableLanguages = new string[dataTable.Rows.Count];
            for (int index = 0; index < dataTable.Rows.Count; ++index)
              availableLanguages[index] = dataTable.Rows[index][0].ToString();
            return availableLanguages;
          }
        }
      }
      catch
      {
      }
      return new string[1]{ "en" };
    }

    public bool IsProductionDatabase()
    {
      return this.DatabaseIdentification.ContainsKey(nameof (IsProductionDatabase)) && this.DatabaseIdentification[nameof (IsProductionDatabase)] == "True";
    }

    public void ExceptionIfNoSvnDatabase()
    {
      if (this.ConnectionInfo.DbType != MeterDbTypes.Access)
        throw new Exception("This function is only allowed for SVN data base.");
    }

    public DbDataAdapter GetDataAdapter(string selectSql, DbConnection connection)
    {
      DbCommand command = this.ProviderFactory.CreateCommand();
      command.CommandText = selectSql;
      command.Connection = connection;
      command.CommandTimeout = 120;
      DbDataAdapter dataAdapter = this.ProviderFactory.CreateDataAdapter();
      dataAdapter.SelectCommand = command;
      return dataAdapter;
    }

    public DbDataAdapter GetDataAdapter(
      string selectSql,
      DbConnection connection,
      out DbCommandBuilder commandBuilder)
    {
      DbCommand command = this.ProviderFactory.CreateCommand();
      command.CommandText = selectSql;
      command.Connection = connection;
      DbDataAdapter dataAdapter = this.ProviderFactory.CreateDataAdapter();
      dataAdapter.SelectCommand = command;
      commandBuilder = this.ProviderFactory.CreateCommandBuilder();
      commandBuilder.QuotePrefix = "[";
      commandBuilder.QuoteSuffix = "]";
      commandBuilder.DataAdapter = dataAdapter;
      return dataAdapter;
    }

    public DbDataAdapter GetDataAdapter(
      string selectSql,
      DbConnection connection,
      DbTransaction transaction,
      out DbCommandBuilder commandBuilder)
    {
      if (BaseDbConnection.DatabaseAccessLogger.IsTraceEnabled)
        BaseDbConnection.DatabaseAccessLogger.Trace("GetDataAdapter transaction");
      DbCommand command = this.ProviderFactory.CreateCommand();
      command.CommandText = selectSql;
      command.Connection = connection;
      command.Transaction = transaction;
      DbDataAdapter dataAdapter = this.ProviderFactory.CreateDataAdapter();
      dataAdapter.SelectCommand = command;
      commandBuilder = this.ProviderFactory.CreateCommandBuilder();
      commandBuilder.QuotePrefix = "[";
      commandBuilder.QuoteSuffix = "]";
      commandBuilder.DataAdapter = dataAdapter;
      return dataAdapter;
    }

    public DbDataAdapter GetDataAdapter(
      string selectSql,
      DbConnection connection,
      DbTransaction transaction)
    {
      return this.GetDataAdapter(selectSql, connection, transaction, out DbCommandBuilder _);
    }

    [Obsolete]
    public DbDataAdapter GetDataAdapter(DbCommand selectCommand)
    {
      DbDataAdapter dataAdapter = this.ProviderFactory.CreateDataAdapter();
      dataAdapter.SelectCommand = selectCommand;
      this.ProviderFactory.CreateCommand();
      return dataAdapter;
    }

    private DbCommand CreateCommand() => this.ProviderFactory.CreateCommand();

    public int GetNewId(string TableName) => this.GetNewIds(TableName, 1).GetNextID();

    public IdContainer GetNewIds(string TableName, int numberOfIds)
    {
      if (this.DatabaseLocationName == null)
        throw new ArgumentNullException("DatabaseLocationName");
      string selectSql = "SELECT * FROM ZRGlobalID WHERE ZRTableName = '" + TableName + "' AND DatabaseLocationName = '" + this.DatabaseLocationName + "'";
      int num1 = 0;
      IdContainer newIds;
      while (true)
      {
        try
        {
          BaseTables.ZRGlobalIDDataTable globalIdDataTable = new BaseTables.ZRGlobalIDDataTable();
          DbCommandBuilder commandBuilder;
          int zrNextNr;
          string zrFieldName;
          if (this.ConnectionInfo.DbType == MeterDbTypes.SQLite && this.lastConnection != null)
          {
            try
            {
              DbConnection lastConnection = this.lastConnection;
              DbDataAdapter dataAdapter = this.GetDataAdapter(selectSql, lastConnection, out commandBuilder);
              dataAdapter.Fill((DataTable) globalIdDataTable);
              if (globalIdDataTable.Count != 1)
              {
                num1 = 1000;
                throw new Exception("Id row not found");
              }
              zrNextNr = globalIdDataTable[0].ZRNextNr;
              zrFieldName = globalIdDataTable[0].ZRFieldName;
              int num2 = zrNextNr + numberOfIds - 1;
              if (num2 > globalIdDataTable[0].ZRLastNr)
              {
                num1 = 1000;
                throw new Exception("Out of ID range for table: " + TableName);
              }
              globalIdDataTable[0].ZRNextNr = num2 + 1;
              dataAdapter.Update((DataTable) globalIdDataTable);
            }
            catch (ObjectDisposedException ex)
            {
              num1 = 1000;
              throw new Exception("SQLite connection disposed.", (Exception) ex);
            }
          }
          else
          {
            using (DbConnection newConnection = this.GetNewConnection())
            {
              DbDataAdapter dataAdapter = this.GetDataAdapter(selectSql, newConnection, out commandBuilder);
              dataAdapter.Fill((DataTable) globalIdDataTable);
              if (globalIdDataTable.Count != 1)
              {
                num1 = 1000;
                throw new Exception("No data found! SQL: " + selectSql);
              }
              zrNextNr = globalIdDataTable[0].ZRNextNr;
              zrFieldName = globalIdDataTable[0].ZRFieldName;
              int num3 = zrNextNr + numberOfIds - 1;
              if (num3 > globalIdDataTable[0].ZRLastNr)
              {
                num1 = 1000;
                throw new Exception("Out of ID range for table: " + TableName);
              }
              globalIdDataTable[0].ZRNextNr = num3 + 1;
              dataAdapter.Update((DataTable) globalIdDataTable);
            }
          }
          newIds = new IdContainer(zrNextNr, numberOfIds, TableName, zrFieldName);
          if (BaseDbConnection.DatabaseIdGenLogger.IsTraceEnabled)
          {
            BaseDbConnection.DatabaseIdGenLogger.Trace("TableName:" + TableName + " ID:" + zrNextNr.ToString() + "+" + numberOfIds.ToString());
            break;
          }
          break;
        }
        catch (Exception ex)
        {
          if (num1 >= 10)
          {
            BaseDbConnection.DatabaseIdGenLogger.Error(nameof (TableName));
            throw new Exception("GetNewId error! " + ex.Message, ex);
          }
          Thread.Sleep(50 + new Random(DateTime.Now.Millisecond).Next(250));
          BaseDbConnection.DatabaseIdGenLogger.Warn("TableName: " + TableName + " tryCount:" + num1.ToString());
        }
        ++num1;
      }
      return newIds;
    }

    public void InsertNewID(DataRow theRow)
    {
      IdContainer newIds = this.GetNewIds(theRow.Table.TableName, 1);
      theRow[newIds.idColumnName] = (object) newIds.GetNextID();
    }

    public bool IDisInEntireRange(string TableName, int TheID)
    {
      if (this.DatabaseLocationName == null)
        throw new ArgumentNullException("DatabaseLocationName");
      BaseTables.ZRGlobalIDDataTable globalIdDataTable = new BaseTables.ZRGlobalIDDataTable();
      string selectSql = "SELECT * FROM ZRGlobalID WHERE ZRTableName = '" + TableName + "' AND DatabaseLocationName = '" + this.DatabaseLocationName + "'";
      DbCommandBuilder commandBuilder;
      if (this.ConnectionInfo.DbType == MeterDbTypes.SQLite && this.lastConnection != null)
      {
        DbConnection lastConnection = this.lastConnection;
        this.GetDataAdapter(selectSql, lastConnection, out commandBuilder).Fill((DataTable) globalIdDataTable);
      }
      else
      {
        using (DbConnection newConnection = this.GetNewConnection())
          this.GetDataAdapter(selectSql, newConnection, out commandBuilder).Fill((DataTable) globalIdDataTable);
      }
      if (globalIdDataTable.Rows.Count != 1)
        throw new Exception("Id row not found");
      return TheID >= globalIdDataTable[0].ZRFirstNr && TheID <= globalIdDataTable[0].ZRLastNr;
    }

    public bool IDisInActualRange(string TableName, int TheID)
    {
      if (this.DatabaseLocationName == null)
        throw new ArgumentNullException("DatabaseLocationName");
      BaseTables.ZRGlobalIDDataTable globalIdDataTable = new BaseTables.ZRGlobalIDDataTable();
      string selectSql = "SELECT * FROM ZRGlobalID WHERE ZRTableName = '" + TableName + "' AND DatabaseLocationName = '" + this.DatabaseLocationName + "'";
      DbCommandBuilder commandBuilder;
      if (this.ConnectionInfo.DbType == MeterDbTypes.SQLite && this.lastConnection != null)
      {
        DbConnection lastConnection = this.lastConnection;
        this.GetDataAdapter(selectSql, lastConnection, out commandBuilder).Fill((DataTable) globalIdDataTable);
      }
      else
      {
        using (DbConnection newConnection = this.GetNewConnection())
          this.GetDataAdapter(selectSql, newConnection, out commandBuilder).Fill((DataTable) globalIdDataTable);
      }
      if (globalIdDataTable.Rows.Count != 1)
        throw new Exception("Id row not found");
      return TheID >= globalIdDataTable[0].ZRFirstNr && TheID < globalIdDataTable[0].ZRNextNr;
    }

    public void CheckMeterIdNotMovedToProductionDatabase(int MeterID, DbCommand anyCommand)
    {
      try
      {
        if (this.ConnectionInfo.DbType != MeterDbTypes.MSSQL || !this.IsProductionDatabase())
          return;
        lock (this)
        {
          if (!this.MeterIdRangeFirstNumber.HasValue)
          {
            string selectSql = "SELECT * FROM ZRGlobalID WHERE ZRTableName = 'Meter' AND DatabaseLocationName = '" + this.DatabaseLocationName + "'";
            BaseTables.ZRGlobalIDDataTable globalIdDataTable = new BaseTables.ZRGlobalIDDataTable();
            this.GetDataAdapter(selectSql, anyCommand.Connection, anyCommand.Transaction).Fill((DataTable) globalIdDataTable);
            this.MeterIdRangeFirstNumber = globalIdDataTable.Count == 1 ? new int?(globalIdDataTable[0].ZRFirstNr) : throw new Exception("MeterID range not found");
            this.MeterIdRangeLastNumber = globalIdDataTable[0].ZRLastNr;
          }
          int num = MeterID;
          int? rangeFirstNumber = this.MeterIdRangeFirstNumber;
          int valueOrDefault = rangeFirstNumber.GetValueOrDefault();
          if (num < valueOrDefault & rangeFirstNumber.HasValue || MeterID > this.MeterIdRangeLastNumber)
            throw new Exception("*** This device is a developement sample! ***" + Environment.NewLine + "The device identification is not usable for production." + Environment.NewLine + "(The MeterID is not generated from production database!)");
        }
      }
      catch (Exception ex)
      {
        throw new Exception("MeterID range check error", ex);
      }
    }
  }
}


--- BaseType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.BaseType
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  [Serializable]
  public sealed class BaseType
  {
    public MeterInfo MeterInfo { get; private set; }

    public MeterType MeterType { get; private set; }

    public MTypeElectronic Data { get; private set; }

    public BaseType DeepCopy() => this.MemberwiseClone() as BaseType;

    public static BaseType GetBaseType(int meterInfoID)
    {
      MeterInfo meterInfo = MeterInfo.GetMeterInfo(meterInfoID);
      MeterType meterType = meterInfo != null ? MeterType.GetMeterType(meterInfo.MeterTypeID) : throw new Exception("Can not find the MeterInfo. MeterInfoID " + meterInfoID.ToString());
      MTypeElectronic mtypeElectronic = MTypeElectronic.GetMTypeElectronic(meterInfo.MeterTypeID);
      if (mtypeElectronic == null && meterType != null && meterInfo.MeterTypeID > 0)
        throw new Exception("Invalid type. MeterInfoID " + meterInfoID.ToString());
      return new BaseType()
      {
        MeterInfo = meterInfo,
        MeterType = meterType,
        Data = mtypeElectronic
      };
    }

    public static int? CreateType(
      string hardwareName,
      string sapNumber,
      int hardwareTypeID,
      int meterHardwareID,
      string description,
      byte[] compressedData,
      string typeCreationString,
      bool isBaseType = true)
    {
      return BaseType.CreateType(DbBasis.PrimaryDB.BaseDbConnection, hardwareName, sapNumber, hardwareTypeID, meterHardwareID, description, compressedData, typeCreationString, isBaseType);
    }

    public static int? CreateType(
      BaseDbConnection db,
      string hardwareName,
      string sapNumber,
      int hardwareTypeID,
      int meterHardwareID,
      string description,
      byte[] compressedData,
      string typeCreationString,
      bool isBaseType = true)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      int newId1;
      int newId2;
      if (isBaseType)
      {
        newId1 = db.GetNewId("MeterInfo_BASE");
        newId2 = db.GetNewId("MeterType_BASE");
      }
      else
      {
        newId1 = db.GetNewId("MeterInfo");
        newId2 = db.GetNewId("MeterType");
      }
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        using (DbTransaction dbTransaction = newConnection.BeginTransaction())
        {
          DbCommand command = newConnection.CreateCommand();
          command.Transaction = dbTransaction;
          MeterInfo.AddMeterInfo(command, newId1, meterHardwareID, newId2, sapNumber, "0", description, hardwareTypeID);
          if (compressedData != null)
          {
            MeterType.AddMeterType(command, newId2, "MTypeElectronic", hardwareName, DateTime.UtcNow, description);
            MTypeElectronic.AddMTypeElectronic(command, newId2, compressedData, typeCreationString);
          }
          dbTransaction.Commit();
          return new int?(newId1);
        }
      }
    }

    public static int? CreateType(
      OpenTransaction openTransaction,
      string hardwareName,
      string sapNumber,
      int hardwareTypeID,
      int meterHardwareID,
      string description,
      byte[] compressedData,
      string typeCreationString,
      bool isBaseType = true)
    {
      if (openTransaction.Database == null)
        throw new ArgumentNullException("Database");
      int newId1;
      int newId2;
      if (isBaseType)
      {
        newId1 = openTransaction.Database.GetNewId("MeterInfo_BASE");
        newId2 = openTransaction.Database.GetNewId("MeterType_BASE");
      }
      else
      {
        newId1 = openTransaction.Database.GetNewId("MeterInfo");
        newId2 = openTransaction.Database.GetNewId("MeterType");
      }
      DbCommand command = openTransaction.Connection.CreateCommand();
      command.Transaction = openTransaction.Transaction;
      MeterInfo.AddMeterInfo(command, newId1, meterHardwareID, newId2, sapNumber, "0", description, hardwareTypeID);
      if (compressedData != null)
      {
        MeterType.AddMeterType(command, newId2, "MTypeElectronic", hardwareName, DateTime.UtcNow, description);
        MTypeElectronic.AddMTypeElectronic(command, newId2, compressedData, typeCreationString);
      }
      return new int?(newId1);
    }

    public static void UpdateType(
      string hardwareName,
      int meterInfoID,
      int? meterTypeID,
      string sapNumber,
      int hardwareTypeID,
      string description,
      byte[] compressedData,
      string typeCreationString)
    {
      BaseType.UpdateType(DbBasis.PrimaryDB.BaseDbConnection, hardwareName, meterInfoID, meterTypeID, sapNumber, hardwareTypeID, description, compressedData, typeCreationString);
    }

    public static void UpdateType(
      BaseDbConnection db,
      string hardwareName,
      int meterInfoID,
      int? meterTypeID,
      string sapNumber,
      int hardwareTypeID,
      string description,
      byte[] compressedData,
      string typeCreationString)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      int? nullable = new int?();
      if (compressedData != null && !meterTypeID.HasValue)
        nullable = new int?(db.GetNewId("MeterType_BASE"));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        using (DbTransaction dbTransaction = newConnection.BeginTransaction())
        {
          DbCommand command = newConnection.CreateCommand();
          command.Transaction = dbTransaction;
          MeterInfo.UpdateMeterInfo(command, meterInfoID, sapNumber, description, hardwareTypeID);
          if (compressedData != null)
          {
            if (meterTypeID.HasValue)
            {
              MeterType.UpdateMeterType(command, meterTypeID.Value, DateTime.UtcNow);
              MTypeElectronic.UpdateMTypeElectronic(command, meterTypeID.Value, compressedData, typeCreationString);
            }
            else
            {
              MeterType.AddMeterType(command, nullable.Value, "MTypeElectronic", hardwareName, DateTime.UtcNow, description);
              MTypeElectronic.AddMTypeElectronic(command, nullable.Value, compressedData, typeCreationString);
            }
          }
          dbTransaction.Commit();
        }
      }
    }

    public static void DeleteType(MeterInfo meterInfo)
    {
      BaseType.DeleteType(DbBasis.PrimaryDB.BaseDbConnection, meterInfo);
    }

    public static void DeleteType(BaseDbConnection db, MeterInfo meterInfo)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (meterInfo == null)
        throw new ArgumentNullException(nameof (meterInfo));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        using (DbTransaction dbTransaction = newConnection.BeginTransaction())
        {
          DbCommand command = newConnection.CreateCommand();
          command.Transaction = dbTransaction;
          MeterInfo.DeleteMeterInfo(command, meterInfo.MeterInfoID);
          if (meterInfo.MeterTypeID > 0)
          {
            MeterType.DeleteMeterType(command, meterInfo.MeterTypeID);
            MTypeElectronic.DeleteMTypeElectronic(command, meterInfo.MeterTypeID);
          }
          dbTransaction.Commit();
        }
      }
    }
  }
}


--- DatabaseIdentification.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DatabaseIdentification
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Data;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  public static class DatabaseIdentification
  {
    public static string GetValue(BaseDbConnection db, string key)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (string.IsNullOrEmpty(key))
        throw new ArgumentNullException(nameof (key));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT InfoData FROM DatabaseIdentification WHERE InfoName=@InfoName;";
        DbUtil.AddParameter((IDbCommand) command, "@InfoName", key);
        return command.ExecuteScalar() as string;
      }
    }

    public static string GetDatabaseLocationName(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        return DatabaseIdentification.GetDatabaseLocationName(newConnection, (DbTransaction) null);
      }
    }

    public static string GetDatabaseLocationName(DbConnection connection, DbTransaction transaction)
    {
      if (connection == null)
        throw new ArgumentNullException(nameof (connection));
      DbCommand cmd = connection.State == ConnectionState.Open ? connection.CreateCommand() : throw new Exception("Connection can not be closed!");
      cmd.Transaction = transaction;
      cmd.CommandText = "SELECT InfoData FROM DatabaseIdentification WHERE InfoName=@InfoName;";
      DbUtil.AddParameter((IDbCommand) cmd, "@InfoName", "DatabaseLocationName");
      object obj = cmd.ExecuteScalar();
      return obj != null && obj != DBNull.Value ? Convert.ToString(obj) : (string) null;
    }
  }
}


--- DatabaseSelectorViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DatabaseSelectorViewModel
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Collections.Generic;
using System.IO;
using System.Windows;

#nullable disable
namespace GmmDbLib
{
  public class DatabaseSelectorViewModel : DependencyObject
  {
    public static readonly DependencyProperty SelectedDatabaseInstanceProperty = DependencyProperty.Register(nameof (SelectedDatabaseInstanceProperty), typeof (DbInstances), typeof (DatabaseSelectorViewModel), (PropertyMetadata) new FrameworkPropertyMetadata((object) DbInstances.Primary, new PropertyChangedCallback(DatabaseSelectorViewModel.DatabaseInstanceChanged)));
    public static readonly DependencyProperty SelectedDatabaseTypeProperty = DependencyProperty.Register(nameof (SelectedDatabaseTypeProperty), typeof (MeterDbTypes), typeof (DatabaseSelectorViewModel), (PropertyMetadata) new FrameworkPropertyMetadata((object) MeterDbTypes.Access, new PropertyChangedCallback(DatabaseSelectorViewModel.DatabaseTypeChanged)));
    public static readonly DependencyProperty URLorPathProperty = DependencyProperty.Register(nameof (URLorPathProperty), typeof (string), typeof (DatabaseSelectorViewModel), (PropertyMetadata) new FrameworkPropertyMetadata((object) "", new PropertyChangedCallback(DatabaseSelectorViewModel.URLoPathChanged)));
    public static readonly DependencyProperty DatabaseNameProperty = DependencyProperty.Register(nameof (DatabaseNameProperty), typeof (string), typeof (DatabaseSelectorViewModel));
    public static readonly DependencyProperty UserNameProperty = DependencyProperty.Register(nameof (UserNameProperty), typeof (string), typeof (DatabaseSelectorViewModel));
    public static readonly DependencyProperty PasswordProperty = DependencyProperty.Register(nameof (PasswordProperty), typeof (string), typeof (DatabaseSelectorViewModel));
    public static readonly DependencyProperty DatabaseInfoProperty = DependencyProperty.Register(nameof (DatabaseInfoProperty), typeof (string), typeof (DatabaseSelectorViewModel));
    public static readonly DependencyProperty PathRequestedProperty = DependencyProperty.Register(nameof (PathRequestedProperty), typeof (bool), typeof (DatabaseSelectorViewModel));
    public static readonly DependencyProperty URL_RequestedProperty = DependencyProperty.Register(nameof (URL_RequestedProperty), typeof (bool), typeof (DatabaseSelectorViewModel));
    public static readonly DependencyProperty DatabaseNameRequestedProperty = DependencyProperty.Register(nameof (DatabaseNameRequestedProperty), typeof (bool), typeof (DatabaseSelectorViewModel));
    public static readonly DependencyProperty UserNameRequestedProperty = DependencyProperty.Register(nameof (UserNameRequestedProperty), typeof (bool), typeof (DatabaseSelectorViewModel));
    public static readonly DependencyProperty PasswordRequestedProperty = DependencyProperty.Register(nameof (PasswordRequestedProperty), typeof (bool), typeof (DatabaseSelectorViewModel));
    public static readonly DependencyProperty SelectionOkProperty = DependencyProperty.Register(nameof (SelectionOkProperty), typeof (bool), typeof (DatabaseSelectorViewModel));
    private DbConnectionInfo workConnectionInfo;
    private List<DbConnectionInfo> AllConnectionInfos;
    private DbConnectionInfo ActiveConnectionInfo;
    private DbConnectionInfo localPrimaryDbConnectionInfo;
    private DbConnectionInfo localSecundaryDbConnectionInfo;

    public static void DatabaseInstanceChanged(
      DependencyObject d,
      DependencyPropertyChangedEventArgs args)
    {
      DbInstances newValue = (DbInstances) args.NewValue;
      ((DatabaseSelectorViewModel) d).SetDbInstance(newValue);
    }

    public static void DatabaseTypeChanged(
      DependencyObject d,
      DependencyPropertyChangedEventArgs args)
    {
      MeterDbTypes newValue = (MeterDbTypes) args.NewValue;
      MeterDbTypes oldValue = (MeterDbTypes) args.OldValue;
      ((DatabaseSelectorViewModel) d).SetDbType(newValue);
    }

    public List<DbInstances> DatabaseInstances { get; set; }

    public DbInstances SelectedDatabaseInstance
    {
      get
      {
        return (DbInstances) this.GetValue(DatabaseSelectorViewModel.SelectedDatabaseInstanceProperty);
      }
      set
      {
        this.SetValue(DatabaseSelectorViewModel.SelectedDatabaseInstanceProperty, (object) value);
      }
    }

    public List<MeterDbTypes> DatabaseTypes { get; set; }

    public MeterDbTypes SelectedDatabaseType
    {
      get => (MeterDbTypes) this.GetValue(DatabaseSelectorViewModel.SelectedDatabaseTypeProperty);
      set => this.SetValue(DatabaseSelectorViewModel.SelectedDatabaseTypeProperty, (object) value);
    }

    public string URLorPath
    {
      get => (string) this.GetValue(DatabaseSelectorViewModel.URLorPathProperty);
      set => this.SetValue(DatabaseSelectorViewModel.URLorPathProperty, (object) value);
    }

    public string DatabaseName
    {
      get => (string) this.GetValue(DatabaseSelectorViewModel.DatabaseNameProperty);
      set => this.SetValue(DatabaseSelectorViewModel.DatabaseNameProperty, (object) value);
    }

    public string UserName
    {
      get => (string) this.GetValue(DatabaseSelectorViewModel.UserNameProperty);
      set => this.SetValue(DatabaseSelectorViewModel.UserNameProperty, (object) value);
    }

    public string Password
    {
      get => (string) this.GetValue(DatabaseSelectorViewModel.PasswordProperty);
      set => this.SetValue(DatabaseSelectorViewModel.PasswordProperty, (object) value);
    }

    public string DatabaseInfo
    {
      get => (string) this.GetValue(DatabaseSelectorViewModel.DatabaseInfoProperty);
      set => this.SetValue(DatabaseSelectorViewModel.DatabaseInfoProperty, (object) value);
    }

    public bool PathRequested
    {
      get => (bool) this.GetValue(DatabaseSelectorViewModel.PathRequestedProperty);
      set => this.SetValue(DatabaseSelectorViewModel.PathRequestedProperty, (object) value);
    }

    public bool URL_Requested
    {
      get => (bool) this.GetValue(DatabaseSelectorViewModel.URL_RequestedProperty);
      set => this.SetValue(DatabaseSelectorViewModel.URL_RequestedProperty, (object) value);
    }

    public bool DatabaseNameRequested
    {
      get => (bool) this.GetValue(DatabaseSelectorViewModel.DatabaseNameRequestedProperty);
      set => this.SetValue(DatabaseSelectorViewModel.DatabaseNameRequestedProperty, (object) value);
    }

    public bool UserNameRequested
    {
      get => (bool) this.GetValue(DatabaseSelectorViewModel.UserNameRequestedProperty);
      set => this.SetValue(DatabaseSelectorViewModel.UserNameRequestedProperty, (object) value);
    }

    public bool PasswordRequested
    {
      get => (bool) this.GetValue(DatabaseSelectorViewModel.PasswordRequestedProperty);
      set => this.SetValue(DatabaseSelectorViewModel.PasswordRequestedProperty, (object) value);
    }

    public bool SelectionOk
    {
      get => (bool) this.GetValue(DatabaseSelectorViewModel.SelectionOkProperty);
      set => this.SetValue(DatabaseSelectorViewModel.SelectionOkProperty, (object) value);
    }

    public DatabaseSelectorViewModel(
      DbConnectionInfo activeConnectionInfo,
      List<DbConnectionInfo> allConnectionInfos)
    {
      this.AllConnectionInfos = allConnectionInfos;
      this.ActiveConnectionInfo = activeConnectionInfo;
      this.DatabaseInstances = new List<DbInstances>();
      foreach (DbInstances dbInstances in (DbInstances[]) Enum.GetValues(typeof (DbInstances)))
        this.DatabaseInstances.Add(dbInstances);
      this.DatabaseTypes = new List<MeterDbTypes>();
      foreach (MeterDbTypes meterDbTypes in (MeterDbTypes[]) Enum.GetValues(typeof (MeterDbTypes)))
        this.DatabaseTypes.Add(meterDbTypes);
      this.localPrimaryDbConnectionInfo = allConnectionInfos[0];
      this.localSecundaryDbConnectionInfo = allConnectionInfos[1];
      this.workConnectionInfo = new DbConnectionInfo(activeConnectionInfo);
      this.SetConnectionInfo(this.workConnectionInfo);
    }

    public List<string> GetDbFileExtentions()
    {
      List<string> dbFileExtentions = new List<string>();
      switch (this.SelectedDatabaseType)
      {
        case MeterDbTypes.Access:
          dbFileExtentions.Add("mdb");
          break;
        case MeterDbTypes.SQLite:
          dbFileExtentions.Add("db3");
          break;
        case MeterDbTypes.LocalDB:
          dbFileExtentions.Add("mdf");
          break;
        case MeterDbTypes.Microsoft_SQL_Compact:
          dbFileExtentions.Add("sdf");
          break;
      }
      return dbFileExtentions;
    }

    private void SetDbInstance(DbInstances newDbInstance)
    {
      if (this.workConnectionInfo != null)
      {
        if (this.workConnectionInfo.DbInstance == DbInstances.Primary)
          this.localPrimaryDbConnectionInfo = this.workConnectionInfo;
        else
          this.localSecundaryDbConnectionInfo = this.workConnectionInfo;
      }
      switch (newDbInstance)
      {
        case DbInstances.Primary:
          if (this.localPrimaryDbConnectionInfo != null)
          {
            this.workConnectionInfo = this.localPrimaryDbConnectionInfo;
            break;
          }
          this.workConnectionInfo = new DbConnectionInfo();
          this.workConnectionInfo.DbInstance = DbInstances.Primary;
          break;
        case DbInstances.Secundary:
          if (this.localSecundaryDbConnectionInfo != null)
          {
            this.workConnectionInfo = this.localSecundaryDbConnectionInfo;
          }
          else
          {
            this.workConnectionInfo = new DbConnectionInfo();
            this.workConnectionInfo.DbInstance = DbInstances.Secundary;
          }
          break;
      }
      this.SetConnectionInfo(this.workConnectionInfo);
    }

    private void SetConnectionInfo(DbConnectionInfo workConnectionInfo)
    {
      this.SelectedDatabaseInstance = workConnectionInfo.DbInstance;
      this.SelectedDatabaseType = workConnectionInfo.DbType;
      this.SetDbType(workConnectionInfo.DbType);
      this.URLorPath = workConnectionInfo.UrlOrPath;
      this.DatabaseName = workConnectionInfo.DatabaseName;
      this.UserName = workConnectionInfo.UserName;
      this.Password = workConnectionInfo.Password;
    }

    private void SetDbType(MeterDbTypes newDbType)
    {
      this.URLorPath = string.Empty;
      this.DatabaseInfo = string.Empty;
      switch (newDbType)
      {
        case MeterDbTypes.Access:
          this.PathRequested = true;
          this.URL_Requested = false;
          this.DatabaseNameRequested = false;
          this.UserNameRequested = false;
          this.PasswordRequested = false;
          break;
        case MeterDbTypes.NPGSQL:
          this.PathRequested = false;
          this.URL_Requested = true;
          this.DatabaseNameRequested = true;
          this.UserNameRequested = true;
          this.PasswordRequested = true;
          break;
        case MeterDbTypes.SQLite:
          this.PathRequested = true;
          this.URL_Requested = false;
          this.DatabaseNameRequested = false;
          this.UserNameRequested = false;
          this.PasswordRequested = false;
          break;
        case MeterDbTypes.MSSQL:
          this.PathRequested = false;
          this.URL_Requested = true;
          this.DatabaseNameRequested = true;
          this.UserNameRequested = true;
          this.PasswordRequested = true;
          break;
        case MeterDbTypes.LocalDB:
          this.PathRequested = true;
          this.URL_Requested = false;
          this.DatabaseNameRequested = false;
          this.UserNameRequested = false;
          this.PasswordRequested = false;
          break;
        case MeterDbTypes.Microsoft_SQL_Compact:
          this.PathRequested = true;
          this.URL_Requested = false;
          this.DatabaseNameRequested = false;
          this.UserNameRequested = false;
          this.PasswordRequested = false;
          break;
      }
    }

    public static void URLoPathChanged(DependencyObject d, DependencyPropertyChangedEventArgs args)
    {
      ((DatabaseSelectorViewModel) d).CheckSetOk();
    }

    public void CheckSetOk()
    {
      if (this.PathRequested)
      {
        if (File.Exists(this.URLorPath))
          this.SelectionOk = true;
        else
          this.SelectionOk = false;
      }
      else
        this.SelectionOk = true;
    }

    public string TestDatabaseConnection()
    {
      this.refreshConnectionInfo();
      this.DatabaseInfo = new BaseDbConnection(this.workConnectionInfo).ConnectDatabase();
      return this.DatabaseInfo;
    }

    public DbConnectionInfo SaveDatabaseConnection()
    {
      this.refreshConnectionInfo();
      if (this.workConnectionInfo.DbInstance == DbInstances.Primary)
      {
        DbInstance.PrimaryDb = new BaseDbConnection(this.workConnectionInfo);
        return DbInstance.PrimaryDb.ConnectionInfo;
      }
      DbInstance.SecundaryDb = new BaseDbConnection(this.workConnectionInfo);
      return DbInstance.SecundaryDb.ConnectionInfo;
    }

    private void refreshConnectionInfo()
    {
      this.workConnectionInfo.ConnectionString = string.Empty;
      this.workConnectionInfo.DbType = this.SelectedDatabaseType;
      this.workConnectionInfo.UrlOrPath = this.URLorPath;
      this.workConnectionInfo.DatabaseName = this.DatabaseName;
      this.workConnectionInfo.UserName = this.UserName;
      this.workConnectionInfo.Password = this.Password;
    }
  }
}


--- DbBasis.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DbBasis
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  public class DbBasis
  {
    public static DbBasis PrimaryDB;
    public static DbBasis SecondaryDB;
    public BaseDbConnection BaseDbConnection;

    public static DbBasis getDbObject(DbConnectionInfo connectionInfo)
    {
      BaseDbConnection baseDbConnection = new BaseDbConnection(connectionInfo);
      string connectionString = baseDbConnection.TemplateConnecton.ConnectionString;
      DbBasis dbObject;
      switch (connectionInfo.DbType)
      {
        case MeterDbTypes.Access:
          dbObject = (DbBasis) new AccessDB(connectionString);
          break;
        case MeterDbTypes.NPGSQL:
          dbObject = (DbBasis) new PostgreSQL(connectionString);
          break;
        case MeterDbTypes.SQLite:
          dbObject = (DbBasis) new SQLiteDB(connectionString);
          break;
        case MeterDbTypes.DBISAM:
          dbObject = (DbBasis) new DBISAM(connectionString);
          break;
        case MeterDbTypes.MSSQL:
          dbObject = (DbBasis) new MSSQLDB(connectionString);
          break;
        default:
          dbObject = (DbBasis) new MSSQLDB(connectionString);
          break;
      }
      dbObject.BaseDbConnection = baseDbConnection;
      return dbObject;
    }

    public static DbBasis getDbObject(MeterDbTypes DbType, string connectionString)
    {
      BaseDbConnection baseDbConnection = new BaseDbConnection(DbType, connectionString);
      string connectionString1 = baseDbConnection.TemplateConnecton.ConnectionString;
      DbBasis dbObject;
      switch (DbType)
      {
        case MeterDbTypes.Access:
          dbObject = (DbBasis) new AccessDB(connectionString1);
          break;
        case MeterDbTypes.NPGSQL:
          dbObject = (DbBasis) new PostgreSQL(connectionString1);
          break;
        case MeterDbTypes.SQLite:
          dbObject = (DbBasis) new SQLiteDB(connectionString1);
          break;
        case MeterDbTypes.DBISAM:
          dbObject = (DbBasis) new DBISAM(connectionString1);
          break;
        case MeterDbTypes.MSSQL:
          dbObject = (DbBasis) new MSSQLDB(connectionString1);
          break;
        default:
          throw new Exception("Database type not available");
      }
      dbObject.BaseDbConnection = baseDbConnection;
      return dbObject;
    }

    public DbBasis(string connectionString) => this.ConnectionString = connectionString;

    public DbBasis(BaseDbConnection newBaseDbConnection)
    {
      this.BaseDbConnection = newBaseDbConnection;
      this.ConnectionString = this.BaseDbConnection.TemplateConnecton.ConnectionString;
    }

    public string ConnectionString { get; private set; }

    [Obsolete]
    public IDbConnection GetDbConnection()
    {
      return (IDbConnection) this.BaseDbConnection.GetNewConnection();
    }

    [Obsolete]
    public virtual GmmDbLib.ZRDataAdapter ZRDataAdapter(string SqlCommand, IDbConnection Connection)
    {
      return new GmmDbLib.ZRDataAdapter(this.BaseDbConnection, this.BaseDbConnection.GetDataAdapter(SqlCommand, (DbConnection) Connection));
    }

    [Obsolete]
    public virtual GmmDbLib.ZRDataAdapter ZRDataAdapter(IDbCommand DbCommand)
    {
      return new GmmDbLib.ZRDataAdapter(this.BaseDbConnection, this.BaseDbConnection.GetDataAdapter((System.Data.Common.DbCommand) DbCommand));
    }

    [Obsolete]
    public virtual IDbCommand DbCommand(IDbConnection Connection) => Connection.CreateCommand();

    public virtual IDataReader DataReader() => throw new NotImplementedException();

    public virtual bool CreateTableStructure(List<string> Tables)
    {
      throw new NotImplementedException();
    }

    public virtual bool OptimizeTable(string TableName) => throw new NotImplementedException();

    public virtual long GetDatabaseSize() => throw new NotImplementedException();
  }
}


--- DbConnectionInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DbConnectionInfo
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Globalization;
using System.Text;

#nullable disable
namespace GmmDbLib
{
  public class DbConnectionInfo
  {
    public MeterDbTypes DbType;
    public DbInstances DbInstance;
    public string UrlOrPath;
    public string DatabaseName;
    public string UserName;
    public string Password;
    public string ConnectionString;

    public string SetupString
    {
      get
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append("DbType=" + this.DbType.ToString());
        stringBuilder.Append(";DbInstance=" + this.DbInstance.ToString());
        stringBuilder.Append(";UrlOrPath=" + this.UrlOrPath);
        if (!string.IsNullOrEmpty(this.DatabaseName))
          stringBuilder.Append(";DatabaseName=" + this.DatabaseName);
        if (!string.IsNullOrEmpty(this.UserName))
          stringBuilder.Append(";UserName=" + this.UserName);
        if (!string.IsNullOrEmpty(this.Password))
          stringBuilder.Append(";Password=" + this.scrable(this.Password));
        return stringBuilder.ToString();
      }
      set
      {
        string str1 = value;
        char[] chArray1 = new char[1]{ ';' };
        foreach (string str2 in str1.Split(chArray1))
        {
          char[] chArray2 = new char[1]{ '=' };
          string[] strArray = str2.Split(chArray2);
          switch (strArray[0])
          {
            case "DbType":
              this.DbType = (MeterDbTypes) Enum.Parse(typeof (MeterDbTypes), strArray[1], true);
              break;
            case "DbInstance":
              this.DbInstance = (DbInstances) Enum.Parse(typeof (DbInstances), strArray[1], true);
              break;
            case "UrlOrPath":
              this.UrlOrPath = strArray[1];
              break;
            case "DatabaseName":
              this.DatabaseName = strArray[1];
              break;
            case "UserName":
              this.UserName = strArray[1];
              break;
            case "Password":
              this.Password = this.descrable(strArray[1]);
              break;
          }
        }
      }
    }

    public string scrable(string inpassword)
    {
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < inpassword.Length; ++index)
      {
        int num = (int) inpassword[index];
        num ^= 21046;
        stringBuilder.Append(num.ToString("x04"));
      }
      return stringBuilder.ToString();
    }

    private string descrable(string inpassword)
    {
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        for (int startIndex = 0; startIndex < inpassword.Length; startIndex += 4)
        {
          int num = int.Parse(inpassword.Substring(startIndex, 4), NumberStyles.HexNumber) ^ 21046;
          stringBuilder.Append((char) num);
        }
        return stringBuilder.ToString();
      }
      catch
      {
        return "";
      }
    }

    public DbConnectionInfo()
    {
      this.DbType = MeterDbTypes.Access;
      this.DbInstance = DbInstances.Primary;
      this.UrlOrPath = "";
      this.DatabaseName = "";
      this.UserName = "";
      this.Password = "";
    }

    public DbConnectionInfo(DbConnectionInfo srcConnectionInfo)
    {
      this.DbType = srcConnectionInfo.DbType;
      this.DbInstance = srcConnectionInfo.DbInstance;
      this.UrlOrPath = srcConnectionInfo.UrlOrPath;
      this.DatabaseName = srcConnectionInfo.DatabaseName;
      this.UserName = srcConnectionInfo.UserName;
      this.Password = srcConnectionInfo.Password;
    }
  }
}


--- DbInstance.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DbInstance
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  public class DbInstance
  {
    public static BaseDbConnection PrimaryDb;
    public static BaseDbConnection SecundaryDb;
    public DbProviderFactory ProviderFactory;
    public DbConnection Connecton;
    public DbConnectionInfo ConnectionInfo;
  }
}


--- DbInstances.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DbInstances
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

#nullable disable
namespace GmmDbLib
{
  public enum DbInstances
  {
    NotDefined,
    Primary,
    Secundary,
  }
}


--- DBISAM.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DBISAM
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

#nullable disable
namespace GmmDbLib
{
  internal class DBISAM : DbBasis
  {
    public DBISAM(string connectionString)
      : base(connectionString)
    {
    }

    public DBISAM(BaseDbConnection newBaseDbConnection)
      : base(newBaseDbConnection)
    {
    }
  }
}


--- DbUtil.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DbUtil
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Globalization;
using System.Linq;
using System.Text;

#nullable disable
namespace GmmDbLib
{
  public static class DbUtil
  {
    public static int GetInt32(this DbDataReader reader, string columnName)
    {
      int ordinal = reader.GetOrdinal(columnName);
      return !reader.IsDBNull(ordinal) ? reader.GetInt32(ordinal) : throw new Exception("Database has invalid data! Column: " + columnName + " can not be empty (DBNull).");
    }

    public static byte[] GetByteArray(this DbDataReader reader, string columnName)
    {
      int ordinal = reader.GetOrdinal(columnName);
      return !reader.IsDBNull(ordinal) ? (byte[]) reader.GetValue(ordinal) : throw new Exception("Database has invalid data! Column: " + columnName + " can not be empty (DBNull).");
    }

    public static uint GetUInt32(this DbDataReader reader, string columnName)
    {
      int ordinal = reader.GetOrdinal(columnName);
      return !reader.IsDBNull(ordinal) ? (uint) reader.GetInt32(ordinal) : throw new Exception("Database has invalid data! Column: " + columnName + " can not be empty (DBNull).");
    }

    public static string GetString(this DbDataReader reader, string columnName)
    {
      int ordinal = reader.GetOrdinal(columnName);
      return !reader.IsDBNull(ordinal) ? reader.GetString(ordinal) : throw new Exception("Database has invalid data! Column: " + columnName + " can not be empty (DBNull).");
    }

    public static DateTime? SafeGetDateTime(this DbDataReader reader, string columnName)
    {
      int ordinal = reader.GetOrdinal(columnName);
      return !reader.IsDBNull(ordinal) ? new DateTime?(reader.GetDateTime(ordinal)) : new DateTime?();
    }

    public static string SafeGetString(this DbDataReader reader, string columnName)
    {
      int ordinal = reader.GetOrdinal(columnName);
      return !reader.IsDBNull(ordinal) ? reader.GetString(ordinal) : string.Empty;
    }

    public static double SafeGetDouble(this DbDataReader reader, string columnName)
    {
      int ordinal = reader.GetOrdinal(columnName);
      return !reader.IsDBNull(ordinal) ? reader.GetDouble(ordinal) : 0.0;
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, string value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.DbType = DbType.String;
      parameter.ParameterName = parameterName;
      parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, Guid value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.DbType = DbType.Guid;
      parameter.ParameterName = parameterName;
      parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, int value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Int32;
      parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, bool value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Boolean;
      parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, byte[] value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Binary;
      if (value == null)
        parameter.Value = (object) DBNull.Value;
      else
        parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, uint value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.Int32;
      parameter.Value = (object) value;
      cmd.Parameters.Add((object) parameter);
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, DateTime? value)
    {
      if (value.HasValue)
      {
        DbUtil.AddParameter(cmd, parameterName, value.Value);
      }
      else
      {
        IDbDataParameter parameter = cmd.CreateParameter();
        parameter.ParameterName = parameterName;
        parameter.DbType = DbType.DateTime;
        parameter.Value = (object) DBNull.Value;
        cmd.Parameters.Add((object) parameter);
      }
    }

    public static void AddParameter(IDbCommand cmd, string parameterName, DateTime value)
    {
      IDbDataParameter parameter = cmd.CreateParameter();
      parameter.ParameterName = parameterName;
      parameter.DbType = DbType.DateTime;
      parameter.Value = (object) DbUtil.RemoveMilliseconds(value);
      cmd.Parameters.Add((object) parameter);
    }

    public static DateTime RemoveMilliseconds(DateTime dateTime)
    {
      return new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, dateTime.Hour, dateTime.Minute, dateTime.Second);
    }

    public static string ByteArrayToHexString(byte[] buffer)
    {
      return buffer == null ? string.Empty : DbUtil.ByteArrayToHexString(buffer, 0, buffer.Length);
    }

    public static string ByteArrayToHexString(byte[] buffer, int startIndex)
    {
      return buffer == null ? string.Empty : DbUtil.ByteArrayToHexString(buffer, startIndex, buffer.Length - startIndex);
    }

    public static string ByteArrayToHexString(byte[] buffer, int startIndex, int length)
    {
      if (buffer == null)
        return string.Empty;
      char[] chArray = new char[length * 2];
      int num1 = 0;
      int index = 0;
      while (num1 < length)
      {
        byte num2 = (byte) ((uint) buffer[startIndex + num1] >> 4);
        chArray[index] = num2 > (byte) 9 ? (char) ((int) num2 + 55) : (char) ((int) num2 + 48);
        byte num3 = (byte) ((uint) buffer[startIndex + num1] & 15U);
        int num4;
        chArray[num4 = index + 1] = num3 > (byte) 9 ? (char) ((int) num3 + 55) : (char) ((int) num3 + 48);
        ++num1;
        index = num4 + 1;
      }
      return new string(chArray, 0, chArray.Length);
    }

    public static SortedList<string, string> KeyValueStringListToSortedList(
      string keyValueStringList)
    {
      SortedList<string, string> sortedList = new SortedList<string, string>();
      string[] strArray1 = keyValueStringList.Split(new char[1]
      {
        ';'
      }, StringSplitOptions.RemoveEmptyEntries);
      if (strArray1 != null)
      {
        foreach (string str in strArray1)
        {
          if (!string.IsNullOrEmpty(str))
          {
            string[] strArray2 = str.Split(new char[1]
            {
              '='
            }, StringSplitOptions.RemoveEmptyEntries);
            if (strArray2 != null)
            {
              if (strArray2.Length == 1)
                sortedList.Add(strArray2[0], (string) null);
              else if (strArray2.Length > 1)
                sortedList.Add(strArray2[0], strArray2[1]);
            }
          }
        }
      }
      return sortedList;
    }

    public static string SortedListToKeyValueStringList(SortedList<string, string> keyValueList)
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (keyValueList != null && keyValueList.Count > 0)
      {
        foreach (KeyValuePair<string, string> keyValue in keyValueList)
        {
          string str1 = keyValue.Key.Trim();
          if (str1.Length < 1)
            throw new Exception("Illegal empty key");
          stringBuilder.Append(";" + str1);
          string str2 = (string) null;
          if (keyValue.Value != null)
            str2 = keyValue.Value.Trim();
          if (!string.IsNullOrEmpty(str2))
            stringBuilder.Append("=" + str2);
        }
        stringBuilder.Append(';');
      }
      return stringBuilder.ToString();
    }

    public static List<KeyValuePair<string, string>> KeyValueStringListToKeyValuePairList(
      string keyValueStringList)
    {
      List<KeyValuePair<string, string>> keyValuePairList = new List<KeyValuePair<string, string>>();
      string[] strArray1 = keyValueStringList.Split(new char[1]
      {
        ';'
      }, StringSplitOptions.RemoveEmptyEntries);
      if (strArray1 != null)
      {
        foreach (string str in strArray1)
        {
          if (!string.IsNullOrEmpty(str))
          {
            string[] strArray2 = str.Split(new char[1]
            {
              '='
            }, StringSplitOptions.RemoveEmptyEntries);
            if (strArray2 != null)
            {
              if (strArray2.Length == 1)
                keyValuePairList.Add(new KeyValuePair<string, string>(strArray2[0], (string) null));
              else if (strArray2.Length > 1)
                keyValuePairList.Add(new KeyValuePair<string, string>(strArray2[0], strArray2[1]));
            }
          }
        }
      }
      return keyValuePairList;
    }

    public static string KeyValuePairListToKeyValueStringList(
      List<KeyValuePair<string, string>> keyValueList)
    {
      List<KeyValuePair<string, string>> list = keyValueList.OrderBy<KeyValuePair<string, string>, string>((System.Func<KeyValuePair<string, string>, string>) (x => x.Key)).ToList<KeyValuePair<string, string>>();
      StringBuilder stringBuilder = new StringBuilder();
      if (list != null && list.Count > 0)
      {
        foreach (KeyValuePair<string, string> keyValuePair in list)
        {
          string str1 = keyValuePair.Key.Trim();
          if (str1.Length < 1)
            throw new Exception("Illegal empty key");
          stringBuilder.Append(";" + str1);
          string str2 = (string) null;
          if (keyValuePair.Value != null)
            str2 = keyValuePair.Value.Trim();
          if (!string.IsNullOrEmpty(str2))
            stringBuilder.Append("=" + str2);
        }
        stringBuilder.Append(';');
      }
      return stringBuilder.ToString();
    }

    public static string GetValueForKey(string key, SortedList<string, string> keyValueList)
    {
      int index = keyValueList.IndexOfKey(key);
      return index < 0 ? (string) null : keyValueList.Values[index];
    }

    public static string GetValueForKey(
      string key,
      List<KeyValuePair<string, string>> keyValuePairList)
    {
      List<KeyValuePair<string, string>> all = keyValuePairList.FindAll((Predicate<KeyValuePair<string, string>>) (x => x.Key == key));
      if (all.Count == 0)
        return (string) null;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (KeyValuePair<string, string> keyValuePair in all)
        stringBuilder.Append(";" + keyValuePair.Value);
      stringBuilder.Append(";");
      return stringBuilder.ToString();
    }

    public static string GetOneValueForKey(
      string key,
      List<KeyValuePair<string, string>> keyValuePairList)
    {
      List<KeyValuePair<string, string>> all = keyValuePairList.FindAll((Predicate<KeyValuePair<string, string>>) (x => x.Key == key));
      if (all.Count == 0)
        throw new Exception("Value for key: '" + key + "' not available");
      return all.Count <= 1 ? all[0].Value : throw new Exception("Value for key: '" + key + "' not unique");
    }

    public static bool IsKeyAvailable(
      string key,
      List<KeyValuePair<string, string>> keyValuePairList)
    {
      return keyValuePairList.FindAll((Predicate<KeyValuePair<string, string>>) (x => x.Key == key)).Count > 0;
    }

    public static double? GetDoubleForKey(
      string key,
      List<KeyValuePair<string, string>> keyValuePairList)
    {
      List<KeyValuePair<string, string>> all = keyValuePairList.FindAll((Predicate<KeyValuePair<string, string>>) (x => x.Key == key));
      if (all.Count == 0)
        return new double?();
      if (all.Count > 1)
        throw new Exception("Value for key: '" + key + "' not unique");
      return new double?(double.Parse(all[0].Value, (IFormatProvider) CultureInfo.InvariantCulture));
    }

    public static ushort? GetUshortForKey(
      string key,
      List<KeyValuePair<string, string>> keyValuePairList)
    {
      List<KeyValuePair<string, string>> all = keyValuePairList.FindAll((Predicate<KeyValuePair<string, string>>) (x => x.Key == key));
      if (all.Count == 0)
        return new ushort?();
      return all.Count <= 1 ? new ushort?(ushort.Parse(all[0].Value)) : throw new Exception("Value for key: '" + key + "' not unique");
    }

    public static ushort? GetHexUshortForKey(
      string key,
      List<KeyValuePair<string, string>> keyValuePairList)
    {
      List<KeyValuePair<string, string>> all = keyValuePairList.FindAll((Predicate<KeyValuePair<string, string>>) (x => x.Key == key));
      if (all.Count == 0)
        return new ushort?();
      return all.Count <= 1 ? new ushort?(ushort.Parse(all[0].Value, NumberStyles.HexNumber)) : throw new Exception("Value for key: '" + key + "' not unique");
    }
  }
}


--- Device.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.Device
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using GmmDbLib.TableManagers;
using System;
using System.Data;
using System.Data.Common;
using System.Threading.Tasks;
using ZENNER.CommonLibrary;

#nullable disable
namespace GmmDbLib
{
  public static class Device
  {
    private static bool isRunning;

    public static event EventHandler<BaseTables.MeterRow> MeterFound;

    public static event EventHandler SearchDone;

    public static DateTime? Save(
      BaseDbConnection db,
      int meterID,
      int meterInfoID,
      uint hardwareTypeID_OR_firmwareVersion,
      string serialNr,
      string orderNr,
      byte[] deviceMemory,
      bool isSaveVersionOld)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (meterID <= 0)
        throw new ArgumentException("MeterID <= 0 not allowed for backup");
      if (hardwareTypeID_OR_firmwareVersion == 0U)
        throw new ArgumentException("hardwareTypeID is zero");
      if (string.IsNullOrEmpty(serialNr))
        throw new ArgumentNullException("serialNr is incorrect");
      if (deviceMemory == null)
        throw new ArgumentNullException("deviceMemory is NULL");
      if (serialNr == null)
        serialNr = string.Empty;
      DateTime utcNow = DateTime.UtcNow;
      DateTime dateTime = utcNow.AddMilliseconds((double) (utcNow.Millisecond * -1));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbTransaction transaction = newConnection.BeginTransaction();
        DbDataAdapter dataAdapter1 = db.GetDataAdapter("SELECT * FROM Meter WHERE MeterId = " + meterID.ToString(), newConnection, transaction);
        BaseTables.MeterDataTable meterDataTable = new BaseTables.MeterDataTable();
        dataAdapter1.Fill((DataTable) meterDataTable);
        if (meterDataTable.Rows.Count != 1)
        {
          ZRGlobalID.CheckID(newConnection, transaction, "Meter", "MeterID", meterID);
          BaseTables.MeterRow meterRow = meterDataTable.NewMeterRow();
          meterRow.MeterID = meterID;
          meterRow.MeterInfoID = meterInfoID;
          meterRow.ProductionDate = dateTime;
          meterRow.SerialNr = serialNr;
          meterRow.OrderNr = orderNr;
          meterDataTable.AddMeterRow(meterRow);
          MeterChanges.UpdateMeterRowChanges(db, meterRow, dataAdapter1);
        }
        else
        {
          meterDataTable[0].MeterInfoID = meterInfoID;
          meterDataTable[0].SerialNr = serialNr;
          if (!string.IsNullOrEmpty(orderNr))
            meterDataTable[0].OrderNr = orderNr;
          MeterChanges.UpdateMeterRowChanges(db, meterDataTable[0], dataAdapter1);
        }
        DbDataAdapter dataAdapter2 = db.GetDataAdapter("SELECT * FROM MeterData", newConnection, transaction);
        BaseTables.MeterDataDataTable meterDataDataTable = new BaseTables.MeterDataDataTable();
        BaseTables.MeterDataRow row = meterDataDataTable.NewMeterDataRow();
        row.MeterID = meterID;
        row.PValue = hardwareTypeID_OR_firmwareVersion.ToString();
        row.TimePoint = dateTime;
        if (isSaveVersionOld)
        {
          row.PValueID = 1;
        }
        else
        {
          FirmwareVersion firmwareVersion = new FirmwareVersion(hardwareTypeID_OR_firmwareVersion);
          row.PValueID = 50000 + (int) firmwareVersion.Type;
        }
        row.PValueBinary = deviceMemory;
        meterDataDataTable.AddMeterDataRow(row);
        dataAdapter2.Update((DataTable) meterDataDataTable);
        transaction.Commit();
        return new DateTime?(dateTime);
      }
    }

    public static void StartSearch(BaseDbConnection db, DeviceSearchFilter filter, bool useFilter = true)
    {
      if (Device.isRunning)
        return;
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (filter == null)
        throw new ArgumentNullException(nameof (filter));
      Device.isRunning = true;
      Task.Factory.StartNew((Action) (() =>
      {
        try
        {
          using (DbConnection newConnection = db.GetNewConnection())
          {
            newConnection.Open();
            DbCommand command = newConnection.CreateCommand();
            if (useFilter)
            {
              if (!filter.IsOldVersion)
              {
                command.CommandText = "SELECT m.MeterID, m.MeterInfoID, m.SerialNr, m.ProductionDate, m.ApprovalDate, m.OrderNr\r\n                                                FROM Meter AS m INNER JOIN MeterData AS md ON m.MeterID = md.MeterID\r\n                                                WHERE md.PValueID = @PValueID";
                DbUtil.AddParameter((IDbCommand) command, "PValueID", (int) (50000 + filter.FwType));
                if (!string.IsNullOrEmpty(filter.Serialnumber))
                {
                  command.CommandText += " AND m.SerialNr LIKE @SerialNr";
                  DbUtil.AddParameter((IDbCommand) command, "SerialNr", filter.Serialnumber);
                }
                if (!string.IsNullOrEmpty(filter.MeterID))
                {
                  command.CommandText += " AND m.MeterID=@MeterID";
                  DbUtil.AddParameter((IDbCommand) command, "MeterID", filter.MeterID);
                }
                if (!string.IsNullOrEmpty(filter.OrderNumber))
                {
                  command.CommandText += " AND m.OrderNr=@OrderNr";
                  DbUtil.AddParameter((IDbCommand) command, "OrderNr", filter.OrderNumber);
                }
                DateTime dateTime;
                DateTime? nullable;
                if (filter.ProductionStartDate.HasValue && filter.ProductionEndDate.HasValue)
                {
                  command.CommandText += " AND (m.ProductionDate BETWEEN @ProductionStartDate AND @ProductionEndDate)";
                  DbCommand cmd1 = command;
                  dateTime = filter.ProductionStartDate.Value;
                  DateTime universalTime1 = dateTime.ToUniversalTime();
                  DbUtil.AddParameter((IDbCommand) cmd1, "ProductionStartDate", universalTime1);
                  DbCommand cmd2 = command;
                  nullable = filter.ProductionEndDate;
                  dateTime = nullable.Value;
                  DateTime universalTime2 = dateTime.ToUniversalTime();
                  DbUtil.AddParameter((IDbCommand) cmd2, "ProductionEndDate", universalTime2);
                }
                nullable = filter.ApprovalStartDate;
                int num;
                if (nullable.HasValue)
                {
                  nullable = filter.ApprovalEndDate;
                  num = nullable.HasValue ? 1 : 0;
                }
                else
                  num = 0;
                if (num != 0)
                {
                  command.CommandText += " AND (m.ApprovalDate BETWEEN @ApprovalStartDate AND @ApprovalEndDate)";
                  DbCommand cmd3 = command;
                  nullable = filter.ApprovalStartDate;
                  dateTime = nullable.Value;
                  DateTime universalTime3 = dateTime.ToUniversalTime();
                  DbUtil.AddParameter((IDbCommand) cmd3, "ApprovalStartDate", universalTime3);
                  DbCommand cmd4 = command;
                  nullable = filter.ApprovalEndDate;
                  dateTime = nullable.Value;
                  DateTime universalTime4 = dateTime.ToUniversalTime();
                  DbUtil.AddParameter((IDbCommand) cmd4, "ApprovalEndDate", universalTime4);
                }
                command.CommandText += " GROUP BY m.MeterID, m.MeterInfoID, m.SerialNr, m.ProductionDate, m.ApprovalDate, m.OrderNr;";
              }
              else
              {
                command.CommandText = db.ConnectionInfo.DbType != MeterDbTypes.Access ? "SELECT DISTINCT m.MeterID, m.MeterInfoID, m.SerialNr, m.ProductionDate, m.ApprovalDate, m.OrderNr \r\n                                            FROM Meter as m, MeterData as md, HardwareType as ht   \r\n                                            WHERE md.PValueID = 1 AND m.MeterID=md.MeterID AND md.PValue=CAST(ht.HardwareTypeID AS varchar)" : "SELECT DISTINCT m.MeterID, m.MeterInfoID, m.SerialNr, m.ProductionDate, m.ApprovalDate, m.OrderNr \r\n                                            FROM Meter as m, MeterData as md, HardwareType as ht   \r\n                                            WHERE md.PValueID = 1 AND m.MeterID=md.MeterID AND CINT(TRIM(md.PValue))=ht.HardwareTypeID";
                if (!string.IsNullOrEmpty(filter.HardwareName))
                {
                  command.CommandText += " AND ht.HardwareName = @HardwareName";
                  DbUtil.AddParameter((IDbCommand) command, "HardwareName", filter.HardwareName);
                }
                if (!string.IsNullOrEmpty(filter.Serialnumber))
                {
                  command.CommandText += " AND m.SerialNr  LIKE @SerialNr";
                  DbUtil.AddParameter((IDbCommand) command, "SerialNr", filter.Serialnumber);
                }
                if (!string.IsNullOrEmpty(filter.OrderNumber))
                {
                  command.CommandText += " AND m.OrderNr=@OrderNr";
                  DbUtil.AddParameter((IDbCommand) command, "OrderNr", filter.OrderNumber);
                }
                if (!string.IsNullOrEmpty(filter.MeterID))
                {
                  command.CommandText += " AND m.MeterID=@MeterID";
                  DbUtil.AddParameter((IDbCommand) command, "MeterID", filter.MeterID);
                }
                DateTime dateTime;
                DateTime? nullable;
                if (filter.ProductionStartDate.HasValue && filter.ProductionEndDate.HasValue)
                {
                  command.CommandText += " AND (m.ProductionDate BETWEEN @ProductionStartDate AND @ProductionEndDate)";
                  DbCommand cmd5 = command;
                  dateTime = filter.ProductionStartDate.Value;
                  DateTime universalTime5 = dateTime.ToUniversalTime();
                  DbUtil.AddParameter((IDbCommand) cmd5, "ProductionStartDate", universalTime5);
                  DbCommand cmd6 = command;
                  nullable = filter.ProductionEndDate;
                  dateTime = nullable.Value;
                  DateTime universalTime6 = dateTime.ToUniversalTime();
                  DbUtil.AddParameter((IDbCommand) cmd6, "ProductionEndDate", universalTime6);
                }
                nullable = filter.ApprovalStartDate;
                int num;
                if (nullable.HasValue)
                {
                  nullable = filter.ApprovalEndDate;
                  num = nullable.HasValue ? 1 : 0;
                }
                else
                  num = 0;
                if (num != 0)
                {
                  command.CommandText += " AND (m.ApprovalDate BETWEEN @ApprovalStartDate AND @ApprovalEndDate)";
                  DbCommand cmd7 = command;
                  nullable = filter.ApprovalStartDate;
                  dateTime = nullable.Value;
                  DateTime universalTime7 = dateTime.ToUniversalTime();
                  DbUtil.AddParameter((IDbCommand) cmd7, "ApprovalStartDate", universalTime7);
                  DbCommand cmd8 = command;
                  nullable = filter.ApprovalEndDate;
                  dateTime = nullable.Value;
                  DateTime universalTime8 = dateTime.ToUniversalTime();
                  DbUtil.AddParameter((IDbCommand) cmd8, "ApprovalEndDate", universalTime8);
                }
              }
            }
            else
            {
              command.CommandText = "SELECT DISTINCT m.MeterID, m.MeterInfoID, m.SerialNr, m.ProductionDate, m.ApprovalDate, m.OrderNr\r\n                                                FROM Meter AS m INNER JOIN MeterData AS md ON m.MeterID = md.MeterID\r\n                                                WHERE ";
              if (!string.IsNullOrEmpty(filter.MeterID))
              {
                command.CommandText += " m.MeterID=@MeterID";
                DbUtil.AddParameter((IDbCommand) command, "MeterID", filter.MeterID);
              }
            }
            DbDataReader dbDataReader = command.ExecuteReader();
            if (!dbDataReader.HasRows)
              return;
            BaseTables.MeterDataTable meterDataTable = new BaseTables.MeterDataTable();
            while (dbDataReader.Read() && Device.isRunning)
            {
              BaseTables.MeterRow e = meterDataTable.NewMeterRow();
              foreach (DataColumn column in (InternalDataCollectionBase) meterDataTable.Columns)
                e[column.ColumnName] = dbDataReader[column.ColumnName];
              if (Device.MeterFound != null)
                Device.MeterFound((object) null, e);
            }
          }
        }
        finally
        {
          Device.isRunning = false;
          if (Device.SearchDone != null)
            Device.SearchDone((object) null, (EventArgs) null);
        }
      }));
    }

    public static void CancelSearch() => Device.isRunning = false;
  }
}


--- DeviceSearchFilter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.DeviceSearchFilter
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using ZENNER.CommonLibrary;

#nullable disable
namespace GmmDbLib
{
  public sealed class DeviceSearchFilter
  {
    public DateTime? ProductionStartDate { get; set; }

    public DateTime? ProductionEndDate { get; set; }

    public DateTime? ApprovalStartDate { get; set; }

    public DateTime? ApprovalEndDate { get; set; }

    public string Serialnumber { get; set; }

    public string MeterID { get; set; }

    public string OrderNumber { get; set; }

    public string HardwareName { get; set; }

    public FirmwareType FwType { get; set; }

    public bool IsOldVersion { get; set; }

    public DeviceSearchFilter() => this.IsOldVersion = false;
  }
}


--- EnumTranslator.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.EnumTranslator
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;

#nullable disable
namespace GmmDbLib
{
  public static class EnumTranslator
  {
    public static string GetTranslatedEnumName(object EnumObject)
    {
      string str = EnumObject.GetType().ToString();
      string defaultText = EnumObject.ToString();
      return Ot.GetTranslatedLanguageText("EnumName_", str + "_" + defaultText, defaultText);
    }

    public static string GetTranslatedEnumName(object EnumObject, string defaultName)
    {
      return Ot.GetTranslatedLanguageText("EnumName_", EnumObject.GetType().ToString() + "_" + EnumObject.ToString(), defaultName);
    }

    public static string GetTranslatedEnumDescription(object EnumObject)
    {
      string str = EnumObject.GetType().ToString();
      string defaultText = EnumObject.ToString();
      return Ot.GetTranslatedLanguageText("EnumDesc_", str + "_" + defaultText, defaultText);
    }

    public static string[] GetTranslatedEnumNames(Type EnumType)
    {
      string[] names = Enum.GetNames(EnumType);
      string str = EnumType.ToString();
      string[] translatedEnumNames = new string[names.Length];
      for (int index = 0; index < names.Length; ++index)
      {
        string defaultText = names[index];
        translatedEnumNames[index] = Ot.GetTranslatedLanguageText("EnumName_", str + "_" + defaultText, defaultText);
      }
      return translatedEnumNames;
    }
  }
}


--- HardwareName.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.HardwareName
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

#nullable disable
namespace GmmDbLib
{
  public static class HardwareName
  {
    public const string EDC_mBus = "EDC_mBus";
    public const string EDC_Radio = "EDC_Radio";
    public const string PDC_WmBus = "PDC_WmBus";
    public const string Saarius = "Saarius";
    public const string SmokeDetector = "SmokeDetector";
    public const string TH = "TH";
    public const string WaveFlow = "WaveFlow";
    public const string WR4 = "WR4";
    public const string Zelsius = "Zelsius";
    public const string zelsius_C5 = "zelsius C5";
    public const string HCA_LoRa = "HCA_LoRa";
    public const string PDC_LoRa = "PDC_LoRa";
    public const string IUW = "IUW";
    public const string SD_LoRa = "SD_LoRa";
    public const string EDC_LoRa868 = "EDC_LoRa868";
    public const string EDC_LoRa470 = "EDC_LoRa470";
    public const string EDC_LoRa915_US = "EDC_LoRa915_US";
    public const string EDC_LoRa915_BR = "EDC_LoRa915_BR";
    public const string Micro_LoRa = "Micro_LoRa";
    public const string Micro_wMBus = "Micro_wMBus";
    public const string EDC_ModBus = "EDC_ModBus";
    public const string TH_LoRa = "TH_LoRa";
    public const string TH_sensor_wMBus = "TH_sensor_wMBus";
    public const string EDC_NBIoT = "EDC_NBIoT";
    public const string NFC_LoRa = "NFC_LoRa";
    public const string NFC_wMBus = "NFC_wMBus";
    public const string Micro_LoRa_LL = "Micro_LoRa_LL";
    public const string Micro_wMBus_LL = "Micro_wMBus_LL";
    public const string EDC_mBus_Modbus = "EDC_mBus_Modbus";
    public const string EDC_mBus_CJ188 = "EDC_mBus_CJ188";
    public const string EDC_RS485_Modbus = "EDC_RS485_Modbus";
    public const string EDC_RS485_CJ188 = "EDC_RS485_CJ188";
    public const string EDC_wMBus = "EDC_wMBus";
    public const string EDC_NBIoT_LCSW = "EDC_NBIoT_LCSW";
    public const string EDC_NBIoT_YJSW = "EDC_NBIoT_YJSW";
    public const string PDC_LoRa_868MHz_SD = "PDC_LoRa_868MHz_SD";
    public const string EDC_NBIoT_FSNH = "EDC_NBIoT_FSNH";
    public const string EDC_NBIoT_XM = "EDC_NBIoT_XM";
    public const string EDC_NBIoT_Israel = "EDC_NBIoT_Israel";
    public const string EDC_NBIoT_TaiWan = "EDC_NBIoT_TaiWan";
    public const string PDC_LoRa_915 = "PDC_LoRa_915";
    public const string UDC_LoRa_915 = "UDC_LoRa_915";
    public const string M7plus = "M7plus";
    public const string Micro_radio3_LoRa = "Micro_radio3_LoRa";
  }
}


--- HardwareType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.HardwareType
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;

#nullable disable
namespace GmmDbLib
{
  public class HardwareType
  {
    public int HardwareTypeID { get; private set; }

    public int MapID { get; private set; }

    public uint FirmwareVersion { get; private set; }

    public string HardwareName { get; private set; }

    public int HardwareVersion { get; private set; }

    public string HardwareResource { get; private set; }

    public string Description { get; private set; }

    public override string ToString()
    {
      return "ID: " + this.HardwareTypeID.ToString() + ", " + (string.IsNullOrEmpty(this.Description) ? "" : this.Description);
    }

    public static BaseTables.HardwareTypeRow GetHardwareType(
      BaseDbConnection db,
      int hardwareTypeID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (hardwareTypeID <= 0)
        throw new ArgumentException(nameof (hardwareTypeID));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM HardwareType WHERE HardwareTypeID=@HardwareTypeID;", newConnection);
        BaseTables.HardwareTypeDataTable source = new BaseTables.HardwareTypeDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@HardwareTypeID", hardwareTypeID);
        return dataAdapter.Fill((DataTable) source) != 1 ? (BaseTables.HardwareTypeRow) null : source.ToList<BaseTables.HardwareTypeRow>()[0];
      }
    }

    public static BaseTables.HardwareTypeRow GetHardwareType(
      BaseDbConnection db,
      string description,
      int firmwareVersion)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (description == null)
        throw new ArgumentNullException(nameof (description));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT HardwareTypeID, MapID, HardwareName, HardwareVersion, HardwareResource FROM HardwareType WHERE Description LIKE @Description AND FirmwareVersion=@FirmwareVersion;", newConnection);
        BaseTables.HardwareTypeDataTable source = new BaseTables.HardwareTypeDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@Description", description);
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@FirmwareVersion", firmwareVersion);
        int num = dataAdapter.Fill((DataTable) source);
        if (num == 0)
          return (BaseTables.HardwareTypeRow) null;
        if (num > 1)
          throw new Exception("It exists more as one hardware type for firmware = 0x" + firmwareVersion.ToString("X4") + " and description = " + description);
        return source.ToList<BaseTables.HardwareTypeRow>()[0];
      }
    }

    public static List<HardwareType> LoadHardwareType(string hardwareName)
    {
      return HardwareType.LoadHardwareType(DbBasis.PrimaryDB.BaseDbConnection, hardwareName);
    }

    public static List<HardwareType> LoadHardwareType(BaseDbConnection db, string hardwareName)
    {
      return HardwareType.LoadHardwareType(DbBasis.PrimaryDB.BaseDbConnection, new string[1]
      {
        hardwareName
      });
    }

    public static List<HardwareType> LoadHardwareType(string[] hardwareName)
    {
      return HardwareType.LoadHardwareType(DbBasis.PrimaryDB.BaseDbConnection, hardwareName);
    }

    public static List<HardwareType> LoadHardwareType(BaseDbConnection db, string[] hardwareName)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT * FROM HardwareType WHERE (";
        for (int index = 0; index < hardwareName.Length; ++index)
        {
          DbCommand dbCommand = command;
          dbCommand.CommandText = dbCommand.CommandText + "HardwareName = @HardwareName" + index.ToString();
          DbUtil.AddParameter((IDbCommand) command, "HardwareName" + index.ToString(), hardwareName[index]);
          if (index + 1 < hardwareName.Length)
            command.CommandText += " OR ";
        }
        command.CommandText += ") ORDER BY HardwareTypeID DESC;";
        List<HardwareType> hardwareTypeList = new List<HardwareType>();
        using (DbDataReader reader = command.ExecuteReader())
        {
          while (reader.Read())
            hardwareTypeList.Add(new HardwareType()
            {
              HardwareTypeID = reader.GetInt32("HardwareTypeID"),
              MapID = reader.GetInt32("MapID"),
              FirmwareVersion = reader.GetUInt32("FirmwareVersion"),
              HardwareName = reader.GetString("HardwareName"),
              HardwareVersion = reader.GetInt32("HardwareVersion"),
              HardwareResource = reader.SafeGetString("HardwareResource"),
              Description = reader.SafeGetString("Description")
            });
        }
        return hardwareTypeList;
      }
    }
  }
}


--- IdContainer.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.IdContainer
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;

#nullable disable
namespace GmmDbLib
{
  public class IdContainer
  {
    public readonly string idTableName;
    public readonly string idColumnName;
    private readonly int startId;
    private int numberOfIds;
    private int usedOffset;

    internal IdContainer(int startId, int numberOfIds, string idTableName, string idColumnName)
    {
      this.idTableName = idTableName;
      this.idColumnName = idColumnName;
      this.startId = startId;
      this.numberOfIds = numberOfIds;
      this.usedOffset = 0;
    }

    public int GetNextID()
    {
      if (this.usedOffset >= this.numberOfIds)
        throw new Exception("No additional id available");
      int nextId = this.startId + this.usedOffset;
      ++this.usedOffset;
      return nextId;
    }

    public void AddNumberOfIds(IdContainer IdsToAdd)
    {
      if (this.startId + this.numberOfIds != IdsToAdd.startId)
        throw new Exception("Illegal id combination");
      this.numberOfIds += IdsToAdd.numberOfIds;
    }

    public int NumberOfUnusedIds => this.numberOfIds - this.usedOffset;

    public int LastId => this.startId + this.numberOfIds;
  }
}


--- Location.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.Location
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  public static class Location
  {
    public static List<ZENNER.CommonLibrary.Entities.Location> LoadLocation(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT * FROM Location;";
        List<ZENNER.CommonLibrary.Entities.Location> locationList = new List<ZENNER.CommonLibrary.Entities.Location>();
        using (DbDataReader reader = command.ExecuteReader())
        {
          while (reader.Read())
            locationList.Add(new ZENNER.CommonLibrary.Entities.Location()
            {
              ID = reader.GetInt32("LocationID"),
              Country = reader.SafeGetString("Country"),
              Region = reader.SafeGetString("Region"),
              City = reader.SafeGetString("City"),
              Zip = reader.SafeGetString("Zip"),
              Street = reader.SafeGetString("Street"),
              Floor = reader.SafeGetString("Floor"),
              HouseNumber = reader.SafeGetString("HouseNumber"),
              RoomNumber = reader.SafeGetString("RoomNumber"),
              Latitude = reader.SafeGetDouble("Latitude"),
              Longitude = reader.SafeGetDouble("Longitude"),
              Description = reader.SafeGetString("Description")
            });
        }
        return locationList;
      }
    }

    public static ZENNER.CommonLibrary.Entities.Location SaveLocation(
      BaseDbConnection db,
      ZENNER.CommonLibrary.Entities.Location location)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (location == null)
        throw new ArgumentNullException(nameof (location));
      return location.ID == 0 ? Location.InsertLocation(db, location) : Location.UpdateLocation(db, location);
    }

    public static ZENNER.CommonLibrary.Entities.Location InsertLocation(
      BaseDbConnection db,
      ZENNER.CommonLibrary.Entities.Location location)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (location == null)
        throw new ArgumentNullException(nameof (location));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        using (DbTransaction tran = newConnection.BeginTransaction())
        {
          ZENNER.CommonLibrary.Entities.Location location1 = Location.InsertLocation(db, newConnection, tran, location);
          if (location1 != null)
            tran.Commit();
          return location1;
        }
      }
    }

    public static ZENNER.CommonLibrary.Entities.Location UpdateLocation(
      BaseDbConnection db,
      ZENNER.CommonLibrary.Entities.Location location)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (location == null)
        throw new ArgumentNullException(nameof (location));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        using (DbTransaction tran = newConnection.BeginTransaction())
        {
          ZENNER.CommonLibrary.Entities.Location location1 = Location.UpdateLocation(db, newConnection, tran, location);
          if (location1 != null)
            tran.Commit();
          return location1;
        }
      }
    }

    public static ZENNER.CommonLibrary.Entities.Location InsertLocation(
      BaseDbConnection db,
      DbConnection conn,
      DbTransaction tran,
      ZENNER.CommonLibrary.Entities.Location location)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (conn == null)
        throw new ArgumentNullException(nameof (conn));
      if (location == null)
        throw new ArgumentNullException(nameof (location));
      location.ID = db.GetNewId(nameof (Location));
      DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM Location;", conn, tran, out DbCommandBuilder _);
      BaseTables.LocationDataTable locationDataTable = new BaseTables.LocationDataTable();
      BaseTables.LocationRow row = locationDataTable.NewLocationRow();
      row.LocationID = location.ID;
      row.Country = location.Country;
      row.Region = location.Region;
      row.City = location.City;
      row.Zip = location.Zip;
      row.Street = location.Street;
      row.Floor = location.Floor;
      row.HouseNumber = location.HouseNumber;
      row.RoomNumber = location.RoomNumber;
      row.Latitude = location.Latitude;
      row.Longitude = location.Longitude;
      row.Description = location.Description;
      locationDataTable.AddLocationRow(row);
      if (dataAdapter.Update((DataTable) locationDataTable) != 1)
        throw new Exception("Can not add new location!");
      return location;
    }

    public static ZENNER.CommonLibrary.Entities.Location UpdateLocation(
      BaseDbConnection db,
      DbConnection conn,
      DbTransaction tran,
      ZENNER.CommonLibrary.Entities.Location location)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (conn == null)
        throw new ArgumentNullException(nameof (conn));
      if (location == null)
        throw new ArgumentNullException(nameof (location));
      if (location.ID <= 0)
        throw new ArgumentException("location.ID");
      DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM Location WHERE LocationID=" + location.ID.ToString() + ";", conn, tran, out DbCommandBuilder _);
      BaseTables.LocationDataTable locationDataTable = new BaseTables.LocationDataTable();
      if (dataAdapter.Fill((DataTable) locationDataTable) != 1)
        throw new Exception("Can not update location! Such location does not exists in current database.");
      BaseTables.LocationRow byLocationId = locationDataTable.FindByLocationID(location.ID);
      if (byLocationId == null)
        throw new Exception("Can not find location ID!");
      byLocationId.Country = location.Country;
      byLocationId.Region = location.Region;
      byLocationId.City = location.City;
      byLocationId.Zip = location.Zip;
      byLocationId.Street = location.Street;
      byLocationId.Floor = location.Floor;
      byLocationId.HouseNumber = location.HouseNumber;
      byLocationId.RoomNumber = location.RoomNumber;
      byLocationId.Latitude = location.Latitude;
      byLocationId.Longitude = location.Longitude;
      byLocationId.Description = location.Description;
      if (dataAdapter.Update((DataTable) locationDataTable) != 1)
        throw new Exception("Can not update location!");
      return location;
    }

    public static bool DeleteLocation(BaseDbConnection db, int locationID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "DELETE FROM Location WHERE LocationID=" + locationID.ToString() + ";";
        return command.ExecuteNonQuery() > 0;
      }
    }
  }
}


--- MeterData.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MeterData
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;

#nullable disable
namespace GmmDbLib
{
  public static class MeterData
  {
    public static List<BaseTables.MeterDataRow> LoadMeterData(BaseDbConnection db, int meterID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (meterID < 0)
        throw new IndexOutOfRangeException(nameof (meterID));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MeterData WHERE MeterID=@MeterID;", newConnection);
        BaseTables.MeterDataDataTable source = new BaseTables.MeterDataDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@MeterID", meterID);
        return dataAdapter.Fill((DataTable) source) == 0 ? (List<BaseTables.MeterDataRow>) null : source.ToList<BaseTables.MeterDataRow>();
      }
    }

    public static BaseTables.MeterDataRow GetMeterData(
      BaseDbConnection db,
      int meterID,
      DateTime timepoint)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (meterID < 0)
        throw new IndexOutOfRangeException(nameof (meterID));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MeterData WHERE MeterID=@MeterID AND TimePoint=@TimePoint;", newConnection);
        BaseTables.MeterDataDataTable source = new BaseTables.MeterDataDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@MeterID", meterID);
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@TimePoint", timepoint);
        return dataAdapter.Fill((DataTable) source) == 0 ? (BaseTables.MeterDataRow) null : source.ToList<BaseTables.MeterDataRow>()[0];
      }
    }

    public static DateTime? LoadLastBackupTimepoint(BaseDbConnection db, int meterID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (meterID < 0)
        throw new IndexOutOfRangeException(nameof (meterID));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT TOP 1 TimePoint FROM MeterData WHERE MeterID=@MeterID AND ((PValueID > 50000 AND PValueID < 54095) OR PValueID = 1) ORDER BY TimePoint DESC;";
        DbUtil.AddParameter((IDbCommand) command, "@MeterID", meterID);
        return command.ExecuteScalar() as DateTime?;
      }
    }

    public static BaseTables.MeterDataRow LoadLastBackup(BaseDbConnection db, int meterID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (meterID < 0)
        throw new IndexOutOfRangeException(nameof (meterID));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT TOP 1 [MeterID] \r\n                                                         ,[TimePoint]\r\n                                                         ,[PValueID]\r\n                                                         ,[PValue]\r\n                                                         ,[PValueBinary]\r\n                                                         ,[SyncStatus] \r\n                FROM MeterData WHERE MeterID=@MeterID AND ((PValueID > 50000 AND PValueID < 54095) OR PValueID = 1) ORDER BY TimePoint DESC;", newConnection);
        BaseTables.MeterDataDataTable source = new BaseTables.MeterDataDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@MeterID", meterID);
        return dataAdapter.Fill((DataTable) source) == 0 ? (BaseTables.MeterDataRow) null : source.ToList<BaseTables.MeterDataRow>()[0];
      }
    }

    public static DateTime InsertData(
      BaseDbConnection db,
      int meterID,
      MeterData.Special special,
      byte[] zippedBuffer)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (meterID <= 0)
        throw new ArgumentException(nameof (meterID));
      if (zippedBuffer == null)
        throw new ArgumentNullException(nameof (zippedBuffer));
      DateTime utcNow = DateTime.UtcNow;
      DateTime dateTime = utcNow.AddMilliseconds((double) (utcNow.Millisecond * -1));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbTransaction transaction = newConnection.BeginTransaction();
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MeterData", newConnection, transaction);
        BaseTables.MeterDataDataTable meterDataDataTable = new BaseTables.MeterDataDataTable();
        BaseTables.MeterDataRow row = meterDataDataTable.NewMeterDataRow();
        row.MeterID = meterID;
        row.TimePoint = dateTime;
        row.PValueID = (int) special;
        row.PValue = special.ToString();
        row.PValueBinary = zippedBuffer;
        meterDataDataTable.AddMeterDataRow(row);
        dataAdapter.Update((DataTable) meterDataDataTable);
        transaction.Commit();
        return dateTime;
      }
    }

    public static List<BaseTables.MeterDataRow> LoadLastBackups(
      BaseDbConnection db,
      List<int> meterID_List)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (meterID_List == null)
        throw new ArgumentNullException(nameof (meterID_List));
      List<BaseTables.MeterDataRow> meterDataRowList = new List<BaseTables.MeterDataRow>();
      foreach (int meterId in meterID_List)
      {
        BaseTables.MeterDataRow meterDataRow = MeterData.LoadLastBackup(db, meterId);
        if (meterDataRow != null)
          meterDataRowList.Add(meterDataRow);
      }
      return meterDataRowList;
    }

    public enum Special
    {
      EdcEncabulator = 60000, // 0x0000EA60
    }
  }
}


--- MeterDbTypes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MeterDbTypes
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

#nullable disable
namespace GmmDbLib
{
  public enum MeterDbTypes
  {
    Undefined,
    Access,
    NPGSQL,
    SQLite,
    DBISAM,
    MSSQL,
    LocalDB,
    Microsoft_SQL_Compact,
  }
}


--- MeterInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MeterInfo
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  [Serializable]
  public sealed class MeterInfo
  {
    public int MeterInfoID { get; private set; }

    public int MeterHardwareID { get; private set; }

    public int MeterTypeID { get; private set; }

    public string PPSArtikelNr { get; private set; }

    public string DefaultFunctionNr { get; private set; }

    public string Description { get; private set; }

    public int HardwareTypeID { get; private set; }

    public MeterInfo DeepCopy() => this.MemberwiseClone() as MeterInfo;

    public static List<MeterInfo> LoadMeterInfo(string hardwareName)
    {
      return MeterInfo.LoadMeterInfo(DbBasis.PrimaryDB.BaseDbConnection, hardwareName);
    }

    public static List<MeterInfo> LoadMeterInfo(BaseDbConnection db, string hardwareName)
    {
      return MeterInfo.LoadMeterInfo(DbBasis.PrimaryDB.BaseDbConnection, new string[1]
      {
        hardwareName
      });
    }

    public static List<MeterInfo> LoadMeterInfo(string[] hardwareName)
    {
      return MeterInfo.LoadMeterInfo(DbBasis.PrimaryDB.BaseDbConnection, hardwareName);
    }

    public static List<MeterInfo> LoadMeterInfo(BaseDbConnection db, string[] hardwareName)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT m.* FROM MeterInfo AS m, HardwareType AS h WHERE h.HardwareTypeID=m.HardwareTypeID AND (";
        for (int index = 0; index < hardwareName.Length; ++index)
        {
          DbCommand dbCommand = command;
          dbCommand.CommandText = dbCommand.CommandText + "h.HardwareName = @HardwareName" + index.ToString();
          DbUtil.AddParameter((IDbCommand) command, "HardwareName" + index.ToString(), hardwareName[index]);
          if (index + 1 < hardwareName.Length)
            command.CommandText += " OR ";
        }
        command.CommandText += ") ORDER BY m.MeterInfoID DESC;";
        List<MeterInfo> meterInfoList = new List<MeterInfo>();
        using (DbDataReader reader = command.ExecuteReader())
        {
          while (reader.Read())
            meterInfoList.Add(new MeterInfo()
            {
              MeterInfoID = reader.GetInt32("MeterInfoID"),
              MeterHardwareID = reader.GetInt32("MeterHardwareID"),
              MeterTypeID = reader.GetInt32("MeterTypeID"),
              PPSArtikelNr = reader.GetString("PPSArtikelNr"),
              DefaultFunctionNr = reader.SafeGetString("DefaultFunctionNr"),
              Description = reader.SafeGetString("Description"),
              HardwareTypeID = reader.GetInt32("HardwareTypeID")
            });
        }
        return meterInfoList;
      }
    }

    public static MeterInfo GetMeterInfo(int meterInfoID)
    {
      return MeterInfo.GetMeterInfo(DbBasis.PrimaryDB.BaseDbConnection, meterInfoID);
    }

    public static MeterInfo GetMeterInfo(BaseDbConnection db, int meterInfoID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT * FROM MeterInfo WHERE MeterInfoID=@MeterInfoID;";
        DbUtil.AddParameter((IDbCommand) command, "MeterInfoID", meterInfoID);
        using (DbDataReader reader = command.ExecuteReader())
        {
          if (reader.Read())
            return new MeterInfo()
            {
              MeterInfoID = reader.GetInt32("MeterInfoID"),
              MeterHardwareID = reader.GetInt32("MeterHardwareID"),
              MeterTypeID = reader.GetInt32("MeterTypeID"),
              PPSArtikelNr = reader.GetString("PPSArtikelNr"),
              DefaultFunctionNr = reader.SafeGetString("DefaultFunctionNr"),
              Description = reader.SafeGetString("Description"),
              HardwareTypeID = reader.GetInt32("HardwareTypeID")
            };
        }
        return (MeterInfo) null;
      }
    }

    public static void AddMeterInfo(
      DbCommand cmd,
      int meterInfoId,
      int meterHardwareID,
      int meterTypeId,
      string sapNumber,
      string defaultFunctionNumber,
      string description,
      int hardwareTypeID)
    {
      if (cmd == null)
        throw new ArgumentNullException(nameof (cmd));
      cmd.CommandText = "INSERT INTO MeterInfo (MeterInfoID, MeterHardwareID, MeterTypeID, PPSArtikelNr, DefaultFunctionNr, Description, HardwareTypeID) VALUES (@MeterInfoID, @MeterHardwareID, @MeterTypeID, @PPSArtikelNr, @DefaultFunctionNr, @Description, @HardwareTypeID)";
      cmd.Parameters.Clear();
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterInfoID", meterInfoId);
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterHardwareID", meterHardwareID);
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterTypeID", meterTypeId);
      DbUtil.AddParameter((IDbCommand) cmd, "@PPSArtikelNr", sapNumber);
      DbUtil.AddParameter((IDbCommand) cmd, "@DefaultFunctionNr", defaultFunctionNumber);
      DbUtil.AddParameter((IDbCommand) cmd, "@Description", description);
      DbUtil.AddParameter((IDbCommand) cmd, "@HardwareTypeID", hardwareTypeID);
      cmd.ExecuteNonQuery();
    }

    public static void UpdateMeterInfo(
      DbCommand cmd,
      int meterInfoId,
      string sapNumber,
      string description,
      int hardwareTypeID)
    {
      if (cmd == null)
        throw new ArgumentNullException(nameof (cmd));
      cmd.CommandText = "UPDATE MeterInfo SET PPSArtikelNr=@PPSArtikelNr, Description=@Description, HardwareTypeID=@HardwareTypeID WHERE MeterInfoID=@MeterInfoID";
      cmd.Parameters.Clear();
      DbUtil.AddParameter((IDbCommand) cmd, "@PPSArtikelNr", sapNumber);
      DbUtil.AddParameter((IDbCommand) cmd, "@Description", description);
      DbUtil.AddParameter((IDbCommand) cmd, "@HardwareTypeID", hardwareTypeID);
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterInfoID", meterInfoId);
      cmd.ExecuteNonQuery();
    }

    public static void DeleteMeterInfo(DbCommand cmd, int meterInfoId)
    {
      if (cmd == null)
        throw new ArgumentNullException(nameof (cmd));
      cmd.CommandText = "DELETE FROM MeterInfo WHERE MeterInfoID=@MeterInfoID";
      cmd.Parameters.Clear();
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterInfoID", meterInfoId);
      cmd.ExecuteNonQuery();
    }
  }
}


--- MeterMSS.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MeterMSS
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;

#nullable disable
namespace GmmDbLib
{
  public static class MeterMSS
  {
    public static List<DriverTables.MeterMSSRow> LoadMeterMSS(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MeterMSS;", newConnection);
        DriverTables.MeterMSSDataTable source = new DriverTables.MeterMSSDataTable();
        return dataAdapter.Fill((DataTable) source) == 0 ? (List<DriverTables.MeterMSSRow>) null : source.ToList<DriverTables.MeterMSSRow>();
      }
    }

    public static List<DriverTables.MeterMSSRow> GetMeterMSS(
      BaseDbConnection db,
      string serialNumber)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (string.IsNullOrEmpty(serialNumber))
        throw new ArgumentNullException(nameof (serialNumber));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MeterMSS WHERE SerialNumber=@SerialNumber;", newConnection);
        DriverTables.MeterMSSDataTable source = new DriverTables.MeterMSSDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@SerialNumber", serialNumber);
        return dataAdapter.Fill((DataTable) source) == 0 ? (List<DriverTables.MeterMSSRow>) null : source.ToList<DriverTables.MeterMSSRow>();
      }
    }

    public static List<DriverTables.MeterMSSRow> GetMeterMSS(
      BaseDbConnection db,
      DbConnection conn,
      string serialNumber)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (string.IsNullOrEmpty(serialNumber))
        throw new ArgumentNullException(nameof (serialNumber));
      DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MeterMSS WHERE SerialNumber=@SerialNumber;", conn);
      DriverTables.MeterMSSDataTable source = new DriverTables.MeterMSSDataTable();
      DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@SerialNumber", serialNumber);
      return dataAdapter.Fill((DataTable) source) == 0 ? (List<DriverTables.MeterMSSRow>) null : source.ToList<DriverTables.MeterMSSRow>();
    }

    public static bool DeleteMeterMSS(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "DELETE FROM MeterMSS;";
        return command.ExecuteNonQuery() > 0;
      }
    }

    public static bool DeleteMeterMSS(BaseDbConnection db, Guid meterID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "DELETE FROM MeterMSS WHERE MeterID=@MeterID;";
        DbUtil.AddParameter((IDbCommand) command, "@MeterID", meterID);
        return command.ExecuteNonQuery() == 1;
      }
    }

    public static DriverTables.MeterMSSRow AddMeterMSS(
      BaseDbConnection db,
      Guid meterID,
      string serialNumber)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (string.IsNullOrEmpty(serialNumber))
        throw new ArgumentNullException(nameof (serialNumber));
      using (DbConnection newConnection = db.GetNewConnection())
        return MeterMSS.AddMeterMSS(db, newConnection, meterID, serialNumber);
    }

    public static DriverTables.MeterMSSRow AddMeterMSS(
      BaseDbConnection db,
      DbConnection conn,
      Guid meterID,
      string serialNumber)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (conn == null)
        throw new ArgumentNullException(nameof (conn));
      if (string.IsNullOrEmpty(serialNumber))
        throw new ArgumentNullException(nameof (serialNumber));
      DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MeterMSS;", conn, out DbCommandBuilder _);
      DriverTables.MeterMSSDataTable meterMssDataTable = new DriverTables.MeterMSSDataTable();
      DriverTables.MeterMSSRow row = meterMssDataTable.NewMeterMSSRow();
      row.MeterID = meterID;
      row.SerialNumber = serialNumber;
      meterMssDataTable.AddMeterMSSRow(row);
      if (dataAdapter.Update((DataTable) meterMssDataTable) != 1)
        throw new Exception("Can not add meter device!");
      return row;
    }
  }
}


--- MeterType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MeterType
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Data;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  [Serializable]
  public sealed class MeterType
  {
    public int MeterTypeID { get; private set; }

    public string MTypeTableName { get; private set; }

    public string Typename { get; private set; }

    public DateTime? GenerateDate { get; private set; }

    public string Description { get; private set; }

    public MeterType DeepCopy() => this.MemberwiseClone() as MeterType;

    public static MeterType GetMeterType(int meterTypeID)
    {
      return MeterType.GetMeterType(DbBasis.PrimaryDB.BaseDbConnection, meterTypeID);
    }

    public static MeterType GetMeterType(BaseDbConnection db, int meterTypeID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT * FROM MeterType WHERE MeterTypeID=@MeterTypeID;";
        DbUtil.AddParameter((IDbCommand) command, "@MeterTypeID", meterTypeID);
        using (DbDataReader reader = command.ExecuteReader())
        {
          if (reader.Read())
            return new MeterType()
            {
              MeterTypeID = reader.GetInt32("MeterTypeID"),
              MTypeTableName = reader.GetString("MTypeTableName"),
              Typename = reader.GetString("Typename"),
              GenerateDate = reader.SafeGetDateTime("GenerateDate"),
              Description = reader.SafeGetString("Description")
            };
        }
        return (MeterType) null;
      }
    }

    public static void AddMeterType(
      DbCommand cmd,
      int meterTypeId,
      string mTypeTableName,
      string hardwareName,
      DateTime generateDate,
      string description)
    {
      if (cmd == null)
        throw new ArgumentNullException(nameof (cmd));
      cmd.CommandText = "INSERT INTO MeterType (MeterTypeID, MTypeTableName, Typename, GenerateDate, Description) VALUES (@MeterTypeID, @MTypeTableName, @Typename, @GenerateDate, @Description)";
      cmd.Parameters.Clear();
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterTypeID", meterTypeId);
      DbUtil.AddParameter((IDbCommand) cmd, "@MTypeTableName", mTypeTableName);
      DbUtil.AddParameter((IDbCommand) cmd, "@Typename", hardwareName);
      DbUtil.AddParameter((IDbCommand) cmd, "@GenerateDate", generateDate);
      DbUtil.AddParameter((IDbCommand) cmd, "@Description", description);
      cmd.ExecuteNonQuery();
    }

    public static void UpdateMeterType(DbCommand cmd, int meterTypeId, DateTime generateDate)
    {
      if (cmd == null)
        throw new ArgumentNullException(nameof (cmd));
      cmd.CommandText = "UPDATE MeterType SET GenerateDate=@GenerateDate WHERE MeterTypeID=@MeterTypeID;";
      cmd.Parameters.Clear();
      DbUtil.AddParameter((IDbCommand) cmd, "@GenerateDate", generateDate);
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterTypeID", meterTypeId);
      cmd.ExecuteNonQuery();
    }

    public static void DeleteMeterType(DbCommand cmd, int meterTypeId)
    {
      if (cmd == null)
        throw new ArgumentNullException(nameof (cmd));
      cmd.CommandText = "DELETE FROM MeterType WHERE MeterTypeID=@MeterTypeID;";
      cmd.Parameters.Clear();
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterTypeID", meterTypeId);
      cmd.ExecuteNonQuery();
    }
  }
}


--- MeterUniqueIdByARM.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MeterUniqueIdByARM
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using GmmDbLib.TableManagers;
using System;
using System.Data;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  public class MeterUniqueIdByARM
  {
    private BaseDbConnection MyDb;

    public MeterUniqueIdByARM(BaseDbConnection dbBaseConnection) => this.MyDb = dbBaseConnection;

    public bool ManageMeterID(byte[] UniqueArmID, ref uint? MeterID, bool checkOnly = false)
    {
      uint num = UniqueArmID != null && UniqueArmID.Length == 12 ? BitConverter.ToUInt32(UniqueArmID, 0) : throw new Exception("UniqueArmID not available");
      uint uint32_1 = BitConverter.ToUInt32(UniqueArmID, 4);
      uint uint32_2 = BitConverter.ToUInt32(UniqueArmID, 8);
      using (DbConnection newConnection = this.MyDb.GetNewConnection())
      {
        newConnection.Open();
        DbTransaction transaction = newConnection.BeginTransaction();
        string selectSql = "SELECT * FROM MeterUniqueIdByARM WHERE UniqueIdPart1 = " + num.ToString() + " AND UniqueIdPart2 = " + uint32_1.ToString() + " AND UniqueIdPart3 = " + uint32_2.ToString();
        BaseTables.MeterUniqueIdByARMDataTable idByArmDataTable = new BaseTables.MeterUniqueIdByARMDataTable();
        DbDataAdapter dataAdapter1 = this.MyDb.GetDataAdapter(selectSql, newConnection, transaction, out DbCommandBuilder _);
        dataAdapter1.Fill((DataTable) idByArmDataTable);
        if (idByArmDataTable.Count == 1)
        {
          if (MeterID.HasValue && (int) MeterID.Value != (int) idByArmDataTable[0].MeterID)
            throw new NotSupportedException("Change of MeterID not jet supported");
          MeterID = new uint?(idByArmDataTable[0].MeterID);
          return false;
        }
        if (checkOnly)
        {
          MeterID = new uint?();
          return true;
        }
        BaseTables.MeterDataTable meterDataTable = new BaseTables.MeterDataTable();
        if (MeterID.HasValue)
        {
          this.MyDb.GetDataAdapter("SELECT * FROM Meter WHERE MeterID = " + MeterID.Value.ToString(), newConnection, transaction).Fill((DataTable) meterDataTable);
          if (meterDataTable.Count == 1)
            throw new Exception("MeterID exists in data base but UniqueIdByARM not available! Possible critical database change.");
          throw new NotSupportedException("MeterID defined from device but not in the data base. This change of data base is not supported jet.");
        }
        MeterID = new uint?((uint) this.MyDb.GetNewId("Meter"));
        BaseTables.MeterUniqueIdByARMRow row1 = idByArmDataTable.NewMeterUniqueIdByARMRow();
        row1.UniqueIdPart1 = num;
        row1.UniqueIdPart2 = uint32_1;
        row1.UniqueIdPart3 = uint32_2;
        row1.MeterID = MeterID.Value;
        row1.CreateDate = DateTime.Now.ToUniversalTime();
        idByArmDataTable.AddMeterUniqueIdByARMRow(row1);
        dataAdapter1.Update((DataTable) idByArmDataTable);
        BaseTables.MeterDataTable changedMeterRowsTable = new BaseTables.MeterDataTable();
        BaseTables.MeterRow row2 = changedMeterRowsTable.NewMeterRow();
        row2.ProductionDate = row1.CreateDate;
        row2.MeterID = (int) row1.MeterID;
        changedMeterRowsTable.AddMeterRow(row2);
        DbDataAdapter dataAdapter2 = this.MyDb.GetDataAdapter("SELECT * FROM Meter WHERE 1=0", newConnection, transaction, out DbCommandBuilder _);
        MeterChanges.UpdateMeterRowChanges(this.MyDb, changedMeterRowsTable, dataAdapter2);
        transaction.Commit();
        return true;
      }
    }
  }
}


--- MeterValuesMSS.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MeterValuesMSS
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;

#nullable disable
namespace GmmDbLib
{
  public static class MeterValuesMSS
  {
    public static List<DriverTables.MeterValuesMSSRow> LoadMeterValuesMSS(
      BaseDbConnection db,
      Guid meterID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MeterValuesMSS WHERE MeterID=@MeterID;", newConnection);
        DriverTables.MeterValuesMSSDataTable source = new DriverTables.MeterValuesMSSDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@MeterID", meterID);
        return dataAdapter.Fill((DataTable) source) == 0 ? (List<DriverTables.MeterValuesMSSRow>) null : source.ToList<DriverTables.MeterValuesMSSRow>();
      }
    }

    public static bool DeleteMeterValuesMSS(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "DELETE FROM MeterValuesMSS;";
        return command.ExecuteNonQuery() > 0;
      }
    }

    public static bool DeleteMeterValuesMSS(BaseDbConnection db, Guid meterID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "DELETE FROM MeterValuesMSS WHERE MeterID=@MeterID;";
        DbUtil.AddParameter((IDbCommand) command, "@MeterID", meterID);
        return command.ExecuteNonQuery() == 1;
      }
    }
  }
}


--- MinolDeviceData.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MinolDeviceData
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Collections.Generic;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  public static class MinolDeviceData
  {
    public static List<int> LoadMapIDOfMinolDeviceData(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT DISTINCT MapID FROM MinolDeviceData;";
        List<int> intList = new List<int>();
        using (DbDataReader dbDataReader = command.ExecuteReader())
        {
          while (dbDataReader.Read())
            intList.Add(Convert.ToInt32(dbDataReader["MapID"]));
        }
        return intList;
      }
    }
  }
}


--- MinomatList.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MinomatList
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Globalization;
using System.Linq;

#nullable disable
namespace GmmDbLib
{
  public static class MinomatList
  {
    private static Logger logger = LogManager.GetLogger(nameof (MinomatList));
    private static readonly object databaseLock = new object();

    public static List<DriverTables.MinomatListRow> LoadMinomatList(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MinomatList;", newConnection);
        DriverTables.MinomatListDataTable source = new DriverTables.MinomatListDataTable();
        return dataAdapter.Fill((DataTable) source) == 0 ? (List<DriverTables.MinomatListRow>) null : source.ToList<DriverTables.MinomatListRow>();
      }
    }

    public static List<DriverTables.MinomatListRow> GetMinomatListByChallengeEncoded(
      BaseDbConnection db,
      uint challengeKeyEncoded)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MinomatList WHERE ChallengeKeyEncoded=@ChallengeKeyEncoded;", newConnection);
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@ChallengeKeyEncoded", challengeKeyEncoded.ToString("X8"));
        DriverTables.MinomatListDataTable source = new DriverTables.MinomatListDataTable();
        return dataAdapter.Fill((DataTable) source) == 0 ? (List<DriverTables.MinomatListRow>) null : source.ToList<DriverTables.MinomatListRow>();
      }
    }

    public static SortedList<ulong, ulong> LoadHandshakeKeys(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT SessionKey, SessionKeyOld, GsmIDEncoded, ChallengeKeyEncoded, GsmIDEncodedOld, ChallengeKeyEncodedOld FROM MinomatList;";
        SortedList<ulong, ulong> sortedList = new SortedList<ulong, ulong>();
        using (DbDataReader dbDataReader = command.ExecuteReader())
        {
          while (dbDataReader.Read())
          {
            string s1 = dbDataReader["SessionKey"].ToString();
            string s2 = dbDataReader["SessionKeyOld"].ToString();
            string s3 = dbDataReader["GsmIDEncoded"].ToString();
            string s4 = dbDataReader["ChallengeKeyEncoded"].ToString();
            string s5 = dbDataReader["GsmIDEncodedOld"].ToString();
            string s6 = dbDataReader["ChallengeKeyEncodedOld"].ToString();
            ulong result1;
            uint result2;
            uint result3;
            if (ulong.TryParse(s1, NumberStyles.AllowHexSpecifier, (IFormatProvider) null, out result1) && uint.TryParse(s3, NumberStyles.AllowHexSpecifier, (IFormatProvider) null, out result2) && uint.TryParse(s4, NumberStyles.AllowHexSpecifier, (IFormatProvider) null, out result3))
            {
              ulong key = (ulong) result3 << 32 | (ulong) result2;
              sortedList.Add(key, result1);
            }
            ulong result4;
            uint result5;
            uint result6;
            if (ulong.TryParse(s2, NumberStyles.AllowHexSpecifier, (IFormatProvider) null, out result4) && uint.TryParse(s5, NumberStyles.AllowHexSpecifier, (IFormatProvider) null, out result5) && uint.TryParse(s6, NumberStyles.AllowHexSpecifier, (IFormatProvider) null, out result6))
            {
              ulong key = (ulong) result6 << 32 | (ulong) result5;
              if (!sortedList.ContainsKey(key))
                sortedList.Add(key, result4);
            }
          }
          return sortedList;
        }
      }
    }

    public static ulong? GetSessionKey(
      BaseDbConnection db,
      uint gsmIDEncoded,
      uint challengeKeyEncoded)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT SessionKey FROM MinomatList WHERE GsmIDEncoded=@GsmIDEncoded AND ChallengeKeyEncoded=@ChallengeKeyEncoded;";
        DbUtil.AddParameter((IDbCommand) command, "@GsmIDEncoded", gsmIDEncoded.ToString("X8"));
        DbUtil.AddParameter((IDbCommand) command, "@ChallengeKeyEncoded", challengeKeyEncoded.ToString("X8"));
        object obj = command.ExecuteScalar();
        if (obj == null)
        {
          command.CommandText = "SELECT SessionKeyOld FROM MinomatList WHERE GsmIDEncodedOld=@GsmIDEncodedOld AND ChallengeKeyEncodedOld=@ChallengeKeyEncodedOld;";
          DbUtil.AddParameter((IDbCommand) command, "@GsmIDEncodedOld", gsmIDEncoded.ToString("X8"));
          DbUtil.AddParameter((IDbCommand) command, "@ChallengeKeyEncodedOld", challengeKeyEncoded.ToString("X8"));
          obj = command.ExecuteScalar();
          if (obj == null)
            return new ulong?();
        }
        ulong result;
        return !ulong.TryParse(obj.ToString(), NumberStyles.AllowHexSpecifier, (IFormatProvider) null, out result) ? new ulong?() : new ulong?(result);
      }
    }

    public static bool DeleteMinomatList(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "DELETE FROM MinomatList;";
        return command.ExecuteNonQuery() > 0;
      }
    }

    public static bool DeleteMinomatList(BaseDbConnection db, uint gsmID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "DELETE FROM MinomatList WHERE GsmID=@GsmID";
        DbUtil.AddParameter((IDbCommand) command, "@GsmID", gsmID.ToString("X8"));
        return command.ExecuteNonQuery() == 1;
      }
    }

    public static DriverTables.MinomatListRow AddMinomatList(
      BaseDbConnection db,
      uint gsmID,
      uint challengeKey,
      ulong sessionKey)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      uint num1 = gsmID ^ (uint) (sessionKey & (ulong) uint.MaxValue);
      uint num2 = challengeKey ^ (uint) (sessionKey >> 32);
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MinomatList;", newConnection, out DbCommandBuilder _);
        DriverTables.MinomatListDataTable minomatListDataTable = new DriverTables.MinomatListDataTable();
        DriverTables.MinomatListRow row = minomatListDataTable.NewMinomatListRow();
        row.GsmID = gsmID.ToString("X8");
        row.ChallengeKey = challengeKey.ToString("X8");
        row.SessionKey = sessionKey.ToString("X8");
        row.GsmIDEncoded = num1.ToString("X8");
        row.ChallengeKeyEncoded = num2.ToString("X8");
        minomatListDataTable.AddMinomatListRow(row);
        if (dataAdapter.Update((DataTable) minomatListDataTable) != 1)
          throw new Exception("Can not add new item to MinomatList table!");
        return row;
      }
    }

    public static DriverTables.MinomatListRow GetMinomatList(BaseDbConnection db, uint gsmID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (gsmID <= 0U)
        throw new ArgumentException(nameof (gsmID));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM MinomatList WHERE GsmID=@GsmID;", newConnection);
        DriverTables.MinomatListDataTable source = new DriverTables.MinomatListDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@GsmID", gsmID.ToString("X8"));
        return dataAdapter.Fill((DataTable) source) != 1 ? (DriverTables.MinomatListRow) null : source.ToList<DriverTables.MinomatListRow>()[0];
      }
    }

    public static void SaveMinomatList(
      BaseDbConnection db,
      uint? gsmID,
      uint? minolID,
      uint? challengeKey,
      ulong? sessionKey,
      uint? challengeKeyOld,
      ulong? sessionKeyOld,
      uint? gsmIDEncoded,
      uint? challengeKeyEncoded,
      uint? gsmIDEncodedOld,
      uint? challengeKeyEncodedOld)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (!gsmID.HasValue)
        throw new ArgumentException(nameof (gsmID));
      if (!challengeKey.HasValue)
        throw new ArgumentException(nameof (challengeKey));
      if (!sessionKey.HasValue)
        throw new ArgumentNullException(nameof (sessionKey));
      if (!gsmIDEncoded.HasValue)
        throw new ArgumentNullException(nameof (gsmIDEncoded));
      if (!challengeKeyEncoded.HasValue)
        throw new ArgumentNullException(nameof (challengeKeyEncoded));
      lock (MinomatList.databaseLock)
      {
        using (DbConnection newConnection = db.GetNewConnection())
        {
          newConnection.Open();
          DbCommand command = newConnection.CreateCommand();
          command.CommandText = "SELECT GsmID FROM MinomatList WHERE GsmID = @GsmID;";
          DbCommand cmd1 = command;
          uint num = gsmID.Value;
          string str1 = num.ToString("X8");
          DbUtil.AddParameter((IDbCommand) cmd1, "@GsmID", str1);
          object obj = command.ExecuteScalar();
          command.Parameters.Clear();
          if (obj == null)
          {
            Logger logger = MinomatList.logger;
            num = gsmID.Value;
            string message = "INSERT INTO MinomatList... GSM ID: " + num.ToString("X8");
            logger.Debug(message);
            command.CommandText = "INSERT INTO MinomatList(GsmID,MinolID,ChallengeKey,SessionKey,ChallengeKeyOld,SessionKeyOld,GsmIDEncoded,ChallengeKeyEncoded,GsmIDEncodedOld,ChallengeKeyEncodedOld) VALUES (@GsmID,@MinolID,@ChallengeKey,@SessionKey,@ChallengeKeyOld,@SessionKeyOld,@GsmIDEncoded,@ChallengeKeyEncoded,@GsmIDEncodedOld,@ChallengeKeyEncodedOld)";
            DbCommand cmd2 = command;
            num = gsmID.Value;
            string str2 = num.ToString("X8");
            DbUtil.AddParameter((IDbCommand) cmd2, "@GsmID", str2);
          }
          else
          {
            Logger logger = MinomatList.logger;
            num = gsmID.Value;
            string message = "UPDATE MinomatList... GSM ID: " + num.ToString("X8");
            logger.Debug(message);
            command.CommandText = "UPDATE MinomatList SET MinolID=@MinolID,ChallengeKey=@ChallengeKey,SessionKey=@SessionKey,ChallengeKeyOld=@ChallengeKeyOld,SessionKeyOld=@SessionKeyOld,GsmIDEncoded=@GsmIDEncoded,ChallengeKeyEncoded=@ChallengeKeyEncoded,GsmIDEncodedOld=@GsmIDEncodedOld,ChallengeKeyEncodedOld=@ChallengeKeyEncodedOld WHERE GsmID=@GsmID";
          }
          DbCommand cmd3 = command;
          string empty1;
          if (!minolID.HasValue)
          {
            empty1 = string.Empty;
          }
          else
          {
            num = minolID.Value;
            empty1 = num.ToString("X8");
          }
          DbUtil.AddParameter((IDbCommand) cmd3, "@MinolID", empty1);
          DbCommand cmd4 = command;
          string empty2;
          if (!challengeKey.HasValue)
          {
            empty2 = string.Empty;
          }
          else
          {
            num = challengeKey.Value;
            empty2 = num.ToString("X8");
          }
          DbUtil.AddParameter((IDbCommand) cmd4, "@ChallengeKey", empty2);
          DbUtil.AddParameter((IDbCommand) command, "@SessionKey", sessionKey.HasValue ? sessionKey.Value.ToString("X16") : string.Empty);
          DbCommand cmd5 = command;
          string empty3;
          if (!challengeKeyOld.HasValue)
          {
            empty3 = string.Empty;
          }
          else
          {
            num = challengeKeyOld.Value;
            empty3 = num.ToString("X8");
          }
          DbUtil.AddParameter((IDbCommand) cmd5, "@ChallengeKeyOld", empty3);
          DbUtil.AddParameter((IDbCommand) command, "@SessionKeyOld", sessionKeyOld.HasValue ? sessionKeyOld.Value.ToString("X16") : string.Empty);
          DbCommand cmd6 = command;
          string empty4;
          if (!gsmIDEncoded.HasValue)
          {
            empty4 = string.Empty;
          }
          else
          {
            num = gsmIDEncoded.Value;
            empty4 = num.ToString("X8");
          }
          DbUtil.AddParameter((IDbCommand) cmd6, "@GsmIDEncoded", empty4);
          DbCommand cmd7 = command;
          string empty5;
          if (!challengeKeyEncoded.HasValue)
          {
            empty5 = string.Empty;
          }
          else
          {
            num = challengeKeyEncoded.Value;
            empty5 = num.ToString("X8");
          }
          DbUtil.AddParameter((IDbCommand) cmd7, "@ChallengeKeyEncoded", empty5);
          DbCommand cmd8 = command;
          string empty6;
          if (!gsmIDEncodedOld.HasValue)
          {
            empty6 = string.Empty;
          }
          else
          {
            num = gsmIDEncodedOld.Value;
            empty6 = num.ToString("X8");
          }
          DbUtil.AddParameter((IDbCommand) cmd8, "@GsmIDEncodedOld", empty6);
          DbCommand cmd9 = command;
          string empty7;
          if (!challengeKeyEncodedOld.HasValue)
          {
            empty7 = string.Empty;
          }
          else
          {
            num = challengeKeyEncodedOld.Value;
            empty7 = num.ToString("X8");
          }
          DbUtil.AddParameter((IDbCommand) cmd9, "@ChallengeKeyEncodedOld", empty7);
          if (obj != null)
          {
            DbCommand cmd10 = command;
            num = gsmID.Value;
            string str3 = num.ToString("X8");
            DbUtil.AddParameter((IDbCommand) cmd10, "@GsmID", str3);
          }
          if (command.ExecuteNonQuery() != 1)
            throw new Exception("Failed to save data to 'MinomatList' table! GSM ID: " + gsmID.ToString());
        }
      }
    }
  }
}


--- MSSQLDB.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MSSQLDB
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

#nullable disable
namespace GmmDbLib
{
  public class MSSQLDB : DbBasis
  {
    public MSSQLDB(string connectionString)
      : base(connectionString)
    {
    }

    public MSSQLDB(BaseDbConnection newBaseDbConnection)
      : base(newBaseDbConnection)
    {
    }
  }
}


--- MTypeElectronic.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.MTypeElectronic
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Data;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  [Serializable]
  public sealed class MTypeElectronic
  {
    public int MeterTypeID { get; private set; }

    public byte[] EEPdata { get; private set; }

    public string TypeCreationString { get; private set; }

    public static MTypeElectronic GetMTypeElectronic(int meterTypeID)
    {
      return MTypeElectronic.GetMTypeElectronic(DbBasis.PrimaryDB.BaseDbConnection, meterTypeID);
    }

    public static MTypeElectronic GetMTypeElectronic(BaseDbConnection db, int meterTypeID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT * FROM MTypeElectronic WHERE MeterTypeID=@MeterTypeID;";
        DbUtil.AddParameter((IDbCommand) command, "@MeterTypeID", meterTypeID);
        using (DbDataReader reader = command.ExecuteReader())
        {
          if (!reader.Read())
            return (MTypeElectronic) null;
          return new MTypeElectronic()
          {
            MeterTypeID = reader.GetInt32("MeterTypeID"),
            EEPdata = reader.GetByteArray("EEPdata"),
            TypeCreationString = reader.SafeGetString("TypeCreationString")
          };
        }
      }
    }

    public static void AddMTypeElectronic(
      DbCommand cmd,
      int meterTypeId,
      byte[] compressedData,
      string typeCreationString)
    {
      if (cmd == null)
        throw new ArgumentNullException(nameof (cmd));
      cmd.CommandText = "INSERT INTO MTypeElectronic (MeterTypeID, EEPdata, TypeCreationString) VALUES (@MeterTypeID, @EEPdata, @TypeCreationString);";
      cmd.Parameters.Clear();
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterTypeID", meterTypeId);
      DbUtil.AddParameter((IDbCommand) cmd, "@EEPdata", compressedData);
      DbUtil.AddParameter((IDbCommand) cmd, "@TypeCreationString", typeCreationString);
      cmd.ExecuteNonQuery();
    }

    public static void UpdateMTypeElectronic(
      DbCommand cmd,
      int meterTypeId,
      byte[] compressedData,
      string typeCreationString)
    {
      if (cmd == null)
        throw new ArgumentNullException(nameof (cmd));
      cmd.CommandText = "UPDATE MTypeElectronic SET EEPdata=@EEPdata, TypeCreationString=@TypeCreationString WHERE MeterTypeID=@MeterTypeID;";
      cmd.Parameters.Clear();
      DbUtil.AddParameter((IDbCommand) cmd, "@EEPdata", compressedData);
      DbUtil.AddParameter((IDbCommand) cmd, "@TypeCreationString", typeCreationString);
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterTypeID", meterTypeId);
      cmd.ExecuteNonQuery();
    }

    public static void DeleteMTypeElectronic(DbCommand cmd, int meterTypeId)
    {
      if (cmd == null)
        throw new ArgumentNullException(nameof (cmd));
      cmd.CommandText = "DELETE FROM MTypeElectronic WHERE MeterTypeID=@MeterTypeID;";
      cmd.Parameters.Clear();
      DbUtil.AddParameter((IDbCommand) cmd, "@MeterTypeID", meterTypeId);
      cmd.ExecuteNonQuery();
    }
  }
}


--- OpenTransaction.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.OpenTransaction
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  public class OpenTransaction
  {
    public BaseDbConnection Database;
    public DbConnection Connection;
    public DbTransaction Transaction;

    public OpenTransaction(
      BaseDbConnection database,
      DbConnection connection,
      DbTransaction transaction)
    {
      this.Database = database;
      this.Connection = connection;
      this.Transaction = transaction;
    }
  }
}


--- Ot.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.Ot
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Globalization;
using System.IO;
using System.Text;

#nullable disable
namespace GmmDbLib
{
  public class Ot
  {
    private static Logger logger = LogManager.GetLogger("OnlineTranslator");
    public static bool ShowMessageNumber = true;
    private const string defaultNamespace = "default";
    private const string fileChacheFolder = "Languages";
    private static SortedList<Tg, SortedList<string, string>> TranslatedDataCache;
    private static SortedList<string, string> BaseMessagesCache;
    private static string CurrentLanguage = string.Empty;
    private static Logger OnlineTranslatorLogger = LogManager.GetLogger("OnlineTranslator");

    public static string CachePath
    {
      get
      {
        return Path.Combine(Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), "ZENNER"), "GMM"), "Cache");
      }
    }

    public static string Gtt(Tg translationGroup, string textKey, string defaultText)
    {
      if (DbBasis.PrimaryDB == null || string.IsNullOrEmpty(textKey))
        return defaultText;
      if (Ot.OnLanguageTranslatedMessage != null)
        Ot.OnLanguageTranslatedMessage((object) null, new TranslationListText(translationGroup, textKey, defaultText));
      string languageTextBase = Ot.GetLanguageTextBase(translationGroup, textKey, defaultText);
      if (Ot.logger.IsDebugEnabled)
        Ot.logger.Debug("Text: '" + textKey + "' translated to: " + languageTextBase);
      return languageTextBase;
    }

    public static string Gtt(Tg translationGroup, string defaultText)
    {
      string textKey = Ot.KeyFromDefaultText(defaultText);
      if (Ot.logger.IsDebugEnabled)
        Ot.logger.Debug("Generated translator key: '" + textKey + "' translated from: " + defaultText);
      return Ot.Gtt(translationGroup, textKey, defaultText);
    }

    public static string Gtm(Tg translationGroup, string textKey, string defaultText)
    {
      if (DbBasis.PrimaryDB == null)
        return defaultText;
      if (Ot.OnLanguageTranslatedMessage != null)
        Ot.OnLanguageTranslatedMessage((object) null, new TranslationListText(translationGroup, textKey, defaultText, true));
      string messageText = Ot.GetLanguageTextBase(translationGroup, textKey, defaultText);
      if (!Ot.ShowMessageNumber)
        messageText = Ot.GetMessageTextWithoutNumber(messageText);
      if (Ot.logger.IsDebugEnabled)
        Ot.logger.Debug("Message: '" + textKey + "' translated to: " + messageText);
      return messageText;
    }

    public static string Gtm(Tg translationGroup, string defaultText)
    {
      return Ot.Gtm(translationGroup, Ot.KeyFromDefaultText(defaultText), defaultText);
    }

    public static string GetBaseMessage(Exception exceptionTree)
    {
      return Ot.GetBaseMessage(Ot.GetMessageNumbersTree(exceptionTree));
    }

    public static event EventHandler<TranslationListText> OnLanguageTranslatedMessage;

    public static bool UseLanguageFileCache { get; set; }

    public static Ot.LanguageTableTypes LanguageTableType { get; private set; }

    static Ot()
    {
      Ot.TranslatedDataCache = new SortedList<Tg, SortedList<string, string>>();
      Ot.LanguageTableType = Ot.LanguageTableTypes.Unknown;
      Ot.UseLanguageFileCache = false;
    }

    private static string GetLanguageTextBase(Tg translationGroup, string key, string defaultText)
    {
      int index1 = Ot.TranslatedDataCache.IndexOfKey(translationGroup);
      if (index1 >= 0)
      {
        SortedList<string, string> sortedList = Ot.TranslatedDataCache.Values[index1];
        int index2 = sortedList.IndexOfKey(key);
        return index2 >= 0 ? sortedList.Values[index2] : defaultText;
      }
      if (Ot.GarantLanguageNamespaceCached(translationGroup))
      {
        int index3 = Ot.TranslatedDataCache.IndexOfKey(translationGroup);
        if (index3 >= 0)
        {
          SortedList<string, string> sortedList = Ot.TranslatedDataCache.Values[index3];
          int index4 = sortedList.IndexOfKey(key);
          if (index4 >= 0)
            return sortedList.Values[index4];
        }
      }
      return defaultText;
    }

    private static string GetBaseMessage(string messageNumbersTree)
    {
      if (Ot.BaseMessagesCache == null)
      {
        Ot.BaseMessagesCache = new SortedList<string, string>();
        try
        {
          using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
          {
            DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM OnlineTranslationBaseMassages", newConnection);
            BaseTables.OnlineTranslationBaseMassagesDataTable massagesDataTable = new BaseTables.OnlineTranslationBaseMassagesDataTable();
            dataAdapter.Fill((DataTable) massagesDataTable);
            foreach (BaseTables.OnlineTranslationBaseMassagesRow translationBaseMassagesRow in (TypedTableBase<BaseTables.OnlineTranslationBaseMassagesRow>) massagesDataTable)
              Ot.BaseMessagesCache.Add(translationBaseMassagesRow.MessageTree, Ot.Gtm(Tg.BaseErrors, translationBaseMassagesRow.MessageTree, translationBaseMassagesRow.DefaultText));
          }
        }
        catch
        {
        }
      }
      int index = Ot.BaseMessagesCache.IndexOfKey(messageNumbersTree);
      return index >= 0 ? Ot.BaseMessagesCache.Values[index] : (string) null;
    }

    private static bool GarantLanguageNamespaceCached(Tg translationGroup)
    {
      lock (Ot.TranslatedDataCache)
      {
        if (!Ot.GarantTranslatorInitialised())
          return false;
        if (Ot.TranslatedDataCache.ContainsKey(translationGroup))
          return true;
        SortedList<string, string> textList = Ot.GetLanguageFromFileCache(translationGroup);
        if (textList == null)
        {
          textList = Ot.LoadOnlineTranslation(Ot.CurrentLanguage, translationGroup);
          if (textList == null)
            textList = new SortedList<string, string>();
          else
            Ot.WriteLanguageToFileCache(translationGroup, textList);
        }
        Ot.TranslatedDataCache.Add(translationGroup, textList);
        return true;
      }
    }

    private static bool IfLanguageChangeAllowed()
    {
      return Ot.LanguageTableType == Ot.LanguageTableTypes.UniversalNamespaceType;
    }

    public static bool GarantTranslatorInitialised()
    {
      if (Ot.LanguageTableType == Ot.LanguageTableTypes.InitialisationError)
        return false;
      if (Ot.LanguageTableType != 0)
        return true;
      try
      {
        Ot.CurrentLanguage = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          newConnection.Open();
          try
          {
            DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM OnlineTranslations WHERE 1=0", newConnection);
            DataTable dataTable = new DataTable();
            dataAdapter.Fill(dataTable);
            Ot.LanguageTableType = !dataTable.Columns.Contains("TranslationGroup") ? Ot.LanguageTableTypes.UniversalType : Ot.LanguageTableTypes.UniversalNamespaceType;
          }
          catch (Exception ex)
          {
            Ot.OnlineTranslatorLogger.Fatal(ex.Message);
            Ot.LanguageTableType = Ot.LanguageTableTypes.OnlyEnglishType;
          }
        }
      }
      catch (Exception ex)
      {
        Ot.OnlineTranslatorLogger.Fatal(ex.Message);
        Ot.LanguageTableType = Ot.LanguageTableTypes.InitialisationError;
        return false;
      }
      return true;
    }

    private static SortedList<string, string> LoadOnlineTranslation(
      string language,
      Tg translationGroup)
    {
      SortedList<string, string> sortedList = new SortedList<string, string>();
      string lower = language.ToLower();
      DateTime now = DateTime.Now;
      try
      {
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          newConnection.Open();
          if (Ot.LanguageTableType != Ot.LanguageTableTypes.OnlyEnglishType)
          {
            DbCommand command1 = newConnection.CreateCommand();
            DbCommand command2 = newConnection.CreateCommand();
            if (Ot.LanguageTableType == Ot.LanguageTableTypes.UniversalNamespaceType)
            {
              string str1 = ((int) translationGroup).ToString();
              command1.CommandText = "SELECT TextKey,LanguageText,MessageNumber FROM OnlineTranslations WHERE LanguageCode = '" + lower + "' AND TranslationGroup = " + str1 + " ORDER BY TextKey ASC";
              command2.CommandText = "SELECT TextKey,LanguageText,MessageNumber FROM OnlineTranslations WHERE LanguageCode = 'en' AND TranslationGroup = " + str1 + " ORDER BY TextKey ASC";
              DbDataReader dbDataReader1 = command1.ExecuteReader();
              while (dbDataReader1.Read())
              {
                string key = dbDataReader1["TextKey"].ToString();
                string str2 = dbDataReader1["LanguageText"].ToString();
                if (dbDataReader1["MessageNumber"] != DBNull.Value)
                  str2 = "@" + ((int) dbDataReader1["MessageNumber"]).ToString() + " " + str2;
                sortedList.Add(key, str2);
              }
              dbDataReader1.Close();
              DbDataReader dbDataReader2 = command2.ExecuteReader();
              while (dbDataReader2.Read())
              {
                string key = dbDataReader2["TextKey"].ToString();
                string str3 = dbDataReader2["LanguageText"].ToString();
                if (dbDataReader2["MessageNumber"] != DBNull.Value)
                  str3 = "@" + ((int) dbDataReader2["MessageNumber"]).ToString() + " " + str3;
                if (!sortedList.ContainsKey(key))
                  sortedList.Add(key, str3);
              }
              dbDataReader2.Close();
            }
            else
            {
              command1.CommandText = "SELECT TextKey,LanguageText FROM OnlineTranslations WHERE LanguageCode = '" + lower + "' ORDER BY TextKey ASC";
              command2.CommandText = "SELECT TextKey,LanguageText FROM OnlineTranslations WHERE LanguageCode = 'en' ORDER BY TextKey ASC";
              DbDataReader dbDataReader3 = command1.ExecuteReader();
              while (dbDataReader3.Read())
              {
                string key = dbDataReader3["TextKey"].ToString();
                string str = dbDataReader3["LanguageText"].ToString();
                sortedList.Add(key, str);
              }
              dbDataReader3.Close();
              DbDataReader dbDataReader4 = command2.ExecuteReader();
              while (dbDataReader4.Read())
              {
                string key = dbDataReader4["TextKey"].ToString();
                string str = dbDataReader4["LanguageText"].ToString();
                if (!sortedList.ContainsKey(key))
                  sortedList.Add(key, str);
              }
              dbDataReader4.Close();
            }
          }
          else
          {
            string name1 = "TextKey";
            string name2 = "TextEN";
            string name3 = "Text" + language.ToUpper();
            string str4 = name3;
            if (str4 != name2)
              str4 = name2 + "," + name3;
            DbCommand command = newConnection.CreateCommand();
            command.CommandText = "SELECT " + name1 + ", " + str4 + " FROM OnlineTranslation ORDER BY TextKey ASC;";
            DbDataReader dbDataReader = command.ExecuteReader();
            while (dbDataReader.Read())
            {
              string key = dbDataReader[name1].ToString();
              string str5 = dbDataReader[name3].ToString();
              if (str5 == "")
              {
                str5 = dbDataReader[name2].ToString();
                if (str5 == "")
                  str5 = key;
              }
              sortedList.Add(key, str5);
            }
          }
        }
      }
      catch (Exception ex)
      {
        throw new Exception("Error on load online translation language", ex.InnerException);
      }
      if (Ot.OnlineTranslatorLogger.IsTraceEnabled)
        Ot.OnlineTranslatorLogger.Trace("Translation group '" + translationGroup.ToString() + "' loaded from database. Load time[ms]:" + DateTime.Now.Subtract(now).TotalMilliseconds.ToString("N0") + " Number of translations:" + sortedList.Count.ToString());
      return sortedList;
    }

    public static bool AddOrChangeOnlineTranslation(
      string language,
      Tg translationGroup,
      string key,
      string newLanguageText,
      bool isMessage)
    {
      return Ot.AddOrChangeOnlineTranslation(language, translationGroup, key, newLanguageText, isMessage, out int? _);
    }

    public static bool AddOrChangeOnlineTranslation(
      string language,
      Tg translationGroup,
      string key,
      string newLanguageText,
      bool isMessage,
      out int? messageNumber)
    {
      bool flag = false;
      messageNumber = new int?();
      if (!Ot.IfLanguageChangeAllowed())
        throw new Exception("AddOrChangeOnlineTranslation not allowed.");
      if (DbBasis.PrimaryDB == null || string.IsNullOrEmpty(language) || string.IsNullOrEmpty(key) || string.IsNullOrEmpty(newLanguageText))
        throw new Exception("Change online translation: Parameter error.");
      try
      {
        string str = ((int) translationGroup).ToString();
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM OnlineTranslations WHERE TranslationGroup = " + str + " AND TextKey = '" + key + "'", newConnection, out DbCommandBuilder _);
          BaseTables.OnlineTranslationsDataTable translationsDataTable = new BaseTables.OnlineTranslationsDataTable();
          dataAdapter.Fill((DataTable) translationsDataTable);
          BaseTables.OnlineTranslationsRow onlineTranslationsRow1 = (BaseTables.OnlineTranslationsRow) null;
          foreach (BaseTables.OnlineTranslationsRow onlineTranslationsRow2 in (TypedTableBase<BaseTables.OnlineTranslationsRow>) translationsDataTable)
          {
            if (onlineTranslationsRow2.LanguageCode == language)
              onlineTranslationsRow1 = onlineTranslationsRow2;
            if (!onlineTranslationsRow2.IsMessageNumberNull())
            {
              if (!messageNumber.HasValue)
              {
                messageNumber = new int?(onlineTranslationsRow2.MessageNumber);
              }
              else
              {
                int? nullable = messageNumber;
                int messageNumber1 = onlineTranslationsRow2.MessageNumber;
                if (!(nullable.GetValueOrDefault() == messageNumber1 & nullable.HasValue))
                  throw new Exception("Different message number on languages: " + onlineTranslationsRow2.LanguageText);
              }
            }
          }
          if (onlineTranslationsRow1 != null)
          {
            if (onlineTranslationsRow1.LanguageText != newLanguageText)
            {
              onlineTranslationsRow1.LanguageText = newLanguageText;
              flag = true;
            }
          }
          else
          {
            BaseTables.OnlineTranslationsRow row = translationsDataTable.NewOnlineTranslationsRow();
            row.TranslationGroup = (int) translationGroup;
            row.LanguageCode = language;
            row.TextKey = key;
            row.LanguageText = newLanguageText;
            translationsDataTable.AddOnlineTranslationsRow(row);
            flag = true;
          }
          if (flag)
          {
            if (isMessage && !messageNumber.HasValue)
              messageNumber = new int?(Ot.GetNextMessageNumber(newConnection));
            if (messageNumber.HasValue)
            {
              foreach (BaseTables.OnlineTranslationsRow onlineTranslationsRow3 in (TypedTableBase<BaseTables.OnlineTranslationsRow>) translationsDataTable)
              {
                onlineTranslationsRow3.MessageNumber = messageNumber.Value;
                int num;
                if (!onlineTranslationsRow3.IsMessageNumberNull())
                {
                  int messageNumber2 = onlineTranslationsRow3.MessageNumber;
                  int? nullable = messageNumber;
                  int valueOrDefault = nullable.GetValueOrDefault();
                  num = !(messageNumber2 == valueOrDefault & nullable.HasValue) ? 1 : 0;
                }
                else
                  num = 1;
                if (num != 0)
                  flag = true;
              }
            }
            dataAdapter.Update((DataTable) translationsDataTable);
            Ot.CleareCache();
            if (language == Ot.CurrentLanguage)
            {
              int index1 = Ot.TranslatedDataCache.IndexOfKey(translationGroup);
              if (index1 >= 0)
              {
                SortedList<string, string> sortedList = Ot.TranslatedDataCache.Values[index1];
                int index2 = sortedList.IndexOfKey(key);
                if (index2 >= 0)
                  sortedList.RemoveAt(index2);
                sortedList.Add(key, Ot.IncludeMessageNumberInLanguageText(newLanguageText, messageNumber));
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        throw new Exception("Change online translation error.", ex);
      }
      return flag;
    }

    private static bool DeleteOnlineTranslation(string language, Tg translationGroup, string key)
    {
      bool flag = false;
      if (!Ot.IfLanguageChangeAllowed())
        throw new Exception("AddOrChangeOnlineTranslation not allowed.");
      if (DbBasis.PrimaryDB == null || string.IsNullOrEmpty(language) || string.IsNullOrEmpty(key))
        throw new Exception("Change online translation: Parameter error.");
      try
      {
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM OnlineTranslations WHERE TranslationGroup = " + ((int) translationGroup).ToString() + " AND TextKey = '" + key + "' AND LanguageCode = '" + language + "'", newConnection, out DbCommandBuilder _);
          BaseTables.OnlineTranslationsDataTable translationsDataTable = new BaseTables.OnlineTranslationsDataTable();
          dataAdapter.Fill((DataTable) translationsDataTable);
          if (translationsDataTable.Count == 1)
          {
            translationsDataTable[0].Delete();
            dataAdapter.Update((DataTable) translationsDataTable);
            flag = true;
            if (language == Ot.CurrentLanguage)
            {
              int index1 = Ot.TranslatedDataCache.IndexOfKey(translationGroup);
              if (index1 >= 0)
              {
                SortedList<string, string> sortedList = Ot.TranslatedDataCache.Values[index1];
                int index2 = sortedList.IndexOfKey(key);
                if (index2 >= 0)
                  sortedList.RemoveAt(index2);
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
        throw new Exception("Change online translation error.", ex);
      }
      return flag;
    }

    public static int GetNextMessageNumber(DbConnection dbConnection)
    {
      DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT MAX(MessageNumber) AS MaxMessageNumber FROM OnlineTranslations", dbConnection);
      DataTable dataTable = new DataTable();
      dataAdapter.Fill(dataTable);
      if (dataTable.Rows.Count != 1)
        throw new Exception("MessageNumber generation error");
      string s = dataTable.Rows[0]["MaxMessageNumber"].ToString();
      return string.IsNullOrEmpty(s) ? 1 : int.Parse(s) + 1;
    }

    private static void WriteLanguageToFileCache(
      Tg translationGroup,
      SortedList<string, string> textList)
    {
      if (!Ot.UseLanguageFileCache)
        return;
      string str = Path.Combine(Ot.CachePath, "Languages");
      Directory.CreateDirectory(str);
      string path = Path.Combine(str, Ot.CurrentLanguage + "_" + translationGroup.ToString() + ".cache");
      if (File.Exists(path) || textList.Count == 0)
        return;
      using (StreamWriter streamWriter = new StreamWriter(path))
      {
        foreach (KeyValuePair<string, string> text in textList)
        {
          streamWriter.WriteLine(text.Key);
          streamWriter.Write((char) text.Value.Length);
          streamWriter.Write(text.Value);
        }
        streamWriter.Close();
      }
    }

    private static SortedList<string, string> GetLanguageFromFileCache(Tg translationGroup)
    {
      if (!Ot.UseLanguageFileCache)
        return (SortedList<string, string>) null;
      string path = Path.Combine(Ot.CachePath, "Languages", Ot.CurrentLanguage + "_" + translationGroup.ToString() + ".cache");
      if (!File.Exists(path))
        return (SortedList<string, string>) null;
      DateTime now = DateTime.Now;
      SortedList<string, string> languageFromFileCache = new SortedList<string, string>();
      using (StreamReader streamReader = new StreamReader(path))
      {
        StringBuilder stringBuilder = new StringBuilder();
        char[] buffer = new char[70000];
        while (true)
        {
          string key = streamReader.ReadLine();
          if (!string.IsNullOrEmpty(key))
          {
            int num = streamReader.Read();
            streamReader.Read(buffer, 0, num);
            stringBuilder.Clear();
            stringBuilder.Append(buffer, 0, num);
            languageFromFileCache.Add(key, stringBuilder.ToString());
          }
          else
            break;
        }
        streamReader.Close();
      }
      if (Ot.OnlineTranslatorLogger.IsTraceEnabled)
        Ot.OnlineTranslatorLogger.Trace("Translation Group '" + translationGroup.ToString() + "' loaded from file. Load time[ms]:" + DateTime.Now.Subtract(now).TotalMilliseconds.ToString("N0") + " Number of translations:" + languageFromFileCache.Count.ToString());
      return languageFromFileCache;
    }

    private static void CleareCache()
    {
      if (!Directory.Exists(Ot.CachePath))
        return;
      Directory.Delete(Ot.CachePath, true);
      Directory.CreateDirectory(Ot.CachePath);
    }

    public static int? GetMessageNumberFromLanguageText(string messageText)
    {
      if (messageText[0] != '@')
        return new int?();
      int num = messageText.IndexOf(' ');
      if (num < 2)
        return new int?();
      int result;
      return !int.TryParse(messageText.Substring(1, num - 1), out result) ? new int?() : new int?(result);
    }

    public static string IncludeMessageNumberInLanguageText(string languageText, int? messageNumber)
    {
      int num1;
      if (messageNumber.HasValue)
      {
        int? nullable = messageNumber;
        int num2 = 0;
        num1 = nullable.GetValueOrDefault() > num2 & nullable.HasValue ? 1 : 0;
      }
      else
        num1 = 0;
      return num1 != 0 ? "@" + messageNumber.ToString() + " " + languageText : languageText;
    }

    public static string GetMessageTextWithoutNumber(string messageText)
    {
      if (messageText[0] != '@')
        return messageText;
      int num = messageText.IndexOf(' ');
      return num < 2 ? messageText : messageText.Substring(num + 1);
    }

    public static string KeyFromDefaultText(string defaultText)
    {
      StringBuilder stringBuilder = new StringBuilder(defaultText);
      for (int index = 0; index < stringBuilder.Length; ++index)
      {
        if (stringBuilder[index] == ' ' || stringBuilder[index] == ':' || stringBuilder[index] == '#')
        {
          stringBuilder.Remove(index, 1);
          if (stringBuilder.Length > index)
            stringBuilder[index] = char.ToUpper(stringBuilder[index]);
        }
      }
      if (stringBuilder.Length > 42)
      {
        stringBuilder.Remove(20, stringBuilder.Length - 40);
        stringBuilder.Insert(20, "..");
      }
      return stringBuilder.ToString();
    }

    public static string GetMessageNumbersTree(Exception ex)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Exception exception = ex;
      while (true)
      {
        int? fromLanguageText = Ot.GetMessageNumberFromLanguageText(exception.Message);
        if (fromLanguageText.HasValue)
        {
          if (stringBuilder.Length > 0)
            stringBuilder.Append(';');
          stringBuilder.Append(fromLanguageText.ToString());
          if (exception.InnerException != null)
            exception = exception.InnerException;
          else
            break;
        }
        else
          break;
      }
      return stringBuilder.ToString();
    }

    [Obsolete("Use Gtt function")]
    public static string GetTranslatedLanguageText(TranslatorKey key)
    {
      switch (key)
      {
        case TranslatorKey.MeterInstallerMissingSerialnumber:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "MissingSerialnumber");
        case TranslatorKey.MeterInstallerMissingReadoutSettings:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "MissingReadoutSettings");
        case TranslatorKey.MeterInstallerInvalidSubNodes:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "InvalidSubNodes");
        case TranslatorKey.MeterInstallerMeterAlreadyExists:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "MeterAlreadyExists");
        case TranslatorKey.MeterInstallerMissingNodeName:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "MissingNodeName");
        case TranslatorKey.MeterInstallerBaseNodeAlreadyExist:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "BaseNodeAlreadyExist");
        case TranslatorKey.MeterInstallerDeleteNodeQuestion:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "DeleteNodeQuestion");
        case TranslatorKey.MeterInstallerCanNotDeleteNode:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "CanNotDeleteNode");
        case TranslatorKey.MeterInstallerSystemmanagerLightLimitReached:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "SystemmanagerLightLimitReached");
        case TranslatorKey.MeterInstallerWrongNodeNameLength:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "WrongNodeNameLength");
        case TranslatorKey.MeterInstallerDemoLimitReached:
          return Ot.GetTranslatedLanguageText("MeterInstaller", "DemoLimitReached");
        case TranslatorKey.GMMDatabaseUpdateQuestion:
          return Ot.GetTranslatedLanguageText("GMM", "DatabaseUpdateQuestion");
        default:
          throw new NotImplementedException("Unknown key: " + key.ToString());
      }
    }

    [Obsolete("Use Gtt function")]
    public static string GetTranslatedLanguageText(
      string GmmModule,
      string TextKey,
      string defaultText)
    {
      return Ot.Gtt(Tg.Common, GmmModule + TextKey, defaultText);
    }

    [Obsolete("Use Gtt function")]
    public static string GetTranslatedLanguageText(string GmmModule, string TextKey)
    {
      string str = GmmModule + TextKey;
      return Ot.Gtt(Tg.Common, str, str);
    }

    [Obsolete("Use Gtt function")]
    public static string GetTranslatedLanguageText(string key) => Ot.Gtt(Tg.Common, key, key);

    public static bool Delete(string module, string key)
    {
      return Ot.DeleteOnlineTranslation(Ot.CurrentLanguage, Tg.Common, module + key);
    }

    [Obsolete("Use Gtt function")]
    public static string TextToKey(string text)
    {
      string key = text.Replace(" ", "");
      if (key.Length > 22)
        key = key.Substring(0, 10) + ".." + key.Substring(key.Length - 10);
      return key;
    }

    [Obsolete("Use KeyFromDefaultText function")]
    public static string GetKey(string moduleName, string textValue)
    {
      Ot.GarantLanguageNamespaceCached(Tg.Common);
      int index = Ot.TranslatedDataCache.IndexOfKey(Tg.Common);
      if (index >= 0)
      {
        foreach (KeyValuePair<string, string> keyValuePair in Ot.TranslatedDataCache.Values[index])
        {
          if (keyValuePair.Key.StartsWith(moduleName) && keyValuePair.Value == textValue)
            return keyValuePair.Key.Replace(moduleName, string.Empty);
        }
      }
      return (string) null;
    }

    public enum LanguageTableTypes
    {
      Unknown,
      UniversalNamespaceType,
      UniversalType,
      OnlyEnglishType,
      InitialisationError,
    }
  }
}


--- PostgreSQL.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.PostgreSQL
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System.Data;

#nullable disable
namespace GmmDbLib
{
  internal class PostgreSQL : DbBasis
  {
    public PostgreSQL(string connectionString)
      : base(connectionString)
    {
    }

    public PostgreSQL(BaseDbConnection newBaseDbConnection)
      : base(newBaseDbConnection)
    {
    }

    public override bool OptimizeTable(string TableName)
    {
      try
      {
        using (IDbConnection dbConnection = this.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand command = dbConnection.CreateCommand();
          command.CommandText = "VACUUM Full [" + TableName + "];";
          command.ExecuteNonQuery();
          dbConnection.Close();
        }
      }
      catch
      {
        return false;
      }
      return true;
    }
  }
}


--- ServiceTaskResult.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.ServiceTaskResult
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using GmmDbLib.DataSets;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;

#nullable disable
namespace GmmDbLib
{
  public static class ServiceTaskResult
  {
    public static List<DriverTables.ServiceTaskResultRow> LoadServiceTaskResult(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM ServiceTaskResult;", newConnection);
        DriverTables.ServiceTaskResultDataTable source = new DriverTables.ServiceTaskResultDataTable();
        return dataAdapter.Fill((DataTable) source) == 0 ? (List<DriverTables.ServiceTaskResultRow>) null : source.ToList<DriverTables.ServiceTaskResultRow>();
      }
    }

    public static List<DriverTables.ServiceTaskResultRow> LoadServiceTaskResultByJobID(
      BaseDbConnection db,
      Guid jobID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM ServiceTaskResult WHERE JobID=@JobID;", newConnection);
        DriverTables.ServiceTaskResultDataTable source = new DriverTables.ServiceTaskResultDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@JobID", jobID);
        return dataAdapter.Fill((DataTable) source) == 0 ? (List<DriverTables.ServiceTaskResultRow>) null : source.ToList<DriverTables.ServiceTaskResultRow>();
      }
    }

    public static List<DriverTables.ServiceTaskResultRow> LoadServiceTaskResultByMethodName(
      BaseDbConnection db,
      string methodName)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      if (string.IsNullOrEmpty(methodName))
        throw new ArgumentNullException(nameof (methodName));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM ServiceTaskResult WHERE MethodName=@MethodName;", newConnection);
        DriverTables.ServiceTaskResultDataTable source = new DriverTables.ServiceTaskResultDataTable();
        DbUtil.AddParameter((IDbCommand) dataAdapter.SelectCommand, "@MethodName", methodName);
        return dataAdapter.Fill((DataTable) source) == 0 ? (List<DriverTables.ServiceTaskResultRow>) null : source.ToList<DriverTables.ServiceTaskResultRow>();
      }
    }

    public static List<Guid> LoadJobIdOfServiceTaskResult(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT DISTINCT JobID FROM ServiceTaskResult;";
        List<Guid> guidList = new List<Guid>();
        using (DbDataReader dbDataReader = command.ExecuteReader())
        {
          while (dbDataReader.Read())
          {
            Guid result;
            if (dbDataReader["JobID"] != DBNull.Value && Guid.TryParse(dbDataReader["JobID"].ToString(), out result))
              guidList.Add(result);
          }
        }
        return guidList;
      }
    }

    public static List<string> LoadMethodNameOfServiceTaskResult(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "SELECT DISTINCT MethodName FROM ServiceTaskResult;";
        List<string> stringList = new List<string>();
        using (DbDataReader dbDataReader = command.ExecuteReader())
        {
          while (dbDataReader.Read())
            stringList.Add(dbDataReader["MethodName"].ToString());
        }
        return stringList;
      }
    }

    public static bool DeleteServiceTaskResult(BaseDbConnection db)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "DELETE FROM ServiceTaskResult;";
        return command.ExecuteNonQuery() > 0;
      }
    }

    public static DriverTables.ServiceTaskResultRow SaveServiceTaskResult(
      BaseDbConnection db,
      DateTime timepoint,
      string serialNumber,
      Guid jobID,
      Guid meterID,
      string methodName,
      string resultType,
      string resultObject,
      byte[] rawdata)
    {
      if (string.IsNullOrEmpty(serialNumber))
        throw new ArgumentNullException(nameof (serialNumber));
      if (string.IsNullOrEmpty(methodName))
        throw new ArgumentNullException(nameof (methodName));
      if (string.IsNullOrEmpty(resultType))
        throw new ArgumentNullException(nameof (resultType));
      if (string.IsNullOrEmpty(resultObject))
        throw new ArgumentNullException(nameof (resultObject));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        DbDataAdapter dataAdapter = db.GetDataAdapter("SELECT * FROM ServiceTaskResult;", newConnection, out DbCommandBuilder _);
        DriverTables.ServiceTaskResultDataTable taskResultDataTable = new DriverTables.ServiceTaskResultDataTable();
        DriverTables.ServiceTaskResultRow row = taskResultDataTable.NewServiceTaskResultRow();
        row.TimePoint = new DateTime(timepoint.Year, timepoint.Month, timepoint.Day, timepoint.Hour, timepoint.Minute, timepoint.Second);
        row.SerialNumber = serialNumber;
        row.JobID = jobID;
        row.MeterID = meterID;
        row.MethodName = methodName;
        row.ResultType = resultType;
        row.ResultObject = resultObject;
        if (rawdata != null)
          row.RawData = DbUtil.ByteArrayToHexString(rawdata);
        taskResultDataTable.AddServiceTaskResultRow(row);
        if (dataAdapter.Update((DataTable) taskResultDataTable) != 1)
          throw new Exception("Can not add service task result!");
        return row;
      }
    }

    public static bool DeleteServiceTaskResultByJobID(BaseDbConnection db, Guid jobID)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = "DELETE FROM ServiceTaskResult WHERE JobID=@JobID;";
        DbUtil.AddParameter((IDbCommand) command, "@JobID", jobID);
        return command.ExecuteNonQuery() > 0;
      }
    }
  }
}


--- SQLiteDB.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.SQLiteDB
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System.Data.SQLite;
using System.IO;

#nullable disable
namespace GmmDbLib
{
  public class SQLiteDB : DbBasis
  {
    public SQLiteDB(string connectionString)
      : base(connectionString)
    {
    }

    public SQLiteDB(BaseDbConnection newBaseDbConnection)
      : base(newBaseDbConnection)
    {
    }

    public override long GetDatabaseSize()
    {
      string dataSource = new SQLiteConnectionStringBuilder(this.ConnectionString).DataSource;
      if (string.IsNullOrEmpty(dataSource))
        return 0;
      try
      {
        return new FileInfo(dataSource).Length;
      }
      catch
      {
      }
      return 0;
    }
  }
}


--- Tg.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.Tg
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

#nullable disable
namespace GmmDbLib
{
  public enum Tg
  {
    NotDefined = 0,
    Common = 1,
    BaseErrors = 2,
    DB = 3,
    PGMM_UI = 10, // 0x0000000A
    PGMM_Messages = 11, // 0x0000000B
    PGMM_Components = 12, // 0x0000000C
    Demo = 13, // 0x0000000D
    C5_Factory = 100, // 0x00000064
    CommonFactory_UI = 101, // 0x00000065
    CoverPrinter = 102, // 0x00000066
    WR4_Hardwaretest = 103, // 0x00000067
    WR4_DeviceTest = 104, // 0x00000068
    WR4_EnergyTest = 105, // 0x00000069
    EQ_Management = 106, // 0x0000006A
    IUW_TransducerChecker = 107, // 0x0000006B
    EvmRhFactory = 108, // 0x0000006C
    EvmRhHydraulicTest = 109, // 0x0000006D
    IUW_HardwareTest = 110, // 0x0000006E
    SerialNumberReservation = 111, // 0x0000006F
    EDCNBIoT_HT = 112, // 0x00000070
    IUW_PottingTest = 113, // 0x00000071
    EDCNBIoT_FT = 114, // 0x00000072
    IUW_Residential_PressureTest = 115, // 0x00000073
    THLora_TestBench = 116, // 0x00000074
    ProductPackageManager = 117, // 0x00000075
    ReadoutConfigMain = 118, // 0x00000076
    PDCL2_HandlerWindow = 119, // 0x00000077
    DeviceCovers = 120, // 0x00000078
    EDCLoRa_TestBench = 121, // 0x00000079
    M8hardwareTest = 122, // 0x0000007A
    M8LCDTest = 123, // 0x0000007B
    M8RadioTest = 124, // 0x0000007C
    M8FinalTest = 125, // 0x0000007D
    M8LaserTest = 126, // 0x0000007E
    M8PrintLabelTest = 127, // 0x0000007F
    MicroLoRa_TestBench = 128, // 0x00000080
    MBus_CommandWindow = 129, // 0x00000081
    IUWS_HardwareTest = 130, // 0x00000082
    SDFunctionTestT2 = 131, // 0x00000083
    C5_HydraulicTest = 132, // 0x00000084
    NDC_PDCL_FactoryTest = 133, // 0x00000085
    NDC_PDCL_FinalTest = 134, // 0x00000086
    OEM_ImportData = 135, // 0x00000087
    Handler_UI = 200, // 0x000000C8
    HandlerLogic = 201, // 0x000000C9
    Communication_UI = 202, // 0x000000CA
    CommunicationLogic = 203, // 0x000000CB
    US_TouchPad = 204, // 0x000000CC
    PDCLora2_PCB_HT_FTPotted = 205, // 0x000000CD
    DeliveryNoteTool = 206, // 0x000000CE
    ManualCalibrationTool = 207, // 0x000000CF
    NBIoTDeviceManagment = 208, // 0x000000D0
    LoraGatewayLGMTest = 209, // 0x000000D1
    LoraGatewayMainboardTest = 210, // 0x000000D2
    LoraGatewayCPUTest = 211, // 0x000000D3
    LoraGatewayFunctionTest = 212, // 0x000000D4
    MBusCommandWindow = 213, // 0x000000D5
    EDCL_Handler = 214, // 0x000000D6
    THL_Hander = 215, // 0x000000D7
    S4_Handler = 216, // 0x000000D8
    NFCL_Handler = 217, // 0x000000D9
    M8_Handler = 218, // 0x000000DA
    IDU_Handler = 219, // 0x000000DB
    EDC_HandlerWindow = 220, // 0x000000DC
    MinolHandlerWindow = 221, // 0x000000DD
    MinomatHandlerWindow = 222, // 0x000000DE
    PDC_HandlerWindow = 223, // 0x000000DF
    S3_HandlerWindow = 224, // 0x000000E0
    SmokeDetectorWindow = 225, // 0x000000E1
    WF_Handler = 226, // 0x000000E2
    TH_Hander = 227, // 0x000000E3
    TestCourses = 228, // 0x000000E4
    GMM_HandlerWindow = 229, // 0x000000E5
    PDCL_HandlerWindow = 230, // 0x000000E6
    MBus_HandlerWindow = 231, // 0x000000E7
    CommunicationPortWindow = 232, // 0x000000E8
    DeviceCollectorWindow = 233, // 0x000000E9
    ConfiguratorWindow = 234, // 0x000000EA
    DeviceConfigurator_HandlerWindow = 235, // 0x000000EB
    FirmwareUpdateToolWindow = 236, // 0x000000EC
    SerialNumberReservationMainWindow = 237, // 0x000000ED
    HandlerCheckerMainWindow = 238, // 0x000000EE
    SapCacheMainWindow = 239, // 0x000000EF
    HydraulicHardwareControl = 240, // 0x000000F0
    PressureDeviceHardwareControl = 241, // 0x000000F1
    HydraulicTest = 242, // 0x000000F2
    IUWPrintStation = 243, // 0x000000F3
    FactoryPrinter = 244, // 0x000000F4
    DeviceQueries = 245, // 0x000000F5
    IUWSLCD_Test = 246, // 0x000000F6
    EDC_Configuration = 247, // 0x000000F7
    DeviceConfigurator = 300, // 0x0000012C
  }
}


--- TranslationListText.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.TranslationListText
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;

#nullable disable
namespace GmmDbLib
{
  public class TranslationListText : IComparable
  {
    public bool IsMessage = false;
    public TranslatorTwoLetterISOLanguageNames UsedLanguages;
    public string TranslationReferenceText = string.Empty;
    public string TranslationText = string.Empty;
    public int? MessageNumber;

    public Tg TranslationGroup { get; private set; }

    public string KeyText { get; private set; }

    public string DefaultText { get; private set; }

    public TranslationListText(string listText)
    {
      int length = listText.IndexOf(':');
      string str = listText.Substring(0, length);
      Tg result;
      if (!Enum.TryParse<Tg>(str, out result))
        throw new Exception("Unknown TranslationGroup : " + str + " -> Use newer software version for translation !!!");
      this.TranslationGroup = result;
      this.KeyText = listText.Substring(length + 1);
    }

    public TranslationListText(Tg translationGroup, string keyText)
    {
      this.TranslationGroup = translationGroup;
      this.KeyText = keyText;
    }

    public TranslationListText(Tg translationGroup, string keyText, string defaultText)
    {
      this.TranslationGroup = translationGroup;
      this.KeyText = keyText;
      this.DefaultText = defaultText;
    }

    public TranslationListText(Tg translationGroup, string keyText, bool isMessage)
    {
      this.TranslationGroup = translationGroup;
      this.KeyText = keyText;
      this.IsMessage = isMessage;
    }

    public TranslationListText(
      Tg translationGroup,
      string keyText,
      string defaultText,
      bool isMessage)
    {
      this.TranslationGroup = translationGroup;
      this.KeyText = keyText;
      this.DefaultText = defaultText;
      this.IsMessage = isMessage;
    }

    public void SetText(string languageCode, string languageText)
    {
      if (this.UsedLanguages == null)
        throw new Exception("UsedLanguages not defined");
      if (languageCode == this.UsedLanguages.ReferenceLanguage)
      {
        this.TranslationReferenceText = languageText;
      }
      else
      {
        if (!(languageCode == this.UsedLanguages.TranslationLanguage))
          throw new Exception("language code not part of UsedLanguages");
        this.TranslationText = languageText;
      }
    }

    public override string ToString() => this.TranslationGroup.ToString() + ":" + this.KeyText;

    public int CompareTo(object obj)
    {
      return obj == null || !(obj is TranslationListText) ? 1 : (obj as TranslationListText).ToString().CompareTo(this.ToString());
    }
  }
}


--- TranslatorKey.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.TranslatorKey
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;

#nullable disable
namespace GmmDbLib
{
  [Obsolete]
  public enum TranslatorKey
  {
    MeterInstallerMissingSerialnumber,
    MeterInstallerMissingReadoutSettings,
    MeterInstallerInvalidSubNodes,
    MeterInstallerMeterAlreadyExists,
    MeterInstallerMissingNodeName,
    MeterInstallerBaseNodeAlreadyExist,
    MeterInstallerDeleteNodeQuestion,
    MeterInstallerCanNotDeleteNode,
    MeterInstallerSystemmanagerLightLimitReached,
    MeterInstallerWrongNodeNameLength,
    MeterInstallerDemoLimitReached,
    GMMDatabaseUpdateQuestion,
  }
}


--- TranslatorTwoLetterISOLanguageNames.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.TranslatorTwoLetterISOLanguageNames
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

#nullable disable
namespace GmmDbLib
{
  public class TranslatorTwoLetterISOLanguageNames
  {
    public string ReferenceLanguage;
    public string TranslationLanguage;
  }
}


--- ZRDataAdapter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.ZRDataAdapter
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Data;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  public class ZRDataAdapter : DbDataAdapter
  {
    internal BaseDbConnection baseDbConnection;
    internal DbDataAdapter commonAdapter;

    public ZRDataAdapter(BaseDbConnection baseDbConnection, DbDataAdapter commonAdapter)
      : base(commonAdapter)
    {
      this.commonAdapter = commonAdapter;
      this.baseDbConnection = baseDbConnection;
    }

    [Obsolete]
    public void Fill(DataTable MyDataTable, IDbTransaction Transaction)
    {
      this.commonAdapter.SelectCommand.Transaction = (DbTransaction) Transaction;
      this.commonAdapter.Fill(MyDataTable);
    }

    [Obsolete]
    public virtual bool Fill(DataTable MyDataTable, out string Fehlerstring)
    {
      Fehlerstring = "";
      try
      {
        this.Fill(MyDataTable);
        return true;
      }
      catch (Exception ex)
      {
        Fehlerstring = ex.ToString();
      }
      return false;
    }

    [Obsolete]
    public new int Update(DataTable MyDataTable)
    {
      DbCommandBuilder commandBuilder = this.baseDbConnection.ProviderFactory.CreateCommandBuilder();
      commandBuilder.QuotePrefix = "[";
      commandBuilder.QuoteSuffix = "]";
      commandBuilder.DataAdapter = this.commonAdapter;
      this.commonAdapter.UpdateCommand = commandBuilder.GetUpdateCommand();
      this.commonAdapter.InsertCommand = commandBuilder.GetInsertCommand();
      this.commonAdapter.DeleteCommand = commandBuilder.GetDeleteCommand();
      return this.commonAdapter.Update(MyDataTable);
    }

    [Obsolete]
    public int Update(DataTable MyDataTable, IDbTransaction Transaction)
    {
      if (this.commonAdapter.SelectCommand.Transaction == null)
        this.commonAdapter.SelectCommand.Transaction = (DbTransaction) Transaction;
      DbCommandBuilder commandBuilder = this.baseDbConnection.ProviderFactory.CreateCommandBuilder();
      commandBuilder.QuotePrefix = "[";
      commandBuilder.QuoteSuffix = "]";
      commandBuilder.DataAdapter = this.commonAdapter;
      this.commonAdapter.UpdateCommand = commandBuilder.GetUpdateCommand();
      this.commonAdapter.InsertCommand = commandBuilder.GetInsertCommand();
      this.commonAdapter.DeleteCommand = commandBuilder.GetDeleteCommand();
      return this.commonAdapter.Update(MyDataTable);
    }

    public virtual int Update(DataTable MyDataTable, bool IgnoreUpdateErrors)
    {
      try
      {
        return base.Update(MyDataTable);
      }
      catch (Exception ex)
      {
        if (!IgnoreUpdateErrors)
          throw ex;
      }
      return 0;
    }
  }
}


--- ZRGlobalID.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: GmmDbLib.ZRGlobalID
// Assembly: GmmDbLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: FBABFE79-334C-44CD-A4BC-A66429DECD0D
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\GmmDbLib.dll

using System;
using System.Data;
using System.Data.Common;

#nullable disable
namespace GmmDbLib
{
  public static class ZRGlobalID
  {
    public static void CheckID(BaseDbConnection db, string tableName, string fieldName, int id)
    {
      if (db == null)
        throw new ArgumentNullException(nameof (db));
      using (DbConnection newConnection = db.GetNewConnection())
      {
        newConnection.Open();
        ZRGlobalID.CheckID(newConnection, (DbTransaction) null, tableName, fieldName, id);
      }
    }

    public static void CheckID(
      DbConnection connection,
      DbTransaction transaction,
      string tableName,
      string fieldName,
      int id)
    {
      if (connection == null)
        throw new ArgumentNullException(nameof (connection));
      if (connection.State != ConnectionState.Open)
        throw new Exception("Connection can not be closed!");
      if (string.IsNullOrEmpty(tableName))
        throw new ArgumentNullException(nameof (tableName));
      if (string.IsNullOrEmpty(fieldName))
        throw new ArgumentNullException(nameof (fieldName));
      string databaseLocationName = DatabaseIdentification.GetDatabaseLocationName(connection, transaction);
      if (string.IsNullOrEmpty(databaseLocationName))
        throw new Exception("Can not determine the DatabaseLocationName from table DatabaseIdentification!");
      DbCommand command = connection.CreateCommand();
      command.Transaction = transaction;
      command.CommandText = "SELECT ZRNextNr, ZRFirstNr, ZRLastNr FROM ZRGlobalID WHERE ZRTableName=@ZRTableName AND ZRFieldName=@ZRFieldName AND DatabaseLocationName=@DatabaseLocationName;";
      DbUtil.AddParameter((IDbCommand) command, "@ZRTableName", tableName);
      DbUtil.AddParameter((IDbCommand) command, "@ZRFieldName", fieldName);
      DbUtil.AddParameter((IDbCommand) command, "@DatabaseLocationName", databaseLocationName);
      using (DbDataReader dbDataReader = command.ExecuteReader())
      {
        int num = dbDataReader.Read() ? dbDataReader.GetInt32(0) : throw new Exception("Can not find the difinition of id range (see table ZRGlobalID)! ZRTableName=" + tableName + ", ZRFieldName=" + fieldName + ", DatabaseLocationName=" + databaseLocationName);
        int int32_1 = dbDataReader.GetInt32(1);
        int int32_2 = dbDataReader.GetInt32(2);
        if (int32_1 > int32_2)
          throw new ArgumentOutOfRangeException("firstNr > lastNr");
        if (num < int32_1)
          throw new ArgumentOutOfRangeException("nextNr < firstNr");
        if (int32_2 < num)
          throw new ArgumentOutOfRangeException("lastNr > nextNr");
        if (id > num && id < int32_2)
          throw new ArgumentOutOfRangeException("The MeterID has invalid range (see database ZRGlobalID table). The MeterID of device is " + id.ToString() + " but into database is FIRST: " + int32_1.ToString() + " LAST: " + int32_2.ToString() + " NEXT: " + num.ToString());
      }
    }
  }
}

