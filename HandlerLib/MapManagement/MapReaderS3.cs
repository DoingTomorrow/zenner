// Decompiled with JetBrains decompiler
// Type: HandlerLib.MapManagement.MapReaderS3
// Assembly: HandlerLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 32680C26-DD6F-4028-82D3-7440714FE33F
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\HandlerLib.dll

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows;

#nullable disable
namespace HandlerLib.MapManagement
{
  public class MapReaderS3 : MapReader
  {
    public MapReaderS3()
    {
      this.ReaderName = nameof (MapReaderS3);
      this.ReaderDescription = "This reader is for map files generated by the IAR universal Linker for older Controller";
      this.ParametersToIgnore.Add("DATA16_ID");
      this.ParametersToIgnore.Add("Rel_*");
    }

    public override void ReadMap(string mapPath, MapClassManager mapClassMgr = null)
    {
      using (StreamReader streamReader = new StreamReader(mapPath))
      {
        string Name = (string) null;
        this.Clear();
        while (true)
        {
          string info;
          string[] strArray;
          do
          {
            do
            {
              string str1;
              do
              {
                string str2 = streamReader.ReadLine();
                if (str2 != null)
                {
                  ++this.LineNumber;
                  if (str2.IndexOf("END OF CROSS REFERENCE") < 0)
                  {
                    if (this.LinkerTypeAndVersion == string.Empty && str2.ToUpper().IndexOf("LINKER") >= 0)
                    {
                      this.LinkerTypeAndVersion = this.RemoveMultipleSpaces(str2.Replace('#', ' ').Trim());
                      if (this.LinkerTypeAndVersion.IndexOf("Universal") < 0)
                        goto label_5;
                    }
                    if (str2.IndexOf("SEGMENTS IN ADDRESS ORDER") < 0)
                    {
                      int length = str2.IndexOfAny(new char[2]
                      {
                        '#',
                        '*'
                      });
                      if (length >= 0)
                        str2 = str2.Substring(0, length);
                      if (str2.IndexOf('(') >= 0)
                        str2 = string.Empty;
                      str1 = str2.Trim();
                    }
                    else
                      goto label_7;
                  }
                  else
                    goto label_37;
                }
                else
                  goto label_37;
              }
              while (str1.Length == 0);
              StringBuilder stringBuilder = new StringBuilder(str1);
              for (int index = 0; index < stringBuilder.Length; ++index)
              {
                if (stringBuilder.Length > index + 1 && stringBuilder[index] == ' ' && stringBuilder[index + 1] == ' ')
                {
                  stringBuilder.Remove(index + 1, 1);
                  --index;
                }
              }
              info = stringBuilder.ToString();
            }
            while (info[0] == '?' || info[0] == '_');
            strArray = info.Split(' ');
            if (Name == null)
            {
              if (strArray.Length < 2)
                goto label_30;
            }
            else
              goto label_20;
          }
          while (strArray[1] == "-");
          goto label_25;
label_7:
          info = "Start der Map Information";
          goto label_35;
label_20:
          try
          {
            this.NewVariable(uint.Parse(strArray[0], NumberStyles.HexNumber), Name, 0U);
          }
          catch
          {
            info += "###! Hex-Format-Error on follow Line";
          }
          Name = (string) null;
          goto label_34;
label_25:
          if (this.FirmwareVersion == string.Empty && strArray[0].ToUpper().IndexOf("FWVERSION") >= 0)
            this.FirmwareVersion = uint.Parse(strArray[1], NumberStyles.HexNumber).ToString();
          try
          {
            this.NewVariable(uint.Parse(strArray[1], NumberStyles.HexNumber), strArray[0], 0U);
            goto label_34;
          }
          catch
          {
            info += "###! Hex-Format-Error";
            goto label_34;
          }
label_30:
          if (strArray[0].Length > 0)
            Name = strArray[0];
          else
            info += "#### leere Zeile";
label_34:
label_35:
          this.AddInfo(info);
        }
label_5:
        throw new Exception("This file is not supported by this READER!!!\nPlease use another Reader for this linker file.");
label_37:
        streamReader.Close();
      }
      this.ShowInfo();
    }

    public override void GenerateByteArray(string classNameSpace, string className, string path)
    {
      string[] usedFieldes = new string[2]
      {
        "ParameterName",
        "ParameterAddress"
      };
      MapClassGenerator mapClassGenerator = new MapClassGenerator();
      mapClassGenerator.StartClassGeneration((byte) 0, classNameSpace, className, usedFieldes);
      SortedList<uint, string> sortedList = new SortedList<uint, string>();
      foreach (MapParameterInfo mapParameterInfo in (IEnumerable<MapParameterInfo>) this.FirmwareParameterList.Values)
      {
        try
        {
          mapClassGenerator.InsertComment(mapParameterInfo.FirmwareName);
          mapClassGenerator.AddAsByteListForced(mapParameterInfo.FirmwareName);
          mapClassGenerator.InsertComment("Address: 0x" + mapParameterInfo.MapAddress.ToString("x"));
          mapClassGenerator.AddAsByteListForced(mapParameterInfo.MapAddress);
          mapClassGenerator.NewLine();
          if (!sortedList.ContainsKey(mapParameterInfo.MapAddress))
            sortedList.Add(mapParameterInfo.MapAddress, mapParameterInfo.FirmwareName);
          else
            sortedList[mapParameterInfo.MapAddress] = sortedList[mapParameterInfo.MapAddress] + "; " + mapParameterInfo.FirmwareName;
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show(ex.Message);
        }
      }
      mapClassGenerator.FinaliseClassGeneraton();
      mapClassGenerator.StartCommentBlock("Parameter by address");
      foreach (KeyValuePair<uint, string> keyValuePair in sortedList)
        mapClassGenerator.AddAddressParameterLineToCommentBlock(keyValuePair.Key, keyValuePair.Value);
      mapClassGenerator.FinishCommentBlock();
      mapClassGenerator.SaveClass(path);
    }

    public override void ReadLists(string mapPath, MapClassManager mapClassMgr = null)
    {
    }
  }
}
