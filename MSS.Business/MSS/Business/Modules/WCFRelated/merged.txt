
--- ServiceClient.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS.Business.Modules.WCFRelated.ServiceClient
// Assembly: MSS.Business, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 64DA76B1-4684-48DF-AFDA-4106EF3D1AF4
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS.Business.dll

using MSS.Business.Errors;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Structures;
using MSS.DTO.Structures;
using MSS.DTO.Sync;
using MSS.Interfaces;
using MSS.Utils.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Threading;
using System.Threading.Tasks;

#nullable disable
namespace MSS.Business.Modules.WCFRelated
{
  public class ServiceClient : ServiceProxyBase<IService>
  {
    private readonly string ip;

    public ServiceClient(string ip)
      : base(ip)
    {
      this.ip = ip;
    }

    protected override string GetEndpointAdress(string ip)
    {
      return string.Format("net.tcp://{0}:13758/MSSService", (object) ip);
    }

    public string InsertNewClient(string clientId, string userName, Guid userId)
    {
      string result = (string) null;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => result = d.InsertNewClient(clientId, userName, userId)));
      return result;
    }

    public byte[] GetOrders()
    {
      byte[] res = (byte[]) null;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => res = d.GetOrders()));
      return res;
    }

    public byte[] GetData(string t, object predicate)
    {
      byte[] res = (byte[]) null;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => res = d.GetData(t, (object) predicate.ToString())));
      return res;
    }

    public void UpdateEntities(string t, object items, Guid idUser)
    {
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => d.UpdateEntities(t, items, idUser)));
    }

    public string GetClientStatus(string clientId)
    {
      string result = (string) null;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => result = d.GetClientStatus(clientId)));
      return result;
    }

    public async Task<string> GetClientStatusAsync(string clientId)
    {
      string test = await this.Channel.GetClientStatusAsync(clientId);
      return test;
    }

    public Dictionary<Guid, string> GetSynctonizationExtraInformation(
      Dictionary<Guid, Type> conflictsDictionary)
    {
      Dictionary<string, string> extraCollection = (Dictionary<string, string>) null;
      List<string> guids = new List<string>();
      List<string> types = new List<string>();
      foreach (KeyValuePair<Guid, Type> conflicts in conflictsDictionary)
      {
        guids.Add(conflicts.Key.ToString());
        types.Add(conflicts.Value.Name);
      }
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => extraCollection = d.GetSynctonizationExtraInformation(guids, types)));
      return extraCollection.ToDictionary<KeyValuePair<string, string>, Guid, string>((Func<KeyValuePair<string, string>, Guid>) (node => Guid.Parse(node.Key)), (Func<KeyValuePair<string, string>, string>) (node => node.Value));
    }

    public StructureNodeDTOListsSerializable GetStructures(
      string searchText,
      StructureTypeEnum structureType)
    {
      StructureNodeDTOListsSerializable ch = (StructureNodeDTOListsSerializable) null;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => ch = d.GetStructures(searchText, structureType)));
      return ch;
    }

    public void SendReadingValues(List<MeterReadingValue> readingValues)
    {
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => d.SaveReadingValues(readingValues)));
    }

    public void ReceiveData(string t, object items)
    {
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => d.ReceiveData(t, items as byte[])));
    }

    public void TestConnection()
    {
      try
      {
        PingReply pingReply = new Ping().Send(this.ip, 10);
        bool flag = true;
        if (pingReply != null)
        {
          MessageHandler.LogDebug("ping ok!");
          flag = pingReply.Status == IPStatus.Success;
        }
        MessageHandler.LogDebug("ping tested");
        if (!flag)
          throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
        using (TcpClient tcpClient = new TcpClient())
        {
          IAsyncResult asyncResult = tcpClient.BeginConnect(this.ip, 13758, (AsyncCallback) null, (object) null);
          WaitHandle asyncWaitHandle = asyncResult.AsyncWaitHandle;
          try
          {
            if (!asyncResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(10.0), false))
            {
              tcpClient.Close();
              throw new TimeoutException();
            }
            tcpClient.EndConnect(asyncResult);
            MessageHandler.LogDebug("tcp ok!");
            this.Channel.TestConnection();
            MessageHandler.LogDebug("channel ok!!");
          }
          catch (SocketException ex)
          {
            MessageHandler.LogException((Exception) ex);
            throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
          }
          catch (TimeoutException ex)
          {
            MessageHandler.LogException((Exception) ex);
            throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
          }
          finally
          {
            asyncWaitHandle.Close();
          }
        }
      }
      catch (Exception ex)
      {
        throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
      }
    }

    public void SetClientState(Guid[] listOfObjects)
    {
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => d.SetClientState(listOfObjects)));
    }

    public Dictionary<Guid, SimpleMetadata> GetTemporaryMetadataDictionary()
    {
      Dictionary<Guid, SimpleMetadata> result = new Dictionary<Guid, SimpleMetadata>();
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => result = d.GetTemporaryMetadataDictionary()));
      return result;
    }

    public SerializedSyncResponse DownloadFromServer(
      Guid userId,
      DateTime lastSuccessfulDownload,
      List<Guid> existingRootNodes,
      List<Guid> existingOrders,
      bool userMasterPool)
    {
      SerializedSyncResponse value = (SerializedSyncResponse) null;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => value = d.DownloadFromServer(userId, lastSuccessfulDownload, existingRootNodes, existingOrders, userMasterPool)));
      return value;
    }

    public bool UploadToServer(SerializedSyncResponse changeset)
    {
      bool value = true;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => value = d.UploadToServer(changeset)));
      return value;
    }

    public bool LockDownloadedEntitiesFromServer(List<Guid> orderToUpdateIdList, Guid lockByUser)
    {
      bool value = true;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => value = d.LockDownloadedEntitiesFromServer(orderToUpdateIdList, lockByUser)));
      return value;
    }

    public string GetTimeFromServer()
    {
      string value = (string) null;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => value = d.GetTimeFromServer()));
      return value;
    }

    public bool SaveMinomatOnServer(MinomatSerializableDTO minomat)
    {
      bool value = true;
      this.Use((ServiceProxyBase<IService>.UseServiceDelegate) (d => value = d.SaveMinomatOnServer(minomat)));
      return value;
    }
  }
}


--- ServiceProxyBase`1.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS.Business.Modules.WCFRelated.ServiceProxyBase`1
// Assembly: MSS.Business, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 64DA76B1-4684-48DF-AFDA-4106EF3D1AF4
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS.Business.dll

using MSS.Business.Errors;
using MSS.Utils.Utils;
using System;
using System.Net.Security;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.ServiceModel.Security;

#nullable disable
namespace MSS.Business.Modules.WCFRelated
{
  public abstract class ServiceProxyBase<T> : IDisposable where T : class
  {
    private readonly string _serviceEndpointUri;
    private readonly object _sync = new object();
    private IChannelFactory<T> _channelFactory;
    private T _channel;
    private bool _disposed = false;

    protected ServiceProxyBase(string ip) => this._serviceEndpointUri = this.GetEndpointAdress(ip);

    protected abstract string GetEndpointAdress(string ip);

    ~ServiceProxyBase() => this.Dispose(false);

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    private void Dispose(bool disposeManaged)
    {
      if (this._disposed || !disposeManaged)
        return;
      lock (this._sync)
      {
        this.CloseChannel();
        if (this._channelFactory != null)
          ((IDisposable) this._channelFactory).Dispose();
        this._channel = default (T);
        this._channelFactory = (IChannelFactory<T>) null;
      }
    }

    protected T Channel
    {
      get
      {
        this.Initialize();
        return this._channel;
      }
    }

    protected void CloseChannel()
    {
      if ((object) this._channel == null)
        return;
      ((ICommunicationObject) (object) this._channel).Close();
    }

    private void Initialize()
    {
      lock (this._sync)
      {
        if ((object) this._channel != null)
          return;
        this._channelFactory = (IChannelFactory<T>) new ChannelFactory<T>((Binding) this.GetNetTcpBinding());
        this._channel = this._channelFactory.CreateChannel(new EndpointAddress(this._serviceEndpointUri));
        ((ICommunicationObject) (object) this._channel).Faulted += new EventHandler(this.ServiceProxyBase_Faulted);
        ((ICommunicationObject) (object) this._channel).Opened += new EventHandler(this.ServiceProxyBase_Opened);
      }
    }

    private void ServiceProxyBase_Opened(object sender, EventArgs e)
    {
      MSS.Business.Utils.AppContext.Current.IsServerAvailableAndStatusAccepted = true;
    }

    private void ServiceProxyBase_Faulted(object sender, EventArgs e)
    {
      MSS.Business.Utils.AppContext.Current.IsServerAvailableAndStatusAccepted = false;
    }

    private NetTcpBinding GetNetTcpBinding()
    {
      NetTcpBinding netTcpBinding = new NetTcpBinding()
      {
        TransactionFlow = false
      };
      netTcpBinding.Security.Transport.ProtectionLevel = ProtectionLevel.EncryptAndSign;
      netTcpBinding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Windows;
      netTcpBinding.Security.Mode = SecurityMode.None;
      netTcpBinding.MaxReceivedMessageSize = (long) int.MaxValue;
      netTcpBinding.OpenTimeout = new TimeSpan(0, 10, 0);
      netTcpBinding.CloseTimeout = new TimeSpan(0, 10, 0);
      netTcpBinding.ReceiveTimeout = new TimeSpan(0, 10, 0);
      netTcpBinding.SendTimeout = new TimeSpan(0, 10, 0);
      netTcpBinding.MaxReceivedMessageSize = 734003200L;
      netTcpBinding.MaxBufferSize = 734003200;
      netTcpBinding.MaxBufferPoolSize = 734003200L;
      return netTcpBinding;
    }

    public void Use(ServiceProxyBase<T>.UseServiceDelegate codeBlock)
    {
      this.Initialize();
      bool flag = false;
      ICommunicationObject communicationObject = (ICommunicationObject) null;
      if ((object) this._channel != null)
        communicationObject = (ICommunicationObject) (object) this._channel;
      try
      {
        codeBlock(this._channel);
        communicationObject.Close();
        flag = true;
      }
      catch (CommunicationObjectAbortedException ex)
      {
        throw;
      }
      catch (CommunicationObjectFaultedException ex)
      {
        throw;
      }
      catch (MessageSecurityException ex)
      {
        throw;
      }
      catch (ChannelTerminatedException ex)
      {
        communicationObject?.Abort();
        throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
      }
      catch (ServerTooBusyException ex)
      {
        communicationObject?.Abort();
        throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
      }
      catch (EndpointNotFoundException ex)
      {
        communicationObject?.Abort();
        throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
      }
      catch (FaultException ex)
      {
        MessageHandler.LogException((Exception) ex);
        communicationObject?.Abort();
        throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
      }
      catch (CommunicationException ex)
      {
        communicationObject?.Abort();
        throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
      }
      catch (TimeoutException ex)
      {
        communicationObject?.Abort();
        throw new BaseApplicationException(MessageCodes.Server_Not_Available.GetStringValue());
      }
      catch (ObjectDisposedException ex)
      {
      }
      finally
      {
        if (!flag && communicationObject != null)
          communicationObject.Abort();
      }
    }

    public delegate void UseServiceDelegate(T proxy) where T : class;
  }
}


--- SettingsConnectionManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS.Business.Modules.WCFRelated.SettingsConnectionManager
// Assembly: MSS.Business, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 64DA76B1-4684-48DF-AFDA-4106EF3D1AF4
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS.Business.dll

using MSS.Business.Errors;
using MSS.Business.Utils;
using System.Net.NetworkInformation;
using System.Threading.Tasks;

#nullable disable
namespace MSS.Business.Modules.WCFRelated
{
  public class SettingsConnectionManager
  {
    public static async Task<string> ServerMethodCall(string ip)
    {
      string str;
      using (ServiceClient proxy = new ServiceClient(ip))
      {
        string result = await proxy.GetClientStatusAsync(AppContext.Current.MSSClientId);
        MessageHandler.LogDebug("--------------------------ServerMethodCall----------------------------------" + result);
        str = result;
      }
      return str;
    }

    public bool TestConnectiontoServer(string ip)
    {
      try
      {
        using (ServiceClient serviceClient = new ServiceClient(ip))
          serviceClient.TestConnection();
      }
      catch (BaseApplicationException ex)
      {
        return false;
      }
      return true;
    }

    public bool PingHost(string nameOrAddress)
    {
      PingReply pingReply;
      using (Ping ping = new Ping())
        pingReply = ping.Send(nameOrAddress);
      bool flag = false;
      if (pingReply != null)
        flag = pingReply.Status == IPStatus.Success;
      return flag;
    }

    public bool IsServerAvailableAndStatusAccepted(string ip)
    {
      try
      {
        if (string.IsNullOrEmpty(ip))
          return false;
        bool flag;
        try
        {
          flag = this.PingHost(ip);
        }
        catch (PingException ex)
        {
          return false;
        }
        if (!flag)
          return false;
        using (ServiceClient serviceClient = new ServiceClient(ip))
          return serviceClient.GetClientStatus(AppContext.Current.MSSClientId) == "accepted";
      }
      catch (BaseApplicationException ex)
      {
        return false;
      }
    }
  }
}


--- SynchronizationServiceClient.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS.Business.Modules.WCFRelated.SynchronizationServiceClient
// Assembly: MSS.Business, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 64DA76B1-4684-48DF-AFDA-4106EF3D1AF4
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS.Business.dll

using Microsoft.Synchronization;
using Microsoft.Synchronization.Data;
using MSS.Business.Utils;
using MSS.Interfaces;
using System;
using System.Data;
using System.IO;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Channels;

#nullable disable
namespace MSS.Business.Modules.WCFRelated
{
  public class SynchronizationServiceClient : KnowledgeSyncProvider, IDisposable
  {
    protected SyncIdFormatGroup idFormatGroup;
    protected string scopeName;
    protected DirectoryInfo localBatchingDirectory;
    protected bool disposed = false;
    private ISyncService proxy;
    protected string serviceIP;
    private string batchingDirectory = Environment.ExpandEnvironmentVariables("%TEMP%");

    public string BatchingDirectory
    {
      get => this.batchingDirectory;
      set
      {
        if (string.IsNullOrEmpty(value))
          throw new ArgumentException("value cannot be null or empty");
        try
        {
          Uri uri = new Uri(value);
          if (!uri.IsFile || uri.IsUnc)
            throw new ArgumentException("value must be a local directory");
          this.batchingDirectory = value;
        }
        catch (Exception ex)
        {
          throw new ArgumentException("Invalid batching directory.", ex);
        }
      }
    }

    public SynchronizationServiceClient(string scopeName, string serviceIP)
    {
      this.scopeName = scopeName;
      this.serviceIP = serviceIP;
      this.CreateProxy();
      this.proxy.Initialize(scopeName);
    }

    public override void BeginSession(
      SyncProviderPosition position,
      SyncSessionContext syncSessionContext)
    {
      this.proxy.BeginSession(position);
    }

    public override void EndSession(SyncSessionContext syncSessionContext)
    {
      this.proxy.EndSession();
      if (this.localBatchingDirectory == null)
        return;
      this.localBatchingDirectory.Refresh();
      if (this.localBatchingDirectory.Exists)
        this.localBatchingDirectory.Delete(true);
    }

    public bool IsDataChanged(SyncKnowledge sourceKnowledge)
    {
      DataSet dataSet = (this.proxy.GetChanges(this.proxy.GetKnowledge().BatchSize, sourceKnowledge).DataRetriever as DbSyncContext).DataSet;
      return dataSet.Tables.Count > 0 && dataSet.Tables.Cast<DataTable>().Any<DataTable>((System.Func<DataTable, bool>) (table => table.Rows.Count > 0));
    }

    public override ChangeBatch GetChangeBatch(
      uint batchSize,
      SyncKnowledge destinationKnowledge,
      out object changeDataRetriever)
    {
      GetChangesParameters changes = this.proxy.GetChanges(batchSize, destinationKnowledge);
      changeDataRetriever = changes.DataRetriever;
      if (changeDataRetriever is DbSyncContext dbSyncContext && dbSyncContext.IsDataBatched)
      {
        if (this.localBatchingDirectory == null)
        {
          this.localBatchingDirectory = new DirectoryInfo(Path.Combine(this.batchingDirectory, "WebSync_" + ((object) dbSyncContext.MadeWithKnowledge.ReplicaId).ToString()));
          if (!this.localBatchingDirectory.Exists)
            this.localBatchingDirectory.Create();
        }
        string str = Path.Combine(this.localBatchingDirectory.FullName, dbSyncContext.BatchFileName);
        if (!new FileInfo(str).Exists)
        {
          byte[] buffer = this.proxy.DownloadBatchFile(dbSyncContext.BatchFileName);
          using (FileStream fileStream = new FileStream(str, FileMode.Create, FileAccess.Write))
            fileStream.Write(buffer, 0, buffer.Length);
        }
        dbSyncContext.BatchFileName = str;
      }
      return changes.ChangeBatch;
    }

    public override FullEnumerationChangeBatch GetFullEnumerationChangeBatch(
      uint batchSize,
      SyncId lowerEnumerationBound,
      SyncKnowledge knowledgeForDataRetrieval,
      out object changeDataRetriever)
    {
      throw new NotImplementedException();
    }

    public override void GetSyncBatchParameters(out uint batchSize, out SyncKnowledge knowledge)
    {
      SyncBatchParameters knowledge1 = this.proxy.GetKnowledge();
      batchSize = knowledge1.BatchSize;
      knowledge = knowledge1.DestinationKnowledge;
    }

    public override SyncIdFormatGroup IdFormats
    {
      get
      {
        if (this.idFormatGroup == (SyncIdFormatGroup) null)
        {
          this.idFormatGroup = new SyncIdFormatGroup();
          this.idFormatGroup.ChangeUnitIdFormat.IsVariableLength = false;
          this.idFormatGroup.ChangeUnitIdFormat.Length = (ushort) 1;
          this.idFormatGroup.ReplicaIdFormat.IsVariableLength = false;
          this.idFormatGroup.ReplicaIdFormat.Length = (ushort) 16;
          this.idFormatGroup.ItemIdFormat.IsVariableLength = true;
          this.idFormatGroup.ItemIdFormat.Length = (ushort) 10240;
        }
        return this.idFormatGroup;
      }
    }

    public override void ProcessChangeBatch(
      ConflictResolutionPolicy resolutionPolicy,
      ChangeBatch sourceChanges,
      object changeDataRetriever,
      SyncCallbacks syncCallbacks,
      SyncSessionStatistics sessionStatistics)
    {
      if (changeDataRetriever is DbSyncContext dbSyncContext && dbSyncContext.IsDataBatched)
      {
        string name = new FileInfo(dbSyncContext.BatchFileName).Name;
        string remotePeerId = ((object) dbSyncContext.MadeWithKnowledge.ReplicaId).ToString();
        if (!this.proxy.HasUploadedBatchFile(name, remotePeerId))
        {
          FileStream fileStream = new FileStream(dbSyncContext.BatchFileName, FileMode.Open, FileAccess.Read);
          byte[] numArray = new byte[fileStream.Length];
          using (fileStream)
            fileStream.Read(numArray, 0, numArray.Length);
          this.proxy.UploadBatchFile(name, numArray, remotePeerId);
        }
        dbSyncContext.BatchFileName = name;
      }
      SyncSessionStatistics sessionStatistics1 = this.proxy.ApplyChanges(resolutionPolicy, sourceChanges, changeDataRetriever);
      sessionStatistics.ChangesApplied += sessionStatistics1.ChangesApplied;
      sessionStatistics.ChangesFailed += sessionStatistics1.ChangesFailed;
    }

    public override void ProcessFullEnumerationChangeBatch(
      ConflictResolutionPolicy resolutionPolicy,
      FullEnumerationChangeBatch sourceChanges,
      object changeDataRetriever,
      SyncCallbacks syncCallbacks,
      SyncSessionStatistics sessionStatistics)
    {
    }

    protected string GetEndpointAdress(string ip)
    {
      return string.Format("net.tcp://{0}:13759/MSSSynchronizationService", (object) ip);
    }

    protected void CreateProxy()
    {
      this.proxy = new ChannelFactory<ISyncService>((Binding) MSSHelper.GetNetTcpBinding(), new EndpointAddress(this.GetEndpointAdress(this.serviceIP))).CreateChannel();
      ((IContextChannel) this.proxy).OperationTimeout = new TimeSpan(0, 10, 0);
    }

    public DbSyncScopeDescription GetScopeDescription(string databaseEngine)
    {
      return this.proxy.GetScopeDescription(databaseEngine);
    }

    ~SynchronizationServiceClient()
    {
      try
      {
        this.Dispose(false);
      }
      finally
      {
        // ISSUE: explicit finalizer call
        // ISSUE: explicit non-virtual call
        __nonvirtual (((object) this).Finalize());
      }
    }

    public virtual void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool disposing)
    {
      if (this.disposed)
        return;
      if (disposing && this.proxy != null)
        this.CloseProxy();
      this.disposed = true;
    }

    public virtual void CloseProxy()
    {
      if (this.proxy == null)
        return;
      this.proxy.Cleanup();
      if (this.proxy is ICommunicationObject proxy)
      {
        try
        {
          proxy.Close();
        }
        catch (TimeoutException ex)
        {
          proxy.Abort();
        }
        catch (CommunicationException ex)
        {
          proxy.Abort();
        }
      }
      this.proxy = (ISyncService) null;
    }
  }
}

