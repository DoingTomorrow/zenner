
--- AppSettings.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.AppSettings
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using System.ComponentModel;
using System.Configuration;

#nullable disable
namespace MSS_Client.Utils
{
  public static class AppSettings
  {
    public static T Get<T>(string key)
    {
      string appSetting = ConfigurationManager.AppSettings[key];
      return !string.IsNullOrWhiteSpace(appSetting) ? (T) TypeDescriptor.GetConverter(typeof (T)).ConvertFromInvariantString(appSetting) : throw new InvalidEnumArgumentException(key);
    }
  }
}


--- ChangeableParametersSystem.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.ChangeableParametersSystem
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using System;

#nullable disable
namespace MSS_Client.Utils
{
  public class ChangeableParametersSystem
  {
    public TimeSpan? DueDate { get; set; }

    public TimeSpan? Month { get; set; }

    public TimeSpan? Day { get; set; }

    public TimeSpan? QuarterHour { get; set; }
  }
}


--- CustomFilterBehavior.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.CustomFilterBehavior
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using System.Linq;
using System.Windows;
using System.Windows.Controls;
using Telerik.Windows.Controls;
using Telerik.Windows.Data;

#nullable disable
namespace MSS_Client.Utils
{
  public class CustomFilterBehavior : MVVM.ViewModel.ViewModelBase
  {
    private readonly RadGridView gridView;
    private readonly TextBox tb;
    private CustomFilterDescriptor _customFilterDescriptor;
    public static readonly DependencyProperty TextBoxProperty = DependencyProperty.RegisterAttached("TextBox", typeof (TextBox), typeof (CustomFilterBehavior), new PropertyMetadata(new PropertyChangedCallback(CustomFilterBehavior.OnTextBoxPropertyChanged)));

    public CustomFilterDescriptor CustomFilterDescriptor
    {
      get
      {
        if (this._customFilterDescriptor != null)
          return this._customFilterDescriptor;
        this._customFilterDescriptor = new CustomFilterDescriptor(this.gridView.Columns.OfType<Telerik.Windows.Controls.GridViewColumn>());
        this.gridView.FilterDescriptors.Add((IFilterDescriptor) this._customFilterDescriptor);
        return this._customFilterDescriptor;
      }
    }

    public static void SetTextBox(DependencyObject dependencyObject, TextBox tb)
    {
      dependencyObject.SetValue(CustomFilterBehavior.TextBoxProperty, (object) tb);
    }

    public static TextBox GetTextBox(DependencyObject dependencyObject)
    {
      return (TextBox) dependencyObject.GetValue(CustomFilterBehavior.TextBoxProperty);
    }

    public static void OnTextBoxPropertyChanged(
      DependencyObject dependencyObject,
      DependencyPropertyChangedEventArgs e)
    {
      RadGridView gridView = dependencyObject as RadGridView;
      TextBox newValue = e.NewValue as TextBox;
      if (gridView == null || newValue == null)
        return;
      CustomFilterBehavior customFilterBehavior = new CustomFilterBehavior(gridView, newValue);
    }

    public CustomFilterBehavior(RadGridView gridView, TextBox tb)
    {
      this.gridView = gridView;
      this.tb = tb;
      this.tb.TextChanged -= new TextChangedEventHandler(this.FilterValue_TextChanged);
      this.tb.TextChanged += new TextChangedEventHandler(this.FilterValue_TextChanged);
    }

    private void FilterValue_TextChanged(object sender, TextChangedEventArgs e)
    {
      this.CustomFilterDescriptor.FilterValue = this.tb.Text;
      this.tb.Focus();
    }
  }
}


--- CustomFilterDescriptor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.CustomFilterDescriptor
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq.Expressions;
using Telerik.Windows.Controls;
using Telerik.Windows.Data;

#nullable disable
namespace MSS_Client.Utils
{
  public class CustomFilterDescriptor : FilterDescriptorBase
  {
    private readonly CompositeFilterDescriptor _compositeFilterDescriptor;
    private static readonly ConstantExpression TrueExpression = Expression.Constant((object) true);
    private string _filterValue;

    public CustomFilterDescriptor(IEnumerable<GridViewColumn> columns)
    {
      this._compositeFilterDescriptor = new CompositeFilterDescriptor()
      {
        LogicalOperator = FilterCompositionLogicalOperator.Or
      };
      foreach (GridViewDataColumn column in columns)
        this._compositeFilterDescriptor.FilterDescriptors.Add(this.CreateFilterForColumn(column));
    }

    public string FilterValue
    {
      get => this._filterValue;
      set
      {
        if (this._filterValue == value)
          return;
        this._filterValue = value;
        this.UpdateCompositeFilterValues();
        this.OnPropertyChanged(nameof (FilterValue));
      }
    }

    protected override Expression CreateFilterExpression(ParameterExpression parameterExpression)
    {
      if (string.IsNullOrEmpty(this.FilterValue))
        return (Expression) CustomFilterDescriptor.TrueExpression;
      try
      {
        return this._compositeFilterDescriptor.CreateFilterExpression((Expression) parameterExpression);
      }
      catch
      {
      }
      return (Expression) CustomFilterDescriptor.TrueExpression;
    }

    private IFilterDescriptor CreateFilterForColumn(GridViewDataColumn column)
    {
      FilterOperator filterOperatorForType = CustomFilterDescriptor.GetFilterOperatorForType(column.DataType);
      return (IFilterDescriptor) new FilterDescriptor(column.UniqueName, filterOperatorForType, (object) this._filterValue)
      {
        MemberType = column.DataType
      };
    }

    private static FilterOperator GetFilterOperatorForType(Type dataType)
    {
      return dataType == typeof (string) ? FilterOperator.Contains : FilterOperator.IsEqualTo;
    }

    private void UpdateCompositeFilterValues()
    {
      foreach (FilterDescriptor filterDescriptor in (Collection<IFilterDescriptor>) this._compositeFilterDescriptor.FilterDescriptors)
      {
        object obj;
        try
        {
          obj = Convert.ChangeType((object) this.FilterValue, filterDescriptor.MemberType, (IFormatProvider) CultureInfo.CurrentCulture);
        }
        catch
        {
          obj = OperatorValueFilterDescriptorBase.UnsetValue;
        }
        DateTime result;
        if (filterDescriptor.MemberType.IsAssignableFrom(typeof (DateTime)) && DateTime.TryParse(this.FilterValue, out result))
          obj = (object) result;
        filterDescriptor.Value = obj;
      }
    }

    private static object DefaultValue(Type type)
    {
      return type.IsValueType ? Activator.CreateInstance(type) : (object) null;
    }
  }
}


--- DesktopWindowFactory.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.DesktopWindowFactory
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Core.Events;
using MSS.Interfaces;
using MSS.Utils.Utils;
using System;
using System.ComponentModel;
using System.Windows;

#nullable disable
namespace MSS_Client.Utils
{
  public class DesktopWindowFactory : WindowDictionaryFactory, IWindowFactory
  {
    public bool? CreateNewModalDialog(IViewModel viewModel, object[] args = null)
    {
      WindowTypes windows = this.windowsDictionary[viewModel.GetType()];
      Window window = args == null ? Activator.CreateInstance(windows.Desktop).SafeCast<Window>() : Activator.CreateInstance(windows.Desktop, args) as Window;
      window.Owner = Application.Current.Windows[0];
      window.WindowStartupLocation = WindowStartupLocation.CenterOwner;
      EventHandler<RequestCloseEventArgs> handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) null;
      handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) ((sender, eventArgs) =>
      {
        viewModel.RequestCloseDialog -= handlerCloseDialog;
        window.DialogResult = new bool?(eventArgs.DialogResult);
      });
      viewModel.RequestCloseDialog += handlerCloseDialog;
      window.DataContext = (object) viewModel;
      return window.ShowDialog();
    }

    public void CreateNewNonModalDialog(IViewModel viewModel)
    {
      Window window = Activator.CreateInstance(this.windowsDictionary[viewModel.GetType()].Desktop) as Window;
      EventHandler<RequestCloseEventArgs> handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) null;
      handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) ((sender, eventArgs) =>
      {
        viewModel.RequestCloseDialog -= handlerCloseDialog;
        window?.Close();
      });
      viewModel.RequestCloseDialog += handlerCloseDialog;
      window.DataContext = (object) viewModel;
      window.Show();
    }

    public bool? CreateNewProgressDialog(IViewModel viewModel, BackgroundWorker backgroundWorker)
    {
      Window window = Activator.CreateInstance(this.windowsDictionary[viewModel.GetType()].Desktop) as Window;
      window.Owner = Application.Current.Windows[0];
      window.WindowStartupLocation = WindowStartupLocation.CenterOwner;
      EventHandler<RequestCloseEventArgs> handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) null;
      handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) ((sender, eventArgs) =>
      {
        viewModel.RequestCloseDialog -= handlerCloseDialog;
        window.DialogResult = new bool?(eventArgs.DialogResult);
        window.Close();
      });
      viewModel.RequestCloseDialog += handlerCloseDialog;
      EventHandler handlerCancel = (EventHandler) null;
      handlerCancel = (EventHandler) delegate
      {
        viewModel.RequestCancel -= handlerCancel;
        backgroundWorker.CancelAsync();
      };
      viewModel.RequestCancel += handlerCancel;
      window.DataContext = (object) viewModel;
      return window.ShowDialog();
    }
  }
}


--- IQuickMessageShower.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.IQuickMessageShower
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MVVM.ViewModel;

#nullable disable
namespace MSS_Client.Utils
{
  public interface IQuickMessageShower
  {
    ViewModelBase ShowSuccessMessage(string successMessage);

    ViewModelBase ShowWarningMessage(string warningMessage);

    ViewModelBase ShowValidationMessage(string validationMessage);

    ViewModelBase Show(MSS.DTO.Message.Message message);
  }
}


--- MessageHandlingManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.MessageHandlingManager
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Errors;
using MSS.Client.UI.Desktop.View.ExceptionMessageBox;
using MSS.Core.Events;
using MSS.DTO.MessageHandler;
using MSS.Interfaces;
using MSS_Client.ViewModel.ExceptionMessageBox;
using MVVM.ViewModel;
using System;

#nullable disable
namespace MSS_Client.Utils
{
  public static class MessageHandlingManager
  {
    public static ViewModelBase ShowSuccessMessage(string successMessage)
    {
      MessageHandlerUserControl handlerUserControl = new MessageHandlerUserControl();
      handlerUserControl.DataContext = (object) new MessageHandlerViewModel(successMessage, MessageTypeEnum.Success);
      return (ViewModelBase) handlerUserControl.DataContext;
    }

    public static ViewModelBase ShowWarningMessage(string warningMessage)
    {
      MessageHandlerUserControl handlerUserControl = new MessageHandlerUserControl();
      handlerUserControl.DataContext = (object) new MessageHandlerViewModel(warningMessage, MessageTypeEnum.Warning);
      return (ViewModelBase) handlerUserControl.DataContext;
    }

    public static ViewModelBase ShowValidationMessage(string validationMessage)
    {
      MessageHandlerUserControl handlerUserControl = new MessageHandlerUserControl();
      handlerUserControl.DataContext = (object) new MessageHandlerViewModel(validationMessage, MessageTypeEnum.Validation);
      return (ViewModelBase) handlerUserControl.DataContext;
    }

    public static void ShowExceptionMessageDialog(BaseApplicationException e)
    {
      MSS.Business.Errors.MessageHandler.LogException((Exception) e);
      ExceptionMessageBoxDialog messageBoxDialog = new ExceptionMessageBoxDialog();
      messageBoxDialog.DataContext = (object) new ExceptionMessageBoxViewModel(e.Message, false);
      messageBoxDialog.ShowDialog();
    }

    public static void ShowExceptionMessageDialog(string message, IWindowFactory windowFactory)
    {
      MSS.Business.Errors.MessageHandler.LogException(message);
      windowFactory.CreateNewModalDialog((IViewModel) new ExceptionMessageBoxViewModel(message, false));
    }

    public static bool ShowCustomMessageDialog(string messageTitle, string messageBody)
    {
      ExceptionMessageBoxViewModel customMessageviewModel = new ExceptionMessageBoxViewModel(messageTitle, messageBody);
      ExceptionMessageBoxDialog messageBoxDialog = new ExceptionMessageBoxDialog();
      messageBoxDialog.Topmost = true;
      ExceptionMessageBoxDialog customMessageDialog = messageBoxDialog;
      EventHandler<RequestCloseEventArgs> handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) null;
      handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) ((sender, eventArgs) =>
      {
        customMessageviewModel.RequestCloseDialog -= handlerCloseDialog;
        customMessageDialog.Close();
      });
      customMessageviewModel.RequestCloseDialog += handlerCloseDialog;
      customMessageDialog.DataContext = (object) customMessageviewModel;
      customMessageDialog.ShowDialog();
      return customMessageviewModel.IsYesButtonClicked;
    }
  }
}


--- MSSUIHelper.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.MSSUIHelper
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using CA.Cryptography;
using Common.Library.NHibernate.Data;
using MSS.Business.Errors;
using MSS.Business.Languages;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.LicenseManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Business.Utils;
using MSS.Core.Model.Jobs;
using MSS.Core.Model.TechnicalParameters;
using MSS.Core.Model.UsersManagement;
using MSS.DIConfiguration;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Properties;
using MSS_Client.ViewModel;
using MSS_Client.ViewModel.ExceptionMessageBox;
using MSS_Client.ViewModel.Startup;
using MSSWeb.Common.Helpers;
using NHibernate;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Windows;
using System.Windows.Threading;
using ZENNER;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace MSS_Client.Utils
{
  public static class MSSUIHelper
  {
    private static void ShowLoginOrMainWindow(IWindowFactory windowFactory)
    {
      if (MSS.Business.Utils.AppContext.Current.LoggedUser == null)
      {
        if (MSSUIHelper.IsUserAllowedToLogin())
        {
          MSSLoginWindowViewModel loginWindowViewModel = DIConfigurator.GetConfigurator().Get<MSSLoginWindowViewModel>();
          windowFactory.CreateNewNonModalDialog((IViewModel) loginWindowViewModel);
        }
        else
          MSSUIHelper.ShowWarningDialog(windowFactory, MessageCodes.Warning.GetStringValue(), MSS.Localisation.Resources.MSS_WrongPassword, false);
      }
      else
      {
        MSSViewModel mssViewModel = DIConfigurator.GetConfigurator().Get<MSSViewModel>((IParameter) new ConstructorArgument("logoImage", (object) LicenseHelper.GetLogoImage()));
        windowFactory.CreateNewNonModalDialog((IViewModel) mssViewModel);
      }
    }

    private static bool ShowLicenseWindow(IWindowFactory windowFactory)
    {
      LicenseProblemTypeEnum? nullable = LicenseHelper.DetectLicenseProblemClient(MSS.Business.Utils.AppContext.Current.TechnicalParameters);
      if (!nullable.HasValue)
        return false;
      MSSLicenseCustomerWindowViewModel customerWindowViewModel = DIConfigurator.GetConfigurator().Get<MSSLicenseCustomerWindowViewModel>((IParameter) new ConstructorArgument("licenseProblemType", (object) nullable.Value));
      windowFactory.CreateNewNonModalDialog((IViewModel) customerWindowViewModel);
      return true;
    }

    public static void ShowErrorWindow(IWindowFactory windowFactory, string errorMessage)
    {
      ExceptionMessageBoxViewModel messageBoxViewModel = DIConfigurator.GetConfigurator().Get<ExceptionMessageBoxViewModel>((IParameter) new ConstructorArgument(nameof (errorMessage), (object) CultureResources.GetValue(errorMessage)), (IParameter) new ConstructorArgument("isUnhandledException", (object) true));
      windowFactory.CreateNewNonModalDialog((IViewModel) messageBoxViewModel);
    }

    private static bool ShowLicenseCustomerWindow(IWindowFactory windowFactory)
    {
      if (LicenseHelper.IsCustomerNumberFilled(MSS.Business.Utils.AppContext.Current.TechnicalParameters))
        return false;
      MSSLicenseCustomerWindowViewModel customerWindowViewModel = DIConfigurator.GetConfigurator().Get<MSSLicenseCustomerWindowViewModel>();
      windowFactory.CreateNewNonModalDialog((IViewModel) customerWindowViewModel);
      return true;
    }

    public static MSSSplashScreenViewModel ShowSplashScreen(IWindowFactory _windowFactory)
    {
      MSSSplashScreenViewModel splashScreenViewModel = DIConfigurator.GetConfigurator().Get<MSSSplashScreenViewModel>();
      _windowFactory.CreateNewNonModalDialog((IViewModel) splashScreenViewModel);
      return splashScreenViewModel;
    }

    public static void ShowApplicationStartWindow(
      IRepositoryFactory _repositoryFactory,
      IWindowFactory _windowFactory)
    {
      if (MSSUIHelper.ShowLicenseWindow(_windowFactory))
        return;
      MSSUIHelper.ShowLoginOrMainWindow(_windowFactory);
    }

    public static void CreateDefaultUser()
    {
      IRepositoryFactory repositoryFactory = DIConfigurator.GetConfigurator().Get<IRepositoryFactory>();
      repositoryFactory.GetSession().BeginTransaction();
      try
      {
        User localUser = repositoryFactory.GetRepository<User>().FirstOrDefault((Expression<Func<User, bool>>) (x => x.Username == "default" + LicenseHelper.GetValidHardwareKey()));
        Role role = repositoryFactory.GetRepository<Role>().FirstOrDefault((Expression<Func<Role, bool>>) (x => x.Name == "default" + LicenseHelper.GetValidHardwareKey()));
        if (localUser == null)
        {
          string hashAndSalt;
          new PasswordManager().GetPasswordHashAndSaltConcatenatedString("", out hashAndSalt);
          localUser = new User()
          {
            FirstName = "Default",
            LastName = "Default",
            Username = "default" + LicenseHelper.GetValidHardwareKey(),
            Password = hashAndSalt,
            Language = LangEnum.English.ToString()
          };
          repositoryFactory.GetRepository<User>().TransactionalInsert(localUser);
          if (role == null)
          {
            role = new Role()
            {
              Name = "default" + LicenseHelper.GetValidHardwareKey(),
              IsStandard = true
            };
            repositoryFactory.GetRepository<Role>().TransactionalInsert(role);
            foreach (object obj in Enum.GetValues(typeof (OperationEnum)))
            {
              object op = obj;
              Operation operation = repositoryFactory.GetRepository<Operation>().FirstOrDefault((Expression<Func<Operation, bool>>) (o => o.Name == op.ToString()));
              if (operation == null)
              {
                Operation entity1 = new Operation()
                {
                  Name = op.ToString()
                };
                repositoryFactory.GetRepository<Operation>().TransactionalInsert(entity1);
                RoleOperation entity2 = new RoleOperation()
                {
                  Operation = entity1,
                  Role = role
                };
                repositoryFactory.GetRepository<RoleOperation>().TransactionalInsert(entity2);
              }
              else
              {
                RoleOperation entity = new RoleOperation()
                {
                  Operation = operation,
                  Role = role
                };
                repositoryFactory.GetRepository<RoleOperation>().TransactionalInsert(entity);
              }
            }
          }
        }
        if (role == null)
        {
          role = new Role()
          {
            Name = "default" + LicenseHelper.GetValidHardwareKey(),
            IsStandard = true
          };
          repositoryFactory.GetRepository<Role>().TransactionalInsert(role);
          if (repositoryFactory.GetRepository<UserRole>().FirstOrDefault((Expression<Func<UserRole, bool>>) (x => x.Role.Id == role.Id && x.User.Id == localUser.Id)) == null)
          {
            UserRole entity = new UserRole()
            {
              Role = role,
              User = localUser
            };
            repositoryFactory.GetRepository<UserRole>().TransactionalInsert(entity);
          }
          foreach (object obj in Enum.GetValues(typeof (OperationEnum)))
          {
            Operation entity3 = new Operation()
            {
              Name = obj.ToString()
            };
            repositoryFactory.GetRepository<Operation>().TransactionalInsert(entity3);
            RoleOperation entity4 = new RoleOperation()
            {
              Operation = entity3,
              Role = role
            };
            repositoryFactory.GetRepository<RoleOperation>().TransactionalInsert(entity4);
          }
        }
        if (repositoryFactory.GetRepository<UserRole>().FirstOrDefault((Expression<Func<UserRole, bool>>) (x => x.Role.Id == role.Id && x.User.Id == localUser.Id)) == null)
        {
          UserRole entity5 = new UserRole()
          {
            Role = role,
            User = localUser
          };
          repositoryFactory.GetRepository<UserRole>().TransactionalInsert(entity5);
          if (repositoryFactory.GetRepository<RoleOperation>().GetAll().FirstOrDefault<RoleOperation>() == null)
          {
            foreach (Operation operation in (IEnumerable<Operation>) repositoryFactory.GetRepository<Operation>().GetAll())
            {
              RoleOperation entity6 = new RoleOperation()
              {
                Operation = operation,
                Role = role
              };
              repositoryFactory.GetRepository<RoleOperation>().TransactionalInsert(entity6);
            }
          }
        }
        repositoryFactory.GetSession().Transaction.Commit();
      }
      catch (Exception ex)
      {
        ISession session = repositoryFactory.GetSession();
        if (session.IsOpen && session.Transaction.IsActive)
          session.Transaction.Rollback();
        throw;
      }
    }

    public static void NotifyUserIfLicenseInvalidOffline(IRepositoryFactory _repositoryFactory)
    {
      IRepository<TechnicalParameter> repository = _repositoryFactory.GetRepository<TechnicalParameter>();
      TechnicalParameter technicalParameter = repository.FirstOrDefault((Expression<Func<TechnicalParameter, bool>>) (tp => true));
      LicenseNotification licenseNotification = LicenseHelper.ShouldNotifyUserAboutOfflineValidity(repository, technicalParameter, LicenseHelper.GetValidHardwareKey());
      if (!licenseNotification.ShowNotification)
        return;
      int num = (int) MessageBox.Show(string.Format(MSS.Localisation.Resources.MSS_Client_LicenseExpiresOffline_UserInformation_Message, (object) DateTime.Now.AddDays((double) (licenseNotification.NumberOfDays + 1)).ToShortDateString()), MSS.Localisation.Resources.MSS_Client_LicenseExpiresOffline_UserInformation_Title, MessageBoxButton.OK, MessageBoxImage.Exclamation);
      _repositoryFactory.GetRepository<TechnicalParameter>().Update(technicalParameter);
    }

    public static void NotifyUserIfLicenseExpires(IRepositoryFactory _repositoryFactory)
    {
      IRepository<TechnicalParameter> repository = _repositoryFactory.GetRepository<TechnicalParameter>();
      TechnicalParameter technicalParameter = repository.FirstOrDefault((Expression<Func<TechnicalParameter, bool>>) (tp => true));
      LicenseNotification licenseNotification = LicenseHelper.ShouldNotifyUserAboutLicenseExpire(repository, technicalParameter, LicenseHelper.GetValidHardwareKey());
      if (!licenseNotification.ShowNotification)
        return;
      int num = (int) MessageBox.Show(string.Format(MSS.Localisation.Resources.MSS_Client_LicenseExpires_UserInformation_Message, (object) licenseNotification.NumberOfDays), MSS.Localisation.Resources.MSS_Client_LicenseExpires_UserInformation_Title, MessageBoxButton.OK, MessageBoxImage.Exclamation);
      technicalParameter.LastReminderForLicenseExpire = new DateTime?(DateTime.Today);
      repository.Update(technicalParameter);
    }

    public static void UpdateLicense(this IRepositoryFactory _repositoryFactory)
    {
      DownloadLicenseResponse downloadLicenseResponse = new DownloadLicenseResponse();
      try
      {
        downloadLicenseResponse = LicenseWebApiHandler.DownloadDocument(MSS.Business.Utils.AppContext.Current.TechnicalParameters.CustomerNumber, LicenseHelper.GetValidHardwareKey());
      }
      catch (Exception ex)
      {
        MessageHandler.LogException(ex);
      }
      if (!_repositoryFactory.GetSession().IsOpen)
        _repositoryFactory = DIConfigurator.GetConfigurator().Get<IRepositoryFactory>();
      byte[] licenseAsByteArray = LicenseHelper.GetLicenseAsByteArray();
      if (!downloadLicenseResponse.IsSuccessfullyDownloaded)
        return;
      if (downloadLicenseResponse.FullLicenseBytes.Length != 0)
      {
        if (licenseAsByteArray.Length != 0)
        {
          if (!StructuralComparisons.StructuralEqualityComparer.Equals((object) downloadLicenseResponse.FullLicenseBytes, (object) licenseAsByteArray))
            Application.Current.Dispatcher.Invoke(DispatcherPriority.Background, (Delegate) (() =>
            {
              if (MessageBox.Show(Application.Current.Windows[0], MSS.Localisation.Resources.MSS_Client_License_UserConfirmation_Message, MSS.Localisation.Resources.MSS_Client_License_UserConfirmation_Title, MessageBoxButton.YesNo, MessageBoxImage.Question) != MessageBoxResult.Yes)
                return;
              MSSUIHelper.ReplaceCurrentLicenseWithTheOneFromTheServer(downloadLicenseResponse.FullLicenseBytes);
              MSSUIHelper.UpdateTheLastConnectionToServerDate(_repositoryFactory);
            }));
          else
            MSSUIHelper.UpdateTheLastConnectionToServerDate(_repositoryFactory);
        }
        else
        {
          MSSUIHelper.ReplaceCurrentLicenseWithTheOneFromTheServer(downloadLicenseResponse.FullLicenseBytes);
          MSSUIHelper.UpdateTheLastConnectionToServerDate(_repositoryFactory);
        }
      }
      else
      {
        MSSUIHelper.DeleteCurrentLicense();
        MSSUIHelper.UpdateTheLastConnectionToServerDate(_repositoryFactory);
      }
    }

    public static void UpdateTheApplicationVersionInformation()
    {
      try
      {
        LicenseWebApiHandler.UpdateTheApplicationVersionInformation(MSS.Business.Utils.AppContext.Current.TechnicalParameters.CustomerNumber, LicenseHelper.GetValidHardwareKey(), ConfigurationManager.AppSettings["ApplicationVersion"]);
      }
      catch (Exception ex)
      {
        MessageHandler.LogException(ex);
      }
    }

    private static void DeleteCurrentLicense()
    {
      File.Delete(Path.Combine(AppDataFolderHelper.GetUserAppDataPath(), LicenseHelper.GetLicenseFileName(LicenseHelper.GetValidHardwareKey())));
    }

    private static void ReplaceCurrentLicenseWithTheOneFromTheServer(byte[] licenseFileAsByteArray)
    {
      licenseFileAsByteArray.FromByteArrayToMemoryStream().SaveToDisk(Path.Combine(AppDataFolderHelper.GetUserAppDataPath(), LicenseHelper.GetLicenseFileName(LicenseHelper.GetValidHardwareKey())));
    }

    private static void UpdateTheLastConnectionToServerDate(IRepositoryFactory _repositoryFactory)
    {
      if (!_repositoryFactory.GetSession().IsOpen)
        _repositoryFactory = DIConfigurator.GetConfigurator().Get<IRepositoryFactory>();
      IRepository<TechnicalParameter> repository = _repositoryFactory.GetRepository<TechnicalParameter>();
      TechnicalParameter entity = repository.FirstOrDefault((Expression<Func<TechnicalParameter, bool>>) (tp => true));
      entity.LastConnectionToLicenseServer = new DateTime?(DateTime.Today);
      repository.Update(entity);
    }

    public static bool ShowSendChangesWarningDialog_AtLogout()
    {
      bool flag = true;
      if (!MSS.Business.Utils.AppContext.Current.IsClientUpToDateSend)
        flag = MessageHandlingManager.ShowCustomMessageDialog(CultureResources.GetValue("MSS_Client_Message_ChangesNotCommited_Title"), CultureResources.GetValue("MSS_Client_Message_ChangesNotCommited_LogOutMessage"));
      return flag;
    }

    public static bool ShowSendChangesWarningDialog_AtApplicationClose(
      IRepositoryFactory repositoryFactory,
      bool isLogOutOk)
    {
      if (isLogOutOk)
        return true;
      bool flag = true;
      if (GmmInterface.JobManager.Jobs == null || GmmInterface.JobManager.Jobs.Count == 0)
        return flag;
      if (!MessageHandlingManager.ShowCustomMessageDialog(CultureResources.GetValue("MSS_Client_Message_Jobs_Started_Title"), CultureResources.GetValue("MSS_Client_Message_Jobs_Started_Message")))
        return false;
      List<MssReadingJob> jobs = new List<MssReadingJob>();
      GmmInterface.JobManager.Jobs.ForEach((Action<Job>) (x =>
      {
        MssReadingJob byId = repositoryFactory.GetRepository<MssReadingJob>().GetById((object) x.JobID);
        byId.Status = JobStatusEnum.Inactive;
        jobs.Add(byId);
      }));
      GMMJobsManager gmmJobsManager = GMMJobsManager.Instance(DIConfigurator.GetConfigurator().Get<IRepositoryFactoryCreator>(), false);
      foreach (MssReadingJob mssReadingJob in jobs)
      {
        HibernateMultipleDatabasesManager.Update((object) mssReadingJob, repositoryFactory.GetSession());
        gmmJobsManager.RemoveJob(mssReadingJob);
      }
      return true;
    }

    public static bool ShowSendChangesWarningDialog_AtApplicationClose(
      IRepositoryFactory repositoryFactory)
    {
      bool flag = true;
      if (GmmInterface.JobManager.Jobs == null || GmmInterface.JobManager.Jobs.Count == 0)
        return flag;
      if (!MessageHandlingManager.ShowCustomMessageDialog(CultureResources.GetValue("MSS_Client_Message_Jobs_Started_Title"), CultureResources.GetValue("MSS_Client_Message_Jobs_Started_Message")))
        return false;
      List<MssReadingJob> jobs = new List<MssReadingJob>();
      GmmInterface.JobManager.Jobs.ForEach((Action<Job>) (x =>
      {
        MssReadingJob byId = repositoryFactory.GetRepository<MssReadingJob>().GetById((object) x.JobID);
        byId.Status = JobStatusEnum.Inactive;
        jobs.Add(byId);
      }));
      GMMJobsManager.Instance(DIConfigurator.GetConfigurator().Get<IRepositoryFactoryCreator>(), false).FinalizeJobs((IEnumerable<MssReadingJob>) jobs);
      return true;
    }

    public static bool? ShowWarningDialog(
      IWindowFactory windowFactory,
      string warningTitle,
      string warningMessage,
      bool isCancelButtonVisible)
    {
      GenericMessageViewModel messageViewModel = DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) warningTitle), (IParameter) new ConstructorArgument("message", (object) warningMessage), (IParameter) new ConstructorArgument(nameof (isCancelButtonVisible), (object) isCancelButtonVisible));
      return windowFactory.CreateNewModalDialog((IViewModel) messageViewModel);
    }

    public static bool IsUserAllowedToLogin()
    {
      return Settings.Default.NoOfLoginAttempts < (short) 3 || DateTime.Now.Ticks - Settings.Default.LastLoginAttempt.Ticks >= 3000000000L;
    }
  }
}


--- OrderDtoErrorMessages.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.OrderDtoErrorMessages
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.DTO.Orders;

#nullable disable
namespace MSS_Client.Utils
{
  public class OrderDtoErrorMessages
  {
    public OrderDTO Order { get; set; }

    public string Message { get; set; }
  }
}


--- QuickMessageShower.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.QuickMessageShower
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Client.UI.Desktop.View.ExceptionMessageBox;
using MSS.DTO.MessageHandler;
using MSS_Client.ViewModel.ExceptionMessageBox;
using MVVM.ViewModel;

#nullable disable
namespace MSS_Client.Utils
{
  public class QuickMessageShower : IQuickMessageShower
  {
    public ViewModelBase ShowSuccessMessage(string successMessage)
    {
      MessageHandlerUserControl handlerUserControl = new MessageHandlerUserControl();
      handlerUserControl.DataContext = (object) new MessageHandlerViewModel(successMessage, MessageTypeEnum.Success);
      return (ViewModelBase) handlerUserControl.DataContext;
    }

    public ViewModelBase ShowWarningMessage(string warningMessage)
    {
      MessageHandlerUserControl handlerUserControl = new MessageHandlerUserControl();
      handlerUserControl.DataContext = (object) new MessageHandlerViewModel(warningMessage, MessageTypeEnum.Warning);
      return (ViewModelBase) handlerUserControl.DataContext;
    }

    public ViewModelBase ShowValidationMessage(string validationMessage)
    {
      MessageHandlerUserControl handlerUserControl = new MessageHandlerUserControl();
      handlerUserControl.DataContext = (object) new MessageHandlerViewModel(validationMessage, MessageTypeEnum.Validation);
      return (ViewModelBase) handlerUserControl.DataContext;
    }

    public ViewModelBase Show(MSS.DTO.Message.Message message)
    {
      MessageTypeEnum? messageType = message?.MessageType;
      if (messageType.HasValue)
      {
        switch (messageType.GetValueOrDefault())
        {
          case MessageTypeEnum.Success:
            return this.ShowSuccessMessage(message.MessageText);
          case MessageTypeEnum.Warning:
            return this.ShowWarningMessage(message.MessageText);
          case MessageTypeEnum.Validation:
            return this.ShowValidationMessage(message.MessageText);
        }
      }
      return (ViewModelBase) null;
    }
  }
}


--- StructureImageHelper.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.StructureImageHelper
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Modules.OrdersManagement;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.Structures;
using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows.Media.Imaging;

#nullable disable
namespace MSS_Client.Utils
{
  public class StructureImageHelper
  {
    public static void SetImageIconPath(
      ObservableCollection<StructureNodeDTO> nodesCollection)
    {
      foreach (StructureNodeDTO nodes in (Collection<StructureNodeDTO>) nodesCollection)
      {
        if (nodes != null)
        {
          BitmapImage bitmapImage = new BitmapImage(new Uri(nodes.NodeType.IconPath));
          bitmapImage.Freeze();
          nodes.Image = bitmapImage;
          if (StructuresHelper.Descendants(nodes).Any<StructureNodeDTO>())
          {
            foreach (StructureNodeDTO descendant in StructuresHelper.Descendants(nodes))
            {
              StructureNodeDTO child = descendant;
              bool existsMeterWithSameSerialNumberInCurrentStructure = false;
              string name1 = child.NodeType.Name;
              StructureNodeTypeEnum structureNodeTypeEnum = StructureNodeTypeEnum.Meter;
              string str1 = structureNodeTypeEnum.ToString();
              int num;
              if (!(name1 == str1))
              {
                string name2 = child.NodeType.Name;
                structureNodeTypeEnum = StructureNodeTypeEnum.RadioMeter;
                string str2 = structureNodeTypeEnum.ToString();
                num = name2 == str2 ? 1 : 0;
              }
              else
                num = 1;
              if (num != 0)
                existsMeterWithSameSerialNumberInCurrentStructure = nodesCollection.Any<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.EntityDto != null && child.EntityDto != null && n.EntityDto.SerialNumber == child.EntityDto.SerialNumber));
              child.Image = child.SetImageNode(existsMeterWithSameSerialNumberInCurrentStructure);
              child.Image.Freeze();
            }
          }
        }
      }
    }

    public static void SetImageExecutingState(
      StructureNodeDTO node,
      ExecutingStateEnum executingStateEnum)
    {
      switch (executingStateEnum)
      {
        case ExecutingStateEnum.OK:
          string[] files1 = new string[2]
          {
            node.NodeType.IconPath,
            "pack://application:,,,/Styles;component/Images/Settings/light-green.png"
          };
          node.Image = ImageHelper.Instance.GetBitmapImageFromFiles(files1);
          break;
        case ExecutingStateEnum.NotOK:
          string[] files2 = new string[2]
          {
            node.NodeType.IconPath,
            "pack://application:,,,/Styles;component/Images/Settings/light-red.png"
          };
          node.Image = ImageHelper.Instance.GetBitmapImageFromFiles(files2);
          break;
      }
    }
  }
}


--- StructureTreeStateHelper.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.StructureTreeStateHelper
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Modules.StructuresManagement;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Telerik.Windows.Controls;
using Telerik.Windows.Controls.TreeListView;

#nullable disable
namespace MSS_Client.Utils
{
  public static class StructureTreeStateHelper
  {
    private static List<TreeListViewRow> GetExpandedState(RadTreeListView radTreeListView)
    {
      List<TreeListViewRow> expandedState = new List<TreeListViewRow>();
      if (radTreeListView == null)
        return expandedState;
      expandedState.AddRange(radTreeListView.ChildrenOfType<TreeListViewRow>().Where<TreeListViewRow>((Func<TreeListViewRow, bool>) (item => item.IsExpanded)));
      return expandedState;
    }

    private static void SetExpandedState(
      List<TreeListViewRow> expandedItems,
      ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      foreach (StructureNodeDTO node in (Collection<StructureNodeDTO>) nodeCollection)
      {
        foreach (StructureNodeDTO descendant in StructuresHelper.Descendants(node))
        {
          foreach (TreeListViewRow expandedItem in expandedItems)
          {
            if (descendant.Id == ((StructureNodeDTO) expandedItem.Item).Id)
              descendant.IsExpanded = true;
          }
        }
      }
    }

    public static void MaintainExpandedState(
      RadTreeListView radTreeListView,
      ObservableCollection<StructureNodeDTO> structureNodeCollection)
    {
      StructureTreeStateHelper.SetExpandedState(StructureTreeStateHelper.GetExpandedState(radTreeListView), structureNodeCollection);
    }
  }
}


--- TabletWindowFactory.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.TabletWindowFactory
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Core.Events;
using MSS.Interfaces;
using System;
using System.ComponentModel;
using System.Windows;

#nullable disable
namespace MSS_Client.Utils
{
  public class TabletWindowFactory : WindowDictionaryFactory, IWindowFactory
  {
    public bool? CreateNewModalDialog(IViewModel viewModel, object[] args = null)
    {
      WindowTypes windows = this.windowsDictionary[viewModel.GetType()];
      Window window = args == null ? Activator.CreateInstance(windows.Tablet) as Window : Activator.CreateInstance(windows.Tablet, args) as Window;
      window.Owner = Application.Current.Windows[0];
      window.WindowStartupLocation = WindowStartupLocation.CenterOwner;
      EventHandler<RequestCloseEventArgs> handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) null;
      handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) ((sender, eventArgs) =>
      {
        viewModel.RequestCloseDialog -= handlerCloseDialog;
        window.DialogResult = new bool?(eventArgs.DialogResult);
        window.Close();
      });
      viewModel.RequestCloseDialog += handlerCloseDialog;
      window.DataContext = (object) viewModel;
      return window.ShowDialog();
    }

    public void CreateNewNonModalDialog(IViewModel viewModel)
    {
      Window window = Activator.CreateInstance(this.windowsDictionary[viewModel.GetType()].Tablet) as Window;
      EventHandler<RequestCloseEventArgs> handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) null;
      handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) ((sender, eventArgs) =>
      {
        viewModel.RequestCloseDialog -= handlerCloseDialog;
        window.Close();
      });
      viewModel.RequestCloseDialog += handlerCloseDialog;
      window.DataContext = (object) viewModel;
      window.Show();
    }

    public bool? CreateNewProgressDialog(IViewModel viewModel, BackgroundWorker backgroundWorker)
    {
      Window window = Activator.CreateInstance(this.windowsDictionary[viewModel.GetType()].Tablet) as Window;
      window.Owner = Application.Current.Windows[0];
      window.WindowStartupLocation = WindowStartupLocation.CenterOwner;
      EventHandler<RequestCloseEventArgs> handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) null;
      handlerCloseDialog = (EventHandler<RequestCloseEventArgs>) ((sender, eventArgs) =>
      {
        viewModel.RequestCloseDialog -= handlerCloseDialog;
        window.DialogResult = new bool?(eventArgs.DialogResult);
        window.Close();
      });
      viewModel.RequestCloseDialog += handlerCloseDialog;
      EventHandler handlerCancel = (EventHandler) null;
      handlerCancel = (EventHandler) ((sender, args) =>
      {
        viewModel.RequestCancel -= handlerCancel;
        backgroundWorker.CancelAsync();
      });
      viewModel.RequestCancel += handlerCancel;
      window.DataContext = (object) viewModel;
      return window.ShowDialog();
    }
  }
}


--- ViewsdependencyModule.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.ViewsdependencyModule
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS_Client.ViewModel.Users;
using Ninject.Modules;

#nullable disable
namespace MSS_Client.Utils
{
  public class ViewsdependencyModule : NinjectModule
  {
    public override void Load()
    {
      this.Bind<UsersViewModel>().ToSelf();
      this.Bind<CreateUserViewModel>().ToSelf();
      this.Bind<EditUserViewModel>().ToSelf();
      this.Bind<DeleteUserViewModel>().ToSelf();
    }
  }
}


--- WindowDictionaryFactory.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.WindowDictionaryFactory
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Client.UI.Desktop.View.Archive;
using MSS.Client.UI.Desktop.View.Jobs;
using MSS.Client.UI.Desktop.View.Meters;
using MSS.Client.UI.Desktop.View.Reporting;
using MSS.Client.UI.Tablet.View.Meters;
using MSS.Client.UI.Tablet.View.Orders;
using MSS.Client.UI.Tablet.View.Structures;
using MSS_Client.ViewModel;
using MSS_Client.ViewModel.Archiving;
using MSS_Client.ViewModel.Configuration;
using MSS_Client.ViewModel.DataCollectors;
using MSS_Client.ViewModel.DataFilters;
using MSS_Client.ViewModel.Download;
using MSS_Client.ViewModel.ExceptionMessageBox;
using MSS_Client.ViewModel.GenericProgressDialog;
using MSS_Client.ViewModel.Jobs;
using MSS_Client.ViewModel.Meters;
using MSS_Client.ViewModel.NewsAndUpdates;
using MSS_Client.ViewModel.Orders;
using MSS_Client.ViewModel.RadioTest;
using MSS_Client.ViewModel.Reporting;
using MSS_Client.ViewModel.Settings;
using MSS_Client.ViewModel.Startup;
using MSS_Client.ViewModel.Structures;
using MSS_Client.ViewModel.Structures.DeviceViewModels;
using MSS_Client.ViewModel.Synchronization;
using MSS_Client.ViewModel.Users;
using System;
using System.Collections.Generic;

#nullable disable
namespace MSS_Client.Utils
{
  public abstract class WindowDictionaryFactory
  {
    protected readonly Dictionary<Type, WindowTypes> windowsDictionary;

    protected WindowDictionaryFactory()
    {
      this.windowsDictionary = new Dictionary<Type, WindowTypes>()
      {
        {
          typeof (MSSSplashScreenViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Startup.MSSSplashScreen),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Startup.MSSSplashScreen)
          }
        },
        {
          typeof (ExceptionMessageBoxViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.ExceptionMessageBox.ExceptionMessageBoxDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.ExceptionMessageBox.ExceptionMessageBoxDialog)
          }
        },
        {
          typeof (GenericMessageViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.GenericMessageDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.GenericMessageDialog)
          }
        },
        {
          typeof (CleanupAppDataMessageViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.GenericMessageConfirmationDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.GenericMessageConfirmationDialog)
          }
        },
        {
          typeof (MSSLicenseCustomerWindowViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.MSSLicenseCustomerWindow),
            Tablet = typeof (MSS.Client.UI.Tablet.View.MSSLicenseCustomerWindow)
          }
        },
        {
          typeof (MSSLoginWindowViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.MSSLoginWindow),
            Tablet = typeof (MSS.Client.UI.Tablet.View.MSSLoginWindow)
          }
        },
        {
          typeof (MSSViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.MSSView),
            Tablet = typeof (MSS.Client.UI.Tablet.View.MSSView)
          }
        },
        {
          typeof (MSSAboutViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.MSSAboutWindow),
            Tablet = typeof (MSS.Client.UI.Tablet.View.MSSAboutWindow)
          }
        },
        {
          typeof (ImportGmmDataViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.ImportGmmDataDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.ImportGmmDataDialog)
          }
        },
        {
          typeof (CreateEditLocationViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.CreateEditLocationDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.CreateEditLocationDialog)
          }
        },
        {
          typeof (CreateEditTenantViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.CreateEditTenantDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.CreateEditTenantDialog)
          }
        },
        {
          typeof (CreateDeviceViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.EditDeviceDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.EditDeviceDialog)
          }
        },
        {
          typeof (EditDeviceViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.EditDeviceDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.EditDeviceDialog)
          }
        },
        {
          typeof (ReplaceDeviceViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.EditDeviceDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.EditDeviceDialog)
          }
        },
        {
          typeof (EditMinomatViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.CreateEditMinomatDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.CreateEditMinomatDialog)
          }
        },
        {
          typeof (EditMinomatMasterViewModel),
          new WindowTypes()
          {
            Tablet = typeof (CreateEditMinomatMasterDialog)
          }
        },
        {
          typeof (EditMinomatSlaveViewModel),
          new WindowTypes()
          {
            Tablet = typeof (CreateEditMinomatSlaveDialog)
          }
        },
        {
          typeof (CreateFixedStructureViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.CreateFixedStructureDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.CreateFixedStructureDialog)
          }
        },
        {
          typeof (CreateLogicalStructureViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.CreateLogicalStructureDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.CreateLogicalStructureDialog)
          }
        },
        {
          typeof (CreatePhysicalStructureViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.CreatePhysicalStructureDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.CreatePhysicalStructureDialog)
          }
        },
        {
          typeof (EditFixedStructureViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.EditFixedStructureDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.EditFixedStructureDialog)
          }
        },
        {
          typeof (EditLogicalStructureViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.EditLogicalStructureDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.EditLogicalStructureDialog)
          }
        },
        {
          typeof (EditPhysicalStructureViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.EditPhysicalStructuresDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.EditPhysicalStructuresDialog)
          }
        },
        {
          typeof (DeleteStructureViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.DeleteStructureDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.DeleteStructureDialog)
          }
        },
        {
          typeof (EditGenericEntityViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.EditGenericEntityDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.EditGenericEntityDialog)
          }
        },
        {
          typeof (SetEvaluationFactorViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.SetEvaluationFactorDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.SetEvaluationFactorDialog)
          }
        },
        {
          typeof (CreateDataCollectorsViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataCollectors.CreateDataCollectorDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataCollectors.CreateDataCollectorDialog)
          }
        },
        {
          typeof (StructureMinomatViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataCollectors.StructureMinomatView),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataCollectors.StructureMinomatView)
          }
        },
        {
          typeof (EditDataCollectorViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataCollectors.EditDataCollectorDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataCollectors.EditDataCollectorDialog)
          }
        },
        {
          typeof (DeleteDataCollectorViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataCollectors.DeleteDataCollectorDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataCollectors.DeleteDataCollectorDialog)
          }
        },
        {
          typeof (AddToMasterPoolViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataCollectors.AddDataCollector),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataCollectors.AddDataCollector)
          }
        },
        {
          typeof (RemoveFromMasterPoolViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataCollectors.RemoveDataCollector),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataCollectors.RemoveDataCollector)
          }
        },
        {
          typeof (FilterViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataFilters.FiltersDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataFilters.FiltersDialog)
          }
        },
        {
          typeof (AddFilterViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataFilters.AddFilterDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataFilters.AddFilterDialog)
          }
        },
        {
          typeof (UpdateFilterViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataFilters.UpdateFilterDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataFilters.UpdateFilterDialog)
          }
        },
        {
          typeof (RemoveFilterViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataFilters.RemoveFilterDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataFilters.RemoveFilterDialog)
          }
        },
        {
          typeof (UpdateRuleViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataFilters.UpdateRuleDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataFilters.UpdateRuleDialog)
          }
        },
        {
          typeof (RemoveRuleViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataFilters.RemoveRuleDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataFilters.RemoveRuleDialog)
          }
        },
        {
          typeof (CreateRoleViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Users.CreateRoleDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Users.CreateRoleDialog)
          }
        },
        {
          typeof (EditRoleViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Users.EditRoleDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Users.EditRoleDialog)
          }
        },
        {
          typeof (DeleteRoleViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Users.DeleteRoleDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Users.DeleteRoleDialog)
          }
        },
        {
          typeof (CreateUserViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Users.CreateUserDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Users.CreateUserDialog)
          }
        },
        {
          typeof (EditUserViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Users.EditUserDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Users.EditUserDialog)
          }
        },
        {
          typeof (DeleteUserViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Users.DeleteUserDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Users.DeleteUserDialog)
          }
        },
        {
          typeof (ViewRolePermissionsViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Users.ViewRolePermissionsDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Users.ViewRolePermissionsDialog)
          }
        },
        {
          typeof (CreateEditOrderViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Orders.CreateEditReadingOrder),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Orders.CreateEditReadingOrder)
          }
        },
        {
          typeof (DeleteSingleOrderViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Orders.DeleteReadingOrder),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Orders.DeleteReadingOrder)
          }
        },
        {
          typeof (ExecuteReadingOrderViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Orders.ExecuteReadingOrder),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Orders.ExecuteReadingOrder)
          }
        },
        {
          typeof (PrintPreviewViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Orders.PrintPreviewWindow),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Orders.PrintPreviewWindow)
          }
        },
        {
          typeof (StructureOrdersViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Orders.StructureOrdersDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Orders.StructureOrdersDialog)
          }
        },
        {
          typeof (ExecuteInstallationOrderViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Orders.ExecuteInstallationOrderDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Orders.ExecuteInstallationOrderDialog)
          }
        },
        {
          typeof (ReportsForTenantsViewModel),
          new WindowTypes()
          {
            Tablet = typeof (ReportsForTenantsDialog)
          }
        },
        {
          typeof (ShowDataCollectorsForMeterViewModel),
          new WindowTypes()
          {
            Tablet = typeof (ShowDataCollectorsForMeterDialog)
          }
        },
        {
          typeof (ReportsForMinomatsViewModel),
          new WindowTypes()
          {
            Tablet = typeof (ReportsForMinomatsDialog)
          }
        },
        {
          typeof (TestGSMViewModel),
          new WindowTypes() { Tablet = typeof (TestGSMDialog) }
        },
        {
          typeof (AssignMetersViewModel),
          new WindowTypes() { Tablet = typeof (AssignMetersDialog) }
        },
        {
          typeof (RegisterDevicesUserModeViewModel),
          new WindowTypes()
          {
            Tablet = typeof (RegisterDevicesUserModeDialog)
          }
        },
        {
          typeof (ManuallyAssignMetersViewModel),
          new WindowTypes()
          {
            Tablet = typeof (ManuallyAssignMetersDialog)
          }
        },
        {
          typeof (NetworkSetupViewModel),
          new WindowTypes() { Tablet = typeof (NetworkSetupDialog) }
        },
        {
          typeof (RepairModeViewModel),
          new WindowTypes() { Tablet = typeof (RepairModeDialog) }
        },
        {
          typeof (MinomatIdPopupViewModel),
          new WindowTypes() { Tablet = typeof (MinomatIdPopupView) }
        },
        {
          typeof (OrderMessagesViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Orders.OrderMessagesDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Orders.OrderMessagesDialog)
          }
        },
        {
          typeof (ShowRoutingTableViewModel),
          new WindowTypes()
          {
            Tablet = typeof (ShowRoutingTableDialog)
          }
        },
        {
          typeof (RegisteredDevicesForMinomatViewModel),
          new WindowTypes()
          {
            Tablet = typeof (RegisteredDevicesForMinomat)
          }
        },
        {
          typeof (ExportFileSettingsViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Reporting.ExportFileSettings),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Reporting.ExportFileSettings)
          }
        },
        {
          typeof (ExportJobViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Reporting.ExportJobDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Reporting.ExportJobDialog)
          }
        },
        {
          typeof (MinomatCommunicationLogDetailsViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Reporting.MinomatCommunicationLogDetails),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Reporting.MinomatCommunicationLogDetails)
          }
        },
        {
          typeof (PrintOptionsViewModel),
          new WindowTypes() { Desktop = typeof (PrintOptionsDialog) }
        },
        {
          typeof (ReadingValuesPrintPreviewViewModel),
          new WindowTypes()
          {
            Desktop = typeof (ReadingValuesPrintPreviewDialog)
          }
        },
        {
          typeof (EditServerPathViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Settings.EditServerPath),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Settings.EditServerPath)
          }
        },
        {
          typeof (SendDataBeforeChangeServerViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Settings.SendDataBeforeChangeServer),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Settings.SendDataBeforeChangeServer)
          }
        },
        {
          typeof (ConfigChangeableParamsViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Settings.ConfigChangeableParams),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Settings.ConfigChangeableParams)
          }
        },
        {
          typeof (ProfileTypeViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Settings.ProfileTypeDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Settings.ProfileTypeDialog)
          }
        },
        {
          typeof (StructureScanSettingsViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Settings.StructureScanSettings),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Settings.StructureScanSettings)
          }
        },
        {
          typeof (MeterPhotosViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Meters.MeterPhotosDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Meters.MeterPhotosDialog)
          }
        },
        {
          typeof (TakePhotoViewModel),
          new WindowTypes()
          {
            Desktop = (Type) null,
            Tablet = typeof (TakePhotoDialog)
          }
        },
        {
          typeof (MeterNotesViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Meters.MeterNotesDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Meters.MeterNotesDialog)
          }
        },
        {
          typeof (AddNoteViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Meters.AddNoteDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Meters.AddNoteDialog)
          }
        },
        {
          typeof (EditNoteViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Meters.EditNoteDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Meters.EditNoteDialog)
          }
        },
        {
          typeof (GenericProgressDialogViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.GenericProgressDialog.GenericProgressDialogView),
            Tablet = typeof (MSS.Client.UI.Tablet.View.GenericProgressDialog.GenericProgressDialogView)
          }
        },
        {
          typeof (DeterminateProgressDialogViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.GenericProgressDialog.DeterminateProgressDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.GenericProgressDialog.DeterminateProgressDialog)
          }
        },
        {
          typeof (DownloadStructuresViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Download.DownloadStructuresDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Download.DownloadStructuresDialog)
          }
        },
        {
          typeof (ShowConflictsViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Synchronization.ShowConflictsDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Synchronization.ShowConflictsDialog)
          }
        },
        {
          typeof (FirmwareUpdateViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Configuration.FirmwareUpdateDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Configuration.FirmwareUpdateDialog)
          }
        },
        {
          typeof (DeviceModelChangeableParametersViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Configuration.DeviceModelChangeableParametersDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Configuration.DeviceModelChangeableParametersDialog)
          }
        },
        {
          typeof (ExpertConfigurationViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Configuration.DeviceModelChangeableParametersDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Configuration.DeviceModelChangeableParametersDialog)
          }
        },
        {
          typeof (NewsAndUpdatesViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.NewsAndUpdates.UpdatesAndNews),
            Tablet = typeof (MSS.Client.UI.Tablet.View.NewsAndUpdates.UpdatesAndNews)
          }
        },
        {
          typeof (AddJobDefinitionViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Jobs.CreateJobDefinitionDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Jobs.CreateJobDefinitionDialog)
          }
        },
        {
          typeof (EditScenarioViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Jobs.EditScenarioDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Jobs.EditScenarioDialog)
          }
        },
        {
          typeof (AssignStructureMbusViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Jobs.AssignStructureMbusDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Jobs.AssignStructureDialog)
          }
        },
        {
          typeof (AssignStructureViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Jobs.AssignStructureDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Jobs.AssignStructureDialog)
          }
        },
        {
          typeof (AddRuleViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.DataFilters.AddRuleDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.DataFilters.AddRuleDialog)
          }
        },
        {
          typeof (MSS_Client.ViewModel.Jobs.RemoveJobDefinition),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Jobs.RemoveJobDefinition),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Jobs.RemoveJobDefinition)
          }
        },
        {
          typeof (IntervalsViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Jobs.AddEditIntervals),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Jobs.AddEditIntervals)
          }
        },
        {
          typeof (AddMssReadingJobViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Jobs.AddEditJobDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Jobs.AddEditJobDialog)
          }
        },
        {
          typeof (RemoveJob),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Jobs.RemoveJobDefinition),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Jobs.RemoveJobDefinition)
          }
        },
        {
          typeof (ViewJobStructureViewModel),
          new WindowTypes()
          {
            Desktop = typeof (ViewJobStructureDialog)
          }
        },
        {
          typeof (JobLogsForJobViewModel),
          new WindowTypes() { Desktop = typeof (JobJogsForJobDialog) }
        },
        {
          typeof (SystemSelectionViewModel),
          new WindowTypes()
          {
            Desktop = typeof (SystemSelectionDialog)
          }
        },
        {
          typeof (ArchivingViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Archive.ArchiveAndDeleteDataDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Archive.ArchiveAndDeleteDataDialog)
          }
        },
        {
          typeof (CreateEditArchiveJobViewModel),
          new WindowTypes()
          {
            Desktop = typeof (CreateEditArchiveJobDialog)
          }
        },
        {
          typeof (DeleteArchiveJobViewModel),
          new WindowTypes()
          {
            Desktop = typeof (DeleteArchiveJobDialog)
          }
        },
        {
          typeof (ViewArchiveTenantViewModel),
          new WindowTypes()
          {
            Desktop = typeof (ViewArchiveTenantDialog)
          }
        },
        {
          typeof (ViewArchiveLocationViewModel),
          new WindowTypes()
          {
            Desktop = typeof (ViewArchiveLocationDialog)
          }
        },
        {
          typeof (ViewArchiveMeterViewModel),
          new WindowTypes()
          {
            Desktop = typeof (ViewArchiveMeterDialog)
          }
        },
        {
          typeof (ViewArchiveMinomatViewModel),
          new WindowTypes()
          {
            Desktop = typeof (ViewArchiveMinomatDialog)
          }
        },
        {
          typeof (MeterReadingValuesViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Meters.MeterReadingValuesDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Meters.MeterReadingValuesDialog)
          }
        },
        {
          typeof (TranslationRulesViewModel),
          new WindowTypes()
          {
            Desktop = typeof (TranslationRulesDialog)
          }
        },
        {
          typeof (ConsumptionViewModel),
          new WindowTypes() { Desktop = typeof (ConsumptionDialog) }
        },
        {
          typeof (RadioTestViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.RadioTest.RadioTestDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.RadioTest.RadioTestDialog)
          }
        },
        {
          typeof (AssignTestRunViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.RadioTest.AssignTestRunDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.RadioTest.AssignTestRunDialog)
          }
        },
        {
          typeof (WarningWithListBoxViewModel),
          new WindowTypes()
          {
            Desktop = typeof (MSS.Client.UI.Desktop.View.Structures.WarningWithListBoxDialog),
            Tablet = typeof (MSS.Client.UI.Tablet.View.Structures.WarningWithListBoxDialog)
          }
        }
      };
    }
  }
}


--- WindowTypes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.Utils.WindowTypes
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using System;

#nullable disable
namespace MSS_Client.Utils
{
  public struct WindowTypes
  {
    public Type Desktop { get; set; }

    public Type Tablet { get; set; }
  }
}

