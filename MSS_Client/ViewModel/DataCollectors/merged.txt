
--- AddToMasterPoolViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.AddToMasterPoolViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Interfaces;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class AddToMasterPoolViewModel : MasterPoolViewModelBase
  {
    public AddToMasterPoolViewModel(IRepositoryFactory repositoryFactory)
      : base(repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
    }
  }
}


--- CreateDataCollectorsViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.CreateDataCollectorsViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Interfaces;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class CreateDataCollectorsViewModel : DataCollectorViewModelBase
  {
    private IRepositoryFactory _repositoryFactory;

    public CreateDataCollectorsViewModel(IRepositoryFactory repositoryFactory)
      : base(repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
    }
  }
}


--- DataCollectorsViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.DataCollectorsViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.DataCollectorsManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Business.Utils;
using MSS.Client.UI.Desktop.View.DataCollectors;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Utils;
using MSS.DIConfiguration;
using MSS.DTO.Clients;
using MSS.DTO.MessageHandler;
using MSS.DTO.Minomat;
using MSS.DTO.Reporting;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.GenericProgressDialog;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using Telerik.Windows.Data;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class DataCollectorsViewModel : ValidationViewModelBase
  {
    private IRepositoryFactory _repositoryFactory;
    private readonly IWindowFactory _windowFactory;
    private IRepository<MSS.Core.Model.DataCollectors.Minomat> _minomatRepository;
    private ViewModelBase _messageUserControlItems;
    private ViewModelBase _messageUserControlItemsPool;
    private MinomatDTO _selectedMinomat;
    private ObservableCollection<MinomatDTO> _getDataCollectorsItems;
    private ObservableCollection<MinomatDTO> _getDataCollectorsItemsPool;
    private IEnumerable<MinomatCommunicationLogDTO> _minomatCommunicationLogs = (IEnumerable<MinomatCommunicationLogDTO>) new RadObservableCollection<MinomatCommunicationLogDTO>();
    private DateTime? _endDateLogValue;
    private DateTime? _startDateLogValue;
    private string _masterDateLogValue = string.Empty;
    private string _pageSizePool;
    private string _pageSize;
    private bool _isDataCollectorsItemsSelected;
    private int _selectedIndex;
    private bool _isDataCollectorsItemsPoolSelected;
    private bool _isBusy;
    private bool _masterPoolAddVisibility;
    private bool _masterPoolDeleteVisibility;
    private bool _isMasterPoolTabVisible;
    private bool _addMinomatVisibility;
    private bool _editMinomatVisibility;
    private bool _deleteMinomatVisibility;

    [Inject]
    public DataCollectorsViewModel(
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
    {
      this.IsBusy = true;
      this._windowFactory = windowFactory;
      this._repositoryFactory = repositoryFactory;
      this._minomatRepository = repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>();
      UsersManager usersManager = new UsersManager(this._repositoryFactory);
      this.AddMinomatVisibility = usersManager.HasRight(OperationEnum.DataCollectorAdd.ToString());
      this.EditMinomatVisibility = usersManager.HasRight(OperationEnum.DataCollectorEdit.ToString());
      this.DeleteMinomatVisibility = usersManager.HasRight(OperationEnum.DataCollectorDelete.ToString());
      this.MasterPoolAddVisibility = usersManager.HasRight(OperationEnum.MasterPoolAdd.ToString());
      this.MasterPoolDeleteVisibility = usersManager.HasRight(OperationEnum.MasterPoolDelete.ToString());
      this.IsMasterPoolTabVisible = usersManager.HasRight(OperationEnum.MasterPoolView.ToString());
      EventPublisher.Register<ActionSearch<MinomatDTO>>(new Action<ActionSearch<MinomatDTO>>(this.RefreshMinomatsAfterSearch));
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(this.CreateMessage));
      EventPublisher.Register<MinomatUpdate>(new Action<MinomatUpdate>(this.RefreshMinomats));
      EventPublisher.Register<SelectedTabValue>(new Action<SelectedTabValue>(this.SetTab));
      this._pageSize = MSS.Business.Utils.AppContext.Current.GetParameterValue<string>(nameof (PageSize));
      this._pageSizePool = MSS.Business.Utils.AppContext.Current.GetParameterValue<string>(nameof (PageSize));
      this.InitializeMinomats();
    }

    public ViewModelBase MessageUserControlItems
    {
      get => this._messageUserControlItems;
      set
      {
        this._messageUserControlItems = value;
        this.OnPropertyChanged(nameof (MessageUserControlItems));
      }
    }

    public ViewModelBase MessageUserControlItemsPool
    {
      get => this._messageUserControlItemsPool;
      set
      {
        this._messageUserControlItemsPool = value;
        this.OnPropertyChanged(nameof (MessageUserControlItemsPool));
      }
    }

    private void SetTab(SelectedTabValue selectedTabValue)
    {
      switch (selectedTabValue.Tab)
      {
        case ApplicationTabsEnum.DataCollectors:
          this.SelectedIndex = 0;
          break;
        case ApplicationTabsEnum.DataCollectorsPool:
          this.SelectedIndex = 1;
          break;
      }
    }

    public MinomatDTO SelectedMinomat
    {
      get => this._selectedMinomat;
      set
      {
        this._selectedMinomat = value;
        this.OnPropertyChanged(nameof (SelectedMinomat));
        this.OnPropertyChanged("EnableLoggingtVisibility");
        this.OnPropertyChanged("DisableLoggingVisibility");
      }
    }

    public RadObservableCollection<Provider> GetListofProviders
    {
      get
      {
        RadObservableCollection<Provider> getListofProviders = new RadObservableCollection<Provider>();
        IOrderedEnumerable<Provider> orderedEnumerable = this._repositoryFactory.GetRepository<Provider>().GetAll().OrderBy<Provider, string>((Func<Provider, string>) (p => p.ProviderName));
        if (orderedEnumerable.Any<Provider>())
          getListofProviders = new RadObservableCollection<Provider>((IEnumerable<Provider>) orderedEnumerable);
        return getListofProviders;
      }
    }

    public ObservableCollection<MinomatDTO> GetDataCollectorsItems
    {
      get => this._getDataCollectorsItems;
      set
      {
        this._getDataCollectorsItems = value;
        this.OnPropertyChanged(nameof (GetDataCollectorsItems));
      }
    }

    public ObservableCollection<MinomatDTO> GetDataCollectorsItemsPool
    {
      get => this._getDataCollectorsItemsPool;
      set
      {
        this._getDataCollectorsItemsPool = value;
        this.OnPropertyChanged(nameof (GetDataCollectorsItemsPool));
      }
    }

    public IEnumerable<MinomatCommunicationLogDTO> MinomatCommunicationLogs
    {
      get => this._minomatCommunicationLogs;
      set
      {
        this._minomatCommunicationLogs = value;
        this.OnPropertyChanged(nameof (MinomatCommunicationLogs));
      }
    }

    public DateTime? EndDateLogValue
    {
      get => this._endDateLogValue;
      set
      {
        this._endDateLogValue = value;
        this.ValidateProperty("MasterNumberValue");
        this.OnPropertyChanged(nameof (EndDateLogValue));
      }
    }

    public DateTime? StartDateLogValue
    {
      get => this._startDateLogValue;
      set
      {
        this._startDateLogValue = value;
        this.ValidateProperty("MasterNumberValue");
        this.OnPropertyChanged(nameof (StartDateLogValue));
      }
    }

    public string MasterNumberValue
    {
      get => this._masterDateLogValue;
      set
      {
        this._masterDateLogValue = value;
        this.OnPropertyChanged(nameof (MasterNumberValue));
      }
    }

    public string PageSizePool
    {
      get => this._pageSizePool;
      set
      {
        this._pageSizePool = value;
        this.OnPropertyChanged(nameof (PageSizePool));
      }
    }

    public string PageSize
    {
      get => this._pageSize;
      set
      {
        this._pageSize = value;
        this.OnPropertyChanged(nameof (PageSize));
      }
    }

    public bool IsDataCollectorsItemsSelected
    {
      get => this._isDataCollectorsItemsSelected;
      set
      {
        this._isDataCollectorsItemsSelected = value;
        if (!this._isDataCollectorsItemsSelected)
          return;
        EventPublisher.Publish<SelectedTabChanged>(new SelectedTabChanged()
        {
          SelectedTab = ApplicationTabsEnum.DataCollectors
        }, (IViewModel) this);
      }
    }

    public int SelectedIndex
    {
      get => this._selectedIndex;
      set
      {
        this._selectedIndex = value;
        this.OnPropertyChanged(nameof (SelectedIndex));
      }
    }

    public bool IsDataCollectorsItemsPoolSelected
    {
      get => this._isDataCollectorsItemsPoolSelected;
      set
      {
        this._isDataCollectorsItemsPoolSelected = value;
        if (!this._isDataCollectorsItemsPoolSelected)
          return;
        EventPublisher.Publish<SelectedTabChanged>(new SelectedTabChanged()
        {
          SelectedTab = ApplicationTabsEnum.DataCollectorsPool
        }, (IViewModel) this);
      }
    }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        if (this._isBusy == value)
          return;
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    public bool MasterPoolAddVisibility
    {
      get => this._masterPoolAddVisibility;
      set
      {
        this._masterPoolAddVisibility = value;
        this.OnPropertyChanged(nameof (MasterPoolAddVisibility));
      }
    }

    public bool MasterPoolDeleteVisibility
    {
      get => this._masterPoolDeleteVisibility;
      set
      {
        this._masterPoolDeleteVisibility = value;
        this.OnPropertyChanged(nameof (MasterPoolDeleteVisibility));
      }
    }

    public bool IsMasterPoolTabVisible
    {
      get => this._isMasterPoolTabVisible;
      set
      {
        this._isMasterPoolTabVisible = value;
        this.OnPropertyChanged(nameof (IsMasterPoolTabVisible));
      }
    }

    private void RefreshMinomats(MinomatUpdate minomatUpdate)
    {
      minomatUpdate.Ids.ForEach((Action<Guid>) (x => this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().Refresh((object) x)));
    }

    private void RefreshMinomatsAfterSearch(ActionSearch<MinomatDTO> update)
    {
      bool flag = update.Message == null;
      switch (update.SelectedTab)
      {
        case ApplicationTabsEnum.DataCollectors:
          this.GetDataCollectorsItems = update.ObservableCollection.Count == 0 ? this.GetDataCollectorsManagerInstance().GetMinomatDTOs() : update.ObservableCollection;
          break;
        case ApplicationTabsEnum.DataCollectorsPool:
          this.GetDataCollectorsItemsPool = update.ObservableCollection.Count == 0 ? this.GetDataCollectorsManagerInstance().GetMinomatPoolDTOs() : update.ObservableCollection;
          break;
      }
      if (flag)
        return;
      if (this.IsDataCollectorsItemsSelected)
        this.MessageUserControlItems = MessageHandlingManager.ShowWarningMessage(update.Message.MessageText);
      if (!this.IsDataCollectorsItemsPoolSelected)
        return;
      this.MessageUserControlItemsPool = MessageHandlingManager.ShowWarningMessage(update.Message.MessageText);
    }

    private void CreateMessage(ActionSyncFinished messageFinished)
    {
      ViewModelBase viewModelBase = (ViewModelBase) null;
      switch (messageFinished.Message.MessageType)
      {
        case MessageTypeEnum.Success:
          viewModelBase = MessageHandlingManager.ShowSuccessMessage(messageFinished.Message.MessageText);
          break;
        case MessageTypeEnum.Warning:
          viewModelBase = MessageHandlingManager.ShowWarningMessage(messageFinished.Message.MessageText);
          break;
      }
      if (this.IsDataCollectorsItemsSelected)
        this.MessageUserControlItems = viewModelBase;
      if (!this.IsDataCollectorsItemsPoolSelected)
        return;
      this.MessageUserControlItemsPool = viewModelBase;
    }

    protected DataCollectorsManager GetDataCollectorsManagerInstance()
    {
      return new DataCollectorsManager(this._repositoryFactory);
    }

    public ICommand SearchMinomatCommunicationLogs
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          if (!this.IsValid)
            return;
          GenericProgressDialogViewModel pd = DIConfigurator.GetConfigurator().Get<GenericProgressDialogViewModel>((IParameter) new ConstructorArgument("progressDialogTitle", (object) Resources.JOBS_LOAD_LOGS), (IParameter) new ConstructorArgument("progressDialogMessage", (object) Resources.MSS_CLIENT_ARCHIVE_MESSAGE));
          BackgroundWorker backgroundWorker = new BackgroundWorker()
          {
            WorkerReportsProgress = true,
            WorkerSupportsCancellation = true
          };
          backgroundWorker.DoWork += (DoWorkEventHandler) ((sender, args) =>
          {
            MSS.Core.Model.DataCollectors.Minomat master = this._minomatRepository.FirstOrDefault((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (m => m.RadioId == this.MasterNumberValue && m.GsmId != default (string)));
            Expression<Func<MinomatConnectionLog, bool>> expression = PredicateBuilder.True<MinomatConnectionLog>();
            if (master != null)
              expression = expression.And<MinomatConnectionLog>((Expression<Func<MinomatConnectionLog, bool>>) (log => log.MinomatId == (Guid?) master.Id));
            DateTime? nullable = this.StartDateLogValue;
            if (nullable.HasValue)
              expression = expression.And<MinomatConnectionLog>((Expression<Func<MinomatConnectionLog, bool>>) (l => (DateTime?) l.TimePoint >= this.StartDateLogValue));
            nullable = this.EndDateLogValue;
            if (nullable.HasValue)
              expression = expression.And<MinomatConnectionLog>((Expression<Func<MinomatConnectionLog, bool>>) (l => (DateTime?) l.TimePoint <= this.EndDateLogValue));
            this.MinomatCommunicationLogs = (IEnumerable<MinomatCommunicationLogDTO>) new RadObservableCollection<MinomatCommunicationLogDTO>((IEnumerable<MinomatCommunicationLogDTO>) this._repositoryFactory.GetRepository<MinomatConnectionLog>().SearchFor(expression).Select<MinomatConnectionLog, MinomatCommunicationLogDTO>((Func<MinomatConnectionLog, MinomatCommunicationLogDTO>) (connLog => new MinomatCommunicationLogDTO()
            {
              MasterRadioId = master != null ? master.RadioId : string.Empty,
              GsmID = connLog.GsmID,
              ChallengeKey = connLog.ChallengeKey,
              TimePoint = connLog.TimePoint,
              SessionKey = connLog.SessionKey
            })).ToList<MinomatCommunicationLogDTO>());
          });
          backgroundWorker.RunWorkerCompleted += (RunWorkerCompletedEventHandler) ((sender, args) =>
          {
            pd.OnRequestClose(false);
            MSS.DTO.Message.Message message = (MSS.DTO.Message.Message) null;
            if (args.Cancelled)
              message = new MSS.DTO.Message.Message()
              {
                MessageType = MessageTypeEnum.Warning,
                MessageText = Resources.MSS_Client_Archivation_Cancelled
              };
            else if (args.Error != null)
            {
              MSS.Business.Errors.MessageHandler.LogException(args.Error);
              MessageHandlingManager.ShowExceptionMessageDialog(MSSHelper.GetErrorMessage(args.Error), this._windowFactory);
            }
            else
            {
              if (this.MinomatCommunicationLogs.Count<MinomatCommunicationLogDTO>() == 0)
                MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.LOGS_NOVALUES_FOUND, false);
              message = new MSS.DTO.Message.Message()
              {
                MessageType = MessageTypeEnum.Success,
                MessageText = Resources.MSS_Client_Archivation_Succedded
              };
            }
            if (message == null)
              return;
            EventPublisher.Publish<ActionFinished>(new ActionFinished()
            {
              Message = message
            }, (IViewModel) this);
          });
          backgroundWorker.RunWorkerAsync();
          this._windowFactory.CreateNewProgressDialog((IViewModel) pd, backgroundWorker);
        });
      }
    }

    public ICommand AddDataCollectorCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<AddToMasterPoolViewModel>());
          if (newModalDialog.HasValue)
            this.MessageUserControlItemsPool = newModalDialog.Value ? MessageHandlingManager.ShowSuccessMessage(Resources.MSS_MessageCodes_SuccessOperation) : MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          this.GetDataCollectorsItems = this.GetDataCollectorsManagerInstance().GetMinomatDTOs();
          this.GetDataCollectorsItemsPool = this.GetDataCollectorsManagerInstance().GetMinomatPoolDTOs();
        }));
      }
    }

    public ICommand RemoveDataCollectorCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          IKernel configurator = DIConfigurator.GetConfigurator();
          RemoveDataCollector removeDataCollector = new RemoveDataCollector()
          {
            Owner = Application.Current.Windows[0],
            WindowStartupLocation = WindowStartupLocation.CenterOwner,
            DataContext = (object) configurator.Get<MasterPoolViewModel>()
          };
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<RemoveFromMasterPoolViewModel>());
          if (newModalDialog.HasValue)
            this.MessageUserControlItemsPool = newModalDialog.Value ? MessageHandlingManager.ShowSuccessMessage(Resources.MSS_MessageCodes_SuccessOperation) : MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          this.GetDataCollectorsItems = this.GetDataCollectorsManagerInstance().GetMinomatDTOs();
          this.GetDataCollectorsItemsPool = this.GetDataCollectorsManagerInstance().GetMinomatPoolDTOs();
        }));
      }
    }

    public async void InitializeMinomats()
    {
      await Task.Run((Action) (() =>
      {
        Mapper.CreateMap<MSS.Core.Model.DataCollectors.Minomat, MinomatDTO>().ForMember((Expression<Func<MinomatDTO, object>>) (x => (object) x.idEnumStatus), (Action<IMemberConfigurationExpression<MSS.Core.Model.DataCollectors.Minomat>>) (y => y.ResolveUsing((Func<MSS.Core.Model.DataCollectors.Minomat, object>) (x => x.Status != null ? (object) (int) Enum.Parse(typeof (StatusMinomatEnum), x.Status) : (object) 0))));
        Mapper.CreateMap<MinomatDTO, MSS.Core.Model.DataCollectors.Minomat>().ForMember((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, object>>) (x => x.Status), (Action<IMemberConfigurationExpression<MinomatDTO>>) (y => y.ResolveUsing((Func<MinomatDTO, object>) (x => (object) (StatusMinomatEnum) x.idEnumStatus))));
        DataCollectorsManager collectorsManager = new DataCollectorsManager(this._repositoryFactory);
        this.GetDataCollectorsItems = collectorsManager.GetMinomatDTOs();
        this.GetDataCollectorsItemsPool = collectorsManager.GetMinomatPoolDTOs();
      }));
      this.IsBusy = false;
    }

    public ICommand EnableLoggingCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (param =>
        {
          if (param is MinomatDTO minomatDto2)
          {
            MSS.Core.Model.DataCollectors.Minomat byId = this._minomatRepository.GetById((object) minomatDto2.Id);
            if (byId != null)
            {
              byId.LoggingEnabled = true;
              this._minomatRepository.Update(byId);
              minomatDto2.LoggingEnabled = true;
            }
          }
          this.OnPropertyChanged("EnableLoggingtVisibility");
          this.OnPropertyChanged("DisableLoggingVisibility");
        }));
      }
    }

    public ICommand DisableLoggingCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (param =>
        {
          if (param is MinomatDTO minomatDto2)
          {
            MSS.Core.Model.DataCollectors.Minomat byId = this._minomatRepository.GetById((object) minomatDto2.Id);
            if (byId != null)
            {
              byId.LoggingEnabled = false;
              this._minomatRepository.Update(byId);
              minomatDto2.LoggingEnabled = false;
            }
          }
          this.OnPropertyChanged("EnableLoggingtVisibility");
          this.OnPropertyChanged("DisableLoggingVisibility");
        }));
      }
    }

    public ICommand ViewStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (param =>
        {
          if (!(param is MinomatDTO minomatDto2))
            return;
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<StructureMinomatViewModel>((IParameter) new ConstructorArgument("minomat", (object) minomatDto2)));
        }));
      }
    }

    public ICommand CreateDataCollectionCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateDataCollectorsViewModel>());
          if (newModalDialog.HasValue)
            this.MessageUserControlItems = newModalDialog.Value ? MessageHandlingManager.ShowSuccessMessage(Resources.MSS_MessageCodes_SuccessOperation) : MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          this.GetDataCollectorsItems = this.GetDataCollectorsManagerInstance().GetMinomatDTOs();
          this.GetDataCollectorsItemsPool = this.GetDataCollectorsManagerInstance().GetMinomatPoolDTOs();
        }));
      }
    }

    public ICommand DeleteDataCollectorCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          MinomatDTO minomatDto = (MinomatDTO) _;
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<DeleteDataCollectorViewModel>((IParameter) new ConstructorArgument("minomat", (object) minomatDto)));
          if (!newModalDialog.HasValue)
            return;
          this.MessageUserControlItems = newModalDialog.Value ? MessageHandlingManager.ShowSuccessMessage(Resources.MSS_MessageCodes_SuccessOperation) : MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          this.GetDataCollectorsItems = this.GetDataCollectorsManagerInstance().GetMinomatDTOs();
          this.GetDataCollectorsItemsPool = this.GetDataCollectorsManagerInstance().GetMinomatPoolDTOs();
        }));
      }
    }

    public ICommand EditDataCollectorCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          MinomatDTO minomatDto = (MinomatDTO) _;
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditDataCollectorViewModel>((IParameter) new ConstructorArgument("minomat", (object) minomatDto)));
          if (newModalDialog.HasValue)
            this.MessageUserControlItems = newModalDialog.Value ? MessageHandlingManager.ShowSuccessMessage(Resources.MSS_MessageCodes_SuccessOperation) : MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          this.GetDataCollectorsItems = this.GetDataCollectorsManagerInstance().GetMinomatDTOs();
          this.GetDataCollectorsItemsPool = this.GetDataCollectorsManagerInstance().GetMinomatPoolDTOs();
        }));
      }
    }

    public RadObservableCollection<EnumObj> GetListofStatuses
    {
      get
      {
        RadObservableCollection<EnumObj> getListofStatuses = new RadObservableCollection<EnumObj>();
        IEnumerable<StatusMinomatEnum> source1 = Enum.GetValues(typeof (StatusMinomatEnum)).Cast<StatusMinomatEnum>();
        if (!(source1 is StatusMinomatEnum[] statusMinomatEnumArray))
          statusMinomatEnumArray = source1.ToArray<StatusMinomatEnum>();
        StatusMinomatEnum[] source2 = statusMinomatEnumArray;
        if (((IEnumerable<StatusMinomatEnum>) source2).Count<StatusMinomatEnum>() == 0)
          return getListofStatuses;
        for (int index = 0; index < ((IEnumerable<StatusMinomatEnum>) source2).Count<StatusMinomatEnum>(); ++index)
        {
          switch (source2[index])
          {
            case StatusMinomatEnum.New:
              EnumObj enumObj1 = new EnumObj()
              {
                IdEnum = index,
                StatusFromObj = Resources.MSS_MINOMAT_STATUS_NEW
              };
              getListofStatuses.Add(enumObj1);
              break;
            case StatusMinomatEnum.BuiltIn:
              EnumObj enumObj2 = new EnumObj()
              {
                IdEnum = index,
                StatusFromObj = Resources.MSS_MINOMAT_STATUS_BUILTIN
              };
              getListofStatuses.Add(enumObj2);
              break;
          }
        }
        return getListofStatuses;
      }
    }

    public bool AddMinomatVisibility
    {
      get => this._addMinomatVisibility;
      set
      {
        this._addMinomatVisibility = value;
        this.OnPropertyChanged(nameof (AddMinomatVisibility));
      }
    }

    public bool EditMinomatVisibility
    {
      get => this._editMinomatVisibility;
      set
      {
        this._editMinomatVisibility = value;
        this.OnPropertyChanged(nameof (EditMinomatVisibility));
      }
    }

    public bool DeleteMinomatVisibility
    {
      get => this._deleteMinomatVisibility;
      set
      {
        this._deleteMinomatVisibility = value;
        this.OnPropertyChanged(nameof (DeleteMinomatVisibility));
      }
    }

    public bool EnableLoggingtVisibility
    {
      get
      {
        return this.SelectedMinomat != null && this.SelectedMinomat.IsMaster && !this.SelectedMinomat.LoggingEnabled;
      }
      set => this.OnPropertyChanged(nameof (EnableLoggingtVisibility));
    }

    public bool DisableLoggingVisibility
    {
      get
      {
        return this.SelectedMinomat != null && this.SelectedMinomat.IsMaster && this.SelectedMinomat.LoggingEnabled;
      }
      set => this.OnPropertyChanged(nameof (DisableLoggingVisibility));
    }
  }
}


--- DataCollectorViewModelBase.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.DataCollectorViewModelBase
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.JobsManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Core.Model.ApplicationParamenters;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Structures;
using MSS.Core.Model.UsersManagement;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using Telerik.Windows.Data;
using ZENNER;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class DataCollectorViewModelBase : ValidationViewModelBase
  {
    private IRepositoryFactory _repositoryFactory;
    protected Minomat selectedMinomat;
    private bool _isInMasterPool;
    private bool _isMaster;
    private StatusMinomatEnum _status;
    private string _masterRadioId;
    private DateTime? _startDate;
    private DateTime? _endDate;
    private Provider _provider;
    private string _simPin;
    private string _accessPoint;
    private string _userId;
    private string _userPassword;
    private bool _registered;
    private bool _notRegistered;
    private string _challenge;
    private string _gsmId;
    private int? _polling;
    private string _hostandPort;
    private string _url;
    private DateTime? _dateAppended;
    private string _appendedBy;
    private string _sessionKey;
    private Country _selectedCountry;
    private string _simCardNumber;
    private bool _minomatScenarioEditable;
    private ScenarioDTO _selectedScenario;
    private List<ScenarioDTO> _scenarioList = new List<ScenarioDTO>();
    private bool _masterPoolAddVisibility;

    public DataCollectorViewModelBase(IRepositoryFactory repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
      UsersManager usersManager = new UsersManager(this._repositoryFactory);
      this.MasterPoolAddVisibility = usersManager.HasRight(OperationEnum.MasterPoolAdd.ToString());
      this.IsMinomatScenarioEditable = usersManager.HasRight(OperationEnum.MinomatScenarioEdit.ToString());
      this.Registered = false;
      this.IsInMasterPool = this.MasterPoolAddVisibility;
      this.AppendedBy = string.Format("{0} {1}", (object) MSS.Business.Utils.AppContext.Current.LoggedUser.FirstName, (object) MSS.Business.Utils.AppContext.Current.LoggedUser.LastName);
      this.DateAppended = new DateTime?(DateTime.Now);
      IRepository<ApplicationParameter> repository = this._repositoryFactory.GetRepository<ApplicationParameter>();
      int result;
      int.TryParse(repository.FirstOrDefault((Expression<Func<ApplicationParameter, bool>>) (x => x.Parameter == nameof (Polling))).Value, out result);
      this.Polling = new int?(result);
      this.HostAndPort = repository.FirstOrDefault((Expression<Func<ApplicationParameter, bool>>) (x => x.Parameter == nameof (HostAndPort))).Value;
      this.Url = repository.FirstOrDefault((Expression<Func<ApplicationParameter, bool>>) (x => x.Parameter == nameof (Url))).Value;
      this.Challenge = MeterListenerManager.CreateRandomChallengeKey().ToString();
      this.GsmId = string.Empty;
      this.SessionKey = MeterListenerManager.CreateRandomSessionKey().ToString();
    }

    public RadObservableCollection<StatusMinomatEnum> GetListofStatuses
    {
      get
      {
        RadObservableCollection<StatusMinomatEnum> getListofStatuses = new RadObservableCollection<StatusMinomatEnum>();
        List<StatusMinomatEnum> list = Enum.GetValues(typeof (StatusMinomatEnum)).Cast<StatusMinomatEnum>().ToList<StatusMinomatEnum>();
        if (list.Any<StatusMinomatEnum>())
          getListofStatuses = new RadObservableCollection<StatusMinomatEnum>((IEnumerable<StatusMinomatEnum>) list);
        return getListofStatuses;
      }
    }

    public RadObservableCollection<Provider> GetListofProviders
    {
      get
      {
        RadObservableCollection<Provider> getListofProviders = new RadObservableCollection<Provider>();
        IOrderedEnumerable<Provider> orderedEnumerable = this._repositoryFactory.GetRepository<Provider>().GetAll().OrderBy<Provider, string>((Func<Provider, string>) (p => p.ProviderName));
        if (orderedEnumerable.Any<Provider>())
          getListofProviders = new RadObservableCollection<Provider>((IEnumerable<Provider>) orderedEnumerable);
        return getListofProviders;
      }
    }

    public System.Windows.Input.ICommand CreateMinomatCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (!this.IsValid)
            return;
          Minomat minomat = new Minomat()
          {
            RadioId = this.MasterRadioId,
            StartDate = this.StartDate,
            EndDate = this.EndDate,
            Provider = this.SelectedProvider,
            Status = this.Status.ToString(),
            Registered = this.Registered,
            Challenge = this.Challenge,
            GsmId = this.GsmId,
            Polling = this.Polling ?? 0,
            HostAndPort = this.HostAndPort,
            Url = this.Url,
            CreatedOn = new DateTime?(this.DateAppended ?? new DateTime(1800, 1, 1)),
            CreatedBy = MSS.Business.Utils.AppContext.Current.LoggedUser.Id.ToString(),
            CreatedByName = string.Format("{0} {1}", (object) MSS.Business.Utils.AppContext.Current.LoggedUser.FirstName, (object) MSS.Business.Utils.AppContext.Current.LoggedUser.LastName),
            IsDeactivated = false,
            IsInMasterPool = this.IsInMasterPool,
            SimPin = this.SimPin,
            AccessPoint = this.AccessPoint,
            UserId = this.UserId,
            UserPassword = this.UserPassword,
            SessionKey = this.SessionKey,
            IsMaster = true,
            Country = this.SelectedCountry,
            Scenario = this.SelectedScenario != null ? this._repositoryFactory.GetRepository<Scenario>().GetById((object) this.SelectedScenario.Id) : (Scenario) null,
            SimCardNumber = this.SimCardNumber ?? ""
          };
          this._repositoryFactory.GetRepository<Minomat>().Insert(minomat);
          MessageHandler.LogDebug("Minomat created from Minomats module. RadioId: " + minomat.RadioId);
          MinomatJobsManager.AddMinomat(minomat);
          this.OnRequestClose(true);
        }));
      }
    }

    public System.Windows.Input.ICommand EditMinomatCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (!this.IsMaster)
            this.IsValid = ((this.IsValid ? 1 : 0) | (string.IsNullOrEmpty(this.MasterRadioId) ? 0 : (this.SelectedCountry != null ? 1 : 0))) != 0;
          if (!this.IsValid)
            return;
          this.selectedMinomat = this._repositoryFactory.GetRepository<Minomat>().FirstOrDefault((Expression<Func<Minomat, bool>>) (x => x.Id == this.selectedMinomat.Id));
          this.selectedMinomat.RadioId = this.MasterRadioId;
          this.selectedMinomat.Provider = this.SelectedProvider;
          this.selectedMinomat.GsmId = this.GsmId;
          this.selectedMinomat.Polling = this.Polling ?? 0;
          this.selectedMinomat.HostAndPort = this.HostAndPort;
          this.selectedMinomat.Url = this.Url;
          this.selectedMinomat.IsInMasterPool = this.IsInMasterPool;
          this.selectedMinomat.SimPin = this.SimPin;
          this.selectedMinomat.AccessPoint = this.AccessPoint;
          this.selectedMinomat.UserId = this.UserId;
          this.selectedMinomat.UserPassword = this.UserPassword;
          this.selectedMinomat.SessionKey = this.SessionKey;
          this.selectedMinomat.Country = this.SelectedCountry;
          this.selectedMinomat.Scenario = this.SelectedScenario != null ? this._repositoryFactory.GetRepository<Scenario>().GetById((object) this.SelectedScenario.Id) : (Scenario) null;
          this.selectedMinomat.IsMaster = this.IsMaster;
          this.selectedMinomat.LastUpdatedBy = string.Format("{0} {1}", (object) MSS.Business.Utils.AppContext.Current.LoggedUser.FirstName, (object) MSS.Business.Utils.AppContext.Current.LoggedUser.LastName);
          this.selectedMinomat.SimCardNumber = this.SimCardNumber ?? "";
          this._repositoryFactory.GetRepository<Minomat>().Update(this.selectedMinomat);
          EventPublisher.Publish<MinomatUpdate>(new MinomatUpdate()
          {
            IsUpdate = true,
            Ids = new List<Guid>()
            {
              this.selectedMinomat.Id
            }
          }, (IViewModel) this);
          this.OnRequestClose(true);
        }));
      }
    }

    public System.Windows.Input.ICommand DeleteMinomatCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) delegate
        {
          this.selectedMinomat = this._repositoryFactory.GetRepository<Minomat>().FirstOrDefault((Expression<Func<Minomat, bool>>) (x => x.Id == this.selectedMinomat.Id));
          this.selectedMinomat.IsDeactivated = true;
          this.selectedMinomat.EndDate = new DateTime?(DateTime.Now);
          this._repositoryFactory.GetRepository<Minomat>().Update(this.selectedMinomat);
          if (this.selectedMinomat.GsmId != null && MeterListenerManager.GetMinomat(Convert.ToUInt32(this.selectedMinomat.GsmId)) != null)
            MeterListenerManager.DeleteMinomat(Convert.ToUInt32(this.selectedMinomat.GsmId));
          EventPublisher.Publish<MinomatUpdate>(new MinomatUpdate()
          {
            IsUpdate = true,
            Ids = new List<Guid>()
            {
              this.selectedMinomat.Id
            }
          }, (IViewModel) this);
          this.OnRequestClose(true);
        });
      }
    }

    public bool IsInMasterPool
    {
      get => this._isInMasterPool;
      set
      {
        this._isInMasterPool = value;
        this.OnPropertyChanged(nameof (IsInMasterPool));
      }
    }

    public bool IsMaster
    {
      get => this._isMaster;
      set
      {
        this._isMaster = value;
        this.OnPropertyChanged(nameof (IsMaster));
      }
    }

    public StatusMinomatEnum Status
    {
      get => this._status;
      set
      {
        this._status = value;
        this.OnPropertyChanged(nameof (Status));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_MASTER_RADIO_ID")]
    [Range(47100000, 48099999, ErrorMessage = "MSS_MINOMATS_RADIO_ID_BETWEEN")]
    public string MasterRadioId
    {
      get => this._masterRadioId;
      set
      {
        this._masterRadioId = value;
        this.OnPropertyChanged(nameof (MasterRadioId));
        this.GsmId = value;
      }
    }

    public DateTime? StartDate
    {
      get => this._startDate;
      set
      {
        this._startDate = value;
        this.OnPropertyChanged(nameof (StartDate));
      }
    }

    public DateTime? EndDate
    {
      get => this._endDate;
      set
      {
        this._endDate = value;
        this.OnPropertyChanged(nameof (EndDate));
      }
    }

    public Provider SelectedProvider
    {
      get => this._provider;
      set
      {
        this._provider = value;
        this.SimPin = this._provider.SimPin;
        this.AccessPoint = this._provider.AccessPoint;
        this.UserId = this._provider.UserId;
        this.UserPassword = this._provider.UserPassword;
        this.OnPropertyChanged(nameof (SelectedProvider));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_SIMPIN")]
    public string SimPin
    {
      get => this._simPin;
      set
      {
        this._simPin = value;
        this.OnPropertyChanged(nameof (SimPin));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_ACCESSPOINT")]
    public string AccessPoint
    {
      get => this._accessPoint;
      set
      {
        this._accessPoint = value;
        this.OnPropertyChanged(nameof (AccessPoint));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_USERID")]
    public string UserId
    {
      get => this._userId;
      set
      {
        this._userId = value;
        this.OnPropertyChanged(nameof (UserId));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_USERPASS")]
    public string UserPassword
    {
      get => this._userPassword;
      set
      {
        this._userPassword = value;
        this.OnPropertyChanged(nameof (UserPassword));
      }
    }

    public bool Registered
    {
      get => this._registered;
      set
      {
        this._registered = value;
        this.OnPropertyChanged(nameof (Registered));
      }
    }

    public bool NotRegistered
    {
      get => this._notRegistered;
      set
      {
        this._notRegistered = value;
        this.OnPropertyChanged(nameof (NotRegistered));
      }
    }

    public string Challenge
    {
      get => this._challenge;
      set
      {
        this._challenge = value;
        this.OnPropertyChanged(nameof (Challenge));
      }
    }

    public string GsmId
    {
      get => this._gsmId;
      set
      {
        this._gsmId = value;
        this.OnPropertyChanged(nameof (GsmId));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_POLLING_REQUIRED")]
    public int? Polling
    {
      get => this._polling;
      set
      {
        this._polling = value;
        this.OnPropertyChanged(nameof (Polling));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_HOSTANDPORT_REQUIRED")]
    public string HostAndPort
    {
      get => this._hostandPort;
      set
      {
        this._hostandPort = value;
        this.OnPropertyChanged(nameof (HostAndPort));
      }
    }

    public string Url
    {
      get => this._url;
      set
      {
        this._url = value;
        this.OnPropertyChanged(nameof (Url));
      }
    }

    public DateTime? DateAppended
    {
      get => this._dateAppended;
      set
      {
        this._dateAppended = value;
        this.OnPropertyChanged(nameof (DateAppended));
      }
    }

    public string AppendedBy
    {
      get => this._appendedBy;
      set
      {
        this._appendedBy = value;
        this.OnPropertyChanged(nameof (AppendedBy));
      }
    }

    public string SessionKey
    {
      get => this._sessionKey;
      set
      {
        this._sessionKey = value;
        this.OnPropertyChanged(nameof (SessionKey));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_COUNTRY_REQUIRED")]
    public Country SelectedCountry
    {
      get => this._selectedCountry;
      set
      {
        this._selectedCountry = value;
        this.OnPropertyChanged(nameof (SelectedCountry));
      }
    }

    public string SimCardNumber
    {
      get => this._simCardNumber;
      set
      {
        this._simCardNumber = value;
        this.OnPropertyChanged(nameof (SimCardNumber));
      }
    }

    public RadObservableCollection<Country> GetListofCountries
    {
      get
      {
        RadObservableCollection<Country> getListofCountries = new RadObservableCollection<Country>();
        IOrderedEnumerable<Country> orderedEnumerable = this._repositoryFactory.GetRepository<Country>().GetAll().OrderBy<Country, string>((Func<Country, string>) (c => c.Name));
        if (orderedEnumerable.Any<Country>())
          getListofCountries = new RadObservableCollection<Country>((IEnumerable<Country>) orderedEnumerable);
        return getListofCountries;
      }
    }

    public bool IsMinomatScenarioEditable
    {
      get => this._minomatScenarioEditable;
      set
      {
        this._minomatScenarioEditable = value;
        this.OnPropertyChanged(nameof (IsMinomatScenarioEditable));
      }
    }

    public ScenarioDTO SelectedScenario
    {
      get => this._selectedScenario;
      set
      {
        this._selectedScenario = value;
        this.OnPropertyChanged(nameof (SelectedScenario));
      }
    }

    public RadObservableCollection<ScenarioDTO> GetListofScenarios
    {
      get
      {
        RadObservableCollection<ScenarioDTO> observableCollection = new RadObservableCollection<ScenarioDTO>();
        if (this._scenarioList.Count == 0)
          this._scenarioList.AddRange(new JobsManager(this._repositoryFactory).GetScenarioDTOs());
        return new RadObservableCollection<ScenarioDTO>((IEnumerable<ScenarioDTO>) this._scenarioList);
      }
    }

    public bool MasterPoolAddVisibility
    {
      get => this._masterPoolAddVisibility;
      set
      {
        this._masterPoolAddVisibility = value;
        this.OnPropertyChanged(nameof (MasterPoolAddVisibility));
      }
    }

    public override List<string> ValidateProperty(string propertyName)
    {
      string propertyName1 = this.GetPropertyName<string>((Expression<Func<string>>) (() => this.MasterRadioId));
      string propertyName2 = this.GetPropertyName<string>((Expression<Func<string>>) (() => this.SimCardNumber));
      if (propertyName == propertyName1)
      {
        ICollection<string> validationErrors;
        this.ValidateMasterRadioId(this.MasterRadioId, out validationErrors);
        this.IsValid &= validationErrors.Count <= 0;
        return validationErrors.ToList<string>();
      }
      if (!(propertyName == propertyName2) || string.IsNullOrEmpty(this._simCardNumber))
        return new List<string>();
      ICollection<string> validationErrors1;
      this.ValidateSimCardNumber(this._simCardNumber, out validationErrors1);
      if (validationErrors1.Count > 0)
        this.IsValid = false;
      return validationErrors1.ToList<string>();
    }

    public bool ValidateMasterRadioId(
      string masterRadioId,
      out ICollection<string> validationErrors)
    {
      validationErrors = (ICollection<string>) new List<string>();
      IList<Minomat> source = this._repositoryFactory.GetRepository<Minomat>().SearchFor((Expression<Func<Minomat, bool>>) (x => x.RadioId == masterRadioId && x.IsDeactivated == false));
      if (this.selectedMinomat == null && source.Any<Minomat>())
        validationErrors.Add(Resources.MSS_MINOMAT_RADIO_ID_NOT_UNIQUE);
      else if (source.Any<Minomat>() && source.FirstOrDefault<Minomat>((Func<Minomat, bool>) (x => x.RadioId != null && x.RadioId != this.selectedMinomat.RadioId)) != null)
        validationErrors.Add(Resources.MSS_MINOMAT_RADIO_ID_NOT_UNIQUE);
      return validationErrors.Count == 0;
    }

    public bool ValidateSimCardNumber(
      string simCardNumber,
      out ICollection<string> validationErrors)
    {
      validationErrors = (ICollection<string>) new List<string>();
      if (!string.IsNullOrEmpty(simCardNumber) && simCardNumber.Length != 30)
        validationErrors.Add(Resources.MSS_MinomatMaster_SimCardNumber_TooFewDigits);
      return validationErrors.Count == 0;
    }
  }
}


--- DeleteDataCollectorViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.DeleteDataCollectorViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.DTO.Minomat;
using MSS.Interfaces;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class DeleteDataCollectorViewModel : EditDataCollectorViewModel
  {
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly MinomatDTO _minomat;

    public DeleteDataCollectorViewModel(IRepositoryFactory repositoryFactory, MinomatDTO minomat)
      : base(repositoryFactory, minomat)
    {
      this._repositoryFactory = repositoryFactory;
      this._minomat = minomat;
    }
  }
}


--- EditDataCollectorViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.EditDataCollectorViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.UsersManagement;
using MSS.DTO.Minomat;
using MSS.DTO.Structures;
using MSS.Interfaces;
using System;
using System.Linq;
using System.Linq.Expressions;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class EditDataCollectorViewModel : DataCollectorViewModelBase
  {
    private IRepositoryFactory _repositoryFactory;

    public EditDataCollectorViewModel(IRepositoryFactory repositoryFactory, MinomatDTO minomat)
      : base(repositoryFactory)
    {
      Mapper.CreateMap<MSS.Core.Model.DataCollectors.Minomat, MinomatDTO>();
      Mapper.CreateMap<MinomatDTO, MSS.Core.Model.DataCollectors.Minomat>();
      this.IsInMasterPool = minomat.IsInMasterPool;
      this.selectedMinomat = Mapper.Map<MinomatDTO, MSS.Core.Model.DataCollectors.Minomat>(minomat);
      this._repositoryFactory = repositoryFactory;
      this.MasterRadioId = minomat.RadioId;
      this.StartDate = minomat.StartDate;
      this.EndDate = minomat.EndDate;
      if (minomat.Provider != null)
      {
        Provider byId = this._repositoryFactory.GetRepository<Provider>().GetById((object) minomat.Provider.Id);
        if (byId != null)
          this.SelectedProvider = byId;
      }
      this.Status = (StatusMinomatEnum) Enum.ToObject(typeof (StatusMinomatEnum), minomat.idEnumStatus);
      this.Registered = minomat.Registered;
      this.NotRegistered = !minomat.Registered;
      this.Challenge = minomat.Challenge;
      this.GsmId = minomat.GsmId;
      this.Polling = new int?(minomat.Polling);
      this.HostAndPort = minomat.HostAndPort;
      this.Url = minomat.Url;
      this.DateAppended = minomat.CreatedOn;
      Guid createBy;
      if (Guid.TryParse(minomat.CreatedBy, out createBy))
      {
        User user = this._repositoryFactory.GetRepository<User>().FirstOrDefault((Expression<Func<User, bool>>) (x => x.Id == createBy));
        if (user != null)
          this.AppendedBy = string.Format("{0} {1}", (object) user.FirstName, (object) user.LastName);
      }
      else
        this.AppendedBy = minomat.CreatedBy;
      this.IsInMasterPool = minomat.IsInMasterPool;
      this.IsMaster = minomat.IsMaster;
      this.SimPin = minomat.SimPin;
      this.AccessPoint = minomat.AccessPoint;
      this.UserId = minomat.UserId;
      this.UserPassword = minomat.UserPassword;
      this.SessionKey = minomat.SessionKey;
      this.SelectedCountry = minomat.Country != null ? this._repositoryFactory.GetRepository<Country>().GetById((object) minomat.Country.Id) : (Country) null;
      this.SelectedScenario = minomat.Scenario != null ? this.GetListofScenarios.FirstOrDefault<ScenarioDTO>((Func<ScenarioDTO, bool>) (x => x.Id == minomat.Scenario.Id)) : (ScenarioDTO) null;
      this.SimCardNumber = minomat.SimCardNumber;
    }
  }
}


--- MasterPoolViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.MasterPoolViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.Events;
using MSS.Core.Model.Orders;
using MSS.DTO.Minomat;
using MSS.Interfaces;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate.Linq;
using Ninject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;
using Telerik.Windows.Data;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class MasterPoolViewModel : ViewModelBase
  {
    private IRepositoryFactory _repositoryFactory;

    [Inject]
    public MasterPoolViewModel(IRepositoryFactory repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
      Mapper.CreateMap<MSS.Core.Model.DataCollectors.Minomat, MinomatDTO>();
      Mapper.CreateMap<MinomatDTO, MSS.Core.Model.DataCollectors.Minomat>().ForMember((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, object>>) (x => x.Provider), (Action<IMemberConfigurationExpression<MinomatDTO>>) (y => y.Ignore()));
    }

    public RadObservableCollection<MinomatDTO> GetDataCollectors
    {
      get
      {
        RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat> source = new RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>();
        IList<MSS.Core.Model.DataCollectors.Minomat> minomatList = this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().SearchFor((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (x => !x.IsDeactivated && !x.IsInMasterPool && x.Status == StatusOrderEnum.New.ToString()));
        if (minomatList.Any<MSS.Core.Model.DataCollectors.Minomat>())
          source = new RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>((IEnumerable<MSS.Core.Model.DataCollectors.Minomat>) minomatList);
        return Mapper.Map<RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>, RadObservableCollection<MinomatDTO>>(source);
      }
    }

    public RadObservableCollection<MinomatDTO> GetDataCollectorsMaster
    {
      get
      {
        RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat> source = new RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>();
        IList<MSS.Core.Model.DataCollectors.Minomat> minomatList = this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().SearchFor((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (x => !x.IsDeactivated && x.IsInMasterPool && x.Status == StatusOrderEnum.New.ToString()));
        if (minomatList.Any<MSS.Core.Model.DataCollectors.Minomat>())
          source = new RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>((IEnumerable<MSS.Core.Model.DataCollectors.Minomat>) minomatList);
        return Mapper.Map<RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>, RadObservableCollection<MinomatDTO>>(source);
      }
    }

    public ICommand AddToPoolCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (SelectedItems => this.UpdateMasterPool((IEnumerable<MinomatDTO>) ((IEnumerable<object>) SelectedItems).ToList<object>().Cast<MinomatDTO>().ToList<MinomatDTO>(), true)));
      }
    }

    public ICommand RemoveFromPoolCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (SelectedItems => this.UpdateMasterPool((IEnumerable<MinomatDTO>) ((IEnumerable<object>) SelectedItems).ToList<object>().Cast<MinomatDTO>().ToList<MinomatDTO>(), false)));
      }
    }

    private void UpdateMasterPool(IEnumerable<MinomatDTO> minoListDTO, bool isInMasterPool)
    {
      List<Guid> ids = minoListDTO.Select<MinomatDTO, Guid>((Func<MinomatDTO, Guid>) (m => m.Id)).ToList<Guid>();
      TypeHelperExtensionMethods.ForEach<MSS.Core.Model.DataCollectors.Minomat>((IEnumerable<MSS.Core.Model.DataCollectors.Minomat>) this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().SearchFor((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (m => ids.Contains(m.Id))), (Action<MSS.Core.Model.DataCollectors.Minomat>) (m =>
      {
        if (m.IsInMasterPool == isInMasterPool)
          return;
        m.IsInMasterPool = isInMasterPool;
        this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().Update(m);
      }));
      EventPublisher.Publish<MinomatUpdate>(new MinomatUpdate()
      {
        IsUpdate = true,
        Ids = ids
      }, (IViewModel) this);
      this.OnRequestClose(true);
    }
  }
}


--- MasterPoolViewModelBase.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.MasterPoolViewModelBase
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.Events;
using MSS.Core.Model.Orders;
using MSS.DTO.Minomat;
using MSS.Interfaces;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate.Linq;
using Ninject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;
using Telerik.Windows.Data;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class MasterPoolViewModelBase : ViewModelBase
  {
    internal IRepositoryFactory _repositoryFactory;

    [Inject]
    public MasterPoolViewModelBase(IRepositoryFactory repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
      Mapper.CreateMap<MSS.Core.Model.DataCollectors.Minomat, MinomatDTO>();
      Mapper.CreateMap<MinomatDTO, MSS.Core.Model.DataCollectors.Minomat>().ForMember((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, object>>) (x => x.Provider), (Action<IMemberConfigurationExpression<MinomatDTO>>) (y => y.Ignore()));
    }

    public RadObservableCollection<MinomatDTO> GetDataCollectors
    {
      get
      {
        RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat> source = new RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>();
        IList<MSS.Core.Model.DataCollectors.Minomat> minomatList = this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().SearchFor((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (x => !x.IsDeactivated && !x.IsInMasterPool && x.Status == StatusOrderEnum.New.ToString()));
        if (minomatList.Any<MSS.Core.Model.DataCollectors.Minomat>())
          source = new RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>((IEnumerable<MSS.Core.Model.DataCollectors.Minomat>) minomatList);
        return Mapper.Map<RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>, RadObservableCollection<MinomatDTO>>(source);
      }
    }

    public RadObservableCollection<MinomatDTO> GetDataCollectorsMaster
    {
      get
      {
        RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat> source = new RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>();
        IList<MSS.Core.Model.DataCollectors.Minomat> minomatList = this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().SearchFor((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (x => !x.IsDeactivated && x.IsInMasterPool && x.Status == StatusOrderEnum.New.ToString()));
        if (minomatList.Any<MSS.Core.Model.DataCollectors.Minomat>())
          source = new RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>((IEnumerable<MSS.Core.Model.DataCollectors.Minomat>) minomatList);
        return Mapper.Map<RadObservableCollection<MSS.Core.Model.DataCollectors.Minomat>, RadObservableCollection<MinomatDTO>>(source);
      }
    }

    public ICommand AddToPoolCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (SelectedItems => this.UpdateMasterPool((IEnumerable<MinomatDTO>) ((IEnumerable<object>) SelectedItems).ToList<object>().Cast<MinomatDTO>().ToList<MinomatDTO>(), true)));
      }
    }

    public ICommand RemoveFromPoolCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (SelectedItems => this.UpdateMasterPool((IEnumerable<MinomatDTO>) ((IEnumerable<object>) SelectedItems).ToList<object>().Cast<MinomatDTO>().ToList<MinomatDTO>(), false)));
      }
    }

    private void UpdateMasterPool(IEnumerable<MinomatDTO> minoListDTO, bool isInMasterPool)
    {
      List<Guid> ids = minoListDTO.Select<MinomatDTO, Guid>((Func<MinomatDTO, Guid>) (m => m.Id)).ToList<Guid>();
      TypeHelperExtensionMethods.ForEach<MSS.Core.Model.DataCollectors.Minomat>((IEnumerable<MSS.Core.Model.DataCollectors.Minomat>) this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().SearchFor((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (m => ids.Contains(m.Id))), (Action<MSS.Core.Model.DataCollectors.Minomat>) (m =>
      {
        if (m.IsInMasterPool == isInMasterPool)
          return;
        m.IsInMasterPool = isInMasterPool;
        this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().Update(m);
      }));
      EventPublisher.Publish<MinomatUpdate>(new MinomatUpdate()
      {
        IsUpdate = true,
        Ids = ids
      }, (IViewModel) this);
      this.OnRequestClose(true);
    }
  }
}


--- RemoveFromMasterPoolViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.RemoveFromMasterPoolViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Interfaces;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class RemoveFromMasterPoolViewModel : MasterPoolViewModelBase
  {
    public RemoveFromMasterPoolViewModel(IRepositoryFactory repositoryFactory)
      : base(repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
    }
  }
}


--- StructureMinomatViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataCollectors.StructureMinomatViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Modules.OrdersManagement;
using MSS.Core.Model.Structures;
using MSS.DTO.Minomat;
using MSS.Interfaces;
using MVVM.ViewModel;
using Ninject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Media;

#nullable disable
namespace MSS_Client.ViewModel.DataCollectors
{
  public class StructureMinomatViewModel : ValidationViewModelBase
  {
    private readonly IRepositoryFactory _repositoryFactory;

    [Inject]
    public StructureMinomatViewModel(MinomatDTO minomat, IRepositoryFactory repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
      StructureNode structureNode = this._repositoryFactory.GetRepository<StructureNode>().FirstOrDefault((Expression<Func<StructureNode, bool>>) (x => x.EntityId == minomat.Id));
      if (structureNode == null)
        return;
      this.StructureNodeCollection = OrdersHelper.GetStructureNodeDTOForRootNode(this._repositoryFactory.GetRepository<StructureNodeLinks>().FirstOrDefault((Expression<Func<StructureNodeLinks, bool>>) (x => x.Node.Id == structureNode.Id)).RootNode.Id, this._repositoryFactory.GetRepository<StructureNodeLinks>(), this._repositoryFactory.GetRepository<StructureNode>(), this._repositoryFactory.GetRepository<StructureNodeType>(), this._repositoryFactory.GetSession());
      this.StructureNodeCollection.First<StructureNodeDTO>().SubNodes.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (x => x.Id == structureNode.Id)).BackgroundColor = (Brush) Brushes.LightGreen;
    }

    public IEnumerable<StructureNodeDTO> StructureNodeCollection { get; set; }
  }
}

