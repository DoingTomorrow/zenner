
--- AddFilterViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataFilters.AddFilterViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Modules.DataFilterManagement;
using MSS.Core.Model.DataFilters;
using MSS.Interfaces;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using System;
using System.Windows.Input;
using System.Windows.Media;

#nullable disable
namespace MSS_Client.ViewModel.DataFilters
{
  internal class AddFilterViewModel : ViewModelBase
  {
    private readonly ISession _nhSession;
    private readonly IRepository<MSS.Core.Model.DataFilters.Filter> _filterRepository;
    private readonly IRepository<Rules> _ruleRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private string _nameTextValue = string.Empty;
    private string _descriptionTextValue = string.Empty;
    private Brush _nameBrushValue = (Brush) Brushes.LightGray;

    [Inject]
    public AddFilterViewModel(IRepositoryFactory repositoryFactory)
    {
      this._nhSession = repositoryFactory.GetSession();
      this._repositoryFactory = repositoryFactory;
      this._filterRepository = repositoryFactory.GetRepository<MSS.Core.Model.DataFilters.Filter>();
      this._ruleRepository = repositoryFactory.GetRepository<Rules>();
    }

    public Brush NameBrushValue
    {
      get => this._nameBrushValue;
      set
      {
        this._nameBrushValue = value;
        this.OnPropertyChanged(nameof (NameBrushValue));
      }
    }

    public string NameTextValue
    {
      get => this._nameTextValue;
      set => this._nameTextValue = value;
    }

    public string DescriptionTextValue
    {
      get => this._descriptionTextValue;
      set => this._descriptionTextValue = value;
    }

    public ICommand AddFilterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          if (this.NameTextValue != string.Empty)
          {
            MSS.Core.Model.DataFilters.Filter filter = new MSS.Core.Model.DataFilters.Filter()
            {
              Name = this._nameTextValue,
              Description = this._descriptionTextValue
            };
            this.GetFilterManagerInstance().CreateFilter(filter);
            this.OnRequestClose(true);
          }
          else
            this.NameBrushValue = (Brush) Brushes.Red;
        }));
      }
    }

    private FilterManager GetFilterManagerInstance() => new FilterManager(this._repositoryFactory);
  }
}


--- AddRuleViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataFilters.AddRuleViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Modules.DataFilterManagement;
using MSS.Business.Modules.GMM;
using MSS.Core.Model.DataFilters;
using MSS.Interfaces;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Windows.Input;
using ZR_ClassLibrary;

#nullable disable
namespace MSS_Client.ViewModel.DataFilters
{
  internal class AddRuleViewModel : ViewModelBase
  {
    private readonly ISession _nhSession;
    private readonly IRepository<MSS.Core.Model.DataFilters.Filter> _filterRepository;
    private readonly IRepository<Rules> _ruleRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private ValueIdent.ValueIdPart_PhysicalQuantity _physicalQuantity = ValueIdent.ValueIdPart_PhysicalQuantity.Any;
    private ValueIdent.ValueIdPart_MeterType _meterType = ValueIdent.ValueIdPart_MeterType.Any;
    private ValueIdent.ValueIdPart_Calculation _calculation = ValueIdent.ValueIdPart_Calculation.Any;
    private ValueIdent.ValueIdPart_CalculationStart _calculationStart = ValueIdent.ValueIdPart_CalculationStart.Any;
    private ValueIdent.ValueIdPart_StorageInterval _storageInterval = ValueIdent.ValueIdPart_StorageInterval.Any;
    private ValueIdent.ValueIdPart_Creation _creation = ValueIdent.ValueIdPart_Creation.Any;
    private string _valueIdentifier;
    private readonly MSS.Core.Model.DataFilters.Filter _parentFilter;
    private int _ruleIndex;

    [Inject]
    public AddRuleViewModel(MSS.Core.Model.DataFilters.Filter filter, IRepositoryFactory repositoryFactory)
    {
      this._parentFilter = filter;
      this._nhSession = repositoryFactory.GetSession();
      this._repositoryFactory = repositoryFactory;
      this._filterRepository = repositoryFactory.GetRepository<MSS.Core.Model.DataFilters.Filter>();
      this._ruleRepository = repositoryFactory.GetRepository<Rules>();
    }

    public IEnumerable<string> PhysicalQuantitiesEnumerable
    {
      get => ValueIdentHelper.GetPhysicalQuantitiesEnumerable();
    }

    public IEnumerable<string> MeterTypeEnumerable => ValueIdentHelper.GetMeterTypeEnumerable();

    public IEnumerable<string> CalculationEnumerable => ValueIdentHelper.GetCalculationEnumerable();

    public IEnumerable<string> CalculationStartEnumerable
    {
      get => ValueIdentHelper.GetCalculationStartEnumerable();
    }

    public IEnumerable<string> StorageIntervalEnumerable
    {
      get => ValueIdentHelper.GetStorageIntervalEnumerable();
    }

    public IEnumerable<string> CreationEnumerable => ValueIdentHelper.GetCreationEnumerable();

    public ValueIdent.ValueIdPart_PhysicalQuantity PhysicalQuantity
    {
      get => this._physicalQuantity;
      set
      {
        this._physicalQuantity = value;
        this._valueIdentifier = this.GetValueId();
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public string GetValueId()
    {
      return ((long) (this.PhysicalQuantity + (long) this.MeterType + (long) this.Calculation + (long) this.CalculationStart + (long) this.StorageInterval + (long) this.Creation + (long) this._ruleIndex * 2147483648L)).ToString((IFormatProvider) CultureInfo.InvariantCulture);
    }

    public ValueIdent.ValueIdPart_MeterType MeterType
    {
      get => this._meterType;
      set
      {
        this._meterType = value;
        this._valueIdentifier = this.GetValueId();
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ValueIdent.ValueIdPart_Calculation Calculation
    {
      get => this._calculation;
      set
      {
        this._calculation = value;
        this._valueIdentifier = this.GetValueId();
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ValueIdent.ValueIdPart_CalculationStart CalculationStart
    {
      get => this._calculationStart;
      set
      {
        this._calculationStart = value;
        this._valueIdentifier = this.GetValueId();
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ValueIdent.ValueIdPart_StorageInterval StorageInterval
    {
      get => this._storageInterval;
      set
      {
        this._storageInterval = value;
        this._valueIdentifier = this.GetValueId();
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ValueIdent.ValueIdPart_Creation Creation
    {
      get => this._creation;
      set
      {
        this._creation = value;
        this._valueIdentifier = this.GetValueId();
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public string ValueIdentifier
    {
      get => this._valueIdentifier;
      set => this._valueIdentifier = value;
    }

    public int RuleIndex
    {
      get => this._ruleIndex;
      set
      {
        this._ruleIndex = value;
        this._valueIdentifier = this.GetValueId();
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ICommand AddRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          Rules newRule = new Rules()
          {
            MeterType = this.MeterType,
            Calculation = this.Calculation,
            CalculationStart = this.CalculationStart,
            Creation = this.Creation,
            Filter = this._parentFilter,
            PhysicalQuantity = this.PhysicalQuantity,
            StorageInterval = this.StorageInterval,
            RuleIndex = this.RuleIndex,
            ValueId = this.GetValueId()
          };
          this.GetFilterManagerInstance().CreateRule(newRule);
          this.OnRequestClose(true);
        }));
      }
    }

    private FilterManager GetFilterManagerInstance() => new FilterManager(this._repositoryFactory);
  }
}


--- FilterViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataFilters.FilterViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Events;
using MSS.Core.Model.DataFilters;
using MSS.DIConfiguration;
using MSS.Interfaces;
using MSS.Localisation;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.DataFilters
{
  public class FilterViewModel : ViewModelBase
  {
    private readonly ISession _nhSession;
    private readonly IRepository<MSS.Core.Model.DataFilters.Filter> _filterRepository;
    private readonly IRepository<Rules> _ruleRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly IWindowFactory _windowFactory;
    private ViewModelBase _messageUserControl;
    private MSS.Core.Model.DataFilters.Filter _selectedFilter;
    private IEnumerable<MSS.Core.Model.DataFilters.Filter> _getFilters;
    private IEnumerable<Rules> _getRules;
    private string _pageSize = string.Empty;

    [Inject]
    public FilterViewModel(
      IRepositoryFactory repositoryFactory,
      IEnumerable<MSS.Core.Model.DataFilters.Filter> getRules,
      IWindowFactory windowFactory)
    {
      this._nhSession = repositoryFactory.GetSession();
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._filterRepository = repositoryFactory.GetRepository<MSS.Core.Model.DataFilters.Filter>();
      this._ruleRepository = repositoryFactory.GetRepository<Rules>();
      this._getFilters = (IEnumerable<MSS.Core.Model.DataFilters.Filter>) this._filterRepository.GetAll();
      this.PageSize = MSS.Business.Utils.AppContext.Current.GetParameterValue<string>(nameof (PageSize));
    }

    public MSS.Core.Model.DataFilters.Filter SelectedFilter
    {
      get => this._selectedFilter;
      set
      {
        this._selectedFilter = value;
        this._getRules = (IEnumerable<Rules>) this._ruleRepository.SearchFor((Expression<Func<Rules, bool>>) (x => x.Filter == this._selectedFilter));
        this.OnPropertyChanged("GetRules");
      }
    }

    public IEnumerable<MSS.Core.Model.DataFilters.Filter> GetFilters => this._getFilters;

    public IEnumerable<Rules> GetRules => this._getRules;

    public ICommand CreateFilterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<AddFilterViewModel>());
          this.MessageUserControl = !newModalDialog.HasValue || !newModalDialog.Value ? MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage) : MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
          this._getFilters = (IEnumerable<MSS.Core.Model.DataFilters.Filter>) this._filterRepository.GetAll();
          this.OnPropertyChanged("GetFilters");
        }));
      }
    }

    public ICommand UpdateFilterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          MSS.Core.Model.DataFilters.Filter filter = parameter as MSS.Core.Model.DataFilters.Filter;
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<UpdateFilterViewModel>((IParameter) new ConstructorArgument("filter", (object) filter)));
          if (newModalDialog.HasValue && newModalDialog.Value)
          {
            this._filterRepository.Refresh((object) filter.Id);
            this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          this._getFilters = (IEnumerable<MSS.Core.Model.DataFilters.Filter>) this._filterRepository.GetAll();
          this.OnPropertyChanged("GetFilters");
        }));
      }
    }

    public ICommand RemoveFilterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          MSS.Core.Model.DataFilters.Filter filter = parameter as MSS.Core.Model.DataFilters.Filter;
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<RemoveFilterViewModel>((IParameter) new ConstructorArgument("filter", (object) filter)));
          this.MessageUserControl = !newModalDialog.HasValue || !newModalDialog.Value ? MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage) : MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
          this._getFilters = (IEnumerable<MSS.Core.Model.DataFilters.Filter>) this._filterRepository.GetAll();
          this.OnPropertyChanged("GetFilters");
        }));
      }
    }

    public ICommand CreateRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          MSS.Core.Model.DataFilters.Filter filter = parameter as MSS.Core.Model.DataFilters.Filter;
          if (filter == null)
            return;
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<AddRuleViewModel>((IParameter) new ConstructorArgument("filter", (object) filter)));
          this.MessageUserControl = !newModalDialog.HasValue || !newModalDialog.Value ? MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage) : MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
          this._getRules = (IEnumerable<Rules>) this._ruleRepository.SearchFor((Expression<Func<Rules, bool>>) (x => x.Filter == filter));
          this.OnPropertyChanged("GetRules");
        }));
      }
    }

    public ICommand UpdateRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          Rules rules = parameter as Rules;
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<UpdateRuleViewModel>((IParameter) new ConstructorArgument("rule", (object) rules), (IParameter) new ConstructorArgument("isManualDelete", (object) false)));
          if (newModalDialog.HasValue && newModalDialog.Value)
          {
            this._ruleRepository.Refresh((object) rules.Id);
            this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          this._getRules = (IEnumerable<Rules>) this._ruleRepository.SearchFor((Expression<Func<Rules, bool>>) (x => x.Filter == this._selectedFilter));
          this.OnPropertyChanged("GetRules");
        }));
      }
    }

    public ICommand RemoveRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          Rules rules = parameter as Rules;
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<RemoveRuleViewModel>((IParameter) new ConstructorArgument("rule", (object) rules), (IParameter) new ConstructorArgument("isManualDelete", (object) false)));
          this.MessageUserControl = !newModalDialog.HasValue || !newModalDialog.Value ? MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage) : MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
          this._getRules = (IEnumerable<Rules>) this._ruleRepository.SearchFor((Expression<Func<Rules, bool>>) (x => x.Filter == this._selectedFilter));
          this.OnPropertyChanged("GetRules");
        }));
      }
    }

    public ICommand CloseWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          this.OnRequestClose(true);
          EventPublisher.Publish<RefreshFilters>(new RefreshFilters()
          {
            isRefresh = true
          }, (IViewModel) this);
        }));
      }
    }

    public string PageSize
    {
      get => this._pageSize;
      set
      {
        this._pageSize = value;
        this.OnPropertyChanged(nameof (PageSize));
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }
  }
}


--- RemoveFilterViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataFilters.RemoveFilterViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Modules.DataFilterManagement;
using MSS.Core.Model.DataFilters;
using MSS.Core.Model.Jobs;
using MSS.Core.Model.Orders;
using MSS.DIConfiguration;
using MSS.Interfaces;
using MSS.Localisation;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using Ninject.Parameters;
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.DataFilters
{
  internal class RemoveFilterViewModel : ViewModelBase
  {
    private readonly ISession _nhSession;
    private readonly IRepository<MSS.Core.Model.DataFilters.Filter> _filterRepository;
    private readonly IRepository<Rules> _ruleRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly MSS.Core.Model.DataFilters.Filter _filter;
    private readonly IWindowFactory _windowFactory;

    [Inject]
    public RemoveFilterViewModel(
      IRepositoryFactory repositoryFactory,
      MSS.Core.Model.DataFilters.Filter filter,
      IWindowFactory windowFactory)
    {
      this._nhSession = repositoryFactory.GetSession();
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._filterRepository = repositoryFactory.GetRepository<MSS.Core.Model.DataFilters.Filter>();
      this._ruleRepository = repositoryFactory.GetRepository<Rules>();
      this._filter = filter;
      this.ConfirmFilterDeleteDialog = string.Format(Resources.MSS_Client_DataFilters_RemoveFilterDialogConfirmation, (object) filter.Name);
    }

    public string ConfirmFilterDeleteDialog { get; set; }

    public ICommand RemoveFilterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          int num;
          if (!this._repositoryFactory.GetRepository<Order>().SearchFor((Expression<Func<Order, bool>>) (item => item.Filter.Id == this._filter.Id)).Any<Order>())
            num = this._repositoryFactory.GetRepository<JobDefinition>().SearchFor((Expression<Func<JobDefinition, bool>>) (item => item.Filter.Id == this._filter.Id)).Any<JobDefinition>() ? 1 : 0;
          else
            num = 1;
          if (num != 0)
            this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_Warning_Title), (IParameter) new ConstructorArgument("message", (object) Resources.MSS_FilterUsedByAnotherModule), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) false)));
          else
            this.GetFilterManagerInstance().RemoveFilter(this._filter.Id);
          this.OnRequestClose(true);
        }));
      }
    }

    private FilterManager GetFilterManagerInstance() => new FilterManager(this._repositoryFactory);
  }
}


--- RemoveRuleViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataFilters.RemoveRuleViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Modules.DataFilterManagement;
using MSS.Core.Model.DataFilters;
using MSS.Interfaces;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using System;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.DataFilters
{
  internal class RemoveRuleViewModel : ViewModelBase
  {
    private readonly ISession _nhSession;
    private readonly IRepository<MSS.Core.Model.DataFilters.Filter> _filterRepository;
    private readonly IRepository<Rules> _ruleRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly Rules _rule;
    private bool _isManualDelete;

    [Inject]
    public RemoveRuleViewModel(
      IRepositoryFactory repositoryFactory,
      Rules rule,
      bool isManualDelete)
    {
      this._nhSession = repositoryFactory.GetSession();
      this._repositoryFactory = repositoryFactory;
      this._filterRepository = repositoryFactory.GetRepository<MSS.Core.Model.DataFilters.Filter>();
      this._ruleRepository = repositoryFactory.GetRepository<Rules>();
      this._rule = rule;
      this._isManualDelete = isManualDelete;
    }

    public ICommand RemoveRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          if (!this._isManualDelete)
            this.GetFilterManagerInstance().RemoveRule(this._rule.Id);
          this.OnRequestClose(true);
        }));
      }
    }

    private FilterManager GetFilterManagerInstance() => new FilterManager(this._repositoryFactory);
  }
}


--- UpdateFilterViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataFilters.UpdateFilterViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Modules.DataFilterManagement;
using MSS.Core.Model.DataFilters;
using MSS.Interfaces;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using System;
using System.Windows.Input;
using System.Windows.Media;

#nullable disable
namespace MSS_Client.ViewModel.DataFilters
{
  internal class UpdateFilterViewModel : ViewModelBase
  {
    private readonly ISession _nhSession;
    private readonly IRepository<MSS.Core.Model.DataFilters.Filter> _filterRepository;
    private readonly IRepository<Rules> _ruleRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private string _nameTextValue = string.Empty;
    private string _descriptionTextValue = string.Empty;
    private MSS.Core.Model.DataFilters.Filter _filter;
    private Brush _nameBrushValue = (Brush) Brushes.LightGray;

    [Inject]
    public UpdateFilterViewModel(IRepositoryFactory repositoryFactory, MSS.Core.Model.DataFilters.Filter filter)
    {
      this._nhSession = repositoryFactory.GetSession();
      this._repositoryFactory = repositoryFactory;
      this._filter = filter;
      this._nameTextValue = filter.Name;
      this._descriptionTextValue = filter.Description;
      this._filterRepository = repositoryFactory.GetRepository<MSS.Core.Model.DataFilters.Filter>();
      this._ruleRepository = repositoryFactory.GetRepository<Rules>();
    }

    public Brush NameBrushValue
    {
      get => this._nameBrushValue;
      set
      {
        this._nameBrushValue = value;
        this.OnPropertyChanged(nameof (NameBrushValue));
      }
    }

    public string NameTextValue
    {
      get => this._nameTextValue;
      set => this._nameTextValue = value;
    }

    public string DescriptionTextValue
    {
      get => this._descriptionTextValue;
      set => this._descriptionTextValue = value;
    }

    public ICommand UpdateFilterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          if (this.NameTextValue != string.Empty)
          {
            MSS.Core.Model.DataFilters.Filter filter = new MSS.Core.Model.DataFilters.Filter()
            {
              Id = this._filter.Id,
              Name = this._nameTextValue,
              Description = this._descriptionTextValue
            };
            this.GetFilterManagerInstance().UpdateFilter(filter);
            this.OnRequestClose(true);
          }
          else
            this.NameBrushValue = (Brush) Brushes.Red;
        }));
      }
    }

    private FilterManager GetFilterManagerInstance() => new FilterManager(this._repositoryFactory);
  }
}


--- UpdateRuleViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.DataFilters.UpdateRuleViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Modules.DataFilterManagement;
using MSS.Business.Modules.GMM;
using MSS.Core.Model.DataFilters;
using MSS.Interfaces;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using System;
using System.Collections.Generic;
using System.Windows.Input;
using ZR_ClassLibrary;

#nullable disable
namespace MSS_Client.ViewModel.DataFilters
{
  internal class UpdateRuleViewModel : ViewModelBase
  {
    private readonly ISession _nhSession;
    private readonly IRepository<MSS.Core.Model.DataFilters.Filter> _filterRepository;
    private readonly IRepository<Rules> _ruleRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private ValueIdent.ValueIdPart_PhysicalQuantity _physicalQuantity = ValueIdent.ValueIdPart_PhysicalQuantity.Any;
    private ValueIdent.ValueIdPart_MeterType _meterType = ValueIdent.ValueIdPart_MeterType.Any;
    private ValueIdent.ValueIdPart_Calculation _calculation = ValueIdent.ValueIdPart_Calculation.Any;
    private ValueIdent.ValueIdPart_CalculationStart _calculationStart = ValueIdent.ValueIdPart_CalculationStart.Any;
    private ValueIdent.ValueIdPart_StorageInterval _storageInterval = ValueIdent.ValueIdPart_StorageInterval.Any;
    private ValueIdent.ValueIdPart_Creation _creation = ValueIdent.ValueIdPart_Creation.Any;
    private string _valueIdentifier;
    private readonly Rules _rule;
    private int _ruleIndex;

    [Inject]
    public UpdateRuleViewModel(Rules rule, IRepositoryFactory repositoryFactory)
    {
      this._rule = rule;
      this._repositoryFactory = repositoryFactory;
      this._nhSession = repositoryFactory.GetSession();
      this._filterRepository = repositoryFactory.GetRepository<MSS.Core.Model.DataFilters.Filter>();
      this._ruleRepository = repositoryFactory.GetRepository<Rules>();
      this.PhysicalQuantity = rule.PhysicalQuantity;
      this.MeterType = rule.MeterType;
      this.Calculation = rule.Calculation;
      this.CalculationStart = rule.CalculationStart;
      this.StorageInterval = rule.StorageInterval;
      this.Creation = rule.Creation;
      this.RuleIndex = rule.RuleIndex;
    }

    public IEnumerable<ValueIdent.ValueIdPart_PhysicalQuantity> PhysicalQuantitiesEnumerable
    {
      get => ValueIdentHelper.GetPhysicalQuantitiesEnumerableAsValueIdPart();
    }

    public IEnumerable<ValueIdent.ValueIdPart_MeterType> MeterTypeEnumerable
    {
      get => ValueIdentHelper.GetMeterTypeEnumerableAsValueIdPart();
    }

    public IEnumerable<ValueIdent.ValueIdPart_Calculation> CalculationEnumerable
    {
      get => ValueIdentHelper.GetCalculationEnumerableAsValueIdPart();
    }

    public IEnumerable<ValueIdent.ValueIdPart_CalculationStart> CalculationStartEnumerable
    {
      get => ValueIdentHelper.GetCalculationStartEnumerableAsValueIdPart();
    }

    public IEnumerable<ValueIdent.ValueIdPart_StorageInterval> StorageIntervalEnumerable
    {
      get => ValueIdentHelper.GetStorageIntervalEnumerableAsValueIdPart();
    }

    public IEnumerable<ValueIdent.ValueIdPart_Creation> CreationEnumerable
    {
      get => ValueIdentHelper.GetCreationEnumerableAsValueIdPart();
    }

    public ValueIdent.ValueIdPart_PhysicalQuantity PhysicalQuantity
    {
      get => this._physicalQuantity;
      set
      {
        this._physicalQuantity = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ValueIdent.ValueIdPart_MeterType MeterType
    {
      get => this._meterType;
      set
      {
        this._meterType = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ValueIdent.ValueIdPart_Calculation Calculation
    {
      get => this._calculation;
      set
      {
        this._calculation = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ValueIdent.ValueIdPart_CalculationStart CalculationStart
    {
      get => this._calculationStart;
      set
      {
        this._calculationStart = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ValueIdent.ValueIdPart_StorageInterval StorageInterval
    {
      get => this._storageInterval;
      set
      {
        this._storageInterval = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ValueIdent.ValueIdPart_Creation Creation
    {
      get => this._creation;
      set
      {
        this._creation = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public string ValueIdentifier
    {
      get => this._valueIdentifier;
      set => this._valueIdentifier = value;
    }

    public int RuleIndex
    {
      get => this._ruleIndex;
      set
      {
        this._ruleIndex = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ICommand UpdateRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          Rules newRule = new Rules()
          {
            Id = this._rule.Id,
            MeterType = this.MeterType,
            Calculation = this.Calculation,
            CalculationStart = this.CalculationStart,
            Creation = this.Creation,
            Filter = this._rule.Filter,
            PhysicalQuantity = this.PhysicalQuantity,
            StorageInterval = this.StorageInterval,
            RuleIndex = this.RuleIndex,
            ValueId = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex)
          };
          this.GetFilterManagerInstance().UpdateRule(newRule);
          this.OnRequestClose(true);
        }));
      }
    }

    private FilterManager GetFilterManagerInstance() => new FilterManager(this._repositoryFactory);
  }
}

