
--- AddNoteViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Meters.AddNoteViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Core.Model.Meters;
using MSS.Interfaces;
using MSS.Localisation;
using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Meters
{
  public class AddNoteViewModel : ViewModelBase
  {
    private string _meterNotesText;
    private KeyValuePair<NoteType, string> _selectedNoteType;

    public AddNoteViewModel(IRepositoryFactory repositoryFactory)
    {
      List<NoteType> list = repositoryFactory.GetRepository<NoteType>().GetAll().ToList<NoteType>();
      this.NoteTypesComboBox = new Dictionary<NoteType, string>();
      foreach (NoteType key in list)
        this.NoteTypesComboBox.Add(key, CultureResources.GetValue("MSS_NoteType_" + key.Description));
      this.NoteTypesComboBox = this.NoteTypesComboBox.OrderBy<KeyValuePair<NoteType, string>, string>((Func<KeyValuePair<NoteType, string>, string>) (_ => _.Value)).ToDictionary<KeyValuePair<NoteType, string>, NoteType, string>((Func<KeyValuePair<NoteType, string>, NoteType>) (x => x.Key), (Func<KeyValuePair<NoteType, string>, string>) (x => x.Value));
      this.Title = Resources.MSS_Client_Add_Notes;
      this.SelectedNoteType = this.NoteTypesComboBox.FirstOrDefault<KeyValuePair<NoteType, string>>((Func<KeyValuePair<NoteType, string>, bool>) (item => item.Key.Description == "None"));
      this.MeterNotesText = Resources.MSS_Client_AddDescription;
    }

    public Dictionary<NoteType, string> NoteTypesComboBox { get; set; }

    public string MeterNotesText
    {
      get => this._meterNotesText;
      set
      {
        this._meterNotesText = value;
        this.OnPropertyChanged(nameof (MeterNotesText));
      }
    }

    public string Title { get; set; }

    public KeyValuePair<NoteType, string> SelectedNoteType
    {
      get => this._selectedNoteType;
      set
      {
        this._selectedNoteType = value;
        this.OnPropertyChanged(nameof (SelectedNoteType));
      }
    }

    public ICommand SaveNoteCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.AddedNote = new Note()
          {
            NoteDescription = this.MeterNotesText == Resources.MSS_Client_AddDescription ? "" : this.MeterNotesText,
            NoteType = this.SelectedNoteType.Key
          };
          this.OnRequestClose(true);
        }));
      }
    }

    public Note AddedNote { get; set; }
  }
}


--- EditNoteViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Meters.EditNoteViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Core.Model.Meters;
using MSS.Interfaces;
using MSS.Localisation;
using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Meters
{
  public class EditNoteViewModel : ViewModelBase
  {
    private string _meterNotesText;
    private KeyValuePair<NoteType, string> _selectedNoteType;

    public EditNoteViewModel(IRepositoryFactory repositoryFactory, Note selectedNote)
    {
      List<NoteType> list = repositoryFactory.GetRepository<NoteType>().GetAll().ToList<NoteType>();
      this.NoteTypesComboBox = new Dictionary<NoteType, string>();
      foreach (NoteType key in list)
        this.NoteTypesComboBox.Add(key, CultureResources.GetValue("MSS_NoteType_" + key.Description));
      this.NoteTypesComboBox = this.NoteTypesComboBox.OrderBy<KeyValuePair<NoteType, string>, string>((Func<KeyValuePair<NoteType, string>, string>) (_ => _.Value)).ToDictionary<KeyValuePair<NoteType, string>, NoteType, string>((Func<KeyValuePair<NoteType, string>, NoteType>) (x => x.Key), (Func<KeyValuePair<NoteType, string>, string>) (x => x.Value));
      this.Title = Resources.MSS_Client_Structures_EditNote;
      this.SelectedNoteType = this.NoteTypesComboBox.FirstOrDefault<KeyValuePair<NoteType, string>>((Func<KeyValuePair<NoteType, string>, bool>) (item => item.Key.Id == selectedNote.NoteType.Id));
      this.MeterNotesText = !string.IsNullOrEmpty(selectedNote.NoteDescription) ? selectedNote.NoteDescription : Resources.MSS_Client_AddDescription;
    }

    public Dictionary<NoteType, string> NoteTypesComboBox { get; set; }

    public string MeterNotesText
    {
      get => this._meterNotesText;
      set
      {
        this._meterNotesText = value;
        this.OnPropertyChanged(nameof (MeterNotesText));
      }
    }

    public string Title { get; set; }

    public KeyValuePair<NoteType, string> SelectedNoteType
    {
      get => this._selectedNoteType;
      set
      {
        this._selectedNoteType = value;
        this.OnPropertyChanged(nameof (SelectedNoteType));
      }
    }

    public ICommand SaveNoteCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.EditedNote = new Note()
          {
            NoteDescription = this.MeterNotesText == Resources.MSS_Client_AddDescription ? string.Empty : this.MeterNotesText,
            NoteType = this.SelectedNoteType.Key
          };
          this.OnRequestClose(true);
        }));
      }
    }

    public Note EditedNote { get; set; }
  }
}


--- MeterNotesViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Meters.MeterNotesViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Events;
using MSS.Core.Model.Meters;
using MSS.DIConfiguration;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Meters
{
  public class MeterNotesViewModel : ViewModelBase
  {
    private readonly IWindowFactory _windowFactory;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly StructureNodeDTO _selectedStructureNode;
    private string _meterNotesText;
    private ObservableCollection<NoteWithTranslation> _notesList;
    private NoteWithTranslation _selectedNote;
    private bool _isEditNoteButtonEnabled;
    private bool _isDeleteNoteButtonEnabled;

    public MeterNotesViewModel(
      StructureNodeDTO selectedStructureNode,
      IWindowFactory windowFactory,
      IRepositoryFactory repositoryFactory)
    {
      this._windowFactory = windowFactory;
      this._repositoryFactory = repositoryFactory;
      this._selectedStructureNode = selectedStructureNode;
      this.NotesList = new ObservableCollection<NoteWithTranslation>();
      foreach (Note assignedNote in this._selectedStructureNode.AssignedNotes)
        this.NotesList.Add(new NoteWithTranslation()
        {
          Note = assignedNote
        });
      this.Title = Resources.MSS_Client_Meter_Notes;
      this.IsEditNoteButtonEnabled = false;
      this.IsDeleteNoteButtonEnabled = false;
    }

    public string MeterNotesText
    {
      get => this._meterNotesText;
      set
      {
        this._meterNotesText = value;
        this.OnPropertyChanged(nameof (MeterNotesText));
      }
    }

    public string Title { get; set; }

    public ObservableCollection<NoteWithTranslation> NotesList
    {
      get => this._notesList;
      set
      {
        this._notesList = value;
        this.OnPropertyChanged(nameof (NotesList));
      }
    }

    public NoteWithTranslation SelectedNote
    {
      get => this._selectedNote;
      set
      {
        this._selectedNote = value;
        this.IsEditNoteButtonEnabled = this._selectedNote != null;
        this.IsDeleteNoteButtonEnabled = this._selectedNote != null;
        this.OnPropertyChanged(nameof (SelectedNote));
      }
    }

    public bool IsEditNoteButtonEnabled
    {
      get => this._isEditNoteButtonEnabled;
      set
      {
        this._isEditNoteButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsEditNoteButtonEnabled));
      }
    }

    public bool IsDeleteNoteButtonEnabled
    {
      get => this._isDeleteNoteButtonEnabled;
      set
      {
        this._isDeleteNoteButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsDeleteNoteButtonEnabled));
      }
    }

    public ICommand AddNoteCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          AddNoteViewModel addNoteViewModel = DIConfigurator.GetConfigurator().Get<AddNoteViewModel>((IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory));
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) addNoteViewModel);
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          this.NotesList.Add(new NoteWithTranslation()
          {
            Note = addNoteViewModel.AddedNote
          });
        }));
      }
    }

    public ICommand EditNoteCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          EditNoteViewModel editNoteViewModel = DIConfigurator.GetConfigurator().Get<EditNoteViewModel>((IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory), (IParameter) new ConstructorArgument("selectedNote", (object) this.SelectedNote.Note));
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) editNoteViewModel);
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          ObservableCollection<NoteWithTranslation> notesList = this.NotesList;
          NoteWithTranslation editedNote = notesList.FirstOrDefault<NoteWithTranslation>((Func<NoteWithTranslation, bool>) (item => item == this.SelectedNote));
          if (editedNote != null)
          {
            editedNote.Note.NoteDescription = editNoteViewModel.EditedNote.NoteDescription;
            editedNote.Note.NoteType = editNoteViewModel.EditedNote.NoteType;
          }
          this.NotesList = new ObservableCollection<NoteWithTranslation>((IEnumerable<NoteWithTranslation>) notesList);
          this.SelectedNote = this.NotesList.FirstOrDefault<NoteWithTranslation>((Func<NoteWithTranslation, bool>) (item => item == editedNote));
        }));
      }
    }

    public ICommand DeleteNoteCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ => this.NotesList.Contains(this.SelectedNote).IsTrue((Action) (() => this.NotesList.Remove(this.SelectedNote)))));
      }
    }

    public ICommand SaveCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          EventPublisher.Publish<MeterNotesUpdated>(new MeterNotesUpdated()
          {
            UpdatedNode = this._selectedStructureNode,
            NewNotesList = this.NotesList.Select<NoteWithTranslation, Note>((Func<NoteWithTranslation, Note>) (item => item.Note)).ToList<Note>()
          }, (IViewModel) this);
          this.OnRequestClose(true);
        }));
      }
    }
  }
}


--- MeterPhotosViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Meters.MeterPhotosViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Events;
using MSS.DIConfiguration;
using MSS.Interfaces;
using MSS.Utils.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;

#nullable disable
namespace MSS_Client.ViewModel.Meters
{
  public class MeterPhotosViewModel : ViewModelBase
  {
    private readonly IWindowFactory _windowFactory;
    private readonly StructureNodeDTO SelectedStructureNodeDTO;
    private bool _isBusy;
    private bool _isDeleteButtonActive;

    public MeterPhotosViewModel(
      StructureNodeDTO selectedStructureNode,
      IWindowFactory windowFactory)
    {
      this.SelectedStructureNodeDTO = selectedStructureNode;
      List<byte[]> assignedPicture = this.SelectedStructureNodeDTO.AssignedPicture;
      this.PhotosCollection = new ObservableCollection<ImageSource>((assignedPicture != null ? (IEnumerable<ImageSource>) assignedPicture.Select<byte[], BitmapImage>((Func<byte[], BitmapImage>) (_ => _.ToImageSource())) : (IEnumerable<ImageSource>) null) ?? new List<ImageSource>().AsEnumerable<ImageSource>());
      this.SelectedStructureNodeDTO = selectedStructureNode;
      this._windowFactory = windowFactory;
    }

    public ObservableCollection<ImageSource> PhotosCollection { get; set; }

    public ImageSource SelectedPhoto { get; set; }

    public bool SimulateData { get; set; }

    public string Title { get; set; }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    public int SelectedPhotoIndex { get; set; }

    public bool IsDeleteButtonActive
    {
      get => this._isDeleteButtonActive;
      set
      {
        this._isDeleteButtonActive = value;
        this.OnPropertyChanged(nameof (IsDeleteButtonActive));
      }
    }

    public ICommand DeletePhotoCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ => this.PhotosCollection.Remove(this.SelectedPhoto)));
      }
    }

    public ICommand TakePhotoCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          TakePhotoViewModel takePhotoViewModel = DIConfigurator.GetConfigurator().Get<TakePhotoViewModel>((IParameter) new ConstructorArgument("photoCollection", (object) this.PhotosCollection));
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) takePhotoViewModel);
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          this.PhotosCollection.Add(takePhotoViewModel.ResultImage);
        }));
      }
    }

    public ICommand SaveCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          EventPublisher.Publish<MeterPhotosUpdated>(new MeterPhotosUpdated()
          {
            UpdatedNode = this.SelectedStructureNodeDTO,
            NewPhotos = this.PhotosCollection.Select<ImageSource, byte[]>((Func<ImageSource, byte[]>) (v => v == null ? (byte[]) null : v.ToByteArray((BitmapEncoder) new PngBitmapEncoder()))).ToList<byte[]>()
          }, (IViewModel) this);
          this.IsBusy = true;
          this.OnRequestClose(true);
        }));
      }
    }
  }
}


--- MeterReadingValuesViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Meters.MeterReadingValuesViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using Microsoft.Win32;
using MSS.Business.Documents;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.ReadingValues;
using MSS.Business.Modules.Reporting;
using MSS.Business.Modules.WCFRelated;
using MSS.Business.Utils;
using MSS.Core.Model.Meters;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Orders;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.GenericProgressDialog;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;
using System.Windows.Input;
using Telerik.Windows.Data;
using Telerik.Windows.Documents.FormatProviders;
using Telerik.Windows.Documents.Model;

#nullable disable
namespace MSS_Client.ViewModel.Meters
{
  public class MeterReadingValuesViewModel : ViewModelBase
  {
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly IWindowFactory _windowFactory;
    private BackgroundWorker _backgroundWorkerExport;
    private ViewModelBase _messageUserControl;
    private bool _isExportVisible;
    private bool _isExportCsvVisible;
    private bool _isExportPdfVisible;

    public MeterReadingValuesViewModel(
      StructureNodeDTO structureNode,
      OrderDTO selectedOrder,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
    {
      MeterReadingValuesViewModel readingValuesViewModel = this;
      this._windowFactory = windowFactory;
      this._repositoryFactory = repositoryFactory;
      this.IsExportVisible = true;
      this.IsExportCsvVisible = false;
      this.IsExportPdfVisible = false;
      GenericProgressDialogViewModel pd = DIConfigurator.GetConfigurator().Get<GenericProgressDialogViewModel>((IParameter) new ConstructorArgument("progressDialogTitle", (object) Resources.MSS_CLIENT_READING_VALUE_VIEW_TITLE), (IParameter) new ConstructorArgument("progressDialogMessage", (object) Resources.MSS_CLIENT_READING_VALUE_VIEW_MESSAGE));
      BackgroundWorker backgroundWorker = new BackgroundWorker()
      {
        WorkerReportsProgress = true,
        WorkerSupportsCancellation = true
      };
      backgroundWorker.DoWork += (DoWorkEventHandler) ((sender, args) =>
      {
        if (selectedOrder == null)
        {
          StructureReadingValuesInitializer valuesInitializer = new StructureReadingValuesInitializer(structureNode, readingValuesViewModel._repositoryFactory);
          readingValuesViewModel.ReadingValuesTitle = valuesInitializer.SetTitle(structureNode.Name);
          readingValuesViewModel.MeterReadingValuesDTO = valuesInitializer.GetReadingValuesDTO();
        }
        else
        {
          OrderReadingValuesInitializer valuesInitializer = new OrderReadingValuesInitializer(selectedOrder, structureNode, readingValuesViewModel._repositoryFactory);
          MeterDTO entity = structureNode.Entity as MeterDTO;
          readingValuesViewModel.ReadingValuesTitle = entity != null ? valuesInitializer.SetTitle(entity.SerialNumber) : valuesInitializer.SetTitle(selectedOrder.RootNodeName);
          readingValuesViewModel.MeterReadingValuesDTO = selectedOrder.StructureBytes != null ? valuesInitializer.GetReadingValuesDTO() : new ObservableCollection<MeterReadingValueDTO>();
        }
        MeterReadingValuesViewModel.SetRowColors(readingValuesViewModel.MeterReadingValuesDTO);
      });
      backgroundWorker.RunWorkerCompleted += (RunWorkerCompletedEventHandler) ((sender, args) =>
      {
        pd.OnRequestClose(false);
        MSS.DTO.Message.Message message = (MSS.DTO.Message.Message) null;
        if (args.Cancelled)
          message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = Resources.MSS_Client_Archivation_Cancelled
          };
        else if (args.Error != null)
        {
          MSS.Business.Errors.MessageHandler.LogException(args.Error);
          MessageHandlingManager.ShowExceptionMessageDialog(MSSHelper.GetErrorMessage(args.Error), closure_0._windowFactory);
        }
        else
          message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Success,
            MessageText = Resources.MSS_Client_Archivation_Succedded
          };
        if (message == null)
          return;
        EventPublisher.Publish<ActionFinished>(new ActionFinished()
        {
          Message = message
        }, (IViewModel) closure_0);
      });
      backgroundWorker.RunWorkerAsync();
      this._windowFactory.CreateNewProgressDialog((IViewModel) pd, backgroundWorker);
    }

    public MeterReadingValuesViewModel(
      ObservableCollection<MeterReadingValueDTO> readingValues,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
    {
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this.ReadingValuesTitle = Resources.MSS_Client_Structures_ReadingValues;
      this.IsExportVisible = false;
      this.IsExportCsvVisible = true;
      this.IsExportPdfVisible = true;
      this.MeterReadingValuesDTO = readingValues;
      MeterReadingValuesViewModel.SetRowColors(this.MeterReadingValuesDTO);
    }

    public string ReadingValuesTitle { get; set; }

    private IEnumerable<MeterReadingValue> MeterReadingValues { get; set; }

    public ObservableCollection<MeterReadingValueDTO> MeterReadingValuesDTO { get; set; }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public DataItemCollection FilteredRows { get; set; }

    public bool IsExportVisible
    {
      get => this._isExportVisible;
      set
      {
        this._isExportVisible = value;
        this.OnPropertyChanged(nameof (IsExportVisible));
      }
    }

    public bool IsExportCsvVisible
    {
      get => this._isExportCsvVisible;
      set
      {
        this._isExportCsvVisible = value;
        this.OnPropertyChanged(nameof (IsExportCsvVisible));
      }
    }

    public bool IsExportPdfVisible
    {
      get => this._isExportPdfVisible;
      set
      {
        this._isExportPdfVisible = value;
        this.OnPropertyChanged(nameof (IsExportPdfVisible));
      }
    }

    public ICommand SendReadingValuesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          using (ServiceClient serviceClient = new ServiceClient(MSS.Business.Utils.AppContext.Current.GetParameterValue<string>("ServerIp")))
            serviceClient.SendReadingValues(this.MeterReadingValues.ToList<MeterReadingValue>());
        }));
      }
    }

    public ICommand ExportReadingValueCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (x =>
        {
          if (this.FilteredRows.Count == 0)
          {
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_ReadingValuesExport_NoRecord);
          }
          else
          {
            ObservableCollection<MeterReadingValueDTO> filteredReadingValues = new ObservableCollection<MeterReadingValueDTO>();
            foreach (object filteredRow in this.FilteredRows)
              filteredReadingValues.Add(filteredRow as MeterReadingValueDTO);
            SaveFileDialog saveReadingValueDialog = new SaveFileDialog()
            {
              Filter = "CSV Document for GMM|*.csv|CSV Document for SAS|*.csv|CSV Document for GMM DE|*.csv|CSV Document for SAS DE|*.csv",
              Title = "Save reading values to file"
            };
            saveReadingValueDialog.ShowDialog();
            if (saveReadingValueDialog.FileName == string.Empty)
              return;
            DeterminateProgressDialogViewModel vm = DIConfigurator.GetConfigurator().Get<DeterminateProgressDialogViewModel>((IParameter) new ConstructorArgument("progressDialogTitle", (object) Resources.MSS_Client_Export), (IParameter) new ConstructorArgument("progressDialogMessage", (object) Resources.EXPORT_INSTALLATION_ORDER_TEXT));
            this._backgroundWorkerExport = new BackgroundWorker()
            {
              WorkerReportsProgress = true,
              WorkerSupportsCancellation = true
            };
            this._backgroundWorkerExport.DoWork += (DoWorkEventHandler) ((sender, eventArgs) =>
            {
              bool isSasExport = saveReadingValueDialog.FilterIndex == 2 || saveReadingValueDialog.FilterIndex == 4;
              bool commaDecimalSeparator = saveReadingValueDialog.FilterIndex == 3 || saveReadingValueDialog.FilterIndex == 4;
              new ReportingManager(this._repositoryFactory).ExportReadingValues(isSasExport ? ReportingHelper.FilteredReadingValuesCollection(filteredReadingValues) : filteredReadingValues, isSasExport, commaDecimalSeparator, saveReadingValueDialog.FileName, this._backgroundWorkerExport, eventArgs);
            });
            this._backgroundWorkerExport.ProgressChanged += (ProgressChangedEventHandler) ((sender, e) => EventPublisher.Publish<ProgressBarValueChanged>(new ProgressBarValueChanged()
            {
              Value = e.ProgressPercentage
            }, (IViewModel) this));
            this._backgroundWorkerExport.RunWorkerCompleted += (RunWorkerCompletedEventHandler) ((sender, args) =>
            {
              vm.OnRequestClose(false);
              if (args.Error != null)
              {
                MSS.Business.Errors.MessageHandler.LogException(args.Error);
                MessageHandlingManager.ShowExceptionMessageDialog(MSSHelper.GetErrorMessage(args.Error), this._windowFactory);
              }
              else
                this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_MessageCodes_SuccessOperation);
            });
            this._backgroundWorkerExport.RunWorkerAsync();
            this._windowFactory.CreateNewProgressDialog((IViewModel) vm, this._backgroundWorkerExport);
          }
        }));
      }
    }

    public ICommand ExportReadingValueToCSVCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter => this.ExportDocument(DocumentTypesEnum.CSV)));
      }
    }

    public ICommand ExportReadingValueToPDFCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter => this.ExportDocument(DocumentTypesEnum.PDF)));
      }
    }

    private void ExportDocument(DocumentTypesEnum docType)
    {
      if (this.MeterReadingValuesDTO == null || this.MeterReadingValuesDTO.ToList<MeterReadingValueDTO>().Count == 0)
        return;
      CultureInfo cultureInfo = (CultureInfo) Thread.CurrentThread.CurrentCulture.Clone();
      Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
      ReportingManager reportingManager = new ReportingManager(this._repositoryFactory);
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      switch (docType)
      {
        case DocumentTypesEnum.CSV:
          saveFileDialog.Filter = "CSV Document|*.csv";
          break;
        case DocumentTypesEnum.PDF:
          saveFileDialog.Filter = "PDF Document|*.pdf";
          break;
        default:
          throw new UnsupportedFileTypeException(docType.ToString());
      }
      saveFileDialog.Title = Resources.MSS_Client_SaveMeterReadingValuesToFile;
      bool? nullable = saveFileDialog.ShowDialog();
      if (saveFileDialog.FileName == string.Empty)
        return;
      List<string[]> forCsvOrPdfExport = reportingManager.CreateReadingValuesListForCsvOrPdfExport(this.MeterReadingValuesDTO.ToList<MeterReadingValueDTO>());
      try
      {
        if (nullable.HasValue && nullable.Value)
        {
          try
          {
            switch (docType)
            {
              case DocumentTypesEnum.CSV:
                List<string[]> nodeList = CSVManager.AddQuatForCSV(forCsvOrPdfExport);
                new CSVManager().WriteToFile(saveFileDialog.FileName, nodeList);
                break;
              case DocumentTypesEnum.PDF:
                RadDocument meterReadingValues = GeneratePdfFromData.GeneratePdfFromMeterReadingValues(this.MeterReadingValuesDTO.First<MeterReadingValueDTO>().MeterSerialNumber, forCsvOrPdfExport);
                IDocumentFormatProvider providerByExtension = DocumentFormatProvidersManager.GetProviderByExtension(Path.GetExtension(saveFileDialog.SafeFileName));
                if (providerByExtension == null)
                {
                  this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_UnsupportedFileFormat);
                  return;
                }
                try
                {
                  using (Stream output = saveFileDialog.OpenFile())
                  {
                    providerByExtension.Export(meterReadingValues, output);
                    break;
                  }
                }
                catch (Exception ex)
                {
                  this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(MessageCodes.Error.GetStringValue() + " " + Resources.MSS_Client_UnableToSaveFile + ex.ToString());
                  break;
                }
            }
            this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
          }
          catch (Exception ex)
          {
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(MessageCodes.Error.GetStringValue() + " " + ex.Message);
            MSS.Business.Errors.MessageHandler.LogException(ex);
            MessageHandlingManager.ShowExceptionMessageDialog(ex.Message, this._windowFactory);
          }
        }
        else
          this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
      }
      finally
      {
        Thread.CurrentThread.CurrentCulture = cultureInfo;
      }
    }

    private static void SetRowColors(
      ObservableCollection<MeterReadingValueDTO> readingValues)
    {
      if (readingValues.Count <= 0)
        return;
      DateTime date = readingValues[0].Date;
      bool flag = true;
      foreach (MeterReadingValueDTO readingValue in (Collection<MeterReadingValueDTO>) readingValues)
      {
        if (readingValue.Date != date)
        {
          date = readingValue.Date;
          flag = !flag;
        }
        readingValue.IsDarkRowColor = flag;
      }
    }
  }
}


--- MetersViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Meters.MetersViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.DTO.MessageHandler;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Meters
{
  public class MetersViewModel : ViewModelBase
  {
    private ViewModelBase _messageUserControl;

    public MetersViewModel()
    {
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(this.CreateMessage));
    }

    private void CreateMessage(ActionSyncFinished messageFinished)
    {
      switch (messageFinished.Message.MessageType)
      {
        case MessageTypeEnum.Success:
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(messageFinished.Message.MessageText);
          break;
        case MessageTypeEnum.Warning:
          this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(messageFinished.Message.MessageText);
          break;
      }
    }

    public ICommand ThowUnhandledExceptionCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          throw new Exception("Excetion thrown for test");
        }));
      }
    }

    public ICommand ThowHandledExceptionCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          try
          {
            throw new BaseApplicationException(ErrorCodes.GetErrorMessage("MSSError_1"), new object[1]
            {
              (object) ErrorCodes.GetErrorMessage("MSSError_1")
            });
          }
          catch (BaseApplicationException ex)
          {
            MessageHandlingManager.ShowExceptionMessageDialog(ex);
          }
        }));
      }
    }

    public ICommand ShowSuccessMessageCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate => this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Save.GetStringValue())));
      }
    }

    public ICommand ShowCancelMessageCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(MessageCodes.User_Duplicate.ToString())));
      }
    }

    public ICommand ShowValidationMessageCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate => this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(MessageCodes.Server_Not_Available.ToString())));
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }
  }
}


--- NoteWithTranslation.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Meters.NoteWithTranslation
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Core.Model.Meters;
using MSS.DTO;
using MSS.Localisation;

#nullable disable
namespace MSS_Client.ViewModel.Meters
{
  public class NoteWithTranslation : DTOBase
  {
    private Note _note;

    public Note Note
    {
      get => this._note;
      set
      {
        this._note = value;
        this.OnPropertyChanged(nameof (Note));
      }
    }

    public string Translation
    {
      get
      {
        return this.Note == null || this.Note.NoteType == null || string.IsNullOrEmpty(this.Note.NoteType.Description) ? string.Empty : CultureResources.GetValue("MSS_NoteType_" + this.Note.NoteType.Description);
      }
    }
  }
}


--- TakePhotoViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Meters.TakePhotoViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AForge.Video;
using AForge.Video.DirectShow;
using MSS.Localisation;
using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Drawing.Imaging;
using System.IO;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;

#nullable disable
namespace MSS_Client.ViewModel.Meters
{
  public class TakePhotoViewModel : ViewModelBase
  {
    private ImageSource _frameHolder;
    private ImageSource _resultImage;
    private string _camCollection;

    public FilterInfoCollection LocalWebCamsCollection { get; set; }

    public VideoCaptureDevice localWebCam { get; set; }

    public ObservableCollection<ImageSource> PhotosCollection { get; set; }

    public ImageSource FrameHolder
    {
      get => this._frameHolder;
      set
      {
        this._frameHolder = value;
        this.OnPropertyChanged(nameof (FrameHolder));
      }
    }

    public string Title { get; set; }

    public TakePhotoViewModel(ObservableCollection<ImageSource> photoCollection)
    {
      this.Title = Resources.MSS_Client_Add_Meter_Photos;
    }

    public ImageSource ResultImage
    {
      get => this._resultImage;
      set
      {
        this._resultImage = value;
        this.OnPropertyChanged(nameof (ResultImage));
      }
    }

    public string CamCollection
    {
      get => this._camCollection;
      set
      {
        this._camCollection = value;
        this.OnPropertyChanged(nameof (CamCollection));
      }
    }

    public ICommand SetVideoStream
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (((System.Windows.Controls.Image) _).Source != null)
            return;
          this.LocalWebCamsCollection = new FilterInfoCollection((Guid) FilterCategory.VideoInputDevice);
          this.CamCollection = ((CollectionBase) this.LocalWebCamsCollection).Count.ToString();
          this.localWebCam = ((CollectionBase) this.LocalWebCamsCollection).Count <= 1 ? new VideoCaptureDevice(this.LocalWebCamsCollection[0].MonikerString) : new VideoCaptureDevice(this.LocalWebCamsCollection[int.Parse(ConfigurationManager.AppSettings["CamsCollectionCount"]) - 1].MonikerString);
          this.localWebCam.NewFrame += new NewFrameEventHandler(this.Cam_NewFrame);
          this.localWebCam.DesiredFrameSize = new System.Drawing.Size(640, 360);
          System.Windows.Controls.Image image = (System.Windows.Controls.Image) _;
          image.Width = 640.0;
          image.Height = 360.0;
          this.localWebCam.Start();
        }));
      }
    }

    public ICommand CapturePictureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ => this.ResultImage = this.FrameHolder));
      }
    }

    public ICommand DeletePictureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ => this.ResultImage = (ImageSource) null));
      }
    }

    public ICommand SavePhotoCommand
    {
      get => (ICommand) new RelayCommand((Action<object>) (_ => this.OnRequestClose(true)));
    }

    private void Cam_NewFrame(object sender, NewFrameEventArgs eventArgs)
    {
      System.Drawing.Image image = (System.Drawing.Image) eventArgs.Frame.Clone();
      MemoryStream memoryStream = new MemoryStream();
      image.Save((Stream) memoryStream, ImageFormat.Bmp);
      memoryStream.Seek(0L, SeekOrigin.Begin);
      BitmapImage bi = new BitmapImage();
      bi.BeginInit();
      bi.StreamSource = (Stream) memoryStream;
      bi.EndInit();
      bi.Freeze();
      Application.Current.Dispatcher.InvokeAsync((Action) (() => this.FrameHolder = (ImageSource) bi));
    }

    public void DettachWebCam()
    {
      this.localWebCam.SignalToStop();
      this.localWebCam.WaitForStop();
    }
  }
}


--- TranslationRulesViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Meters.TranslationRulesViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.Meters;
using MSS.DIConfiguration;
using MSS.Interfaces;
using MSS.Localisation;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Windows.Controls;
using System.Windows.Input;
using ZR_ClassLibrary;

#nullable disable
namespace MSS_Client.ViewModel.Meters
{
  public class TranslationRulesViewModel : ValidationViewModelBase
  {
    private bool _isEditMode;
    private bool _isItemSelected;
    private bool? _isNewRule;
    private StructureNodeDTO _selectedNode;
    private bool _isSubDevice;
    private string _receivedManufacturer;
    private string _receivedMedium;
    private string _receivedGeneration;
    private List<string> _receivedZdfKeys;
    private IWindowFactory _windowFactory;
    private TranslationRule _selectedItem;
    private TranslationRuleCollection _translationRules;
    private string _manufacturer;
    private string _medium;
    private Dictionary<DeviceMediumEnum, string> _deviceMediumList;
    private int? _versionMin;
    private int? _versionMax;
    private string _zdfKey;
    private List<string> _zdfKeyList;
    private bool _isMainChecked;
    private bool _isSubDeviceChecked;
    private double _multiplier;
    private int _ruleOrder;
    private string _specialTranslation;
    private List<string> _specialTranslationsList;
    private int _subDeviceIndex;
    private string _subDeviceZDFKey;
    private bool _isDeleteButtonEnabled;
    private bool _isEditButtonEnabled;
    private bool _isSaveButtonEnabled;
    private bool _isCancelButtonEnabled;
    private bool _isTranslateToGroupEnabled;
    private bool _isValueSettingsGroupEnabled;
    private bool _isSubDeviceGroupEnabled;
    private bool _isZDFKeyEnabled;
    private bool _isDeviceTypeEnabled;
    private string _valueIdentifier;
    private string _unit;
    private string _timepoint;
    private List<string> _timepointList;
    private string _timepointModification;
    private List<string> _timepointModificationList;
    private string _meterType;
    private string _physicalQuantity;
    private string _calculation;
    private string _calculationStart;
    private string _storageInterval;
    private string _creation;
    private int _ruleIndex;
    private ViewModelBase _messageUserControl;
    private bool _isShowAllRulesChecked;

    public TranslationRulesViewModel(
      IWindowFactory windowFactory,
      string manufacturer,
      string medium,
      string generation,
      List<string> zdfKeys,
      StructureNodeDTO selectedNode)
    {
      this._receivedManufacturer = manufacturer;
      this._receivedMedium = medium;
      this._receivedGeneration = generation;
      this._receivedZdfKeys = zdfKeys;
      this._isNewRule = new bool?();
      this._isEditMode = false;
      this._windowFactory = windowFactory;
      this._selectedNode = selectedNode;
      this.InitUI();
      this.IsShowAllRulesChecked = false;
    }

    private void InitUI()
    {
      this._isSubDevice = StructuresHelper.IsMeterWithMeterParent(this._selectedNode);
      int result;
      if (int.TryParse(this._receivedGeneration, out result))
        this._versionMax = this._versionMin = new int?(result);
      this._deviceMediumList = this.InitDeviceMediumList();
      List<string> receivedZdfKeys1 = this._receivedZdfKeys;
      this._zdfKeyList = receivedZdfKeys1 != null ? receivedZdfKeys1.Where<string>((Func<string, bool>) (k => !k.Contains("TIMP"))).ToList<string>() : (List<string>) null;
      this._manufacturer = this._receivedManufacturer;
      this.OnPropertyChanged("Manufacturer");
      this._medium = this._receivedMedium;
      this.OnPropertyChanged("Medium");
      this.IsMainChecked = !this._isSubDevice;
      this.IsSubDeviceChecked = this._isSubDevice;
      List<string> receivedZdfKeys2 = this._receivedZdfKeys;
      this._timepointList = receivedZdfKeys2 != null ? receivedZdfKeys2.Where<string>((Func<string, bool>) (k => k.Contains("TIMP"))).ToList<string>() : (List<string>) null;
      this._timepointList?.Insert(0, "RTIME");
      this._timepointModificationList = this.InitTimepointModificationList();
      List<string> timepointList = this.TimepointList;
      this.Timepoint = timepointList != null ? timepointList.First<string>() : (string) null;
      List<string> modificationList = this.TimepointModificationList;
      this.TimepointModification = modificationList != null ? modificationList.First<string>((Func<string, bool>) (item => item == "None")) : (string) null;
      this._specialTranslationsList = this.InitSpecialTranslationsList();
      this.Multiplier = 1.0;
      this.LoadTranslationRulesList();
      this.SelectedItem = this.TranslationRules.FirstOrDefault<TranslationRule>();
      this._isItemSelected = this.SelectedItem != null;
      if (!this._isItemSelected)
        this.EnableDisableControls();
      this.IsShowAllRulesChecked = true;
    }

    public TranslationRule SelectedItem
    {
      get => this._selectedItem;
      set
      {
        this._selectedItem = value;
        if (value != null)
        {
          this.LoadTranslationRule(this._selectedItem);
          this._isEditMode = false;
          this._isItemSelected = true;
          this.EnableDisableControls();
        }
        this.OnPropertyChanged(nameof (SelectedItem));
      }
    }

    public TranslationRuleCollection TranslationRules
    {
      get => this._translationRules;
      set
      {
        this._translationRules = value;
        this.OnPropertyChanged(nameof (TranslationRules));
        this.OnPropertyChanged("TranslationRulesCount");
      }
    }

    public string TranslationRulesCount
    {
      get => this._translationRules.Count.ToString() + " " + Resources.MSS_Client_Rules;
    }

    public string Manufacturer
    {
      get => this._manufacturer;
      set
      {
        this._manufacturer = value;
        if (!this._isEditMode)
          this.LoadTranslationRulesList();
        this.OnPropertyChanged(nameof (Manufacturer));
      }
    }

    public string Medium
    {
      get => this._medium;
      set
      {
        this._medium = this.DeviceMediumList.FirstOrDefault<KeyValuePair<DeviceMediumEnum, string>>((Func<KeyValuePair<DeviceMediumEnum, string>, bool>) (item => item.Key.ToString() == value)).Key.ToString();
        if (!this._isEditMode)
          this.LoadTranslationRulesList();
        this.OnPropertyChanged(nameof (Medium));
      }
    }

    public Dictionary<DeviceMediumEnum, string> DeviceMediumList
    {
      get => this._deviceMediumList;
      set
      {
        this._deviceMediumList = value;
        this.OnPropertyChanged(nameof (DeviceMediumList));
      }
    }

    public int? VersionMin
    {
      get => this._versionMin;
      set
      {
        this._versionMin = value;
        if (!this._isEditMode)
          this.LoadTranslationRulesList();
        this.OnPropertyChanged(nameof (VersionMin));
      }
    }

    public int? VersionMax
    {
      get => this._versionMax;
      set
      {
        this._versionMax = value;
        if (!this._isEditMode)
          this.LoadTranslationRulesList();
        this.OnPropertyChanged(nameof (VersionMax));
      }
    }

    [Required(ErrorMessage = "MSS_Client_ZDFKey_Mandatory")]
    public string ZDFKey
    {
      get => this._zdfKey;
      set
      {
        List<string> zdfKeyList = this.ZDFKeyList;
        this._zdfKey = zdfKeyList != null ? zdfKeyList.FirstOrDefault<string>((Func<string, bool>) (item => item == value)) : (string) null;
        this.OnPropertyChanged(nameof (ZDFKey));
      }
    }

    public List<string> ZDFKeyList
    {
      get => this._zdfKeyList;
      set
      {
        this._zdfKeyList = value;
        this.OnPropertyChanged(nameof (ZDFKeyList));
      }
    }

    public bool IsMainChecked
    {
      get => this._isMainChecked;
      set
      {
        this._isMainChecked = value;
        this.OnPropertyChanged(nameof (IsMainChecked));
      }
    }

    public bool IsSubDeviceChecked
    {
      get => this._isSubDeviceChecked;
      set
      {
        this._isSubDeviceChecked = value;
        this.OnPropertyChanged(nameof (IsSubDeviceChecked));
      }
    }

    public double Multiplier
    {
      get => this._multiplier;
      set
      {
        this._multiplier = value;
        this.OnPropertyChanged(nameof (Multiplier));
      }
    }

    public int RuleOrder
    {
      get => this._ruleOrder;
      set
      {
        this._ruleOrder = value;
        this.OnPropertyChanged(nameof (RuleOrder));
      }
    }

    public string SpecialTranslation
    {
      get => this._specialTranslation;
      set
      {
        this._specialTranslation = this.SpecialTranslationsList.FirstOrDefault<string>((Func<string, bool>) (item => item == value));
        this.OnPropertyChanged(nameof (SpecialTranslation));
      }
    }

    public List<string> SpecialTranslationsList
    {
      get => this._specialTranslationsList;
      set
      {
        this._specialTranslationsList = value;
        this.OnPropertyChanged(nameof (SpecialTranslationsList));
      }
    }

    public int SubDeviceIndex
    {
      get => this._subDeviceIndex;
      set
      {
        this._subDeviceIndex = value;
        this.OnPropertyChanged(nameof (SubDeviceIndex));
      }
    }

    public string SubDeviceZDFKey
    {
      get => this._subDeviceZDFKey;
      set
      {
        this._subDeviceZDFKey = value;
        this.OnPropertyChanged(nameof (SubDeviceZDFKey));
      }
    }

    public bool IsDeleteButtonEnabled
    {
      get => this._isDeleteButtonEnabled;
      set
      {
        this._isDeleteButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsDeleteButtonEnabled));
      }
    }

    public bool IsEditButtonEnabled
    {
      get => this._isEditButtonEnabled;
      set
      {
        this._isEditButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsEditButtonEnabled));
      }
    }

    public bool IsSaveButtonEnabled
    {
      get => this._isSaveButtonEnabled;
      set
      {
        this._isSaveButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsSaveButtonEnabled));
      }
    }

    public bool IsCancelButtonEnabled
    {
      get => this._isCancelButtonEnabled;
      set
      {
        this._isCancelButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsCancelButtonEnabled));
      }
    }

    public bool IsTranslateToGroupEnabled
    {
      get => this._isTranslateToGroupEnabled;
      set
      {
        this._isTranslateToGroupEnabled = value;
        this.OnPropertyChanged(nameof (IsTranslateToGroupEnabled));
      }
    }

    public bool IsValueSettingsGroupEnabled
    {
      get => this._isValueSettingsGroupEnabled;
      set
      {
        this._isValueSettingsGroupEnabled = value;
        this.OnPropertyChanged(nameof (IsValueSettingsGroupEnabled));
      }
    }

    public bool IsSubDeviceGroupEnabled
    {
      get => this._isSubDeviceGroupEnabled;
      set
      {
        this._isSubDeviceGroupEnabled = value;
        this.OnPropertyChanged(nameof (IsSubDeviceGroupEnabled));
      }
    }

    public bool IsZDFKeyEnabled
    {
      get => this._isZDFKeyEnabled;
      set
      {
        this._isZDFKeyEnabled = value;
        this.OnPropertyChanged(nameof (IsZDFKeyEnabled));
      }
    }

    public bool IsDeviceTypeEnabled
    {
      get => this._isDeviceTypeEnabled;
      set
      {
        this._isDeviceTypeEnabled = value;
        this.OnPropertyChanged(nameof (IsDeviceTypeEnabled));
      }
    }

    public IEnumerable<string> MeterTypeEnumerable => ValueIdentHelper.GetMeterTypeEnumerable();

    public IEnumerable<string> PhysicalQuantitiesEnumerable
    {
      get => ValueIdentHelper.GetPhysicalQuantitiesEnumerable();
    }

    public IEnumerable<string> CalculationEnumerable => ValueIdentHelper.GetCalculationEnumerable();

    public IEnumerable<string> CalculationStartEnumerable
    {
      get => ValueIdentHelper.GetCalculationStartEnumerable();
    }

    public IEnumerable<string> StorageIntervalEnumerable
    {
      get => ValueIdentHelper.GetStorageIntervalEnumerable();
    }

    public IEnumerable<string> CreationEnumerable => ValueIdentHelper.GetCreationEnumerable();

    public string ValueIdentifier
    {
      get => this._valueIdentifier;
      set
      {
        this._valueIdentifier = value;
        this.OnPropertyChanged(nameof (ValueIdentifier));
      }
    }

    public string Unit
    {
      get => this._unit;
      set
      {
        this._unit = value;
        this.OnPropertyChanged(nameof (Unit));
      }
    }

    public string Timepoint
    {
      get => this._timepoint;
      set
      {
        List<string> timepointList = this.TimepointList;
        this._timepoint = timepointList != null ? timepointList.FirstOrDefault<string>((Func<string, bool>) (item => item == value)) : (string) null;
        this.OnPropertyChanged(nameof (Timepoint));
      }
    }

    public List<string> TimepointList
    {
      get => this._timepointList;
      set
      {
        this._timepointList = value;
        this.OnPropertyChanged(nameof (TimepointList));
      }
    }

    public string TimepointModification
    {
      get => this._timepointModification;
      set
      {
        List<string> modificationList = this.TimepointModificationList;
        this._timepointModification = modificationList != null ? modificationList.FirstOrDefault<string>((Func<string, bool>) (item => value == null ? item == "None" : item == value)) : (string) null;
        this.OnPropertyChanged(nameof (TimepointModification));
      }
    }

    public List<string> TimepointModificationList
    {
      get => this._timepointModificationList;
      set
      {
        this._timepointModificationList = value;
        this.OnPropertyChanged(nameof (TimepointModificationList));
      }
    }

    [Required(ErrorMessage = "MSS_Client_MeterType_Mandatory")]
    public string MeterType
    {
      get => this._meterType;
      set
      {
        this._meterType = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    [Required(ErrorMessage = "MSS_Client_PhysicalQuantity_Mandatory")]
    public string PhysicalQuantity
    {
      get => this._physicalQuantity;
      set
      {
        this._physicalQuantity = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    [Required(ErrorMessage = "MSS_Client_Calculation_Mandatory")]
    public string Calculation
    {
      get => this._calculation;
      set
      {
        this._calculation = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    [Required(ErrorMessage = "MSS_Client_CalculationStart_Mandatory")]
    public string CalculationStart
    {
      get => this._calculationStart;
      set
      {
        this._calculationStart = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    [Required(ErrorMessage = "MSS_Client_StorageInterval_Mandatory")]
    public string StorageInterval
    {
      get => this._storageInterval;
      set
      {
        this._storageInterval = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    [Required(ErrorMessage = "MSS_Client_Creation_Mandatory")]
    public string Creation
    {
      get => this._creation;
      set
      {
        this._creation = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public int RuleIndex
    {
      get => this._ruleIndex;
      set
      {
        this._ruleIndex = value;
        this._valueIdentifier = ValueIdentHelper.GetValueId(this.PhysicalQuantity, this.MeterType, this.Calculation, this.CalculationStart, this.StorageInterval, this.Creation, this._ruleIndex);
        this.OnPropertyChanged("ValueIdentifier");
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public bool IsShowAllRulesChecked
    {
      get => this._isShowAllRulesChecked;
      set
      {
        this._isShowAllRulesChecked = value;
        this.OnPropertyChanged(nameof (IsShowAllRulesChecked));
      }
    }

    private Dictionary<DeviceMediumEnum, string> InitDeviceMediumList()
    {
      return EnumHelper.GetEnumTranslationsDictionary<DeviceMediumEnum>().OrderBy<KeyValuePair<DeviceMediumEnum, string>, string>((Func<KeyValuePair<DeviceMediumEnum, string>, string>) (item => item.Value)).ToDictionary<KeyValuePair<DeviceMediumEnum, string>, DeviceMediumEnum, string>((Func<KeyValuePair<DeviceMediumEnum, string>, DeviceMediumEnum>) (t => t.Key), (Func<KeyValuePair<DeviceMediumEnum, string>, string>) (t => t.Value));
    }

    private List<string> InitTimepointModificationList()
    {
      return Enum.GetValues(typeof (SpecialStorageTimeTranslation)).Cast<SpecialStorageTimeTranslation>().Select<SpecialStorageTimeTranslation, string>((Func<SpecialStorageTimeTranslation, string>) (item => item.ToString())).ToList<string>();
    }

    private List<string> InitSpecialTranslationsList()
    {
      return Enum.GetValues(typeof (SpecialTranslationsEnum)).Cast<SpecialTranslationsEnum>().Select<SpecialTranslationsEnum, string>((Func<SpecialTranslationsEnum, string>) (item => item.ToString())).ToList<string>();
    }

    private void LoadTranslationRule(TranslationRule rule)
    {
      this._manufacturer = rule.Manufacturer;
      this.OnPropertyChanged("Manufacturer");
      this._medium = rule.Medium != "" ? this.DeviceMediumList.FirstOrDefault<KeyValuePair<DeviceMediumEnum, string>>((Func<KeyValuePair<DeviceMediumEnum, string>, bool>) (item => item.Key.ToString() == rule.Medium)).Key.ToString() : this.DeviceMediumList[DeviceMediumEnum.OTHER];
      this.OnPropertyChanged("Medium");
      this._versionMin = new int?(rule.VersionMin);
      this.OnPropertyChanged("VersionMin");
      this._versionMax = new int?(rule.VersionMax);
      this.OnPropertyChanged("VersionMax");
      List<string> zdfKeyList = this.ZDFKeyList;
      this.ZDFKey = zdfKeyList != null ? zdfKeyList.FirstOrDefault<string>((Func<string, bool>) (item => item == rule.MBusZDF)) : (string) null;
      this.ValueIdentifier = rule.ValueIdent.ToString();
      if (this.IsMainChecked)
      {
        long valueId = long.Parse(this._valueIdentifier);
        this._meterType = this.MeterTypeEnumerable.FirstOrDefault<string>((Func<string, bool>) (item => item == ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_MeterType>(valueId).ToString()));
        this.OnPropertyChanged("MeterType");
        this._physicalQuantity = this.PhysicalQuantitiesEnumerable.FirstOrDefault<string>((Func<string, bool>) (item => item == ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_PhysicalQuantity>(valueId).ToString()));
        this.OnPropertyChanged("PhysicalQuantity");
        this._calculation = this.CalculationEnumerable.FirstOrDefault<string>((Func<string, bool>) (item => item == ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Calculation>(valueId).ToString()));
        this.OnPropertyChanged("Calculation");
        this._calculationStart = this.CalculationStartEnumerable.FirstOrDefault<string>((Func<string, bool>) (item => item == ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_CalculationStart>(valueId).ToString()));
        this.OnPropertyChanged("CalculationStart");
        this._storageInterval = this.StorageIntervalEnumerable.FirstOrDefault<string>((Func<string, bool>) (item => item == ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_StorageInterval>(valueId).ToString()));
        this.OnPropertyChanged("StorageInterval");
        this._creation = this.CreationEnumerable.FirstOrDefault<string>((Func<string, bool>) (item => item == ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Creation>(valueId).ToString()));
        this.OnPropertyChanged("Creation");
        this._ruleIndex = (int) ValueIdent.ValueIdPart_Get<ValueIdent.ValueIdPart_Index>(valueId);
        this.OnPropertyChanged("RuleIndex");
        this.Timepoint = rule.StorageTimeParam;
        this.TimepointModification = rule.StorageTimeTranslation.ToString();
        this.Multiplier = rule.Multiplier;
        this.RuleOrder = rule.RuleOrder;
      }
      if (!this.IsSubDeviceChecked)
        return;
      this.SpecialTranslation = rule.SpecialTranslation.ToString();
      this.SubDeviceIndex = rule.SubDeviceIndex;
      this.SubDeviceZDFKey = rule.SubDeviceAttributeIdentifier;
    }

    private void EnableDisableControls()
    {
      this.IsTranslateToGroupEnabled = this._isEditMode;
      this.IsValueSettingsGroupEnabled = this._isEditMode;
      this.IsSubDeviceGroupEnabled = this._isEditMode;
      this.IsZDFKeyEnabled = this._isEditMode;
      this.IsDeviceTypeEnabled = this._isEditMode;
      this.IsDeleteButtonEnabled = !this._isEditMode && this._isItemSelected;
      this.IsEditButtonEnabled = !this._isEditMode && this._isItemSelected;
      this.IsSaveButtonEnabled = this._isEditMode;
      this.IsCancelButtonEnabled = this._isEditMode;
    }

    private void LoadTranslationRulesList()
    {
      string manufacturer = this._manufacturer ?? "";
      string medium = "";
      if (!string.IsNullOrEmpty(this._medium))
        medium = Enum.GetValues(typeof (DeviceMediumEnum)).Cast<DeviceMediumEnum>().ToList<DeviceMediumEnum>().FirstOrDefault<DeviceMediumEnum>((Func<DeviceMediumEnum, bool>) (item => item.ToString() == this._medium)).ToString();
      this.TranslationRules = TranslationRulesManager.Instance.LoadRules(manufacturer, medium, this._versionMin, this._versionMax);
    }

    private void ClearFields()
    {
      this._selectedItem = (TranslationRule) null;
      this.OnPropertyChanged("SelectedItem");
      this._isItemSelected = false;
      this.ZDFKey = (string) null;
      this._meterType = (string) null;
      this.OnPropertyChanged("MeterType");
      this._physicalQuantity = (string) null;
      this.OnPropertyChanged("PhysicalQuantity");
      this._calculation = (string) null;
      this.OnPropertyChanged("Calculation");
      this._calculationStart = (string) null;
      this.OnPropertyChanged("CalculationStart");
      this._storageInterval = (string) null;
      this.OnPropertyChanged("StorageInterval");
      this._creation = (string) null;
      this.OnPropertyChanged("Creation");
      this._ruleIndex = 0;
      this.OnPropertyChanged("RuleIndex");
      this.ValueIdentifier = "0";
      this.Unit = (string) null;
      this.Timepoint = (string) null;
      this.TimepointModification = (string) null;
      this.Multiplier = 1.0;
      this.RuleOrder = 0;
      this.SpecialTranslation = (string) null;
      this.SubDeviceIndex = 1;
      this.SubDeviceZDFKey = (string) null;
    }

    private TranslationRule GetRuleFromUI()
    {
      TranslationRule ruleFromUi = new TranslationRule();
      ruleFromUi.Manufacturer = this.Manufacturer ?? "";
      Dictionary<string, string> enumElements = EnumHelper.GetEnumElements<DeviceMediumEnum>();
      ruleFromUi.Medium = enumElements.Where<KeyValuePair<string, string>>((Func<KeyValuePair<string, string>, bool>) (item => item.Key == this.Medium)).Select<KeyValuePair<string, string>, string>((Func<KeyValuePair<string, string>, string>) (item => item.Key)).FirstOrDefault<string>();
      TranslationRule translationRule1 = ruleFromUi;
      int? nullable = this.VersionMin;
      int num1 = nullable ?? 0;
      translationRule1.VersionMin = num1;
      TranslationRule translationRule2 = ruleFromUi;
      nullable = this.VersionMax;
      int num2 = nullable ?? 0;
      translationRule2.VersionMax = num2;
      ruleFromUi.MBusZDF = this.ZDFKey;
      ruleFromUi.ValueIdent = this.IsMainChecked ? long.Parse(this.ValueIdentifier) : 0L;
      ruleFromUi.StorageTimeParam = this.IsMainChecked ? this.Timepoint : (string) null;
      if (this.IsMainChecked)
      {
        TranslationRule translationRule3 = ruleFromUi;
        Type enumType = typeof (SpecialStorageTimeTranslation);
        string str = this.TimepointModification;
        if (str == null)
        {
          List<string> modificationList = this.TimepointModificationList;
          str = modificationList != null ? modificationList.First<string>((Func<string, bool>) (item => item == "None")) : (string) null;
        }
        int num3 = (int) Enum.Parse(enumType, str);
        translationRule3.StorageTimeTranslation = (SpecialStorageTimeTranslation) num3;
        ruleFromUi.SubDeviceIndex = 0;
        ruleFromUi.Multiplier = this.Multiplier;
        ruleFromUi.RuleOrder = this.RuleOrder;
      }
      if (this.IsSubDeviceChecked)
      {
        ruleFromUi.SpecialTranslation = (ZR_ClassLibrary.SpecialTranslation) Enum.Parse(typeof (ZR_ClassLibrary.SpecialTranslation), this.SpecialTranslation);
        ruleFromUi.SubDeviceIndex = this.SubDeviceIndex;
        ruleFromUi.SubDeviceAttributeIdentifier = this.SubDeviceZDFKey;
      }
      return ruleFromUi;
    }

    public ICommand NewRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this._isEditMode = true;
          this.SelectedItem = (TranslationRule) null;
          this._isItemSelected = false;
          this.EnableDisableControls();
          this._isNewRule = new bool?(true);
        }));
      }
    }

    public ICommand DeleteRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_Warning_Title), (IParameter) new ConstructorArgument("message", (object) Resources.MSS_TranslationRules_DeleteRuleDialog), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) true)));
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          bool flag = TranslationRulesManager.Instance.DeleteRule(this.SelectedItem);
          this._isEditMode = false;
          this.ClearFields();
          this.InitUI();
          this.SelectedItem = this.TranslationRules.FirstOrDefault<TranslationRule>();
          this._isItemSelected = this.SelectedItem != null;
          if (!this._isItemSelected)
            this.EnableDisableControls();
          if (!flag)
            this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_Warning_Title), (IParameter) new ConstructorArgument("message", (object) Resources.MSS_TranslationRules_UnableToDeleteRule), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) false)));
        }));
      }
    }

    public ICommand ClearRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.ClearFields();
          this._isNewRule = new bool?();
        }));
      }
    }

    public ICommand EditRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this._isEditMode = true;
          this.EnableDisableControls();
          this._isNewRule = new bool?(false);
        }));
      }
    }

    public ICommand ShowAllRules
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          bool? nullable = parameter is CheckBox checkBox2 ? checkBox2.IsChecked : new bool?();
          if (!nullable.HasValue || !nullable.Value)
            return;
          string receivedManufacturer = this._receivedManufacturer;
          string receivedMedium = this._receivedMedium;
          this._receivedManufacturer = "";
          this._receivedMedium = "UNKNOWN";
          this.InitUI();
          this._receivedManufacturer = receivedManufacturer;
          this._receivedMedium = receivedMedium;
        }));
      }
    }

    public ICommand SaveRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (this.Medium == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_TranslationRules_MediumMandatory);
          }
          else
          {
            bool flag = false;
            this._isEditMode = false;
            this.EnableDisableControls();
            if (this.IsMainChecked)
            {
              if (this._isNewRule.HasValue && this.IsValid)
                flag = this._isNewRule.Value ? TranslationRulesManager.Instance.CreateRule(this.GetRuleFromUI()) : TranslationRulesManager.Instance.UpdateRule(this.SelectedItem, this.GetRuleFromUI());
            }
            else if (this.IsSubDeviceChecked)
              flag = !string.IsNullOrEmpty(this._zdfKey) && !string.IsNullOrEmpty(this._specialTranslation) && (this._isNewRule.Value ? TranslationRulesManager.Instance.CreateRule(this.GetRuleFromUI()) : TranslationRulesManager.Instance.UpdateRule(this.SelectedItem, this.GetRuleFromUI()));
            this.MessageUserControl = flag ? MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_TranslationRule_Save_Successful) : MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_TranslationRule_Save_Error);
            this._selectedItem = (TranslationRule) null;
            this.OnPropertyChanged("SelectedItem");
            this._isNewRule = new bool?();
            this.ClearFields();
            this.LoadTranslationRulesList();
            this.IsShowAllRulesChecked = false;
          }
        }));
      }
    }

    public ICommand CancelRuleCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this._isEditMode = false;
          this.EnableDisableControls();
          this.ClearFields();
        }));
      }
    }
  }
}

