
--- IProgressBarUpdater.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.Ctrls.IProgressBarUpdater
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Events;

#nullable disable
namespace MSS_Client.ViewModel.Orders.Ctrls
{
  public interface IProgressBarUpdater
  {
    void Start(ProgressBarCtrl progressBarCtrl);

    void UpdateOnItemDone(ProgressBarItemDone obj);

    void UpdateOnHarwareEvent(ProgressEvent obj);
  }
}


--- ListProgressBarUpdater.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.Ctrls.ListProgressBarUpdater
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Events;
using MSS.Localisation;
using System;
using System.Collections.Generic;
using System.Linq;

#nullable disable
namespace MSS_Client.ViewModel.Orders.Ctrls
{
  public class ListProgressBarUpdater : IProgressBarUpdater
  {
    private readonly Dictionary<Guid, string> _items;
    private ProgressBarCtrl _progressBarCtrl;

    public ListProgressBarUpdater(Dictionary<Guid, string> items)
    {
      this._items = new Dictionary<Guid, string>((IDictionary<Guid, string>) items);
    }

    public void UpdateOnHarwareEvent(ProgressEvent obj)
    {
    }

    public void UpdateOnItemDone(ProgressBarItemDone proccesedItem)
    {
      this.RemoveItem(proccesedItem.Item);
      if (this._items.Count == 0)
      {
        this.ResetProgressBar();
      }
      else
      {
        this._progressBarCtrl.ProgressBarValue = this._progressBarCtrl.ProgressBarTotal - this._items.Count;
        this._progressBarCtrl.ProgressDialogMessage = Resources.ExecuteReadingOrder_ReadMeters + " " + (object) this._progressBarCtrl.ProgressBarValue + " " + Resources.ExecuteReadingOrder_of + " " + (object) this._progressBarCtrl.ProgressBarTotal;
      }
    }

    private void RemoveItem(string proccesedItem)
    {
      foreach (Guid key in this._items.Where<KeyValuePair<Guid, string>>((Func<KeyValuePair<Guid, string>, bool>) (pair => pair.Value == proccesedItem)).Select<KeyValuePair<Guid, string>, Guid>((Func<KeyValuePair<Guid, string>, Guid>) (pair => pair.Key)).ToList<Guid>())
        this._items.Remove(key);
    }

    public void ResetProgressBar()
    {
      this._items.Clear();
      this._progressBarCtrl.ResetProgressBar();
    }

    public void Start(ProgressBarCtrl progressBarCtrl)
    {
      progressBarCtrl.ProgressBarTotal = this._items.Count;
      progressBarCtrl.ProgressBarVisibility = true;
      progressBarCtrl.ProgressDialogMessage = Resources.ExecuteReadingOrder_ReadMeters;
      this._progressBarCtrl = progressBarCtrl;
    }
  }
}


--- PercentProgressBarUpdater.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.Ctrls.PercentProgressBarUpdater
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Events;
using MSS.Localisation;

#nullable disable
namespace MSS_Client.ViewModel.Orders.Ctrls
{
  public class PercentProgressBarUpdater : IProgressBarUpdater
  {
    private ProgressBarCtrl _progressBarCtrl;

    public void Start(ProgressBarCtrl progressBarCtrl)
    {
      progressBarCtrl.ProgressBarTotal = 100;
      progressBarCtrl.ProgressBarVisibility = true;
      progressBarCtrl.ProgressDialogMessage = Resources.ExecuteReadingOrder_ReadMeters;
      this._progressBarCtrl = progressBarCtrl;
    }

    public void UpdateOnHarwareEvent(ProgressEvent obj)
    {
      int num = obj.Value;
      if (num == 100)
      {
        this._progressBarCtrl.ResetProgressBar();
      }
      else
      {
        this._progressBarCtrl.ProgressBarValue = num;
        this._progressBarCtrl.ProgressDialogMessage = Resources.ExecuteReadingOrder_ReadMeters + " " + (object) num + "%";
      }
    }

    public void UpdateOnItemDone(ProgressBarItemDone proccesedItem)
    {
      this._progressBarCtrl.ResetProgressBar();
    }
  }
}


--- ProgressBarCtrl.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.Ctrls.ProgressBarCtrl
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Events;
using MSS.Interfaces;
using MVVM.ViewModel;
using System;

#nullable disable
namespace MSS_Client.ViewModel.Orders.Ctrls
{
  public class ProgressBarCtrl : ValidationViewModelBase
  {
    private bool _progressBarVisibility;
    private int _progressBarValue;
    private int _progressBarTotal;
    private string _progressDialogMessage = string.Empty;
    private IProgressBarUpdater _progressBarUpdater;

    public ProgressBarCtrl()
    {
      EventPublisher.Register<ProgressEvent>(new Action<ProgressEvent>(this.UpdateOnHarwareEvent));
      EventPublisher.Register<ProgressBarItemDone>(new Action<ProgressBarItemDone>(this.UpdateOnItemDone));
    }

    public void Start(IProgressBarUpdater progressBarUpdater)
    {
      this._progressBarUpdater = progressBarUpdater;
      this._progressBarUpdater?.Start(this);
    }

    public virtual void UpdateOnItemDone(ProgressBarItemDone obj)
    {
      this._progressBarUpdater?.UpdateOnItemDone(obj);
    }

    public virtual void UpdateOnHarwareEvent(ProgressEvent obj)
    {
      this._progressBarUpdater?.UpdateOnHarwareEvent(obj);
    }

    public virtual void ResetProgressBar()
    {
      this.ProgressDialogMessage = string.Empty;
      this.ProgressBarVisibility = false;
      this.ProgressBarTotal = 0;
      this.ProgressBarValue = 0;
      this._progressBarUpdater = (IProgressBarUpdater) null;
      EventPublisher.Publish<ProgressFinished>(new ProgressFinished(), (IViewModel) this);
    }

    public bool ProgressBarVisibility
    {
      get => this._progressBarVisibility;
      set
      {
        this._progressBarVisibility = value;
        this.OnPropertyChanged(nameof (ProgressBarVisibility));
      }
    }

    public int ProgressBarValue
    {
      get => this._progressBarValue;
      set
      {
        this._progressBarValue = value;
        this.OnPropertyChanged(nameof (ProgressBarValue));
      }
    }

    public int ProgressBarTotal
    {
      get => this._progressBarTotal;
      set
      {
        this._progressBarTotal = value;
        this.OnPropertyChanged(nameof (ProgressBarTotal));
      }
    }

    public string ProgressDialogMessage
    {
      get => this._progressDialogMessage;
      set
      {
        this._progressDialogMessage = value;
        this.OnPropertyChanged(nameof (ProgressDialogMessage));
      }
    }
  }
}

