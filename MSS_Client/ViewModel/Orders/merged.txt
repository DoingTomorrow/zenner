
--- AssignMetersViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.AssignMetersViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.DIConfiguration;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Windows;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  internal class AssignMetersViewModel : ViewModelBase
  {
    private readonly IWindowFactory _windowFactory;
    private StructureNodeDTO _structureNode;
    private IRepositoryFactory _repositoryFactory;
    private string _subtitle;
    private string _busyContent;
    private bool _showProgressCircle;
    private ViewModelBase _messageUserControl;
    private string _lastStartedOn;
    private string _lastReadResultOn;
    private string _lastMeterAssignedOn;
    private string _lastMeterFromEntranceAssigned;

    public AssignMetersViewModel(
      IWindowFactory windowFactory,
      StructureNodeDTO node,
      IRepositoryFactory repositoryFactory)
    {
      this._windowFactory = windowFactory;
      this._structureNode = node;
      this._repositoryFactory = repositoryFactory;
      if (node.NodeType.Name == "MinomatMaster")
        this._subtitle = Resources.MSS_Master + ": " + (node.Entity != null ? ((MinomatSerializableDTO) node.Entity).RadioId : "");
      if (node.NodeType.Name == "MinomatSlave")
        this._subtitle = Resources.MSS_Slave + ": " + (node.Entity != null ? ((MinomatSerializableDTO) node.Entity).RadioId : "");
      this._lastStartedOn = Resources.AssignMeters_Expert_LastStartedOn;
      this._lastReadResultOn = Resources.AssignMeters_Expert_LastReadResultOn;
      this._lastMeterAssignedOn = Resources.AssignMeters_Expert_LastMeterAssignedOn;
      this._lastMeterFromEntranceAssigned = Resources.AssignMeters_User_LastAssignedMeterOn;
    }

    public ICommand ManuallyAssignMetersExpertCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<ManuallyAssignMetersViewModel>((IParameter) new ConstructorArgument("node", (object) this._structureNode), (IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory)))));
      }
    }

    public List<string> GetEntrancesList => new List<string>();

    public ICommand StartTestReceptionCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.BusyContent = "Starting test reception...";
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            Thread.Sleep(4000);
            this.ShowProgressCircle = false;
            Application.Current.Dispatcher.Invoke((Action) (() =>
            {
              this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_SuccessMessage);
              this.LastStartedOn = Resources.AssignMeters_Expert_LastStartedOn + " " + (object) DateTime.Now;
            }));
          }));
        }));
      }
    }

    public ICommand ReadTestReceptionCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.BusyContent = "Reading test reception...";
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            Thread.Sleep(4000);
            this.ShowProgressCircle = false;
            Application.Current.Dispatcher.Invoke((Action) (() =>
            {
              this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_SuccessMessage);
              this.LastReadResultOn = Resources.AssignMeters_Expert_LastReadResultOn + " " + (object) DateTime.Now;
            }));
          }));
        }));
      }
    }

    public ICommand AssignMetersExpertCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.BusyContent = "Assigning meters...";
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            Thread.Sleep(4000);
            this.ShowProgressCircle = false;
            Application.Current.Dispatcher.Invoke((Action) (() =>
            {
              this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_SuccessMessage);
              this.LastMeterAssignedOn = Resources.AssignMeters_Expert_LastMeterAssignedOn + " " + (object) DateTime.Now;
            }));
          }));
        }));
      }
    }

    public ICommand AssignMetersFromEntrancesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.BusyContent = "Assigning meters from selected entrances...";
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            Thread.Sleep(4000);
            this.ShowProgressCircle = false;
            Application.Current.Dispatcher.Invoke((Action) (() =>
            {
              this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_SuccessMessage);
              this.LastMeterFromEntranceAssigned = Resources.AssignMeters_User_LastAssignedMeterOn + " " + (object) DateTime.Now;
            }));
          }));
        }));
      }
    }

    public string Subtitle => this._subtitle;

    public string BusyContent
    {
      get => this._busyContent;
      set
      {
        this._busyContent = value;
        this.OnPropertyChanged(nameof (BusyContent));
      }
    }

    public bool ShowProgressCircle
    {
      get => this._showProgressCircle;
      set
      {
        this._showProgressCircle = value;
        this.OnPropertyChanged(nameof (ShowProgressCircle));
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public string LastStartedOn
    {
      get => this._lastStartedOn;
      set
      {
        this._lastStartedOn = value;
        this.OnPropertyChanged(nameof (LastStartedOn));
      }
    }

    public string LastReadResultOn
    {
      get => this._lastStartedOn;
      set
      {
        this._lastStartedOn = value;
        this.OnPropertyChanged(nameof (LastReadResultOn));
      }
    }

    public string LastMeterAssignedOn
    {
      get => this._lastStartedOn;
      set
      {
        this._lastStartedOn = value;
        this.OnPropertyChanged(nameof (LastMeterAssignedOn));
      }
    }

    public string LastMeterFromEntranceAssigned
    {
      get => this._lastMeterFromEntranceAssigned;
      set
      {
        this._lastMeterFromEntranceAssigned = value;
        this.OnPropertyChanged(nameof (LastMeterFromEntranceAssigned));
      }
    }
  }
}


--- CreateEditOrderViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.CreateEditOrderViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.OrdersManagement;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.DataFilters;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Orders;
using MSS.Core.Model.Structures;
using MSS.Core.Model.UsersManagement;
using MSS.DIConfiguration;
using MSS.DTO.Meters;
using MSS.DTO.Orders;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.DataFilters;
using MSS_Client.ViewModel.Structures;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Windows;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class CreateEditOrderViewModel : ValidationViewModelBase
  {
    private readonly IUserRepository _userRepository;
    private readonly IRepository<StructureNodeLinks> _structureNodeLinksRepository;
    private readonly IRepository<StructureNode> _structureNodeRepository;
    private readonly IRepository<StructureNodeType> _structureNodeTypeRepository;
    private readonly IRepository<Order> _orderRepository;
    private readonly IRepository<MeterReplacementHistory> _meterReplacementHistoryRepository;
    private readonly IRepository<MSS.Core.Model.DataFilters.Filter> _filterRepository;
    private readonly IWindowFactory _windowFactory;
    private readonly ISession _nhSession;
    private readonly OrderDTO _selectedOrder;
    private OrderTypeEnum _orderType;
    private bool _instNumberUniquenessChecked;
    private bool _instNoExists;
    private readonly IRepositoryFactory _repositoryFactory;
    private IEnumerable<MSS.Core.Model.DataFilters.Filter> _filterCollection;
    private Guid _selectedFilterId;
    private string _orderDialogTitle;
    private bool _isEditStructureButtonVisible;
    private bool _isReasonVisible;
    private string _installationNumberValue;
    private string _deviceNumberValue;
    private string _detailValue;
    private bool _exportedValue;
    private DateTime? _dueDateValue;
    private StatusOrderEnum _selectedStatus;
    private CloseOrderReasonsEnum _selectedReason;
    private Guid _rootStructureNodeId;
    private byte[] _structureBytes;
    private StructureTypeEnum? _structureType;
    private User _selectedUser;
    private ViewModelBase _messageUserControl;
    private ObservableCollection<User> _userList;
    private bool _printButtonEnabled;
    private bool _editStructureButtonVisibility;
    private string _structureInfo;
    private int _dueDateYear;

    [Inject]
    public CreateEditOrderViewModel(
      OrderDTO selectedOrder,
      OrderTypeEnum orderType,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
    {
      StructuresHelper.InitializeMappings();
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._selectedOrder = selectedOrder;
      this._userRepository = repositoryFactory.GetUserRepository();
      this._structureNodeLinksRepository = repositoryFactory.GetRepository<StructureNodeLinks>();
      this._structureNodeRepository = repositoryFactory.GetRepository<StructureNode>();
      this._structureNodeTypeRepository = repositoryFactory.GetRepository<StructureNodeType>();
      this._orderRepository = repositoryFactory.GetRepository<Order>();
      this._meterReplacementHistoryRepository = repositoryFactory.GetRepository<MeterReplacementHistory>();
      this._filterRepository = repositoryFactory.GetRepository<MSS.Core.Model.DataFilters.Filter>();
      this._nhSession = repositoryFactory.GetSession();
      bool flag1 = false;
      this.FilterCollection = (IEnumerable<MSS.Core.Model.DataFilters.Filter>) this._filterRepository.GetAll().OrderBy<MSS.Core.Model.DataFilters.Filter, string>((Func<MSS.Core.Model.DataFilters.Filter, string>) (f => f.Name));
      this.SelectedFilterId = selectedOrder != null ? selectedOrder.FilterId : Guid.Empty;
      int num;
      if (orderType == OrderTypeEnum.ReadingOrder)
      {
        Guid selectedFilterId = this.SelectedFilterId;
        num = this.SelectedFilterId == Guid.Empty ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        MSS.Core.Model.DataFilters.Filter filter = this.FilterCollection.FirstOrDefault<MSS.Core.Model.DataFilters.Filter>((Func<MSS.Core.Model.DataFilters.Filter, bool>) (item => item.Name == "Any"));
        this.SelectedFilterId = filter != null ? filter.Id : Guid.Empty;
      }
      this.PrintButtonEnabled = true;
      this._orderType = orderType;
      switch (this._orderType)
      {
        case OrderTypeEnum.ReadingOrder:
          this.OrderDialogTitle = this._selectedOrder != null ? CultureResources.GetValue("MSS_Client_Orders_EditReadingOrder_Title") : CultureResources.GetValue("MSS_Client_Orders_CreateReadingOrder_Title");
          this.IsUserListBoxVisible = true;
          this.IsUserComboBoxVisible = true;
          this.IsYearDropDownVisible = true;
          this.IsReadingOrderDueDateYearEnabled = true;
          this.NumberText = CultureResources.GetValue("MSS_Client_OrderControl_Header_ReadingNumber");
          this.IsUserDropdownEnabled = this._selectedOrder == null || !this._selectedOrder.Exported;
          if (selectedOrder != null)
          {
            flag1 = selectedOrder.StructureBytes == null;
            break;
          }
          break;
        case OrderTypeEnum.InstallationOrder:
          this.OrderDialogTitle = this._selectedOrder != null ? CultureResources.GetValue("MSS_Client_Orders_EditInstallationOrder_Title") : CultureResources.GetValue("MSS_Client_Orders_CreateInstallationOrder_Title");
          this.IsUserListBoxVisible = true;
          this.IsUserComboBoxVisible = false;
          this.IsYearDropDownVisible = false;
          this.IsUserListBoxEnabled = this._selectedOrder == null || !this._selectedOrder.Exported;
          this.NumberText = CultureResources.GetValue("MSS_Client_OrderControl_Header_InstallationNumber");
          if (selectedOrder != null)
          {
            Guid rootStructureNodeId = selectedOrder.RootStructureNodeId;
            this._repositoryFactory.GetSession().Clear();
            List<MeterReplacementHistorySerializableDTO> historySerializableDto = StructuresHelper.GetMeterReplacementHistorySerializableDTO(this._meterReplacementHistoryRepository.GetAll());
            flag1 = !OrdersHelper.GetStructureNodeDTOForRootNode(rootStructureNodeId, this._structureNodeLinksRepository, this._structureNodeRepository, this._structureNodeTypeRepository, this._nhSession, (IList<MeterReplacementHistorySerializableDTO>) historySerializableDto).Any<StructureNodeDTO>();
            break;
          }
          break;
      }
      bool flag2 = this._selectedOrder != null;
      this.IsReadingOrder = orderType == OrderTypeEnum.ReadingOrder;
      this.IsInstallationOrder = orderType == OrderTypeEnum.InstallationOrder;
      this.IsAddOrderButtonVisible = !flag2;
      this.IsEditOrderButtonVisible = flag2;
      this.IsEditStructureButtonVisible = !flag1 & flag2;
      this.IsAssignStructureButtonVisible = !flag2;
      this.IsPrintButtonVisible = flag2;
      if (flag2)
      {
        this.IsInstallationOrderEdit = true;
        this.InstallationNumberValue = selectedOrder.InstallationNumber;
        this.DetailValue = selectedOrder.Details;
        this.ExportedValue = selectedOrder.Exported;
        this.SelectedStatus = selectedOrder.Status;
        IEnumerable<User> source = selectedOrder.UserIds != null ? selectedOrder.UserIds.Select<Guid, User>((Func<Guid, User>) (userID => this._userRepository.GetById((object) userID))) : (IEnumerable<User>) new List<User>();
        this._dueDateValue = new DateTime?(selectedOrder.DueDate);
        switch (orderType)
        {
          case OrderTypeEnum.ReadingOrder:
            this.SelectedUser = source.FirstOrDefault<User>();
            if (selectedOrder.StructureBytes != null)
              this.StructureInfo = selectedOrder.RootNodeName + "\n" + selectedOrder.RootNodeDescription;
            this._dueDateYear = selectedOrder.DueDate.Year;
            this.IsReadingOrderDueDateYearEnabled = false;
            break;
          case OrderTypeEnum.InstallationOrder:
            this.SelectedUser = source.FirstOrDefault<User>();
            this.StructureInfo = selectedOrder.RootNodeName + "\n" + selectedOrder.RootNodeDescription;
            this.IsReadingOrderDueDateYearEnabled = false;
            break;
        }
        this.DeviceNumberValue = selectedOrder.DeviceNumber;
        this.SelectedReason = selectedOrder.CloseOrderReason;
        this.RootStructureNodeId = selectedOrder.RootStructureNodeId;
        this.StructureBytes = selectedOrder.StructureBytes;
        this.StructureType = selectedOrder.StructureType;
      }
      else
      {
        this._dueDateValue = new DateTime?(DateTime.Now);
        this._dueDateYear = DateTime.Now.Year;
        this.SelectedStatus = StatusOrderEnum.New;
        this.InstallationNumberValue = this.GetNextInstallationNumber();
        this.UserList = new ObservableCollection<User>();
      }
      EventPublisher.Register<OrderUpdated>(new Action<OrderUpdated>(this.RefreshOrder));
      EventPublisher.Register<StructureBytesUpdated>(new Action<StructureBytesUpdated>(this.RefreshStructureBytes));
      EventPublisher.Register<StructureRootUpdated>(new Action<StructureRootUpdated>(this.RefreshStructure));
      EventPublisher.Register<RefreshFilters>(new Action<RefreshFilters>(this.RefreshFilter));
      this.UsersCollection = this.UserCollection() as ObservableCollection<User>;
    }

    private string GetNextInstallationNumber()
    {
      bool flag = true;
      string installationNumber = (string) null;
      while (flag)
      {
        string number1 = MSSHelper.GenerateRandomNumber(12);
        flag = this._orderRepository.Exists((Expression<Func<Order, bool>>) (o => o.InstallationNumber == number1));
        if (!flag)
          installationNumber = number1;
      }
      return installationNumber;
    }

    private void RefreshFilter(RefreshFilters obj)
    {
      this._nhSession.Clear();
      this.FilterCollection = (IEnumerable<MSS.Core.Model.DataFilters.Filter>) this._filterRepository.GetAll().OrderBy<MSS.Core.Model.DataFilters.Filter, string>((Func<MSS.Core.Model.DataFilters.Filter, string>) (f => f.Name));
      MSS.Core.Model.DataFilters.Filter filter = this.FilterCollection.FirstOrDefault<MSS.Core.Model.DataFilters.Filter>((Func<MSS.Core.Model.DataFilters.Filter, bool>) (item => item.Id == this.SelectedFilterId));
      this.SelectedFilterId = filter != null ? filter.Id : Guid.Empty;
    }

    private void RefreshOrder(OrderUpdated update)
    {
      if (!(update.Guid != Guid.Empty))
        return;
      this.RootStructureNodeId = update.SelectedNodeDTO.Id;
      this.StructureType = update.StructureType;
      if (this._orderType == OrderTypeEnum.ReadingOrder)
      {
        IOrderedEnumerable<StructureNodeDTO> collection = StructuresHelper.Descendants(update.SelectedNodeDTO).OrderBy<StructureNodeDTO, int>((Func<StructureNodeDTO, int>) (n => n.OrderNr));
        Structure structure = this.GetStructureManagerInstance().GetStructure(new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) collection));
        this.StructureBytes = StructuresHelper.SerializeStructure(structure);
        this.StructureInfo = this.GetStructureManagerInstance().GetNameAndDescriptionRootForStructureBytes(this.StructureBytes);
        StructureTypeEnum? structureType = update.StructureType;
        StructureTypeEnum structureTypeEnum = StructureTypeEnum.Fixed;
        if (structureType.GetValueOrDefault() == structureTypeEnum && structureType.HasValue)
        {
          DateTime? structureDueDate = this.GetStructureManagerInstance().GetStructureDueDate(structure);
          DateTime? nullable = structureDueDate;
          DateTime minValue = DateTime.MinValue;
          this.DueDateValue = (nullable.HasValue ? (nullable.GetValueOrDefault() > minValue ? 1 : 0) : 0) != 0 ? structureDueDate : this.DueDateValue;
          this.ComputeDueDateYear();
        }
      }
      else
      {
        this.StructureInfo = this.GetStructureManagerInstance().GetNameAndDescriptionForRootNodeID(this.RootStructureNodeId);
        StructureTypeEnum? structureType = update.StructureType;
        StructureTypeEnum structureTypeEnum = StructureTypeEnum.Fixed;
        if (structureType.GetValueOrDefault() == structureTypeEnum && structureType.HasValue)
        {
          DateTime? structureDueDate = this.GetStructureManagerInstance().GetStructureDueDate(this.RootStructureNodeId);
          DateTime minValue = DateTime.MinValue;
          this.DueDateValue = (structureDueDate.HasValue ? (structureDueDate.GetValueOrDefault() > minValue ? 1 : 0) : 0) != 0 ? this.GetStructureManagerInstance().GetStructureDueDate(this.RootStructureNodeId) : this.DueDateValue;
        }
      }
    }

    private void ComputeDueDateYear()
    {
      DateTime t1;
      ref DateTime local = ref t1;
      DateTime now = DateTime.Now;
      int year = now.Year;
      now = this.DueDateValue.Value;
      int month = now.Month;
      now = this.DueDateValue.Value;
      int day = now.Day;
      local = new DateTime(year, month, day);
      this.DueDateYear = DateTime.Compare(t1, DateTime.Now) > 0 ? DateTime.Now.Year - 1 : DateTime.Now.Year;
    }

    private void RefreshStructure(StructureRootUpdated update)
    {
      this._repositoryFactory.GetSession().Clear();
      if (!(update.RootNodeId != Guid.Empty) || this._orderType != OrderTypeEnum.InstallationOrder)
        return;
      Guid rootNodeId = update.RootNodeId;
      this.StructureInfo = this.GetStructureManagerInstance().GetNameAndDescriptionForRootNodeID(rootNodeId);
    }

    private void RefreshStructureBytes(StructureBytesUpdated update)
    {
      if (update.StructureBytes == null)
        return;
      this.StructureBytes = update.StructureBytes;
      if (this._selectedOrder != null)
        this._selectedOrder.StructureBytes = this.StructureBytes;
      this.StructureInfo = this.GetStructureManagerInstance().GetNameAndDescriptionRootForStructureBytes(this.StructureBytes);
      int num;
      if (this._orderType == OrderTypeEnum.ReadingOrder)
      {
        StructureTypeEnum? structureType = this.StructureType;
        StructureTypeEnum structureTypeEnum = StructureTypeEnum.Fixed;
        num = structureType.GetValueOrDefault() == structureTypeEnum ? (structureType.HasValue ? 1 : 0) : 0;
      }
      else
        num = 0;
      if (num != 0)
        this.DueDateValue = this.GetStructureManagerInstance().GetStructureDueDate(this.StructureBytes);
    }

    private OrdersManager GetOrderManagerInstance() => new OrdersManager(this._repositoryFactory);

    private StructuresManager GetStructureManagerInstance()
    {
      return new StructuresManager(this._repositoryFactory);
    }

    private UsersManager GetUsersManagerInstance() => new UsersManager(this._repositoryFactory);

    public override List<string> ValidateProperty(string propertyName)
    {
      string propertyName1 = this.GetPropertyName<string>((Expression<Func<string>>) (() => this.InstallationNumberValue));
      if (!(propertyName == propertyName1))
        return new List<string>();
      ICollection<string> validationErrors;
      this.ValidateInstallationNr(this.InstallationNumberValue, this._selectedOrder, out validationErrors);
      this.IsValid &= validationErrors.Count <= 0;
      return validationErrors.ToList<string>();
    }

    public bool ValidateInstallationNr(
      string installationNumberValue,
      OrderDTO selectedOrder,
      out ICollection<string> validationErrors)
    {
      validationErrors = (ICollection<string>) new List<string>();
      if (!this._instNumberUniquenessChecked)
      {
        int num;
        if (selectedOrder == null)
          num = this._orderRepository.Exists((Expression<Func<Order, bool>>) (t => t.InstallationNumber == installationNumberValue)) ? 1 : 0;
        else
          num = this._orderRepository.Exists((Expression<Func<Order, bool>>) (t => t.Id != selectedOrder.Id && t.InstallationNumber == installationNumberValue)) ? 1 : 0;
        this._instNoExists = num != 0;
        this._instNumberUniquenessChecked = true;
      }
      if (this._instNoExists)
        validationErrors.Add(Resources.MSS_Client_Structures_InstallationNrExisting);
      return validationErrors.Count == 0;
    }

    public IEnumerable<MSS.Core.Model.DataFilters.Filter> FilterCollection
    {
      get => this._filterCollection;
      set
      {
        this._filterCollection = value;
        this.OnPropertyChanged(nameof (FilterCollection));
      }
    }

    public IEnumerable<Rules> FilterRules { get; set; }

    public Guid SelectedFilterId
    {
      get => this._selectedFilterId;
      set
      {
        this._selectedFilterId = value;
        this.OnPropertyChanged(nameof (SelectedFilterId));
        this.FilterRules = (IEnumerable<Rules>) this._repositoryFactory.GetRepository<Rules>().SearchFor((Expression<Func<Rules, bool>>) (x => x.Filter.Id == this._selectedFilterId));
        this.OnPropertyChanged("FilterRules");
      }
    }

    public Guid FilterRuleId { get; set; }

    public string OrderDialogTitle
    {
      get => this._orderDialogTitle;
      set
      {
        this._orderDialogTitle = value;
        this.OnPropertyChanged(nameof (OrderDialogTitle));
      }
    }

    public bool IsAddOrderButtonVisible { get; set; }

    public bool IsEditOrderButtonVisible { get; set; }

    public bool IsEditStructureButtonVisible
    {
      get => this._isEditStructureButtonVisible;
      set
      {
        this._isEditStructureButtonVisible = value;
        this.OnPropertyChanged(nameof (IsEditStructureButtonVisible));
      }
    }

    public bool IsAssignStructureButtonVisible { get; set; }

    public bool IsReadingOrder { get; set; }

    public bool IsInstallationOrder { get; set; }

    public bool IsInstallationOrderEdit { get; set; }

    public bool IsPrintButtonVisible { get; set; }

    public string NumberText { get; set; }

    public bool IsReasonVisible
    {
      get => this._isReasonVisible;
      set
      {
        this._isReasonVisible = value;
        this.OnPropertyChanged(nameof (IsReasonVisible));
      }
    }

    [Required(ErrorMessage = "MSS_Client_Order_CreateOrder_InstallationNrValidation")]
    public string InstallationNumberValue
    {
      get => this._installationNumberValue;
      set
      {
        this._installationNumberValue = value;
        this.OnPropertyChanged(nameof (InstallationNumberValue));
      }
    }

    public string DeviceNumberValue
    {
      get => this._deviceNumberValue;
      set
      {
        this._deviceNumberValue = value;
        this.OnPropertyChanged(nameof (DeviceNumberValue));
      }
    }

    public string DetailValue
    {
      get => this._detailValue;
      set => this._detailValue = value;
    }

    public bool ExportedValue
    {
      get => this._exportedValue;
      set => this._exportedValue = value;
    }

    public DateTime? DueDateValue
    {
      get => this._dueDateValue;
      set
      {
        this._dueDateValue = value;
        this.OnPropertyChanged(nameof (DueDateValue));
      }
    }

    public IEnumerable<StatusOrderEnum> StatusCollection
    {
      get
      {
        return (IEnumerable<StatusOrderEnum>) Enum.GetValues(typeof (StatusOrderEnum)).Cast<StatusOrderEnum>().ToList<StatusOrderEnum>();
      }
    }

    public StatusOrderEnum SelectedStatus
    {
      get => this._selectedStatus;
      set
      {
        this._selectedStatus = value;
        this.IsReasonVisible = this._selectedStatus == StatusOrderEnum.Closed;
        this.OnPropertyChanged(nameof (SelectedStatus));
      }
    }

    public IEnumerable<CloseOrderReasonsEnum> ReasonsCollection
    {
      get
      {
        return (IEnumerable<CloseOrderReasonsEnum>) Enum.GetValues(typeof (CloseOrderReasonsEnum)).Cast<CloseOrderReasonsEnum>().ToList<CloseOrderReasonsEnum>();
      }
    }

    public CloseOrderReasonsEnum SelectedReason
    {
      get => this._selectedReason;
      set
      {
        this._selectedReason = value;
        this.OnPropertyChanged(nameof (SelectedReason));
      }
    }

    public Guid RootStructureNodeId
    {
      get => this._rootStructureNodeId;
      set
      {
        this._rootStructureNodeId = value;
        this.OnPropertyChanged(nameof (RootStructureNodeId));
      }
    }

    public byte[] StructureBytes
    {
      get => this._structureBytes;
      set
      {
        this._structureBytes = value;
        this.OnPropertyChanged(nameof (StructureBytes));
      }
    }

    public StructureTypeEnum? StructureType
    {
      get => this._structureType;
      set
      {
        this._structureType = value;
        if (this._orderType == OrderTypeEnum.InstallationOrder)
        {
          StructureTypeEnum? nullable = value;
          if (nullable.HasValue)
          {
            switch (nullable.GetValueOrDefault())
            {
              case StructureTypeEnum.Physical:
                this.EditStructureButtonVisibility = this.GetUsersManagerInstance().HasRight(OperationEnum.PhysicalStructureEdit.ToString());
                break;
              case StructureTypeEnum.Logical:
                this.EditStructureButtonVisibility = this.GetUsersManagerInstance().HasRight(OperationEnum.LogicalStructureEdit.ToString());
                break;
              case StructureTypeEnum.Fixed:
                this.EditStructureButtonVisibility = this.GetUsersManagerInstance().HasRight(OperationEnum.FixedStructureEdit.ToString());
                break;
            }
          }
        }
        else
          this.EditStructureButtonVisibility = true;
        this.OnPropertyChanged(nameof (StructureType));
      }
    }

    private IEnumerable<User> UserCollection()
    {
      IOrderedEnumerable<User> orderedEnumerable = this._userRepository.GetAllUsers().Where<User>((Func<User, bool>) (x => !x.IsDeactivated && !x.Username.StartsWith("default"))).OrderBy<User, string>((Func<User, string>) (u => u.LastName)).ThenBy<User, string>((Func<User, string>) (u => u.FirstName));
      return this.UserList != null ? (IEnumerable<User>) new ObservableCollection<User>(orderedEnumerable.Where<User>((Func<User, bool>) (x => !this.UserList.Select<User, Guid>((Func<User, Guid>) (y => y.Id)).ToList<Guid>().Contains(x.Id)))) : (IEnumerable<User>) new ObservableCollection<User>((IEnumerable<User>) orderedEnumerable);
    }

    public ObservableCollection<User> UsersCollection { get; set; }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public User SelectedUser
    {
      get => this._selectedUser;
      set
      {
        this._selectedUser = value;
        if (this.SelectedStatus == StatusOrderEnum.Dated || this.SelectedStatus == StatusOrderEnum.New)
          this.SelectedStatus = value != null ? StatusOrderEnum.Dated : StatusOrderEnum.New;
        this.OnPropertyChanged(nameof (SelectedUser));
      }
    }

    public User SelectedUserInListBox
    {
      set
      {
        this.OnPropertyChanged("UserList");
        if (this.SelectedStatus != StatusOrderEnum.Dated && this.SelectedStatus != StatusOrderEnum.New)
          return;
        this.SelectedStatus = this._userList.ToList<User>().Count != 0 ? StatusOrderEnum.Dated : StatusOrderEnum.New;
      }
    }

    public ObservableCollection<User> UserList
    {
      get => this._userList;
      set
      {
        this._userList = value;
        this.OnPropertyChanged(nameof (UserList));
      }
    }

    public bool PrintButtonEnabled
    {
      get => this._printButtonEnabled;
      set
      {
        this._printButtonEnabled = value;
        this.OnPropertyChanged(nameof (PrintButtonEnabled));
      }
    }

    public bool EditStructureButtonVisibility
    {
      get => this._editStructureButtonVisibility;
      set
      {
        this._editStructureButtonVisibility = value;
        this.OnPropertyChanged(nameof (EditStructureButtonVisibility));
      }
    }

    public bool IsUserComboBoxVisible { get; set; }

    public bool IsUserListBoxVisible { get; set; }

    public bool IsUserListBoxEnabled { get; set; }

    public bool IsUserDropdownEnabled { get; set; }

    [Required(ErrorMessage = "MSS_STRUCTURE_REQUIRED")]
    public string StructureInfo
    {
      get => this._structureInfo;
      set
      {
        this._structureInfo = value;
        this.OnPropertyChanged(nameof (StructureInfo));
      }
    }

    public int DueDateYear
    {
      get => this._dueDateYear;
      set
      {
        this._dueDateYear = value;
        this.OnPropertyChanged(nameof (DueDateYear));
      }
    }

    public bool IsYearDropDownVisible { get; set; }

    public bool IsReadingOrderDueDateYearEnabled { get; set; }

    public ICommand AddOrderCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          if (this.IsValid)
          {
            OrdersManager orderManagerInstance = this.GetOrderManagerInstance();
            List<Guid> guidList = new List<Guid>();
            DateTime dateTime1 = new DateTime();
            if (this._selectedUser != null)
              guidList.Add(this._selectedUser.Id);
            switch (this._orderType)
            {
              case OrderTypeEnum.ReadingOrder:
                DateTime? dueDateValue1 = this.DueDateValue;
                DateTime dateTime2;
                if (!dueDateValue1.HasValue)
                {
                  dateTime2 = DateTime.Now;
                }
                else
                {
                  int dueDateYear = this.DueDateYear;
                  dueDateValue1 = this.DueDateValue;
                  int month = dueDateValue1.Value.Month;
                  dueDateValue1 = this.DueDateValue;
                  int day = dueDateValue1.Value.Day;
                  dateTime2 = new DateTime(dueDateYear, month, day);
                }
                dateTime1 = dateTime2;
                break;
              case OrderTypeEnum.InstallationOrder:
                DateTime? dueDateValue2 = this.DueDateValue;
                DateTime now;
                if (!dueDateValue2.HasValue)
                {
                  now = DateTime.Now;
                }
                else
                {
                  dueDateValue2 = this.DueDateValue;
                  now = dueDateValue2.Value;
                }
                dateTime1 = now;
                break;
            }
            orderManagerInstance.CreateOrder(new OrderDTO()
            {
              InstallationNumber = this._installationNumberValue,
              Details = this._detailValue,
              Exported = this._exportedValue,
              Status = this._selectedStatus,
              DueDate = dateTime1,
              RootStructureNodeId = this._rootStructureNodeId,
              StructureType = this._structureType,
              UserIds = guidList,
              OrderType = this._orderType,
              CloseOrderReason = this._selectedReason,
              FilterId = this.SelectedFilterId,
              StructureBytes = this._structureBytes
            }, new bool?(false));
            this.OnRequestClose(true);
          }
          else
            Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DeleteStructure_Warning_Title, Resources.MSS_Client_FillInStructureField_Warning, false)));
        }));
      }
    }

    private bool? UpdateDueDateStructureValue(out bool isOKPressed)
    {
      isOKPressed = true;
      if (this.RootStructureNodeId != Guid.Empty)
      {
        Location basedOnRootNodeId = this.GetOrderManagerInstance().GetLocationBasedOnRootNodeId(this.RootStructureNodeId);
        DateTime? nullable1;
        int num;
        if (basedOnRootNodeId != null)
        {
          nullable1 = this.DueDateValue;
          int month1 = nullable1.Value.Month;
          nullable1 = basedOnRootNodeId.DueDate;
          int month2 = nullable1.Value.Month;
          if (month1 == month2)
          {
            nullable1 = this.DueDateValue;
            int day1 = nullable1.Value.Day;
            nullable1 = basedOnRootNodeId.DueDate;
            int day2 = nullable1.Value.Day;
            if (day1 == day2)
              goto label_5;
          }
          nullable1 = basedOnRootNodeId.DueDate;
          DateTime minValue = DateTime.MinValue;
          num = nullable1.HasValue ? (nullable1.GetValueOrDefault() > minValue ? 1 : 0) : 0;
          goto label_6;
        }
label_5:
        num = 0;
label_6:
        if (num != 0)
        {
          IRepository<StructureNodeLinks> nodeLinksRepository = this._structureNodeLinksRepository;
          ParameterExpression parameterExpression = System.Linq.Expressions.Expression.Parameter(typeof (StructureNodeLinks), "l");
          // ISSUE: method reference
          // ISSUE: method reference
          // ISSUE: method reference
          // ISSUE: method reference
          // ISSUE: method reference
          // ISSUE: method reference
          // ISSUE: method reference
          BinaryExpression left1 = System.Linq.Expressions.Expression.AndAlso((System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Equal((System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Property((System.Linq.Expressions.Expression) parameterExpression, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (StructureNodeLinks.get_ParentNodeId))), (System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Property((System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Constant((object) this, typeof (CreateEditOrderViewModel)), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (CreateEditOrderViewModel.get_RootStructureNodeId))), false, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Guid.op_Equality))), (System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Equal((System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Property((System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Property((System.Linq.Expressions.Expression) parameterExpression, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (StructureNodeLinks.get_RootNode))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (StructureNode.get_Id))), (System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Property((System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Constant((object) this, typeof (CreateEditOrderViewModel)), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (CreateEditOrderViewModel.get_RootStructureNodeId))), false, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Guid.op_Equality))));
          // ISSUE: method reference
          MemberExpression left2 = System.Linq.Expressions.Expression.Property((System.Linq.Expressions.Expression) parameterExpression, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (StructureNodeLinks.get_EndDate)));
          nullable1 = new DateTime?();
          ConstantExpression right1 = System.Linq.Expressions.Expression.Constant((object) nullable1, typeof (DateTime?));
          // ISSUE: method reference
          MethodInfo methodFromHandle = (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (DateTime.op_Equality));
          BinaryExpression right2 = System.Linq.Expressions.Expression.Equal((System.Linq.Expressions.Expression) left2, (System.Linq.Expressions.Expression) right1, false, methodFromHandle);
          Expression<Func<StructureNodeLinks, bool>> predicate = System.Linq.Expressions.Expression.Lambda<Func<StructureNodeLinks, bool>>((System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AndAlso((System.Linq.Expressions.Expression) left1, (System.Linq.Expressions.Expression) right2), parameterExpression);
          if (nodeLinksRepository.SearchFor(predicate).Count <= 0)
            return new bool?(true);
          bool? nullable2 = MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning_UpdateDueDateStructureValue_Title.GetStringValue(), MessageCodes.Warning_UpdateDueDateStructureValue_Message.GetStringValue(), true);
          if (nullable2.HasValue)
            isOKPressed = nullable2.Value;
          return new bool?(isOKPressed);
        }
      }
      return new bool?(false);
    }

    public ICommand EditOrderCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          if (!this.IsValid)
            return;
          OrdersManager orderManagerInstance = this.GetOrderManagerInstance();
          List<Guid> guidList = new List<Guid>();
          DateTime dateTime1 = new DateTime();
          if (this._selectedUser != null)
            guidList.Add(this._selectedUser.Id);
          switch (this._orderType)
          {
            case OrderTypeEnum.ReadingOrder:
              DateTime dateTime2;
              if (!this.DueDateValue.HasValue)
              {
                dateTime2 = DateTime.Now;
              }
              else
              {
                int dueDateYear = this.DueDateYear;
                DateTime? dueDateValue = this.DueDateValue;
                DateTime dateTime3 = dueDateValue.Value;
                int month = dateTime3.Month;
                dueDateValue = this.DueDateValue;
                dateTime3 = dueDateValue.Value;
                int day = dateTime3.Day;
                dateTime2 = new DateTime(dueDateYear, month, day);
              }
              dateTime1 = dateTime2;
              break;
            case OrderTypeEnum.InstallationOrder:
              dateTime1 = this.DueDateValue.HasValue ? this.DueDateValue.Value : DateTime.Now;
              break;
          }
          orderManagerInstance.EditOrder(new OrderDTO()
          {
            Id = this._selectedOrder.Id,
            InstallationNumber = this._installationNumberValue,
            Details = this._detailValue,
            Exported = this._exportedValue,
            Status = this._selectedStatus,
            DueDate = dateTime1,
            RootStructureNodeId = this._rootStructureNodeId,
            StructureType = this._structureType,
            UserIds = guidList,
            OrderType = this._orderType,
            CloseOrderReason = this._selectedReason,
            FilterId = this.SelectedFilterId,
            StructureBytes = this._structureBytes
          }, new bool?(false));
          this.OnRequestClose(true);
        }));
      }
    }

    public ICommand ViewStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<StructureOrdersViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) this._selectedOrder), (IParameter) new ConstructorArgument("orderType", (object) this._selectedOrder.OrderType), (IParameter) new ConstructorArgument("viewMode", (object) true), (IParameter) new ConstructorArgument("selectedRootStructureNodeId", (object) Guid.Empty), (IParameter) new ConstructorArgument("orderDueDate", (object) (this.DueDateValue.HasValue ? new DateTime(this.DueDateYear, this.DueDateValue.Value.Month, this.DueDateValue.Value.Day) : DateTime.Now))))));
      }
    }

    public ICommand FilterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          FilterViewModel filterViewModel = DIConfigurator.GetConfigurator().Get<FilterViewModel>();
          this.FilterCollection = (IEnumerable<MSS.Core.Model.DataFilters.Filter>) this._filterRepository.GetAll().OrderBy<MSS.Core.Model.DataFilters.Filter, string>((Func<MSS.Core.Model.DataFilters.Filter, string>) (f => f.Name));
          this._windowFactory.CreateNewModalDialog((IViewModel) filterViewModel);
        }));
      }
    }

    public ICommand AssignUser
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          User user = parameter as User;
          this.UsersCollection.Remove(user);
          this.UserList.Add(user);
        }));
      }
    }

    public ICommand UnassignUser
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          User user = parameter as User;
          this.UserList.Remove(user);
          this.UsersCollection.Add(user);
        }));
      }
    }

    public ICommand EditStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          OrderDTO selectedOrder = this._selectedOrder;
          OrderTypeEnum orderTypeEnum = selectedOrder != null ? selectedOrder.OrderType : this._orderType;
          bool? nullable = new bool?();
          switch (orderTypeEnum)
          {
            case OrderTypeEnum.ReadingOrder:
              byte[] structureBytes = this.StructureBytes;
              if (structureBytes != null)
              {
                OrderSerializableStructure orderserializablestructure = StructuresHelper.DeserializeStructure(structureBytes);
                Structure structure = this.GetStructureManagerInstance().GetStructure(orderserializablestructure);
                Dictionary<Guid, object> entitiesDictionary = new Dictionary<Guid, object>();
                structure.Locations.ForEach((Action<Location>) (l => entitiesDictionary.Add(l.Id, (object) l)));
                structure.Tenants.ForEach((Action<Tenant>) (t => entitiesDictionary.Add(t.Id, (object) t)));
                structure.Meters.ForEach((Action<Meter>) (m => entitiesDictionary.Add(m.Id, (object) m)));
                structure.Minomats.ForEach((Action<Minomat>) (m => entitiesDictionary.Add(m.Id, (object) m)));
                ObservableCollection<StructureNodeDTO> treeFromList = StructuresHelper.GetTreeFromList(this._structureNodeTypeRepository.GetAll(), (IList<StructureNodeLinks>) structure.Links, entitiesDictionary, meterReplacementHistoryList: (IList<MeterReplacementHistorySerializableDTO>) structure.MeterReplacementHistory);
                if (!this.StructureType.HasValue && structure.Links.Count > 0)
                {
                  StructureNodeLinks structureNodeLinks = structure.Links.FirstOrDefault<StructureNodeLinks>((Func<StructureNodeLinks, bool>) (l => l.ParentNodeId == Guid.Empty && l.RootNode.Id == l.Node.Id && !l.EndDate.HasValue));
                  if (structureNodeLinks != null)
                    this.StructureType = new StructureTypeEnum?(structureNodeLinks.StructureType);
                }
                StructureTypeEnum? structureType = this.StructureType;
                if (structureType.HasValue)
                {
                  switch (structureType.GetValueOrDefault())
                  {
                    case StructureTypeEnum.Physical:
                      StructureNodeDTO structureNodeDto1 = treeFromList.First<StructureNodeDTO>();
                      nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditPhysicalStructureViewModel>((IParameter) new ConstructorArgument("selectedNode", (object) structureNodeDto1), (IParameter) new ConstructorArgument("isExecuteInstallation", (object) false), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) true)));
                      break;
                    case StructureTypeEnum.Logical:
                      StructureNodeDTO structureNodeDto2 = treeFromList.First<StructureNodeDTO>();
                      nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditLogicalStructureViewModel>((IParameter) new ConstructorArgument("selectedNode", (object) structureNodeDto2), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) false)));
                      break;
                    case StructureTypeEnum.Fixed:
                      StructureNodeDTO structureNodeDto3 = treeFromList.First<StructureNodeDTO>();
                      nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditFixedStructureViewModel>("EditFixedStructureForOrderViewModel", (IParameter) new ConstructorArgument("selectedNode", (object) structureNodeDto3), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) true), (IParameter) new ConstructorArgument("isExecuteInstallation", (object) false), (IParameter) new ConstructorArgument("orderDTO", (object) this._selectedOrder)));
                      break;
                  }
                }
                break;
              }
              break;
            case OrderTypeEnum.InstallationOrder:
              Guid rootStructureNodeId = this.RootStructureNodeId;
              this._repositoryFactory.GetSession().Clear();
              List<MeterReplacementHistorySerializableDTO> historySerializableDto = StructuresHelper.GetMeterReplacementHistorySerializableDTO(this._meterReplacementHistoryRepository.GetAll());
              IEnumerable<StructureNodeDTO> nodeDtoForRootNode = OrdersHelper.GetStructureNodeDTOForRootNode(rootStructureNodeId, this._structureNodeLinksRepository, this._structureNodeRepository, this._structureNodeTypeRepository, this._nhSession, (IList<MeterReplacementHistorySerializableDTO>) historySerializableDto);
              StructureTypeEnum? structureType1 = this.StructureType;
              if (structureType1.HasValue)
              {
                switch (structureType1.GetValueOrDefault())
                {
                  case StructureTypeEnum.Physical:
                    StructureNodeDTO structureNodeDto4 = nodeDtoForRootNode.First<StructureNodeDTO>();
                    nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditPhysicalStructureViewModel>((IParameter) new ConstructorArgument("selectedNode", (object) structureNodeDto4), (IParameter) new ConstructorArgument("isExecuteInstallation", (object) false), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) false)));
                    break;
                  case StructureTypeEnum.Fixed:
                    StructureNodeDTO structureNodeDto5 = nodeDtoForRootNode.First<StructureNodeDTO>();
                    nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditFixedStructureViewModel>("EditFixedStructureForOrderViewModel", (IParameter) new ConstructorArgument("selectedNode", (object) structureNodeDto5), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) false), (IParameter) new ConstructorArgument("isExecuteInstallation", (object) false), (IParameter) new ConstructorArgument("orderDTO", (object) this._selectedOrder)));
                    break;
                }
              }
              else
                break;
              break;
          }
          if (nullable.HasValue && nullable.Value)
            this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
          else
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
        }));
      }
    }

    public ICommand AddEditStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<StructureOrdersViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) this._selectedOrder), (IParameter) new ConstructorArgument("orderType", (object) this._orderType), (IParameter) new ConstructorArgument("viewMode", (object) false), (IParameter) new ConstructorArgument("selectedRootStructureNodeId", (object) this._rootStructureNodeId), (IParameter) new ConstructorArgument("orderDueDate", (object) (this.DueDateValue.HasValue ? new DateTime(this.DueDateYear, this.DueDateValue.Value.Month, this.DueDateValue.Value.Day) : DateTime.Now))));
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          this.IsEditStructureButtonVisible = true;
        }));
      }
    }
  }
}


--- DeleteSingleOrderViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.DeleteSingleOrderViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.Modules.OrdersManagement;
using MSS.DTO.Orders;
using MSS.Interfaces;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using System;
using System.Collections.Generic;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class DeleteSingleOrderViewModel : ViewModelBase
  {
    private readonly List<OrderDTO> _selectedOrders;
    private readonly IRepositoryFactory _repositoryFactory;
    private List<string> _installationNumberValue = new List<string>();
    private List<string> _installationNumberValueSkiped = new List<string>();
    private bool _isdeleteSkiped;
    private string _windowHeight;
    private string _gridHeight;

    public string DeleteOrderTitle { get; set; }

    [Inject]
    public DeleteSingleOrderViewModel(
      List<OrderDTO> selectedOrders,
      string deleteOrderTitle,
      IRepositoryFactory repositoryFactory)
    {
      this.DeleteOrderTitle = deleteOrderTitle;
      this._repositoryFactory = repositoryFactory;
      this._selectedOrders = selectedOrders;
      this.IsDeleteSkiped = false;
      this._selectedOrders.ForEach((Action<OrderDTO>) (x =>
      {
        Guid? lockedBy = x.LockedBy;
        Guid empty = Guid.Empty;
        int num;
        if ((lockedBy.HasValue ? (lockedBy.HasValue ? (lockedBy.GetValueOrDefault() == empty ? 1 : 0) : 1) : 0) == 0)
        {
          lockedBy = x.LockedBy;
          num = !lockedBy.HasValue ? 1 : 0;
        }
        else
          num = 1;
        if (num != 0)
        {
          this.InstallationNumberValue.Add(x.InstallationNumber);
        }
        else
        {
          this.IsDeleteSkiped = true;
          this.InstallationNumberValueSkiped.Add(x.InstallationNumber);
        }
      }));
      if (this.InstallationNumberValueSkiped.Count == 0)
      {
        this.WindowHeight = "250";
        this.GridHeight = "0";
      }
      else
      {
        this.WindowHeight = "380";
        this.GridHeight = "140";
      }
    }

    private OrdersManager GetOrderManagerInstance() => new OrdersManager(this._repositoryFactory);

    public List<string> InstallationNumberValue
    {
      get => this._installationNumberValue;
      set => this._installationNumberValue = value;
    }

    public List<string> InstallationNumberValueSkiped
    {
      get => this._installationNumberValueSkiped;
      set => this._installationNumberValueSkiped = value;
    }

    public bool IsDeleteSkiped
    {
      get => this._isdeleteSkiped;
      set
      {
        this._isdeleteSkiped = value;
        this.OnPropertyChanged(nameof (IsDeleteSkiped));
      }
    }

    public string WindowHeight
    {
      get => this._windowHeight;
      set
      {
        this._windowHeight = value;
        this.OnPropertyChanged(nameof (WindowHeight));
      }
    }

    public string GridHeight
    {
      get => this._gridHeight;
      set
      {
        this._gridHeight = value;
        this.OnPropertyChanged(nameof (GridHeight));
      }
    }

    public ICommand DeleteOrderCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          OrdersManager orderManager = this.GetOrderManagerInstance();
          this._selectedOrders.ForEach((Action<OrderDTO>) (x =>
          {
            Guid? lockedBy = x.LockedBy;
            Guid empty = Guid.Empty;
            int num;
            if ((lockedBy.HasValue ? (lockedBy.HasValue ? (lockedBy.GetValueOrDefault() == empty ? 1 : 0) : 1) : 0) == 0)
            {
              lockedBy = x.LockedBy;
              num = !lockedBy.HasValue ? 1 : 0;
            }
            else
              num = 1;
            if (num == 0)
              return;
            orderManager.DeleteOrder(x.Id);
          }));
          this.OnRequestClose(true);
        });
      }
    }
  }
}


--- ExecuteInstallationOrderViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.ExecuteInstallationOrderViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MinomatHandler;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Orders;
using MSS.Core.Model.Structures;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.Structures;
using MVVM.Commands;
using NHibernate;
using NHibernate.Linq;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  internal class ExecuteInstallationOrderViewModel : StructureViewModelBase
  {
    private readonly string _orderNumber;
    private readonly StructureNodeDTO _parentForSelectedNode;
    private ObservableCollection<StructureNodeDTO> _nodesCollection = new ObservableCollection<StructureNodeDTO>();
    private IRepository<MinomatMeter> _minomatMeterRepository;
    private IRepository<MinomatRadioDetails> _minomatRadioDetailsRepository;
    private IRepository<Minomat> _minomatRepository;
    private StructureNodeDTO _locationNode;
    private int _numberOfReadMeters;
    private int _numberOfMetersInStructure;
    private List<StructureNodeDTO> _metersInStructure = new List<StructureNodeDTO>();
    private WalkByTestManager walkByTestManager;
    private string _locationInfo = "";
    private bool _isNotLockedItem;
    private bool _isAddTenant;
    private bool _isAddMeter;
    private bool _isEditTenantOrMeter;
    private bool _isDeleteTenantOrMeter;
    private bool _isAddMaster;
    private bool _isAddSlave;
    private bool _isEditMasterOrSlave;
    private bool _isDeleteMasterOrSlave;
    private bool _isNetworkSetupEnabled;
    private StructureNodeDTO _selectedTenantStructureNode;
    private StructureNodeDTO _selectedMeterDtoStructureNode;
    private StructureNodeDTO _selectedSubMeterStructureNode;
    private MinomatStructure _selectedMasterStructureNode;
    private MinomatStructure _selectedSlaveStructureNode;
    private bool _isBusy;
    private bool _isPasteActive;
    private bool _isExpanded;
    private string _registeredDevicesPercentage;
    private string _registeredDevicesImageLocation;
    private bool _isShortDeviceNoVisible;

    [Inject]
    public ExecuteInstallationOrderViewModel(
      string orderNumber,
      StructureNodeDTO selectedNode,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
      : base(repositoryFactory, windowFactory)
    {
      this._locationNode = selectedNode;
      this._orderNumber = orderNumber;
      this._parentForSelectedNode = selectedNode.ParentNode;
      this._nodesCollection.Add(selectedNode);
      this._minomatMeterRepository = this._repositoryFactory.GetRepository<MinomatMeter>();
      this._minomatRepository = this._repositoryFactory.GetRepository<Minomat>();
      this._minomatRadioDetailsRepository = this._repositoryFactory.GetRepository<MinomatRadioDetails>();
      this.IsNotLockedItem = true;
      Mapper.CreateMap<StructureNodeDTO, StructureNodeDTO>();
      Mapper.CreateMap<Minomat, MinomatSerializableDTO>();
      EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(this.UpdateStructure));
      this.StructureForSelectedNode = ExecuteInstallationOrderViewModel.GetStructureNodeCollection(new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) this._nodesCollection), (Func<StructureNodeDTO, bool>) (x => x.NodeType.Name != StructureNodeTypeEnum.MinomatMaster.ToString() && x.NodeType.Name != StructureNodeTypeEnum.MinomatSlave.ToString()));
      this.StructureForSelectedNode = new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) this.StructureForSelectedNode.OrderBy<StructureNodeDTO, int>((Func<StructureNodeDTO, int>) (structure => !(structure.Entity is TenantDTO entity) ? structure.OrderNr : entity.TenantNr)));
      this.CalculateNoOfDevicesForTenants(this.StructureForSelectedNode);
      this.SetLocationDetails(selectedNode);
      ObservableCollection<StructureNodeDTO> structureNodeCollection = ExecuteInstallationOrderViewModel.GetStructureNodeCollection(new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) this._nodesCollection), (Func<StructureNodeDTO, bool>) (x => x.NodeType.Name == StructureNodeTypeEnum.MinomatMaster.ToString() || x.NodeType.Name == StructureNodeTypeEnum.MinomatSlave.ToString()));
      List<Guid> minomatIds = new List<Guid>();
      TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) structureNodeCollection, (Action<StructureNodeDTO>) (minomatMaster =>
      {
        minomatIds.Add((minomatMaster.Entity as MinomatSerializableDTO).Id);
        TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) minomatMaster.SubNodes, (Action<StructureNodeDTO>) (minomatSlave => minomatIds.Add((minomatSlave.Entity as MinomatSerializableDTO).Id)));
      }));
      List<MinomatRadioDetails> list = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => minomatIds.Contains(item.Minomat.Id))).ToList<MinomatRadioDetails>();
      this.StructureForMinomats = new ObservableCollection<MinomatStructure>();
      foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) structureNodeCollection)
      {
        StructureNodeDTO currentMinomatMaster = structureNodeDto;
        ObservableCollection<MinomatStructure> observableCollection = (ObservableCollection<MinomatStructure>) null;
        if (currentMinomatMaster.SubNodes != null && currentMinomatMaster.SubNodes.Any<StructureNodeDTO>())
          observableCollection = new ObservableCollection<MinomatStructure>();
        MinomatRadioDetails minomatRadioDetails1 = list.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == (currentMinomatMaster.Entity as MinomatSerializableDTO).Id));
        MinomatStructure minomatStructure1 = new MinomatStructure();
        minomatStructure1.MinomatStructureNode = currentMinomatMaster;
        minomatStructure1.Location = minomatRadioDetails1?.Location;
        minomatStructure1.Description = minomatRadioDetails1?.Description;
        MinomatStructure minomatStructure2 = minomatStructure1;
        string str1;
        if (minomatRadioDetails1 == null)
        {
          str1 = (string) null;
        }
        else
        {
          MinomatStatusDevicesEnum? statusDevices = minomatRadioDetails1.StatusDevices;
          ref MinomatStatusDevicesEnum? local = ref statusDevices;
          str1 = local.HasValue ? local.GetValueOrDefault().GetStringValue() : (string) null;
        }
        minomatStructure2.StatusDevices = str1;
        MinomatStructure minomatStructure3 = minomatStructure1;
        string str2;
        if (minomatRadioDetails1 == null)
        {
          str2 = (string) null;
        }
        else
        {
          MinomatStatusNetworkEnum? statusNetwork = minomatRadioDetails1.StatusNetwork;
          ref MinomatStatusNetworkEnum? local = ref statusNetwork;
          str2 = local.HasValue ? local.GetValueOrDefault().GetStringValue() : (string) null;
        }
        minomatStructure3.StatusNetwork = str2;
        minomatStructure1.GSMStatus = minomatRadioDetails1 == null ? string.Empty : this.GetGSMTestReceptionString(minomatRadioDetails1.GSMStatus);
        minomatStructure1.MinomatStructureSubNodes = observableCollection;
        MinomatStructure minomatStructure4 = minomatStructure1;
        foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) currentMinomatMaster.SubNodes)
        {
          StructureNodeDTO currentMinomatSlave = subNode;
          MinomatRadioDetails minomatRadioDetails2 = list.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == (currentMinomatSlave.Entity as MinomatSerializableDTO).Id));
          ObservableCollection<MinomatStructure> structureSubNodes = minomatStructure4.MinomatStructureSubNodes;
          MinomatStructure minomatStructure5 = new MinomatStructure();
          minomatStructure5.MinomatStructureNode = currentMinomatSlave;
          minomatStructure5.Location = minomatRadioDetails2?.Location;
          minomatStructure5.Description = minomatRadioDetails2?.Description;
          MinomatStructure minomatStructure6 = minomatStructure5;
          string str3;
          if (minomatRadioDetails2 == null)
          {
            str3 = (string) null;
          }
          else
          {
            MinomatStatusDevicesEnum? statusDevices = minomatRadioDetails2.StatusDevices;
            ref MinomatStatusDevicesEnum? local = ref statusDevices;
            str3 = local.HasValue ? local.GetValueOrDefault().GetStringValue() : (string) null;
          }
          minomatStructure6.StatusDevices = str3;
          MinomatStructure minomatStructure7 = minomatStructure5;
          string str4;
          if (minomatRadioDetails2 == null)
          {
            str4 = (string) null;
          }
          else
          {
            MinomatStatusNetworkEnum? statusNetwork = minomatRadioDetails2.StatusNetwork;
            ref MinomatStatusNetworkEnum? local = ref statusNetwork;
            str4 = local.HasValue ? local.GetValueOrDefault().GetStringValue() : (string) null;
          }
          minomatStructure7.StatusNetwork = str4;
          minomatStructure5.GSMStatus = minomatRadioDetails2 == null ? string.Empty : this.GetGSMTestReceptionString(minomatRadioDetails2.GSMStatus);
          minomatStructure5.MinomatStructureSubNodes = (ObservableCollection<MinomatStructure>) null;
          MinomatStructure minomatStructure8 = minomatStructure5;
          structureSubNodes.Add(minomatStructure8);
        }
        this.StructureForMinomats.Add(minomatStructure4);
      }
      this.CalculateReceivedAndRegisteredPercentages();
      this.SetRegisteredDevicesForMinomats();
      this.ResetWalkByButtons();
      StructureTypeEnum? structureType = this._locationNode.StructureType;
      StructureTypeEnum structureTypeEnum = StructureTypeEnum.Fixed;
      this.IsShortDeviceNoVisible = structureType.GetValueOrDefault() == structureTypeEnum && structureType.HasValue;
    }

    public string LocationInfo
    {
      get => this._locationInfo;
      set
      {
        this._locationInfo = value;
        this.OnPropertyChanged(nameof (LocationInfo));
      }
    }

    public bool IsNotLockedItem
    {
      get => this._isNotLockedItem;
      set
      {
        this._isNotLockedItem = value;
        this.OnPropertyChanged(nameof (IsNotLockedItem));
      }
    }

    public bool IsAddTenant
    {
      get => this._isAddTenant;
      set
      {
        this._isAddTenant = value;
        this.OnPropertyChanged(nameof (IsAddTenant));
      }
    }

    public bool IsAddMeter
    {
      get => this._isAddMeter;
      set
      {
        this._isAddMeter = value;
        this.OnPropertyChanged(nameof (IsAddMeter));
      }
    }

    public bool IsEditTenantOrMeter
    {
      get => this._isEditTenantOrMeter;
      set
      {
        this._isEditTenantOrMeter = value;
        this.OnPropertyChanged(nameof (IsEditTenantOrMeter));
      }
    }

    public bool IsDeleteTenantOrMeter
    {
      get => this._isDeleteTenantOrMeter;
      set
      {
        this._isDeleteTenantOrMeter = value;
        this.OnPropertyChanged(nameof (IsDeleteTenantOrMeter));
      }
    }

    public bool IsAddMaster
    {
      get => this._isAddMaster;
      set
      {
        this._isAddMaster = value;
        this.OnPropertyChanged(nameof (IsAddMaster));
      }
    }

    public bool IsAddSlave
    {
      get => this._isAddSlave;
      set
      {
        this._isAddSlave = value;
        this.OnPropertyChanged(nameof (IsAddSlave));
      }
    }

    public bool IsEditMasterOrSlave
    {
      get => this._isEditMasterOrSlave;
      set
      {
        this._isEditMasterOrSlave = value;
        this.OnPropertyChanged(nameof (IsEditMasterOrSlave));
      }
    }

    public bool IsDeleteMasterOrSlave
    {
      get => this._isDeleteMasterOrSlave;
      set
      {
        this._isDeleteMasterOrSlave = value;
        this.OnPropertyChanged(nameof (IsDeleteMasterOrSlave));
      }
    }

    public bool IsNetworkSetupEnabled
    {
      get => this._isNetworkSetupEnabled;
      set
      {
        this._isNetworkSetupEnabled = value;
        this.OnPropertyChanged(nameof (IsNetworkSetupEnabled));
      }
    }

    public StructureNodeDTO SelectedTenantStructureNode
    {
      get => this._selectedTenantStructureNode;
      set
      {
        if (this.SelectedMeterStructureNode != null)
          this.SelectedMeterStructureNode = (StructureNodeDTO) null;
        if (this.SelectedSubMeterStructureNode != null)
          this.SelectedSubMeterStructureNode = (StructureNodeDTO) null;
        this._selectedTenantStructureNode = value;
        this.OnPropertyChanged(nameof (SelectedTenantStructureNode));
      }
    }

    public StructureNodeDTO SelectedMeterStructureNode
    {
      get => this._selectedMeterDtoStructureNode;
      set
      {
        if (this._selectedMeterDtoStructureNode != null)
        {
          this._selectedMeterDtoStructureNode = (StructureNodeDTO) null;
          this.OnPropertyChanged(nameof (SelectedMeterStructureNode));
        }
        if (this._selectedTenantStructureNode != null)
          this.SelectedTenantStructureNode = (StructureNodeDTO) null;
        if (this.SelectedSubMeterStructureNode != null)
          this.SelectedSubMeterStructureNode = (StructureNodeDTO) null;
        this._selectedMeterDtoStructureNode = value;
        this.OnPropertyChanged(nameof (SelectedMeterStructureNode));
      }
    }

    public StructureNodeDTO SelectedSubMeterStructureNode
    {
      get => this._selectedSubMeterStructureNode;
      set
      {
        if (this._selectedMeterDtoStructureNode != null)
        {
          this._selectedMeterDtoStructureNode = (StructureNodeDTO) null;
          this.OnPropertyChanged("SelectedMeterStructureNode");
        }
        if (this._selectedSubMeterStructureNode != null)
        {
          this._selectedSubMeterStructureNode = (StructureNodeDTO) null;
          this.OnPropertyChanged(nameof (SelectedSubMeterStructureNode));
        }
        if (this._selectedTenantStructureNode != null)
        {
          this._selectedTenantStructureNode = (StructureNodeDTO) null;
          this.OnPropertyChanged("SelectedTenantStructureNode");
        }
        this._selectedSubMeterStructureNode = value;
        this.OnPropertyChanged(nameof (SelectedSubMeterStructureNode));
      }
    }

    public MinomatStructure SelectedMasterStructureNode
    {
      get => this._selectedMasterStructureNode;
      set
      {
        if (this.SelectedSlaveStructureNode != null)
          this.SelectedSlaveStructureNode = (MinomatStructure) null;
        this._selectedMasterStructureNode = value;
        this.IsNetworkSetupEnabled = value != null && value.StatusNetwork != MinomatStatusNetworkEnum.NetworkOptimization.GetStringValue();
        this.OnPropertyChanged(nameof (SelectedMasterStructureNode));
      }
    }

    public MinomatStructure SelectedSlaveStructureNode
    {
      get => this._selectedSlaveStructureNode;
      set
      {
        if (this._selectedSlaveStructureNode != null)
        {
          this._selectedSlaveStructureNode = (MinomatStructure) null;
          this.OnPropertyChanged(nameof (SelectedSlaveStructureNode));
        }
        this.SelectedMasterStructureNode = (MinomatStructure) null;
        this._selectedSlaveStructureNode = value;
        this.OnPropertyChanged(nameof (SelectedSlaveStructureNode));
      }
    }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        if (this._isBusy == value)
          return;
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    public bool IsPasteActive
    {
      get => this._isPasteActive;
      set
      {
        this._isPasteActive = value;
        this.OnPropertyChanged(nameof (IsPasteActive));
      }
    }

    public bool IsExpanded
    {
      get => this._isExpanded;
      set
      {
        this._isExpanded = value;
        if (this._isExpanded == value)
          return;
        this._isExpanded = value;
        this.OnPropertyChanged(nameof (IsExpanded));
      }
    }

    public string RegisteredDevicesPercentage
    {
      get => this._registeredDevicesPercentage;
      set
      {
        this._registeredDevicesPercentage = value;
        this.OnPropertyChanged(nameof (RegisteredDevicesPercentage));
      }
    }

    public string RegisteredDevicesImageLocation
    {
      get => this._registeredDevicesImageLocation;
      set
      {
        this._registeredDevicesImageLocation = value;
        this.OnPropertyChanged(nameof (RegisteredDevicesImageLocation));
      }
    }

    public ObservableCollection<StructureNodeDTO> StructureForSelectedNode { get; set; }

    public ObservableCollection<MinomatStructure> StructureForMinomats { get; set; }

    public bool IsShortDeviceNoVisible
    {
      get => this._isShortDeviceNoVisible;
      set
      {
        this._isShortDeviceNoVisible = value;
        this.OnPropertyChanged(nameof (IsShortDeviceNoVisible));
      }
    }

    public ICommand EditTenantOrMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO node = this.SelectedTenantStructureNode ?? this.SelectedMeterStructureNode ?? this.SelectedSubMeterStructureNode;
          if (node == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_OPERATION);
            this.IsEditTenantOrMeter = false;
          }
          else
          {
            this.SetParentAndRootNode(node);
            this.IsEditTenantOrMeter = false;
            this.EditSelectedStructureNode(node);
            this.CalculateReceivedAndRegisteredPercentages();
          }
        }));
      }
    }

    public ICommand EditMasterOrSlaveCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          MinomatStructure selectedItem = this.SelectedMasterStructureNode ?? this.SelectedSlaveStructureNode;
          if (selectedItem == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_OPERATION);
            this.IsEditMasterOrSlave = false;
          }
          else
          {
            string registeredDevices = (selectedItem.MinomatStructureNode.Entity as MinomatSerializableDTO).NrOfRegisteredDevices;
            this.SetParentAndRootNode(selectedItem.MinomatStructureNode);
            this.IsEditMasterOrSlave = false;
            this.EditSelectedStructureNode(selectedItem.MinomatStructureNode, orderNumber: this._orderNumber);
            this._repositoryFactory.GetSession().Clear();
            Minomat source = this._minomatRepository.Where((Expression<Func<Minomat, bool>>) (item => item.Id == (selectedItem.MinomatStructureNode.Entity as MinomatSerializableDTO).Id)).FirstOrDefault<Minomat>();
            if (source == null)
              return;
            MinomatSerializableDTO updatedMinomatEntity = Mapper.Map<Minomat, MinomatSerializableDTO>(source);
            MinomatRadioDetails minomatRadioDetails = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == updatedMinomatEntity.Id)).FirstOrDefault<MinomatRadioDetails>();
            updatedMinomatEntity.NrOfRegisteredDevices = registeredDevices;
            selectedItem.MinomatStructureNode.Entity = (object) updatedMinomatEntity;
            selectedItem.Location = minomatRadioDetails?.Location;
            selectedItem.Description = minomatRadioDetails?.Description;
            MinomatStructure minomatStructure1 = selectedItem;
            string str1;
            if (minomatRadioDetails == null)
            {
              str1 = (string) null;
            }
            else
            {
              MinomatStatusDevicesEnum? statusDevices = minomatRadioDetails.StatusDevices;
              ref MinomatStatusDevicesEnum? local = ref statusDevices;
              str1 = local.HasValue ? local.GetValueOrDefault().GetStringValue() : (string) null;
            }
            minomatStructure1.StatusDevices = str1;
            MinomatStructure minomatStructure2 = selectedItem;
            string str2;
            if (minomatRadioDetails == null)
            {
              str2 = (string) null;
            }
            else
            {
              MinomatStatusNetworkEnum? statusNetwork = minomatRadioDetails.StatusNetwork;
              ref MinomatStatusNetworkEnum? local = ref statusNetwork;
              str2 = local.HasValue ? local.GetValueOrDefault().GetStringValue() : (string) null;
            }
            minomatStructure2.StatusNetwork = str2;
            selectedItem.GSMStatus = minomatRadioDetails == null ? string.Empty : this.GetGSMTestReceptionString(minomatRadioDetails.GSMStatus);
          }
        }));
      }
    }

    public ICommand AddTenantCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO secondLevelNode = this.GetSecondLevelNode(StructureNodeTypeEnum.Tenant.ToString());
          this.SetParentAndRootNode(secondLevelNode);
          this._nodesCollection[0].SubNodes.Add(secondLevelNode);
          this.IsAddTenant = false;
          bool? nullable = this.EditSelectedStructureNode(secondLevelNode, orderNumber: this._orderNumber);
          if (nullable.HasValue && nullable.Value)
          {
            this.StructureForSelectedNode.Insert(0, secondLevelNode);
            this.SelectedTenantStructureNode = secondLevelNode;
          }
          else
            this._nodesCollection[0].SubNodes.Remove(secondLevelNode);
        }));
      }
    }

    public ICommand AddMasterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO node = this.GetSecondLevelNode(StructureNodeTypeEnum.MinomatMaster.ToString());
          this._nodesCollection[0].SubNodes.Add(node);
          this.IsAddMaster = false;
          bool? nullable = this.EditSelectedStructureNode(node, orderNumber: this._orderNumber);
          if (nullable.HasValue && nullable.Value)
          {
            MinomatRadioDetails minomatRadioDetails = this._minomatRadioDetailsRepository.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == (node.Entity as MinomatSerializableDTO).Id));
            ObservableCollection<MinomatStructure> structureForMinomats = this.StructureForMinomats;
            MinomatStructure minomatStructure1 = new MinomatStructure();
            minomatStructure1.MinomatStructureNode = node;
            minomatStructure1.Location = minomatRadioDetails?.Location;
            minomatStructure1.Description = minomatRadioDetails?.Description;
            MinomatStructure minomatStructure2 = minomatStructure1;
            string str1;
            if (minomatRadioDetails == null)
            {
              str1 = (string) null;
            }
            else
            {
              MinomatStatusDevicesEnum? statusDevices = minomatRadioDetails.StatusDevices;
              ref MinomatStatusDevicesEnum? local = ref statusDevices;
              str1 = local.HasValue ? local.GetValueOrDefault().GetStringValue() : (string) null;
            }
            minomatStructure2.StatusDevices = str1;
            MinomatStructure minomatStructure3 = minomatStructure1;
            string str2;
            if (minomatRadioDetails == null)
            {
              str2 = (string) null;
            }
            else
            {
              MinomatStatusNetworkEnum? statusNetwork = minomatRadioDetails.StatusNetwork;
              ref MinomatStatusNetworkEnum? local = ref statusNetwork;
              str2 = local.HasValue ? local.GetValueOrDefault().GetStringValue() : (string) null;
            }
            minomatStructure3.StatusNetwork = str2;
            minomatStructure1.GSMStatus = minomatRadioDetails == null ? string.Empty : this.GetGSMTestReceptionString(minomatRadioDetails.GSMStatus);
            MinomatStructure minomatStructure4 = minomatStructure1;
            structureForMinomats.Insert(0, minomatStructure4);
            this.SelectedMasterStructureNode = this.StructureForMinomats.FirstOrDefault<MinomatStructure>((Func<MinomatStructure, bool>) (item => item.MinomatStructureNode == node));
          }
          else
            this._nodesCollection[0].SubNodes.Remove(node);
        }));
      }
    }

    public ICommand AddMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO parentNode = this.SelectedTenantStructureNode ?? this.SelectedMeterStructureNode;
          if (parentNode == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_ADD_METER);
            this.IsAddMeter = false;
          }
          else
          {
            StructureNodeDTO thirdLevelNode = this.GetThirdLevelNode(parentNode, StructureNodeTypeEnum.Meter.ToString());
            parentNode.SubNodes.Insert(0, thirdLevelNode);
            this.SetParentAndRootNode(thirdLevelNode);
            this.EditSelectedStructureNode(thirdLevelNode);
            this.CalculateReceivedAndRegisteredPercentages();
            this.IsAddMeter = false;
            StructureNodeDTO tenantParent = this.GetTenantParent(thirdLevelNode);
            StructureNodeDTO structureNodeDto = tenantParent.SubNodes.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter" && item.Id == Guid.Empty));
            if (structureNodeDto != null)
              tenantParent.SubNodes.Remove(structureNodeDto);
            if (tenantParent != null)
              (tenantParent.Entity as TenantDTO).NoOfDevices = new int?(tenantParent.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
            this.CalculateReceivedAndRegisteredPercentages();
          }
        }));
      }
    }

    public ICommand AddSlaveCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          MinomatStructure masterStructureNode = this.SelectedMasterStructureNode;
          if (masterStructureNode == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_ADD_SLAVE);
            this.IsAddSlave = false;
          }
          else
          {
            StructureNodeDTO node = this.GetThirdLevelNode(masterStructureNode.MinomatStructureNode, StructureNodeTypeEnum.MinomatSlave.ToString());
            masterStructureNode.MinomatStructureNode.SubNodes.Insert(0, node);
            if (masterStructureNode.MinomatStructureSubNodes == null)
              masterStructureNode.MinomatStructureSubNodes = new ObservableCollection<MinomatStructure>();
            MinomatStructure minomatStructure = new MinomatStructure()
            {
              MinomatStructureNode = node,
              Location = (string) null,
              Description = (string) null,
              MinomatStructureSubNodes = (ObservableCollection<MinomatStructure>) null,
              StatusDevices = (string) null,
              StatusNetwork = (string) null,
              GSMStatus = (string) null
            };
            masterStructureNode.MinomatStructureSubNodes.Add(minomatStructure);
            this.SelectedSlaveStructureNode = minomatStructure;
            this.IsAddSlave = false;
            bool? nullable = this.EditSelectedStructureNode(node, orderNumber: this._orderNumber);
            if (!nullable.HasValue || !nullable.Value)
            {
              masterStructureNode.MinomatStructureNode.SubNodes.Remove(node);
              masterStructureNode.MinomatStructureSubNodes.Remove(minomatStructure);
            }
            else
            {
              MinomatRadioDetails minomatRadioDetails = this._minomatRadioDetailsRepository.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == (node.Entity as MinomatSerializableDTO).Id));
              if (minomatRadioDetails != null)
              {
                this.SelectedSlaveStructureNode.Location = minomatRadioDetails.Location;
                this.SelectedSlaveStructureNode.Description = minomatRadioDetails.Description;
                MinomatStructure slaveStructureNode1 = this.SelectedSlaveStructureNode;
                MinomatStatusDevicesEnum? statusDevices = minomatRadioDetails.StatusDevices;
                ref MinomatStatusDevicesEnum? local1 = ref statusDevices;
                string stringValue1 = local1.HasValue ? local1.GetValueOrDefault().GetStringValue() : (string) null;
                slaveStructureNode1.StatusDevices = stringValue1;
                MinomatStructure slaveStructureNode2 = this.SelectedSlaveStructureNode;
                MinomatStatusNetworkEnum? statusNetwork = minomatRadioDetails.StatusNetwork;
                ref MinomatStatusNetworkEnum? local2 = ref statusNetwork;
                string stringValue2 = local2.HasValue ? local2.GetValueOrDefault().GetStringValue() : (string) null;
                slaveStructureNode2.StatusNetwork = stringValue2;
                this.SelectedSlaveStructureNode.GSMStatus = this.GetGSMTestReceptionString(minomatRadioDetails.GSMStatus);
              }
            }
          }
        }));
      }
    }

    public ICommand DeleteTenantOrMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          bool? nullable = MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_MessageCodes_Delete, Resources.MSS_MessageCodes_DeleteGeneric, true);
          if (!nullable.HasValue || !nullable.Value)
            return;
          new StructuresManager(this._repositoryFactory).DeleteStructureNodeAndDescendants(this.SelectedMeterStructureNode ?? this.SelectedTenantStructureNode ?? this.SelectedSubMeterStructureNode);
          this.RemoveSelectedItemFromList(this.SelectedMeterStructureNode ?? this.SelectedTenantStructureNode ?? this.SelectedSubMeterStructureNode, this.StructureForSelectedNode);
          this.CalculateNoOfDevicesForTenants(this.StructureForSelectedNode);
          this.CalculateReceivedAndRegisteredPercentages();
        }));
      }
    }

    public ICommand DeleteMasterOrSlaveCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          bool? nullable = MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_MessageCodes_Delete, Resources.MSS_MessageCodes_DeleteGeneric, true);
          if (!nullable.HasValue || !nullable.Value)
            return;
          this.DeleteAssociatedMinomatMeters(this.SelectedMasterStructureNode?.MinomatStructureNode ?? this.SelectedSlaveStructureNode?.MinomatStructureNode);
          new StructuresManager(this._repositoryFactory).DeleteStructureNodeAndDescendants(this.SelectedMasterStructureNode?.MinomatStructureNode ?? this.SelectedSlaveStructureNode?.MinomatStructureNode);
          this.IsDeleteMasterOrSlave = false;
          Guid selectedNodeId = this.SelectedMasterStructureNode != null ? this.SelectedMasterStructureNode.MinomatStructureNode.Id : this.SelectedSlaveStructureNode.MinomatStructureNode.Id;
          this.RemoveSelectedItemFromList(this.SelectedMasterStructureNode?.MinomatStructureNode ?? this.SelectedSlaveStructureNode?.MinomatStructureNode, this.StructureForMinomats);
          this.RemoveSelectedNodeFromStructureById(selectedNodeId, this.StructureForSelectedNode[0].RootNode.SubNodes);
          if (this.SelectedMasterStructureNode != null)
            this.StructureForMinomats.Remove(this.SelectedMasterStructureNode);
          else if (this.SelectedSlaveStructureNode != null)
            this.StructureForMinomats.FirstOrDefault<MinomatStructure>((Func<MinomatStructure, bool>) (item => item.MinomatStructureSubNodes != null && item.MinomatStructureSubNodes.Contains(this.SelectedSlaveStructureNode)))?.MinomatStructureSubNodes.Remove(this.SelectedSlaveStructureNode);
          this.CalculateReceivedAndRegisteredPercentages();
        }));
      }
    }

    public ICommand RegisterDeviceUserCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = this.SelectedMasterStructureNode?.MinomatStructureNode ?? this.SelectedSlaveStructureNode?.MinomatStructureNode;
          MinomatStructure selectedMinomatStructureItem = this.SelectedMasterStructureNode ?? this.SelectedSlaveStructureNode;
          MinomatSerializableDTO selectedItemDto = structureNodeDto.Entity as MinomatSerializableDTO;
          if (structureNodeDto == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_OPERATION);
            this.IsEditMasterOrSlave = false;
          }
          else
          {
            List<StructureNodeDTO> listOfMeters = new List<StructureNodeDTO>();
            this.GetMetersInStructure(this._locationNode, ref listOfMeters);
            if (listOfMeters.Count <= 300)
            {
              this.IsBusy = true;
              Task.Run<GMMMinomatConfiguratorResult>((Func<GMMMinomatConfiguratorResult>) (() => this.SaveAndRegisterMinomatMeters(listOfMeters.Select<StructureNodeDTO, MeterDTO>((Func<StructureNodeDTO, MeterDTO>) (meterStructureNodeDTO => meterStructureNodeDTO.Entity as MeterDTO)).ToList<MeterDTO>(), selectedItemDto))).ContinueWith((Action<Task<GMMMinomatConfiguratorResult>>) (p =>
              {
                this.IsBusy = false;
                GMMMinomatConfiguratorResult gmmConfiguratorResult = p.Result;
                if (gmmConfiguratorResult.IsSuccess)
                {
                  Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_ExecuteInstallationOrder_MeterRegistrationSuccessful)));
                  this.UpdateSelectedMinomat(selectedMinomatStructureItem);
                  this.CalculateReceivedAndRegisteredPercentages();
                }
                else
                  Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, gmmConfiguratorResult.Message, false)));
              }));
            }
            else
            {
              this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<ManuallyAssignMetersViewModel>((IParameter) new ConstructorArgument("node", (object) structureNodeDto), (IParameter) new ConstructorArgument("windowFactory", (object) this._windowFactory), (IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory)));
              this.UpdateSelectedMinomat(selectedMinomatStructureItem);
              this.CalculateReceivedAndRegisteredPercentages();
            }
          }
        }));
      }
    }

    public ICommand NetworkSetupCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (p =>
        {
          MinomatStructure selectedItem = this.SelectedMasterStructureNode ?? this.SelectedSlaveStructureNode;
          if (selectedItem == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_OPERATION);
            this.IsEditMasterOrSlave = false;
          }
          else
          {
            this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<NetworkSetupViewModel>((IParameter) new ConstructorArgument("masterNode", (object) selectedItem.MinomatStructureNode)));
            List<Guid> minomatIds = new List<Guid>();
            minomatIds.Add((selectedItem.MinomatStructureNode.Entity as MinomatSerializableDTO).Id);
            ObservableCollection<MinomatStructure> structureSubNodes = selectedItem.MinomatStructureSubNodes;
            if (structureSubNodes != null)
              TypeHelperExtensionMethods.ForEach<MinomatStructure>((IEnumerable<MinomatStructure>) structureSubNodes, (Action<MinomatStructure>) (minomatSlave => minomatIds.Add((minomatSlave.MinomatStructureNode.Entity as MinomatSerializableDTO).Id)));
            this._repositoryFactory.GetSession().Clear();
            List<MinomatRadioDetails> minomatRadioDetailsList = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => minomatIds.Contains(item.Minomat.Id))).ToList<MinomatRadioDetails>();
            minomatIds.ForEach((Action<Guid>) (id =>
            {
              MinomatStructure currentMinomat = id == (selectedItem.MinomatStructureNode.Entity as MinomatSerializableDTO).Id ? selectedItem : selectedItem.MinomatStructureSubNodes.FirstOrDefault<MinomatStructure>((Func<MinomatStructure, bool>) (item => (item.MinomatStructureNode.Entity as MinomatSerializableDTO).Id == id));
              if (currentMinomat == null)
                return;
              MinomatRadioDetails minomatRadioDetails = minomatRadioDetailsList.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == (currentMinomat.MinomatStructureNode.Entity as MinomatSerializableDTO).Id));
              if (minomatRadioDetails != null)
              {
                MinomatStructure minomatStructure = currentMinomat;
                string str;
                if (minomatRadioDetails == null)
                {
                  str = (string) null;
                }
                else
                {
                  MinomatStatusNetworkEnum? statusNetwork = minomatRadioDetails.StatusNetwork;
                  ref MinomatStatusNetworkEnum? local = ref statusNetwork;
                  str = local.HasValue ? local.GetValueOrDefault().GetStringValue() : (string) null;
                }
                minomatStructure.StatusNetwork = str;
                if ((currentMinomat.MinomatStructureNode.Entity as MinomatSerializableDTO).IsMaster)
                  currentMinomat.GSMStatus = this.GetGSMTestReceptionString((GSMTestReceptionState?) minomatRadioDetails?.GSMStatus);
              }
            }));
            this.IsNetworkSetupEnabled = this._selectedMasterStructureNode != null && this._selectedMasterStructureNode.StatusNetwork != MinomatStatusNetworkEnum.NetworkOptimization.GetStringValue();
          }
        }));
      }
    }

    public override ICommand CancelWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = MessageCodes.OperationCancelled.GetStringValue()
          };
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand OkCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = MessageCodes.OperationCancelled.GetStringValue()
          };
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand RepairModeCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          MinomatStructure minomatStructure = this.SelectedMasterStructureNode ?? this.SelectedSlaveStructureNode;
          StructureNodeDTO selectedMinomatNode = minomatStructure.MinomatStructureNode;
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<RepairModeViewModel>("RepairModeViewModel", (IParameter) new ConstructorArgument("minomatNode", (object) selectedMinomatNode), (IParameter) new ConstructorArgument("windowFactory", (object) this._windowFactory), (IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory)));
          MinomatRadioDetails minomatRadioDetails = this._minomatRadioDetailsRepository.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == (selectedMinomatNode.Entity as MinomatSerializableDTO).Id));
          if (minomatRadioDetails == null)
            return;
          minomatStructure.StatusNetwork = ((Enum) (ValueType) minomatRadioDetails.StatusNetwork).GetStringValue();
          minomatStructure.StatusDevices = ((Enum) (ValueType) minomatRadioDetails.StatusDevices).GetStringValue();
        }));
      }
    }

    public ICommand StartWalkByCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          StructureNodeDTO structureNodeDto = this.SelectedTenantStructureNode ?? this.SelectedMeterStructureNode;
          this.walkByTestManager = new WalkByTestManager(this._repositoryFactory, Guid.Empty, (ProfileType) null);
          this.walkByTestManager.OnMeterValuesReceivedHandler += new EventHandler<MSS.Core.Model.Meters.Meter>(this.OnMeterValuesReceivedHandler);
          this.walkByTestManager.OnErrorReceivedHandler += new EventHandler(this.OnErrorReceivedHandler);
          this.walkByTestManager.StartReadingValues(structureNodeDto, new ProfileType());
          this.IsWalkByTestButtonEnabled = false;
          this.IsStopWalkByTestButtonEnabled = true;
          WalkByTestManager.IsWalkByTestStarted = true;
          this.GetMetersInStructure(structureNodeDto);
          this._numberOfReadMeters = 0;
          this._numberOfMetersInStructure = this._metersInStructure.Count<StructureNodeDTO>();
        }));
      }
    }

    public ICommand StopWalkByCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.walkByTestManager.OnMeterValuesReceivedHandler -= new EventHandler<MSS.Core.Model.Meters.Meter>(this.OnMeterValuesReceivedHandler);
          this.walkByTestManager.OnErrorReceivedHandler -= new EventHandler(this.OnErrorReceivedHandler);
          this.walkByTestManager.StopReadingValues();
          this.ResetWalkByButtons();
        }));
      }
    }

    public ICommand EditLocationCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateEditLocationViewModel>((IParameter) new ConstructorArgument("isExistingEntity", (object) true), (IParameter) new ConstructorArgument("node", (object) this._locationNode), (IParameter) new ConstructorArgument("locationNumberList", (object) this.locationNumberList)));
          if (newModalDialog.HasValue && newModalDialog.Value)
            return;
          this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
        }));
      }
    }

    public ICommand ReportsCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<ReportsForTenantsViewModel>((IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory), (IParameter) new ConstructorArgument("windowFactory", (object) this._windowFactory), (IParameter) new ConstructorArgument("rootNode", (object) this.StructureForSelectedNode[0].RootNode)))));
      }
    }

    public ICommand CloseOrderCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_DeleteStructure_Warning_Title), (IParameter) new ConstructorArgument("message", (object) Resources.MSS_Client_CloseOrderQuestion), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) true)));
          if (!(newModalDialog.HasValue & newModalDialog.Value))
            return;
          ISession session = this._repositoryFactory.GetSession();
          session.BeginTransaction();
          IRepository<Order> repository = this._repositoryFactory.GetRepository<Order>();
          Order entity = repository.FirstOrDefault((Expression<Func<Order, bool>>) (item => item.InstallationNumber == this._orderNumber));
          if (entity != null)
          {
            entity.Status = StatusOrderEnum.Closed;
            repository.TransactionalUpdate(entity);
          }
          session.Transaction.Commit();
          Application.Current.Dispatcher.Invoke((Action) (() => this.OnRequestClose(true)));
        }));
      }
    }

    public ICommand ShowRegisteredDevicesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          StructureNodeDTO structureNodeDto = this.SelectedMasterStructureNode?.MinomatStructureNode ?? this.SelectedSlaveStructureNode?.MinomatStructureNode;
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<RegisteredDevicesForMinomatViewModel>((IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory), (IParameter) new ConstructorArgument("selectedMinomatStructureNode", (object) structureNodeDto), (IParameter) new ConstructorArgument("rootNode", (object) this._locationNode)));
        }));
      }
    }

    private void OnMeterValuesReceivedHandler(object sender, MSS.Core.Model.Meters.Meter meter)
    {
      MeterDTO savedMeterDTO = Mapper.Map<MSS.Core.Model.Meters.Meter, MeterDTO>(meter);
      foreach (StructureNodeDTO structureNodeDto in this._metersInStructure)
      {
        StructureNodeDTO node = structureNodeDto;
        if (node.NodeType.Name == "Meter" && ((MeterDTO) node.Entity).Id == meter.Id && ((MeterDTO) node.Entity).SerialNumber == meter.SerialNumber)
        {
          ++this._numberOfReadMeters;
          Application.Current.Dispatcher.Invoke((Action) (() =>
          {
            node.Entity = (object) savedMeterDTO;
            node.Image = node.SetImageNode();
          }));
        }
      }
      if (this._numberOfReadMeters != this._numberOfMetersInStructure)
        return;
      this.walkByTestManager.StopReadingValues();
      this.ResetWalkByButtons();
    }

    private void OnErrorReceivedHandler(object sender, object e) => this.ResetWalkByButtons();

    private void GetMetersInStructure(StructureNodeDTO selectedNode)
    {
      this._metersInStructure.Clear();
      if (selectedNode.NodeType.Name == "Meter")
        this._metersInStructure.Add(selectedNode);
      this.WalkStructure(selectedNode);
    }

    private void WalkStructure(StructureNodeDTO selectedNode)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) selectedNode.SubNodes)
      {
        if (subNode.NodeType.Name == "Meter")
          this._metersInStructure.Add(subNode);
        this.WalkStructure(subNode);
      }
    }

    private static ObservableCollection<StructureNodeDTO> GetStructureNodeCollection(
      ObservableCollection<StructureNodeDTO> locationNode,
      Func<StructureNodeDTO, bool> condition)
    {
      StructureNodeDTO structureNodeDto = locationNode.FirstOrDefault<StructureNodeDTO>();
      return structureNodeDto != null ? new ObservableCollection<StructureNodeDTO>(structureNodeDto.SubNodes.Where<StructureNodeDTO>(condition)) : (ObservableCollection<StructureNodeDTO>) null;
    }

    private void SetParentAndRootNode(StructureNodeDTO node)
    {
      if (node.ParentNode != null || node.RootNode != null || this._parentForSelectedNode == null)
        return;
      StructureNodeDTO structureNodeDto = this._parentForSelectedNode.RootNode != this._parentForSelectedNode ? this._parentForSelectedNode.RootNode : this._parentForSelectedNode;
      node.ParentNode = this._parentForSelectedNode;
      node.RootNode = structureNodeDto;
    }

    private StructureNodeDTO GetSecondLevelNode(string nodeName)
    {
      StructureNodeType nodeType = this._repositoryFactory.GetRepository<StructureNodeType>().FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (x => x.Name == nodeName));
      return new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Fixed)
      {
        ParentNode = this._nodesCollection[0],
        RootNode = this._nodesCollection[0]
      };
    }

    private void RemoveSelectedItemFromList(
      StructureNodeDTO structureNode,
      ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      if (structureNode == null)
      {
        this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_ADD_METER);
        this.IsDeleteTenantOrMeter = false;
      }
      else
      {
        this.RemoveSelectedNodeFromStructure(structureNode, nodeCollection);
        this.RemoveSerialNumberFromUniquenessList(structureNode);
        this.IsDeleteTenantOrMeter = false;
      }
    }

    private void RemoveSelectedItemFromList(
      StructureNodeDTO structureNode,
      ObservableCollection<MinomatStructure> minomatStructureCollection)
    {
      if (structureNode == null)
      {
        this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_ADD_METER);
        this.IsDeleteTenantOrMeter = false;
      }
      else
      {
        this.RemoveSelectedNodeFromMinomatStructureCollection(structureNode, minomatStructureCollection);
        this.RemoveSerialNumberFromUniquenessList(structureNode);
        this.IsDeleteTenantOrMeter = false;
      }
    }

    private void RemoveSelectedNodeFromMinomatStructureCollection(
      StructureNodeDTO selectedNode,
      ObservableCollection<MinomatStructure> minomatCollection)
    {
      foreach (MinomatStructure minomat in (Collection<MinomatStructure>) minomatCollection)
      {
        if (minomat.MinomatStructureNode == selectedNode)
        {
          minomatCollection.Remove(minomat);
          break;
        }
        if (minomat.MinomatStructureNode.SubNodes.Any<StructureNodeDTO>())
        {
          foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) minomat.MinomatStructureNode.SubNodes)
          {
            StructureNodeDTO subnode = subNode;
            MinomatStructure minomatStructure = minomatCollection.FirstOrDefault<MinomatStructure>((Func<MinomatStructure, bool>) (item => item.MinomatStructureNode.Id == subnode.Id));
            if (minomatStructure != null)
              minomatCollection.Remove(minomatStructure);
          }
        }
      }
    }

    private StructureNodeDTO GetThirdLevelNode(StructureNodeDTO parentNode, string nodeName)
    {
      StructureNodeType nodeType = this._repositoryFactory.GetRepository<StructureNodeType>().FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (x => x.Name == nodeName));
      return new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Fixed)
      {
        ParentNode = parentNode,
        RootNode = parentNode.RootNode
      };
    }

    protected void UpdateStructure(ActionStructureAndEntitiesUpdate update)
    {
      this._node = update.Node;
      this._updatedLocation = update.Location;
      this._updateMeterDTO = update.MeterDTO;
      this._updatedTenant = update.Tenant;
      this._name = update.Name;
      this._description = update.Description;
      if (update.Location != null)
      {
        this.SetLocationDetails(update.Node);
        this._locationNode = update.Node;
      }
      if (this._updateMeterDTO != null)
        this._node.Entity = (object) this._updateMeterDTO;
      if (this._updatedTenant != null)
        this._node.Entity = (object) Mapper.Map<Tenant, TenantDTO>(this._updatedTenant);
      if (this._node != null)
      {
        this._node.Name = this._name;
        this._node.Description = this._description;
      }
      new StructuresManager(this._repositoryFactory).TransactionalUpdateStructure((IList<StructureNodeDTO>) new StructureNodeDTO[1]
      {
        this._node
      }, StructureTypeEnum.Fixed, (StructureNodeEquipmentSettings) null);
    }

    private void ResetWalkByButtons()
    {
      WalkByTestManager.IsWalkByTestStarted = false;
      this.IsWalkByTestButtonEnabled = true;
      this.IsStopWalkByTestButtonEnabled = false;
    }

    private GMMMinomatConfiguratorResult SaveAndRegisterMinomatMeters(
      List<MeterDTO> meterList,
      MinomatSerializableDTO selectedMinomat)
    {
      bool flag = true;
      ISession session = this._repositoryFactory.GetSession();
      try
      {
        Minomat minomat = Mapper.Map<MinomatSerializableDTO, Minomat>(selectedMinomat);
        GMMMinomatConfigurator instance = GMMMinomatConfigurator.GetInstance(selectedMinomat.IsMaster, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
        instance.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
        List<Guid> meterIds = meterList.Select<MeterDTO, Guid>((Func<MeterDTO, Guid>) (item => item.Id)).ToList<Guid>();
        List<Guid> alreadyRegisteredIds = this._minomatMeterRepository.Where((Expression<Func<MinomatMeter, bool>>) (item => item.Minomat.Id == minomat.Id && meterIds.Contains(item.Meter.Id))).Select<MinomatMeter, Guid>((Expression<Func<MinomatMeter, Guid>>) (item => item.Meter.Id)).ToList<Guid>();
        List<MeterDTO> list = meterList.Where<MeterDTO>((Func<MeterDTO, bool>) (item => !alreadyRegisteredIds.Contains(item.Id))).ToList<MeterDTO>();
        GMMMinomatConfiguratorResult configuratorResult = instance.RegisterDevicesOnMinomat(list, minomat);
        if (configuratorResult.IsSuccess)
        {
          session.BeginTransaction();
          Minomat byId = this._minomatRepository.GetById((object) minomat.Id);
          foreach (MeterDTO meterDto in list)
            this._minomatMeterRepository.TransactionalInsert(new MinomatMeter()
            {
              SignalStrength = 0,
              Status = new MeterStatusEnum?(MeterStatusEnum.Registered),
              Meter = this._meterRepository.GetById((object) meterDto.Id),
              Minomat = byId
            });
          MinomatRadioDetails entity = this._repositoryFactory.GetRepository<MinomatRadioDetails>().FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (r => r.Minomat.Id == minomat.Id));
          if (entity != null)
          {
            entity.NrOfRegisteredDevices = meterList.Count.ToString();
            entity.StatusDevices = new MinomatStatusDevicesEnum?(MinomatStatusDevicesEnum.DevicesRegistered);
            this._repositoryFactory.GetRepository<MinomatRadioDetails>().TransactionalUpdate(entity);
          }
          session.Transaction.Commit();
        }
        return configuratorResult;
      }
      catch (Exception ex)
      {
        MSS.Business.Errors.MessageHandler.LogException(ex);
        flag = false;
        if (session.IsOpen && session.Transaction.IsActive)
          session.Transaction.Rollback();
        return new GMMMinomatConfiguratorResult()
        {
          IsSuccess = false,
          Message = ex.Message
        };
      }
    }

    private void SetLocationDetails(StructureNodeDTO selectedNode)
    {
      LocationDTO entity = selectedNode.Entity as LocationDTO;
      string str = Resources.MSS_ExecuteInstallationOrder_Location;
      if (entity != null)
        str = str + entity.BuildingNr + " - ";
      if (!string.IsNullOrEmpty(selectedNode.Description))
        str += selectedNode.Description;
      this.LocationInfo = str;
    }

    public override ObservableCollection<StructureNodeDTO> GetStructureCollection()
    {
      return this._nodesCollection;
    }

    private void GetMetersInStructure(
      StructureNodeDTO root,
      ref List<StructureNodeDTO> listOfMeters)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) root.SubNodes)
      {
        if (subNode.NodeType.Name == "Meter")
          listOfMeters.Add(subNode);
        this.GetMetersInStructure(subNode, ref listOfMeters);
      }
    }

    private void DeleteAssociatedMinomatMeters(StructureNodeDTO minomatToDelete)
    {
      if (minomatToDelete.Entity == null || !(minomatToDelete.Entity is MinomatSerializableDTO) || !(minomatToDelete.Entity is MinomatSerializableDTO))
        return;
      MinomatSerializableDTO entity1 = minomatToDelete.Entity as MinomatSerializableDTO;
      List<Guid> minomatIds = new List<Guid>();
      minomatIds.Add(entity1.Id);
      if (entity1.IsMaster)
        this.GetMinomatsInStructure(minomatToDelete, ref minomatIds);
      List<MinomatMeter> list = this._minomatMeterRepository.Where((Expression<Func<MinomatMeter, bool>>) (item => minomatIds.Contains(item.Minomat.Id))).ToList<MinomatMeter>();
      if (list != null && list.Any<MinomatMeter>())
      {
        ISession session = this._repositoryFactory.GetSession();
        session.BeginTransaction();
        foreach (MinomatMeter entity2 in list)
          this._minomatMeterRepository.TransactionalDelete(entity2);
        session.Transaction.Commit();
      }
    }

    private void GetMinomatsInStructure(StructureNodeDTO root, ref List<Guid> listOfMinomatIds)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) root.SubNodes)
      {
        if (subNode.Entity != null && subNode.Entity is MinomatSerializableDTO)
        {
          MinomatSerializableDTO entity = subNode.Entity as MinomatSerializableDTO;
          if (entity.Id != Guid.Empty)
            listOfMinomatIds.Add(entity.Id);
        }
        this.GetMinomatsInStructure(subNode, ref listOfMinomatIds);
      }
    }

    private void SetRegisteredDevicesForMinomats()
    {
      List<Guid> minomatIds = new List<Guid>();
      foreach (MinomatStructure structureForMinomat in (Collection<MinomatStructure>) this.StructureForMinomats)
      {
        minomatIds.Add((structureForMinomat.MinomatStructureNode.Entity as MinomatSerializableDTO).Id);
        this.GetMasterAndSlaveIds(ref minomatIds, structureForMinomat.MinomatStructureNode.SubNodes);
      }
      List<MinomatMeter> list = this._minomatMeterRepository.Where((Expression<Func<MinomatMeter, bool>>) (item => minomatIds.Contains(item.Minomat.Id))).ToList<MinomatMeter>();
      foreach (MinomatStructure structureForMinomat in (Collection<MinomatStructure>) this.StructureForMinomats)
      {
        MinomatStructure currentMinomatStructure = structureForMinomat;
        int num = list.Count<MinomatMeter>((Func<MinomatMeter, bool>) (item =>
        {
          Guid id = item.Minomat.Id;
          Guid? nullable = currentMinomatStructure.MinomatStructureNode.Entity is MinomatSerializableDTO entity2 ? new Guid?(entity2.Id) : new Guid?();
          return nullable.HasValue && id == nullable.GetValueOrDefault();
        }));
        (currentMinomatStructure.MinomatStructureNode.Entity as MinomatSerializableDTO).NrOfRegisteredDevices = num > 0 ? num.ToString() : "0";
        this.SetRegisteredDevicesFromList(list, currentMinomatStructure.MinomatStructureNode.SubNodes);
      }
    }

    private void GetMasterAndSlaveIds(
      ref List<Guid> minomatIds,
      ObservableCollection<StructureNodeDTO> structure)
    {
      foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) structure)
      {
        if (structureNodeDto.Entity is MinomatSerializableDTO && structureNodeDto.Entity is MinomatSerializableDTO entity && entity.Id != Guid.Empty)
          minomatIds.Add(entity.Id);
        this.GetMasterAndSlaveIds(ref minomatIds, structureNodeDto.SubNodes);
      }
    }

    private void SetRegisteredDevicesFromList(
      List<MinomatMeter> registeredDevicesForMinomats,
      ObservableCollection<StructureNodeDTO> structureToUpdate)
    {
      foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) structureToUpdate)
      {
        StructureNodeDTO node = structureNodeDto;
        if (node.Entity is MinomatSerializableDTO)
        {
          int num = registeredDevicesForMinomats.Count<MinomatMeter>((Func<MinomatMeter, bool>) (item =>
          {
            Guid id = item.Minomat.Id;
            Guid? nullable = node.Entity is MinomatSerializableDTO entity2 ? new Guid?(entity2.Id) : new Guid?();
            return nullable.HasValue && id == nullable.GetValueOrDefault();
          }));
          (node.Entity as MinomatSerializableDTO).NrOfRegisteredDevices = num > 0 ? num.ToString() : "0";
        }
        this.SetRegisteredDevicesFromList(registeredDevicesForMinomats, node.SubNodes);
      }
    }

    private void CalculateNoOfDevicesForTenants(
      ObservableCollection<StructureNodeDTO> nodesCollection)
    {
      foreach (StructureNodeDTO nodes in (Collection<StructureNodeDTO>) nodesCollection)
      {
        if (nodes.Entity is TenantDTO entity)
        {
          int? nullable = new int?(nodes.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          entity.NoOfDevices = nullable;
        }
        this.CalculateNoOfDevicesForTenants(nodes.SubNodes);
      }
    }

    private StructureNodeDTO GetTenantParent(StructureNodeDTO node)
    {
      StructureNodeDTO tenantParent = node;
      while (tenantParent.ParentNode != null && tenantParent.ParentNode.Id != Guid.Empty && tenantParent.NodeType.Name != "Tenant")
        tenantParent = tenantParent.ParentNode;
      return tenantParent;
    }

    private void UpdateSelectedMinomat(MinomatStructure selectedMinomat)
    {
      Guid minomatEntityId = (selectedMinomat.MinomatStructureNode.Entity as MinomatSerializableDTO).Id;
      this._minomatRepository.Refresh((object) minomatEntityId);
      MinomatSerializableDTO minomatSerializableDto = Mapper.Map<Minomat, MinomatSerializableDTO>(this._minomatRepository.FirstOrDefault((Expression<Func<Minomat, bool>>) (item => item.Id == minomatEntityId)));
      this._repositoryFactory.GetSession().Clear();
      int num = this._repositoryFactory.GetRepository<MinomatMeter>().Where((Expression<Func<MinomatMeter, bool>>) (item => item.Minomat.Id == minomatEntityId)).ToList<MinomatMeter>().Count<MinomatMeter>();
      minomatSerializableDto.NrOfRegisteredDevices = num > 0 ? num.ToString() : "0";
      if (string.IsNullOrEmpty(selectedMinomat.StatusDevices) || selectedMinomat.StatusDevices == MinomatStatusDevicesEnum.Open.GetStringValue())
      {
        MinomatRadioDetails entity = this._minomatRadioDetailsRepository.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == (selectedMinomat.MinomatStructureNode.Entity as MinomatSerializableDTO).Id));
        if (entity != null)
        {
          if (num == 0 && string.IsNullOrEmpty(selectedMinomat.StatusDevices))
            entity.StatusDevices = new MinomatStatusDevicesEnum?(MinomatStatusDevicesEnum.Open);
          else if (num > 0)
            entity.StatusDevices = new MinomatStatusDevicesEnum?(MinomatStatusDevicesEnum.DevicesRegistered);
          this._minomatRadioDetailsRepository.Update(entity);
          selectedMinomat.StatusDevices = ((Enum) (ValueType) entity.StatusDevices).GetStringValue();
        }
      }
      selectedMinomat.MinomatStructureNode.Entity = (object) minomatSerializableDto;
    }

    private void CalculateReceivedAndRegisteredPercentages()
    {
      int num1 = 0;
      int num2 = 0;
      List<StructureNodeDTO> list1 = this._locationNode.SubNodes.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.Entity is TenantDTO)).ToList<StructureNodeDTO>();
      List<Guid> meterIdsList = new List<Guid>();
      List<Guid> minomatIdsList = new List<Guid>();
      foreach (StructureNodeDTO structureNodeDto in list1)
        meterIdsList.AddRange((IEnumerable<Guid>) structureNodeDto.SubNodes.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.Entity is MeterDTO)).Select<StructureNodeDTO, Guid>((Func<StructureNodeDTO, Guid>) (item => (item.Entity as MeterDTO).Id)).ToList<Guid>());
      this._locationNode.SubNodes.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.Entity is MinomatSerializableDTO)).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (minomatMaster =>
      {
        minomatIdsList.Add((minomatMaster.Entity as MinomatSerializableDTO).Id);
        minomatIdsList.AddRange((IEnumerable<Guid>) minomatMaster.SubNodes.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.Entity is MinomatSerializableDTO)).Select<StructureNodeDTO, Guid>((Func<StructureNodeDTO, Guid>) (item => (item.Entity as MinomatSerializableDTO).Id)).ToList<Guid>());
      }));
      List<MinomatMeter> list2 = this._minomatMeterRepository.Where((Expression<Func<MinomatMeter, bool>>) (item => meterIdsList.Contains(item.Meter.Id) && minomatIdsList.Contains(item.Minomat.Id))).ToList<MinomatMeter>();
      int num3 = num1 + meterIdsList.Count;
      foreach (Guid guid in meterIdsList)
      {
        Guid currentMeterId = guid;
        IEnumerable<MinomatMeter> source = list2.Where<MinomatMeter>((Func<MinomatMeter, bool>) (item => item.Meter.Id == currentMeterId));
        if (source.Any<MinomatMeter>() && source.Any<MinomatMeter>((Func<MinomatMeter, bool>) (item =>
        {
          MeterStatusEnum? status = item.Status;
          MeterStatusEnum meterStatusEnum = MeterStatusEnum.Registered;
          return status.GetValueOrDefault() == meterStatusEnum && status.HasValue;
        })))
          ++num2;
      }
      double num4 = num3 != 0 ? (double) num2 / (double) num3 * 100.0 : 0.0;
      this.RegisteredDevicesPercentage = num3 != 0 ? string.Format("{0:0.00}%", (object) num4) : "";
      this.RegisteredDevicesImageLocation = num4 < 0.0 || num4 >= 85.0 ? (num4 < 85.0 || num4 >= 95.0 ? "pack://application:,,,/Styles;component/Images/Settings/light-green.png" : "pack://application:,,,/Styles;component/Images/Settings/light-yellow.png") : "pack://application:,,,/Styles;component/Images/Settings/light-red.png";
    }

    private string GetGSMTestReceptionString(GSMTestReceptionState? gsmState)
    {
      if (!gsmState.HasValue)
        return Resources.MSS_Client_GSMState_Empty_NotStarted;
      GSMTestReceptionState? nullable = gsmState;
      if (nullable.HasValue)
      {
        switch (nullable.GetValueOrDefault())
        {
          case GSMTestReceptionState.NotStartet:
            return Resources.MSS_Client_GSMTestReceptionState_NotStarted;
          case GSMTestReceptionState.NotComplete:
            return Resources.MSS_Client_GSMTestReceptionState_NotComplete;
          case GSMTestReceptionState.Successful:
            return Resources.MSS_Client_GSMTestReceptionState_Successful;
          case GSMTestReceptionState.Failed:
            return Resources.MSS_Client_GSMTestReceptionState_Failed;
        }
      }
      return Resources.MSS_Client_GSMState_Empty_NotStarted;
    }
  }
}


--- ExecuteReadingOrderViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.ExecuteReadingOrderViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using Common.Library.NHibernate.Data;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.Configuration;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.GMMWrapper;
using MSS.Business.Modules.OrdersManagement;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.ApplicationParamenters;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Orders;
using MSS.Core.Model.Structures;
using MSS.Core.Utils;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Orders;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.Configuration;
using MSS_Client.ViewModel.Meters;
using MSS_Client.ViewModel.Orders.Ctrls;
using MSS_Client.ViewModel.Settings;
using MVVM.Commands;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Linq;
using NHibernate.SqlCommand;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Configuration;
using System.Linq;
using System.Linq.Expressions;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using Telerik.Windows.Data;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class ExecuteReadingOrderViewModel : MVVM.ViewModel.ViewModelBase
  {
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly OrderDTO _selectedOrder;
    protected readonly IRepository<MeterReadingValue> _meterReadingValueRepository;
    protected readonly IRepository<OrderReadingValues> _orderReadingValuesRepository;
    private readonly ISession nhSession;
    private BackgroundWorker _backgroundWorker;
    private readonly IWindowFactory _windowFactory;
    private ReaderMinoConnectManager _readerMinoConnect;
    private ReceiverMinoConnectManager _receiverMinoConnect;
    private IDeviceManager _deviceManager;
    private readonly List<Guid> _blueMeters;
    private readonly StructureNodeEquipmentSettings _structureNodeEquipmentSettings;
    private bool isIRReadingStarted = false;
    private readonly int registerCollectionCount;
    private Dictionary<Guid, string> _metersToBeRead = new Dictionary<Guid, string>();
    private const string REMOTE_VPN = "VPN";
    private const string IR_MINOMAT_V4 = "IR Minomat V4";
    private EquipmentModel _selectedEquipmentModel;
    private Dictionary<Guid, StructureNodeEquipmentSettings> _equipmentSettingsForMeters;
    private Guid _currentlySelectedItem = Guid.Empty;
    private IStatelessSession _session;
    private IList<MeasureUnit> _measureUnitList;
    private List<string> _importableDeviceModelNameList;
    private byte[] _structureBytes;
    private ObservableCollection<ExecuteOrderStructureNode> _nodesList = new ObservableCollection<ExecuteOrderStructureNode>();
    private ObservableCollection<ExecuteOrderStructureNode> _selectedMeterList;
    private IEnumerable<ProfileType> _connectionProfileCollection;
    private ProfileType _selectedConnectionProfile;
    private Visibility _isChangeProfileTypeVisible = Visibility.Visible;
    private ExecuteOrderStructureNode _selectedItem;
    private ObservableCollection<object> _selectedNodes;
    private bool _isDeviceSelected;
    private bool _isTenantOrDeviceSelected;
    private RadObservableCollection<ReadingValuesDTO> _readingValuesCollection;
    private ObservableCollection<MeterReadingValueDTO> _genericMbusReadingValuesCollection;
    private IEnumerable<ValueIdent.ValueIdPart_MeterType> _registerCollection;
    private IEnumerable<ValueIdentString> _physicalQuantitiesEnumerable;
    private IEnumerable<ValueIdentString> _meterTypeEnumerable;
    private IEnumerable<ValueIdentString> _calculationEnumerable;
    private IEnumerable<ValueIdentString> _calculationStartEnumerable;
    private IEnumerable<ValueIdentString> _storageIntervalEnumerable;
    private IEnumerable<ValueIdentString> _creationEnumerable;
    private bool _isReadingValuesGridVisible;
    private bool _isSaveButtonVisible;
    private bool _isGenericMbusReadingValuesGridVisible;
    private string _newRowPosition;
    private bool _canUserInsertRows;
    private MVVM.ViewModel.ViewModelBase _messageUserControl;
    private string _numberOfReadMetersLabel;
    private bool _isPhysicalStructure;
    private bool _isStartButtonEnabled;
    private bool _isChangeDeviceModelParametersEnabled;
    private ObservableCollection<ReadingValuesDTO> _readingValuesToDeleteCollection = new ObservableCollection<ReadingValuesDTO>();
    private ObservableCollection<MeterReadingValueDTO> _meterReadingValuesToDeleteCollection = new ObservableCollection<MeterReadingValueDTO>();
    private string _selectedEquipmentName;
    private bool _isStopButtonEnabled;
    private TransceiverType _transceiverType;
    private bool _isReadingDeviceViaCBEnabled;
    private bool _isReadingStarted;
    private bool _isShortDeviceNoVisible;
    private ProgressBarCtrl _progressBar;

    [Inject]
    public ExecuteReadingOrderViewModel(
      OrderDTO selectedOrder,
      IDeviceManager deviceManager,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
    {
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._deviceManager = deviceManager;
      this.nhSession = this._repositoryFactory.GetSession();
      this._meterReadingValueRepository = this._repositoryFactory.GetRepository<MeterReadingValue>();
      this._orderReadingValuesRepository = this._repositoryFactory.GetRepository<OrderReadingValues>();
      this._repositoryFactory.GetRepository<MSS.Core.Model.Meters.Meter>();
      this._selectedOrder = selectedOrder;
      StructureTypeEnum? structureType = this._selectedOrder.StructureType;
      StructureTypeEnum structureTypeEnum1 = StructureTypeEnum.Physical;
      this.IsPhysicalStructure = structureType.GetValueOrDefault() == structureTypeEnum1 && structureType.HasValue;
      this._blueMeters = new List<Guid>();
      this.StructureBytes = selectedOrder.StructureBytes;
      EventPublisher.Register<StructureBytesUpdated>(new Action<StructureBytesUpdated>(this.RefreshStructureBytes));
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(this.CreateMessage));
      EventPublisher.Register<ErrorDuringReading>(new Action<ErrorDuringReading>(this.HandleErrorDuringReading));
      EventPublisher.Register<OrderReadingValuesSavedEvent>(new Action<OrderReadingValuesSavedEvent>(this.OrderReadingValuesSaved));
      EventPublisher.Register<ProgressFinished>(new Action<ProgressFinished>(this.OnReadingProgressBarFinish));
      this.CloseCommand = (ICommand) new MSS.Client.UI.Common.Utils.DelegateCommand((Action) (() =>
      {
        this.CleanupBeforeClosing();
        this.Dispose();
      }), (Func<bool>) (() => true));
      this._importableDeviceModelNameList = GMMHelper.GetDeviceModelNameList(this._selectedOrder.StructureType);
      this.StructureForSelectedOrder = this.GetOrderManagerInstance().GetNodes(this._structureBytes, this._selectedOrder.Id, this._blueMeters, this._importableDeviceModelNameList).Item1;
      this.IsChangeDeviceModelParametersEnabled = false;
      this._structureNodeEquipmentSettings = repositoryFactory.GetRepository<StructureNodeEquipmentSettings>().FirstOrDefault((Expression<Func<StructureNodeEquipmentSettings, bool>>) (x => x.StructureNode.Id == this._selectedOrder.RootStructureNodeId));
      if (this._structureNodeEquipmentSettings != null)
      {
        this.SelectedEquipmentName = this._structureNodeEquipmentSettings?.EquipmentName;
        this._selectedEquipmentModel = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.UpdateEquipmentWithSavedParams(this._deviceManager.GetEquipmentModels().FirstOrDefault<EquipmentModel>((Func<EquipmentModel, bool>) (e => e.Name == this.SelectedEquipmentName)), this._structureNodeEquipmentSettings.EquipmentParams);
        this._selectedItem = this.StructureForSelectedOrder.FirstOrDefault<ExecuteOrderStructureNode>();
        this.ConnectionProfileCollection = this.InitConnectionProfileCollection();
        if (this._structureNodeEquipmentSettings != null)
        {
          this.SelectedConnectionProfile = this._connectionProfileCollection.FirstOrDefault<ProfileType>((Func<ProfileType, bool>) (_ => _.Name == this._structureNodeEquipmentSettings.ReadingProfileName)) ?? this._connectionProfileCollection.FirstOrDefault<ProfileType>();
          if (!string.IsNullOrEmpty(this._structureNodeEquipmentSettings.ReadingProfileParams) && this.SelectedConnectionProfile != null)
            MSS.Business.Modules.AppParametersManagement.AppParametersManagement.UpdateProfileTypeWithSavedParams(this.SelectedConnectionProfile, this._structureNodeEquipmentSettings.ReadingProfileParams);
          else if (string.IsNullOrEmpty(this._structureNodeEquipmentSettings.ReadingProfileParams) && this._structureNodeEquipmentSettings?.SystemName == "M-Bus" && this._structureNodeEquipmentSettings.ScanParams != null && this.SelectedConnectionProfile != null)
            MSS.Business.Modules.AppParametersManagement.AppParametersManagement.UpdateProfileTypeWithSavedParams(this.SelectedConnectionProfile, this._structureNodeEquipmentSettings.ScanParams);
        }
        else
          this.SelectedConnectionProfile = this._connectionProfileCollection.FirstOrDefault<ProfileType>();
      }
      this.IsStartButtonEnabled = this.SelectedItem != null && this.SelectedConnectionProfile != null;
      this.IsStopButtonEnabled = false;
      this.IsSaveButtonVisible = false;
      this.IsReadingDeviceViaCBEnabled = true;
      this.registerCollectionCount = this.GetRegisterColection.Count<ValueIdent.ValueIdPart_MeterType>();
      this.IsReadingStarted = false;
      structureType = this._selectedOrder.StructureType;
      StructureTypeEnum structureTypeEnum2 = StructureTypeEnum.Fixed;
      this.IsShortDeviceNoVisible = structureType.GetValueOrDefault() == structureTypeEnum2 && structureType.HasValue;
      this.UpdateLabel();
      this._physicalQuantitiesEnumerable = ValueIdentHelper.GetPhysicalQuantitiesEnumerable().Select<string, ValueIdentString>((Func<string, ValueIdentString>) (item => new ValueIdentString()
      {
        Value = item
      }));
      this._meterTypeEnumerable = ValueIdentHelper.GetMeterTypeEnumerable().Select<string, ValueIdentString>((Func<string, ValueIdentString>) (item => new ValueIdentString()
      {
        Value = item
      }));
      this._calculationEnumerable = ValueIdentHelper.GetCalculationEnumerable().Select<string, ValueIdentString>((Func<string, ValueIdentString>) (item => new ValueIdentString()
      {
        Value = item
      }));
      this._calculationStartEnumerable = ValueIdentHelper.GetCalculationStartEnumerable().Select<string, ValueIdentString>((Func<string, ValueIdentString>) (item => new ValueIdentString()
      {
        Value = item
      }));
      this._storageIntervalEnumerable = ValueIdentHelper.GetStorageIntervalEnumerable().Select<string, ValueIdentString>((Func<string, ValueIdentString>) (item => new ValueIdentString()
      {
        Value = item
      }));
      this._creationEnumerable = ValueIdentHelper.GetCreationEnumerable().Select<string, ValueIdentString>((Func<string, ValueIdentString>) (item => new ValueIdentString()
      {
        Value = item
      }));
      this._measureUnitList = this._repositoryFactory.GetRepository<MeasureUnit>().GetAll();
      Mapper.CreateMap<MeterReadingValue, MeterReadingValueDTO>();
      this._equipmentSettingsForMeters = new Dictionary<Guid, StructureNodeEquipmentSettings>();
      structureType = this._selectedOrder.StructureType;
      StructureTypeEnum structureTypeEnum3 = StructureTypeEnum.Fixed;
      if (structureType.GetValueOrDefault() != structureTypeEnum3 || !structureType.HasValue)
      {
        List<Guid> meterGuids = this.GetMeterGuids();
        List<StructureNode> list1 = this._repositoryFactory.GetRepository<StructureNode>().Where((Expression<Func<StructureNode, bool>>) (item => meterGuids.Contains(item.EntityId))).ToList<StructureNode>();
        List<Guid> structureNodeIds = list1.Select<StructureNode, Guid>((Func<StructureNode, Guid>) (item => item.Id)).ToList<Guid>();
        List<StructureNodeEquipmentSettings> list2 = this._repositoryFactory.GetRepository<StructureNodeEquipmentSettings>().Where((Expression<Func<StructureNodeEquipmentSettings, bool>>) (item => structureNodeIds.Contains(item.StructureNode.Id))).ToList<StructureNodeEquipmentSettings>();
        foreach (Guid guid in meterGuids)
        {
          Guid meterId = guid;
          Guid? structureNodeIdForCurrentMeter = list1.FirstOrDefault<StructureNode>((Func<StructureNode, bool>) (item => item.EntityId == meterId))?.Id;
          StructureNodeEquipmentSettings equipmentSettings = (StructureNodeEquipmentSettings) null;
          if (structureNodeIdForCurrentMeter.HasValue)
            equipmentSettings = list2.FirstOrDefault<StructureNodeEquipmentSettings>((Func<StructureNodeEquipmentSettings, bool>) (item =>
            {
              Guid id = item.StructureNode.Id;
              Guid? nullable = structureNodeIdForCurrentMeter;
              return nullable.HasValue && id == nullable.GetValueOrDefault();
            }));
          this._equipmentSettingsForMeters.Add(meterId, equipmentSettings);
        }
      }
      string appSetting = ConfigurationManager.AppSettings["DatabaseEngine"];
      HibernateMultipleDatabasesManager.Initialize(appSetting);
      this._session = HibernateMultipleDatabasesManager.DataSessionFactory(appSetting).OpenStatelessSession();
      this.ProgressBar = new ProgressBarCtrl();
    }

    private void UpdateLabel()
    {
      this.NumberOfReadMetersLabel = Resources.ExecuteReadingOrder_ReadMeters + " " + (object) this.GetNumberOfReadMetersFromStructure() + " " + Resources.ExecuteReadingOrder_of + " " + (object) this._selectedOrder.DevicesCount;
    }

    private void CreateMessage(ActionSyncFinished messageFinished)
    {
      switch (messageFinished.Message.MessageType)
      {
        case MessageTypeEnum.Success:
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(messageFinished.Message.MessageText);
          break;
        case MessageTypeEnum.Warning:
          if (!messageFinished.ContinueScanning)
            this.StopReading();
          MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Warning_Title, messageFinished.Message.MessageText, false);
          break;
      }
    }

    private void RefreshStructureBytes(StructureBytesUpdated update)
    {
      if (update.StructureBytes != null)
      {
        this.StructureBytes = update.StructureBytes;
        this._selectedOrder.StructureBytes = update.StructureBytes;
      }
      if (update.MeterReadByWalkBy != Guid.Empty)
        this._blueMeters.Add(update.MeterReadByWalkBy);
      if (update.SerialNumberRead != null)
      {
        Guid key = this._metersToBeRead.FirstOrDefault<KeyValuePair<Guid, string>>((Func<KeyValuePair<Guid, string>, bool>) (item => item.Value == update.SerialNumberRead)).Key;
        ExecuteOrderStructureNode foundNode = (ExecuteOrderStructureNode) null;
        this.FindItemInOrderByGuid(key, this.StructureForSelectedOrder, ref foundNode);
        ReadingValueStatusEnum? status1;
        int num;
        if (foundNode != null)
        {
          status1 = foundNode.Status;
          ReadingValueStatusEnum readingValueStatusEnum = ReadingValueStatusEnum.ok;
          num = status1.GetValueOrDefault() == readingValueStatusEnum ? (!status1.HasValue ? 1 : 0) : 1;
        }
        else
          num = 0;
        if (num != 0)
        {
          foundNode.Status = new ReadingValueStatusEnum?(ReadingValueStatusEnum.ok);
          OrderSerializableStructure serializableStructure = StructuresHelper.DeserializeStructure(this.StructureBytes);
          OrderSerializableStructure orderSerializableStructure = serializableStructure;
          Guid meterId = foundNode.MeterId;
          status1 = foundNode.Status;
          ReadingValueStatusEnum? status2 = new ReadingValueStatusEnum?(status1.Value);
          this.SetMeterSerializableDTOStatus(orderSerializableStructure, meterId, status2);
          this.SetMeterSerializableDTOIsConfigured(serializableStructure, foundNode.MeterId, update.IsConfigured);
          this.StructureBytes = StructuresHelper.SerializeStructure(serializableStructure);
          this._selectedOrder.StructureBytes = this.StructureBytes;
          OrdersManager.SetImageAndColor(foundNode, Brushes.LightGreen, ImageHelper.Instance.GetBitmapImageFromFiles(new string[1]
          {
            "pack://application:,,,/Styles;component/Images/StructureIcons/meter.png"
          }));
          this.OnPropertyChanged("StructureForSelectedOrder");
          EventPublisher.Publish<ProgressBarItemDone>(new ProgressBarItemDone()
          {
            Item = update.SerialNumberRead
          }, (IViewModel) this);
        }
      }
      if (!update.AnyReadingValuesRead)
        return;
      this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(string.Format(Resources.MSS_Client_Reading_Values_Received_Message, (object) update.SerialNumberRead));
    }

    private void HandleErrorDuringReading(ErrorDuringReading error)
    {
      if (error.SerialNumber == null)
        return;
      Guid key = this._metersToBeRead.FirstOrDefault<KeyValuePair<Guid, string>>((Func<KeyValuePair<Guid, string>, bool>) (item => item.Value == error.SerialNumber)).Key;
      ExecuteOrderStructureNode foundNode = (ExecuteOrderStructureNode) null;
      this.FindItemInOrderByGuid(key, this.StructureForSelectedOrder, ref foundNode);
      if (foundNode != null)
      {
        if (error.ErrorMessage == ReadingValueStatusEnum.MissingTranslationRules.ToString())
          this.SetMeterImageStatusAndDisplayWarningMessage(foundNode, Brushes.Yellow, ReadingValueStatusEnum.MissingTranslationRules, Resources.MSS_ReaderManager_MissingTranslationRule, error.SerialNumber);
        else
          this.SetMeterImageStatusAndDisplayWarningMessage(foundNode, Brushes.OrangeRed, ReadingValueStatusEnum.nok, Resources.MSS_NoValidReadingValuesReceived, error.SerialNumber);
        if (foundNode.Status.HasValue)
          this.SetMeterSerializableDTOStatusInStructureBytes(foundNode.MeterId, new ReadingValueStatusEnum?(foundNode.Status.Value));
        this._selectedOrder.StructureBytes = this.StructureBytes;
        this._selectedOrder.Status = StatusOrderEnum.InProgress;
        this.GetOrderManagerInstance().EditOrder(this._selectedOrder, new bool?(false));
        this.OnPropertyChanged("StructureForSelectedOrder");
        EventPublisher.Publish<ProgressBarItemDone>(new ProgressBarItemDone()
        {
          Item = error.SerialNumber
        }, (IViewModel) this);
      }
    }

    private void FindItemInOrderByGuid(
      Guid id,
      ObservableCollection<ExecuteOrderStructureNode> structure,
      ref ExecuteOrderStructureNode foundNode)
    {
      foreach (ExecuteOrderStructureNode orderStructureNode in (Collection<ExecuteOrderStructureNode>) structure)
      {
        if (orderStructureNode.Id == id)
        {
          foundNode = orderStructureNode;
          break;
        }
        this.FindItemInOrderByGuid(id, orderStructureNode.Children, ref foundNode);
      }
    }

    protected StructuresManager GetStructureManagerInstance()
    {
      return new StructuresManager(this._repositoryFactory);
    }

    protected GMMManager GetGMMManagerInstance() => new GMMManager(this._repositoryFactory);

    protected OrdersManager GetOrderManagerInstance() => new OrdersManager(this._repositoryFactory);

    protected ReadingValuesManager GetReadingValuesManagerInstance()
    {
      return new ReadingValuesManager(this._repositoryFactory);
    }

    public byte[] StructureBytes
    {
      get => this._structureBytes;
      set
      {
        this._structureBytes = value;
        this.OnPropertyChanged(nameof (StructureBytes));
      }
    }

    public ObservableCollection<ExecuteOrderStructureNode> StructureForSelectedOrder
    {
      get => this._nodesList;
      set
      {
        this._nodesList = value;
        this.OnPropertyChanged(nameof (StructureForSelectedOrder));
      }
    }

    public ObservableCollection<ExecuteOrderStructureNode> SelectedMeterList
    {
      get
      {
        this._selectedMeterList = new ObservableCollection<ExecuteOrderStructureNode>();
        if (this.SelectedNodes != null && this.SelectedNodes.Count > 1)
        {
          foreach (object selectedNode in (Collection<object>) this.SelectedNodes)
          {
            if (selectedNode is ExecuteOrderStructureNode orderStructureNode && orderStructureNode.IsMeter())
              this._selectedMeterList.Add(orderStructureNode);
          }
          ObservableCollection<ExecuteOrderStructureNode> unselectedSubnodes = new ObservableCollection<ExecuteOrderStructureNode>();
          foreach (ExecuteOrderStructureNode selectedMeter in (Collection<ExecuteOrderStructureNode>) this._selectedMeterList)
            TypeHelperExtensionMethods.ForEach<ExecuteOrderStructureNode>(OrdersHelper.Descendants(selectedMeter), (Action<ExecuteOrderStructureNode>) (item =>
            {
              if (!item.IsMeter() || item.SerialNumber == null || !GMMHelper.IsDeviceIncludedInLicense(item.DeviceType, this._importableDeviceModelNameList) || this.SelectedNodes.Any<object>((Func<object, bool>) (x => x is ExecuteOrderStructureNode && (x as ExecuteOrderStructureNode).Id == item.Id)))
                return;
              unselectedSubnodes.Add(item);
            }));
          TypeHelperExtensionMethods.ForEach<ExecuteOrderStructureNode>((IEnumerable<ExecuteOrderStructureNode>) unselectedSubnodes, (Action<ExecuteOrderStructureNode>) (item => this._selectedMeterList.Add(item)));
        }
        else if (this.SelectedItem != null)
        {
          if (this.SelectedItem.IsMeter())
            this._selectedMeterList.Add(this.SelectedItem);
          else
            TypeHelperExtensionMethods.ForEach<ExecuteOrderStructureNode>(OrdersHelper.Descendants(this.SelectedItem), (Action<ExecuteOrderStructureNode>) (n =>
            {
              if (!n.IsMeter() || n.SerialNumber == null || !GMMHelper.IsDeviceIncludedInLicense(n.DeviceType, this._importableDeviceModelNameList))
                return;
              this._selectedMeterList.Add(n);
            }));
        }
        if (this._selectedMeterList.Count <= 0)
          return this._selectedMeterList;
        List<ExecuteOrderStructureNode> list = this._selectedMeterList.Reverse<ExecuteOrderStructureNode>().ToList<ExecuteOrderStructureNode>();
        ObservableCollection<ExecuteOrderStructureNode> selectedMeterList = new ObservableCollection<ExecuteOrderStructureNode>();
        foreach (ExecuteOrderStructureNode orderStructureNode in list)
          selectedMeterList.Add(orderStructureNode);
        return selectedMeterList;
      }
    }

    public IEnumerable<ProfileType> ConnectionProfileCollection
    {
      get => this._connectionProfileCollection;
      set
      {
        this._connectionProfileCollection = value;
        this.OnPropertyChanged(nameof (ConnectionProfileCollection));
        this.IsChangeProfileTypeVisible = value == null || !value.Any<ProfileType>() ? Visibility.Collapsed : Visibility.Visible;
      }
    }

    private IEnumerable<ProfileType> InitConnectionProfileCollection()
    {
      List<long> filterListForOrder = this.GetGMMManagerInstance().GetFilterListForOrder(this._selectedOrder.Id);
      return (IEnumerable<ProfileType>) GMMHelper.GetProfileTypes(this._deviceManager, this.GetReadableMeters(), filterListForOrder, this._selectedEquipmentModel, this._selectedOrder.StructureType);
    }

    public ProfileType SelectedConnectionProfile
    {
      get => this._selectedConnectionProfile;
      set
      {
        if (value != null)
          this._selectedConnectionProfile = this._connectionProfileCollection.FirstOrDefault<ProfileType>((Func<ProfileType, bool>) (_ => _.Name == value.Name));
        this.IsStartButtonEnabled = this.SelectedItem != null && this._selectedConnectionProfile != null;
        if (this._selectedConnectionProfile != null)
          this._transceiverType = this.GetTransceiverType();
        this.CloseGMMConnection();
        this.OnPropertyChanged(nameof (SelectedConnectionProfile));
      }
    }

    public Visibility IsChangeProfileTypeVisible
    {
      get => this._isChangeProfileTypeVisible;
      set
      {
        this._isChangeProfileTypeVisible = value;
        this.OnPropertyChanged(nameof (IsChangeProfileTypeVisible));
      }
    }

    public ExecuteOrderStructureNode SelectedItem
    {
      get => this._selectedItem;
      set
      {
        this._selectedItem = value;
        if (this._selectedItem != null)
        {
          this.IsTenantSelected = this._selectedItem.NodeType == StructureNodeTypeEnum.Tenant;
          this.IsDeviceSelected = this._selectedItem.IsMeter();
          this.IsTenantOrDeviceSelected = this.IsTenantSelected || this.IsDeviceSelected;
          if (this.IsDeviceSelected && this.IsDeviceSelected && this.SelectedItem.MeterId != Guid.Empty)
          {
            this.NewRowPosition = "Bottom";
            DeviceTypeEnum? deviceType = this.SelectedItem.DeviceType;
            DeviceTypeEnum deviceTypeEnum1 = DeviceTypeEnum.MinomessMicroRadio3;
            int num;
            if ((deviceType.GetValueOrDefault() == deviceTypeEnum1 ? (deviceType.HasValue ? 1 : 0) : 0) == 0)
            {
              deviceType = this.SelectedItem.DeviceType;
              DeviceTypeEnum deviceTypeEnum2 = DeviceTypeEnum.M7;
              if ((deviceType.GetValueOrDefault() == deviceTypeEnum2 ? (deviceType.HasValue ? 1 : 0) : 0) == 0)
              {
                deviceType = this.SelectedItem.DeviceType;
                DeviceTypeEnum deviceTypeEnum3 = DeviceTypeEnum.M6;
                num = deviceType.GetValueOrDefault() == deviceTypeEnum3 ? (deviceType.HasValue ? 1 : 0) : 0;
                goto label_6;
              }
            }
            num = 1;
label_6:
            this.CanUserInsertRows = num == 0 ? this.ReadingValuesCollection == null || this.ReadingValuesCollection.Count < this.registerCollectionCount : this.ReadingValuesCollection.Count < 1;
          }
        }
        else
          this.IsDeviceSelected = false;
        this.IsStartButtonEnabled = this._selectedItem != null && this.SelectedConnectionProfile != null && this.IsReadingDeviceViaCBEnabled && !this.IsStopButtonEnabled;
        this.OnPropertyChanged("IsRegisterVisible");
        this.OnPropertyChanged("IsActualValueVisible");
        this.OnPropertyChanged("IsDueDateValueVisible");
        this.OnPropertyChanged("IsUnitVisible");
        this.OnPropertyChanged("GetUnitCollection");
        if (!this.IsStopButtonEnabled)
        {
          if (this._structureNodeEquipmentSettings != null)
          {
            this.ConnectionProfileCollection = this.InitConnectionProfileCollection();
            this._selectedConnectionProfile = this._connectionProfileCollection.FirstOrDefault<ProfileType>((Func<ProfileType, bool>) (item => item.Name == this._selectedConnectionProfile?.Name));
            if (!string.IsNullOrEmpty(this._structureNodeEquipmentSettings.ReadingProfileParams) && this.SelectedConnectionProfile != null)
              MSS.Business.Modules.AppParametersManagement.AppParametersManagement.UpdateProfileTypeWithSavedParams(this.SelectedConnectionProfile, this._structureNodeEquipmentSettings.ReadingProfileParams);
            else if (string.IsNullOrEmpty(this._structureNodeEquipmentSettings.ReadingProfileParams) && this._structureNodeEquipmentSettings?.SystemName == "M-Bus" && this._structureNodeEquipmentSettings.ScanParams != null && this.SelectedConnectionProfile != null)
              MSS.Business.Modules.AppParametersManagement.AppParametersManagement.UpdateProfileTypeWithSavedParams(this.SelectedConnectionProfile, this._structureNodeEquipmentSettings.ScanParams);
          }
          this.OnPropertyChanged("SelectedConnectionProfile");
        }
        this.OnPropertyChanged(nameof (SelectedItem));
        if (this._selectedItem == null)
          return;
        this._currentlySelectedItem = this._selectedItem.Id;
      }
    }

    public ObservableCollection<object> SelectedNodes
    {
      get => this._selectedNodes;
      set
      {
        this._selectedNodes = value;
        if (this._selectedNodes.Count > 1)
        {
          this.ConnectionProfileCollection = this.InitConnectionProfileCollection();
          this._selectedConnectionProfile = this._connectionProfileCollection.FirstOrDefault<ProfileType>((Func<ProfileType, bool>) (item => item.Name == this._selectedConnectionProfile?.Name));
          this.OnPropertyChanged("SelectedConnectionProfile");
        }
        this.IsChangeDeviceModelParametersEnabled = this._selectedNodes != null && this._selectedNodes.Count == 1 && this._selectedNodes.First<object>() is ExecuteOrderStructureNode && (this._selectedNodes.First<object>() as ExecuteOrderStructureNode).NodeType == StructureNodeTypeEnum.Meter;
      }
    }

    public bool IsDeviceSelected
    {
      get => this._isDeviceSelected;
      set
      {
        this._isDeviceSelected = value;
        this.OnPropertyChanged(nameof (IsDeviceSelected));
        if (this._isDeviceSelected)
        {
          if (this.SelectedItem.IsMeter() && this.SelectedItem.DeviceType.HasValue && GMMHelper.GetDeviceModel(this.SelectedItem.DeviceType.Value, DeviceModelTags.MBus | DeviceModelTags.wMBus) != null)
          {
            this.IsReadingValuesGridVisible = false;
            this.IsGenericMbusReadingValuesGridVisible = true;
          }
          else
          {
            this.IsReadingValuesGridVisible = this.IsRegisterVisible || this.IsActualValueVisible || this.IsDueDateValueVisible || this.IsUnitVisible;
            this.IsGenericMbusReadingValuesGridVisible = false;
          }
          if (this.IsReadingValuesGridVisible)
            this.ReadingValuesCollection = this.GetReadingValuesCollection();
          if (this.IsGenericMbusReadingValuesGridVisible)
            this.GenericMbusReadingValuesCollection = this.GetGenericMbusReadingValuesCollection();
        }
        else
        {
          this.IsReadingValuesGridVisible = false;
          this.IsGenericMbusReadingValuesGridVisible = false;
        }
        this.IsSaveButtonVisible = this.IsReadingValuesGridVisible || this.IsGenericMbusReadingValuesGridVisible;
      }
    }

    public bool IsTenantSelected { get; set; }

    public bool IsTenantOrDeviceSelected
    {
      get => this._isTenantOrDeviceSelected;
      set
      {
        this._isTenantOrDeviceSelected = value;
        this.OnPropertyChanged(nameof (IsTenantOrDeviceSelected));
      }
    }

    public RadObservableCollection<ReadingValuesDTO> ReadingValuesCollection
    {
      get => this._readingValuesCollection;
      set
      {
        this._readingValuesCollection = value;
        this.OnPropertyChanged(nameof (ReadingValuesCollection));
      }
    }

    public ObservableCollection<MeterReadingValueDTO> GenericMbusReadingValuesCollection
    {
      get => this._genericMbusReadingValuesCollection;
      set
      {
        this._genericMbusReadingValuesCollection = value;
        this.OnPropertyChanged(nameof (GenericMbusReadingValuesCollection));
      }
    }

    public IEnumerable<ValueIdent.ValueIdPart_MeterType> GetRegisterColection
    {
      get
      {
        this._registerCollection = (IEnumerable<ValueIdent.ValueIdPart_MeterType>) ValueIdentHelper.GetMeterTypeEnumerableAsValueIdPart().ToList<ValueIdent.ValueIdPart_MeterType>();
        return this._registerCollection;
      }
      set
      {
        this._registerCollection = value;
        this.OnPropertyChanged(nameof (GetRegisterColection));
      }
    }

    public IEnumerable<MeasureUnitDTO> GetUnitCollection
    {
      get
      {
        return this.SelectedItem != null ? MeasureUnitsHelper.GetMeasureUnits(this._repositoryFactory.GetRepository<MeasureUnit>()) : (IEnumerable<MeasureUnitDTO>) null;
      }
    }

    public IEnumerable<ValueIdentString> PhysicalQuantitiesEnumerable
    {
      get => this._physicalQuantitiesEnumerable;
    }

    public IEnumerable<ValueIdentString> MeterTypeEnumerable => this._meterTypeEnumerable;

    public IEnumerable<ValueIdentString> CalculationEnumerable => this._calculationEnumerable;

    public IEnumerable<ValueIdentString> CalculationStartEnumerable
    {
      get => this._calculationStartEnumerable;
    }

    public IEnumerable<ValueIdentString> StorageIntervalEnumerable
    {
      get => this._storageIntervalEnumerable;
    }

    public IEnumerable<ValueIdentString> CreationEnumerable => this._creationEnumerable;

    public bool IsRegisterVisible
    {
      get
      {
        return this.GetVisibilityForProperty(DeviceTypeVisibilityHelper.GetPropertyName<ValueIdent.ValueIdPart_MeterType>((Expression<Func<ValueIdent.ValueIdPart_MeterType>>) (() => System.Linq.Expressions.Expression.New(typeof (ReadingValuesDTO)).Register)));
      }
    }

    public bool IsActualValueVisible
    {
      get
      {
        return this.GetVisibilityForProperty(DeviceTypeVisibilityHelper.GetPropertyName<double>((Expression<Func<double>>) (() => System.Linq.Expressions.Expression.New(typeof (ReadingValuesDTO)).ActualValue)));
      }
    }

    public bool IsDueDateValueVisible
    {
      get
      {
        return this.GetVisibilityForProperty(DeviceTypeVisibilityHelper.GetPropertyName<double>((Expression<Func<double>>) (() => System.Linq.Expressions.Expression.New(typeof (ReadingValuesDTO)).DueDateValue)));
      }
    }

    public bool IsUnitVisible
    {
      get
      {
        return this.GetVisibilityForProperty(DeviceTypeVisibilityHelper.GetPropertyName<Guid>((Expression<Func<Guid>>) (() => System.Linq.Expressions.Expression.New(typeof (ReadingValuesDTO)).UnitId)));
      }
    }

    public bool IsReadingValuesGridVisible
    {
      get => this._isReadingValuesGridVisible;
      set
      {
        this._isReadingValuesGridVisible = value;
        this.OnPropertyChanged(nameof (IsReadingValuesGridVisible));
      }
    }

    public bool IsSaveButtonVisible
    {
      get => this._isSaveButtonVisible;
      set
      {
        this._isSaveButtonVisible = value;
        this.OnPropertyChanged(nameof (IsSaveButtonVisible));
      }
    }

    public bool IsGenericMbusReadingValuesGridVisible
    {
      get => this._isGenericMbusReadingValuesGridVisible;
      set
      {
        this._isGenericMbusReadingValuesGridVisible = value;
        this.OnPropertyChanged(nameof (IsGenericMbusReadingValuesGridVisible));
      }
    }

    public string NewRowPosition
    {
      get => this._newRowPosition;
      set
      {
        this._newRowPosition = value;
        this.OnPropertyChanged(nameof (NewRowPosition));
      }
    }

    public bool CanUserInsertRows
    {
      get => this._canUserInsertRows;
      set
      {
        this._canUserInsertRows = value;
        this.OnPropertyChanged(nameof (CanUserInsertRows));
      }
    }

    public MVVM.ViewModel.ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public string NumberOfReadMetersLabel
    {
      get => this._numberOfReadMetersLabel;
      set
      {
        this._numberOfReadMetersLabel = value;
        this.OnPropertyChanged(nameof (NumberOfReadMetersLabel));
      }
    }

    public bool IsPhysicalStructure
    {
      get => this._isPhysicalStructure;
      set
      {
        this._isPhysicalStructure = value;
        this.OnPropertyChanged(nameof (IsPhysicalStructure));
      }
    }

    public ICommand CloseCommand { get; private set; }

    private int GetNumberOfReadMetersFromStructure()
    {
      int metersFromStructure = 0;
      foreach (ExecuteOrderStructureNode node in (Collection<ExecuteOrderStructureNode>) this.StructureForSelectedOrder)
      {
        int noOfReadMeters = this.IsMeterRead(node) ? 1 : 0;
        this.WalkStructure(node, ref noOfReadMeters);
        metersFromStructure += noOfReadMeters;
      }
      return metersFromStructure;
    }

    private void WalkStructure(ExecuteOrderStructureNode node, ref int noOfReadMeters)
    {
      foreach (ExecuteOrderStructureNode child in (Collection<ExecuteOrderStructureNode>) node.Children)
      {
        if (this.IsMeterRead(child))
          ++noOfReadMeters;
        if (child.Children.Count > 0)
          this.WalkStructure(child, ref noOfReadMeters);
      }
    }

    private bool IsMeterRead(ExecuteOrderStructureNode node)
    {
      int num;
      if (node.IsMeter())
      {
        ReadingValueStatusEnum? status = node.Status;
        ReadingValueStatusEnum readingValueStatusEnum = ReadingValueStatusEnum.ok;
        if ((status.GetValueOrDefault() == readingValueStatusEnum ? (status.HasValue ? 1 : 0) : 0) != 0)
        {
          num = node.ReadingEnabled ? 1 : 0;
          goto label_4;
        }
      }
      num = 0;
label_4:
      return num != 0;
    }

    public bool IsStartButtonEnabled
    {
      get => this._isStartButtonEnabled;
      set
      {
        this._isStartButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsStartButtonEnabled));
      }
    }

    public bool IsChangeDeviceModelParametersEnabled
    {
      get => this._isChangeDeviceModelParametersEnabled;
      set
      {
        int num;
        if (value)
        {
          StructureTypeEnum? structureType = this._selectedOrder.StructureType;
          StructureTypeEnum structureTypeEnum = StructureTypeEnum.Fixed;
          num = structureType.GetValueOrDefault() == structureTypeEnum ? (!structureType.HasValue ? 1 : 0) : 1;
        }
        else
          num = 0;
        this._isChangeDeviceModelParametersEnabled = num != 0;
        this.OnPropertyChanged(nameof (IsChangeDeviceModelParametersEnabled));
      }
    }

    public ObservableCollection<ReadingValuesDTO> ReadingValuesToDeleteCollection
    {
      get => this._readingValuesToDeleteCollection;
      set
      {
        this._readingValuesToDeleteCollection = value;
        this.OnPropertyChanged(nameof (ReadingValuesToDeleteCollection));
      }
    }

    public ObservableCollection<MeterReadingValueDTO> MeterReadingValuesToDeleteCollection
    {
      get => this._meterReadingValuesToDeleteCollection;
      set
      {
        this._meterReadingValuesToDeleteCollection = value;
        this.OnPropertyChanged(nameof (MeterReadingValuesToDeleteCollection));
      }
    }

    public string SelectedEquipmentName
    {
      get => this._selectedEquipmentName;
      set
      {
        this._selectedEquipmentName = value;
        this.OnPropertyChanged(nameof (SelectedEquipmentName));
      }
    }

    public bool IsStopButtonEnabled
    {
      get => this._isStopButtonEnabled;
      set
      {
        this._isStopButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsStopButtonEnabled));
      }
    }

    public TransceiverType GetTransceiverType()
    {
      this.GetDeviceModel();
      if (this._selectedEquipmentModel != null && this._selectedConnectionProfile != null)
      {
        Enum.TryParse<TransceiverType>(this._selectedConnectionProfile.Parameters[ConnectionProfileParameter.TransceiverType], true, out this._transceiverType);
        string newValue = (string) null;
        if (this._transceiverType == TransceiverType.Reader)
          newValue = "DefaultReader";
        if (this._transceiverType == TransceiverType.Receiver)
          newValue = "DefaultReceiver";
        this._deviceManager.SetFilter(newValue);
      }
      return this._transceiverType;
    }

    private DeviceModel GetDeviceModel()
    {
      ExecuteOrderStructureNode orderStructureNode;
      if (this.SelectedItem != null)
      {
        ExecuteOrderStructureNode selectedItem = this.SelectedItem;
        orderStructureNode = !selectedItem.IsMeter() ? this.GetFirstMeterInStructure() : selectedItem;
      }
      else
        orderStructureNode = this.GetFirstMeterInStructure();
      DeviceModel deviceModel;
      if (orderStructureNode != null && orderStructureNode.DeviceType.HasValue)
      {
        string deviceModelName = orderStructureNode.DeviceType.Value.GetGMMDeviceModelName();
        deviceModel = this._deviceManager.GetDeviceModels().FirstOrDefault<DeviceModel>((Func<DeviceModel, bool>) (x => x.Name == deviceModelName));
      }
      else
        deviceModel = this._deviceManager.GetDeviceModels().FirstOrDefault<DeviceModel>((Func<DeviceModel, bool>) (x => x.Name == "M7"));
      return deviceModel;
    }

    private ExecuteOrderStructureNode GetFirstMeterInStructure()
    {
      IEnumerable<ExecuteOrderStructureNode> orderStructureNodes = OrdersHelper.Descendants(this.StructureForSelectedOrder.First<ExecuteOrderStructureNode>());
      List<ExecuteOrderStructureNode> meterList = new List<ExecuteOrderStructureNode>();
      List<string> importableDeviceModelNameList = GMMHelper.GetDeviceModelNameList(this._selectedOrder.StructureType);
      TypeHelperExtensionMethods.ForEach<ExecuteOrderStructureNode>(orderStructureNodes, (Action<ExecuteOrderStructureNode>) (n =>
      {
        if (!n.IsMeter() || !GMMHelper.IsDeviceIncludedInLicense(n.DeviceType, importableDeviceModelNameList))
          return;
        meterList.Add(n);
      }));
      return meterList.FirstOrDefault<ExecuteOrderStructureNode>();
    }

    public bool IsReadingDeviceViaCBEnabled
    {
      get => this._isReadingDeviceViaCBEnabled;
      set
      {
        this._isReadingDeviceViaCBEnabled = value;
        this.OnPropertyChanged(nameof (IsReadingDeviceViaCBEnabled));
      }
    }

    public bool IsReadingStarted
    {
      get => this._isReadingStarted;
      set
      {
        this._isReadingStarted = value;
        this.OnPropertyChanged(nameof (IsReadingStarted));
      }
    }

    public bool IsShortDeviceNoVisible
    {
      get => this._isShortDeviceNoVisible;
      set
      {
        this._isShortDeviceNoVisible = value;
        this.OnPropertyChanged(nameof (IsShortDeviceNoVisible));
      }
    }

    public ProgressBarCtrl ProgressBar
    {
      get => this._progressBar;
      set
      {
        this._progressBar = value;
        this.OnPropertyChanged(nameof (ProgressBar));
      }
    }

    public override ICommand CancelWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.CleanupBeforeClosing();
          this.OnRequestClose(false);
        }));
      }
    }

    private void CleanupBeforeClosing()
    {
      this.CloseGMMConnection();
      this.SetOrderStatus(this.StructureForSelectedOrder, this._selectedOrder);
      this.SaveStructureBytesForOrder();
    }

    private void CloseGMMConnection()
    {
      if (this._readerMinoConnect != null)
      {
        this._readerMinoConnect.CloseConnection();
        this._readerMinoConnect.StopReadingValues();
      }
      if (this._receiverMinoConnect == null)
        return;
      this._receiverMinoConnect.StopReadingValues();
    }

    private void SaveStructureBytesForOrder()
    {
      MSS.Core.Model.Orders.Order byId = this._repositoryFactory.GetRepository<MSS.Core.Model.Orders.Order>().GetById((object) this._selectedOrder.Id);
      if (byId == null)
        return;
      byId.StructureBytes = this.StructureBytes;
      byId.RootStructureNodeId = this._selectedOrder.RootStructureNodeId;
      this._repositoryFactory.GetRepository<MSS.Core.Model.Orders.Order>().Update(byId);
    }

    public ICommand ViewMessagesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          ExecuteOrderStructureNode orderStructureNode1 = parameter as ExecuteOrderStructureNode;
          List<ExecuteOrderStructureNode> metersList = new List<ExecuteOrderStructureNode>();
          if (orderStructureNode1 != null)
          {
            if (orderStructureNode1.IsMeter())
              metersList.Add(orderStructureNode1);
            foreach (ExecuteOrderStructureNode child in (Collection<ExecuteOrderStructureNode>) orderStructureNode1.Children)
            {
              if (child.IsMeter())
                metersList.Add(child);
              this.WalkStructure(child, ref metersList);
            }
          }
          List<OrderMessage> orderMessageList = new List<OrderMessage>();
          IRepository<OrderMessage> repository = this._repositoryFactory.GetRepository<OrderMessage>();
          foreach (ExecuteOrderStructureNode orderStructureNode2 in metersList)
          {
            ExecuteOrderStructureNode meter = orderStructureNode2;
            orderMessageList.AddRange((IEnumerable<OrderMessage>) repository.SearchFor((Expression<Func<OrderMessage, bool>>) (item => item.Order.Id == this._selectedOrder.Id && item.Meter.Id == meter.MeterId)));
          }
          orderMessageList.Sort((Comparison<OrderMessage>) ((item1, item2) => item2.Timepoint.CompareTo(item1.Timepoint)));
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<OrderMessagesViewModel>((IParameter) new ConstructorArgument("orderMessages", (object) orderMessageList)));
        }));
      }
    }

    private void WalkStructure(
      ExecuteOrderStructureNode currentNode,
      ref List<ExecuteOrderStructureNode> metersList)
    {
      foreach (ExecuteOrderStructureNode child in (Collection<ExecuteOrderStructureNode>) currentNode.Children)
      {
        if (child.IsMeter())
          metersList.Add(child);
        this.WalkStructure(child, ref metersList);
      }
    }

    public ICommand ChangeProfileTypeCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (this.SelectedConnectionProfile != null)
          {
            if (this.SelectedConnectionProfile.ChangeableParameters != null)
            {
              ProfileTypeViewModel profileTypeViewModel = DIConfigurator.GetConfigurator().Get<ProfileTypeViewModel>((IParameter) new ConstructorArgument("profileTypeCollection", (object) this.ConnectionProfileCollection), (IParameter) new ConstructorArgument("selectedProfileType", (object) this.SelectedConnectionProfile));
              bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) profileTypeViewModel);
              if (!(newModalDialog.HasValue & newModalDialog.Value))
                return;
              this.SelectedConnectionProfile = profileTypeViewModel.SelectedProfileType;
              if (this.SelectedConnectionProfile?.ChangeableParameters != null)
              {
                this._structureNodeEquipmentSettings.ReadingProfileParams = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.SerializedConfigList(MSS.Business.Modules.AppParametersManagement.AppParametersManagement.GetConfigListFromChangeableParameters(this.SelectedConnectionProfile.ChangeableParameters), this.SelectedConnectionProfile.ChangeableParameters);
                this._structureNodeEquipmentSettings.ReadingProfileName = this.SelectedConnectionProfile.Name;
                this._repositoryFactory.GetRepository<StructureNodeEquipmentSettings>().Update(this._structureNodeEquipmentSettings);
              }
            }
            else
              this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_DeleteStructure_Warning_Title), (IParameter) new ConstructorArgument("message", (object) Resources.MSS_Client_CannotModifyChangeableParamsDueToLicense), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) false)));
          }
          else if (!this.ConnectionProfileCollection.Any<ProfileType>())
            this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_DeleteStructure_Warning_Title), (IParameter) new ConstructorArgument("message", (object) Resources.MSS_Client_CannotModifyChangeableParamsDueToLicense), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) false)));
          else
            this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_DeleteStructure_Warning_Title), (IParameter) new ConstructorArgument("message", (object) Resources.MSS_Client_PleaseSelectValueFromReadingDevicesVia), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) false)));
        }));
      }
    }

    public ICommand ChangeDeviceModelParametersCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          ExecuteOrderStructureNode selectedNode = this.SelectedNodes.First<object>() as ExecuteOrderStructureNode;
          if (selectedNode == null || selectedNode.NodeType != StructureNodeTypeEnum.Meter)
            return;
          StructureNodeEquipmentSettings entity1 = this._equipmentSettingsForMeters.FirstOrDefault<KeyValuePair<Guid, StructureNodeEquipmentSettings>>((Func<KeyValuePair<Guid, StructureNodeEquipmentSettings>, bool>) (item => item.Key == selectedNode.MeterId)).Value;
          MSS.Core.Model.Meters.Meter selectedMeter = this._repositoryFactory.GetRepository<MSS.Core.Model.Meters.Meter>().FirstOrDefault((Expression<Func<MSS.Core.Model.Meters.Meter, bool>>) (item => item.Id == selectedNode.MeterId && !item.IsDeactivated));
          if (selectedMeter != null)
          {
            DeviceModel deviceModel = this._deviceManager.GetDeviceModel(selectedMeter.DeviceType.GetGMMDeviceModelName());
            if (entity1 != null && !string.IsNullOrEmpty(entity1.DeviceModelReadingParams))
              deviceModel = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.UpdateDeviceModelWithSavedParams(deviceModel, entity1.DeviceModelReadingParams);
            if (deviceModel != null && deviceModel.ChangeableParameters != null && deviceModel.ChangeableParameters.Any<ChangeableParameter>())
            {
              DeviceModelChangeableParametersViewModel parametersViewModel = DIConfigurator.GetConfigurator().Get<DeviceModelChangeableParametersViewModel>((IParameter) new ConstructorArgument("selectedDeviceModel", (object) deviceModel));
              bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) parametersViewModel);
              if (newModalDialog.HasValue & newModalDialog.Value)
              {
                StructureNode structureNodeForMeter = this._repositoryFactory.GetRepository<StructureNode>().FirstOrDefault((Expression<Func<StructureNode, bool>>) (item => item.EntityId == selectedMeter.Id));
                if (structureNodeForMeter != null)
                {
                  List<Config> changeableParameters = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.GetConfigListFromChangeableParameters(parametersViewModel.SelectedDeviceModel.ChangeableParameters);
                  if (entity1 == null)
                  {
                    entity1 = new StructureNodeEquipmentSettings();
                    entity1.StructureNode = structureNodeForMeter;
                  }
                  entity1.DeviceModelReadingParams = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.SerializedConfigList(changeableParameters, parametersViewModel.SelectedDeviceModel.ChangeableParameters);
                  IRepository<StructureNodeEquipmentSettings> repository = this._repositoryFactory.GetRepository<StructureNodeEquipmentSettings>();
                  ISession session = this._repositoryFactory.GetSession();
                  session.BeginTransaction();
                  StructureNodeEquipmentSettings entity2 = repository.FirstOrDefault((Expression<Func<StructureNodeEquipmentSettings, bool>>) (item => item.StructureNode.Id == structureNodeForMeter.Id));
                  if (entity2 != null)
                  {
                    entity2.DeviceModelReadingParams = entity1.DeviceModelReadingParams;
                    repository.TransactionalUpdate(entity2);
                  }
                  else
                    repository.TransactionalInsert(entity1);
                  session.Transaction.Commit();
                  session.Clear();
                  this._equipmentSettingsForMeters[selectedNode.MeterId] = entity1;
                }
                else
                  MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Client_DeviceModelChangeableParams_CannotSaveToDB, false);
              }
            }
            else
              MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Client_DeviceModeChangeableParameters_ParamsAreNull, false);
          }
          else
            MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Client_DeviceModelChangeableParams_MeterHasBeenDeleted, false);
        }));
      }
    }

    private ObservableCollection<ExecuteOrderStructureNode> GetReadableMeters()
    {
      ObservableCollection<ExecuteOrderStructureNode> readableMeters = new ObservableCollection<ExecuteOrderStructureNode>();
      TypeHelperExtensionMethods.ForEach<ExecuteOrderStructureNode>((IEnumerable<ExecuteOrderStructureNode>) this.SelectedMeterList, (Action<ExecuteOrderStructureNode>) (item =>
      {
        if (!item.ReadingEnabled)
          return;
        readableMeters.Add(item);
      }));
      return readableMeters;
    }

    private ObservableCollection<ExecuteOrderStructureNode> ConstructOrderedListOfMetersToBeRead(
      ObservableCollection<ExecuteOrderStructureNode> structureForOrder,
      Dictionary<Guid, string> metersToBeRead,
      List<ExecuteOrderStructureNode> unreadMeters)
    {
      ObservableCollection<ExecuteOrderStructureNode> collection = new ObservableCollection<ExecuteOrderStructureNode>();
      foreach (ExecuteOrderStructureNode orderStructureNode1 in (Collection<ExecuteOrderStructureNode>) structureForOrder)
      {
        ExecuteOrderStructureNode node = orderStructureNode1;
        if (node.IsMeter())
        {
          ExecuteOrderStructureNode orderStructureNode2 = unreadMeters.FirstOrDefault<ExecuteOrderStructureNode>((Func<ExecuteOrderStructureNode, bool>) (m => m.SerialNumber == node.SerialNumber));
          if (orderStructureNode2 != null)
          {
            metersToBeRead.Add(orderStructureNode2.Id, orderStructureNode2.SerialNumber);
            collection.Add(orderStructureNode2);
          }
        }
        if (node.Children != null && node.Children.Any<ExecuteOrderStructureNode>())
          collection.AddRange<ExecuteOrderStructureNode>((IEnumerable<ExecuteOrderStructureNode>) this.ConstructOrderedListOfMetersToBeRead(node.Children, metersToBeRead, unreadMeters));
      }
      return collection;
    }

    public ICommand StartCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this._backgroundWorker = new BackgroundWorker()
          {
            WorkerReportsProgress = false,
            WorkerSupportsCancellation = true
          };
          StructureNodeEquipmentSettings equipmentSettings = this._repositoryFactory.GetRepository<StructureNodeEquipmentSettings>().FirstOrDefault((Expression<Func<StructureNodeEquipmentSettings, bool>>) (i => i.StructureNode.Id == this._selectedOrder.RootStructureNodeId));
          if (equipmentSettings != null)
            equipmentSettings.ReadingProfileName = this.SelectedConnectionProfile?.Name;
          this._backgroundWorker.DoWork += (DoWorkEventHandler) ((sender, args) =>
          {
            args.Cancel |= this._backgroundWorker.CancellationPending;
            this._metersToBeRead.Clear();
            ObservableCollection<ExecuteOrderStructureNode> beRead = this.ConstructOrderedListOfMetersToBeRead(this.StructureForSelectedOrder, this._metersToBeRead, this.SelectedMeterList.Where<ExecuteOrderStructureNode>((Func<ExecuteOrderStructureNode, bool>) (item =>
            {
              ReadingValueStatusEnum? status3 = item.Status;
              ReadingValueStatusEnum readingValueStatusEnum3 = ReadingValueStatusEnum.ok;
              if ((status3.GetValueOrDefault() == readingValueStatusEnum3 ? (!status3.HasValue ? 1 : 0) : 1) != 0)
              {
                ReadingValueStatusEnum? status4 = item.Status;
                ReadingValueStatusEnum readingValueStatusEnum4 = ReadingValueStatusEnum.notavailable;
                if ((status4.GetValueOrDefault() == readingValueStatusEnum4 ? (!status4.HasValue ? 1 : 0) : 1) != 0)
                  return item.ReadingEnabled;
              }
              return false;
            })).ToList<ExecuteOrderStructureNode>());
            if (this._metersToBeRead.Count > 0)
              this.ProgressBar.Start(this._metersToBeRead.Count != 1 ? (IProgressBarUpdater) new ListProgressBarUpdater(this._metersToBeRead) : (IProgressBarUpdater) new PercentProgressBarUpdater());
            bool flag = false;
            switch (this._transceiverType)
            {
              case TransceiverType.None:
                Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Client_ReadErrorMessage, false)));
                break;
              case TransceiverType.Reader:
                flag = this.StartReadingValuesReader(beRead);
                break;
              case TransceiverType.Receiver:
                flag = this.StartReadingValuesReceiver(beRead);
                break;
            }
            if (flag)
              return;
            this.StopReading();
          });
          this._backgroundWorker.RunWorkerCompleted += (RunWorkerCompletedEventHandler) ((sender, args) =>
          {
            if (args.Cancelled)
            {
              this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_ExecuteReadingOrder_Cancelled);
            }
            else
            {
              if (args.Error == null)
                return;
              MSS.Business.Errors.MessageHandler.LogException(args.Error);
              MessageHandlingManager.ShowExceptionMessageDialog(MSSHelper.GetErrorMessage(args.Error), this._windowFactory);
            }
          });
          this._backgroundWorker.RunWorkerAsync();
        }));
      }
    }

    private bool StartReadingValuesReader(
      ObservableCollection<ExecuteOrderStructureNode> listOfMetersToBeRead)
    {
      if (this._metersToBeRead.Count == 0)
        Application.Current.Dispatcher.Invoke<bool>((Func<bool>) (() =>
        {
          MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Client_SelectedMetersAlreadyRead, false);
          return false;
        }));
      if (!this.isIRReadingStarted)
      {
        this._readerMinoConnect = new ReaderMinoConnectManager(this._repositoryFactory, this._deviceManager);
        this._readerMinoConnect.OnError += (EventHandler<string>) ((o, message) => Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(message))));
        this._readerMinoConnect.OnMissingTranslationRule += (EventHandler<string>) ((o, message) => Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(message))));
        this._readerMinoConnect.OnReadingFinished += (System.EventHandler) ((o, eventArgs) => Application.Current.Dispatcher.Invoke(new Action(this.StopReading)));
        this.isIRReadingStarted = true;
      }
      StructureTypeEnum? structureType = this._selectedOrder.StructureType;
      StructureTypeEnum structureTypeEnum = StructureTypeEnum.Fixed;
      if (!(structureType.GetValueOrDefault() == structureTypeEnum && structureType.HasValue ? this._readerMinoConnect.StartReadingValues(listOfMetersToBeRead, this._selectedOrder, this.SelectedConnectionProfile, this._selectedEquipmentModel, this._structureNodeEquipmentSettings.ScanParams) : this._readerMinoConnect.StartReadingValues(listOfMetersToBeRead, this._selectedOrder, this.SelectedConnectionProfile, this._selectedEquipmentModel, this._equipmentSettingsForMeters, this._structureNodeEquipmentSettings.ScanParams)))
      {
        Application.Current.Dispatcher.Invoke<bool>((Func<bool>) (() =>
        {
          MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_DefaultEquipmentNotSet, false);
          return false;
        }));
      }
      else
      {
        this.IsStartButtonEnabled = false;
        this.IsStopButtonEnabled = true;
        this.IsReadingDeviceViaCBEnabled = false;
        this.IsReadingStarted = true;
      }
      return true;
    }

    private bool StartReadingValuesReceiver(
      ObservableCollection<ExecuteOrderStructureNode> listOfMetersToBeRead)
    {
      if (this._metersToBeRead.Count == 0)
      {
        Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Client_SelectedMetersAlreadyRead, false)));
        return false;
      }
      this._receiverMinoConnect = new ReceiverMinoConnectManager(this._repositoryFactory, this._selectedOrder, this.SelectedItem.Id, this.SelectedConnectionProfile);
      this._receiverMinoConnect.OnJobFinished += (System.EventHandler) ((o, eventArgs) => Application.Current.Dispatcher.Invoke(new Action(this.StopReading)));
      if (!this._receiverMinoConnect.StartReadingValues(listOfMetersToBeRead, this._selectedOrder, this.SelectedConnectionProfile, this._selectedEquipmentModel))
      {
        Application.Current.Dispatcher.Invoke<bool>((Func<bool>) (() =>
        {
          MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_DefaultEquipmentNotSet, false);
          return false;
        }));
      }
      else
      {
        this.IsStartButtonEnabled = false;
        this.IsStopButtonEnabled = true;
        this.IsReadingDeviceViaCBEnabled = false;
        this.IsReadingStarted = true;
      }
      return true;
    }

    public ICommand StopCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          this._backgroundWorker?.CancelAsync();
          this.StopReading();
        }));
      }
    }

    public ICommand SaveReadingValuesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          ProfileType connectionProfile = this.SelectedConnectionProfile;
          if (this.IsReadingValuesGridVisible)
            this.SaveReadingValuesGrid();
          else if (this.IsGenericMbusReadingValuesGridVisible)
            this.SaveGenericMbusReadingValuesGrid();
          this.SelectedConnectionProfile = connectionProfile;
        }));
      }
    }

    private void SaveReadingValuesGrid()
    {
      this.nhSession.BeginTransaction();
      this.nhSession.FlushMode = FlushMode.Commit;
      this.TransactionalDeleteReadingValues(this.ReadingValuesToDeleteCollection);
      foreach (ReadingValuesDTO readingValues in (Collection<ReadingValuesDTO>) this.ReadingValuesCollection)
      {
        MeterReadingValue meterReadingValue1 = this.GetMeterReadingValue(ValueIdent.ValueIdPart_StorageInterval.None, readingValues);
        MeterReadingValue meterReadingValue2 = this.GetMeterReadingValue(ValueIdent.ValueIdPart_StorageInterval.DueDate, readingValues);
        if (meterReadingValue1 == null)
          this.TransactionalCreateActualReadingValue(readingValues);
        else
          this.TransactionalUpdateActualReadingValue(readingValues);
        if (meterReadingValue2 == null)
          this.TransactionalCreateDueDateReadingValue(readingValues);
        else
          this.TransactionalUpdateDueDateReadingValue(readingValues);
      }
      this.UpdateOrderStatus(this._selectedOrder, StatusOrderEnum.InProgress, true);
      ReadingValueStatusEnum? nullable;
      if (this.SelectedItem.IsMeter() && this.SelectedItem.MeterId != Guid.Empty)
      {
        nullable = this.SelectedItem.Status;
        ReadingValueStatusEnum readingValueStatusEnum = ReadingValueStatusEnum.notavailable;
        if (nullable.GetValueOrDefault() == readingValueStatusEnum && nullable.HasValue)
        {
          IRepository<MeterReadingValue> readingValueRepository1 = this._meterReadingValueRepository;
          IList<MeterReadingValue> meterReadingValueList1;
          if (readingValueRepository1 == null)
            meterReadingValueList1 = (IList<MeterReadingValue>) null;
          else
            meterReadingValueList1 = readingValueRepository1.SearchFor((Expression<Func<MeterReadingValue, bool>>) (m => m.MeterId == this.SelectedItem.MeterId && m.ValueId == 0L));
          IList<MeterReadingValue> meterReadingValueList2 = meterReadingValueList1;
          if (meterReadingValueList2 != null)
          {
            foreach (MeterReadingValue entity in (IEnumerable<MeterReadingValue>) meterReadingValueList2)
              this._meterReadingValueRepository?.TransactionalDelete(entity);
          }
          IRepository<MeterReadingValue> readingValueRepository2 = this._meterReadingValueRepository;
          IList<MeterReadingValue> meterReadingValueList3;
          if (readingValueRepository2 == null)
            meterReadingValueList3 = (IList<MeterReadingValue>) null;
          else
            meterReadingValueList3 = readingValueRepository2.SearchFor((Expression<Func<MeterReadingValue, bool>>) (m => m.MeterId == this.SelectedItem.MeterId && m.ValueId != 0L));
          foreach (MeterReadingValue entity in (IEnumerable<MeterReadingValue>) meterReadingValueList3)
            this._meterReadingValueRepository?.TransactionalUpdate(entity);
        }
      }
      this.nhSession.Transaction.Commit();
      this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
      if (this.ReadingValuesCollection.Count == 0)
      {
        Guid meterId = this.SelectedItem.MeterId;
        nullable = new ReadingValueStatusEnum?();
        ReadingValueStatusEnum? status = nullable;
        this.SetMeterSerializableDTOStatusInStructureBytes(meterId, status);
      }
      else
        this.SetMeterSerializableDTOStatusInStructureBytes(this.SelectedItem.MeterId, new ReadingValueStatusEnum?(ReadingValueStatusEnum.ok));
      Guid id = this.SelectedItem.Id;
      this.StructureForSelectedOrder = this.GetOrderManagerInstance().GetNodes(this.StructureBytes, this._selectedOrder.Id, this._blueMeters, this._importableDeviceModelNameList).Item1;
      this.SelectedItem = OrdersManager.FindNodeById(id, this.StructureForSelectedOrder);
    }

    private void SaveGenericMbusReadingValuesGrid()
    {
      this.nhSession.BeginTransaction();
      this.nhSession.FlushMode = FlushMode.Commit;
      this.TransactionalDeleteMeterReadingValues(this.MeterReadingValuesToDeleteCollection);
      this.MeterReadingValuesToDeleteCollection = (ObservableCollection<MeterReadingValueDTO>) null;
      foreach (MeterReadingValueDTO mbusReadingValues in (Collection<MeterReadingValueDTO>) this.GenericMbusReadingValuesCollection)
      {
        MeterReadingValueDTO meterReadingValue = mbusReadingValues;
        if (this._meterReadingValueRepository.FirstOrDefault((Expression<Func<MeterReadingValue, bool>>) (item => item.Id == meterReadingValue.Id)) == null)
          this.TransactionalCreateActualMeterReadingValue(meterReadingValue);
        else
          this.TransactionalUpdateActualMeterReadingValue(meterReadingValue);
      }
      this.UpdateOrderStatus(this._selectedOrder, StatusOrderEnum.InProgress, true);
      this.nhSession.Transaction.Commit();
      this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
      if (this.GenericMbusReadingValuesCollection.Count == 0)
        this.SetMeterSerializableDTOStatusInStructureBytes(this.SelectedItem.MeterId, new ReadingValueStatusEnum?());
      else if (!this.MeterHasOnlyWarningNumberOrSignalStrengthAsReadingValues(this.GenericMbusReadingValuesCollection.ToList<MeterReadingValueDTO>()))
        this.SetMeterSerializableDTOStatusInStructureBytes(this.SelectedItem.MeterId, new ReadingValueStatusEnum?(ReadingValueStatusEnum.ok));
      Guid id = this.SelectedItem.Id;
      this.StructureForSelectedOrder = this.GetOrderManagerInstance().GetNodes(this.StructureBytes, this._selectedOrder.Id, this._blueMeters, this._importableDeviceModelNameList).Item1;
      this.SelectedItem = OrdersManager.FindNodeById(id, this.StructureForSelectedOrder);
    }

    public ICommand ReadingNotPossibleCommand
    {
      get => (ICommand) new RelayCommand((Action<object>) (Delegate => this.NodeNotRead()));
    }

    private void NodeNotRead()
    {
      OrderSerializableStructure serializableStructure = StructuresHelper.DeserializeStructure(this.StructureBytes);
      ProfileType connectionProfile = this.SelectedConnectionProfile;
      switch (this.SelectedItem.NodeType)
      {
        case StructureNodeTypeEnum.Tenant:
          ObservableCollection<ExecuteOrderStructureNode> children = this.SelectedItem.Children;
          bool flag = false;
          foreach (ExecuteOrderStructureNode node in (Collection<ExecuteOrderStructureNode>) children)
          {
            if (node.IsMeter() && node.ReadingEnabled && node.MeterId != Guid.Empty)
            {
              flag = true;
              this.SetMeterSerializableDTOStatus(serializableStructure, node.MeterId, new ReadingValueStatusEnum?(ReadingValueStatusEnum.notavailable));
              OrdersManager.SetImageAndColor(node, Brushes.OrangeRed);
            }
          }
          if (flag)
            OrdersManager.SetImageAndColor(this.SelectedItem, Brushes.OrangeRed);
          this.StructureBytes = StructuresHelper.SerializeStructure(serializableStructure);
          this.StructureForSelectedOrder = this.GetOrderManagerInstance().GetNodes(this.StructureBytes, this._selectedOrder.Id, this._blueMeters, this._importableDeviceModelNameList).Item1;
          this._selectedOrder.StructureBytes = this.StructureBytes;
          this._selectedOrder.Status = StatusOrderEnum.InProgress;
          this.GetOrderManagerInstance().EditOrder(this._selectedOrder, new bool?(false));
          break;
        case StructureNodeTypeEnum.Meter:
        case StructureNodeTypeEnum.RadioMeter:
          if (this.SelectedItem.MeterId != Guid.Empty)
          {
            IRepository<MeterReadingValue> readingValueRepository = this._meterReadingValueRepository;
            Expression<Func<MeterReadingValue, bool>> predicate = (Expression<Func<MeterReadingValue, bool>>) (m => m.MeterId == this.SelectedItem.MeterId && m.ValueId != 0L);
            foreach (MeterReadingValue meterReadingValue1 in (IEnumerable<MeterReadingValue>) readingValueRepository.SearchFor(predicate))
            {
              MeterReadingValue meterReadingValue = meterReadingValue1;
              OrderReadingValues entity = this._orderReadingValuesRepository.FirstOrDefault((Expression<Func<OrderReadingValues, bool>>) (or => or.MeterReadingValue.Id == meterReadingValue.Id && or.OrderObj.Id == this._selectedOrder.Id));
              if (entity != null)
                this._orderReadingValuesRepository.Delete(entity);
              this._meterReadingValueRepository.Delete(meterReadingValue);
            }
            this._blueMeters.Remove(this.SelectedItem.MeterId);
            this.SetMeterSerializableDTOStatus(serializableStructure, this.SelectedItem.MeterId, new ReadingValueStatusEnum?(ReadingValueStatusEnum.notavailable));
            this.StructureBytes = StructuresHelper.SerializeStructure(serializableStructure);
            this.StructureForSelectedOrder = this.GetOrderManagerInstance().GetNodes(this.StructureBytes, this._selectedOrder.Id, this._blueMeters, this._importableDeviceModelNameList).Item1;
            this._selectedOrder.StructureBytes = this.StructureBytes;
            this._selectedOrder.Status = StatusOrderEnum.InProgress;
            this.GetOrderManagerInstance().EditOrder(this._selectedOrder, new bool?(false));
            break;
          }
          break;
      }
      this.SelectedConnectionProfile = connectionProfile;
    }

    private void SetMeterSerializableDTOStatus(
      OrderSerializableStructure orderSerializableStructure,
      Guid meterId,
      ReadingValueStatusEnum? status)
    {
      MeterSerializableDTO meterSerializableDto = orderSerializableStructure.meterList.FirstOrDefault<MeterSerializableDTO>((Func<MeterSerializableDTO, bool>) (m => m.Id == meterId));
      if (meterSerializableDto == null)
        return;
      meterSerializableDto.Status = status;
    }

    private void SetMeterSerializableDTOStatusInStructureBytes(
      Guid meterId,
      ReadingValueStatusEnum? status)
    {
      OrderSerializableStructure serializableStructure = StructuresHelper.DeserializeStructure(this.StructureBytes);
      this.SetMeterSerializableDTOStatus(serializableStructure, meterId, status);
      this.StructureBytes = StructuresHelper.SerializeStructure(serializableStructure);
    }

    private void SetMeterSerializableDTOIsConfigured(
      OrderSerializableStructure orderSerializableStructure,
      Guid meterId,
      bool IsConfigured)
    {
      if (!IsConfigured)
        return;
      MeterSerializableDTO meterSerializableDto = orderSerializableStructure.meterList.FirstOrDefault<MeterSerializableDTO>((Func<MeterSerializableDTO, bool>) (m => m.Id == meterId));
      if (meterSerializableDto != null)
        meterSerializableDto.IsConfigured = new bool?(true);
    }

    private bool MeterHasOnlyWarningNumberOrSignalStrengthAsReadingValues(
      List<MeterReadingValueDTO> readingValues)
    {
      return readingValues.All<MeterReadingValueDTO>((Func<MeterReadingValueDTO, bool>) (rv => rv.PhysicalQuantity == ValueIdent.ValueIdPart_PhysicalQuantity.WarningNumber || rv.PhysicalQuantity == ValueIdent.ValueIdPart_PhysicalQuantity.SignalStrength));
    }

    public ICommand ChangeDefaultEquipmentCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          ConfigChangeableParamsViewModel changeableParamsViewModel = DIConfigurator.GetConfigurator().Get<ConfigChangeableParamsViewModel>((IParameter) new ConstructorArgument("equipmentModel", (object) this._selectedEquipmentModel));
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) changeableParamsViewModel);
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          this.SelectedEquipmentName = changeableParamsViewModel.EquipmentSelectorProperty.SelectedEquipmentModel.Name;
          this._selectedEquipmentModel = changeableParamsViewModel.EquipmentSelectorProperty.SelectedEquipmentModel;
          this._transceiverType = this.GetTransceiverType();
          this.ConnectionProfileCollection = this.InitConnectionProfileCollection();
          this._selectedConnectionProfile = this._connectionProfileCollection.FirstOrDefault<ProfileType>();
          this.OnPropertyChanged("SelectedConnectionProfile");
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_DefaultEquipment_Update_Message);
        }));
      }
    }

    public ICommand ShowReadingValuesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (param =>
        {
          ExecuteOrderStructureNode device = param as ExecuteOrderStructureNode;
          if (device == null)
            return;
          IEnumerable<StructureNodeDTO> source = StructuresHelper.Descendants(new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) this.GetStructureManagerInstance().GetStructureNodeDTO(this.StructureBytes)).First<StructureNodeDTO>()).Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.Id == device.Id));
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<MeterReadingValuesViewModel>((IParameter) new ConstructorArgument("structureNode", (object) source.First<StructureNodeDTO>()), (IParameter) new ConstructorArgument("selectedOrder", (object) this._selectedOrder)));
        }));
      }
    }

    private void RefreshEquipmentName()
    {
      ApplicationParameter applicationParameter = this._repositoryFactory.GetRepository<ApplicationParameter>().FirstOrDefault((Expression<Func<ApplicationParameter, bool>>) (x => x.Parameter == "DefaultEquipment"));
      if (applicationParameter == null)
        return;
      this._repositoryFactory.GetRepository<ApplicationParameter>().Refresh((object) applicationParameter.Id);
      this.SelectedEquipmentName = applicationParameter.Value;
    }

    private void TransactionalDeleteReadingValues(
      ObservableCollection<ReadingValuesDTO> readingValuesToDelete)
    {
      foreach (ReadingValuesDTO readingValuesDto in (Collection<ReadingValuesDTO>) readingValuesToDelete)
      {
        MeterReadingValue actualMeterReadingValue = this.GetMeterReadingValue(ValueIdent.ValueIdPart_StorageInterval.None, readingValuesDto);
        MeterReadingValue dueDateMeterReadingValue = this.GetMeterReadingValue(ValueIdent.ValueIdPart_StorageInterval.DueDate, readingValuesDto);
        if (actualMeterReadingValue != null)
        {
          OrderReadingValues entity = this._orderReadingValuesRepository.FirstOrDefault((Expression<Func<OrderReadingValues, bool>>) (orv => orv.MeterReadingValue.Id == actualMeterReadingValue.Id));
          if (entity != null)
            this._orderReadingValuesRepository.TransactionalDelete(entity);
          this._meterReadingValueRepository.TransactionalDelete(actualMeterReadingValue);
        }
        if (dueDateMeterReadingValue != null)
        {
          OrderReadingValues entity = this._orderReadingValuesRepository.FirstOrDefault((Expression<Func<OrderReadingValues, bool>>) (orv => orv.MeterReadingValue.Id == dueDateMeterReadingValue.Id));
          if (entity != null)
            this._orderReadingValuesRepository.TransactionalDelete(entity);
          this._meterReadingValueRepository.TransactionalDelete(dueDateMeterReadingValue);
        }
      }
    }

    private void TransactionalDeleteMeterReadingValues(
      ObservableCollection<MeterReadingValueDTO> meterReadingValuesToDelete)
    {
      if (meterReadingValuesToDelete == null)
        return;
      foreach (MeterReadingValueDTO meterReadingValueDto1 in (Collection<MeterReadingValueDTO>) meterReadingValuesToDelete)
      {
        MeterReadingValueDTO meterReadingValueDto = meterReadingValueDto1;
        if (meterReadingValueDto.Id != Guid.Empty)
        {
          OrderReadingValues entity = this._orderReadingValuesRepository.FirstOrDefault((Expression<Func<OrderReadingValues, bool>>) (item => item.OrderObj.Id == this._selectedOrder.Id && item.MeterReadingValue.Id == meterReadingValueDto.Id));
          if (entity != null)
            this._orderReadingValuesRepository.TransactionalDelete(entity);
          this._meterReadingValueRepository.TransactionalDelete(this._meterReadingValueRepository.FirstOrDefault((Expression<Func<MeterReadingValue, bool>>) (item => item.Id == meterReadingValueDto.Id)));
        }
      }
    }

    private void TransactionalCreateDueDateReadingValue(ReadingValuesDTO readingValuesDto)
    {
      MeterReadingValue meterReadingValue1 = new MeterReadingValue();
      meterReadingValue1.MeterId = this.SelectedItem.MeterId;
      meterReadingValue1.Date = DateTime.Now;
      meterReadingValue1.Value = readingValuesDto.DueDateValue;
      meterReadingValue1.MeterSerialNumber = this.SelectedItem.SerialNumber;
      meterReadingValue1.StorageInterval = 12582912L;
      meterReadingValue1.CreatedOn = DateTime.Now;
      meterReadingValue1.Unit = this._repositoryFactory.GetRepository<MeasureUnit>().FirstOrDefault((Expression<Func<MeasureUnit, bool>>) (u => u.Id == readingValuesDto.UnitId));
      meterReadingValue1.Creation = 1342177280L;
      meterReadingValue1.MeterType = (long) readingValuesDto.Register;
      meterReadingValue1.ValueId = long.Parse(ValueIdentHelper.GetValueId(ValueIdent.ValueIdPart_PhysicalQuantity.Any, readingValuesDto.Register, ValueIdent.ValueIdPart_Calculation.Any, ValueIdent.ValueIdPart_CalculationStart.Any, ValueIdent.ValueIdPart_StorageInterval.DueDate, ValueIdent.ValueIdPart_Creation.Manually, 0));
      MeterReadingValue meterReadingValue2 = meterReadingValue1;
      if (!this.GetReadingValuesManagerInstance().IsValidReadingValues(meterReadingValue2))
        return;
      this._meterReadingValueRepository.TransactionalInsert(meterReadingValue2);
      MSS.Core.Model.Orders.Order byId = this._repositoryFactory.GetRepository<MSS.Core.Model.Orders.Order>().GetById((object) this._selectedOrder.Id);
      this.GetReadingValuesManagerInstance().InsertOrderReadingValues(this.nhSession, byId, meterReadingValue2);
    }

    private void TransactionalUpdateDueDateReadingValue(ReadingValuesDTO readingValuesDto)
    {
      MeterReadingValue meterReadingValue = this.GetMeterReadingValue(ValueIdent.ValueIdPart_StorageInterval.DueDate, readingValuesDto);
      if (meterReadingValue == null)
        return;
      meterReadingValue.Value = readingValuesDto.DueDateValue;
      meterReadingValue.Unit = this._repositoryFactory.GetRepository<MeasureUnit>().FirstOrDefault((Expression<Func<MeasureUnit, bool>>) (u => u.Id == readingValuesDto.UnitId));
      meterReadingValue.Creation = 1342177280L;
      meterReadingValue.MeterType = (long) readingValuesDto.Register;
      meterReadingValue.ValueId = long.Parse(ValueIdentHelper.GetValueId(ValueIdent.ValueIdPart_PhysicalQuantity.Any, readingValuesDto.Register, ValueIdent.ValueIdPart_Calculation.Any, ValueIdent.ValueIdPart_CalculationStart.Any, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Manually, 0));
      meterReadingValue.CreatedOn = DateTime.Now;
      this._meterReadingValueRepository.TransactionalUpdate(meterReadingValue);
    }

    private void TransactionalCreateActualReadingValue(ReadingValuesDTO readingValuesDto)
    {
      MeterReadingValue meterReadingValue1 = new MeterReadingValue();
      meterReadingValue1.MeterId = this.SelectedItem.MeterId;
      meterReadingValue1.Date = DateTime.Now;
      meterReadingValue1.Value = readingValuesDto.ActualValue;
      meterReadingValue1.MeterSerialNumber = this.SelectedItem.SerialNumber;
      meterReadingValue1.StorageInterval = 4194304L;
      meterReadingValue1.CreatedOn = DateTime.Now;
      meterReadingValue1.Unit = this._repositoryFactory.GetRepository<MeasureUnit>().FirstOrDefault((Expression<Func<MeasureUnit, bool>>) (u => u.Id == readingValuesDto.UnitId));
      meterReadingValue1.Creation = 1342177280L;
      meterReadingValue1.MeterType = (long) readingValuesDto.Register;
      meterReadingValue1.ValueId = long.Parse(ValueIdentHelper.GetValueId(ValueIdent.ValueIdPart_PhysicalQuantity.Any, readingValuesDto.Register, ValueIdent.ValueIdPart_Calculation.Any, ValueIdent.ValueIdPart_CalculationStart.Any, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Manually, 0));
      MeterReadingValue meterReadingValue2 = meterReadingValue1;
      if (!this.GetReadingValuesManagerInstance().IsValidReadingValues(meterReadingValue2))
        return;
      this._meterReadingValueRepository.TransactionalInsert(meterReadingValue2);
      MSS.Core.Model.Orders.Order byId = this._repositoryFactory.GetRepository<MSS.Core.Model.Orders.Order>().GetById((object) this._selectedOrder.Id);
      this.GetReadingValuesManagerInstance().InsertOrderReadingValues(this.nhSession, byId, meterReadingValue2);
    }

    private void TransactionalCreateActualMeterReadingValue(
      MeterReadingValueDTO meterReadingValueDto)
    {
      MeterReadingValue meterReadingValue1 = new MeterReadingValue();
      meterReadingValue1.MeterId = this.SelectedItem.MeterId;
      meterReadingValue1.Date = meterReadingValueDto.Date;
      meterReadingValue1.Value = meterReadingValueDto.Value;
      meterReadingValue1.MeterSerialNumber = this.SelectedItem.SerialNumber;
      meterReadingValue1.StorageInterval = (long) meterReadingValueDto.StorageInterval;
      meterReadingValue1.CreatedOn = DateTime.Now;
      meterReadingValue1.Unit = this._repositoryFactory.GetRepository<MeasureUnit>().FirstOrDefault((Expression<Func<MeasureUnit, bool>>) (item => item.Id == meterReadingValueDto.UnitId));
      meterReadingValue1.PhysicalQuantity = (long) meterReadingValueDto.PhysicalQuantity;
      meterReadingValue1.Calculation = (long) meterReadingValueDto.Calculation;
      meterReadingValue1.CalculationStart = (long) meterReadingValueDto.CalculationStart;
      meterReadingValue1.Creation = (long) meterReadingValueDto.Creation;
      meterReadingValue1.MeterType = (long) meterReadingValueDto.MeterType;
      meterReadingValue1.ValueId = long.Parse(ValueIdentHelper.GetValueId(meterReadingValueDto.PhysicalQuantity, meterReadingValueDto.MeterType, meterReadingValueDto.Calculation, meterReadingValueDto.CalculationStart, meterReadingValueDto.StorageInterval, meterReadingValueDto.Creation, 0));
      MeterReadingValue meterReadingValue2 = meterReadingValue1;
      if (!this.GetReadingValuesManagerInstance().IsValidReadingValues(meterReadingValue2))
        return;
      this._meterReadingValueRepository.TransactionalInsert(meterReadingValue2);
      MSS.Core.Model.Orders.Order byId = this._repositoryFactory.GetRepository<MSS.Core.Model.Orders.Order>().GetById((object) this._selectedOrder.Id);
      this.GetReadingValuesManagerInstance().InsertOrderReadingValues(this.nhSession, byId, meterReadingValue2);
    }

    private void TransactionalUpdateActualReadingValue(ReadingValuesDTO readingValuesDto)
    {
      MeterReadingValue meterReadingValue = this.GetMeterReadingValue(ValueIdent.ValueIdPart_StorageInterval.None, readingValuesDto);
      if (meterReadingValue == null)
        return;
      meterReadingValue.Value = readingValuesDto.ActualValue;
      meterReadingValue.Unit = this._repositoryFactory.GetRepository<MeasureUnit>().FirstOrDefault((Expression<Func<MeasureUnit, bool>>) (u => u.Id == readingValuesDto.UnitId));
      meterReadingValue.Creation = 1342177280L;
      meterReadingValue.MeterType = (long) readingValuesDto.Register;
      meterReadingValue.ValueId = long.Parse(ValueIdentHelper.GetValueId(ValueIdent.ValueIdPart_PhysicalQuantity.Any, readingValuesDto.Register, ValueIdent.ValueIdPart_Calculation.Any, ValueIdent.ValueIdPart_CalculationStart.Any, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Manually, 0));
      meterReadingValue.CreatedOn = DateTime.Now;
      this._meterReadingValueRepository.TransactionalUpdate(meterReadingValue);
    }

    private void TransactionalUpdateActualMeterReadingValue(
      MeterReadingValueDTO meterReadingValueDto)
    {
      MeterReadingValue entity = this._meterReadingValueRepository.FirstOrDefault((Expression<Func<MeterReadingValue, bool>>) (item => item.Id == meterReadingValueDto.Id));
      if (entity == null)
        return;
      entity.Value = meterReadingValueDto.Value;
      entity.Unit = this._repositoryFactory.GetRepository<MeasureUnit>().FirstOrDefault((Expression<Func<MeasureUnit, bool>>) (item => item.Id == meterReadingValueDto.UnitId));
      entity.PhysicalQuantity = (long) meterReadingValueDto.PhysicalQuantity;
      entity.MeterType = (long) meterReadingValueDto.MeterType;
      entity.Calculation = (long) meterReadingValueDto.Calculation;
      entity.CalculationStart = (long) meterReadingValueDto.CalculationStart;
      entity.StorageInterval = (long) meterReadingValueDto.StorageInterval;
      entity.Creation = (long) meterReadingValueDto.Creation;
      entity.ValueId = long.Parse(ValueIdentHelper.GetValueId(meterReadingValueDto.PhysicalQuantity, meterReadingValueDto.MeterType, meterReadingValueDto.Calculation, meterReadingValueDto.CalculationStart, meterReadingValueDto.StorageInterval, meterReadingValueDto.Creation, 0));
      entity.CreatedOn = DateTime.Now;
      this._meterReadingValueRepository.TransactionalUpdate(entity);
    }

    private MeterReadingValue GetMeterReadingValue(
      ValueIdent.ValueIdPart_StorageInterval readingValueEnum,
      ReadingValuesDTO readingValuesDto)
    {
      Guid meterId = readingValuesDto.MeterId;
      Guid orderId = readingValuesDto.OrderId;
      long register = (long) readingValuesDto.Register;
      return this._repositoryFactory.GetSession().CreateCriteria<MeterReadingValue>("RV").CreateCriteria("RV.OrderReadingValues", "ORV", JoinType.InnerJoin).Add((ICriterion) Restrictions.Eq("ORV.OrderObj.Id", (object) orderId)).Add((ICriterion) Restrictions.Eq("RV.MeterId", (object) meterId)).Add((ICriterion) Restrictions.Eq("RV.MeterType", (object) register)).Add((ICriterion) Restrictions.Eq("RV.StorageInterval", (object) (long) readingValueEnum)).List<MeterReadingValue>().FirstOrDefault<MeterReadingValue>();
    }

    private bool GetVisibilityForProperty(string propertyName)
    {
      if (this.SelectedItem != null && this.SelectedItem.MeterId != Guid.Empty)
      {
        foreach (DeviceTypeVisibilityAttribute visibilityAttribute in (IEnumerable<DeviceTypeVisibilityAttribute>) DeviceTypeVisibilityHelper.GetDeviceTypeVisibilityAttributes(typeof (ReadingValuesDTO), propertyName))
        {
          if (visibilityAttribute.DeviceTypeEnum.Equals((object) this.SelectedItem.DeviceType))
            return true;
        }
      }
      return false;
    }

    private List<Guid> GetMeterGuids()
    {
      List<Guid> meterGuids = new List<Guid>();
      foreach (ExecuteOrderStructureNode node in (Collection<ExecuteOrderStructureNode>) this.StructureForSelectedOrder)
      {
        if (node.NodeType == StructureNodeTypeEnum.Meter)
          meterGuids.Add(node.MeterId);
        this.WalkStructureAndGetMeterGuids(node, ref meterGuids);
      }
      return meterGuids;
    }

    private void WalkStructureAndGetMeterGuids(
      ExecuteOrderStructureNode node,
      ref List<Guid> meterGuids)
    {
      foreach (ExecuteOrderStructureNode child in (Collection<ExecuteOrderStructureNode>) node.Children)
      {
        if (child.NodeType == StructureNodeTypeEnum.Meter)
          meterGuids.Add(child.MeterId);
        this.WalkStructureAndGetMeterGuids(child, ref meterGuids);
      }
    }

    private void SetOrderStatus(
      ObservableCollection<ExecuteOrderStructureNode> nodesList,
      OrderDTO selectedOrder)
    {
      if (!OrdersHelper.Descendants(nodesList[0]).Where<ExecuteOrderStructureNode>((Func<ExecuteOrderStructureNode, bool>) (d => d.IsMeter())).All<ExecuteOrderStructureNode>((Func<ExecuteOrderStructureNode, bool>) (m => object.Equals((object) m.Status, (object) ReadingValueStatusEnum.ok) || object.Equals((object) m.Status, (object) ReadingValueStatusEnum.notavailable))) || selectedOrder.Status != StatusOrderEnum.InProgress && selectedOrder.Status != StatusOrderEnum.Dated || !this.UpdateOrderStatus(selectedOrder, StatusOrderEnum.Closed))
        return;
      MSSUIHelper.ShowWarningDialog(this._windowFactory, string.Empty, Resources.Warning_Order_Close, false);
    }

    private bool UpdateOrderStatus(
      OrderDTO selectedOrder,
      StatusOrderEnum status,
      bool isTransactional = false)
    {
      IRepository<MSS.Core.Model.Orders.Order> repository = this._repositoryFactory.GetRepository<MSS.Core.Model.Orders.Order>();
      MSS.Core.Model.Orders.Order entity = repository.FirstOrDefault((Expression<Func<MSS.Core.Model.Orders.Order, bool>>) (o => o.Id == selectedOrder.Id));
      if (entity == null)
        return false;
      selectedOrder.Status = status;
      entity.Status = status;
      if (!isTransactional)
        repository.Update(entity);
      else
        repository.TransactionalUpdate(entity);
      return true;
    }

    private RadObservableCollection<ReadingValuesDTO> GetReadingValuesCollection()
    {
      Guid orderId = this._selectedOrder.Id;
      Guid meterId = this.SelectedItem.MeterId;
      RadObservableCollection<ReadingValuesDTO> valuesCollection = new RadObservableCollection<ReadingValuesDTO>();
      List<Guid?> readingValuesOrderIds = this._orderReadingValuesRepository.SearchFor((Expression<Func<OrderReadingValues, bool>>) (or => or.OrderObj.Id == orderId)).Select<OrderReadingValues, Guid?>((Func<OrderReadingValues, Guid?>) (x => x?.MeterReadingValue?.Id)).ToList<Guid?>();
      IRepository<MeterReadingValue> readingValueRepository = this._meterReadingValueRepository;
      Expression<Func<MeterReadingValue, bool>> predicate = (Expression<Func<MeterReadingValue, bool>>) (r => r.MeterId == meterId && readingValuesOrderIds.Contains((Guid?) r.Id) && r.Creation == 1342177280L);
      foreach (IGrouping<long, MeterReadingValue> source in readingValueRepository.SearchFor(predicate).GroupBy<MeterReadingValue, long>((Func<MeterReadingValue, long>) (r => r.MeterType)))
      {
        List<MeterReadingValue> list = source.ToList<MeterReadingValue>();
        MeterReadingValue meterReadingValue1 = list.FirstOrDefault<MeterReadingValue>((Func<MeterReadingValue, bool>) (m => m.StorageInterval == 4194304L));
        MeterReadingValue meterReadingValue2 = list.FirstOrDefault<MeterReadingValue>((Func<MeterReadingValue, bool>) (m => m.StorageInterval == 12582912L));
        if (meterReadingValue1 != null)
        {
          RadObservableCollection<ReadingValuesDTO> observableCollection = valuesCollection;
          ReadingValuesDTO readingValuesDto1 = new ReadingValuesDTO();
          readingValuesDto1.ActualValue = meterReadingValue1.Value;
          readingValuesDto1.DueDateValue = meterReadingValue2 != null ? meterReadingValue2.Value : 0.0;
          readingValuesDto1.Register = (ValueIdent.ValueIdPart_MeterType) source.Key;
          ReadingValuesDTO readingValuesDto2 = readingValuesDto1;
          MeasureUnit unit = meterReadingValue1.Unit;
          Guid guid = unit != null ? unit.Id : Guid.Empty;
          readingValuesDto2.UnitId = guid;
          readingValuesDto1.MeterId = meterId;
          readingValuesDto1.OrderId = orderId;
          ReadingValuesDTO readingValuesDto3 = readingValuesDto1;
          observableCollection.Add(readingValuesDto3);
        }
      }
      return valuesCollection;
    }

    private ObservableCollection<MeterReadingValueDTO> GetGenericMbusReadingValuesCollection()
    {
      ISQLQuery sqlQuery = this._session.CreateSQLQuery(string.Format("SELECT rv.* FROM [t_ReadingValues] as rv \r\n                        INNER JOIN [t_OrderReadingValues] AS orv ON rv.[Id] = orv.[MeterReadingValueId] \r\n                        WHERE orv.OrderId = '{0}' AND rv.MeterSerialNumber = '{1}'", (object) this._selectedOrder.Id, (object) this.SelectedItem.SerialNumber));
      sqlQuery.AddEntity("rv", typeof (MeterReadingValue));
      IList<MeterReadingValue> meterReadingValueList = sqlQuery.List<MeterReadingValue>();
      ObservableCollection<MeterReadingValueDTO> valuesCollection = new ObservableCollection<MeterReadingValueDTO>();
      foreach (MeterReadingValue source in (IEnumerable<MeterReadingValue>) meterReadingValueList)
        valuesCollection.Add(Mapper.Map<MeterReadingValue, MeterReadingValueDTO>(source));
      return valuesCollection;
    }

    private void OrderReadingValuesSaved(OrderReadingValuesSavedEvent readingValuesEvent)
    {
      if (!(this.SelectedItem.SerialNumber == readingValuesEvent.SerialNumber))
        return;
      this.GenericMbusReadingValuesCollection = this.GetGenericMbusReadingValuesCollection();
    }

    private void OnReadingProgressBarFinish(ProgressFinished obj)
    {
      switch (this._transceiverType)
      {
        case TransceiverType.Reader:
          this.isIRReadingStarted = false;
          this._readerMinoConnect.StopReadingValues();
          break;
        case TransceiverType.Receiver:
          this._receiverMinoConnect.StopReadingValues();
          break;
      }
      this.IsStartButtonEnabled = true;
      this.IsStopButtonEnabled = false;
      this.IsReadingStarted = false;
      this.IsReadingDeviceViaCBEnabled = true;
      this.isIRReadingStarted = false;
      this.UpdateLabel();
    }

    public void StopReading() => this.ProgressBar.ResetProgressBar();

    private void SetMeterImageStatusAndDisplayWarningMessage(
      ExecuteOrderStructureNode meter,
      SolidColorBrush brush,
      ReadingValueStatusEnum status,
      string errorMessage,
      string serialNumber)
    {
      meter.Status = new ReadingValueStatusEnum?(status);
      this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(string.Format(errorMessage, (object) serialNumber));
      OrdersManager.SetImageAndColor(meter, brush);
    }
  }
}


--- ManuallyAssignMetersViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.ManuallyAssignMetersViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Modules.GMM;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Meters;
using MSS.DTO.Meters;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Controls.CheckableComboBox;
using MSS_Client.Utils;
using MVVM.Commands;
using NHibernate;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Windows;
using System.Windows.Input;
using Telerik.Windows.Controls;
using Telerik.Windows.Data;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class ManuallyAssignMetersViewModel : MVVM.ViewModel.ViewModelBase
  {
    private IRepositoryFactory _repositoryFactory;
    private IWindowFactory _windowFactory;
    private StructureNodeDTO _structureNode;
    private IRepository<MinomatMeter> _minomatMeterRepository;
    private IRepository<Meter> _meterRepository;
    private MinomatSerializableDTO _selectedMinomat;
    private List<TenantInfo> _fullTenantInfos;
    private List<string> _selectedAddresses;
    private List<string> _selectedFloors;
    private List<string> _selectedPositions;
    private int oldNoOfSelectedDevices;
    private string _selectedAddressesText;
    private string _selectedFloorsText;
    private string _selectedPositionsText;
    private string _title;
    private string _noOfSelectedDevicesLabel;
    private ObservableCollection<TenantInfo> _tenantsInfoCollection;
    private bool _showProgressCircle;
    private List<TenantInfo> _selectedItems = new List<TenantInfo>();
    private MVVM.ViewModel.ViewModelBase _messageUserControl;

    public ManuallyAssignMetersViewModel(
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory,
      StructureNodeDTO node)
    {
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._structureNode = node;
      this._minomatMeterRepository = this._repositoryFactory.GetRepository<MinomatMeter>();
      this._meterRepository = this._repositoryFactory.GetRepository<Meter>();
      this._selectedMinomat = node?.Entity as MinomatSerializableDTO;
      this.Title = this._selectedMinomat != null ? Resources.AssignMeters_Expert_AssignDevicesManuallyToMinomat + this._selectedMinomat.RadioId : Resources.AssignMeters_Expert_AssignDevicesManuallyToMinomat;
      this.ResetNumberOfSelectedDevices();
      this.LoadTenantsInfoCollection();
      this.InitAddressList();
      this.InitFloorList();
      this.InitPositionList();
    }

    public ICommand AssignDevicesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          if (this.SelectedItems.Sum<TenantInfo>((Func<TenantInfo, int>) (item => item.NoOfDevices)) > 300)
          {
            MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.ToString(), Resources.ManuallyAssignMeters_MoreThan300Selected, false);
          }
          else
          {
            this.ShowProgressCircle = true;
            bool success = false;
            ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
            {
              success = this.SaveAndRegisterMinomatMeters(this.GetMetersFromSelectedTenants());
              this.ShowProgressCircle = false;
              if (success)
              {
                this.ResetNumberOfSelectedDevices();
                this.LoadTenantsInfoCollection();
                this.OnPropertyChanged("TenantsInfoCollection");
              }
              Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = success ? MessageHandlingManager.ShowSuccessMessage(Resources.MSS_ExecuteInstallationOrder_MeterRegistrationSuccessful) : MessageHandlingManager.ShowWarningMessage(Resources.MSS_ExecuteInstallationOrder_MeterRegistrationError)));
            }));
          }
        });
      }
    }

    public ICommand OnCheckChangedAddressCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          this._selectedAddresses = this.AddressList.Where<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)).Select<CheckableComboBoxItem, string>((Func<CheckableComboBoxItem, string>) (item => item.Text)).ToList<string>();
          this.SelectedAddressesText = !this._selectedAddresses.Any<string>() ? "" : string.Join("; ", (IEnumerable<string>) this._selectedAddresses);
          this.FilterTenantInfoCollection();
        });
      }
    }

    public ICommand UpdateDeviceCountCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadGridView radGridView = parameter as RadGridView;
          int num = radGridView.SelectedItems.Sum<object>((Func<object, int>) (item => ((TenantInfo) item).NoOfDevices));
          if (radGridView.SelectedItems.Contains(radGridView.SelectedItem) && this.oldNoOfSelectedDevices >= num)
            num -= ((TenantInfo) radGridView.SelectedItem).NoOfDevices;
          this.oldNoOfSelectedDevices = num;
          this.NoOfSelectedDevicesLabel = num.ToString() + " " + Resources.AssignMeters_Expert_DevicesSelected;
        }));
      }
    }

    public ICommand OnCheckChangedFloorCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          this._selectedFloors = this.FloorList.Where<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)).Select<CheckableComboBoxItem, string>((Func<CheckableComboBoxItem, string>) (item => item.Text)).ToList<string>();
          this.SelectedFloorsText = !this._selectedFloors.Any<string>() ? "" : string.Join("; ", (IEnumerable<string>) this._selectedFloors);
          this.FilterTenantInfoCollection();
        });
      }
    }

    public ICommand OnCheckChangedPositionCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          this._selectedPositions = this.PositionList.Where<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)).Select<CheckableComboBoxItem, string>((Func<CheckableComboBoxItem, string>) (item => item.Text)).ToList<string>();
          this.SelectedPositionsText = !this._selectedPositions.Any<string>() ? "" : string.Join("; ", (IEnumerable<string>) this._selectedPositions);
          this.FilterTenantInfoCollection();
        });
      }
    }

    public string SelectedAddressesText
    {
      get => this._selectedAddressesText;
      set
      {
        this._selectedAddressesText = value;
        this.OnPropertyChanged(nameof (SelectedAddressesText));
      }
    }

    public string SelectedFloorsText
    {
      get => this._selectedFloorsText;
      set
      {
        this._selectedFloorsText = value;
        this.OnPropertyChanged(nameof (SelectedFloorsText));
      }
    }

    public string SelectedPositionsText
    {
      get => this._selectedPositionsText;
      set
      {
        this._selectedPositionsText = value;
        this.OnPropertyChanged(nameof (SelectedPositionsText));
      }
    }

    public string Title
    {
      get => this._title;
      set
      {
        this._title = value;
        this.OnPropertyChanged(nameof (Title));
      }
    }

    public string NoOfSelectedDevicesLabel
    {
      get => this._noOfSelectedDevicesLabel;
      set
      {
        this._noOfSelectedDevicesLabel = value;
        this.OnPropertyChanged(nameof (NoOfSelectedDevicesLabel));
      }
    }

    public ObservableCollection<TenantInfo> TenantsInfoCollection
    {
      get => this._tenantsInfoCollection;
      set
      {
        this._tenantsInfoCollection = value;
        this.OnPropertyChanged(nameof (TenantsInfoCollection));
      }
    }

    public bool ShowProgressCircle
    {
      get => this._showProgressCircle;
      set
      {
        this._showProgressCircle = value;
        this.OnPropertyChanged(nameof (ShowProgressCircle));
      }
    }

    public List<TenantInfo> SelectedItems
    {
      get => this._selectedItems;
      set
      {
        this._selectedItems = value;
        this.OnPropertyChanged(nameof (SelectedItems));
      }
    }

    public MVVM.ViewModel.ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    private void LoadTenantsInfoCollection()
    {
      this._tenantsInfoCollection = (ObservableCollection<TenantInfo>) new RadObservableCollection<TenantInfo>();
      this._fullTenantInfos = new List<TenantInfo>();
      foreach (StructureNodeDTO subNode1 in (Collection<StructureNodeDTO>) this._structureNode.RootNode.SubNodes)
      {
        if (subNode1.NodeType.Name == "Tenant")
        {
          TenantDTO entity1 = subNode1.Entity as TenantDTO;
          TenantInfo tenantInfo = new TenantInfo()
          {
            Tenant = entity1,
            Address = (this._structureNode.RootNode.Entity is LocationDTO entity2 ? entity2.Street : (string) null) + " " + (this._structureNode.RootNode.Entity is LocationDTO entity3 ? entity3.BuildingNr : (string) null)
          };
          tenantInfo.FloorPosition = tenantInfo?.Tenant?.FloorNr + "." + tenantInfo?.Tenant?.FloorName + " / " + tenantInfo?.Tenant?.ApartmentNr + " " + tenantInfo?.Tenant?.Direction;
          int num1 = 0;
          int num2 = 0;
          int num3 = 0;
          int num4 = 0;
          int num5 = 0;
          foreach (StructureNodeDTO subNode2 in (Collection<StructureNodeDTO>) subNode1.SubNodes)
          {
            if (subNode2.NodeType.Name == "Meter")
            {
              MeterDTO currentMeter = subNode2.Entity as MeterDTO;
              if (currentMeter != null)
              {
                MinomatMeter minomatMeter = this._minomatMeterRepository.SearchFor((Expression<Func<MinomatMeter, bool>>) (item => item.Meter.Id == currentMeter.Id)).FirstOrDefault<MinomatMeter>();
                if (minomatMeter != null)
                {
                  if (minomatMeter.Status.HasValue)
                  {
                    MeterStatusEnum? status = minomatMeter.Status;
                    if (status.HasValue)
                    {
                      switch (status.GetValueOrDefault())
                      {
                        case MeterStatusEnum.Received:
                          ++num2;
                          break;
                        case MeterStatusEnum.Assigned:
                          ++num3;
                          break;
                        case MeterStatusEnum.Registered:
                          ++num4;
                          break;
                      }
                    }
                  }
                }
                else
                  ++num5;
              }
              ++num1;
            }
          }
          tenantInfo.NoOfDevices = num1;
          tenantInfo.ReceivedDevices = num2;
          tenantInfo.AssignedDevices = num3;
          tenantInfo.RegisteredDevices = num4;
          tenantInfo.RecAsRegDevices = num2.ToString() + "/" + (object) num3 + "/" + (object) num4;
          tenantInfo.OpenDevices = num5;
          tenantInfo.OpenDevicesString = num5.ToString() + "/" + (object) num1;
          if (num3 == 0)
            tenantInfo.ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-red.png";
          else if (num3 > 0 && num3 < num1)
            tenantInfo.ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-yellow.png";
          else if (num3 == num1)
            tenantInfo.ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-green.png";
          this._tenantsInfoCollection.Add(tenantInfo);
          this._fullTenantInfos.Add(tenantInfo);
        }
      }
    }

    public List<CheckableComboBoxItem> AddressList { get; private set; }

    private void InitAddressList()
    {
      this.AddressList = new List<CheckableComboBoxItem>();
      foreach (string str in this._fullTenantInfos.Select<TenantInfo, string>((Func<TenantInfo, string>) (item => item.Address)).Distinct<string>().ToList<string>())
        this.AddressList.Add(new CheckableComboBoxItem()
        {
          Text = str
        });
    }

    public List<CheckableComboBoxItem> FloorList { get; private set; }

    private void InitFloorList()
    {
      this.FloorList = new List<CheckableComboBoxItem>();
      foreach (string str in this._fullTenantInfos.Select<TenantInfo, string>((Func<TenantInfo, string>) (item => item.Tenant.FloorNr + "." + item.Tenant.FloorName)).Distinct<string>().ToList<string>())
        this.FloorList.Add(new CheckableComboBoxItem()
        {
          Text = str
        });
    }

    public List<CheckableComboBoxItem> PositionList { get; private set; }

    private void InitPositionList()
    {
      this.PositionList = new List<CheckableComboBoxItem>();
      foreach (string str in this._fullTenantInfos.Select<TenantInfo, string>((Func<TenantInfo, string>) (item => item.Tenant.ApartmentNr + " " + item.Tenant.Direction)).Distinct<string>().ToList<string>())
        this.PositionList.Add(new CheckableComboBoxItem()
        {
          Text = str
        });
    }

    private void FilterTenantInfoCollection()
    {
      this._tenantsInfoCollection = new ObservableCollection<TenantInfo>();
      this.ResetNumberOfSelectedDevices();
      foreach (TenantInfo fullTenantInfo in this._fullTenantInfos)
      {
        if ((this._selectedAddresses == null || this._selectedAddresses.Count == 0 || this._selectedAddresses.Contains(fullTenantInfo.Address)) & (this._selectedFloors == null || this._selectedFloors.Count == 0 || this._selectedFloors.Contains(fullTenantInfo.Tenant?.FloorNr + "." + fullTenantInfo.Tenant?.FloorName)) & (this._selectedPositions == null || this._selectedPositions.Count == 0 || this._selectedPositions.Contains(fullTenantInfo.Tenant?.ApartmentNr + " " + fullTenantInfo.Tenant?.Direction)))
          this._tenantsInfoCollection.Add(fullTenantInfo);
      }
      this.OnPropertyChanged("TenantsInfoCollection");
    }

    private List<MeterDTO> GetMetersFromSelectedTenants()
    {
      List<MeterDTO> fromSelectedTenants = new List<MeterDTO>();
      foreach (TenantInfo selectedItem in this.SelectedItems)
      {
        foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) this._structureNode.RootNode.SubNodes)
        {
          if (subNode.NodeType.Name == "Tenant" && (TenantDTO) subNode.Entity != null && ((TenantDTO) subNode.Entity).Id == selectedItem.Tenant.Id)
          {
            using (IEnumerator<StructureNodeDTO> enumerator = subNode.SubNodes.GetEnumerator())
            {
              while (enumerator.MoveNext())
              {
                StructureNodeDTO current = enumerator.Current;
                if (current.NodeType.Name == "Meter" && current.Entity != null)
                  fromSelectedTenants.Add(current.Entity as MeterDTO);
              }
              break;
            }
          }
        }
      }
      return fromSelectedTenants;
    }

    private bool SaveAndRegisterMinomatMeters(List<MeterDTO> meterList)
    {
      bool flag = true;
      ISession session = this._repositoryFactory.GetSession();
      try
      {
        Minomat minomat = Mapper.Map<MinomatSerializableDTO, Minomat>((MinomatSerializableDTO) this._structureNode.Entity);
        GMMMinomatConfigurator.GetInstance(minomat.IsMaster, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory")).RegisterDevicesOnMinomat(meterList, minomat);
        session.BeginTransaction();
        foreach (MeterDTO meter in meterList)
          this._minomatMeterRepository.TransactionalInsert(new MinomatMeter()
          {
            SignalStrength = 0,
            Status = new MeterStatusEnum?(MeterStatusEnum.Registered),
            Meter = Mapper.Map<MeterDTO, Meter>(meter),
            Minomat = minomat
          });
        MinomatRadioDetails radioDetails = minomat.RadioDetails;
        radioDetails.NrOfRegisteredDevices = meterList.Count.ToString();
        radioDetails.StatusDevices = new MinomatStatusDevicesEnum?(MinomatStatusDevicesEnum.DevicesRegistered);
        this._repositoryFactory.GetRepository<MinomatRadioDetails>().TransactionalUpdate(radioDetails);
        session.Transaction.Commit();
      }
      catch (Exception ex)
      {
        MessageHandler.LogException(ex);
        flag = false;
        if (session.IsOpen && session.Transaction.IsActive)
          session.Transaction.Rollback();
      }
      return flag;
    }

    private void ResetNumberOfSelectedDevices()
    {
      this.NoOfSelectedDevicesLabel = "0 " + Resources.AssignMeters_Expert_DevicesSelected;
      this.oldNoOfSelectedDevices = 0;
    }
  }
}


--- MeterInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.MeterInfo
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Core.Model.Meters;
using MSS.DTO.Meters;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class MeterInfo
  {
    public MeterDTO Meter { get; set; }

    public string MinomatGsmId { get; set; }

    public string TenantName { get; set; }

    public int TenantNumber { get; set; }

    public string Address { get; set; }

    public string FloorPosition { get; set; }

    public MeterStatusEnum? Status { get; set; }

    public bool Received { get; set; }

    public bool Assigned { get; set; }

    public bool Registered { get; set; }
  }
}


--- MinomatIdPopupViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.MinomatIdPopupViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MVVM.ViewModel;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class MinomatIdPopupViewModel : ViewModelBase
  {
    public string MinomatId { get; set; }
  }
}


--- MinomatMasterInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.MinomatMasterInfo
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.DTO;
using MSS.DTO.Structures;
using System;
using System.Collections.Generic;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class MinomatMasterInfo : DTOBase
  {
    private string _imageLocation;
    private string _status;
    public int ReceivedSlavesNumber;
    private string _receivedSlavesString;

    public MinomatSerializableDTO MinomatMaster { get; set; }

    public string ImageLocation
    {
      get => this._imageLocation;
      set
      {
        this._imageLocation = value;
        this.OnPropertyChanged(nameof (ImageLocation));
      }
    }

    public string Address { get; set; }

    public string Floor { get; set; }

    public string Status
    {
      get => this._status;
      set
      {
        this._status = value;
        this.OnPropertyChanged(nameof (Status));
      }
    }

    public DateTime Date { get; set; }

    public string ReceivedSlavesString
    {
      get => this._receivedSlavesString;
      set
      {
        this._receivedSlavesString = value;
        this.OnPropertyChanged(nameof (ReceivedSlavesString));
      }
    }

    public List<MinomatSlaveInfo> MinomatSlavesList { get; set; }
  }
}


--- MinomatSlaveInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.MinomatSlaveInfo
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.DTO.Structures;
using System.Collections.Generic;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class MinomatSlaveInfo
  {
    public MinomatSerializableDTO MinomatSlave { get; set; }

    public string ImageLocation { get; set; }

    public string Address { get; set; }

    public string Floor { get; set; }

    public string Status { get; set; }

    public string NodeId { get; set; }

    public string ParentId { get; set; }

    public string HopCount { get; set; }

    public string RSSI { get; set; }

    public List<MinomatSlaveInfo> MinomatSlavesList { get; set; }
  }
}


--- MinomatStructure.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.MinomatStructure
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Core.Model.DataCollectors;
using MSS.DTO;
using MSS.DTO.Structures;
using MSS.Utils.Utils;
using System.Collections.ObjectModel;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class MinomatStructure : DTOBase
  {
    private string _description;
    private string _location;
    private string _statusDevices;
    private string _statusNetwork;
    private string _gsmStatus;
    private ObservableCollection<MinomatStructure> _minomatStructureSubNodes;
    private string _statusDevicesImageLocation;
    private string _statusNetworkImageLocation;

    public StructureNodeDTO MinomatStructureNode { get; set; }

    public string Description
    {
      get => this._description;
      set
      {
        this._description = value;
        this.OnPropertyChanged(nameof (Description));
      }
    }

    public string Location
    {
      get => this._location;
      set
      {
        this._location = value;
        this.OnPropertyChanged(nameof (Location));
      }
    }

    public string StatusDevices
    {
      get => this._statusDevices;
      set
      {
        this._statusDevices = value;
        if (!string.IsNullOrEmpty(value))
          this.StatusDevicesImageLocation = this.StatusDevices != MinomatStatusDevicesEnum.Open.GetStringValue() ? "pack://application:,,,/Styles;component/Images/Settings/light-green.png" : "pack://application:,,,/Styles;component/Images/Settings/light-yellow.png";
        this.OnPropertyChanged(nameof (StatusDevices));
      }
    }

    public string StatusNetwork
    {
      get => this._statusNetwork;
      set
      {
        this._statusNetwork = value;
        if (!string.IsNullOrEmpty(value) && this.MinomatStructureNode?.Entity != null)
          this.StatusNetworkImageLocation = !(this.MinomatStructureNode.Entity as MinomatSerializableDTO).IsMaster ? (this.StatusNetwork == MinomatStatusNetworkEnum.SetupStarted.GetStringValue() ? "pack://application:,,,/Styles;component/Images/Settings/light-green.png" : "pack://application:,,,/Styles;component/Images/Settings/light-yellow.png") : (this.StatusNetwork == MinomatStatusNetworkEnum.NetworkOptimization.GetStringValue() ? "pack://application:,,,/Styles;component/Images/Settings/light-green.png" : "pack://application:,,,/Styles;component/Images/Settings/light-yellow.png");
        this.OnPropertyChanged(nameof (StatusNetwork));
      }
    }

    public string GSMStatus
    {
      get => this._gsmStatus;
      set
      {
        this._gsmStatus = value;
        this.OnPropertyChanged(nameof (GSMStatus));
      }
    }

    public ObservableCollection<MinomatStructure> MinomatStructureSubNodes
    {
      get => this._minomatStructureSubNodes;
      set
      {
        this._minomatStructureSubNodes = value;
        this.OnPropertyChanged(nameof (MinomatStructureSubNodes));
      }
    }

    public string StatusDevicesImageLocation
    {
      get => this._statusDevicesImageLocation;
      set
      {
        this._statusDevicesImageLocation = value;
        this.OnPropertyChanged(nameof (StatusDevicesImageLocation));
      }
    }

    public string StatusNetworkImageLocation
    {
      get => this._statusNetworkImageLocation;
      set
      {
        this._statusNetworkImageLocation = value;
        this.OnPropertyChanged(nameof (StatusNetworkImageLocation));
      }
    }
  }
}


--- MinomatTreeInfoDTO.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.MinomatTreeInfoDTO
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.DTO;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class MinomatTreeInfoDTO : DTOBase
  {
    public string SerialNumber { get; set; }

    public string Letter { get; set; }

    public string ImageLocation { get; set; }

    public int NodeID { get; set; }

    public int ParentID { get; set; }

    public string RSSI { get; set; }

    public string HopCount { get; set; }

    public string Floor { get; set; }

    public string Address { get; set; }
  }
}


--- NetworkSetupSlaveInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.NetworkSetupSlaveInfo
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.DTO;
using System;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class NetworkSetupSlaveInfo : DTOBase
  {
    private bool? _hasErrors;
    private string _nodeId;
    private string _signalStrength;
    private DateTime? _lastStartOn;
    private DateTime? _lastRegisteredOn;
    private string _imageLocation;

    public StructureNodeDTO Slave { get; set; }

    public bool? HasErrors
    {
      get => this._hasErrors;
      set
      {
        this._hasErrors = value;
        this.OnPropertyChanged(nameof (HasErrors));
      }
    }

    public string NodeId
    {
      get => this._nodeId;
      set
      {
        this._nodeId = value;
        this.OnPropertyChanged(nameof (NodeId));
      }
    }

    public string SignalStrength
    {
      get => this._signalStrength;
      set
      {
        this._signalStrength = value;
        this.OnPropertyChanged(nameof (SignalStrength));
      }
    }

    public DateTime? LastStartOn
    {
      get => this._lastStartOn;
      set
      {
        this._lastStartOn = value;
        this.OnPropertyChanged(nameof (LastStartOn));
      }
    }

    public DateTime? LastRegisteredOn
    {
      get => this._lastRegisteredOn;
      set
      {
        this._lastRegisteredOn = value;
        this.OnPropertyChanged(nameof (LastRegisteredOn));
      }
    }

    public string ImageLocation
    {
      get => this._imageLocation;
      set
      {
        this._imageLocation = value;
        this.OnPropertyChanged(nameof (ImageLocation));
      }
    }
  }
}


--- NetworkSetupViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.NetworkSetupViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MinomatHandler;
using MSS.Business.DTO;
using MSS.Business.Modules.GMM;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Windows;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class NetworkSetupViewModel : ViewModelBase
  {
    private IRepositoryFactory _repositoryFactory;
    private readonly IWindowFactory _windowFactory;
    private IRepository<MinomatRadioDetails> _minomatRadioDetailsRepository;
    private StructureNodeDTO _selectedMaster;
    private ObservableCollection<NetworkSetupSlaveInfo> _slavesList;
    private string _title;
    private string _busyContent;
    private bool _showProgressCircle;
    private ViewModelBase _messageUserControl;
    private string _lastMinomatMasterStartedOn;
    private string _fixedNetworkSetup_GSMStatus;
    private DateTime? _fixedNetworkSetup_GSMStatusDate;
    private bool _isStartMasterEnabled;
    private DateTime? _lastStartOn;
    private DateTime? _minomatMasterLastStartOn;
    private bool _isNetworkOptimizationEnabled;

    public NetworkSetupViewModel(
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory,
      StructureNodeDTO masterNode)
    {
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._minomatRadioDetailsRepository = this._repositoryFactory.GetRepository<MinomatRadioDetails>();
      this.Title = Resources.MSS_Client_Orders_ExecuteInstallationOrder_NetworkSetup;
      this.IsNetworkOptimizationEnabled = false;
      if (!(masterNode.NodeType.Name == "MinomatMaster"))
        return;
      this.Title = this.Title + " - " + Resources.MSS_MinomatMaster_Master;
      this._selectedMaster = masterNode;
      MinomatRadioDetails minomatRadioDetails = this._minomatRadioDetailsRepository.SearchFor((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == (this._selectedMaster.Entity as MinomatSerializableDTO).Id)).FirstOrDefault<MinomatRadioDetails>();
      this._lastMinomatMasterStartedOn = Resources.NetworkSetup_LastStartOn;
      if (minomatRadioDetails != null)
        this._lastMinomatMasterStartedOn = this._lastMinomatMasterStartedOn + " " + (object) minomatRadioDetails.LastStartOn;
      this.MinomatMasterLastStartOn = (DateTime?) minomatRadioDetails?.LastStartOn;
      this.FixedNetworkSetup_GSMStatus = minomatRadioDetails != null ? minomatRadioDetails.GSMStatus.ToString() : "";
      this.FixedNetworkSetup_GSMStatusDate = (DateTime?) minomatRadioDetails?.GSMStatusDate;
      int num;
      if (minomatRadioDetails != null)
      {
        MinomatStatusNetworkEnum? statusNetwork = minomatRadioDetails.StatusNetwork;
        MinomatStatusNetworkEnum statusNetworkEnum = MinomatStatusNetworkEnum.SetupStarted;
        num = statusNetwork.GetValueOrDefault() == statusNetworkEnum ? (statusNetwork.HasValue ? 1 : 0) : 0;
      }
      else
        num = 0;
      this.IsNetworkOptimizationEnabled = num != 0;
      this.InitSlavesList();
      this._isStartMasterEnabled = this.CanMasterBeStarted();
      this._showProgressCircle = false;
    }

    public ICommand RegisterSlavesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.BusyContent = Resources.FixedNetworkSetup_RegisterSlavesInProgress;
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            try
            {
              GMMMinomatConfigurator instance = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
              instance.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
              List<Guid> slaveIds = this._slavesList.Select<NetworkSetupSlaveInfo, Guid>((Func<NetworkSetupSlaveInfo, Guid>) (item => (item.Slave.Entity as MinomatSerializableDTO).Id)).ToList<Guid>();
              List<MinomatRadioDetails> minomatRadioDetailsForStartedSlaves = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => !item.Minomat.IsDeactivated && slaveIds.Contains(item.Minomat.Id) && ((int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.Open || (int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.Registered || (int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.Received || (int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.SetupStarted))).ToList<MinomatRadioDetails>();
              List<Guid> openOrRegisteredOrReceivedSlavesIds = minomatRadioDetailsForStartedSlaves.Select<MinomatRadioDetails, Guid>((Func<MinomatRadioDetails, Guid>) (item => item.Minomat.Id)).ToList<Guid>();
              Dictionary<string, MinomatSerializableDTO> openOrRegisteredOrReceivedSlaves = this._slavesList.Where<NetworkSetupSlaveInfo>((Func<NetworkSetupSlaveInfo, bool>) (item => openOrRegisteredOrReceivedSlavesIds.Contains((item.Slave.Entity as MinomatSerializableDTO).Id))).ToDictionary<NetworkSetupSlaveInfo, string, MinomatSerializableDTO>((Func<NetworkSetupSlaveInfo, string>) (s => s.NodeId), (Func<NetworkSetupSlaveInfo, MinomatSerializableDTO>) (s => (MinomatSerializableDTO) s.Slave.Entity));
              if (openOrRegisteredOrReceivedSlaves.Count > 0)
              {
                GMMMinomatConfiguratorResult canSlavesBeRegisteredOnMaster;
                Dictionary<string, GMMMinomatConfiguratorResult> dictionary = instance.RegisterSlavesOnMinomat(openOrRegisteredOrReceivedSlaves, this._selectedMaster.Entity as MinomatSerializableDTO, out canSlavesBeRegisteredOnMaster);
                if (canSlavesBeRegisteredOnMaster.IsSuccess)
                {
                  TypeHelperExtensionMethods.ForEach<KeyValuePair<string, GMMMinomatConfiguratorResult>>((IEnumerable<KeyValuePair<string, GMMMinomatConfiguratorResult>>) dictionary, (Action<KeyValuePair<string, GMMMinomatConfiguratorResult>>) (gmmConfigResult =>
                  {
                    if (!gmmConfigResult.Value.IsSuccess)
                      return;
                    MinomatSerializableDTO startedSlave = openOrRegisteredOrReceivedSlaves[gmmConfigResult.Key];
                    MinomatRadioDetails minomatRadioDetails3 = minomatRadioDetailsForStartedSlaves.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == startedSlave.Id));
                    MinomatStatusNetworkEnum? statusNetwork;
                    int num3;
                    if (minomatRadioDetails3 != null)
                    {
                      statusNetwork = minomatRadioDetails3.StatusNetwork;
                      MinomatStatusNetworkEnum statusNetworkEnum8 = MinomatStatusNetworkEnum.Open;
                      if ((statusNetwork.GetValueOrDefault() == statusNetworkEnum8 ? (statusNetwork.HasValue ? 1 : 0) : 0) == 0)
                      {
                        statusNetwork = minomatRadioDetails3.StatusNetwork;
                        MinomatStatusNetworkEnum statusNetworkEnum9 = MinomatStatusNetworkEnum.Registered;
                        num3 = statusNetwork.GetValueOrDefault() == statusNetworkEnum9 ? (statusNetwork.HasValue ? 1 : 0) : 0;
                      }
                      else
                        num3 = 1;
                    }
                    else
                      num3 = 0;
                    if (num3 != 0)
                    {
                      MinomatRadioDetails minomatRadioDetails4 = minomatRadioDetailsForStartedSlaves.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == startedSlave.Id));
                      minomatRadioDetails4.StatusNetwork = new MinomatStatusNetworkEnum?(MinomatStatusNetworkEnum.Registered);
                      minomatRadioDetails4.LastRegisteredOn = new DateTime?(DateTime.Now);
                    }
                    else
                    {
                      int num4;
                      if (minomatRadioDetails3 != null)
                      {
                        statusNetwork = minomatRadioDetails3.StatusNetwork;
                        MinomatStatusNetworkEnum statusNetworkEnum10 = MinomatStatusNetworkEnum.Received;
                        if ((statusNetwork.GetValueOrDefault() == statusNetworkEnum10 ? (statusNetwork.HasValue ? 1 : 0) : 0) == 0)
                        {
                          statusNetwork = minomatRadioDetails3.StatusNetwork;
                          MinomatStatusNetworkEnum statusNetworkEnum11 = MinomatStatusNetworkEnum.SetupStarted;
                          num4 = statusNetwork.GetValueOrDefault() == statusNetworkEnum11 ? (statusNetwork.HasValue ? 1 : 0) : 0;
                        }
                        else
                          num4 = 1;
                      }
                      else
                        num4 = 0;
                      if (num4 != 0)
                        minomatRadioDetailsForStartedSlaves.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == startedSlave.Id)).LastRegisteredOn = new DateTime?(DateTime.Now);
                    }
                  }));
                  List<MinomatRadioDetails> list = minomatRadioDetailsForStartedSlaves.Where<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item =>
                  {
                    if (item.Minomat.IsDeactivated)
                      return false;
                    MinomatStatusNetworkEnum? statusNetwork = item.StatusNetwork;
                    MinomatStatusNetworkEnum statusNetworkEnum12 = MinomatStatusNetworkEnum.Registered;
                    if ((statusNetwork.GetValueOrDefault() == statusNetworkEnum12 ? (statusNetwork.HasValue ? 1 : 0) : 0) == 0)
                    {
                      statusNetwork = item.StatusNetwork;
                      MinomatStatusNetworkEnum statusNetworkEnum13 = MinomatStatusNetworkEnum.Received;
                      if ((statusNetwork.GetValueOrDefault() == statusNetworkEnum13 ? (statusNetwork.HasValue ? 1 : 0) : 0) == 0)
                      {
                        statusNetwork = item.StatusNetwork;
                        MinomatStatusNetworkEnum statusNetworkEnum14 = MinomatStatusNetworkEnum.SetupStarted;
                        return statusNetwork.GetValueOrDefault() == statusNetworkEnum14 && statusNetwork.HasValue;
                      }
                    }
                    return true;
                  })).ToList<MinomatRadioDetails>();
                  bool flag = list.Count == this._slavesList.Count;
                  ISession session = this._repositoryFactory.GetSession();
                  session.BeginTransaction();
                  this._minomatRadioDetailsRepository.TransactionalUpdateMany((IEnumerable<MinomatRadioDetails>) minomatRadioDetailsForStartedSlaves);
                  session.Transaction.Commit();
                  foreach (MinomatRadioDetails minomatRadioDetails in minomatRadioDetailsForStartedSlaves)
                  {
                    MinomatRadioDetails minomatRadioDetailsForSlave = minomatRadioDetails;
                    NetworkSetupSlaveInfo networkSetupSlaveInfo = this.SlavesList.FirstOrDefault<NetworkSetupSlaveInfo>((Func<NetworkSetupSlaveInfo, bool>) (item => (item.Slave.Entity as MinomatSerializableDTO).Id == minomatRadioDetailsForSlave.Minomat.Id));
                    if (networkSetupSlaveInfo != null)
                      networkSetupSlaveInfo.LastRegisteredOn = minomatRadioDetailsForSlave.LastRegisteredOn;
                  }
                  this.IsStartMasterEnabled = this.CanMasterBeStarted();
                  if (flag)
                  {
                    Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage)));
                  }
                  else
                  {
                    List<Guid> registeredSlavesIds = list.Select<MinomatRadioDetails, Guid>((Func<MinomatRadioDetails, Guid>) (item => item.Minomat.Id)).ToList<Guid>();
                    string unregisteredSlavesString = string.Join(",", (IEnumerable<string>) this._slavesList.Where<NetworkSetupSlaveInfo>((Func<NetworkSetupSlaveInfo, bool>) (item => !registeredSlavesIds.Contains((item.Slave.Entity as MinomatSerializableDTO).Id))).ToList<NetworkSetupSlaveInfo>().Select<NetworkSetupSlaveInfo, string>((Func<NetworkSetupSlaveInfo, string>) (item => !(item.Slave.Entity is MinomatSerializableDTO entity2) ? (string) null : entity2.RadioId)).ToList<string>());
                    Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, Resources.MSS_Client_SlavesNotRegistered + unregisteredSlavesString, false)));
                  }
                }
                else
                  Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, canSlavesBeRegisteredOnMaster.Message, false)));
                this.ShowProgressCircle = false;
              }
              else
                Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_ExportOrder_Warning_Title, Resources.MSS_Client_NoAvailableSlavesToRegister, false)));
            }
            catch (Exception ex)
            {
              Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
            }
            finally
            {
              this.ShowProgressCircle = false;
            }
          }));
        }));
      }
    }

    public ICommand StartGsmTestCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.BusyContent = Resources.MSS_Client_GSMTestInProgress;
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            try
            {
              GMMMinomatConfigurator instance = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
              instance.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
              GMMMinomatConfiguratorResult gmmConfiguratorResult = instance.StartMasterGSMTestReception(this._selectedMaster.Entity as MinomatSerializableDTO);
              if (gmmConfiguratorResult.IsSuccess)
              {
                int result;
                if (int.TryParse(new MSS.Business.Modules.AppParametersManagement.AppParametersManagement(this._repositoryFactory).GetAppParam("GSMTestWaitingTime").Value, out result))
                {
                  Thread.Sleep(result * 1000);
                  GSMTestReceptionState testReceptionState = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory")).ReadMasterGSMTestReception(this._selectedMaster.Entity as MinomatSerializableDTO);
                  MinomatRadioDetails entity = this._minomatRadioDetailsRepository.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == (this._selectedMaster.Entity as MinomatSerializableDTO).Id));
                  entity.GSMStatus = new GSMTestReceptionState?(testReceptionState);
                  entity.GSMStatusDate = new DateTime?(DateTime.Now);
                  ISession session = this._repositoryFactory.GetSession();
                  session.BeginTransaction();
                  this._minomatRadioDetailsRepository.TransactionalUpdate(entity);
                  session.Transaction.Commit();
                  this.FixedNetworkSetup_GSMStatus = entity.GSMStatus.ToString();
                  this.FixedNetworkSetup_GSMStatusDate = entity.GSMStatusDate;
                  this.ShowProgressCircle = false;
                  string message = Resources.MSS_Client_GSMTestResult_EndedWithState + testReceptionState.ToString();
                  Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Client_GSMTestResult_Title, message, false)));
                }
                else
                  Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Client_GSMTestResult_Title, Resources.MSS_Client_GSMTestResult_NotCorrectlyConfigured, false)));
              }
              else
                Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, gmmConfiguratorResult.Message, false)));
            }
            catch (Exception ex)
            {
              Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
            }
            finally
            {
              this.ShowProgressCircle = false;
            }
          }));
        }));
      }
    }

    public ICommand CheckRoutingTableCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.BusyContent = Resources.MSS_Client_CheckingRoutingTable;
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            try
            {
              List<string> minomatsNotFoundInRoutingTable = new List<string>();
              GMMMinomatConfigurator instance = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
              instance.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
              GMMMinomatConfiguratorResult gmmConfiguratorResult = instance.GetRoutingTable(this._selectedMaster.Entity as MinomatSerializableDTO, out RoutingTable _);
              if (gmmConfiguratorResult.IsSuccess)
              {
                List<Guid> slaveIds = this.SlavesList.Select<NetworkSetupSlaveInfo, Guid>((Func<NetworkSetupSlaveInfo, Guid>) (item => (item.Slave.Entity as MinomatSerializableDTO).Id)).ToList<Guid>();
                List<MinomatRadioDetails> minomatRadioDetailsForSlaves = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => slaveIds.Contains(item.Minomat.Id))).ToList<MinomatRadioDetails>();
                Dictionary<Guid, DateTime?> minomatRadioDetailsIds_FoundInRoutingTable = new Dictionary<Guid, DateTime?>();
                Dictionary<Guid, DateTime?> minomatRadioDetailsIds_NotInRoutingTable = new Dictionary<Guid, DateTime?>();
                this.SlavesList.ToList<NetworkSetupSlaveInfo>().ForEach((Action<NetworkSetupSlaveInfo>) (slave =>
                {
                  RoutingRow routingRow = routingTable.FirstOrDefault<RoutingRow>((Func<RoutingRow, bool>) (x => x.NodeId.ToString() == slave.NodeId));
                  MinomatRadioDetails minomatRadioDetails = minomatRadioDetailsForSlaves.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == (slave.Slave.Entity as MinomatSerializableDTO).Id));
                  MinomatStatusNetworkEnum? statusNetwork;
                  int num3;
                  if (routingRow != null && minomatRadioDetails != null)
                  {
                    statusNetwork = minomatRadioDetails.StatusNetwork;
                    MinomatStatusNetworkEnum statusNetworkEnum6 = MinomatStatusNetworkEnum.Registered;
                    if ((statusNetwork.GetValueOrDefault() == statusNetworkEnum6 ? (statusNetwork.HasValue ? 1 : 0) : 0) == 0)
                    {
                      statusNetwork = minomatRadioDetails.StatusNetwork;
                      MinomatStatusNetworkEnum statusNetworkEnum7 = MinomatStatusNetworkEnum.Received;
                      if ((statusNetwork.GetValueOrDefault() == statusNetworkEnum7 ? (statusNetwork.HasValue ? 1 : 0) : 0) == 0)
                      {
                        statusNetwork = minomatRadioDetails.StatusNetwork;
                        MinomatStatusNetworkEnum statusNetworkEnum8 = MinomatStatusNetworkEnum.SetupStarted;
                        num3 = statusNetwork.GetValueOrDefault() == statusNetworkEnum8 ? (statusNetwork.HasValue ? 1 : 0) : 0;
                        goto label_6;
                      }
                    }
                    num3 = 1;
                  }
                  else
                    num3 = 0;
label_6:
                  if (num3 != 0)
                  {
                    slave.SignalStrength = routingRow.RSSI_dBm.ToString() + " dBm";
                    slave.HasErrors = new bool?(false);
                    slave.ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-green.png";
                    if (!(slave.Slave.Entity is MinomatSerializableDTO entity2) || !(entity2.Id != Guid.Empty))
                      return;
                    minomatRadioDetailsIds_FoundInRoutingTable.Add((slave.Slave.Entity as MinomatSerializableDTO).Id, new DateTime?(DateTime.Now));
                  }
                  else
                  {
                    slave.SignalStrength = "";
                    slave.HasErrors = new bool?(true);
                    int num4;
                    if (minomatRadioDetails != null)
                    {
                      statusNetwork = minomatRadioDetails.StatusNetwork;
                      MinomatStatusNetworkEnum statusNetworkEnum9 = MinomatStatusNetworkEnum.Open;
                      if ((statusNetwork.GetValueOrDefault() == statusNetworkEnum9 ? (statusNetwork.HasValue ? 1 : 0) : 0) == 0)
                      {
                        statusNetwork = minomatRadioDetails.StatusNetwork;
                        MinomatStatusNetworkEnum statusNetworkEnum10 = MinomatStatusNetworkEnum.Registered;
                        num4 = statusNetwork.GetValueOrDefault() == statusNetworkEnum10 ? (statusNetwork.HasValue ? 1 : 0) : 0;
                      }
                      else
                        num4 = 1;
                    }
                    else
                      num4 = 0;
                    if (num4 != 0)
                    {
                      slave.ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-red.png";
                      minomatRadioDetailsIds_NotInRoutingTable.Add((slave.Slave.Entity as MinomatSerializableDTO).Id, new DateTime?(DateTime.Now));
                    }
                  }
                }));
                if (minomatRadioDetailsIds_FoundInRoutingTable.Any<KeyValuePair<Guid, DateTime?>>())
                {
                  List<Guid> minomatKeysToGet_Found = minomatRadioDetailsIds_FoundInRoutingTable.Keys.ToList<Guid>();
                  List<Guid> minomatKeysToGet_NotFound = minomatRadioDetailsIds_NotInRoutingTable.Keys.ToList<Guid>();
                  List<MinomatRadioDetails> list3 = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => minomatKeysToGet_Found.Contains(item.Minomat.Id))).ToList<MinomatRadioDetails>();
                  List<MinomatRadioDetails> list4 = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => minomatKeysToGet_NotFound.Contains(item.Minomat.Id))).ToList<MinomatRadioDetails>();
                  foreach (MinomatRadioDetails minomatRadioDetails in list3)
                  {
                    MinomatStatusNetworkEnum? statusNetwork = minomatRadioDetails.StatusNetwork;
                    MinomatStatusNetworkEnum statusNetworkEnum = MinomatStatusNetworkEnum.Registered;
                    if (statusNetwork.GetValueOrDefault() == statusNetworkEnum && statusNetwork.HasValue)
                      minomatRadioDetails.StatusNetwork = new MinomatStatusNetworkEnum?(MinomatStatusNetworkEnum.Received);
                  }
                  foreach (MinomatRadioDetails minomatRadioDetails3 in list4)
                  {
                    MinomatStatusNetworkEnum? statusNetwork = minomatRadioDetails3.StatusNetwork;
                    MinomatStatusNetworkEnum statusNetworkEnum13 = MinomatStatusNetworkEnum.Open;
                    if (statusNetwork.GetValueOrDefault() != statusNetworkEnum13 || !statusNetwork.HasValue)
                    {
                      MinomatRadioDetails minomatRadioDetails4 = minomatRadioDetails3;
                      statusNetwork = minomatRadioDetails3.StatusNetwork;
                      MinomatStatusNetworkEnum statusNetworkEnum14 = MinomatStatusNetworkEnum.Received;
                      MinomatStatusNetworkEnum? nullable = (statusNetwork.GetValueOrDefault() == statusNetworkEnum14 ? (statusNetwork.HasValue ? 1 : 0) : 0) != 0 ? new MinomatStatusNetworkEnum?(MinomatStatusNetworkEnum.Registered) : minomatRadioDetails3.StatusNetwork;
                      minomatRadioDetails4.StatusNetwork = nullable;
                    }
                  }
                  ISession session = this._repositoryFactory.GetSession();
                  session.BeginTransaction();
                  this._minomatRadioDetailsRepository.TransactionalUpdateMany((IEnumerable<MinomatRadioDetails>) list3);
                  this._minomatRadioDetailsRepository.TransactionalUpdateMany((IEnumerable<MinomatRadioDetails>) list4);
                  session.Transaction.Commit();
                  if (list4 != null && list4.Any<MinomatRadioDetails>())
                    minomatsNotFoundInRoutingTable = list4.Select<MinomatRadioDetails, string>((Func<MinomatRadioDetails, string>) (item => item.Minomat.RadioId)).ToList<string>();
                }
                int num = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => slaveIds.Contains(item.Minomat.Id) && ((int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.Registered || (int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.Received || (int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.SetupStarted))).Count<MinomatRadioDetails>();
                this.IsStartMasterEnabled = slaveIds.Count == 0 || slaveIds.Count == num;
                Application.Current.Dispatcher.Invoke((Action) (() =>
                {
                  if (minomatsNotFoundInRoutingTable.Any<string>())
                    MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, Resources.MSS_Client_SlavesNotFoundInRoutingTable + string.Join(", ", (IEnumerable<string>) minomatsNotFoundInRoutingTable), false);
                  else
                    this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
                }));
              }
              else
                Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, gmmConfiguratorResult.Message, false)));
              this.ShowProgressCircle = false;
            }
            catch (Exception ex)
            {
              Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
            }
            finally
            {
              this.ShowProgressCircle = false;
            }
          }));
        }));
      }
    }

    public ICommand MinomatMasterStartCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.BusyContent = Resources.FixedNetworkSetup_StartingMinomatMaster;
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            try
            {
              GMMMinomatConfigurator instance = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
              instance.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
              GMMMinomatConfiguratorResult gmmConfiguratorResult = instance.StartMinomatMaster(this._selectedMaster.Entity as MinomatSerializableDTO);
              if (gmmConfiguratorResult.IsSuccess)
                Application.Current.Dispatcher.Invoke((Action) (() =>
                {
                  this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
                  DateTime now = DateTime.Now;
                  ISession session = this._repositoryFactory.GetSession();
                  session.BeginTransaction();
                  try
                  {
                    MinomatRadioDetails entity = this._minomatRadioDetailsRepository.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == (this._selectedMaster.Entity as MinomatSerializableDTO).Id));
                    MinomatStatusNetworkEnum? statusNetwork;
                    int num3;
                    if (entity != null)
                    {
                      statusNetwork = entity.StatusNetwork;
                      MinomatStatusNetworkEnum statusNetworkEnum3 = MinomatStatusNetworkEnum.Open;
                      if ((statusNetwork.GetValueOrDefault() == statusNetworkEnum3 ? (statusNetwork.HasValue ? 1 : 0) : 0) == 0)
                      {
                        statusNetwork = entity.StatusNetwork;
                        MinomatStatusNetworkEnum statusNetworkEnum4 = MinomatStatusNetworkEnum.Received;
                        num3 = statusNetwork.GetValueOrDefault() == statusNetworkEnum4 ? (statusNetwork.HasValue ? 1 : 0) : 0;
                      }
                      else
                        num3 = 1;
                    }
                    else
                      num3 = 0;
                    if (num3 != 0)
                    {
                      entity.LastStartOn = new DateTime?(now);
                      entity.StatusNetwork = new MinomatStatusNetworkEnum?(MinomatStatusNetworkEnum.SetupStarted);
                      this._minomatRadioDetailsRepository.TransactionalUpdate(entity);
                    }
                    else if (this._selectedMaster.Entity is MinomatSerializableDTO)
                      this._minomatRadioDetailsRepository.TransactionalInsert(new MinomatRadioDetails()
                      {
                        Minomat = {
                          Id = (this._selectedMaster.Entity as MinomatSerializableDTO).Id
                        },
                        LastStartOn = new DateTime?(now)
                      });
                    session.Transaction.Commit();
                    this.LastMinomatMasterStartedOn = Resources.NetworkSetup_LastStartOn + " " + (object) now;
                    this.MinomatMasterLastStartOn = new DateTime?(now);
                    int num4;
                    if (entity != null)
                    {
                      statusNetwork = entity.StatusNetwork;
                      MinomatStatusNetworkEnum statusNetworkEnum = MinomatStatusNetworkEnum.SetupStarted;
                      num4 = statusNetwork.GetValueOrDefault() == statusNetworkEnum ? (statusNetwork.HasValue ? 1 : 0) : 0;
                    }
                    else
                      num4 = 0;
                    this.IsNetworkOptimizationEnabled = num4 != 0;
                  }
                  catch (Exception ex)
                  {
                    session.Transaction.Rollback();
                    Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
                  }
                }));
              else
                Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, gmmConfiguratorResult.Message, false)));
              this.ShowProgressCircle = false;
            }
            catch (Exception ex)
            {
              Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
            }
            finally
            {
              this.ShowProgressCircle = false;
            }
          }));
        }));
      }
    }

    public ICommand MinomatSlaveStartCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          NetworkSetupSlaveInfo selectedSlave = parameter as NetworkSetupSlaveInfo;
          MinomatRadioDetails currentMinomatRadioDetails = this._minomatRadioDetailsRepository.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == (selectedSlave.Slave.Entity as MinomatSerializableDTO).Id));
          MinomatStatusNetworkEnum? statusNetwork = this._minomatRadioDetailsRepository.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == (this._selectedMaster.Entity as MinomatSerializableDTO).Id)).StatusNetwork;
          MinomatStatusNetworkEnum statusNetworkEnum = MinomatStatusNetworkEnum.SetupStarted;
          if (statusNetwork.GetValueOrDefault() == statusNetworkEnum && statusNetwork.HasValue)
          {
            this.BusyContent = Resources.FixedNetworkSetup_StartingMinomatSlave;
            this.ShowProgressCircle = true;
            ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
            {
              try
              {
                GMMMinomatConfigurator instance = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
                instance.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
                GMMMinomatConfiguratorResult gmmConfiguratorResult = instance.StartMinomatSlave(selectedSlave.Slave.Entity as MinomatSerializableDTO);
                if (gmmConfiguratorResult.IsSuccess)
                  Application.Current.Dispatcher.Invoke((Action) (() =>
                  {
                    this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
                    DateTime now = DateTime.Now;
                    ISession session = this._repositoryFactory.GetSession();
                    session.BeginTransaction();
                    try
                    {
                      if (currentMinomatRadioDetails != null)
                      {
                        currentMinomatRadioDetails.LastStartOn = new DateTime?(now);
                        currentMinomatRadioDetails.StatusNetwork = new MinomatStatusNetworkEnum?(MinomatStatusNetworkEnum.SetupStarted);
                        this._minomatRadioDetailsRepository.TransactionalUpdate(currentMinomatRadioDetails);
                      }
                      else
                        this._minomatRadioDetailsRepository.TransactionalInsert(new MinomatRadioDetails()
                        {
                          Minomat = Mapper.Map<MinomatSerializableDTO, Minomat>(selectedSlave.Slave.Entity as MinomatSerializableDTO),
                          LastStartOn = new DateTime?(now)
                        });
                      session.Transaction.Commit();
                      selectedSlave.LastStartOn = new DateTime?(now);
                    }
                    catch (Exception ex)
                    {
                      session.Transaction.Rollback();
                      Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
                    }
                  }));
                else
                  Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, gmmConfiguratorResult.Message, false)));
                this.ShowProgressCircle = false;
              }
              catch (Exception ex)
              {
                Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
              }
              finally
              {
                this.ShowProgressCircle = false;
              }
            }));
          }
          else
            Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, Resources.MSS_Client_MasterMustBeStarted, false)));
        }));
      }
    }

    public ICommand NetworkOptimizationCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.BusyContent = Resources.MSS_Client_NetworkOptimizationInProgress;
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            try
            {
              GMMMinomatConfigurator instance = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
              instance.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
              GMMMinomatConfiguratorResult gmmConfiguratorResult = instance.NetworkOptimization(this._selectedMaster.Entity as MinomatSerializableDTO);
              if (gmmConfiguratorResult.IsSuccess)
              {
                Application.Current.Dispatcher.Invoke((Action) (() =>
                {
                  this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
                  this.LastMinomatMasterStartedOn = Resources.NetworkSetup_LastStartOn + " " + (object) DateTime.Now;
                }));
                ISession session = this._repositoryFactory.GetSession();
                session.BeginTransaction();
                IRepository<Minomat> repository = this._repositoryFactory.GetRepository<Minomat>();
                Minomat minomatToUpdate = repository.FirstOrDefault((Expression<Func<Minomat, bool>>) (item => !item.IsDeactivated && item.Id == (this._selectedMaster.Entity as MinomatSerializableDTO).Id));
                MinomatRadioDetails entity = this._minomatRadioDetailsRepository.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == minomatToUpdate.Id));
                int num;
                if (minomatToUpdate != null && entity != null)
                {
                  MinomatStatusNetworkEnum? statusNetwork = entity.StatusNetwork;
                  MinomatStatusNetworkEnum statusNetworkEnum = MinomatStatusNetworkEnum.SetupStarted;
                  num = statusNetwork.GetValueOrDefault() == statusNetworkEnum ? (statusNetwork.HasValue ? 1 : 0) : 0;
                }
                else
                  num = 0;
                if (num != 0)
                {
                  minomatToUpdate.Status = StatusMinomatEnum.NetworkOptimizationStarted.ToString();
                  repository.TransactionalUpdate(minomatToUpdate);
                  entity.StatusNetwork = new MinomatStatusNetworkEnum?(MinomatStatusNetworkEnum.NetworkOptimization);
                  this._minomatRadioDetailsRepository.TransactionalUpdate(entity);
                }
                session.Transaction.Commit();
                Application.Current.Dispatcher.Invoke((Action) (() => this.OnRequestClose(true)));
              }
              else
                Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, gmmConfiguratorResult.Message, false)));
              this.ShowProgressCircle = false;
            }
            catch (Exception ex)
            {
              Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
            }
            finally
            {
              this.ShowProgressCircle = false;
            }
          }));
        }));
      }
    }

    public StructureNodeDTO SelectedMaster => this._selectedMaster;

    public ObservableCollection<NetworkSetupSlaveInfo> SlavesList => this._slavesList;

    public string Title
    {
      get => this._title;
      set
      {
        this._title = value;
        this.OnPropertyChanged(nameof (Title));
      }
    }

    public string BusyContent
    {
      get => this._busyContent;
      set
      {
        this._busyContent = value;
        this.OnPropertyChanged(nameof (BusyContent));
      }
    }

    public bool ShowProgressCircle
    {
      get => this._showProgressCircle;
      set
      {
        this._showProgressCircle = value;
        this.OnPropertyChanged(nameof (ShowProgressCircle));
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public string LastMinomatMasterStartedOn
    {
      get => this._lastMinomatMasterStartedOn;
      set
      {
        this._lastMinomatMasterStartedOn = value;
        this.OnPropertyChanged(nameof (LastMinomatMasterStartedOn));
      }
    }

    public string FixedNetworkSetup_GSMStatus
    {
      get => this._fixedNetworkSetup_GSMStatus;
      set
      {
        this._fixedNetworkSetup_GSMStatus = value;
        this.OnPropertyChanged(nameof (FixedNetworkSetup_GSMStatus));
      }
    }

    public DateTime? FixedNetworkSetup_GSMStatusDate
    {
      get => this._fixedNetworkSetup_GSMStatusDate;
      set
      {
        this._fixedNetworkSetup_GSMStatusDate = value;
        this.OnPropertyChanged(nameof (FixedNetworkSetup_GSMStatusDate));
      }
    }

    public bool IsStartMasterEnabled
    {
      get => this._isStartMasterEnabled;
      set
      {
        this._isStartMasterEnabled = value;
        this.OnPropertyChanged(nameof (IsStartMasterEnabled));
      }
    }

    public DateTime? LastStartOn
    {
      get => this._lastStartOn;
      set
      {
        this._lastStartOn = value;
        this.OnPropertyChanged(nameof (LastStartOn));
      }
    }

    public DateTime? MinomatMasterLastStartOn
    {
      get => this._minomatMasterLastStartOn;
      set
      {
        this._minomatMasterLastStartOn = value;
        this.OnPropertyChanged(nameof (MinomatMasterLastStartOn));
      }
    }

    public bool IsNetworkOptimizationEnabled
    {
      get => this._isNetworkOptimizationEnabled;
      set
      {
        this._isNetworkOptimizationEnabled = value;
        this.OnPropertyChanged(nameof (IsNetworkOptimizationEnabled));
      }
    }

    private void InitSlavesList()
    {
      this._slavesList = new ObservableCollection<NetworkSetupSlaveInfo>();
      List<Guid?> slaveIds = this._selectedMaster.SubNodes.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "MinomatSlave")).Select<StructureNodeDTO, Guid?>((Func<StructureNodeDTO, Guid?>) (item => !(item.Entity is MinomatSerializableDTO entity) ? new Guid?() : new Guid?(entity.Id))).ToList<Guid?>();
      List<MinomatRadioDetails> list = this._repositoryFactory.GetRepository<MinomatRadioDetails>().Where((Expression<Func<MinomatRadioDetails, bool>>) (item => slaveIds.Contains((Guid?) item.Minomat.Id))).ToList<MinomatRadioDetails>();
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) this._selectedMaster.SubNodes)
      {
        StructureNodeDTO subnode = subNode;
        if (subnode.NodeType.Name == "MinomatSlave")
        {
          NetworkSetupSlaveInfo networkSetupSlaveInfo = new NetworkSetupSlaveInfo()
          {
            Slave = subnode,
            HasErrors = new bool?()
          };
          MinomatRadioDetails minomatRadioDetails = list.LastOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == ((MinomatSerializableDTO) subnode.Entity).Id));
          if (minomatRadioDetails != null)
          {
            networkSetupSlaveInfo.NodeId = minomatRadioDetails.NodeId;
            networkSetupSlaveInfo.LastStartOn = minomatRadioDetails.LastStartOn;
            networkSetupSlaveInfo.LastRegisteredOn = minomatRadioDetails.LastRegisteredOn;
          }
          networkSetupSlaveInfo.ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-yellow.png";
          this._slavesList.Add(networkSetupSlaveInfo);
        }
      }
    }

    private bool CanMasterBeStarted()
    {
      List<Guid?> slavesIds = this._slavesList.Select<NetworkSetupSlaveInfo, Guid?>((Func<NetworkSetupSlaveInfo, Guid?>) (item => !(item.Slave.Entity is MinomatSerializableDTO entity) ? new Guid?() : new Guid?(entity.Id))).ToList<Guid?>();
      int num = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => slavesIds.Contains((Guid?) item.Minomat.Id) && ((int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.Registered || (int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.Received || (int?) item.StatusNetwork == (int?) MinomatStatusNetworkEnum.SetupStarted))).Count<MinomatRadioDetails>();
      return slavesIds.Count == 0 || slavesIds.Count == num;
    }
  }
}


--- OrderMessagesViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.OrderMessagesViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Core.Model.Orders;
using MVVM.ViewModel;
using System.Collections.Generic;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class OrderMessagesViewModel : ViewModelBase
  {
    private List<OrderMessage> _orderMessages;

    public OrderMessagesViewModel(List<OrderMessage> orderMessages)
    {
      this._orderMessages = orderMessages;
    }

    public List<OrderMessage> OrderMessages
    {
      get => this._orderMessages;
      set
      {
        this._orderMessages = value;
        this.OnPropertyChanged(nameof (OrderMessages));
      }
    }
  }
}


--- OrdersViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.OrdersViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.GMMWrapper;
using MSS.Business.Modules.OrdersManagement;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Business.Utils;
using MSS.Core.Model.Meters;
using MSS.Core.Model.MSSClient;
using MSS.Core.Model.Orders;
using MSS.Core.Model.Structures;
using MSS.Core.Model.UsersManagement;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Orders;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.Meters;
using MSS_Client.ViewModel.Structures;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Windows;
using ZENNER;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class OrdersViewModel : ViewModelBase
  {
    private readonly IRepository<Order> _orderRepository;
    private readonly IUserRepository _userRepository;
    private readonly IRepository<StructureNodeLinks> _structureNodeLinksRepository;
    private readonly IRepository<StructureNode> _structureNodeRepository;
    private readonly IRepository<StructureNodeType> _structureNodeTypeRepository;
    private readonly IRepository<MeterReplacementHistory> _meterReplacementHistoryRepository;
    private readonly ISession _nhSession;
    private readonly IWindowFactory _windowFactory;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly UsersManager _userManager;
    private ApplicationTabsEnum _selectedTab;
    private bool _isInstallationTabSelected;
    private int _selectedIndex;
    private bool _isReadingTabSelected;
    private IEnumerable<OrderDTO> _getInstallationOrders;
    private IEnumerable<OrderDTO> _getReadingOrders;
    private OrderDTO _selectedOrder;
    private ObservableCollection<OrderDTO> _selectedOrders = new ObservableCollection<OrderDTO>();
    private OrderDTO _selectedReadingOrder;
    private string _pageSize = string.Empty;
    private ViewModelBase _messageUserControl;
    private bool _isBusy;
    private bool _installationOrderVisibility;
    private bool _createInstallationOrderVisibility;
    private bool _deleteInstallationOrderVisibility;
    private bool _editInstallationOrderVisibility;
    private bool _executeInstallationOrderVisibility;
    private bool _attachTestInstallationOrderVisibility;
    private bool _readingOrderVisibility;
    private bool _createReadingOrderVisibility;
    private bool _deleteReadingOrderVisibility;
    private bool _editReadingOrderVisibility;
    private bool _executeReadingOrderVisibility;
    private ViewModelBase _messageUserControlInstallationOrder;
    private ViewModelBase _messageUserControlReadingOrder;
    private string _importExport;

    public OrdersViewModel()
    {
    }

    public OrdersViewModel(IRepositoryFactory repositoryFactory, IWindowFactory windowFactory)
    {
      this.IsBusy = true;
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._orderRepository = repositoryFactory.GetRepository<Order>();
      this._userRepository = repositoryFactory.GetUserRepository();
      this._structureNodeLinksRepository = repositoryFactory.GetRepository<StructureNodeLinks>();
      this._structureNodeRepository = repositoryFactory.GetRepository<StructureNode>();
      this._structureNodeTypeRepository = repositoryFactory.GetRepository<StructureNodeType>();
      this._nhSession = repositoryFactory.GetSession();
      this._meterReplacementHistoryRepository = repositoryFactory.GetRepository<MeterReplacementHistory>();
      this._userManager = new UsersManager(this._repositoryFactory);
      this.InstallationOrderVisibility = this._userManager.HasRight(OperationEnum.InstallationOrderView.ToString());
      this.CreateInstallationOrderVisibility = this._userManager.HasRight(OperationEnum.InstallationOrderCreate.ToString());
      this.DeleteInstallationOrderVisibility = this._userManager.HasRight(OperationEnum.InstallationOrderDelete.ToString());
      this.EditInstallationOrderVisibility = this._userManager.HasRight(OperationEnum.InstallationOrderEdit.ToString());
      this.ExecuteInstallationOrderVisibility = this._userManager.HasRight(OperationEnum.InstallationOrderExecute.ToString()) || this._userManager.HasRight(OperationEnum.ExecuteAnyOrder.ToString());
      UsersManager userManager1 = this._userManager;
      OperationEnum operationEnum = OperationEnum.InstallationOrderAttachTest;
      string operation1 = operationEnum.ToString();
      this.AttachTestInstallationOrderVisibility = userManager1.HasRight(operation1);
      UsersManager userManager2 = this._userManager;
      operationEnum = OperationEnum.UnlockOrder;
      string operation2 = operationEnum.ToString();
      this.UnlockOrderVisibility = userManager2.HasRight(operation2);
      UsersManager userManager3 = this._userManager;
      operationEnum = OperationEnum.ReadingOrderView;
      string operation3 = operationEnum.ToString();
      this.ReadingOrderVisibility = userManager3.HasRight(operation3);
      UsersManager userManager4 = this._userManager;
      operationEnum = OperationEnum.ReadingOrderCreate;
      string operation4 = operationEnum.ToString();
      this.CreateReadingOrderVisibility = userManager4.HasRight(operation4);
      UsersManager userManager5 = this._userManager;
      operationEnum = OperationEnum.ReadingOrderEdit;
      string operation5 = operationEnum.ToString();
      this.EditReadingOrderVisibility = userManager5.HasRight(operation5);
      UsersManager userManager6 = this._userManager;
      operationEnum = OperationEnum.ReadingOrderDelete;
      string operation6 = operationEnum.ToString();
      this.DeleteReadingOrderVisibility = userManager6.HasRight(operation6);
      UsersManager userManager7 = this._userManager;
      operationEnum = OperationEnum.ReadingOrderExecute;
      string operation7 = operationEnum.ToString();
      int num;
      if (!userManager7.HasRight(operation7))
      {
        UsersManager userManager8 = this._userManager;
        operationEnum = OperationEnum.ExecuteAnyOrder;
        string operation8 = operationEnum.ToString();
        num = userManager8.HasRight(operation8) ? 1 : 0;
      }
      else
        num = 1;
      this.ExecuteReadingOrderVisibility = num != 0;
      this.PageSize = MSS.Business.Utils.AppContext.Current.GetParameterValue<string>(nameof (PageSize));
      EventPublisher.Register<ActionSearch<OrderDTO>>(new Action<ActionSearch<OrderDTO>>(this.RefreshOrdersAfterSearch));
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(this.CreateMessage));
      EventPublisher.Register<SelectedTabChanged>((Action<SelectedTabChanged>) (changed => this.SelectedTab = changed.SelectedTab));
      EventPublisher.Register<StructureUpdated>(new Action<StructureUpdated>(this.RefreshStructure));
      EventPublisher.Register<SelectedTabValue>(new Action<SelectedTabValue>(this.SetTab));
      GmmInterface.DeviceManager.SelectedFilter = (string) null;
      if (this.InstallationOrderVisibility)
      {
        this.IsInstallationTabSelected = true;
        this.SelectedIndex = 0;
      }
      else
      {
        this.IsReadingTabSelected = true;
        this.SelectedIndex = 1;
      }
      this.InitializeOrders();
    }

    private void SetTab(SelectedTabValue selectedTabValue)
    {
      switch (selectedTabValue.Tab)
      {
        case ApplicationTabsEnum.ReadingOrders:
          this.SelectedIndex = 1;
          break;
        case ApplicationTabsEnum.InstallationOrders:
          this.SelectedIndex = 0;
          break;
      }
    }

    private void RefreshStructure(StructureUpdated update)
    {
      if (!(update.Guid != Guid.Empty))
        return;
      this._repositoryFactory.GetRepository<StructureNode>().Refresh((object) update.Guid);
      if (update.EntityId != Guid.Empty)
      {
        switch (update.EntityType)
        {
          case StructureNodeTypeEnum.Location:
            this._repositoryFactory.GetRepository<Location>().Refresh((object) update.EntityId);
            break;
          case StructureNodeTypeEnum.Tenant:
            this._repositoryFactory.GetRepository<Tenant>().Refresh((object) update.EntityId);
            break;
          case StructureNodeTypeEnum.Meter:
          case StructureNodeTypeEnum.RadioMeter:
            this._repositoryFactory.GetRepository<Meter>().Refresh((object) update.EntityId);
            break;
        }
      }
    }

    public async void InitializeOrders()
    {
      await Task.Run((Action) (() =>
      {
        Mapper.CreateMap<Order, OrderDTO>();
        Mapper.CreateMap<OrderDTO, Order>();
        OrdersManager ordersManager = new OrdersManager(this._repositoryFactory);
        this.GetReadingOrders = ordersManager.GetReadingOrdersDTO();
        this.GetInstallationOrders = ordersManager.GetInstallationOrdersDTO();
      }));
      this.IsBusy = false;
    }

    private void SetSelectedTab()
    {
      switch (this.SelectedTab)
      {
        case ApplicationTabsEnum.ReadingOrders:
          this._isReadingTabSelected = true;
          break;
        case ApplicationTabsEnum.InstallationOrders:
          this._isInstallationTabSelected = true;
          break;
      }
    }

    public ApplicationTabsEnum SelectedTab
    {
      get => this._selectedTab;
      set
      {
        this._selectedTab = value;
        this.SetSelectedTab();
      }
    }

    private void CreateMessage(ActionSyncFinished messageFinished)
    {
      ViewModelBase viewModelBase = (ViewModelBase) null;
      switch (messageFinished.Message.MessageType)
      {
        case MessageTypeEnum.Success:
          viewModelBase = MessageHandlingManager.ShowSuccessMessage(messageFinished.Message.MessageText);
          break;
        case MessageTypeEnum.Warning:
          viewModelBase = MessageHandlingManager.ShowWarningMessage(messageFinished.Message.MessageText);
          break;
      }
      if (this.IsInstallationTabSelected)
        this.MessageUserControlInstallationOrder = viewModelBase;
      if (!this.IsReadingTabSelected)
        return;
      this.MessageUserControlReadingOrder = viewModelBase;
    }

    private OrdersManager GetOrdersManagerInstance() => new OrdersManager(this._repositoryFactory);

    private StructuresManager GetStructureManagerInsance()
    {
      return new StructuresManager(this._repositoryFactory);
    }

    public bool IsInstallationTabSelected
    {
      get => this._isInstallationTabSelected;
      set
      {
        this._isInstallationTabSelected = value;
        if (!this._isInstallationTabSelected)
          return;
        EventPublisher.Publish<SelectedTabChanged>(new SelectedTabChanged()
        {
          SelectedTab = ApplicationTabsEnum.InstallationOrders
        }, (IViewModel) this);
      }
    }

    public int SelectedIndex
    {
      get => this._selectedIndex;
      set
      {
        this._selectedIndex = value;
        this.OnPropertyChanged(nameof (SelectedIndex));
      }
    }

    public bool IsReadingTabSelected
    {
      get => this._isReadingTabSelected;
      set
      {
        this._isReadingTabSelected = value;
        if (!this._isReadingTabSelected)
          return;
        EventPublisher.Publish<SelectedTabChanged>(new SelectedTabChanged()
        {
          SelectedTab = ApplicationTabsEnum.ReadingOrders
        }, (IViewModel) this);
      }
    }

    public IEnumerable<OrderDTO> GetInstallationOrders
    {
      get => this._getInstallationOrders;
      set
      {
        this._getInstallationOrders = value;
        this.OnPropertyChanged(nameof (GetInstallationOrders));
      }
    }

    public IEnumerable<OrderDTO> GetReadingOrders
    {
      get => this._getReadingOrders;
      set
      {
        this._getReadingOrders = value;
        this.OnPropertyChanged(nameof (GetReadingOrders));
      }
    }

    public OrderDTO SelectedOrder
    {
      get => this._selectedOrder;
      set
      {
        this._selectedOrder = value;
        this.OnPropertyChanged("ExecutableOrder");
        this.OnPropertyChanged("ExecutableInstallationOrder");
        this.OnPropertyChanged("EditableInstallationOrder");
        this.OnPropertyChanged("EditableReadingOrder");
        this.OnPropertyChanged("RemovableInstallationOrder");
        this.OnPropertyChanged("RemovableReadingOrder");
        if (this.SelectedTab == ApplicationTabsEnum.InstallationOrders)
          this.OnPropertyChanged("UnlockableInstallationOrder");
        else
          this.OnPropertyChanged("UnlockableReadingOrder");
      }
    }

    public ObservableCollection<OrderDTO> SelectedOrders
    {
      get => this._selectedOrders;
      set
      {
        this._selectedOrders = value;
        this.OnPropertyChanged(nameof (SelectedOrders));
      }
    }

    public OrderDTO SelectedReadingOrder
    {
      get => this._selectedReadingOrder;
      set
      {
        this._selectedReadingOrder = value;
        this.OnPropertyChanged("ExecutableOrder");
        this.OnPropertyChanged("ExecutableInstallationOrder");
        this.OnPropertyChanged("EditableInstallationOrder");
        this.OnPropertyChanged("EditableReadingOrder");
        this.OnPropertyChanged("RemovableInstallationOrder");
        this.OnPropertyChanged("RemovableReadingOrder");
        if (this.SelectedTab == ApplicationTabsEnum.InstallationOrders)
          this.OnPropertyChanged("UnlockableInstallationOrder");
        else
          this.OnPropertyChanged("UnlockableReadingOrder");
      }
    }

    public bool ExecutableInstallationOrder
    {
      get
      {
        if (this.SelectedOrder != null && !this.SelectedOrder.Exported && this.SelectedOrder.UserIds != null)
        {
          List<User> list = this.SelectedOrder.UserIds.Select<Guid, User>((Func<Guid, User>) (userID => this._userRepository.GetById((object) userID))).ToList<User>();
          StructureTypeEnum? structureType = this.SelectedOrder.StructureType;
          StructureTypeEnum structureTypeEnum1 = StructureTypeEnum.Fixed;
          if ((structureType.GetValueOrDefault() == structureTypeEnum1 ? (structureType.HasValue ? 1 : 0) : 0) == 0)
          {
            structureType = this.SelectedOrder.StructureType;
            StructureTypeEnum structureTypeEnum2 = StructureTypeEnum.Physical;
            if ((structureType.GetValueOrDefault() == structureTypeEnum2 ? (structureType.HasValue ? 1 : 0) : 0) == 0)
              goto label_5;
          }
          int num;
          if (this.SelectedOrder.Status == StatusOrderEnum.Dated || this.SelectedOrder.Status == StatusOrderEnum.InProgress)
          {
            num = list.Select<User, Guid>((Func<User, Guid>) (l => l.Id)).ToList<Guid>().Contains(MSS.Business.Utils.AppContext.Current.LoggedUser.Id) ? 1 : (this._userManager.HasRight(OperationEnum.ExecuteAnyOrder.ToString()) ? 1 : 0);
            goto label_6;
          }
label_5:
          num = 0;
label_6:
          if (num != 0)
            return true;
        }
        return false;
      }
    }

    public bool ExecutableOrder
    {
      get
      {
        if (this.SelectedReadingOrder != null && !this.SelectedReadingOrder.Exported && this.SelectedReadingOrder.UserIds != null)
        {
          List<User> list = this.SelectedReadingOrder.UserIds.Select<Guid, User>((Func<Guid, User>) (userID => this._userRepository.GetById((object) userID))).ToList<User>();
          StructureTypeEnum? structureType = this.SelectedReadingOrder.StructureType;
          StructureTypeEnum structureTypeEnum1 = StructureTypeEnum.Fixed;
          if ((structureType.GetValueOrDefault() == structureTypeEnum1 ? (structureType.HasValue ? 1 : 0) : 0) == 0)
          {
            structureType = this.SelectedReadingOrder.StructureType;
            StructureTypeEnum structureTypeEnum2 = StructureTypeEnum.Physical;
            if ((structureType.GetValueOrDefault() == structureTypeEnum2 ? (structureType.HasValue ? 1 : 0) : 0) == 0)
              goto label_5;
          }
          int num;
          if (this.SelectedReadingOrder.Status == StatusOrderEnum.Dated || this.SelectedReadingOrder.Status == StatusOrderEnum.InProgress)
          {
            num = list.Select<User, Guid>((Func<User, Guid>) (l => l.Id)).ToList<Guid>().Contains(MSS.Business.Utils.AppContext.Current.LoggedUser.Id) ? 1 : (this._userManager.HasRight(OperationEnum.ExecuteAnyOrder.ToString()) ? 1 : 0);
            goto label_6;
          }
label_5:
          num = 0;
label_6:
          if (num != 0)
            return true;
        }
        return false;
      }
    }

    public bool EditableInstallationOrder
    {
      get
      {
        if (this.SelectedOrder != null)
        {
          Guid? lockedBy = this.SelectedOrder.LockedBy;
          Guid empty = Guid.Empty;
          int num;
          if ((lockedBy.HasValue ? (lockedBy.HasValue ? (lockedBy.GetValueOrDefault() == empty ? 1 : 0) : 1) : 0) == 0)
          {
            lockedBy = this.SelectedOrder.LockedBy;
            if (lockedBy.HasValue)
            {
              num = 0;
              goto label_5;
            }
          }
          num = this.SelectedOrder.Status != StatusOrderEnum.Closed ? 1 : 0;
label_5:
          if (num != 0)
            return true;
        }
        return false;
      }
    }

    public bool EditableReadingOrder
    {
      get
      {
        if (this.SelectedReadingOrder != null)
        {
          Guid? lockedBy = this.SelectedReadingOrder.LockedBy;
          Guid empty = Guid.Empty;
          int num;
          if ((lockedBy.HasValue ? (lockedBy.HasValue ? (lockedBy.GetValueOrDefault() == empty ? 1 : 0) : 1) : 0) == 0)
          {
            lockedBy = this.SelectedReadingOrder.LockedBy;
            if (lockedBy.HasValue)
            {
              num = 0;
              goto label_5;
            }
          }
          num = this.SelectedReadingOrder.Status != StatusOrderEnum.Closed ? 1 : 0;
label_5:
          if (num != 0)
            return true;
        }
        return false;
      }
    }

    public bool RemovableInstallationOrder
    {
      get
      {
        if (this.SelectedOrder != null)
        {
          Guid? lockedBy = this.SelectedOrder.LockedBy;
          Guid empty = Guid.Empty;
          int num;
          if ((lockedBy.HasValue ? (lockedBy.HasValue ? (lockedBy.GetValueOrDefault() == empty ? 1 : 0) : 1) : 0) == 0)
          {
            lockedBy = this.SelectedOrder.LockedBy;
            num = !lockedBy.HasValue ? 1 : 0;
          }
          else
            num = 1;
          if (num != 0)
            return true;
        }
        return false;
      }
    }

    public bool RemovableReadingOrder
    {
      get
      {
        if (this.SelectedReadingOrder != null)
        {
          Guid? lockedBy = this.SelectedReadingOrder.LockedBy;
          Guid empty = Guid.Empty;
          int num;
          if ((lockedBy.HasValue ? (lockedBy.HasValue ? (lockedBy.GetValueOrDefault() == empty ? 1 : 0) : 1) : 0) == 0)
          {
            lockedBy = this.SelectedReadingOrder.LockedBy;
            num = !lockedBy.HasValue ? 1 : 0;
          }
          else
            num = 1;
          if (num != 0)
            return true;
        }
        return false;
      }
    }

    public string PageSize
    {
      get => this._pageSize;
      set
      {
        this._pageSize = value;
        this.OnPropertyChanged(nameof (PageSize));
      }
    }

    public bool UnlockableInstallationOrder
    {
      get
      {
        if (this.SelectedOrder == null)
          return false;
        Guid? lockedBy = this.SelectedOrder.LockedBy;
        Guid empty = Guid.Empty;
        int num;
        if ((lockedBy.HasValue ? (lockedBy.HasValue ? (lockedBy.GetValueOrDefault() == empty ? 1 : 0) : 1) : 0) == 0)
        {
          lockedBy = this.SelectedOrder.LockedBy;
          num = !lockedBy.HasValue ? 1 : 0;
        }
        else
          num = 1;
        return num == 0;
      }
    }

    public bool UnlockableReadingOrder
    {
      get
      {
        if (this.SelectedReadingOrder == null)
          return false;
        Guid? lockedBy = this.SelectedReadingOrder.LockedBy;
        Guid empty = Guid.Empty;
        int num;
        if ((lockedBy.HasValue ? (lockedBy.HasValue ? (lockedBy.GetValueOrDefault() == empty ? 1 : 0) : 1) : 0) == 0)
        {
          lockedBy = this.SelectedReadingOrder.LockedBy;
          num = !lockedBy.HasValue ? 1 : 0;
        }
        else
          num = 1;
        return num == 0;
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        if (this._isBusy == value)
          return;
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    public bool InstallationOrderVisibility
    {
      get => this._installationOrderVisibility;
      set
      {
        this._installationOrderVisibility = value;
        this.OnPropertyChanged(nameof (InstallationOrderVisibility));
      }
    }

    public bool CreateInstallationOrderVisibility
    {
      get => this._createInstallationOrderVisibility;
      set
      {
        this._createInstallationOrderVisibility = value;
        this.OnPropertyChanged(nameof (CreateInstallationOrderVisibility));
      }
    }

    public bool DeleteInstallationOrderVisibility
    {
      get => this._deleteInstallationOrderVisibility;
      set
      {
        this._deleteInstallationOrderVisibility = value;
        this.OnPropertyChanged(nameof (DeleteInstallationOrderVisibility));
      }
    }

    public bool EditInstallationOrderVisibility
    {
      get => this._editInstallationOrderVisibility;
      set
      {
        this._editInstallationOrderVisibility = value;
        this.OnPropertyChanged(nameof (EditInstallationOrderVisibility));
      }
    }

    public bool ExecuteInstallationOrderVisibility
    {
      get => this._executeInstallationOrderVisibility;
      set
      {
        this._executeInstallationOrderVisibility = value;
        this.OnPropertyChanged(nameof (ExecuteInstallationOrderVisibility));
      }
    }

    public bool AttachTestInstallationOrderVisibility
    {
      get => this._attachTestInstallationOrderVisibility;
      set
      {
        this._attachTestInstallationOrderVisibility = value;
        this.OnPropertyChanged(nameof (AttachTestInstallationOrderVisibility));
      }
    }

    public bool UnlockOrderVisibility { get; set; }

    public bool ReadingOrderVisibility
    {
      get => this._readingOrderVisibility;
      set
      {
        this._readingOrderVisibility = value;
        this.OnPropertyChanged(nameof (ReadingOrderVisibility));
      }
    }

    public bool CreateReadingOrderVisibility
    {
      get => this._createReadingOrderVisibility;
      set
      {
        this._createReadingOrderVisibility = value;
        this.OnPropertyChanged(nameof (CreateReadingOrderVisibility));
      }
    }

    public bool DeleteReadingOrderVisibility
    {
      get => this._deleteReadingOrderVisibility;
      set
      {
        this._deleteReadingOrderVisibility = value;
        this.OnPropertyChanged(nameof (DeleteReadingOrderVisibility));
      }
    }

    public bool EditReadingOrderVisibility
    {
      get => this._editReadingOrderVisibility;
      set
      {
        this._editReadingOrderVisibility = value;
        this.OnPropertyChanged(nameof (EditReadingOrderVisibility));
      }
    }

    public bool ExecuteReadingOrderVisibility
    {
      get => this._executeReadingOrderVisibility;
      set
      {
        this._executeReadingOrderVisibility = value;
        this.OnPropertyChanged(nameof (ExecuteReadingOrderVisibility));
      }
    }

    public System.Windows.Input.ICommand CreateInstallationOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateEditOrderViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) null), (IParameter) new ConstructorArgument("orderType", (object) OrderTypeEnum.InstallationOrder)));
          if (newModalDialog.HasValue && newModalDialog.Value)
          {
            this.GetInstallationOrders = this.GetOrdersManagerInstance().GetInstallationOrdersDTO();
            this.MessageUserControlInstallationOrder = MessageHandlingManager.ShowSuccessMessage(CultureResources.GetValue("MSS_Client_SuccessMessage"));
          }
          else
            this.MessageUserControlInstallationOrder = MessageHandlingManager.ShowWarningMessage(CultureResources.GetValue("MSS_Client_OperationCancelledMessage"));
        }));
      }
    }

    public System.Windows.Input.ICommand EditInstallationOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!this.EditInstallationOrderVisibility)
            return;
          OrderDTO orderDto = parameter as OrderDTO;
          if (this.EditableInstallationOrder)
          {
            bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateEditOrderViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) orderDto), (IParameter) new ConstructorArgument("orderType", (object) OrderTypeEnum.InstallationOrder)));
            if (newModalDialog.HasValue && newModalDialog.Value)
            {
              this._orderRepository.Refresh((object) orderDto.Id);
              this.MessageUserControlInstallationOrder = MessageHandlingManager.ShowSuccessMessage(CultureResources.GetValue("MSS_Client_SuccessMessage"));
            }
            else
              this.MessageUserControlInstallationOrder = MessageHandlingManager.ShowWarningMessage(CultureResources.GetValue("MSS_Client_OperationCancelledMessage"));
            this.GetInstallationOrders = this.GetOrdersManagerInstance().GetInstallationOrdersDTO();
          }
          else
            MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Structure_Warning_Order_Not_Editable, false);
        }));
      }
    }

    public System.Windows.Input.ICommand DeleteInstallationOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          List<OrderDTO> list = (parameter as ObservableCollection<object>).Cast<OrderDTO>().ToList<OrderDTO>();
          string str = CultureResources.GetValue("MSS_Client_Orders_DeleteInstallationOrder_Title");
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<DeleteSingleOrderViewModel>((IParameter) new ConstructorArgument("selectedOrders", (object) list), (IParameter) new ConstructorArgument("deleteOrderTitle", (object) str)));
          if (newModalDialog.HasValue && newModalDialog.Value)
          {
            list.ForEach((Action<OrderDTO>) (x => this._orderRepository.Refresh((object) x.Id)));
            this.MessageUserControlInstallationOrder = MessageHandlingManager.ShowSuccessMessage(CultureResources.GetValue("MSS_Client_SuccessMessage"));
          }
          else
            this.MessageUserControlInstallationOrder = MessageHandlingManager.ShowWarningMessage(CultureResources.GetValue("MSS_Client_OperationCancelledMessage"));
          this.GetInstallationOrders = this.GetOrdersManagerInstance().GetInstallationOrdersDTO();
        }));
      }
    }

    public System.Windows.Input.ICommand ExecuteInstallationOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new AsyncCommand<object>((Func<object, Task<object>>) (async t =>
        {
          this.IsBusy = true;
          await Task.Run((Action) (() => this.IsFixedNetworkScenario().If<bool>((Func<bool, bool>) (_ => _), (Action<bool>) (_ => this.ExecuteFixedStructure(t)), (Action<bool>) (_ => this.ExecutePsychicalStructure(t)))));
          this.IsBusy = false;
          if (this._selectedOrder != null)
          {
            this._orderRepository.Refresh((object) this._selectedOrder.Id);
            this.GetInstallationOrders = this.GetOrdersManagerInstance().GetInstallationOrdersDTO();
          }
          return (object) null;
        }));
      }
    }

    public System.Windows.Input.ICommand UnlockInstallationOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is OrderDTO orderDto2))
            return;
          orderDto2.LockedBy = new Guid?();
          this.GetOrdersManagerInstance().EditOrder(orderDto2, new bool?(false));
          this.UnlockStructureNodes(Mapper.Map<OrderDTO, Order>(orderDto2));
          this.GetInstallationOrders = this.GetOrdersManagerInstance().GetInstallationOrdersDTO();
        }));
      }
    }

    private void ExecuteFixedStructure(object parameter)
    {
      OrderDTO selectedOrder = parameter.SafeCast<OrderDTO>();
      Guid rootStructureNodeId = selectedOrder.RootStructureNodeId;
      IList<StructureNodeType> all1 = this._repositoryFactory.GetRepository<StructureNodeType>().GetAll();
      IList<MeterReplacementHistory> all2 = this._repositoryFactory.GetRepository<MeterReplacementHistory>().GetAll();
      ObservableCollection<StructureNodeDTO> structureNodeDTO = new StructuresManager(this._repositoryFactory).GetNodeCollectionWithChildren(this._repositoryFactory.GetStructureNodeRepository(), new StructureTypeEnum?(StructureTypeEnum.Fixed), all1, all2, rootStructureNodeId);
      Application.Current.Dispatcher.Invoke((Action) (() => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<ExecuteInstallationOrderViewModel>("ExecuteInstallationOrderViewModel", (IParameter) new ConstructorArgument("orderNumber", (object) selectedOrder.InstallationNumber), (IParameter) new ConstructorArgument("selectedNode", (object) structureNodeDTO.First<StructureNodeDTO>())))));
    }

    private void ExecutePsychicalStructure(object parameter)
    {
      if (!(parameter is OrderDTO orderDto))
        return;
      IEnumerable<StructureNodeDTO> nodeDtoForRootNode = OrdersHelper.GetStructureNodeDTOForRootNode(orderDto.RootStructureNodeId, this._structureNodeLinksRepository, this._structureNodeRepository, this._structureNodeTypeRepository, this._nhSession, (IList<MeterReplacementHistorySerializableDTO>) StructuresHelper.GetMeterReplacementHistorySerializableDTO(this._meterReplacementHistoryRepository.GetAll()));
      bool? isOkButton = new bool?(false);
      StructureTypeEnum? structureType = orderDto.StructureType;
      if (structureType.HasValue)
      {
        switch (structureType.GetValueOrDefault())
        {
          case StructureTypeEnum.Physical:
            StructureNodeDTO selectedNode = nodeDtoForRootNode.FirstOrDefault<StructureNodeDTO>();
            Application.Current.Dispatcher.Invoke((Action) (() =>
            {
              isOkButton = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditPhysicalStructureViewModel>((IParameter) new ConstructorArgument("selectedNode", (object) selectedNode), (IParameter) new ConstructorArgument("isExecuteInstallation", (object) true), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) false)));
              if (isOkButton.HasValue && isOkButton.Value)
                this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
              else
                this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
            }));
            break;
          case StructureTypeEnum.Fixed:
            StructureNodeDTO selectedFixedNode = nodeDtoForRootNode.First<StructureNodeDTO>();
            Application.Current.Dispatcher.Invoke((Action) (() =>
            {
              isOkButton = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditFixedStructureViewModel>("EditFixedStructureForOrderViewModel", (IParameter) new ConstructorArgument("selectedNode", (object) selectedFixedNode), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) false), (IParameter) new ConstructorArgument("isExecuteInstallation", (object) true), (IParameter) new ConstructorArgument("orderDTO", (object) this._selectedOrder)));
              if (isOkButton.HasValue && isOkButton.Value)
                this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_SuccessMessage);
              else
                this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
            }));
            break;
        }
      }
    }

    private Location GetLocationByOrder()
    {
      StructureNode byId = this._structureNodeRepository.GetById((object) this.SelectedOrder.RootStructureNodeId);
      return byId != null ? this._repositoryFactory.GetRepository<Location>().GetById((object) byId.EntityId) : (Location) null;
    }

    private bool IsFixedNetworkScenario()
    {
      StructureTypeEnum? structureType = this.SelectedOrder.StructureType;
      StructureTypeEnum structureTypeEnum = StructureTypeEnum.Fixed;
      int num;
      if ((structureType.GetValueOrDefault() == structureTypeEnum ? (structureType.HasValue ? 1 : 0) : 0) != 0)
      {
        Location locationByOrder1 = this.GetLocationByOrder();
        if ((locationByOrder1 != null ? (locationByOrder1.Generation == GenerationEnum.Radio3 ? 1 : 0) : 0) != 0)
        {
          Location locationByOrder2 = this.GetLocationByOrder();
          if ((locationByOrder2 != null ? (locationByOrder2.Scenario.Code == 0 ? 1 : 0) : 0) == 0)
          {
            Location locationByOrder3 = this.GetLocationByOrder();
            if ((locationByOrder3 != null ? (locationByOrder3.Scenario.Code == 1 ? 1 : 0) : 0) == 0)
            {
              Location locationByOrder4 = this.GetLocationByOrder();
              num = locationByOrder4 != null ? (locationByOrder4.Scenario.Code == 4 ? 1 : 0) : 0;
              goto label_7;
            }
          }
          num = 1;
          goto label_7;
        }
      }
      num = 0;
label_7:
      return num != 0;
    }

    private bool ValidateOrder(OrderDTO selectedOrder)
    {
      if (selectedOrder.RootStructureNodeId != Guid.Empty)
      {
        Guid structureRootNodeId = selectedOrder.RootStructureNodeId;
        List<Guid> nodeIDs = StructuresHelper.GetNodeIdList(StructuresHelper.GetStructureNodesForRootNode(this._structureNodeLinksRepository, this._structureNodeLinksRepository.FirstOrDefault((Expression<Func<StructureNodeLinks, bool>>) (s => s.Node.Id == structureRootNodeId)).Node.Id).Where<StructureNodeLinks>((Func<StructureNodeLinks, bool>) (s => !s.EndDate.HasValue)));
        IRepository<StructureNode> structureNodeRepository = this._structureNodeRepository;
        Expression<Func<StructureNode, bool>> predicate = (Expression<Func<StructureNode, bool>>) (s => nodeIDs.Contains(s.Id) && s.EndDate == new DateTime?());
        foreach (StructureNode structureNode in (IEnumerable<StructureNode>) structureNodeRepository.SearchFor(predicate))
        {
          if (!(structureNode.EntityId != Guid.Empty))
            return false;
          switch ((StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), structureNode.EntityName, true))
          {
            case StructureNodeTypeEnum.Location:
              object entity1 = (object) StructuresHelper.GetEntity<Location>(structureNode.EntityId, this._nhSession);
              if (!((Location) entity1).Validate<object>(entity1))
                return false;
              break;
            case StructureNodeTypeEnum.Tenant:
              object entity2 = (object) StructuresHelper.GetEntity<Tenant>(structureNode.EntityId, this._nhSession);
              if (!(entity2 as Tenant).Validate<object>(entity2))
                return false;
              break;
            case StructureNodeTypeEnum.Meter:
            case StructureNodeTypeEnum.RadioMeter:
              object entity3 = (object) StructuresHelper.GetEntity<Meter>(structureNode.EntityId, this._nhSession);
              if (!((Meter) entity3).Validate<object>(entity3))
                return false;
              break;
          }
        }
      }
      return true;
    }

    public System.Windows.Input.ICommand CreateReadingOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateEditOrderViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) null), (IParameter) new ConstructorArgument("orderType", (object) OrderTypeEnum.ReadingOrder)));
          if (newModalDialog.HasValue && newModalDialog.Value)
          {
            this.GetReadingOrders = this.GetOrdersManagerInstance().GetReadingOrdersDTO();
            this.MessageUserControlReadingOrder = MessageHandlingManager.ShowSuccessMessage(CultureResources.GetValue("MSS_Client_SuccessMessage"));
          }
          else
            this.MessageUserControlReadingOrder = MessageHandlingManager.ShowWarningMessage(CultureResources.GetValue("MSS_Client_OperationCancelledMessage"));
        }));
      }
    }

    public System.Windows.Input.ICommand EditReadingOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (this.EditableReadingOrder)
          {
            OrderDTO orderDto = parameter as OrderDTO;
            bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateEditOrderViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) orderDto), (IParameter) new ConstructorArgument("orderType", (object) OrderTypeEnum.ReadingOrder)));
            if (newModalDialog.HasValue && newModalDialog.Value)
            {
              this._orderRepository.Refresh((object) orderDto.Id);
              this.MessageUserControlReadingOrder = MessageHandlingManager.ShowSuccessMessage(CultureResources.GetValue("MSS_Client_SuccessMessage"));
            }
            else
              this.MessageUserControlReadingOrder = MessageHandlingManager.ShowWarningMessage(CultureResources.GetValue("MSS_Client_OperationCancelledMessage"));
            this.GetReadingOrders = this.GetOrdersManagerInstance().GetReadingOrdersDTO();
          }
          else
            MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Structure_Warning_Order_Not_Editable, false);
        }));
      }
    }

    public System.Windows.Input.ICommand DeleteReadingOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (parameter is ObservableCollection<object> source2)
          {
            List<OrderDTO> list = source2.Cast<OrderDTO>().ToList<OrderDTO>();
            string str = CultureResources.GetValue("MSS_Client_Orders_DeleteReadingOrder_Title");
            bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<DeleteSingleOrderViewModel>((IParameter) new ConstructorArgument("selectedOrders", (object) list), (IParameter) new ConstructorArgument("deleteOrderTitle", (object) str)));
            if (newModalDialog.HasValue && newModalDialog.Value)
            {
              list.ForEach((Action<OrderDTO>) (x => this._orderRepository.Refresh((object) x.Id)));
              this.MessageUserControlReadingOrder = MessageHandlingManager.ShowSuccessMessage(CultureResources.GetValue("MSS_Client_SuccessMessage"));
            }
            else
              this.MessageUserControlReadingOrder = MessageHandlingManager.ShowWarningMessage(CultureResources.GetValue("MSS_Client_OperationCancelledMessage"));
          }
          this.GetReadingOrders = this.GetOrdersManagerInstance().GetReadingOrdersDTO();
        }));
      }
    }

    public System.Windows.Input.ICommand ViewStructureCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          ViewModelBase viewModelBase = (ViewModelBase) null;
          if (parameter is OrderDTO orderDto2)
          {
            bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<StructureOrdersViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) orderDto2), (IParameter) new ConstructorArgument("orderType", (object) orderDto2.OrderType), (IParameter) new ConstructorArgument("viewMode", (object) true), (IParameter) new ConstructorArgument("selectedRootStructureNodeId", (object) Guid.Empty), (IParameter) new ConstructorArgument("orderDueDate", (object) orderDto2.DueDate)));
            viewModelBase = !newModalDialog.HasValue || !newModalDialog.Value ? MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue()) : MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
          }
          if (this.IsInstallationTabSelected)
            this.MessageUserControlInstallationOrder = viewModelBase;
          if (!this.IsReadingTabSelected)
            return;
          this.MessageUserControlReadingOrder = viewModelBase;
        }));
      }
    }

    public System.Windows.Input.ICommand ExecuteReadingOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          OrderDTO orderDto = parameter as OrderDTO;
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<ExecuteReadingOrderViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) orderDto), (IParameter) new ConstructorArgument("deviceManager", (object) new DeviceManagerWrapper())));
          GmmInterface.DeviceManager.SelectedFilter = (string) null;
          if (orderDto != null)
            this._orderRepository.Refresh((object) orderDto.Id);
          this.GetReadingOrders = this.GetOrdersManagerInstance().GetReadingOrdersDTO();
        }));
      }
    }

    public System.Windows.Input.ICommand UnlockReadingOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is OrderDTO orderDTO2))
            return;
          orderDTO2.LockedBy = new Guid?();
          this.GetOrdersManagerInstance().EditOrder(orderDTO2, new bool?(false));
          this.GetReadingOrders = this.GetOrdersManagerInstance().GetReadingOrdersDTO();
        }));
      }
    }

    private void UpdateLockedStructureNodes(
      IEnumerable<StructureNode> structureNodes,
      IEnumerable<StructureNodeLinks> structureNodeLinks)
    {
      this._nhSession.FlushMode = FlushMode.Commit;
      ITransaction transaction = this._nhSession.BeginTransaction();
      foreach (StructureNode structureNode in structureNodes)
        this.GetStructureManagerInsance().UpdateStructureNode(structureNode);
      foreach (StructureNodeLinks structureNodeLink in structureNodeLinks)
        this.GetStructureManagerInsance().UpdateStructureNodeLink(structureNodeLink);
      transaction.Commit();
    }

    private void UnlockStructureNodes(Order order)
    {
      Guid rootStructureNodeId = order.RootStructureNodeId;
      this.GetStructureManagerInsance().UnlockStructure(rootStructureNodeId);
    }

    public System.Windows.Input.ICommand ViewReadingValuesCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is OrderDTO orderDto2))
            return;
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<MeterReadingValuesViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) orderDto2)));
        }));
      }
    }

    public System.Windows.Input.ICommand PrintInstallationOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<PrintPreviewViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) this.SelectedOrder)))));
      }
    }

    public System.Windows.Input.ICommand PrintReadingOrderCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (parameter => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<PrintPreviewViewModel>((IParameter) new ConstructorArgument("selectedOrder", (object) this.SelectedReadingOrder)))));
      }
    }

    public ViewModelBase MessageUserControlInstallationOrder
    {
      get => this._messageUserControlInstallationOrder;
      set
      {
        this._messageUserControlInstallationOrder = value;
        this.OnPropertyChanged(nameof (MessageUserControlInstallationOrder));
      }
    }

    public ViewModelBase MessageUserControlReadingOrder
    {
      get => this._messageUserControlReadingOrder;
      set
      {
        this._messageUserControlReadingOrder = value;
        this.OnPropertyChanged(nameof (MessageUserControlReadingOrder));
      }
    }

    public string ImportExport
    {
      get => this._importExport;
      set
      {
        this._importExport = value;
        this.OnPropertyChanged(nameof (ImportExport));
      }
    }

    private void RefreshOrdersAfterSearch(ActionSearch<OrderDTO> update)
    {
      bool flag = update.Message == null;
      switch (update.SelectedTab)
      {
        case ApplicationTabsEnum.ReadingOrders:
          this._getReadingOrders = update.ObservableCollection.Count == 0 ? this.GetOrdersManagerInstance().GetReadingOrdersDTO() : (IEnumerable<OrderDTO>) update.ObservableCollection;
          this.OnPropertyChanged("GetReadingOrders");
          break;
        case ApplicationTabsEnum.InstallationOrders:
          this._getInstallationOrders = update.ObservableCollection.Count == 0 ? this.GetOrdersManagerInstance().GetInstallationOrdersDTO() : (IEnumerable<OrderDTO>) update.ObservableCollection;
          this.OnPropertyChanged("GetInstallationOrders");
          break;
      }
      if (flag)
        return;
      if (this.IsInstallationTabSelected)
        this.MessageUserControlInstallationOrder = MessageHandlingManager.ShowWarningMessage(update.Message.MessageText);
      if (!this.IsReadingTabSelected)
        return;
      this.MessageUserControlReadingOrder = MessageHandlingManager.ShowWarningMessage(update.Message.MessageText);
    }
  }
}


--- PrintPreviewViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.PrintPreviewViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Orders;
using MSS.Core.Model.Structures;
using MSS.Core.Model.UsersManagement;
using MSS.DTO.Orders;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Controls;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class PrintPreviewViewModel : ViewModelBase
  {
    private readonly IRepository<StructureNode> _structureNodeRepository;
    private readonly IRepository<StructureNodeType> _structureNodeTypeRepository;
    private readonly IRepository<StructureNodeLinks> _structureNodeLinksRepository;
    private readonly IUserRepository _userRepository;
    private readonly OrderDTO _selectedOrder;
    private readonly IRepositoryFactory _repositoryFactory;
    private bool _isReasonVisible;
    private string _installationNumberValue;
    private string _deviceNumberValue;
    private string _detailValue;
    private bool _exportedValue;
    private DateTime _dueDateValue;
    private StatusOrderEnum _selectedStatus;
    private CloseOrderReasonsEnum _selectedReason;
    private Guid _rootStructureNodeId;
    private User _selectedUser;
    private string _selectedUserName;
    private IEnumerable<StructureNodeDTO> _structureNodeCollection;

    [Inject]
    public PrintPreviewViewModel(OrderDTO selectedOrder, IRepositoryFactory repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
      this._structureNodeRepository = repositoryFactory.GetRepository<StructureNode>();
      this._structureNodeTypeRepository = repositoryFactory.GetRepository<StructureNodeType>();
      this._structureNodeLinksRepository = repositoryFactory.GetRepository<StructureNodeLinks>();
      this._selectedOrder = selectedOrder;
      this._userRepository = repositoryFactory.GetUserRepository();
      this.StructureNodeCollection = this.GetStructureNodeForOrder(this._selectedOrder.OrderType);
      this.InstallationNumberValue = selectedOrder.InstallationNumber;
      this.DetailValue = selectedOrder.Details;
      this.ExportedValue = selectedOrder.Exported;
      this.SelectedStatus = selectedOrder.Status;
      this.DueDateValue = selectedOrder.DueDate;
      List<User> list = selectedOrder.UserIds.Select<Guid, User>((Func<Guid, User>) (userID => this._userRepository.GetById((object) userID))).ToList<User>();
      if (this._selectedOrder.OrderType == OrderTypeEnum.ReadingOrder)
      {
        this.SelectedUser = list.FirstOrDefault<User>();
      }
      else
      {
        foreach (User user in list)
          this.SelectedUserName = this.SelectedUserName + user.FirstName + " " + user.LastName + "\n";
      }
      this.DeviceNumberValue = selectedOrder.DeviceNumber;
      this.SelectedReason = selectedOrder.CloseOrderReason;
    }

    private StructuresManager GetStructuresManagerInstance()
    {
      return new StructuresManager(this._repositoryFactory);
    }

    private StructuresManager GetStructuresManagerInstance(bool isConstructorWithoutMappings)
    {
      return new StructuresManager(this._repositoryFactory, isConstructorWithoutMappings);
    }

    public bool IsReasonVisible
    {
      get => this._isReasonVisible;
      set
      {
        this._isReasonVisible = value;
        this.OnPropertyChanged(nameof (IsReasonVisible));
      }
    }

    public string InstallationNumberValue
    {
      get => this._installationNumberValue;
      set => this._installationNumberValue = value;
    }

    public string DeviceNumberValue
    {
      get => this._deviceNumberValue;
      set
      {
        this._deviceNumberValue = value;
        this.OnPropertyChanged(nameof (DeviceNumberValue));
      }
    }

    public string DetailValue
    {
      get => this._detailValue;
      set => this._detailValue = value;
    }

    public bool ExportedValue
    {
      get => this._exportedValue;
      set => this._exportedValue = value;
    }

    public DateTime DueDateValue
    {
      get => this._dueDateValue;
      set => this._dueDateValue = value;
    }

    public IEnumerable<StatusOrderEnum> StatusCollection
    {
      get
      {
        return (IEnumerable<StatusOrderEnum>) Enum.GetValues(typeof (StatusOrderEnum)).Cast<StatusOrderEnum>().ToList<StatusOrderEnum>();
      }
    }

    public StatusOrderEnum SelectedStatus
    {
      get => this._selectedStatus;
      set
      {
        this._selectedStatus = value;
        this.IsReasonVisible = this._selectedStatus == StatusOrderEnum.Closed;
        this.OnPropertyChanged(nameof (SelectedStatus));
      }
    }

    public IEnumerable<CloseOrderReasonsEnum> ReasonsCollection
    {
      get
      {
        return (IEnumerable<CloseOrderReasonsEnum>) Enum.GetValues(typeof (CloseOrderReasonsEnum)).Cast<CloseOrderReasonsEnum>().ToList<CloseOrderReasonsEnum>();
      }
    }

    public CloseOrderReasonsEnum SelectedReason
    {
      get => this._selectedReason;
      set
      {
        this._selectedReason = value;
        this.OnPropertyChanged(nameof (SelectedReason));
      }
    }

    public Guid RootStructureNodeId
    {
      get => this._rootStructureNodeId;
      set
      {
        this._rootStructureNodeId = value;
        this.OnPropertyChanged(nameof (RootStructureNodeId));
      }
    }

    public IEnumerable<User> UsersCollection
    {
      get => (IEnumerable<User>) this._userRepository.GetAllUsers();
    }

    public User SelectedUser
    {
      get => this._selectedUser;
      set
      {
        this._selectedUser = value;
        if (value != null)
        {
          this.SelectedStatus = StatusOrderEnum.Dated;
          this.SelectedUserName = this._selectedUser.FirstName + " " + this._selectedUser.LastName;
        }
        this.OnPropertyChanged(nameof (SelectedUser));
      }
    }

    public string SelectedUserName
    {
      get => this._selectedUserName;
      set
      {
        this._selectedUserName = value;
        this.OnPropertyChanged(nameof (SelectedUserName));
      }
    }

    public IEnumerable<StructureNodeDTO> StructureNodeCollection
    {
      get => this._structureNodeCollection;
      set
      {
        this._structureNodeCollection = value;
        this.OnPropertyChanged(nameof (StructureNodeCollection));
      }
    }

    public string OrderNumberLabel
    {
      get => this.GetOrderNumberLabel();
      set
      {
        this._selectedUserName = value;
        this.OnPropertyChanged(nameof (OrderNumberLabel));
      }
    }

    public ICommand PrintOrderCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          try
          {
            Grid grid = parameter as Grid;
            new UIPrinter()
            {
              Title = ("Order " + this.InstallationNumberValue),
              Content = grid
            }.Print();
            this.OnRequestClose(false);
          }
          catch (PrintAborted ex)
          {
            string message = ex.Message;
          }
        }));
      }
    }

    private IEnumerable<StructureNodeDTO> GetStructureNodeForOrder(OrderTypeEnum orderType)
    {
      ObservableCollection<StructureNodeDTO> structureNodeForOrder = new ObservableCollection<StructureNodeDTO>();
      switch (orderType)
      {
        case OrderTypeEnum.ReadingOrder:
          if (this._selectedOrder.StructureBytes != null)
          {
            OrderSerializableStructure orderserializablestructure = StructuresHelper.DeserializeStructure(this._selectedOrder.StructureBytes);
            Structure structure = this.GetStructuresManagerInstance().GetStructure(orderserializablestructure);
            Dictionary<Guid, object> entityDictionary = new Dictionary<Guid, object>();
            structure.Locations.ForEach((Action<Location>) (l => entityDictionary.Add(l.Id, (object) l)));
            structure.Tenants.ForEach((Action<Tenant>) (t => entityDictionary.Add(t.Id, (object) t)));
            structure.Meters.ForEach((Action<Meter>) (m => entityDictionary.Add(m.Id, (object) m)));
            structure.Minomats.ForEach((Action<Minomat>) (m => entityDictionary.Add(m.Id, (object) m)));
            structureNodeForOrder = StructuresHelper.GetTreeFromList(this._structureNodeTypeRepository.GetAll(), (IList<StructureNodeLinks>) structure.Links, entityDictionary);
            break;
          }
          break;
        case OrderTypeEnum.InstallationOrder:
          Guid structureRootNodeId = this._selectedOrder.RootStructureNodeId;
          if (structureRootNodeId != Guid.Empty)
          {
            List<StructureNodeLinks> list = StructuresHelper.GetStructureNodesForRootNode(this._structureNodeLinksRepository, this._structureNodeLinksRepository.FirstOrDefault((Expression<Func<StructureNodeLinks, bool>>) (s => s.Node.Id == structureRootNodeId)).Node.Id).Where<StructureNodeLinks>((Func<StructureNodeLinks, bool>) (s => !s.EndDate.HasValue)).ToList<StructureNodeLinks>();
            List<Guid> nodeIDs = this.GetNodeIdList((IEnumerable<StructureNodeLinks>) list);
            Dictionary<Guid, object> entitiesDictionary = this.GetEntitiesDictionary(this._structureNodeRepository.SearchFor((Expression<Func<StructureNode, bool>>) (s => nodeIDs.Contains(s.Id) && s.EndDate == new DateTime?())));
            structureNodeForOrder = StructuresHelper.GetTreeFromList(this._structureNodeTypeRepository.GetAll(), (IList<StructureNodeLinks>) list, entitiesDictionary);
            break;
          }
          break;
      }
      return (IEnumerable<StructureNodeDTO>) structureNodeForOrder;
    }

    private List<Guid> GetNodeIdList(IEnumerable<StructureNodeLinks> structureNodeLinks)
    {
      List<Guid> nodeIDs = new List<Guid>();
      foreach (StructureNodeLinks structureNodeLinks1 in structureNodeLinks.Where<StructureNodeLinks>((Func<StructureNodeLinks, bool>) (structureNode => !nodeIDs.Contains(structureNode.Node.Id))))
        nodeIDs.Add(structureNodeLinks1.Node.Id);
      return nodeIDs;
    }

    private Dictionary<Guid, object> GetEntitiesDictionary(IList<StructureNode> structureNodeList)
    {
      Dictionary<Guid, object> entitiesDictionary = new Dictionary<Guid, object>();
      foreach (StructureNode structureNode in (IEnumerable<StructureNode>) structureNodeList)
      {
        if (structureNode.EntityId != Guid.Empty)
        {
          StructureNodeTypeEnum structureNodeTypeName = (StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), structureNode.EntityName, true);
          object entity = this.GetStructuresManagerInstance(true).GetEntity(structureNodeTypeName, structureNode);
          entitiesDictionary.Add(structureNode.EntityId, entity);
        }
      }
      return entitiesDictionary;
    }

    private string GetOrderNumberLabel()
    {
      if (this._selectedOrder.OrderType == OrderTypeEnum.ReadingOrder)
        return CultureResources.GetValue("MSS_Client_OrderControl_Header_ReadingNumber");
      return this._selectedOrder.OrderType == OrderTypeEnum.InstallationOrder ? CultureResources.GetValue("MSS_Client_OrderControl_Header_InstallationNumber") : "";
    }
  }
}


--- RegisterDevicesUserModeViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.RegisterDevicesUserModeViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Modules.GMM;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Structures;
using MSS.DIConfiguration;
using MSS.DTO.Meters;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class RegisterDevicesUserModeViewModel : ViewModelBase
  {
    private readonly IWindowFactory _windowFactory;
    private StructureNodeDTO _structureNode;
    private IRepositoryFactory _repositoryFactory;
    private IRepository<MinomatMeter> _minomatMeterRepository;
    private bool _showProgressCircle;
    private ViewModelBase _messageUserControl;

    public RegisterDevicesUserModeViewModel(
      IWindowFactory windowFactory,
      StructureNodeDTO node,
      IRepositoryFactory repositoryFactory)
    {
      this._windowFactory = windowFactory;
      this._repositoryFactory = repositoryFactory;
      this._structureNode = node;
      this._minomatMeterRepository = this._repositoryFactory.GetRepository<MinomatMeter>();
      Mapper.CreateMap<MeterDTO, Meter>();
      Mapper.CreateMap<MinomatSerializableDTO, Minomat>();
    }

    public BitmapImage Image => this._structureNode.Image;

    public string Name => this._structureNode.Name;

    public bool ShowProgressCircle
    {
      get => this._showProgressCircle;
      set
      {
        this._showProgressCircle = value;
        this.OnPropertyChanged(nameof (ShowProgressCircle));
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public ICommand RegisterMetersCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          List<MeterDTO> metersInStructure = this.GetMetersInLocation();
          if (metersInStructure.Count <= 0)
            return;
          if (metersInStructure.Count <= 300)
          {
            this.ShowProgressCircle = true;
            ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
            {
              bool success = this.SaveAndRegisterMinomatMeters(metersInStructure);
              this.ShowProgressCircle = false;
              Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = success ? MessageHandlingManager.ShowSuccessMessage(Resources.MSS_ExecuteInstallationOrder_MeterRegistrationSuccessful) : MessageHandlingManager.ShowWarningMessage(Resources.MSS_ExecuteInstallationOrder_MeterRegistrationError)));
            }));
          }
          else
            this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<ManuallyAssignMetersViewModel>((IParameter) new ConstructorArgument("node", (object) this._structureNode), (IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory), (IParameter) new ConstructorArgument("windowFactory", (object) this._windowFactory)));
        }));
      }
    }

    private List<MeterDTO> GetMetersInLocation()
    {
      List<MeterDTO> meterList = new List<MeterDTO>();
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) this._structureNode.RootNode.SubNodes)
        this.WalkStructure(subNode, ref meterList);
      return meterList;
    }

    private void WalkStructure(StructureNodeDTO node, ref List<MeterDTO> meterList)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
      {
        if (subNode.NodeType.Name == StructureNodeTypeEnum.Meter.ToString())
          meterList.Add(subNode.Entity as MeterDTO);
        else
          this.WalkStructure(subNode, ref meterList);
      }
    }

    private bool SaveAndRegisterMinomatMeters(List<MeterDTO> meterList)
    {
      bool flag = true;
      ISession session = this._repositoryFactory.GetSession();
      try
      {
        Minomat minomat = Mapper.Map<MinomatSerializableDTO, Minomat>((MinomatSerializableDTO) this._structureNode.Entity);
        GMMMinomatConfigurator.GetInstance(minomat.IsMaster, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory")).RegisterDevicesOnMinomat(meterList, minomat);
        session.BeginTransaction();
        foreach (MeterDTO meter in meterList)
          this._minomatMeterRepository.TransactionalInsert(new MinomatMeter()
          {
            SignalStrength = 0,
            Status = new MeterStatusEnum?(MeterStatusEnum.Registered),
            Meter = Mapper.Map<MeterDTO, Meter>(meter),
            Minomat = minomat
          });
        MinomatRadioDetails radioDetails = minomat.RadioDetails;
        radioDetails.NrOfRegisteredDevices = meterList.Count.ToString();
        radioDetails.StatusDevices = new MinomatStatusDevicesEnum?(MinomatStatusDevicesEnum.DevicesRegistered);
        this._repositoryFactory.GetRepository<MinomatRadioDetails>().TransactionalUpdate(radioDetails);
        session.Transaction.Commit();
      }
      catch (Exception ex)
      {
        MessageHandler.LogException(ex);
        flag = false;
        if (session.IsOpen && session.Transaction.IsActive)
          session.Transaction.Rollback();
      }
      return flag;
    }
  }
}


--- RegisteredDevicesForMinomatViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.RegisteredDevicesForMinomatViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Core.Model.Meters;
using MSS.DTO.Meters;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS_Client.ViewModel.Structures;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class RegisteredDevicesForMinomatViewModel : StructureViewModelBase
  {
    private StructureNodeDTO _rootNode;
    private string _title;
    private List<MeterInfo> _metersDetails;

    public RegisteredDevicesForMinomatViewModel(
      IRepositoryFactory repositoryFactory,
      StructureNodeDTO selectedMinomatStructureNode,
      StructureNodeDTO rootNode)
    {
      this._rootNode = rootNode;
      MinomatSerializableDTO selectedMinomat = selectedMinomatStructureNode.Entity as MinomatSerializableDTO;
      this.Title = string.Format(Resources.MSS_Client_RegisteredDevicesForMinomat_Title, (object) (selectedMinomat?.RadioId ?? ""));
      if (selectedMinomat == null || !(selectedMinomat.Id != Guid.Empty))
        return;
      List<Guid> list = repositoryFactory.GetRepository<MinomatMeter>().Where((Expression<Func<MinomatMeter, bool>>) (item => item.Minomat.Id == selectedMinomat.Id)).ToList<MinomatMeter>().Select<MinomatMeter, Guid>((Func<MinomatMeter, Guid>) (item => item.Meter.Id)).ToList<Guid>();
      this._metersDetails = new List<MeterInfo>();
      if (list.Any<Guid>())
        this.GetMeterInfos(ref this._metersDetails, list, rootNode);
    }

    public string Title
    {
      get => this._title;
      set
      {
        this._title = value;
        this.OnPropertyChanged(nameof (Title));
      }
    }

    public List<MeterInfo> MetersDetails
    {
      get => this._metersDetails;
      set
      {
        this._metersDetails = value;
        this.OnPropertyChanged(nameof (MetersDetails));
      }
    }

    private void GetMeterInfos(
      ref List<MeterInfo> meterInfos,
      List<Guid> metersToDisplay_Ids,
      StructureNodeDTO rootNode)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) rootNode.SubNodes)
      {
        if (subNode.NodeType.Name == "Meter" && subNode.Entity is MeterDTO && metersToDisplay_Ids.Contains((subNode.Entity as MeterDTO).Id))
        {
          MeterInfo meterInfo = new MeterInfo();
          if (subNode.Entity is MeterDTO entity1)
            meterInfo.Meter = entity1;
          TenantDTO tenantParent = this.GetTenantParent(subNode);
          if (tenantParent != null)
          {
            meterInfo.TenantNumber = tenantParent.TenantNr;
            meterInfo.TenantName = tenantParent.Name;
            meterInfo.FloorPosition = tenantParent?.FloorNr + "." + tenantParent?.FloorName + " / " + tenantParent?.ApartmentNr + " " + tenantParent?.Direction;
          }
          if (this._rootNode.Entity is LocationDTO)
            meterInfo.Address = (this._rootNode.Entity is LocationDTO entity2 ? entity2.Street : (string) null) + " " + (this._rootNode.Entity is LocationDTO entity3 ? entity3.BuildingNr : (string) null);
          meterInfos.Add(meterInfo);
        }
        this.GetMeterInfos(ref meterInfos, metersToDisplay_Ids, subNode);
      }
    }

    private TenantDTO GetTenantParent(StructureNodeDTO node)
    {
      StructureNodeDTO structureNodeDto = node;
      while (structureNodeDto.ParentNode != null && structureNodeDto.ParentNode.Id != Guid.Empty && structureNodeDto.NodeType.Name != "Tenant")
        structureNodeDto = structureNodeDto.ParentNode;
      return structureNodeDto.Entity as TenantDTO;
    }
  }
}


--- RepairModeViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.RepairModeViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MinomatHandler;
using MSS.Business.DTO;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Meters;
using MSS.DIConfiguration;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using ZENNER;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class RepairModeViewModel : ViewModelBase
  {
    private readonly IWindowFactory _windowFactory;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly MinomatSerializableDTO _minomatMockup = new MinomatSerializableDTO()
    {
      RadioId = "47201259"
    };
    private bool _isChangeMinomatCommandEnabled;
    private bool _isBusy;
    private string _newMinomatID;
    private string _firmwareVersion;
    private string _minomatId;
    private string _receivedMeters;
    private ViewModelBase _messageUserControlRepairMode;
    private object _gsmState;
    private PhaseDetails _actualPhase;
    private string _minomatPhaseText;
    private string _resetConfigText;
    private string _busyContent;
    private object _readMinolIdText;
    private bool _isRegisteredWithMasterVisible;
    public Func<ConnectionProfile, MinomatV4> InitMinomat = (Func<ConnectionProfile, MinomatV4>) (_ => GmmInterface.HandlerManager.CreateInstance<MinomatHandlerFunctions>(_).MyMinomatV4);

    public MinomatSerializableDTO SelectedMinomat { get; set; }

    public StructureNodeDTO SelectedMinomatStructureNode { get; set; }

    public object Image { get; set; }

    public RepairModeViewModel(
      StructureNodeDTO minomatNode,
      IWindowFactory windowFactory,
      IRepositoryFactory repositoryFactory)
    {
      this._windowFactory = windowFactory;
      this._repositoryFactory = repositoryFactory;
      this.SelectedMinomatStructureNode = minomatNode;
      this.SelectedMinomat = (MinomatSerializableDTO) minomatNode.Entity;
      this.ConfigureParams();
      this._receivedMeters = "1231231";
      this.CurrentMinomat = this.InitMinomat(this._connectionProfile);
      this.CurrentMinomat.OnError += (EventHandlerEx<Exception>) ((s, e) => { });
      this.IsRegisteredWithMasterVisible = this.SelectedMinomat.IsMaster;
    }

    private ConnectionProfile _connectionProfile { get; set; }

    public bool IsChangeMinomatCommandEnabled
    {
      get => this._isChangeMinomatCommandEnabled;
      set
      {
        if (this._isChangeMinomatCommandEnabled == value)
          return;
        this._isChangeMinomatCommandEnabled = value;
        this.OnPropertyChanged(nameof (IsChangeMinomatCommandEnabled));
      }
    }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        if (this._isBusy == value)
          return;
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    public MinomatV4 CurrentMinomat { get; set; }

    public string NewMinomatID
    {
      get => this._newMinomatID;
      set
      {
        if (this._newMinomatID == value)
          return;
        this._newMinomatID = value;
        this.OnPropertyChanged(nameof (NewMinomatID));
      }
    }

    public string FirmwareVersion
    {
      get => this._firmwareVersion;
      set
      {
        if (this._firmwareVersion == value)
          return;
        this._firmwareVersion = value;
        this.OnPropertyChanged(nameof (FirmwareVersion));
      }
    }

    public string MinomatId
    {
      get => this._minomatId;
      set
      {
        if (this._minomatId == value)
          return;
        this._minomatId = value;
        this.OnPropertyChanged(nameof (MinomatId));
      }
    }

    public string ReceivedMeters
    {
      get => this._receivedMeters;
      set
      {
        if (this._receivedMeters == value)
          return;
        this._receivedMeters = value;
        this.OnPropertyChanged(nameof (ReceivedMeters));
      }
    }

    public ViewModelBase MessageUserControlRepairMode
    {
      get => this._messageUserControlRepairMode;
      set
      {
        this._messageUserControlRepairMode = value;
        this.OnPropertyChanged(nameof (MessageUserControlRepairMode));
      }
    }

    public object GSMState
    {
      get => this._gsmState;
      set
      {
        this._gsmState = value;
        this.OnPropertyChanged(nameof (GSMState));
      }
    }

    public PhaseDetails ActualPhase
    {
      get => this._actualPhase;
      set
      {
        this._actualPhase = value;
        this.OnPropertyChanged("ReadPhaseDetails");
      }
    }

    public string MinomatPhaseText
    {
      get => this._minomatPhaseText;
      set
      {
        this._minomatPhaseText = value;
        this.OnPropertyChanged(nameof (MinomatPhaseText));
      }
    }

    public string ResetConfigText
    {
      get => this._resetConfigText;
      set
      {
        this._resetConfigText = value;
        this.OnPropertyChanged(nameof (ResetConfigText));
      }
    }

    public string BusyContent
    {
      get => this._busyContent;
      set
      {
        this._busyContent = value;
        this.OnPropertyChanged(nameof (BusyContent));
      }
    }

    public object ReadMinolIdText
    {
      get => this._readMinolIdText;
      set
      {
        this._readMinolIdText = value;
        this.OnPropertyChanged(nameof (ReadMinolIdText));
      }
    }

    public bool IsRegisteredWithMasterVisible
    {
      get => this._isRegisteredWithMasterVisible;
      set
      {
        this._isRegisteredWithMasterVisible = value;
        this.OnPropertyChanged(nameof (IsRegisteredWithMasterVisible));
      }
    }

    public void ConfigureParams()
    {
      this._connectionProfile = GmmInterface.DeviceManager.GetConnectionProfile(29);
      this.GetChangeableParam("minomatv4_minolid", this._connectionProfile).Value = this.SelectedMinomat.RadioId;
      this.GetChangeableParam("port", this._connectionProfile).Value = "COM114";
    }

    public ChangeableParameter GetChangeableParam(string paramName, ConnectionProfile connection)
    {
      return connection.ChangeableParameters.Find((Predicate<ChangeableParameter>) (_ => _.Key.ToLower() == paramName.ToLower()));
    }

    public System.Windows.Input.ICommand ChangeMinomantCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ =>
        {
          MinomatIdPopupViewModel idPopupViewModel = DIConfigurator.GetConfigurator().Get<MinomatIdPopupViewModel>();
          this._windowFactory.CreateNewModalDialog((IViewModel) idPopupViewModel);
          idPopupViewModel.MinomatId.IfNull<string>((Action<string>) (v => this.MessageUserControlRepairMode = MessageHandlingManager.ShowValidationMessage("Enter a Minomat ID")), (Action<string>) (v =>
          {
            this.IsBusy = true;
            this.BusyContent = Resources.MSS_Client_RepairMode_ChangingMinomat;
            Task.Delay(5000).ContinueWith<bool>((Func<Task, bool>) (t => this.IsBusy = false));
          }));
        }));
      }
    }

    public System.Windows.Input.ICommand ReadFirmwareVersionCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ => Task.Run((Action) (() =>
        {
          this.IsBusy = true;
          this.BusyContent = Resources.MSS_Client_RepairMode_ReadingFirmwareVersion;
          this.FirmwareVersion = this.CurrentMinomat.GetFirmwareVersion() ?? "null";
        })).ContinueWith<bool>((Func<Task, bool>) (p => this.IsBusy = false))));
      }
    }

    public System.Windows.Input.ICommand ReadGSMState
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.IsBusy = true;
          this.BusyContent = Resources.MSS_Client_RepairMode_ReadingGSMState;
          Task.Run<GsmState>((Func<GsmState>) (() =>
          {
            GsmState gsmState = this.CurrentMinomat.GetGsmState();
            gsmState.IfNull<GsmState>((Action<GsmState>) (p => this.GSMState = (object) "null"), (Action<GsmState>) (p => this.GSMState = (object) p.StateA));
            return gsmState;
          })).ContinueWith((Action<Task<GsmState>>) (gsmStateTask => this.IsBusy = false));
        }));
      }
    }

    public System.Windows.Input.ICommand ReadPhaseDetails
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.IsBusy = true;
          this.BusyContent = Resources.MSS_Client_RepairMode_ReadingPhaseDetails;
          Task.Run((Action) (() => this.CurrentMinomat.GetPhaseDetails().IfNull<PhaseDetails>((Action<PhaseDetails>) (p => { }), (Action<PhaseDetails>) (p => this.ActualPhase = p)))).ContinueWith<bool>((Func<Task, bool>) (t => this.IsBusy = false));
        }));
      }
    }

    public System.Windows.Input.ICommand ResetConfiguration
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.IsBusy = true;
          this.BusyContent = Resources.MSS_Client_RepairMode_ResettingConfiguration;
          Task.Run<string>((Func<string>) (() => this.CurrentMinomat.ResetConfiguration().If<bool, string>((Func<bool, bool>) (p => p), (Func<bool, string>) (p => this.ResetConfigText = string.Format("Done - {0}", (object) DateTime.Now)), (Func<bool, string>) (p => this.ResetConfigText = string.Format("Error - {0}", (object) DateTime.Now))))).ContinueWith((Action<Task<string>>) (t =>
          {
            this.IsBusy = false;
            IRepository<MinomatRadioDetails> repository4 = this._repositoryFactory.GetRepository<MinomatRadioDetails>();
            MinomatRadioDetails minomatRadioDetails = repository4.FirstOrDefault((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == this.SelectedMinomat.Id));
            if (minomatRadioDetails == null)
              return;
            minomatRadioDetails.StatusNetwork = new MinomatStatusNetworkEnum?(MinomatStatusNetworkEnum.Open);
            minomatRadioDetails.LastStartOn = new DateTime?();
            minomatRadioDetails.LastRegisteredOn = new DateTime?();
            minomatRadioDetails.GSMStatus = new GSMTestReceptionState?();
            minomatRadioDetails.GSMStatusDate = new DateTime?();
            minomatRadioDetails.StatusDevices = new MinomatStatusDevicesEnum?(MinomatStatusDevicesEnum.Open);
            minomatRadioDetails.NrOfAssignedDevices = string.Empty;
            minomatRadioDetails.NrOfReceivedDevices = string.Empty;
            minomatRadioDetails.NrOfRegisteredDevices = string.Empty;
            repository4.Update(minomatRadioDetails);
            IRepository<MinomatMeter> repository5 = this._repositoryFactory.GetRepository<MinomatMeter>();
            IRepository<MinomatMeter> repository6 = repository5;
            Expression<Func<MinomatMeter, bool>> predicate = (Expression<Func<MinomatMeter, bool>>) (item => item.Minomat.Id == minomatRadioDetails.Minomat.Id);
            foreach (MinomatMeter entity in repository6.Where(predicate).ToList<MinomatMeter>())
              repository5.TransactionalDelete(entity);
            this._repositoryFactory.GetSession().Clear();
          }));
        }));
      }
    }

    public System.Windows.Input.ICommand SetMinomatPhase
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ => Task.Run<PhaseDetails>((Func<PhaseDetails>) (() =>
        {
          this.IsBusy = true;
          this.BusyContent = Resources.MSS_Client_RepairMode_GettingPhaseDetails;
          return this.ActualPhase ?? this.CurrentMinomat.GetPhaseDetails();
        })).ContinueWith((Action<Task<PhaseDetails>>) (phase =>
        {
          phase.Result.IfNotNull<PhaseDetails>((Action<PhaseDetails>) (td =>
          {
            this.BusyContent = Resources.MSS_Client_RepairMode_SettingPhaseDetails;
            this.CurrentMinomat.SetPhaseDetailsBuffer((object) td).If<bool, string>((Func<bool, bool>) (res => res.IsTrue()), (Func<bool, string>) (res => this.MinomatPhaseText = string.Format("Done - {0}", (object) DateTime.Now)), (Func<bool, string>) (res => this.MinomatPhaseText = string.Format("Error - {0}", (object) DateTime.Now)));
          }));
          this.IsBusy = false;
          this.MinomatPhaseText = this.MinomatPhaseText ?? Resources.MSS_Client_RepairMode_ErrorGettingPhaseDetails;
        }))));
      }
    }

    public System.Windows.Input.ICommand ReadMinolId
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.IsBusy = true;
          this.BusyContent = Resources.MSS_Client_RepairMode_ReadingMinolId;
          Task.Run<object>((Func<object>) (() => this.ReadMinolIdText = (object) string.Format("Minol ID : {0}", (object) this.CurrentMinomat.GetMinolId()))).ContinueWith<bool>((Func<Task<object>, bool>) (t => this.IsBusy = false));
        }));
      }
    }

    public System.Windows.Input.ICommand WriteMinolId
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) (_ =>
        {
          MinomatIdPopupViewModel idPopupViewModel = DIConfigurator.GetConfigurator().Get<MinomatIdPopupViewModel>();
          this._windowFactory.CreateNewModalDialog((IViewModel) idPopupViewModel);
          string minomatId = idPopupViewModel.MinomatId;
        }));
      }
    }
  }
}


--- ReportsForMinomatsViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.ReportsForMinomatsViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MVVM.ViewModel;
using Remotion.Linq.Collections;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class ReportsForMinomatsViewModel : ViewModelBase
  {
    private ObservableCollection<StructureNodeDTO> _structureForMinomats;

    public ReportsForMinomatsViewModel(
      ObservableCollection<StructureNodeDTO> structureForMinomats)
    {
      this.StructureForMinomats = structureForMinomats;
    }

    public ObservableCollection<StructureNodeDTO> StructureForMinomats
    {
      get => this._structureForMinomats;
      set
      {
        this._structureForMinomats = value;
        this.OnPropertyChanged(nameof (StructureForMinomats));
      }
    }
  }
}


--- ReportsForTenantsViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.ReportsForTenantsViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MinomatHandler;
using MSS.Business.DTO;
using MSS.Business.Modules.GMM;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Meters;
using MSS.DIConfiguration;
using MSS.DTO.Meters;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Controls.CheckableComboBox;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using Telerik.Windows.Data;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class ReportsForTenantsViewModel : ViewModelBase
  {
    private StructureNodeDTO _rootNode;
    private List<TenantInfo> _fullTenantInfos;
    private List<MeterInfo> _fullMetersInfoCollection;
    private IWindowFactory _windowFactory;
    private IRepositoryFactory _repositoryFactory;
    private IRepository<MinomatMeter> _minomatMeterRepository;
    private IRepository<MinomatRadioDetails> _minomatRadioDetailsRepository;
    private List<string> _selectedAddresses = new List<string>();
    private List<string> _selectedFloors = new List<string>();
    private List<string> _selectedPositions = new List<string>();
    private List<string> _selectedMinomats = new List<string>();
    private List<string> _selectedStates = new List<string>();
    private Dictionary<Guid, RoutingTable> _minomatMasterRoutingTables = new Dictionary<Guid, RoutingTable>();
    private List<MinomatRadioDetails> _masterRadioDetails;
    private List<Tuple<Guid, string>> _meterGuidsWithMinomatSN = new List<Tuple<Guid, string>>();
    private string _selectAllText = Resources.MSS_Client_SelectAll;
    private ObservableCollection<TenantInfo> _filteredTenantsInfoCollection;
    private ObservableCollection<MinomatMasterInfo> _fullMinomatMastersInfoCollection;
    private ObservableCollection<MinomatSlaveInfo> _minomatSlavesInfoCollection;
    private ObservableCollection<MeterInfo> _filteredMetersInfoCollection;
    private int _totalDevices;
    private bool _isShowDataCollectorsForMeterEnabled;
    private string _registeredDevicesImageLocation;
    private string _registeredDevicesPercentage;
    private string _selectedAddressesText;
    private string _selectedFloorsText;
    private string _selectedPositionsText;
    private string _selectedMinomatsText;
    private string _selectedStatesText;
    private string _busyContent;
    private bool _showProgressCircle;
    private TenantInfo _selectedTenantInfo;
    private StructureNodeDTO _tenantsInfoCollection_SelectedMeter;
    private StructureNodeDTO _tenantsInfoCollection_SelectedSubMeter;
    private bool _isTenantReportTabSelected;
    private bool _isNetworkReportTabSelected;
    private bool _isDeviceReportTabSelected;
    private bool _isSlavesGridVisible;
    private MinomatMasterInfo _minomatMastersSelectedItem;
    private bool _isReadRoutingTableButtonEnabled;
    private bool _isShowRoutingTableButtonEnabled;

    public ReportsForTenantsViewModel(
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory,
      StructureNodeDTO rootNode)
    {
      this._rootNode = rootNode;
      this._windowFactory = windowFactory;
      this._repositoryFactory = repositoryFactory;
      this._minomatMeterRepository = this._repositoryFactory.GetRepository<MinomatMeter>();
      this._minomatRadioDetailsRepository = this._repositoryFactory.GetRepository<MinomatRadioDetails>();
      this._isTenantReportTabSelected = true;
      this._isNetworkReportTabSelected = false;
      this._isDeviceReportTabSelected = false;
      this.OnPropertyChanged(nameof (IsTenantReportTabSelected));
      this.OnPropertyChanged(nameof (IsNetworkReportTabSelected));
      this.OnPropertyChanged(nameof (IsDeviceReportTabSelected));
      this.LoadTenantReportTab();
    }

    private void LoadTenantReportTab()
    {
      this.LoadTenantsInfoCollection();
      this.InitAddressList();
      this.InitFloorList();
      this.InitPositionList();
      this.LoadNumberLabelsAndImages();
      this.IsShowDataCollectorsForMeterEnabled = false;
    }

    private void LoadNetworkReportTab()
    {
      this.IsReadRoutingTableButtonEnabled = false;
      this.IsShowRoutingTableButtonEnabled = false;
      this.IsSlavesGridVisible = false;
      ObservableCollection<StructureNodeDTO> minomats = new ObservableCollection<StructureNodeDTO>();
      this.GetListOfMinomats(this._rootNode, ref minomats);
      this._fullMinomatMastersInfoCollection = new ObservableCollection<MinomatMasterInfo>();
      this._fullMinomatMastersInfoCollection = this.GetMinomatInfos(minomats);
      List<Guid> listOfMinomatMasterIds = this._fullMinomatMastersInfoCollection.Select<MinomatMasterInfo, Guid>((Func<MinomatMasterInfo, Guid>) (item => item.MinomatMaster.Id)).ToList<Guid>();
      if (listOfMinomatMasterIds.Any<Guid>())
        this._masterRadioDetails = this._minomatRadioDetailsRepository.SearchForInMemoryOrDb((Expression<Func<MinomatRadioDetails, bool>>) (item => listOfMinomatMasterIds.Contains(item.Minomat.Id)), (Func<MinomatRadioDetails, bool>) (item => listOfMinomatMasterIds.Contains(item.Minomat.Id))).ToList<MinomatRadioDetails>();
      this.OnPropertyChanged("FullMinomatMastersInfoCollection");
    }

    private void GetListOfMinomats(
      StructureNodeDTO rootNode,
      ref ObservableCollection<StructureNodeDTO> minomats)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) rootNode.SubNodes)
      {
        if (subNode.Entity != null && subNode.Entity is MinomatSerializableDTO)
          minomats.Add(subNode);
        this.GetListOfMinomats(subNode, ref minomats);
      }
    }

    private ObservableCollection<MinomatMasterInfo> GetMinomatInfos(
      ObservableCollection<StructureNodeDTO> listOfMinomats)
    {
      ObservableCollection<MinomatMasterInfo> source = new ObservableCollection<MinomatMasterInfo>();
      List<Guid?> minomatIds = listOfMinomats.Select<StructureNodeDTO, Guid?>((Func<StructureNodeDTO, Guid?>) (item => !(item.Entity is MinomatSerializableDTO entity1) ? new Guid?() : new Guid?(entity1.Id))).ToList<Guid?>();
      List<MinomatRadioDetails> list = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => minomatIds.Contains((Guid?) item.Minomat.Id))).ToList<MinomatRadioDetails>();
      foreach (StructureNodeDTO listOfMinomat in (Collection<StructureNodeDTO>) listOfMinomats)
      {
        MinomatSerializableDTO currentMinomat = listOfMinomat.Entity as MinomatSerializableDTO;
        MinomatRadioDetails minomatRadioDetails = list.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == currentMinomat.Id));
        string str1 = "";
        string str2 = "";
        if (!string.IsNullOrEmpty(minomatRadioDetails?.Location))
        {
          string[] strArray = minomatRadioDetails.Location.Split('/');
          str1 = strArray[0];
          str2 = strArray[1];
        }
        if (currentMinomat.IsMaster)
        {
          MinomatMasterInfo minomatMasterInfo = new MinomatMasterInfo()
          {
            MinomatMaster = currentMinomat,
            Address = (this._rootNode.Entity is LocationDTO entity2 ? entity2.Street : (string) null) + " " + (this._rootNode.Entity is LocationDTO entity3 ? entity3.BuildingNr : (string) null),
            Floor = str1 + (!string.IsNullOrEmpty(str1) ? ". " : "") + str2,
            Status = this._minomatMasterRoutingTables.ContainsKey(currentMinomat.Id) ? Resources.MSS_Client_ReadStatus : Resources.MSS_Client_TenantReports_DCStatus,
            Date = DateTime.MinValue,
            MinomatSlavesList = new List<MinomatSlaveInfo>()
          };
          source.Add(minomatMasterInfo);
        }
        else
        {
          MinomatMasterInfo masterForCurrentSlave = source.FirstOrDefault<MinomatMasterInfo>((Func<MinomatMasterInfo, bool>) (item =>
          {
            Guid id = item.MinomatMaster.Id;
            Guid? minomatMasterId = currentMinomat.MinomatMasterId;
            return minomatMasterId.HasValue && id == minomatMasterId.GetValueOrDefault();
          }));
          if (masterForCurrentSlave != null)
            masterForCurrentSlave.MinomatSlavesList.Add(new MinomatSlaveInfo()
            {
              MinomatSlave = currentMinomat,
              Address = (this._rootNode.Entity is LocationDTO entity4 ? entity4.Street : (string) null) + " " + (this._rootNode.Entity is LocationDTO entity5 ? entity5.BuildingNr : (string) null),
              Floor = str1 + (!string.IsNullOrEmpty(str1) ? ". " : "") + str2,
              Status = "",
              NodeId = minomatRadioDetails != null ? minomatRadioDetails.NodeId : "",
              ParentId = list.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == masterForCurrentSlave.MinomatMaster.Id))?.NodeId,
              ImageLocation = "",
              HopCount = "",
              RSSI = ""
            });
        }
      }
      foreach (MinomatMasterInfo minomatMasterInfo in (Collection<MinomatMasterInfo>) source)
      {
        minomatMasterInfo.ReceivedSlavesNumber = minomatMasterInfo.MinomatSlavesList.Count<MinomatSlaveInfo>((Func<MinomatSlaveInfo, bool>) (item => item.MinomatSlave.Registered));
        minomatMasterInfo.ReceivedSlavesString = minomatMasterInfo.ReceivedSlavesNumber.ToString() + " / " + (object) minomatMasterInfo.MinomatSlavesList.Count;
        this.UpdateMasterAndSlaveImagesAndSlaveStatuses(minomatMasterInfo);
      }
      return source;
    }

    private void UpdateMasterAndSlaveImagesAndSlaveStatuses(MinomatMasterInfo minomatMasterInfo)
    {
      minomatMasterInfo.ImageLocation = minomatMasterInfo.ReceivedSlavesNumber == minomatMasterInfo.MinomatSlavesList.Count ? "pack://application:,,,/Styles;component/Images/Settings/light-green.png" : "pack://application:,,,/Styles;component/Images/Settings/light-red.png";
      RoutingTable source;
      this._minomatMasterRoutingTables.TryGetValue(minomatMasterInfo.MinomatMaster.Id, out source);
      foreach (MinomatSlaveInfo minomatSlaves in minomatMasterInfo.MinomatSlavesList)
      {
        MinomatSlaveInfo minomatSlaveInfo = minomatSlaves;
        if ((source != null ? source.FirstOrDefault<RoutingRow>((Func<RoutingRow, bool>) (x => x.NodeId.ToString() == minomatSlaveInfo.NodeId)) : (RoutingRow) null) != null)
        {
          minomatSlaveInfo.ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-green.png";
          minomatSlaveInfo.Status = Resources.MSS_Client_StatusConnected;
        }
        else
        {
          minomatSlaveInfo.ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-red.png";
          minomatSlaveInfo.Status = Resources.MSS_Client_StatusNotConnected;
        }
      }
    }

    private void LoadDeviceReportTab()
    {
      this._fullMetersInfoCollection = new List<MeterInfo>();
      List<string> source = new List<string>();
      foreach (TenantInfo fullTenantInfo in this._fullTenantInfos)
      {
        foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) fullTenantInfo.SubNodes)
          this.GetMeters(fullTenantInfo, subNode, ref this._fullMetersInfoCollection);
      }
      List<Guid> meterIds = this._fullMetersInfoCollection.Select<MeterInfo, Guid>((Func<MeterInfo, Guid>) (m => m.Meter.Id)).ToList<Guid>();
      List<MinomatMeter> list1 = this._minomatMeterRepository.Where((Expression<Func<MinomatMeter, bool>>) (item => meterIds.Contains(item.Meter.Id) && item.Status != new MeterStatusEnum?())).ToList<MinomatMeter>();
      foreach (MeterInfo fullMetersInfo in this._fullMetersInfoCollection)
      {
        MeterInfo meterInfo = fullMetersInfo;
        List<MinomatMeter> list2 = list1.Where<MinomatMeter>((Func<MinomatMeter, bool>) (item => item.Meter.Id == meterInfo.Meter.Id)).ToList<MinomatMeter>();
        if (list2 != null && list2.Any<MinomatMeter>((Func<MinomatMeter, bool>) (item =>
        {
          MeterStatusEnum? status = item.Status;
          MeterStatusEnum meterStatusEnum = MeterStatusEnum.Registered;
          return status.GetValueOrDefault() == meterStatusEnum && status.HasValue;
        })))
        {
          meterInfo.MinomatGsmId = list2.First<MinomatMeter>((Func<MinomatMeter, bool>) (item =>
          {
            MeterStatusEnum? status = item.Status;
            MeterStatusEnum meterStatusEnum = MeterStatusEnum.Registered;
            return status.GetValueOrDefault() == meterStatusEnum && status.HasValue;
          })).Minomat.RadioId;
          meterInfo.Status = list2.First<MinomatMeter>((Func<MinomatMeter, bool>) (item =>
          {
            MeterStatusEnum? status = item.Status;
            MeterStatusEnum meterStatusEnum = MeterStatusEnum.Registered;
            return status.GetValueOrDefault() == meterStatusEnum && status.HasValue;
          })).Status;
        }
        else
        {
          meterInfo.MinomatGsmId = list2.Any<MinomatMeter>() ? list2.First<MinomatMeter>().Minomat.RadioId : "";
          meterInfo.Status = list2.Any<MinomatMeter>() ? list2.First<MinomatMeter>().Status : new MeterStatusEnum?();
        }
        MeterInfo meterInfo1 = meterInfo;
        int num;
        if (meterInfo.Status.HasValue)
        {
          MeterStatusEnum? status = meterInfo.Status;
          MeterStatusEnum meterStatusEnum = MeterStatusEnum.Registered;
          num = status.GetValueOrDefault() == meterStatusEnum ? (status.HasValue ? 1 : 0) : 0;
        }
        else
          num = 0;
        meterInfo1.Registered = num != 0;
        foreach (MinomatMeter minomatMeter1 in list2)
        {
          MinomatMeter minomatMeter = minomatMeter1;
          if (minomatMeter != null && !minomatMeter.Minomat.IsDeactivated && !source.Contains(minomatMeter.Minomat.RadioId))
            source.Add(minomatMeter.Minomat.RadioId);
          if (!this._meterGuidsWithMinomatSN.Any<Tuple<Guid, string>>((Func<Tuple<Guid, string>, bool>) (item => item.Item1 == minomatMeter.Meter.Id && item.Item2 == minomatMeter.Minomat.RadioId)))
            this._meterGuidsWithMinomatSN.Add(new Tuple<Guid, string>(minomatMeter.Meter.Id, minomatMeter.Minomat.RadioId));
        }
      }
      this.FilteredMetersInfoCollection = new ObservableCollection<MeterInfo>();
      foreach (MeterInfo fullMetersInfo in this._fullMetersInfoCollection)
        this.FilteredMetersInfoCollection.Add(fullMetersInfo);
      this.InitMinomatsList(source.Distinct<string>().ToList<string>());
      this.InitStatesList();
    }

    private void GetMeters(
      TenantInfo tenantInfo,
      StructureNodeDTO node,
      ref List<MeterInfo> meterInfos)
    {
      if (node.Entity is MeterDTO)
        meterInfos.Add(new MeterInfo()
        {
          Meter = node.Entity as MeterDTO,
          TenantName = tenantInfo.Tenant.Name,
          Address = tenantInfo.Address,
          FloorPosition = tenantInfo.FloorPosition
        });
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
        this.GetMeters(tenantInfo, subNode, ref meterInfos);
    }

    private void LoadNumberLabelsAndImages()
    {
      int totalDevices = 0;
      int registeredDevices = 0;
      this._fullTenantInfos.ForEach((Action<TenantInfo>) (tenant =>
      {
        totalDevices += tenant.NoOfDevices;
        registeredDevices += tenant.RegisteredDevices;
      }));
      this.TotalDevices = totalDevices;
      double num = totalDevices != 0 ? (double) registeredDevices / (double) totalDevices * 100.0 : 0.0;
      this.RegisteredDevicesPercentage = totalDevices != 0 ? string.Format("{0:0.00}%", (object) num) : "";
      this.RegisteredDevicesImageLocation = num < 0.0 || num >= 85.0 ? (num < 85.0 || num >= 95.0 ? "pack://application:,,,/Styles;component/Images/Settings/light-green.png" : "pack://application:,,,/Styles;component/Images/Settings/light-yellow.png") : "pack://application:,,,/Styles;component/Images/Settings/light-red.png";
    }

    private void LoadTenantsInfoCollection()
    {
      this._filteredTenantsInfoCollection = (ObservableCollection<TenantInfo>) new RadObservableCollection<TenantInfo>();
      this._fullTenantInfos = new List<TenantInfo>();
      List<MinomatMeter> metersForAllMeters = this.GetMinomatMetersForAllMeters();
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) this._rootNode.SubNodes)
      {
        if (subNode.NodeType.Name == "Tenant")
        {
          TenantDTO entity1 = subNode.Entity as TenantDTO;
          TenantInfo tenantInfo = new TenantInfo()
          {
            SubNodes = new ObservableCollection<StructureNodeDTO>(),
            Tenant = entity1,
            Address = (this._rootNode.Entity is LocationDTO entity2 ? entity2.Street : (string) null) + " " + (this._rootNode.Entity is LocationDTO entity3 ? entity3.BuildingNr : (string) null)
          };
          tenantInfo.FloorPosition = tenantInfo?.Tenant?.FloorNr + "." + tenantInfo?.Tenant?.FloorName + " / " + tenantInfo?.Tenant?.ApartmentNr + " " + tenantInfo?.Tenant?.Direction;
          int noOfDevices = 0;
          int registeredDevices = 0;
          int openDevices = 0;
          this.SetMeterDetailsForCurrentTenant(subNode, tenantInfo.SubNodes, metersForAllMeters, ref noOfDevices, ref openDevices, ref registeredDevices);
          tenantInfo.NoOfDevices = noOfDevices;
          tenantInfo.RegisteredDevices = registeredDevices;
          tenantInfo.OpenDevices = openDevices;
          tenantInfo.OpenDevicesString = openDevices.ToString() + "/" + (object) noOfDevices;
          if (noOfDevices > 0)
            tenantInfo.ImageLocation = registeredDevices != noOfDevices ? "pack://application:,,,/Styles;component/Images/Settings/light-red.png" : "pack://application:,,,/Styles;component/Images/Settings/light-green.png";
          this._filteredTenantsInfoCollection.Add(tenantInfo);
          this._fullTenantInfos.Add(tenantInfo);
        }
      }
    }

    private void SetMeterDetailsForCurrentTenant(
      StructureNodeDTO node,
      ObservableCollection<StructureNodeDTO> collectionToAddSubnodeDetailsTo,
      List<MinomatMeter> minomatMetersForAllMeters,
      ref int noOfDevices,
      ref int openDevices,
      ref int registeredDevices)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
      {
        StructureNodeDTO currentSubnode = subNode;
        if (currentSubnode.NodeType.Name == "Meter")
        {
          ++noOfDevices;
          if (collectionToAddSubnodeDetailsTo == null)
            collectionToAddSubnodeDetailsTo = new ObservableCollection<StructureNodeDTO>();
          if (currentSubnode.ParentNode.NodeType.Name != "Meter")
            collectionToAddSubnodeDetailsTo.Add(currentSubnode);
          MeterDTO currentMeter = currentSubnode.Entity as MeterDTO;
          if (currentMeter != null)
          {
            int num1 = 0;
            int num2 = 0;
            List<MinomatMeter> list = minomatMetersForAllMeters.Where<MinomatMeter>((Func<MinomatMeter, bool>) (item => item.Meter.Id == currentMeter.Id)).ToList<MinomatMeter>();
            if (list != null && list.Any<MinomatMeter>())
            {
              num2 += list.Count<MinomatMeter>((Func<MinomatMeter, bool>) (item => item.Status.HasValue && item.Status.Value == MeterStatusEnum.Registered));
              num1 += list.Count;
            }
            if (num2 > 0)
              ++registeredDevices;
            StructureNodeDTO structureNodeDto = currentSubnode;
            BitmapImage bitmapImageFromFiles;
            if (num2 <= 0)
              bitmapImageFromFiles = ImageHelper.Instance.GetBitmapImageFromFiles(new string[1]
              {
                "pack://application:,,,/Styles;component/Images/Settings/light-red.png"
              });
            else
              bitmapImageFromFiles = ImageHelper.Instance.GetBitmapImageFromFiles(new string[1]
              {
                "pack://application:,,,/Styles;component/Images/Settings/light-green.png"
              });
            structureNodeDto.Image = bitmapImageFromFiles;
            if (num1 == 0)
              ++openDevices;
            if (list != null)
              currentMeter.MinomatMeters = list;
          }
        }
        this.SetMeterDetailsForCurrentTenant(currentSubnode, collectionToAddSubnodeDetailsTo.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.Id == currentSubnode.Id))?.SubNodes, minomatMetersForAllMeters, ref noOfDevices, ref openDevices, ref registeredDevices);
      }
    }

    private List<MinomatMeter> GetMinomatMetersForAllMeters()
    {
      List<Guid> meterIds = new List<Guid>();
      this.WalkStructureAndGetMeterIds(this._rootNode, ref meterIds);
      return this._minomatMeterRepository.Where((Expression<Func<MinomatMeter, bool>>) (item => meterIds.Contains(item.Meter.Id))).ToList<MinomatMeter>();
    }

    private void WalkStructureAndGetMeterIds(StructureNodeDTO rootNode, ref List<Guid> meterIds)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) rootNode.SubNodes)
      {
        if (subNode.Entity is MeterDTO entity && entity.Id != Guid.Empty)
          meterIds.Add(entity.Id);
        this.WalkStructureAndGetMeterIds(subNode, ref meterIds);
      }
    }

    public List<CheckableComboBoxItem> AddressList { get; private set; }

    private void InitAddressList()
    {
      this.AddressList = new List<CheckableComboBoxItem>();
      List<string> list = this._fullTenantInfos.Select<TenantInfo, string>((Func<TenantInfo, string>) (item => item.Address)).Distinct<string>().ToList<string>();
      list.Insert(0, this._selectAllText);
      foreach (string str in list)
        this.AddressList.Add(new CheckableComboBoxItem()
        {
          Text = str
        });
      this.OnPropertyChanged("AddressList");
      this._selectedAddresses.Clear();
      this.AddressList.ForEach((Action<CheckableComboBoxItem>) (item =>
      {
        item.IsChecked = true;
        this._selectedAddresses.Add(item.Text);
      }));
      this.SelectedAddressesText = this._selectAllText;
    }

    public List<CheckableComboBoxItem> FloorList { get; private set; }

    private void InitFloorList()
    {
      this.FloorList = new List<CheckableComboBoxItem>();
      List<string> list = this._fullTenantInfos.Select<TenantInfo, string>((Func<TenantInfo, string>) (item => item.Tenant.FloorNr + "." + item.Tenant.FloorName)).Distinct<string>().ToList<string>();
      list.Insert(0, this._selectAllText);
      foreach (string str in list)
        this.FloorList.Add(new CheckableComboBoxItem()
        {
          Text = str
        });
      this.OnPropertyChanged("FloorList");
      this._selectedFloors.Clear();
      this.FloorList.ForEach((Action<CheckableComboBoxItem>) (item =>
      {
        item.IsChecked = true;
        this._selectedFloors.Add(item.Text);
      }));
      this.SelectedFloorsText = this._selectAllText;
    }

    public List<CheckableComboBoxItem> PositionList { get; private set; }

    private void InitPositionList()
    {
      this.PositionList = new List<CheckableComboBoxItem>();
      List<string> list = this._fullTenantInfos.Select<TenantInfo, string>((Func<TenantInfo, string>) (item => item.Tenant.ApartmentNr + " " + item.Tenant.Direction)).Distinct<string>().ToList<string>();
      list.Insert(0, this._selectAllText);
      foreach (string str in list)
        this.PositionList.Add(new CheckableComboBoxItem()
        {
          Text = str
        });
      this.OnPropertyChanged("PositionList");
      this._selectedPositions.Clear();
      this.PositionList.ForEach((Action<CheckableComboBoxItem>) (item =>
      {
        item.IsChecked = true;
        this._selectedPositions.Add(item.Text);
      }));
      this.SelectedPositionsText = this._selectAllText;
    }

    public List<CheckableComboBoxItem> MinomatsList { get; private set; }

    private void InitMinomatsList(List<string> minomatSerialNumbers)
    {
      this.MinomatsList = new List<CheckableComboBoxItem>();
      minomatSerialNumbers.Sort();
      minomatSerialNumbers.Insert(0, this._selectAllText);
      foreach (string minomatSerialNumber in minomatSerialNumbers)
        this.MinomatsList.Add(new CheckableComboBoxItem()
        {
          Text = minomatSerialNumber
        });
      this.OnPropertyChanged("MinomatsList");
      this._selectedMinomats.Clear();
      this.MinomatsList.ForEach((Action<CheckableComboBoxItem>) (item =>
      {
        item.IsChecked = true;
        this._selectedMinomats.Add(item.Text);
      }));
      this.SelectedMinomatsText = this._selectAllText;
    }

    public List<CheckableComboBoxItem> StatesList { get; private set; }

    private void InitStatesList()
    {
      this.StatesList = new List<CheckableComboBoxItem>();
      this.StatesList.Add(new CheckableComboBoxItem()
      {
        Text = Resources.MSS_MeterStatus_Registered
      });
      this.StatesList.Add(new CheckableComboBoxItem()
      {
        Text = Resources.MSS_MeterStatus_NotRegistered
      });
      this.StatesList.Sort((Comparison<CheckableComboBoxItem>) ((item1, item2) => item2.Text.CompareTo(item1.Text)));
      this.StatesList.Insert(0, new CheckableComboBoxItem()
      {
        Text = this._selectAllText
      });
      this.OnPropertyChanged("StatesList");
      this._selectedStates.Clear();
      this.StatesList.ForEach((Action<CheckableComboBoxItem>) (item =>
      {
        item.IsChecked = true;
        this._selectedStates.Add(item.Text);
      }));
      this.SelectedStatesText = this._selectAllText;
    }

    private void FilterTenantInfoCollection()
    {
      bool flag1 = this._selectedAddresses.Count == this.AddressList.Count;
      bool flag2 = this._selectedFloors.Count == this.FloorList.Count;
      bool flag3 = this._selectedPositions.Count == this.PositionList.Count;
      this._filteredTenantsInfoCollection = new ObservableCollection<TenantInfo>();
      foreach (TenantInfo fullTenantInfo in this._fullTenantInfos)
      {
        if ((flag1 || this._selectedAddresses.Contains(fullTenantInfo.Address)) & (flag2 || this._selectedFloors.Contains(fullTenantInfo.Tenant?.FloorNr + "." + fullTenantInfo.Tenant?.FloorName)) & (flag3 || this._selectedPositions.Contains(fullTenantInfo.Tenant?.ApartmentNr + " " + fullTenantInfo.Tenant?.Direction)))
          this._filteredTenantsInfoCollection.Add(fullTenantInfo);
      }
      this.OnPropertyChanged("FilteredTenantsInfoCollection");
    }

    private void FilterMeterInfoCollection()
    {
      bool flag1 = this._selectedMinomats.Count == this.MinomatsList.Count;
      bool flag2 = this._selectedStates.Count == this.StatesList.Count;
      this._filteredMetersInfoCollection = new ObservableCollection<MeterInfo>();
      foreach (MeterInfo fullMetersInfo in this._fullMetersInfoCollection)
      {
        MeterInfo meterInfo = fullMetersInfo;
        if ((flag1 || this._meterGuidsWithMinomatSN.Where<Tuple<Guid, string>>((Func<Tuple<Guid, string>, bool>) (item => item.Item1 == meterInfo.Meter.Id)).ToList<Tuple<Guid, string>>().Any<Tuple<Guid, string>>((Func<Tuple<Guid, string>, bool>) (element => this._selectedMinomats.Contains(element.Item2)))) & (flag2 || this.IsMeterStateInSelectedStates(meterInfo)))
          this._filteredMetersInfoCollection.Add(meterInfo);
      }
      this.OnPropertyChanged("FilteredMetersInfoCollection");
    }

    private bool IsMeterStateInSelectedStates(MeterInfo meterInfo)
    {
      return this._selectedStates.Contains(Resources.MSS_MeterStatus_Registered) && meterInfo.Registered || this._selectedStates.Contains(Resources.MSS_MeterStatus_NotRegistered) && !meterInfo.Registered;
    }

    public ICommand OnCheckChangedAddressCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          CheckableComboBoxItem checkableComboBoxItem1 = parameter as CheckableComboBoxItem;
          CheckableComboBoxItem checkableComboBoxItem2 = this.AddressList.FirstOrDefault<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.Text == this._selectAllText));
          if (checkableComboBoxItem1 == checkableComboBoxItem2)
          {
            if (checkableComboBoxItem2.IsChecked)
            {
              this._selectedAddresses.Clear();
              this.AddressList.ForEach((Action<CheckableComboBoxItem>) (item =>
              {
                item.IsChecked = true;
                this._selectedAddresses.Add(item.Text);
              }));
              this.SelectedAddressesText = checkableComboBoxItem2.Text;
            }
            else
            {
              this._selectedAddresses.Clear();
              this.AddressList.ForEach((Action<CheckableComboBoxItem>) (item => item.IsChecked = false));
              this.SelectedAddressesText = string.Empty;
            }
          }
          else
          {
            checkableComboBoxItem2.IsChecked = this.AddressList.Count<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)) == this.AddressList.Count - 1 && !this.AddressList[0].IsChecked;
            this._selectedAddresses = this.AddressList.Where<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)).Select<CheckableComboBoxItem, string>((Func<CheckableComboBoxItem, string>) (item => item.Text)).ToList<string>();
            this.SelectedAddressesText = this._selectedAddresses.Any<string>() ? (this._selectedAddresses.Count<string>() == this.AddressList.Count ? this._selectAllText : string.Join("; ", (IEnumerable<string>) this._selectedAddresses)) : string.Empty;
          }
          this.FilterTenantInfoCollection();
        }));
      }
    }

    public ICommand OnCheckChangedFloorCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          CheckableComboBoxItem checkableComboBoxItem1 = parameter as CheckableComboBoxItem;
          CheckableComboBoxItem checkableComboBoxItem2 = this.FloorList.FirstOrDefault<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.Text == this._selectAllText));
          if (checkableComboBoxItem1 == checkableComboBoxItem2)
          {
            if (checkableComboBoxItem2.IsChecked)
            {
              this._selectedFloors.Clear();
              this.FloorList.ForEach((Action<CheckableComboBoxItem>) (item =>
              {
                item.IsChecked = true;
                this._selectedFloors.Add(item.Text);
              }));
              this.SelectedFloorsText = checkableComboBoxItem2.Text;
            }
            else
            {
              this._selectedFloors.Clear();
              this.FloorList.ForEach((Action<CheckableComboBoxItem>) (item => item.IsChecked = false));
              this.SelectedFloorsText = string.Empty;
            }
          }
          else
          {
            checkableComboBoxItem2.IsChecked = this.FloorList.Count<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)) == this.FloorList.Count - 1 && !this.FloorList[0].IsChecked;
            this._selectedFloors = this.FloorList.Where<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)).Select<CheckableComboBoxItem, string>((Func<CheckableComboBoxItem, string>) (item => item.Text)).ToList<string>();
            this.SelectedFloorsText = this._selectedFloors.Any<string>() ? (this._selectedFloors.Count<string>() == this.FloorList.Count ? this._selectAllText : string.Join("; ", (IEnumerable<string>) this._selectedFloors)) : string.Empty;
          }
          this.FilterTenantInfoCollection();
        }));
      }
    }

    public ICommand OnCheckChangedPositionCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          CheckableComboBoxItem checkableComboBoxItem1 = parameter as CheckableComboBoxItem;
          CheckableComboBoxItem checkableComboBoxItem2 = this.PositionList.FirstOrDefault<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.Text == this._selectAllText));
          if (checkableComboBoxItem1 == checkableComboBoxItem2)
          {
            if (checkableComboBoxItem2.IsChecked)
            {
              this._selectedPositions.Clear();
              this.PositionList.ForEach((Action<CheckableComboBoxItem>) (item =>
              {
                item.IsChecked = true;
                this._selectedPositions.Add(item.Text);
              }));
              this.SelectedPositionsText = checkableComboBoxItem2.Text;
            }
            else
            {
              this._selectedPositions.Clear();
              this.PositionList.ForEach((Action<CheckableComboBoxItem>) (item => item.IsChecked = false));
              this.SelectedPositionsText = string.Empty;
            }
          }
          else
          {
            checkableComboBoxItem2.IsChecked = this.PositionList.Count<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)) == this.PositionList.Count - 1 && !this.PositionList[0].IsChecked;
            this._selectedPositions = this.PositionList.Where<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)).Select<CheckableComboBoxItem, string>((Func<CheckableComboBoxItem, string>) (item => item.Text)).ToList<string>();
            this.SelectedPositionsText = this._selectedPositions.Any<string>() ? (this._selectedPositions.Count<string>() == this.PositionList.Count ? this._selectAllText : string.Join("; ", (IEnumerable<string>) this._selectedPositions)) : string.Empty;
          }
          this.FilterTenantInfoCollection();
        }));
      }
    }

    public ICommand OnCheckChangedMinomatCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          CheckableComboBoxItem checkableComboBoxItem1 = parameter as CheckableComboBoxItem;
          CheckableComboBoxItem checkableComboBoxItem2 = this.MinomatsList.FirstOrDefault<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.Text == this._selectAllText));
          if (checkableComboBoxItem1 == checkableComboBoxItem2)
          {
            if (checkableComboBoxItem2.IsChecked)
            {
              this._selectedMinomats.Clear();
              this.MinomatsList.ForEach((Action<CheckableComboBoxItem>) (item =>
              {
                item.IsChecked = true;
                this._selectedMinomats.Add(item.Text);
              }));
              this.SelectedMinomatsText = checkableComboBoxItem2.Text;
            }
            else
            {
              this._selectedMinomats.Clear();
              this.MinomatsList.ForEach((Action<CheckableComboBoxItem>) (item => item.IsChecked = false));
              this.SelectedMinomatsText = string.Empty;
            }
          }
          else
          {
            checkableComboBoxItem2.IsChecked = this.MinomatsList.Count<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)) == this.MinomatsList.Count - 1 && !this.MinomatsList[0].IsChecked;
            this._selectedMinomats = this.MinomatsList.Where<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)).Select<CheckableComboBoxItem, string>((Func<CheckableComboBoxItem, string>) (item => item.Text)).ToList<string>();
            this.SelectedMinomatsText = this._selectedMinomats.Any<string>() ? (this._selectedMinomats.Count<string>() == this.MinomatsList.Count ? this._selectAllText : string.Join("; ", (IEnumerable<string>) this._selectedMinomats)) : string.Empty;
          }
          this.FilterMeterInfoCollection();
        }));
      }
    }

    public ICommand OnCheckChangedStateCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          CheckableComboBoxItem checkableComboBoxItem1 = parameter as CheckableComboBoxItem;
          CheckableComboBoxItem checkableComboBoxItem2 = this.StatesList.FirstOrDefault<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.Text == this._selectAllText));
          if (checkableComboBoxItem1 == checkableComboBoxItem2)
          {
            if (checkableComboBoxItem2.IsChecked)
            {
              this._selectedStates.Clear();
              this.StatesList.ForEach((Action<CheckableComboBoxItem>) (item =>
              {
                item.IsChecked = true;
                this._selectedStates.Add(item.Text);
              }));
              this.SelectedStatesText = checkableComboBoxItem2.Text;
            }
            else
            {
              this._selectedStates.Clear();
              this.StatesList.ForEach((Action<CheckableComboBoxItem>) (item => item.IsChecked = false));
              this.SelectedStatesText = string.Empty;
            }
          }
          else
          {
            checkableComboBoxItem2.IsChecked = this.StatesList.Count<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)) == this.StatesList.Count - 1 && !this.StatesList[0].IsChecked;
            this._selectedStates = this.StatesList.Where<CheckableComboBoxItem>((Func<CheckableComboBoxItem, bool>) (item => item.IsChecked)).Select<CheckableComboBoxItem, string>((Func<CheckableComboBoxItem, string>) (item => item.Text)).ToList<string>();
            this.SelectedStatesText = this._selectedStates.Any<string>() ? (this._selectedStates.Count<string>() == this.StatesList.Count ? this._selectAllText : string.Join("; ", (IEnumerable<string>) this._selectedStates)) : string.Empty;
          }
          this.FilterMeterInfoCollection();
        }));
      }
    }

    public ICommand ShowDataCollectorsForMeter
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          StructureNodeDTO structureNodeDto = this._tenantsInfoCollection_SelectedMeter ?? this._tenantsInfoCollection_SelectedSubMeter;
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<ShowDataCollectorsForMeterViewModel>((IParameter) new ConstructorArgument("selectedMeter", (object) structureNodeDto), (IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory)));
        }));
      }
    }

    public ICommand ReadRoutingTableCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.BusyContent = Resources.MSS_Client_ReadingRoutingTable;
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            try
            {
              GMMMinomatConfigurator instance = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
              instance.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
              GMMMinomatConfiguratorResult gmmConfiguratorResult = instance.GetRoutingTable(this.MinomatMastersSelectedItem.MinomatMaster, out RoutingTable _);
              if (gmmConfiguratorResult.IsSuccess)
              {
                RoutingTable routingTable;
                this._minomatMasterRoutingTables.TryGetValue(this.MinomatMastersSelectedItem.MinomatMaster.Id, out routingTable);
                if (routingTable == null)
                  this._minomatMasterRoutingTables.Add(this.MinomatMastersSelectedItem.MinomatMaster.Id, routingTable);
                else
                  this._minomatMasterRoutingTables[this.MinomatMastersSelectedItem.MinomatMaster.Id] = routingTable;
                int numberOfReceivedSlaves = 0;
                this.FullMinomatMastersInfoCollection.FirstOrDefault<MinomatMasterInfo>((Func<MinomatMasterInfo, bool>) (item => item.MinomatMaster.Id == this.MinomatMastersSelectedItem.MinomatMaster.Id))?.MinomatSlavesList.ForEach((Action<MinomatSlaveInfo>) (slave =>
                {
                  RoutingRow routingRow = routingTable.FirstOrDefault<RoutingRow>((Func<RoutingRow, bool>) (x => x.NodeId.ToString() == slave.NodeId));
                  if (routingRow == null)
                    return;
                  slave.HopCount = ((int) routingRow.HopCount).ToString();
                  slave.RSSI = routingRow.RSSI_dBm.ToString() + " dBm";
                  ++numberOfReceivedSlaves;
                }));
                Guid selectedMasterId = this._minomatMastersSelectedItem.MinomatMaster.Id;
                MinomatMasterInfo minomatMasterInfo = this.FullMinomatMastersInfoCollection.FirstOrDefault<MinomatMasterInfo>((Func<MinomatMasterInfo, bool>) (item => item.MinomatMaster.Id == selectedMasterId));
                if (minomatMasterInfo != null)
                {
                  minomatMasterInfo.ReceivedSlavesNumber = numberOfReceivedSlaves;
                  int count = minomatMasterInfo.MinomatSlavesList != null ? minomatMasterInfo.MinomatSlavesList.Count : 0;
                  minomatMasterInfo.ReceivedSlavesString = numberOfReceivedSlaves.ToString() + " / " + (object) count;
                  minomatMasterInfo.Status = Resources.MSS_Client_ReadStatus;
                  this.UpdateMasterAndSlaveImagesAndSlaveStatuses(minomatMasterInfo);
                }
                this.MinomatMastersSelectedItem = this.FullMinomatMastersInfoCollection.FirstOrDefault<MinomatMasterInfo>((Func<MinomatMasterInfo, bool>) (item => item.MinomatMaster.Id == selectedMasterId));
                this.IsShowRoutingTableButtonEnabled = this._minomatMastersSelectedItem != null && this._minomatMasterRoutingTables.ContainsKey(this._minomatMastersSelectedItem.MinomatMaster.Id);
              }
              else
                Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, gmmConfiguratorResult.Message, false)));
              this.ShowProgressCircle = false;
            }
            catch (Exception ex)
            {
              Application.Current.Dispatcher.Invoke((Action) (() => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, ex.Message, false)))));
            }
            finally
            {
              this.ShowProgressCircle = false;
            }
          }));
        }));
      }
    }

    public ICommand ShowRoutingTableCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<ShowRoutingTableViewModel>((IParameter) new ConstructorArgument("minomatMastersInfoCollection", (object) this._fullMinomatMastersInfoCollection), (IParameter) new ConstructorArgument("selectedMinomatMasterGuid", (object) this.MinomatMastersSelectedItem.MinomatMaster.Id), (IParameter) new ConstructorArgument("minomatMasterRoutingTables", (object) this._minomatMasterRoutingTables), (IParameter) new ConstructorArgument("windowFactory", (object) this._windowFactory)))));
      }
    }

    public ObservableCollection<TenantInfo> FilteredTenantsInfoCollection
    {
      get => this._filteredTenantsInfoCollection;
      set
      {
        this._filteredTenantsInfoCollection = value;
        this.OnPropertyChanged(nameof (FilteredTenantsInfoCollection));
      }
    }

    public ObservableCollection<MinomatMasterInfo> FullMinomatMastersInfoCollection
    {
      get => this._fullMinomatMastersInfoCollection;
      set
      {
        this._fullMinomatMastersInfoCollection = value;
        this.OnPropertyChanged(nameof (FullMinomatMastersInfoCollection));
      }
    }

    public ObservableCollection<MinomatSlaveInfo> MinomatSlavesInfoCollection
    {
      get => this._minomatSlavesInfoCollection;
      set
      {
        this._minomatSlavesInfoCollection = value;
        this.OnPropertyChanged(nameof (MinomatSlavesInfoCollection));
      }
    }

    public ObservableCollection<MeterInfo> FilteredMetersInfoCollection
    {
      get => this._filteredMetersInfoCollection;
      set
      {
        this._filteredMetersInfoCollection = value;
        this.OnPropertyChanged(nameof (FilteredMetersInfoCollection));
      }
    }

    public int TotalDevices
    {
      get => this._totalDevices;
      set
      {
        this._totalDevices = value;
        this.OnPropertyChanged(nameof (TotalDevices));
      }
    }

    public bool IsShowDataCollectorsForMeterEnabled
    {
      get => this._isShowDataCollectorsForMeterEnabled;
      set
      {
        this._isShowDataCollectorsForMeterEnabled = value;
        this.OnPropertyChanged(nameof (IsShowDataCollectorsForMeterEnabled));
      }
    }

    public string RegisteredDevicesImageLocation
    {
      get => this._registeredDevicesImageLocation;
      set
      {
        this._registeredDevicesImageLocation = value;
        this.OnPropertyChanged(nameof (RegisteredDevicesImageLocation));
      }
    }

    public string RegisteredDevicesPercentage
    {
      get => this._registeredDevicesPercentage;
      set
      {
        this._registeredDevicesPercentage = value;
        this.OnPropertyChanged(nameof (RegisteredDevicesPercentage));
      }
    }

    public string SelectedAddressesText
    {
      get => this._selectedAddressesText;
      set
      {
        this._selectedAddressesText = value;
        this.OnPropertyChanged(nameof (SelectedAddressesText));
      }
    }

    public string SelectedFloorsText
    {
      get => this._selectedFloorsText;
      set
      {
        this._selectedFloorsText = value;
        this.OnPropertyChanged(nameof (SelectedFloorsText));
      }
    }

    public string SelectedPositionsText
    {
      get => this._selectedPositionsText;
      set
      {
        this._selectedPositionsText = value;
        this.OnPropertyChanged(nameof (SelectedPositionsText));
      }
    }

    public string SelectedMinomatsText
    {
      get => this._selectedMinomatsText;
      set
      {
        this._selectedMinomatsText = value;
        this.OnPropertyChanged(nameof (SelectedMinomatsText));
      }
    }

    public string SelectedStatesText
    {
      get => this._selectedStatesText;
      set
      {
        this._selectedStatesText = value;
        this.OnPropertyChanged(nameof (SelectedStatesText));
      }
    }

    public string BusyContent
    {
      get => this._busyContent;
      set
      {
        this._busyContent = value;
        this.OnPropertyChanged(nameof (BusyContent));
      }
    }

    public bool ShowProgressCircle
    {
      get => this._showProgressCircle;
      set
      {
        this._showProgressCircle = value;
        this.OnPropertyChanged(nameof (ShowProgressCircle));
      }
    }

    public TenantInfo SelectedTenantInfo
    {
      get => this._selectedTenantInfo;
      set
      {
        this._selectedTenantInfo = value;
        this.OnPropertyChanged(nameof (SelectedTenantInfo));
        this.IsShowDataCollectorsForMeterEnabled = false;
      }
    }

    public StructureNodeDTO TenantsInfoCollection_SelectedMeter
    {
      get => this._tenantsInfoCollection_SelectedMeter;
      set
      {
        this._tenantsInfoCollection_SelectedMeter = value;
        this.OnPropertyChanged(nameof (TenantsInfoCollection_SelectedMeter));
        this._selectedTenantInfo = (TenantInfo) null;
        this.OnPropertyChanged("SelectedTenantInfo");
        this._tenantsInfoCollection_SelectedSubMeter = (StructureNodeDTO) null;
        this.OnPropertyChanged("TenantsInfoCollection_SelectedSubMeter");
        this.IsShowDataCollectorsForMeterEnabled = value != null && value.NodeType.Name == "Meter";
      }
    }

    public StructureNodeDTO TenantsInfoCollection_SelectedSubMeter
    {
      get => this._tenantsInfoCollection_SelectedSubMeter;
      set
      {
        this._tenantsInfoCollection_SelectedSubMeter = value;
        this.OnPropertyChanged(nameof (TenantsInfoCollection_SelectedSubMeter));
        this._selectedTenantInfo = (TenantInfo) null;
        this.OnPropertyChanged("SelectedTenantInfo");
        this._tenantsInfoCollection_SelectedMeter = (StructureNodeDTO) null;
        this.OnPropertyChanged("TenantsInfoCollection_SelectedMeter");
        this.IsShowDataCollectorsForMeterEnabled = value != null && value.NodeType.Name == "Meter";
      }
    }

    public bool IsTenantReportTabSelected
    {
      get => this._isTenantReportTabSelected;
      set
      {
        this._isTenantReportTabSelected = value;
        if (value)
          this.LoadTenantReportTab();
        this.OnPropertyChanged(nameof (IsTenantReportTabSelected));
      }
    }

    public bool IsNetworkReportTabSelected
    {
      get => this._isNetworkReportTabSelected;
      set
      {
        this._isNetworkReportTabSelected = value;
        if (value)
          this.LoadNetworkReportTab();
        this.OnPropertyChanged(nameof (IsNetworkReportTabSelected));
      }
    }

    public bool IsDeviceReportTabSelected
    {
      get => this._isDeviceReportTabSelected;
      set
      {
        this._isDeviceReportTabSelected = value;
        if (value)
          this.LoadDeviceReportTab();
        this.OnPropertyChanged(nameof (IsDeviceReportTabSelected));
      }
    }

    public bool IsSlavesGridVisible
    {
      get => this._isSlavesGridVisible;
      set
      {
        this._isSlavesGridVisible = value;
        this.OnPropertyChanged(nameof (IsSlavesGridVisible));
      }
    }

    public MinomatMasterInfo MinomatMastersSelectedItem
    {
      get => this._minomatMastersSelectedItem;
      set
      {
        this._minomatMastersSelectedItem = value;
        this.MinomatSlavesInfoCollection = (ObservableCollection<MinomatSlaveInfo>) null;
        if (value != null)
        {
          this.MinomatSlavesInfoCollection = new ObservableCollection<MinomatSlaveInfo>();
          foreach (MinomatSlaveInfo minomatSlaves in value.MinomatSlavesList)
            this.MinomatSlavesInfoCollection.Add(minomatSlaves);
        }
        this.IsSlavesGridVisible = value != null;
        MinomatRadioDetails minomatRadioDetails = this._masterRadioDetails == null || value == null ? (MinomatRadioDetails) null : this._masterRadioDetails.FirstOrDefault<MinomatRadioDetails>((Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == this._minomatMastersSelectedItem.MinomatMaster.Id));
        this.IsReadRoutingTableButtonEnabled = value != null && minomatRadioDetails != null && minomatRadioDetails.LastStartOn.HasValue;
        this.IsShowRoutingTableButtonEnabled = value != null && this._minomatMasterRoutingTables.ContainsKey(this._minomatMastersSelectedItem.MinomatMaster.Id);
        this.OnPropertyChanged(nameof (MinomatMastersSelectedItem));
      }
    }

    public bool IsReadRoutingTableButtonEnabled
    {
      get => this._isReadRoutingTableButtonEnabled;
      set
      {
        this._isReadRoutingTableButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsReadRoutingTableButtonEnabled));
      }
    }

    public bool IsShowRoutingTableButtonEnabled
    {
      get => this._isShowRoutingTableButtonEnabled;
      set
      {
        this._isShowRoutingTableButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsShowRoutingTableButtonEnabled));
      }
    }
  }
}


--- ShowDataCollectorsForMeterViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.ShowDataCollectorsForMeterViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Core.Model.Meters;
using MSS.DTO.Meters;
using MSS.Interfaces;
using MSS.Localisation;
using MVVM.ViewModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class ShowDataCollectorsForMeterViewModel : ViewModelBase
  {
    private string _title;
    private List<MinomatMeter> _minomatMeters;

    public ShowDataCollectorsForMeterViewModel(
      StructureNodeDTO selectedMeter,
      IRepositoryFactory repositoryFactory)
    {
      this.Title = Resources.MSS_Client_ShowDataCollectorsTitle + " " + (selectedMeter.Entity is MeterDTO entity ? entity.SerialNumber : (string) null);
      this.MinomatMeters = repositoryFactory.GetRepository<MinomatMeter>().Where((Expression<Func<MinomatMeter, bool>>) (item => item.Meter.Id == (selectedMeter.Entity as MeterDTO).Id)).ToList<MinomatMeter>();
    }

    public string Title
    {
      get => this._title;
      set
      {
        this._title = value;
        this.OnPropertyChanged(nameof (Title));
      }
    }

    public List<MinomatMeter> MinomatMeters
    {
      get => this._minomatMeters;
      set
      {
        this._minomatMeters = value;
        this.OnPropertyChanged(nameof (MinomatMeters));
      }
    }
  }
}


--- ShowRoutingTableViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.ShowRoutingTableViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MinomatHandler;
using MSS.Business.DTO;
using MSS.Interfaces;
using MSS.Localisation;
using MVVM.ViewModel;
using Ninject;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class ShowRoutingTableViewModel : ViewModelBase
  {
    private ObservableCollection<MinomatMasterInfo> _minomatMastersInfoCollection;
    private Dictionary<Guid, RoutingTable> _minomatMasterRoutingTables;
    private IWindowFactory _windowFactory;
    private Dictionary<Guid, string> _minomatMastersWithRoutingTables_SerialNumbers;
    private KeyValuePair<Guid, string> _selectedMinomatMaster;
    private ObservableCollection<StructureNodeDTO> _minomatTreeCollection;
    private StructureNodeDTO _minomatTree_SelectedMinomat;
    private bool _areMinomatDetailsVisible;
    private ObservableCollection<StructureNodeDTO> _unregisteredSlaves;

    [Inject]
    public ShowRoutingTableViewModel(
      ObservableCollection<MinomatMasterInfo> minomatMastersInfoCollection,
      Guid selectedMinomatMasterGuid,
      Dictionary<Guid, RoutingTable> minomatMasterRoutingTables,
      IWindowFactory windowFactory)
    {
      this._windowFactory = windowFactory;
      this._minomatMastersInfoCollection = minomatMastersInfoCollection;
      this._minomatMasterRoutingTables = minomatMasterRoutingTables;
      if (selectedMinomatMasterGuid != Guid.Empty)
        this.SelectedMinomatMaster = this.MinomatMastersWithRoutingTables_SerialNumbers.FirstOrDefault<KeyValuePair<Guid, string>>((Func<KeyValuePair<Guid, string>, bool>) (item => item.Key == selectedMinomatMasterGuid));
      this.AreMinomatDetailsVisible = false;
    }

    private void CreateRegisteredMinomatTree()
    {
      MinomatMasterInfo minomatMaster = this._minomatMastersInfoCollection.FirstOrDefault<MinomatMasterInfo>((Func<MinomatMasterInfo, bool>) (item => item.MinomatMaster.Id == this._selectedMinomatMaster.Key));
      RoutingTable routingTable = (RoutingTable) null;
      if (minomatMaster != null)
        this._minomatMasterRoutingTables.TryGetValue(minomatMaster.MinomatMaster.Id, out routingTable);
      if (minomatMaster == null || routingTable == null)
        return;
      Dictionary<string, MinomatSlaveInfo> withMinomatSlaves = this.GetNodeIdsWithMinomatSlaves(minomatMaster);
      StructureNodeDTO minomatTree = new StructureNodeDTO();
      minomatTree.Entity = (object) new MinomatTreeInfoDTO()
      {
        SerialNumber = minomatMaster.MinomatMaster.GsmId,
        NodeID = 1,
        Letter = "M",
        ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-green.png"
      };
      int count = routingTable.Count;
      bool[] source = new bool[count];
      for (int index = 0; index < count; ++index)
        source[index] = false;
      bool[] flagArray = (bool[]) null;
      List<string> list = this.GetAllSlaves().Select<MinomatSlaveInfo, string>((Func<MinomatSlaveInfo, string>) (item => item.NodeId)).ToList<string>();
      if (((IEnumerable<bool>) source).Any<bool>())
      {
        while (((IEnumerable<bool>) source).Any<bool>((Func<bool, bool>) (item => !item)))
        {
          foreach (RoutingRow routingRow in (List<RoutingRow>) routingTable)
          {
            RoutingRow routingTableEntry = routingRow;
            int index = routingTable.FindIndex((Predicate<RoutingRow>) (item => (int) item.NodeId == (int) routingTableEntry.NodeId));
            if (!source[index])
            {
              StructureNodeDTO parent = this.GetParent(routingTableEntry, minomatTree);
              if (parent != null)
              {
                if (parent.SubNodes == null)
                  parent.SubNodes = new ObservableCollection<StructureNodeDTO>();
                MinomatSlaveInfo minomatSlaveInfo;
                withMinomatSlaves.TryGetValue(((int) routingTableEntry.NodeId).ToString(), out minomatSlaveInfo);
                MinomatTreeInfoDTO minomatTreeInfoDto1 = new MinomatTreeInfoDTO();
                minomatTreeInfoDto1.SerialNumber = !string.IsNullOrEmpty(minomatSlaveInfo?.MinomatSlave.GsmId) ? minomatSlaveInfo?.MinomatSlave.GsmId : Resources.MSS_Client_UnknownSlave;
                minomatTreeInfoDto1.Letter = "S";
                minomatTreeInfoDto1.NodeID = (int) routingTableEntry.NodeId;
                MinomatTreeInfoDTO minomatTreeInfoDto2 = minomatTreeInfoDto1;
                List<string> stringList = list;
                int num = minomatTreeInfoDto1.NodeID;
                string str1 = num.ToString();
                string str2 = stringList.Contains(str1) ? "pack://application:,,,/Styles;component/Images/Settings/light-green.png" : "";
                minomatTreeInfoDto2.ImageLocation = str2;
                minomatTreeInfoDto1.ParentID = (int) routingTableEntry.ParentNodeId;
                MinomatTreeInfoDTO minomatTreeInfoDto3 = minomatTreeInfoDto1;
                num = routingTableEntry.RSSI_dBm;
                string str3 = num.ToString() + " dBm";
                minomatTreeInfoDto3.RSSI = str3;
                MinomatTreeInfoDTO minomatTreeInfoDto4 = minomatTreeInfoDto1;
                num = (int) routingTableEntry.HopCount;
                string str4 = num.ToString();
                minomatTreeInfoDto4.HopCount = str4;
                minomatTreeInfoDto1.Floor = minomatSlaveInfo?.Floor;
                minomatTreeInfoDto1.Address = minomatSlaveInfo?.Address;
                parent.SubNodes.Add(new StructureNodeDTO()
                {
                  Entity = (object) minomatTreeInfoDto1
                });
              }
              source[index] = true;
            }
          }
          flagArray = source;
        }
      }
      this.MinomatTreeCollection = new ObservableCollection<StructureNodeDTO>();
      this.MinomatTreeCollection.Add(minomatTree);
    }

    private bool AreArraysEqual(bool[] firstArray, bool[] secondArray)
    {
      if (firstArray == null && secondArray == null)
        return true;
      if (firstArray != null && secondArray != null && firstArray.Length != secondArray.Length || firstArray == null && secondArray != null || firstArray != null && secondArray == null || firstArray == null || secondArray == null || firstArray.Length != secondArray.Length)
        return false;
      for (int index = 0; index < firstArray.Length; ++index)
      {
        if (firstArray[index] != secondArray[index])
          return false;
      }
      return true;
    }

    private StructureNodeDTO GetParent(RoutingRow routingTableEntry, StructureNodeDTO minomatTree)
    {
      StructureNodeDTO parent = (StructureNodeDTO) null;
      int? nullable = minomatTree.Entity is MinomatTreeInfoDTO entity ? new int?(entity.NodeID) : new int?();
      int parentNodeId = (int) routingTableEntry.ParentNodeId;
      if (nullable.GetValueOrDefault() == parentNodeId && nullable.HasValue)
        parent = minomatTree;
      else
        this.WalkMinomatTreeInfoAndGetParent(routingTableEntry.ParentNodeId, minomatTree, ref parent);
      return parent;
    }

    private void WalkMinomatTreeInfoAndGetParent(
      ushort parentNodeId,
      StructureNodeDTO minomatTree,
      ref StructureNodeDTO parent)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) minomatTree.SubNodes)
      {
        if (subNode.Entity is MinomatTreeInfoDTO entity && entity.NodeID == (int) parentNodeId)
          parent = subNode;
        else
          this.WalkMinomatTreeInfoAndGetParent(parentNodeId, subNode, ref parent);
      }
    }

    private Dictionary<string, MinomatSlaveInfo> GetNodeIdsWithMinomatSlaves(
      MinomatMasterInfo minomatMaster)
    {
      Dictionary<string, MinomatSlaveInfo> nodeIdsWithSlaves = new Dictionary<string, MinomatSlaveInfo>();
      foreach (MinomatSlaveInfo minomatSlaves in minomatMaster.MinomatSlavesList)
      {
        nodeIdsWithSlaves.Add(minomatSlaves.NodeId, minomatSlaves);
        this.WalkMinomatSlaves(minomatSlaves, ref nodeIdsWithSlaves);
      }
      return nodeIdsWithSlaves;
    }

    private void WalkMinomatSlaves(
      MinomatSlaveInfo slave,
      ref Dictionary<string, MinomatSlaveInfo> nodeIdsWithSlaves)
    {
      if (slave.MinomatSlavesList == null)
        return;
      foreach (MinomatSlaveInfo minomatSlaves in slave.MinomatSlavesList)
      {
        nodeIdsWithSlaves.Add(minomatSlaves.NodeId, minomatSlaves);
        this.WalkMinomatSlaves(minomatSlaves, ref nodeIdsWithSlaves);
      }
    }

    private void GetUnregisteredSlaves()
    {
      List<StructureNodeDTO> registeredSlaves = this.GetRegisteredSlaves();
      List<MinomatSlaveInfo> allSlaves = this.GetAllSlaves();
      this._unregisteredSlaves = new ObservableCollection<StructureNodeDTO>();
      foreach (MinomatSlaveInfo minomatSlaveInfo in allSlaves)
      {
        string nodeIdToSearchFor = minomatSlaveInfo.NodeId;
        if (!registeredSlaves.Exists((Predicate<StructureNodeDTO>) (item => (item?.Entity is MinomatTreeInfoDTO entity ? entity.NodeID.ToString() : (string) null) == nodeIdToSearchFor)))
        {
          MinomatTreeInfoDTO minomatTreeInfoDto = new MinomatTreeInfoDTO()
          {
            SerialNumber = minomatSlaveInfo.MinomatSlave.GsmId,
            ImageLocation = "pack://application:,,,/Styles;component/Images/Settings/light-red.png",
            Letter = "S"
          };
          this._unregisteredSlaves.Add(new StructureNodeDTO()
          {
            Entity = (object) minomatTreeInfoDto
          });
        }
      }
      this.OnPropertyChanged("UnregisteredSlaves");
    }

    private List<StructureNodeDTO> GetRegisteredSlaves()
    {
      List<StructureNodeDTO> registeredSlaves = new List<StructureNodeDTO>();
      this.WalkCollectionAndGetNodes(this.MinomatTreeCollection.First<StructureNodeDTO>(), ref registeredSlaves);
      return registeredSlaves;
    }

    private List<MinomatSlaveInfo> GetAllSlaves()
    {
      MinomatMasterInfo minomatMasterInfo = this._minomatMastersInfoCollection.FirstOrDefault<MinomatMasterInfo>((Func<MinomatMasterInfo, bool>) (item => item.MinomatMaster.Id == this.SelectedMinomatMaster.Key));
      if (minomatMasterInfo == null)
        return (List<MinomatSlaveInfo>) null;
      List<MinomatSlaveInfo> foundSlaves = new List<MinomatSlaveInfo>();
      if (minomatMasterInfo.MinomatSlavesList != null && minomatMasterInfo.MinomatSlavesList.Any<MinomatSlaveInfo>())
        this.GetSlavesFromList(minomatMasterInfo.MinomatSlavesList, ref foundSlaves);
      return minomatMasterInfo.MinomatSlavesList;
    }

    private void GetSlavesFromList(
      List<MinomatSlaveInfo> slavesToSearch,
      ref List<MinomatSlaveInfo> foundSlaves)
    {
      foreach (MinomatSlaveInfo minomatSlaveInfo in slavesToSearch)
      {
        foundSlaves.Add(minomatSlaveInfo);
        if (minomatSlaveInfo.MinomatSlavesList != null && minomatSlaveInfo.MinomatSlavesList.Any<MinomatSlaveInfo>())
          this.GetSlavesFromList(minomatSlaveInfo.MinomatSlavesList, ref foundSlaves);
      }
    }

    private void WalkCollectionAndGetNodes(
      StructureNodeDTO rootNode,
      ref List<StructureNodeDTO> registeredSlaves)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) rootNode.SubNodes)
      {
        registeredSlaves.Add(subNode);
        this.WalkCollectionAndGetNodes(subNode, ref registeredSlaves);
      }
    }

    public Dictionary<Guid, string> MinomatMastersWithRoutingTables_SerialNumbers
    {
      get
      {
        this._minomatMastersWithRoutingTables_SerialNumbers = new Dictionary<Guid, string>();
        foreach (MinomatMasterInfo minomatMastersInfo in (Collection<MinomatMasterInfo>) this._minomatMastersInfoCollection)
        {
          if (this._minomatMasterRoutingTables.ContainsKey(minomatMastersInfo.MinomatMaster.Id))
            this._minomatMastersWithRoutingTables_SerialNumbers.Add(minomatMastersInfo.MinomatMaster.Id, minomatMastersInfo.MinomatMaster.RadioId);
        }
        return this._minomatMastersWithRoutingTables_SerialNumbers;
      }
    }

    public KeyValuePair<Guid, string> SelectedMinomatMaster
    {
      get => this._selectedMinomatMaster;
      set
      {
        this._selectedMinomatMaster = value;
        this.OnPropertyChanged(nameof (SelectedMinomatMaster));
        this.CreateRegisteredMinomatTree();
        this.GetUnregisteredSlaves();
      }
    }

    public ObservableCollection<StructureNodeDTO> MinomatTreeCollection
    {
      get => this._minomatTreeCollection;
      set
      {
        this._minomatTreeCollection = value;
        this.OnPropertyChanged(nameof (MinomatTreeCollection));
      }
    }

    public StructureNodeDTO MinomatTree_SelectedMinomat
    {
      get => this._minomatTree_SelectedMinomat;
      set
      {
        this._minomatTree_SelectedMinomat = value;
        this.AreMinomatDetailsVisible = value != null;
        this.OnPropertyChanged(nameof (MinomatTree_SelectedMinomat));
      }
    }

    public bool AreMinomatDetailsVisible
    {
      get => this._areMinomatDetailsVisible;
      set
      {
        this._areMinomatDetailsVisible = value;
        this.OnPropertyChanged(nameof (AreMinomatDetailsVisible));
      }
    }

    public ObservableCollection<StructureNodeDTO> UnregisteredSlaves
    {
      get => this._unregisteredSlaves;
      set
      {
        this._unregisteredSlaves = value;
        this.OnPropertyChanged(nameof (UnregisteredSlaves));
      }
    }
  }
}


--- StructureOrdersViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.StructureOrdersViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Events;
using MSS.Business.Modules.LicenseManagement;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Orders;
using MSS.Core.Model.Structures;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Orders;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS_Client.Utils;
using MSS_Client.ViewModel.GenericProgressDialog;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate.Linq;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Windows;
using System.Windows.Input;
using System.Windows.Threading;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class StructureOrdersViewModel : ViewModelBase
  {
    private readonly IRepository<StructureNode> _structureNodeRepository;
    private readonly IRepository<StructureNodeType> _structureNodeTypeRepository;
    private readonly IRepository<StructureNodeLinks> _structureNodeLinksRepository;
    private readonly IStructureNodeRepository _structureRepository;
    private readonly OrderDTO _selectedOrder;
    private readonly OrderTypeEnum _orderType;
    private readonly Guid _selectedRootStructureNodeId;
    private readonly DateTime _orderDueDate;
    private readonly DateTime _orderDueDateStart;
    private readonly DateTime _orderDueDateEnd;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly IWindowFactory _windowFactory;
    private bool _isBusy;
    private string _structureTypeFirstRadio;
    private bool _isExpanded;
    private string _structureTypeSecondRadio;
    private bool _isFirstRadioChecked;
    private bool _isSecondRadioChecked;
    private bool _radioButtonsVisibility;
    private bool _firstRadioButtonVisibility;
    private bool _secondRadioButtonVisibility;
    private StructureTypeEnum _selectedStructureType;
    private IEnumerable<StructureNodeDTO> _structureNodeCollection;
    private bool _isOKButtonVisible;
    private StructureNodeDTO _selectedStructureNodeItem;
    private bool _isRootNodeSelected;
    private bool _isShortDeviceNoVisible;
    private bool _isOkButtonEnabled;
    private bool _isOnlyDevicesWithNoReadingsChecked;
    private bool _isOnlyDevicesWithNoReadingsRangeChecked;
    private bool _isOnlyDevicesWithNoReadingsCheckBoxVisible;

    [Inject]
    public StructureOrdersViewModel(
      OrderDTO selectedOrder,
      OrderTypeEnum orderType,
      bool viewMode,
      Guid selectedRootStructureNodeId,
      DateTime orderDueDate,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
    {
      this._structureRepository = repositoryFactory.GetStructureNodeRepository();
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._structureNodeRepository = repositoryFactory.GetRepository<StructureNode>();
      this._structureNodeTypeRepository = repositoryFactory.GetRepository<StructureNodeType>();
      this._structureNodeLinksRepository = repositoryFactory.GetRepository<StructureNodeLinks>();
      this._selectedOrder = selectedOrder;
      this._orderType = orderType;
      this._selectedRootStructureNodeId = selectedRootStructureNodeId;
      this._orderDueDate = orderDueDate;
      this._orderDueDateStart = orderDueDate.AddDays(-3.0);
      this._orderDueDateEnd = orderDueDate;
      if (viewMode)
      {
        this.StructureNodeCollection = this.GetStructureNodeForOrder();
        foreach (StructureNodeDTO structureNode in this.StructureNodeCollection)
          structureNode.SubNodes = new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) structureNode.SubNodes.OrderBy<StructureNodeDTO, int>((Func<StructureNodeDTO, int>) (structure => !(structure.Entity is TenantDTO entity) ? structure.OrderNr : entity.TenantNr)));
        this.RadioButtonsVisibility = false;
        this.IsExpanded = true;
        StructureTypeEnum? structureType = this._selectedOrder.StructureType;
        StructureTypeEnum structureTypeEnum = StructureTypeEnum.Fixed;
        this.IsShortDeviceNoVisible = structureType.GetValueOrDefault() == structureTypeEnum && structureType.HasValue;
      }
      else
      {
        this.IsExpanded = false;
        this.RadioButtonsVisibility = true;
        bool flag1 = LicenseHelper.HasRightOnLicense(LicenseHelper.GetValidHardwareKey(), OperationEnum.PhysicalStructureView);
        bool flag2 = LicenseHelper.HasRightOnLicense(LicenseHelper.GetValidHardwareKey(), OperationEnum.FixedStructureView);
        switch (this._orderType)
        {
          case OrderTypeEnum.ReadingOrder:
            this.StructureTypeFirstRadio = CultureResources.GetValue("MSS_Client_Orders_PhysicalStructure");
            this.StructureTypeSecondRadio = CultureResources.GetValue("MSS_Client_Orders_FixedStructure");
            this.FirstRadioButtonVisibility = flag1;
            this.SecondRadioButtonVisibility = flag2;
            if (this.FirstRadioButtonVisibility)
              this.IsFirstRadioChecked = true;
            else if (this.SecondRadioButtonVisibility)
              this.IsSecondRadioChecked = true;
            this.IsOnlyDevicesWithNoReadingsCheckBoxVisible = true;
            this.SelectionMode = true;
            break;
          case OrderTypeEnum.InstallationOrder:
            this.StructureTypeFirstRadio = CultureResources.GetValue("MSS_Client_Orders_PhysicalStructure");
            this.StructureTypeSecondRadio = CultureResources.GetValue("MSS_Client_Orders_FixedStructure");
            this.FirstRadioButtonVisibility = flag1;
            this.SecondRadioButtonVisibility = flag2;
            if (this.FirstRadioButtonVisibility)
              this.IsFirstRadioChecked = true;
            if (this.SecondRadioButtonVisibility)
              this.IsSecondRadioChecked = true;
            this.IsOnlyDevicesWithNoReadingsCheckBoxVisible = false;
            this.SelectionMode = false;
            break;
        }
      }
      this.IsOKButtonVisible = !viewMode;
      EventPublisher.Register<LoadSubNodesForRoot>(new Action<LoadSubNodesForRoot>(this.LoadSubNodesForRootNode));
    }

    private StructuresManager GetStructuresManagerInstance()
    {
      return new StructuresManager(this._repositoryFactory);
    }

    private UsersManager GetUsersManagerInstance() => new UsersManager(this._repositoryFactory);

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        if (this._isBusy == value)
          return;
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    public string StructureTypeFirstRadio
    {
      get => this._structureTypeFirstRadio;
      set
      {
        this._structureTypeFirstRadio = value;
        this.OnPropertyChanged(nameof (StructureTypeFirstRadio));
      }
    }

    public bool IsExpanded
    {
      get => this._isExpanded;
      set
      {
        this._isExpanded = value;
        this.OnPropertyChanged(nameof (IsExpanded));
      }
    }

    public string StructureTypeSecondRadio
    {
      get => this._structureTypeSecondRadio;
      set
      {
        this._structureTypeSecondRadio = value;
        this.OnPropertyChanged(nameof (StructureTypeSecondRadio));
      }
    }

    public bool IsFirstRadioChecked
    {
      get => this._isFirstRadioChecked;
      set
      {
        this._isFirstRadioChecked = value;
        if (this._isFirstRadioChecked)
        {
          switch (this._orderType)
          {
            case OrderTypeEnum.ReadingOrder:
              this.SelectedStructureType = StructureTypeEnum.Physical;
              break;
            case OrderTypeEnum.InstallationOrder:
              this.SelectedStructureType = StructureTypeEnum.Physical;
              break;
          }
        }
        this.OnPropertyChanged(nameof (IsFirstRadioChecked));
      }
    }

    public bool IsSecondRadioChecked
    {
      get => this._isSecondRadioChecked;
      set
      {
        this._isSecondRadioChecked = value;
        if (this._isSecondRadioChecked)
          this.SelectedStructureType = StructureTypeEnum.Fixed;
        this.OnPropertyChanged(nameof (IsSecondRadioChecked));
      }
    }

    public bool RadioButtonsVisibility
    {
      get => this._radioButtonsVisibility;
      set
      {
        this._radioButtonsVisibility = value;
        this.OnPropertyChanged(nameof (RadioButtonsVisibility));
      }
    }

    public bool FirstRadioButtonVisibility
    {
      get => this._firstRadioButtonVisibility;
      set
      {
        this._firstRadioButtonVisibility = value;
        this.OnPropertyChanged(nameof (FirstRadioButtonVisibility));
      }
    }

    public bool SecondRadioButtonVisibility
    {
      get => this._secondRadioButtonVisibility;
      set
      {
        this._secondRadioButtonVisibility = value;
        this.OnPropertyChanged(nameof (SecondRadioButtonVisibility));
      }
    }

    public StructureTypeEnum SelectedStructureType
    {
      get => this._selectedStructureType;
      set
      {
        this._selectedStructureType = value;
        this.OnPropertyChanged(nameof (SelectedStructureType));
        this.IsShortDeviceNoVisible = this.SelectedStructureType == StructureTypeEnum.Fixed;
        this.OnPropertyChanged("IsShortDeviceNoVisible");
        this.StructureNodeCollection = (IEnumerable<StructureNodeDTO>) this.GetStructuresManagerInstance().GetStructureNodesCollection(this._selectedStructureType, true);
        this.IsExpanded = false;
        this.SetSelectedRootStructureNode();
      }
    }

    public IEnumerable<StructureNodeDTO> StructureNodeCollection
    {
      get => this._structureNodeCollection;
      set
      {
        this._structureNodeCollection = value;
        this.OnPropertyChanged(nameof (StructureNodeCollection));
      }
    }

    public bool IsOKButtonVisible
    {
      get => this._isOKButtonVisible;
      set
      {
        this._isOKButtonVisible = value;
        this.OnPropertyChanged(nameof (IsOKButtonVisible));
      }
    }

    public StructureNodeDTO SelectedStructureNodeItem
    {
      get => this._selectedStructureNodeItem;
      set
      {
        this._selectedStructureNodeItem = value;
        this.IsRootNodeSelected = this._selectedStructureNodeItem != null && this._selectedStructureNodeItem != null && this._selectedStructureNodeItem.RootNode == this._selectedStructureNodeItem;
        switch (this._orderType)
        {
          case OrderTypeEnum.ReadingOrder:
            this.IsOkButtonEnabled = true;
            break;
          case OrderTypeEnum.InstallationOrder:
            this.IsOkButtonEnabled = this.IsRootNodeSelected;
            break;
        }
        this.OnPropertyChanged(nameof (SelectedStructureNodeItem));
      }
    }

    public bool IsRootNodeSelected
    {
      get => this._isRootNodeSelected;
      set
      {
        this._isRootNodeSelected = value;
        this.OnPropertyChanged(nameof (IsRootNodeSelected));
      }
    }

    public bool IsShortDeviceNoVisible
    {
      get => this._isShortDeviceNoVisible;
      set
      {
        this._isShortDeviceNoVisible = value;
        this.OnPropertyChanged(nameof (IsShortDeviceNoVisible));
      }
    }

    public bool IsOkButtonEnabled
    {
      get => this._isOkButtonEnabled;
      set
      {
        this._isOkButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsOkButtonEnabled));
      }
    }

    public bool IsOnlyDevicesWithNoReadingsChecked
    {
      get => this._isOnlyDevicesWithNoReadingsChecked;
      set
      {
        if (this._isOnlyDevicesWithNoReadingsRangeChecked)
          this.IsOnlyDevicesWithNoReadingsRangeChecked = false;
        this._isOnlyDevicesWithNoReadingsChecked = value;
        this.OnPropertyChanged(nameof (IsOnlyDevicesWithNoReadingsChecked));
      }
    }

    public bool IsOnlyDevicesWithNoReadingsRangeChecked
    {
      get => this._isOnlyDevicesWithNoReadingsRangeChecked;
      set
      {
        if (this._isOnlyDevicesWithNoReadingsChecked)
          this.IsOnlyDevicesWithNoReadingsChecked = false;
        this._isOnlyDevicesWithNoReadingsRangeChecked = value;
        this.OnPropertyChanged(nameof (IsOnlyDevicesWithNoReadingsRangeChecked));
      }
    }

    public bool IsOnlyDevicesWithNoReadingsCheckBoxVisible
    {
      get => this._isOnlyDevicesWithNoReadingsCheckBoxVisible;
      set
      {
        this._isOnlyDevicesWithNoReadingsCheckBoxVisible = value;
        this.OnlyDevicesWithNoReadingsMessage = Resources.MSS_Client_OrderControl_OnlyDevicesWithNoReadings_Message;
        this.OnlyDevicesWithNoReadingsMessageRange = Resources.MSS_Client_OrderControl_OnlyDevicesWithNoReadingsRange_Message;
        this.DueDateValue = this._orderDueDate;
        this.DueDateStartValue = this._orderDueDateStart;
        this.DueDateEndValue = this._orderDueDateEnd;
      }
    }

    public string OnlyDevicesWithNoReadingsMessage { get; set; }

    public string OnlyDevicesWithNoReadingsMessageRange { get; set; }

    public DateTime DueDateValue { get; set; }

    public DateTime DueDateStartValue { get; set; }

    public DateTime DueDateEndValue { get; set; }

    public bool SelectionMode { get; set; }

    public ICommand OkStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter => this.CheckStructure(parameter)));
      }
    }

    private void CheckStructure(object parameter)
    {
      ObservableCollection<StructureNodeDTO> selectedNodeCollection = this.GetSelectedItems(parameter);
      bool isStructureOk = true;
      StructureNodeDTO selectedStructure = this.SelectedStructureNodeItem;
      GenericProgressDialogViewModel pd = DIConfigurator.GetConfigurator().Get<GenericProgressDialogViewModel>((IParameter) new ConstructorArgument("progressDialogTitle", (object) Resources.MSS_CLIENT_STRUCTURE_ASSIGN_TITLE), (IParameter) new ConstructorArgument("progressDialogMessage", (object) Resources.MSS_CLIENT_STRUCTURE_ASSIGN_MESSAGE));
      BackgroundWorker backgroundWorker = new BackgroundWorker()
      {
        WorkerReportsProgress = true,
        WorkerSupportsCancellation = true
      };
      backgroundWorker.DoWork += (DoWorkEventHandler) ((sender, args) =>
      {
        this.LoadSubNodesForRootNode(this.SelectedStructureNodeItem);
        StructureTypeEnum? structureType = this.SelectedStructureNodeItem.StructureType;
        StructureTypeEnum structureTypeEnum1 = StructureTypeEnum.Fixed;
        int num;
        if ((structureType.GetValueOrDefault() == structureTypeEnum1 ? (structureType.HasValue ? 1 : 0) : 0) == 0)
        {
          structureType = this.SelectedStructureNodeItem.StructureType;
          StructureTypeEnum structureTypeEnum2 = StructureTypeEnum.Physical;
          num = structureType.GetValueOrDefault() == structureTypeEnum2 ? (structureType.HasValue ? 1 : 0) : 0;
        }
        else
          num = 1;
        if (num != 0)
        {
          StructureNodeDTO structureNodeDto = StructuresHelper.GetPartialStructureNodeDTO(selectedNodeCollection);
          isStructureOk = this.HandleFixedOrPhisicalStructure(ref structureNodeDto);
        }
        else
          EventPublisher.Publish<OrderUpdated>(new OrderUpdated()
          {
            Guid = this.SelectedStructureNodeItem.Id,
            SelectedNodeDTO = selectedStructure,
            StructureType = this.SelectedStructureNodeItem.StructureType
          }, (IViewModel) this);
      });
      backgroundWorker.RunWorkerCompleted += (RunWorkerCompletedEventHandler) ((sender, args) =>
      {
        pd.OnRequestClose(false);
        MSS.DTO.Message.Message message = (MSS.DTO.Message.Message) null;
        if (args.Cancelled)
          message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = Resources.MSS_Client_Archivation_Cancelled
          };
        else if (args.Error != null)
        {
          MSS.Business.Errors.MessageHandler.LogException(args.Error);
          MessageHandlingManager.ShowExceptionMessageDialog(MSSHelper.GetErrorMessage(args.Error), this._windowFactory);
        }
        else
          message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Success,
            MessageText = Resources.MSS_Client_Archivation_Succedded
          };
        if (message != null)
          EventPublisher.Publish<ActionFinished>(new ActionFinished()
          {
            Message = message
          }, (IViewModel) this);
        if (!isStructureOk)
          return;
        this.OnRequestClose(true);
      });
      backgroundWorker.RunWorkerAsync();
      this._windowFactory.CreateNewProgressDialog((IViewModel) pd, backgroundWorker);
    }

    private bool HandleFixedOrPhisicalStructure(ref StructureNodeDTO selectedStructure)
    {
      List<string> phisicalStructure = this.GetErrorListForFixedOrPhisicalStructure();
      if (phisicalStructure.Any<string>())
      {
        this.ShowErrorListInWarningDialog((IEnumerable<string>) phisicalStructure, Resources.VALIDATION_ORDER_NOT_ASSIGNABLE);
        return false;
      }
      bool flag = this.AdjustFixedOrPhisicalStucture(ref selectedStructure);
      if (flag)
        EventPublisher.Publish<OrderUpdated>(new OrderUpdated()
        {
          Guid = this.SelectedStructureNodeItem.Id,
          SelectedNodeDTO = selectedStructure,
          StructureType = this.SelectedStructureNodeItem.StructureType
        }, (IViewModel) this);
      return flag;
    }

    private bool AdjustFixedOrPhisicalStucture(ref StructureNodeDTO selectedStructure)
    {
      bool flag = true;
      if (this._orderType == OrderTypeEnum.ReadingOrder && (this.IsOnlyDevicesWithNoReadingsChecked || this.IsOnlyDevicesWithNoReadingsRangeChecked))
      {
        flag = this.RemoveMetersWithReadingValues(selectedStructure, this.IsOnlyDevicesWithNoReadingsRangeChecked);
        StructureTypeEnum? structureType = selectedStructure.StructureType;
        StructureTypeEnum structureTypeEnum = StructureTypeEnum.Fixed;
        if (structureType.GetValueOrDefault() == structureTypeEnum && structureType.HasValue)
        {
          List<StructureNodeDTO> structureNodeDtoList = new List<StructureNodeDTO>();
          structureNodeDtoList.AddRange(selectedStructure.SubNodes.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.NodeType.Name == StructureNodeTypeEnum.Tenant.ToString() && n.SubNodes.Count == 0)));
          foreach (StructureNodeDTO selectedNode in structureNodeDtoList)
          {
            ObservableCollection<StructureNodeDTO> observableCollection = new ObservableCollection<StructureNodeDTO>();
            observableCollection.Add(selectedStructure);
            ObservableCollection<StructureNodeDTO> nodeCollection = observableCollection;
            StructuresHelper.RemoveSelectedNodeFromStructure(selectedNode, nodeCollection);
          }
        }
      }
      return flag;
    }

    private List<string> GetErrorListForFixedOrPhisicalStructure()
    {
      List<string> source = new List<string>();
      List<TenantDTO> duplicates;
      StructuresHelper.ValidateTenantUniqueness(this.SelectedStructureNodeItem, out duplicates);
      if (duplicates.Any<TenantDTO>())
      {
        string error = string.Empty;
        duplicates.ForEach((Action<TenantDTO>) (t => error = error + string.Format(Resources.VALIDATION_TENANT_NOT_UNIQUE, (object) t.TenantNr) + Environment.NewLine));
        source.Add(error);
        return (List<string>) source.Distinct<string>();
      }
      if (this._orderType == OrderTypeEnum.ReadingOrder)
      {
        string str = new ReadingOrderHasMeterChecker(Resources.VALIDATION_NO_METERS).CheckForErrors(this.SelectedStructureNodeItem);
        if (string.Empty != str)
          source.Add(str);
        return source;
      }
      List<MeterDTO> notUniqueReadingMeters;
      List<MeterDTO> notUniqueInstallationMeters;
      if (StructuresHelper.ValidationMeterUniqueness(this.SelectedStructureNodeItem, this._orderType, out notUniqueReadingMeters, out notUniqueInstallationMeters))
        return source;
      if (notUniqueInstallationMeters.Any<MeterDTO>())
      {
        string error = string.Empty;
        notUniqueInstallationMeters.ForEach((Action<MeterDTO>) (x => error += string.Format("{0} {1}; Serial Number {2} - {3}", (object) Resources.METER_NOT_UNIQUE_TENANT_DECRIPTION, (object) x.TenantNo, (object) x.SerialNumber, (object) Environment.NewLine)));
        source.Add(error);
      }
      if (notUniqueReadingMeters.Any<MeterDTO>())
      {
        string error = string.Empty;
        notUniqueReadingMeters.ForEach((Action<MeterDTO>) (x => error += string.Format("{0} {1}; Serial Number {2} - {3}", (object) Resources.METER_NOT_UNIQUE_TENANT_DECRIPTION, (object) x.TenantNo, (object) x.SerialNumber, (object) Environment.NewLine)));
        source.Add(error);
      }
      return source;
    }

    private void ShowErrorListInWarningDialog(IEnumerable<string> errorList, string title)
    {
      string uniqueError = string.Empty;
      TypeHelperExtensionMethods.ForEach<string>(errorList, (Action<string>) (e => uniqueError = uniqueError + Environment.NewLine + e + Environment.NewLine));
      Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, title, uniqueError, false)));
    }

    private ObservableCollection<StructureNodeDTO> GetSelectedItems(object parameter)
    {
      ObservableCollection<StructureNodeDTO> selectedItems = new ObservableCollection<StructureNodeDTO>();
      foreach (object obj in (Collection<object>) (parameter as ObservableCollection<object>))
      {
        if (obj is StructureNodeDTO structureNodeDto)
          selectedItems.Add(structureNodeDto);
      }
      return selectedItems;
    }

    private bool RemoveMetersWithReadingValues(StructureNodeDTO selectedStructure, bool isRange)
    {
      List<StructureNodeDTO> metersToRemove = new List<StructureNodeDTO>();
      ObservableCollection<StructureNodeDTO> nodeCollection1 = new ObservableCollection<StructureNodeDTO>();
      nodeCollection1.Add(selectedStructure);
      List<StructureNodeDTO> meters = StructuresHelper.GetMeters(nodeCollection1);
      List<StructureNodeDTO> structureNodeDtoList = meters;
      ObservableCollection<StructureNodeDTO> nodeCollection2 = new ObservableCollection<StructureNodeDTO>();
      nodeCollection2.Add(selectedStructure);
      List<StructureNodeDTO> radioMeters = StructuresHelper.GetRadioMeters(nodeCollection2);
      structureNodeDtoList.AddRange((IEnumerable<StructureNodeDTO>) radioMeters);
      if (meters.Count == 0)
      {
        Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Warning_Title, Resources.VALIDATION_NO_METERS, false)));
        return false;
      }
      List<Guid> meterIds = meters.Select<StructureNodeDTO, Guid>((Func<StructureNodeDTO, Guid>) (m => ((MeterDTO) m.Entity).Id)).ToList<Guid>();
      IList<MeterReadingValue> readingValues;
      if (isRange)
        readingValues = (IList<MeterReadingValue>) this._repositoryFactory.GetRepository<MeterReadingValue>().Where((Expression<Func<MeterReadingValue, bool>>) (rv => meterIds.Contains(rv.MeterId) && rv.Date.Date >= this.DueDateStartValue.Date && rv.Date.Date <= this.DueDateEndValue)).ToList<MeterReadingValue>();
      else
        readingValues = (IList<MeterReadingValue>) this._repositoryFactory.GetRepository<MeterReadingValue>().Where((Expression<Func<MeterReadingValue, bool>>) (rv => meterIds.Contains(rv.MeterId) && rv.Date.Date == this.DueDateValue.Date)).ToList<MeterReadingValue>();
      meters.ForEach((Action<StructureNodeDTO>) (meter =>
      {
        if (meter.Entity == null)
          return;
        MeterDTO meterDTO = meter.Entity as MeterDTO;
        if (readingValues.Any<MeterReadingValue>((Func<MeterReadingValue, bool>) (rv => rv.MeterId == meterDTO.Id)))
          metersToRemove.Add(meter);
      }));
      if (metersToRemove.Count == meters.Count)
      {
        Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Warning_Title, string.Format(Resources.MSS_Client_OrderControl_OnlyDevicesWithReadings_Message, (object) this.DueDateValue), false)));
        return false;
      }
      foreach (StructureNodeDTO structureNodeDto in metersToRemove)
      {
        StructureNodeDTO selectedNode = structureNodeDto;
        ObservableCollection<StructureNodeDTO> observableCollection1 = new ObservableCollection<StructureNodeDTO>();
        observableCollection1.Add(selectedStructure);
        ObservableCollection<StructureNodeDTO> nodeCollection3 = observableCollection1;
        StructuresHelper.RemoveSelectedNodeFromStructure(selectedNode, nodeCollection3);
        if ((StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), structureNodeDto.ParentNode.NodeType.Name, true) == StructureNodeTypeEnum.Tenant && structureNodeDto.ParentNode.SubNodes.Count == 0)
        {
          StructureNodeDTO parentNode = structureNodeDto.ParentNode;
          ObservableCollection<StructureNodeDTO> observableCollection2 = new ObservableCollection<StructureNodeDTO>();
          observableCollection2.Add(selectedStructure);
          ObservableCollection<StructureNodeDTO> nodeCollection4 = observableCollection2;
          StructuresHelper.RemoveSelectedNodeFromStructure(parentNode, nodeCollection4);
        }
      }
      return true;
    }

    public ICommand SearchCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          string searchText = parameter as string;
          this.IsBusy = true;
          BackgroundWorker backgroundWorker = new BackgroundWorker()
          {
            WorkerReportsProgress = true,
            WorkerSupportsCancellation = true
          };
          backgroundWorker.DoWork += (DoWorkEventHandler) ((sender, args) =>
          {
            ObservableCollection<StructureNodeDTO> observableCollection = !(searchText != string.Empty) ? this.GetStructuresManagerInstance().GetStructureNodesCollection(this._selectedStructureType, true) : new ObservableCollection<StructureNodeDTO>(this.StructureNodeCollection.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.Name.Contains(searchText) || n.Description.Contains(searchText))));
            args.Result = (object) observableCollection;
          });
          backgroundWorker.RunWorkerCompleted += (RunWorkerCompletedEventHandler) ((sender, args) =>
          {
            if (!args.Cancelled && args.Error != null)
            {
              MSS.Business.Errors.MessageHandler.LogException(args.Error);
              MessageHandlingManager.ShowExceptionMessageDialog(MSSHelper.GetErrorMessage(args.Error), this._windowFactory);
            }
            Dispatcher.CurrentDispatcher.Invoke((Action) (() =>
            {
              this.IsBusy = false;
              this.StructureNodeCollection = (IEnumerable<StructureNodeDTO>) (args.Result as ObservableCollection<StructureNodeDTO>);
            }));
          });
          backgroundWorker.RunWorkerAsync((object) this._repositoryFactory);
        }));
      }
    }

    private void LoadSubNodesForRootNode(LoadSubNodesForRoot rootNode)
    {
      this.IsBusy = true;
      BackgroundWorker backgroundWorker = new BackgroundWorker()
      {
        WorkerReportsProgress = true,
        WorkerSupportsCancellation = true
      };
      backgroundWorker.DoWork += (DoWorkEventHandler) ((sender, args) => this.LoadSubNodesForRootNode(rootNode.RootNode));
      backgroundWorker.RunWorkerCompleted += (RunWorkerCompletedEventHandler) ((sender, args) =>
      {
        rootNode.RootNode.SubNodes = new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) rootNode.RootNode.SubNodes.OrderBy<StructureNodeDTO, int>((Func<StructureNodeDTO, int>) (structure => !(structure.Entity is TenantDTO entity2) ? structure.OrderNr : entity2.TenantNr)));
        if (!args.Cancelled && args.Error != null)
        {
          MSS.Business.Errors.MessageHandler.LogException(args.Error);
          MessageHandlingManager.ShowExceptionMessageDialog(MSSHelper.GetErrorMessage(args.Error), this._windowFactory);
        }
        Dispatcher.CurrentDispatcher.Invoke((Action) (() => this.IsBusy = false));
      });
      backgroundWorker.RunWorkerAsync((object) this._repositoryFactory);
    }

    private void LoadSubNodesForRootNode(StructureNodeDTO rootNode)
    {
      if (rootNode.SubNodes != null && rootNode.SubNodes.Count != 0 || rootNode.ParentNode != null)
        return;
      StructuresHelper.LoadSubNodesForRootNode(this._repositoryFactory, rootNode, this.GetStructuresManagerInstance());
    }

    private IEnumerable<StructureNodeDTO> GetStructureNodeForOrder()
    {
      ObservableCollection<StructureNodeDTO> nodesCollection = new ObservableCollection<StructureNodeDTO>();
      switch (this._orderType)
      {
        case OrderTypeEnum.ReadingOrder:
          byte[] structureBytes = this._selectedOrder.StructureBytes;
          if (structureBytes != null)
          {
            OrderSerializableStructure orderserializablestructure = StructuresHelper.DeserializeStructure(structureBytes);
            Structure structure = this.GetStructuresManagerInstance().GetStructure(orderserializablestructure);
            Dictionary<Guid, object> entitiesDictionary = new Dictionary<Guid, object>();
            structure.Locations.ForEach((Action<Location>) (l => entitiesDictionary.Add(l.Id, (object) l)));
            structure.Tenants.ForEach((Action<Tenant>) (t => entitiesDictionary.Add(t.Id, (object) t)));
            structure.Meters.ForEach((Action<Meter>) (m => entitiesDictionary.Add(m.Id, (object) m)));
            structure.Minomats.ForEach((Action<Minomat>) (m => entitiesDictionary.Add(m.Id, (object) m)));
            nodesCollection = StructuresHelper.GetTreeFromList(this._structureNodeTypeRepository.GetAll(), (IList<StructureNodeLinks>) structure.Links, entitiesDictionary);
            StructureImageHelper.SetImageIconPath(nodesCollection);
            break;
          }
          break;
        case OrderTypeEnum.InstallationOrder:
          Guid structureRootNodeId = this._selectedOrder.RootStructureNodeId;
          if (structureRootNodeId != Guid.Empty)
          {
            List<StructureNodeLinks> list = StructuresHelper.GetStructureNodesForRootNode(this._structureNodeLinksRepository, this._structureNodeLinksRepository.FirstOrDefault((Expression<Func<StructureNodeLinks, bool>>) (s => s.Node.Id == structureRootNodeId)).Node.Id).Where<StructureNodeLinks>((Func<StructureNodeLinks, bool>) (s => !s.EndDate.HasValue)).ToList<StructureNodeLinks>();
            List<Guid> nodeIDs = this.GetNodeIdList((IEnumerable<StructureNodeLinks>) list);
            Dictionary<Guid, object> entitiesDictionary = this.GetEntitiesDictionary(this._structureNodeRepository.SearchFor((Expression<Func<StructureNode, bool>>) (s => nodeIDs.Contains(s.Id) && s.EndDate == new DateTime?())));
            nodesCollection = StructuresHelper.GetTreeFromList(this._structureNodeTypeRepository.GetAll(), (IList<StructureNodeLinks>) list, entitiesDictionary);
            break;
          }
          break;
      }
      return (IEnumerable<StructureNodeDTO>) nodesCollection;
    }

    private Dictionary<Guid, object> GetEntitiesDictionary(IList<StructureNode> structureNodeList)
    {
      Dictionary<Guid, object> entitiesDictionary = new Dictionary<Guid, object>();
      foreach (StructureNode structureNode in (IEnumerable<StructureNode>) structureNodeList)
      {
        if (structureNode.EntityId != Guid.Empty)
        {
          StructureNodeTypeEnum structureNodeTypeName = (StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), structureNode.EntityName, true);
          object entity = this.GetStructuresManagerInstance().GetEntity(structureNodeTypeName, structureNode);
          entitiesDictionary.Add(structureNode.EntityId, entity);
        }
      }
      return entitiesDictionary;
    }

    private List<Guid> GetNodeIdList(IEnumerable<StructureNodeLinks> structureNodeLinks)
    {
      List<Guid> nodeIDs = new List<Guid>();
      foreach (StructureNodeLinks structureNodeLinks1 in structureNodeLinks.Where<StructureNodeLinks>((Func<StructureNodeLinks, bool>) (structureNode => !nodeIDs.Contains(structureNode.Node.Id))))
        nodeIDs.Add(structureNodeLinks1.Node.Id);
      return nodeIDs;
    }

    private void SetSelectedRootStructureNode()
    {
      if (this._selectedOrder != null)
      {
        Guid selectedRootNodeId = this._selectedOrder.RootStructureNodeId;
        using (IEnumerator<StructureNodeDTO> enumerator = this.StructureNodeCollection.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (s => s.Id == selectedRootNodeId)).GetEnumerator())
        {
          if (!enumerator.MoveNext())
            return;
          this.SelectedStructureNodeItem = enumerator.Current;
        }
      }
      else if (this._selectedRootStructureNodeId != Guid.Empty)
      {
        using (IEnumerator<StructureNodeDTO> enumerator = this.StructureNodeCollection.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (s => s.Id == this._selectedRootStructureNodeId)).GetEnumerator())
        {
          if (enumerator.MoveNext())
            this.SelectedStructureNodeItem = enumerator.Current;
        }
      }
    }
  }
}


--- TenantInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.TenantInfo
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.DTO.Structures;
using System.Collections.ObjectModel;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class TenantInfo
  {
    public TenantDTO Tenant { get; set; }

    public string Status { get; set; }

    public string ImageLocation { get; set; }

    public string Address { get; set; }

    public string FloorPosition { get; set; }

    public int NoOfDevices { get; set; }

    public int ReceivedDevices { get; set; }

    public int AssignedDevices { get; set; }

    public int RegisteredDevices { get; set; }

    public string RecAsRegDevices { get; set; }

    public int OpenDevices { get; set; }

    public string OpenDevicesString { get; set; }

    public ObservableCollection<StructureNodeDTO> SubNodes { get; set; }
  }
}


--- TestGSMViewModel.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.TestGSMViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Localisation;
using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Threading;
using System.Windows;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  internal class TestGSMViewModel : ViewModelBase
  {
    private bool _showProgressCircle;
    private string _testResult;

    public ICommand StartGsmTestCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this.ShowProgressCircle = true;
          ThreadPool.QueueUserWorkItem((WaitCallback) (state =>
          {
            Thread.Sleep(4000);
            this.ShowProgressCircle = false;
            Application.Current.Dispatcher.Invoke((Action) (() => this.TestResult = Resources.MSS_Client_SuccessMessage));
          }));
        }));
      }
    }

    public bool ShowProgressCircle
    {
      get => this._showProgressCircle;
      set
      {
        this._showProgressCircle = value;
        this.OnPropertyChanged(nameof (ShowProgressCircle));
      }
    }

    public string TestResult
    {
      get => this._testResult;
      set
      {
        this._testResult = value;
        this.OnPropertyChanged(nameof (TestResult));
      }
    }
  }
}


--- ValueIdentString.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Orders.ValueIdentString
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

#nullable disable
namespace MSS_Client.ViewModel.Orders
{
  public class ValueIdentString
  {
    public string Value { get; set; }
  }
}

