
--- CreateEditLocationViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.CreateEditLocationViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.LicenseManagement;
using MSS.Business.Modules.StructuresManagement;
using MSS.Core.Model.MSSClient;
using MSS.Core.Model.Structures;
using MSS.Core.Utils;
using MSS.DTO.Clients;
using MSS.DTO.MessageHandler;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate.Linq;
using Ninject;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using ZENNER;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class CreateEditLocationViewModel : ValidationViewModelBase
  {
    private readonly IRepository<Scenario> _scenarioRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly StructureNodeDTO _selectedNode;
    private string _name;
    private string _description;
    private string _cityTextValue = string.Empty;
    private string _streetTextValue = string.Empty;
    private string _descriptionValue = string.Empty;
    private string _zipCodeValue = string.Empty;
    private string _buildingNumerValue = string.Empty;
    private DateTime? _dueDateValue = new DateTime?(DateTime.Now);
    private Guid? _scenarioIdGuid;
    private int _generationEnumObjId;
    private bool _isMBusGenerationNotSelected;
    private bool _isWalkByWithoutDueDateNotSelected;
    private IEnumerable<ScenarioDTO> _scenarios;
    private ViewModelBase _messageUserControl;

    [Inject]
    public CreateEditLocationViewModel(
      bool isExistingEntity,
      StructureNodeDTO node,
      IRepositoryFactory repositoryFactory,
      List<string> locationNumberList)
    {
      this.IsExistingEntity = isExistingEntity;
      this.LocationDialogTitle = isExistingEntity ? CultureResources.GetValue("MSS_Client_Structures_EditLocation_Title") : CultureResources.GetValue("MSS_Client_Structures_CreateLocation_Title");
      this._selectedNode = node;
      this.EvaluationFactorVisibility = LicenseHelper.LicenseIsDisplayEvaluationFactor();
      this._repositoryFactory = repositoryFactory;
      this._scenarioRepository = repositoryFactory.GetRepository<Scenario>();
      this.LocationNumberList = locationNumberList;
      if (isExistingEntity && node.Entity != null)
      {
        LocationDTO entity = node.Entity as LocationDTO;
        this.LocationId = entity.Id;
        this.CityTextValue = entity.City;
        this.StreetTextValue = entity.Street;
        this.BuildingNumberValue = entity.BuildingNr;
        this.DescriptionValue = entity.Description;
        this.DueDateValue = entity.DueDate;
        this.GenerationEnumObjId = (int) entity.Generation;
        this.ZipCodeValue = entity.ZipCode;
        this.ScenarioId = entity.Scenario != null ? new Guid?(entity.Scenario.Id) : new Guid?();
        this.HasMaster = entity.HasMaster;
        this.ScaleEnumObjId = (int) entity.Scale;
        this.LocationNumberList.Remove(this.BuildingNumberValue);
      }
      this.Name = node.Name;
      this.Description = node.Description;
    }

    private LocationManager GetLocationManagerInstance()
    {
      return new LocationManager(this._repositoryFactory);
    }

    public bool IsExistingEntity { get; set; }

    public string LocationDialogTitle { get; set; }

    public bool IsAddEntityButtonVisible { get; set; }

    public bool IsEditEntityButtonVisible { get; set; }

    public bool EvaluationFactorVisibility { get; set; }

    public List<string> LocationNumberList { get; set; }

    public string Name
    {
      get => this._name;
      set
      {
        this._name = value;
        this.OnPropertyChanged(nameof (Name));
      }
    }

    public string Description
    {
      get => this._description;
      set
      {
        this._description = value;
        this.OnPropertyChanged(nameof (Description));
      }
    }

    [Required(ErrorMessage = "MSS_Client_Structures_CityErrorToolTip")]
    public string CityTextValue
    {
      get => this._cityTextValue;
      set
      {
        this._cityTextValue = value;
        this.Description = CreateEditLocationViewModel.ConcatenatedDescriptionValue(this.CityTextValue, this.StreetTextValue, this.ZipCodeValue);
        this.OnPropertyChanged(nameof (CityTextValue));
      }
    }

    [Required(ErrorMessage = "MSS_Client_Structures_StreetErrorToolTip")]
    public string StreetTextValue
    {
      get => this._streetTextValue;
      set
      {
        this._streetTextValue = value;
        this.Description = CreateEditLocationViewModel.ConcatenatedDescriptionValue(this.CityTextValue, this.StreetTextValue, this.ZipCodeValue);
        this.OnPropertyChanged(nameof (StreetTextValue));
      }
    }

    public string DescriptionValue
    {
      get => this._descriptionValue;
      set => this._descriptionValue = value;
    }

    [Required(ErrorMessage = "MSS_Client_Structures_ZipCodeErrorToolTip")]
    public string ZipCodeValue
    {
      get => this._zipCodeValue;
      set
      {
        this._zipCodeValue = value;
        this.Description = CreateEditLocationViewModel.ConcatenatedDescriptionValue(this.CityTextValue, this.StreetTextValue, this.ZipCodeValue);
        this.OnPropertyChanged(nameof (ZipCodeValue));
      }
    }

    [Required(ErrorMessage = "MSS_Client_Structures_BuildingNrErrorToolTip")]
    public string BuildingNumberValue
    {
      get => this._buildingNumerValue;
      set
      {
        this._buildingNumerValue = value;
        this.Name = this._buildingNumerValue;
        this.OnPropertyChanged(nameof (BuildingNumberValue));
      }
    }

    public DateTime? DueDateValue
    {
      get => this._dueDateValue;
      set
      {
        this._dueDateValue = value;
        this.OnPropertyChanged(nameof (DueDateValue));
      }
    }

    public Guid? ScenarioId
    {
      get => this._scenarioIdGuid;
      set
      {
        this._scenarioIdGuid = value;
        if (!this._scenarioIdGuid.HasValue && this.IsMBusGenerationNotSelected)
          this._scenarioIdGuid = this._scenarioRepository.GetAll().FirstOrDefault<Scenario>()?.Id;
        if (!this._scenarioIdGuid.HasValue || this.GenerationEnumObjId != GenerationEnum.Radio3.GetCelestaCodes().Max())
          return;
        switch (this._scenarioRepository.GetById((object) this._scenarioIdGuid).Code)
        {
          case 0:
          case 1:
          case 2:
          case 4:
            this.IsWalkByWithoutDueDateNotSelected = true;
            this.HasMaster = new bool?(true);
            this.OnPropertyChanged("HasMaster");
            break;
          case 6:
          case 8:
            this.IsWalkByWithoutDueDateNotSelected = false;
            this.HasMaster = new bool?(false);
            this.OnPropertyChanged("HasMaster");
            break;
          default:
            this.HasMaster = new bool?(false);
            this.OnPropertyChanged("HasMaster");
            break;
        }
      }
    }

    public int GenerationEnumObjId
    {
      get => this._generationEnumObjId;
      set
      {
        this._generationEnumObjId = value;
        if (this._generationEnumObjId == GenerationEnum.Radio2.GetCelestaCodes().Max())
        {
          this.HasMaster = new bool?(false);
          this._scenarios = this.GetScenarioDTOList().Take<ScenarioDTO>(1);
        }
        if (this._generationEnumObjId == GenerationEnum.Radio3.GetCelestaCodes().Max())
          this._scenarios = this.GetScenarioDTOList();
        if (this._generationEnumObjId == 4 || this._generationEnumObjId == 5)
        {
          this.IsMBusGenerationNotSelected = false;
          this.IsWalkByWithoutDueDateNotSelected = true;
        }
        else
          this.IsMBusGenerationNotSelected = true;
        if (this._scenarios != null && (!this.ScenarioId.HasValue || !this._scenarios.ToList<ScenarioDTO>().Any<ScenarioDTO>((Func<ScenarioDTO, bool>) (item =>
        {
          Guid id = item.Id;
          Guid? scenarioId = this.ScenarioId;
          return scenarioId.HasValue && id == scenarioId.GetValueOrDefault();
        }))))
        {
          ScenarioDTO scenarioDto = this._scenarios.FirstOrDefault<ScenarioDTO>();
          if (scenarioDto != null)
            this.ScenarioId = new Guid?(scenarioDto.Id);
        }
        this.OnPropertyChanged("HasMaster");
        this.OnPropertyChanged("GetScenarios");
        this.OnPropertyChanged("ScenarioId");
      }
    }

    public int GenerationValue { get; set; }

    private Guid LocationId { get; set; }

    public int ScaleEnumObjId { get; set; }

    public bool? HasMaster { get; set; }

    public IEnumerable<EnumObj> GetGenerations
    {
      get
      {
        IEnumerable<EnumObj> source = this.GetLocationManagerInstance().GetGenerations();
        if (!GmmInterface.DeviceManager.GetDeviceModels(DeviceModelTags.MBus).Any<DeviceModel>())
          source = source.Where<EnumObj>((Func<EnumObj, bool>) (item => item.IdEnum != 4 && item.IdEnum != 5));
        return source;
      }
    }

    public bool IsMBusGenerationNotSelected
    {
      get => this._isMBusGenerationNotSelected;
      set
      {
        this._isMBusGenerationNotSelected = value;
        this.OnPropertyChanged(nameof (IsMBusGenerationNotSelected));
      }
    }

    public bool IsWalkByWithoutDueDateNotSelected
    {
      get => this._isWalkByWithoutDueDateNotSelected;
      set
      {
        this._isWalkByWithoutDueDateNotSelected = value;
        this.OnPropertyChanged(nameof (IsWalkByWithoutDueDateNotSelected));
      }
    }

    public IEnumerable<EnumObj> GetScales => this.GetLocationManagerInstance().GetScales();

    public IEnumerable<ScenarioDTO> GetScenarios
    {
      get => this._scenarios;
      set => this._scenarios = value;
    }

    public System.Windows.Input.ICommand SaveLocationCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) delegate
        {
          if (!this.IsExistingEntity)
            this.AddLocation();
          else
            this.EditLocation();
        });
      }
    }

    private void AddLocation()
    {
      this.ValidateProperty("GenerationEnumObjId");
      this.GenerationValue = this.GenerationEnumObjId;
      if (this.IsValid)
      {
        MSS.Core.Model.Structures.Location location = new MSS.Core.Model.Structures.Location()
        {
          BuildingNr = this._buildingNumerValue,
          Scenario = this.IsMBusGenerationNotSelected ? this._scenarioRepository.GetById((object) this.ScenarioId) : (Scenario) null,
          City = this._cityTextValue,
          Description = this._descriptionValue,
          DueDate = this.IsWalkByWithoutDueDateNotSelected ? this._dueDateValue : new DateTime?(),
          Generation = (GenerationEnum) this.GenerationEnumObjId,
          Street = this._streetTextValue,
          ZipCode = this._zipCodeValue,
          HasMaster = this.IsMBusGenerationNotSelected ? this.HasMaster : new bool?(),
          Scale = (ScaleEnum) this.ScaleEnumObjId
        };
        MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
        {
          MessageType = MessageTypeEnum.Success,
          MessageText = MessageCodes.Success_Save.GetStringValue()
        };
        EventPublisher.Publish<ActionStructureAndEntitiesUpdate>(new ActionStructureAndEntitiesUpdate()
        {
          Location = location,
          Node = this._selectedNode,
          Guid = this._selectedNode.RootNode != this._selectedNode ? this._selectedNode.RootNode.Id : this._selectedNode.Id,
          Message = message,
          Name = this.Name,
          Description = this.Description
        }, (IViewModel) this);
        this.OnRequestClose(true);
      }
      else
        this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(new MSS.DTO.Message.Message()
        {
          MessageType = MessageTypeEnum.Validation,
          MessageText = MessageCodes.ValidationError.GetStringValue()
        }.MessageText);
    }

    private void EditLocation()
    {
      this.ValidateProperty("GenerationEnumObjId");
      this.ValidateProperty("ScenarioId");
      this.ValidateProperty("BuildingNumberValue");
      this.GenerationValue = this.GenerationEnumObjId;
      if (this.IsValid)
      {
        MSS.Core.Model.Structures.Location source = new MSS.Core.Model.Structures.Location()
        {
          Id = ((LocationDTO) this._selectedNode.Entity).Id,
          BuildingNr = this._buildingNumerValue,
          City = this._cityTextValue,
          Description = this._descriptionValue,
          DueDate = this.IsWalkByWithoutDueDateNotSelected ? this._dueDateValue : new DateTime?(),
          Generation = (GenerationEnum) this.GenerationEnumObjId,
          Street = this._streetTextValue,
          ZipCode = this._zipCodeValue,
          Scenario = this.IsMBusGenerationNotSelected ? this._scenarioRepository.GetById((object) this.ScenarioId) : (Scenario) null,
          HasMaster = this.IsMBusGenerationNotSelected ? this.HasMaster : new bool?(),
          Scale = (ScaleEnum) this.ScaleEnumObjId
        };
        LocationDTO destination = new LocationDTO();
        Mapper.Map<MSS.Core.Model.Structures.Location, LocationDTO>(source, destination);
        StructureNodeDTO selectedNode = this._selectedNode;
        selectedNode.Entity = (object) destination;
        selectedNode.Description = CreateEditLocationViewModel.ConcatenatedDescriptionValue(source.City, source.Street, source.ZipCode);
        selectedNode.Name = source.BuildingNr;
        MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
        {
          MessageType = MessageTypeEnum.Success,
          MessageText = MessageCodes.Success_Save.GetStringValue()
        };
        EventPublisher.Publish<ActionStructureAndEntitiesUpdate>(new ActionStructureAndEntitiesUpdate()
        {
          Location = source,
          Node = selectedNode,
          Guid = this._selectedNode.RootNode != this._selectedNode ? this._selectedNode.RootNode.Id : this._selectedNode.Id,
          Message = message,
          Name = this.Name,
          Description = this.Description
        }, (IViewModel) this);
        this.OnRequestClose(true);
      }
      else
        this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(new MSS.DTO.Message.Message()
        {
          MessageType = MessageTypeEnum.Validation,
          MessageText = MessageCodes.ValidationError.GetStringValue()
        }.MessageText);
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    private IEnumerable<ScenarioDTO> GetScenarioDTOList()
    {
      ObservableCollection<ScenarioDTO> scenarioDTOList = new ObservableCollection<ScenarioDTO>();
      TypeHelperExtensionMethods.ForEach<Scenario>((IEnumerable<Scenario>) this._scenarioRepository.GetAll(), (Action<Scenario>) (r => scenarioDTOList.Add(new ScenarioDTO()
      {
        Id = r.Id,
        Code = r.Code,
        Name = string.IsNullOrEmpty(CultureResources.GetValue("Scenario_Type_" + (object) r.Code)) ? "Scenario_Type_" + (object) r.Code : CultureResources.GetValue("Scenario_Type_" + (object) r.Code)
      })));
      return (IEnumerable<ScenarioDTO>) scenarioDTOList.OrderBy<ScenarioDTO, int>((Func<ScenarioDTO, int>) (x => x.Code)).ToList<ScenarioDTO>();
    }

    public override List<string> ValidateProperty(string propertyName)
    {
      string propertyName1 = this.GetPropertyName<int>((Expression<Func<int>>) (() => this.GenerationEnumObjId));
      string propertyName2 = this.GetPropertyName<Guid?>((Expression<Func<Guid?>>) (() => this.ScenarioId));
      this.GetPropertyName<DateTime?>((Expression<Func<DateTime?>>) (() => this.DueDateValue));
      string propertyName3 = this.GetPropertyName<string>((Expression<Func<string>>) (() => this.BuildingNumberValue));
      List<string> source = new List<string>();
      if (propertyName == propertyName1)
      {
        if (this.GenerationEnumObjId != 0)
          return source.ToList<string>();
        source.Add(Resources.MSS_Client_Structures_GenerationErrorToolTip);
        this.IsValid = false;
        return source.ToList<string>();
      }
      if (propertyName == propertyName2)
      {
        Guid? scenarioId = this.ScenarioId;
        Guid empty = Guid.Empty;
        if (!scenarioId.HasValue || scenarioId.HasValue && scenarioId.GetValueOrDefault() != empty)
          return source.ToList<string>();
        source.Add(Resources.MSS_Client_Structures_ScenarioErrorToolTip);
        this.IsValid = false;
        return source.ToList<string>();
      }
      if (propertyName != propertyName3)
        return source;
      if (this.BuildingNumberValue.Length < 10)
      {
        source.Add(Resources.MSS_Client_Structures_BuildingNrIncompleteErrorToolTip);
        this.IsValid = false;
      }
      if (!this.LocationNumberList.Contains(this.BuildingNumberValue))
        return source;
      source.Add(Resources.MSS_LOCATIONS_UNIQUE_LOCATION_BUILDING_NUMBER);
      this.IsValid = false;
      return source;
    }

    private static string ConcatenatedDescriptionValue(string city, string street, string zip)
    {
      string str = string.Empty;
      if (city.Trim() != string.Empty)
        str = str + city.Trim() + " , ";
      if (street.Trim() != string.Empty)
        str = str + street.Trim() + " , ";
      if (zip.Trim() != string.Empty)
        str = str + zip.Trim() + " , ";
      return str.Length > 0 ? str.Remove(str.Length - 2, 2) : str;
    }
  }
}


--- CreateEditTenantViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.CreateEditTenantViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.StructuresManagement;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Structures;
using MSS.DTO.MessageHandler;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using Ninject;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class CreateEditTenantViewModel : ValidationViewModelBase
  {
    private readonly IRepository<Tenant> _tenantRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly Dictionary<string, ICollection<string>> _validationErrors = new Dictionary<string, ICollection<string>>();
    private readonly StructureNodeDTO _selectedNode;
    private readonly List<int> _localStructureTenantNrs;
    private bool _isExistingEntity;
    private string _tenantDialogTitle;
    private string _name;
    private string _description;
    private bool _isAddEntityButtonVisible;
    private bool _isEditEntityButtonVisible;
    private int _tenantNr;
    private string _nameValue = string.Empty;
    private static List<string> _entrancesList;
    private string _entrance;
    private string _floorNameValue = string.Empty;
    private string _floorNrValue = string.Empty;
    private string _apartmentNrValue = string.Empty;
    private string _descriptionValue = string.Empty;
    private string _customerTenantNo = string.Empty;
    private ViewModelBase _messageUserControl;

    [Inject]
    public CreateEditTenantViewModel(
      bool isExistingEntity,
      StructureNodeDTO node,
      List<int> localStructureTenantNrs,
      IRepositoryFactory repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
      this._tenantRepository = repositoryFactory.GetRepository<Tenant>();
      this._isExistingEntity = isExistingEntity;
      this._tenantDialogTitle = isExistingEntity ? CultureResources.GetValue("MSS_Client_Structures_EditTenant_Title") : CultureResources.GetValue("MSS_Client_Structures_CreateTenant_Title");
      this._isAddEntityButtonVisible = !isExistingEntity;
      this._isEditEntityButtonVisible = isExistingEntity;
      this._selectedNode = node;
      this._localStructureTenantNrs = localStructureTenantNrs;
      this.EntrancesList = this.GetStructureEntrances(this._selectedNode);
      if (isExistingEntity)
      {
        TenantDTO tenantDTO = node.Entity as TenantDTO;
        if (tenantDTO != null)
        {
          this.TenantGuid = tenantDTO.Id;
          this.TenantNr = tenantDTO.TenantNr;
          this.NameValue = tenantDTO.Name;
          FloorNameDTO floorNameDto = this.GetFloorNames.FirstOrDefault<FloorNameDTO>((Func<FloorNameDTO, bool>) (d => d.FloorNameEnum.ToString() == tenantDTO.FloorName));
          if (floorNameDto != null)
            this.SelectedFloorNameId = floorNameDto.Id;
          this.FloorNrValue = tenantDTO.FloorNr;
          this.ApartmentNrValue = tenantDTO.ApartmentNr;
          DirectionDTO directionDto = this.GetDirections.FirstOrDefault<DirectionDTO>((Func<DirectionDTO, bool>) (d => d.DirectionEnum.ToString() == tenantDTO.Direction));
          if (directionDto != null)
            this.SelectedDirectionId = directionDto.Id;
          this.DescriptionValue = tenantDTO.Description;
          this.CustomerTenantNo = tenantDTO.CustomerTenantNo;
          this.Entrance = tenantDTO.Entrance != null ? this.EntrancesList.FirstOrDefault<string>((Func<string, bool>) (item => item != null && item.Equals(tenantDTO.Entrance))) : (string) null;
        }
      }
      else
        this.TenantNr = this.GetNextTenantNr();
      this.Name = node.Name;
      this.Description = node.Description;
    }

    private int GetNextTenantNr()
    {
      return this._localStructureTenantNrs.Concat<int>((IEnumerable<int>) new int[1]).Max() + 1;
    }

    private List<string> GetStructureEntrances(StructureNodeDTO node)
    {
      List<string> first = new List<string>();
      List<Guid> minomatGuidList = new List<Guid>();
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.RootNode.SubNodes)
      {
        if (subNode.Entity != null)
        {
          string name = subNode.NodeType?.Name;
          if (name != null)
          {
            switch ((StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), name, true))
            {
              case StructureNodeTypeEnum.Tenant:
                if (subNode.Entity is TenantDTO entity1)
                {
                  string entrance = entity1.Entrance;
                  if (entrance != null && !first.Contains(entrance))
                    first.Add(entrance);
                  break;
                }
                break;
              case StructureNodeTypeEnum.MinomatMaster:
                if (subNode.Entity is MinomatSerializableDTO entity3)
                {
                  Guid id1 = entity3.Id;
                  if (id1 != Guid.Empty)
                    minomatGuidList.Add(id1);
                  using (IEnumerator<StructureNodeDTO> enumerator = subNode.SubNodes.GetEnumerator())
                  {
                    while (enumerator.MoveNext())
                    {
                      if (enumerator.Current.Entity is MinomatSerializableDTO entity2)
                      {
                        Guid id2 = entity2.Id;
                        if (id2 != Guid.Empty)
                          minomatGuidList.Add(id2);
                      }
                    }
                    break;
                  }
                }
                else
                  break;
            }
          }
        }
      }
      List<string> stringList;
      if (minomatGuidList.Count <= 0)
        stringList = new List<string>();
      else
        stringList = this._repositoryFactory.GetRepository<MinomatRadioDetails>().SearchFor((Expression<Func<MinomatRadioDetails, bool>>) (x => minomatGuidList.Contains(x.Minomat.Id))).Select<MinomatRadioDetails, string>((Func<MinomatRadioDetails, string>) (x => x.Entrance)).Distinct<string>().ToList<string>();
      List<string> second = stringList;
      return first.Union<string>((IEnumerable<string>) second).OrderBy<string, string>((Func<string, string>) (x => x)).ToList<string>();
    }

    private TenantManager GetTenantManagerInstance() => new TenantManager(this._repositoryFactory);

    public bool IsExistingEntity
    {
      get => this._isExistingEntity;
      set => this._isExistingEntity = value;
    }

    public string TenantDialogTitle
    {
      get => this._tenantDialogTitle;
      set => this._tenantDialogTitle = value;
    }

    public string Name
    {
      get => this._name;
      set
      {
        this._name = value;
        this.OnPropertyChanged(nameof (Name));
      }
    }

    public string Description
    {
      get => this._description;
      set
      {
        this._description = value;
        this.OnPropertyChanged(nameof (Description));
      }
    }

    public bool IsAddEntityButtonVisible
    {
      get => this._isAddEntityButtonVisible;
      set => this._isAddEntityButtonVisible = value;
    }

    public bool IsEditEntityButtonVisible
    {
      get => this._isEditEntityButtonVisible;
      set => this._isEditEntityButtonVisible = value;
    }

    public IEnumerable<FloorNameDTO> GetFloorNames => FloorHelper.GetFloorNames();

    public ObservableCollection<DirectionDTO> GetDirections
    {
      get => new ObservableCollection<DirectionDTO>(FloorHelper.GetDirections());
    }

    private Guid TenantGuid { get; set; }

    [Required(ErrorMessage = "MSS_Client_Structures_CreateTenant_TenantNrValidation")]
    public int TenantNr
    {
      get => this._tenantNr;
      set
      {
        this._tenantNr = value;
        this.Name = this._tenantNr.ToString() + " - " + this._nameValue;
        this.OnPropertyChanged(nameof (TenantNr));
      }
    }

    [Required(ErrorMessage = "MSS_Client_Structures_CreateTenant_NameValidation")]
    public string NameValue
    {
      get => this._nameValue;
      set
      {
        this._nameValue = value;
        this.Name = this._tenantNr.ToString() + " - " + this._nameValue;
        this.OnPropertyChanged(nameof (NameValue));
      }
    }

    public List<string> EntrancesList
    {
      get => CreateEditTenantViewModel._entrancesList;
      set => CreateEditTenantViewModel._entrancesList = value;
    }

    public string Entrance
    {
      get => this._entrance;
      set
      {
        this._entrance = value;
        this.OnPropertyChanged(nameof (Entrance));
      }
    }

    public string NewEntrance
    {
      set
      {
        if (this.Entrance != null || string.IsNullOrEmpty(value))
          return;
        CreateEditTenantViewModel._entrancesList.Add(value);
        this.Entrance = value;
      }
    }

    public string FloorNameValue
    {
      get => this._floorNameValue;
      set => this._floorNameValue = value;
    }

    public string FloorNrValue
    {
      get => this._floorNrValue;
      set => this._floorNrValue = value;
    }

    public string ApartmentNrValue
    {
      get => this._apartmentNrValue;
      set => this._apartmentNrValue = value;
    }

    public int SelectedDirectionId { get; set; }

    public int SelectedFloorNameId { get; set; }

    public string DescriptionValue
    {
      get => this._descriptionValue;
      set => this._descriptionValue = value;
    }

    public string CustomerTenantNo
    {
      get => this._customerTenantNo;
      set => this._customerTenantNo = value;
    }

    public ActionStructureAndEntitiesUpdate StructureUpdateAction { get; set; }

    public ICommand AddTenantCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          this.ValidateProperty("TenantNr");
          if (this.IsValid)
          {
            DirectionDTO directionDto = this.GetDirections.FirstOrDefault<DirectionDTO>((Func<DirectionDTO, bool>) (d => d.Id == this.SelectedDirectionId));
            FloorNameDTO floorNameDto = this.GetFloorNames.FirstOrDefault<FloorNameDTO>((Func<FloorNameDTO, bool>) (f => f.Id == this.SelectedFloorNameId));
            Tenant tenant = new Tenant()
            {
              TenantNr = this._tenantNr,
              Name = this._nameValue,
              FloorName = floorNameDto?.FloorNameEnum.ToString(),
              FloorNr = this._floorNrValue,
              Description = this._descriptionValue,
              Direction = directionDto?.DirectionEnum.ToString(),
              ApartmentNr = this._apartmentNrValue,
              CustomerTenantNo = this._customerTenantNo,
              Entrance = this._entrance
            };
            if (CreateEditTenantViewModel._entrancesList != null && !CreateEditTenantViewModel._entrancesList.Contains(this._entrance))
              CreateEditTenantViewModel._entrancesList.Add(this._entrance);
            MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
            {
              MessageType = MessageTypeEnum.Success,
              MessageText = MessageCodes.Success_Save.GetStringValue()
            };
            this.StructureUpdateAction = new ActionStructureAndEntitiesUpdate()
            {
              Tenant = tenant,
              Node = this._selectedNode,
              Guid = this._selectedNode.RootNode != this._selectedNode ? this._selectedNode.RootNode.Id : this._selectedNode.Id,
              Message = message,
              Name = this.Name,
              Description = this.Description
            };
            EventPublisher.Publish<ActionStructureAndEntitiesUpdate>(this.StructureUpdateAction, (IViewModel) this);
            this.OnRequestClose(true);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(new MSS.DTO.Message.Message()
            {
              MessageType = MessageTypeEnum.Validation,
              MessageText = MessageCodes.ValidationError.GetStringValue()
            }.MessageText);
        });
      }
    }

    public ICommand EditTenantCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          this.ValidateProperty("TenantNr");
          if (this.IsValid)
          {
            DirectionDTO directionDto = this.GetDirections.FirstOrDefault<DirectionDTO>((Func<DirectionDTO, bool>) (d => d.Id == this.SelectedDirectionId));
            FloorNameDTO floorNameDto = this.GetFloorNames.FirstOrDefault<FloorNameDTO>((Func<FloorNameDTO, bool>) (f => f.Id == this.SelectedFloorNameId));
            Tenant tenant1 = new Tenant();
            Tenant tenant2 = tenant1;
            TenantDTO entity = (TenantDTO) this._selectedNode.Entity;
            Guid guid = entity != null ? entity.Id : Guid.Empty;
            tenant2.Id = guid;
            tenant1.TenantNr = this._tenantNr;
            tenant1.Name = this._nameValue;
            tenant1.FloorName = floorNameDto?.FloorNameEnum.ToString();
            tenant1.FloorNr = this._floorNrValue;
            tenant1.Description = this._descriptionValue;
            tenant1.Direction = directionDto?.DirectionEnum.ToString();
            tenant1.ApartmentNr = this._apartmentNrValue;
            tenant1.CustomerTenantNo = this._customerTenantNo;
            tenant1.Entrance = this._entrance;
            Tenant source = tenant1;
            if (this._selectedNode.Entity == null)
            {
              TenantDTO destination = new TenantDTO();
              Mapper.CreateMap(typeof (Tenant), typeof (TenantDTO));
              Mapper.Map<Tenant, TenantDTO>(source, destination);
              this._selectedNode.Entity = (object) destination;
            }
            MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
            {
              MessageType = MessageTypeEnum.Success,
              MessageText = MessageCodes.Success_Save.GetStringValue()
            };
            this.StructureUpdateAction = new ActionStructureAndEntitiesUpdate()
            {
              Tenant = source,
              Guid = this._selectedNode.RootNode != this._selectedNode ? this._selectedNode.RootNode.Id : this._selectedNode.Id,
              Node = this._selectedNode,
              Message = message,
              Name = this.Name,
              Description = this.Description
            };
            EventPublisher.Publish<ActionStructureAndEntitiesUpdate>(this.StructureUpdateAction, (IViewModel) this);
            this.OnRequestClose(true);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(new MSS.DTO.Message.Message()
            {
              MessageType = MessageTypeEnum.Validation,
              MessageText = MessageCodes.ValidationError.GetStringValue()
            }.MessageText);
        });
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public override List<string> ValidateProperty(string propertyName)
    {
      string propertyName1 = this.GetPropertyName<int>((Expression<Func<int>>) (() => this.TenantNr));
      if (propertyName != propertyName1)
        return new List<string>();
      ICollection<string> validationErrors;
      this.GetTenantManagerInstance().ValidateTenantNr(this.TenantNr, this._localStructureTenantNrs, this.TenantGuid, out validationErrors);
      this.IsValid &= validationErrors.Count <= 0;
      return validationErrors.ToList<string>();
    }
  }
}


--- CreateFixedStructureViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.CreateFixedStructureViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.GMMWrapper;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.Structures;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.Settings;
using MVVM.Commands;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using Telerik.Windows.Controls;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class CreateFixedStructureViewModel : StructureViewModelBase
  {
    private ObservableCollection<StructureNodeDTO> _nodesCollection;
    private ScanMinoConnectManager _scannerMinoConnectManager;
    private int _numberOfReadMeters;
    private int _numberOfMetersInStructure;
    private List<StructureNodeDTO> _metersInStructure = new List<StructureNodeDTO>();
    private WalkByTestManager walkByTestManager;
    private bool _isEditStructureNode;
    private readonly IDeviceManager _deviceManager;
    private string _progressDialogMessage;
    private int _progressBarValue;
    private bool _isTenantSelected;
    private StructureNodeDTO _selectedStructureNode;
    private StructureNodeDTO _selectedTenantStructureNode;
    private StructureNodeDTO _selectedMeterStructureNode;
    private bool _isPasteActive;
    private StructureNodeDTO _savedInClipBoardStructureNodeDto;

    public CreateFixedStructureViewModel(
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
      : base(repositoryFactory, windowFactory)
    {
      this.AvailableNodesGroups = new ObservableCollection<Group>();
      Group group = new Group()
      {
        Name = CultureResources.GetValue("MSS_Available_Nodes_Folder")
      };
      StructuresHelper.LoadItemsInGroup(group, this.AvailableFixedStructureNodes);
      this.AvailableNodesGroups.Add(group);
      Mapper.CreateMap<StructureNodeDTO, StructureNodeDTO>();
      this._nodesCollection = this.InitializeNewFixedStructure();
      Mapper.CreateMap<MSS.Core.Model.Meters.Meter, MeterDTO>();
      Mapper.CreateMap<MSS.Core.Model.Structures.Location, LocationDTO>();
      Mapper.CreateMap<Tenant, TenantDTO>();
      EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(((StructureViewModelBase) this).UpdateEntities));
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(((StructureViewModelBase) this).ShowActionSyncFinished));
      this.DragDropAttachedProp = new DragDropAttachedObject()
      {
        IsEnabled = true,
        PhysicalLinks = new List<StructureNodeLinks>()
      };
      this._deviceManager = (IDeviceManager) new DeviceManagerWrapper("DefaultScanner");
      EventPublisher.Register<ItemDropped>(new Action<ItemDropped>(this.OnItemDropped));
      if (CustomerConfiguration.GetPropertyValue<bool>("IsTabletMode"))
      {
        bool? nullable = new bool?();
        while (!nullable.HasValue || !nullable.Value)
        {
          IKernel configurator = DIConfigurator.GetConfigurator();
          IParameter[] parameterArray = new IParameter[3];
          Guid? id = this._nodesCollection[0]?.Id;
          Guid empty = Guid.Empty;
          parameterArray[0] = (IParameter) new ConstructorArgument("isExistingEntity", (object) (bool) (id.HasValue ? (id.HasValue ? (id.GetValueOrDefault() != empty ? 1 : 0) : 0) : 1));
          parameterArray[1] = (IParameter) new ConstructorArgument("node", (object) this._nodesCollection[0]);
          parameterArray[2] = (IParameter) new ConstructorArgument("locationNumberList", (object) this.locationNumberList);
          nullable = this._windowFactory.CreateNewModalDialog((IViewModel) configurator.Get<CreateEditLocationViewModel>(parameterArray));
          if (nullable.HasValue && nullable.Value)
          {
            this._nodesCollection[0] = this._node;
            LocationDTO locationDto = new LocationDTO();
            this._nodesCollection[0].Entity = (object) Mapper.Map<LocationDTO>((object) this._updatedLocation);
            this.GetStructuresManagerInstance().TransactionalSaveNewFixedStructure((IList<StructureNodeDTO>) new List<StructureNodeDTO>()
            {
              this._nodesCollection[0]
            }, this.StructureEquipmentSettings);
          }
        }
        EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(this.UpdateStructure));
      }
      this.StructureEquipmentSettings = new StructureNodeEquipmentSettings();
      this.ResetStartStopButtons();
      this.IsTenantSelected = false;
    }

    public DragDropAttachedObject DragDropAttachedProp { get; set; }

    private ObservableCollection<StructureNodeDTO> InitializeNewFixedStructure()
    {
      ObservableCollection<StructureNodeDTO> observableCollection = new ObservableCollection<StructureNodeDTO>();
      StructureNodeType nodeType = this._structureNodeTypeRepository.FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (n => n.Name == StructureNodeTypeEnum.Location.GetStringValue()));
      StructureNodeDTO structureNodeDto = new StructureNodeDTO(Guid.Empty, nodeType.Name, new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Fixed);
      structureNodeDto.RootNode = structureNodeDto;
      observableCollection.Add(structureNodeDto);
      this.StructureEquipmentSettings = new StructureNodeEquipmentSettings();
      return observableCollection;
    }

    public ObservableCollection<Group> AvailableNodesGroups { get; private set; }

    public ObservableCollection<StructureNodeDTO> AvailableFixedStructureNodes
    {
      get
      {
        List<StructureNodeDTO> source = new List<StructureNodeDTO>();
        IRepository<StructureNodeType> nodeTypeRepository = this._structureNodeTypeRepository;
        Expression<Func<StructureNodeType, bool>> predicate = (Expression<Func<StructureNodeType, bool>>) (n => n.IsFixed);
        foreach (StructureNodeType nodeType in (IEnumerable<StructureNodeType>) nodeTypeRepository.SearchFor(predicate))
        {
          if (!nodeType.Name.Contains("Minomat"))
          {
            StructureNodeDTO structureNodeDto = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Fixed);
            source.Add(structureNodeDto);
          }
        }
        return new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) source.OrderBy<StructureNodeDTO, string>((Func<StructureNodeDTO, string>) (n => n.Name)));
      }
    }

    public ObservableCollection<StructureNodeDTO> FixedStructureNodeCollection
    {
      get
      {
        StructureImageHelper.SetImageIconPath(this._nodesCollection);
        return this._nodesCollection;
      }
    }

    public override ObservableCollection<StructureNodeDTO> GetStructureCollection()
    {
      return this._nodesCollection;
    }

    public string ProgressDialogMessage
    {
      get => this._progressDialogMessage;
      set
      {
        this._progressDialogMessage = value;
        this.OnPropertyChanged(nameof (ProgressDialogMessage));
      }
    }

    public int ProgressBarValue
    {
      get => this._progressBarValue;
      set
      {
        this._progressBarValue = value;
        this.OnPropertyChanged(nameof (ProgressBarValue));
      }
    }

    public bool IsTenantSelected
    {
      get => this._isTenantSelected;
      set
      {
        this._isTenantSelected = value;
        this.OnPropertyChanged(nameof (IsTenantSelected));
      }
    }

    public ICommand AddNodeCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto1 = parameter as StructureNodeDTO;
          if (new FixedStructureNodesValidator().IsValidNodesRelationship(structureNodeDto1, this.SelectedItem, false))
          {
            StructureNodeDTO structureNodeDto2 = new StructureNodeDTO();
            Mapper.Map<StructureNodeDTO, StructureNodeDTO>(structureNodeDto1, structureNodeDto2);
            if (structureNodeDto2.NodeType.Name == "Tenant")
              structureNodeDto2.Entity = (object) new TenantDTO();
            this.SelectedItem.SubNodes.Add(structureNodeDto2);
            if (structureNodeDto2.NodeType.Name == "Meter")
              this.CalculateNoOfDevicesForTenantParent(structureNodeDto2);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
          this.OnPropertyChanged("FixedStructureNodeCollection");
        }));
      }
    }

    public ICommand AddTenantCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          StructureNodeType nodeType = this._repositoryFactory.GetRepository<StructureNodeType>().FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (x => x.Name == StructureNodeTypeEnum.Tenant.ToString()));
          StructureNodeDTO node = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Fixed)
          {
            ParentNode = this._nodesCollection[0],
            RootNode = this._nodesCollection[0]
          };
          this._nodesCollection[0].SubNodes.Add(node);
          bool? nullable = this.EditSelectedStructureNode(node);
          if (!nullable.HasValue || !nullable.Value)
            this._nodesCollection[0].SubNodes.Remove(node);
          this.OnPropertyChanged("FixedStructureNodeCollection");
        }));
      }
    }

    public ICommand AddMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (this.SelectedStructureNode == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_ADD_METER);
          }
          else
          {
            StructureNodeType nodeType = this._repositoryFactory.GetRepository<StructureNodeType>().FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (x => x.Name == StructureNodeTypeEnum.Meter.ToString()));
            StructureNodeDTO node = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Fixed)
            {
              ParentNode = this.SelectedStructureNode,
              RootNode = this.FixedStructureNodeCollection.ElementAt<StructureNodeDTO>(0)
            };
            this.SelectedStructureNode.SubNodes.Insert(0, node);
            this.EditSelectedStructureNode(node);
            StructureNodeDTO tenantParent = this.GetTenantParent(node);
            StructureNodeDTO structureNodeDto = tenantParent.SubNodes.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter" && item.Id == Guid.Empty));
            if (structureNodeDto != null)
              tenantParent.SubNodes.Remove(structureNodeDto);
            if (tenantParent == null)
              return;
            (tenantParent.Entity as TenantDTO).NoOfDevices = new int?(tenantParent.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          }
        }));
      }
    }

    public ICommand EditTenantOrMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this._isEditStructureNode = true;
          if (this.SelectedStructureNode == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_OPERATION);
          }
          else
          {
            this.EditSelectedStructureNode(this.SelectedStructureNode);
            this._isEditStructureNode = false;
          }
        }));
      }
    }

    public ICommand EditLocationCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._isEditStructureNode = true;
          IKernel configurator = DIConfigurator.GetConfigurator();
          IParameter[] parameterArray = new IParameter[3];
          Guid? id = this._nodesCollection[0]?.Id;
          Guid empty = Guid.Empty;
          parameterArray[0] = (IParameter) new ConstructorArgument("isExistingEntity", (object) (bool) (id.HasValue ? (id.HasValue ? (id.GetValueOrDefault() != empty ? 1 : 0) : 0) : 1));
          parameterArray[1] = (IParameter) new ConstructorArgument("node", (object) this._nodesCollection[0]);
          parameterArray[2] = (IParameter) new ConstructorArgument("locationNumberList", (object) this.locationNumberList);
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) configurator.Get<CreateEditLocationViewModel>(parameterArray));
          if (newModalDialog.HasValue && newModalDialog.Value)
            this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
          else
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          this._isEditStructureNode = false;
        }));
      }
    }

    public ICommand DeleteTenantOrMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = (StructureNodeDTO) null;
          if (this.SelectedStructureNode.NodeType.Name == "Meter")
            structureNodeDto = this.GetTenantParent(this.SelectedStructureNode);
          this.RemoveSerialNumberFromUniquenessList(this.SelectedStructureNode);
          this.RemoveSelectedNodeFromStructure(this.SelectedStructureNode, this._nodesCollection);
          if (structureNodeDto != null)
            (structureNodeDto.Entity as TenantDTO).NoOfDevices = new int?(structureNodeDto.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          this.OnPropertyChanged("FixedStructureNodeCollection");
        }));
      }
    }

    public ICommand SaveStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is RadTreeListView radTreeListView2))
            return;
          radTreeListView2.ExpandAllHierarchyItems();
          ObservableCollection<StructureNodeDTO> nodeCollection = new ObservableCollection<StructureNodeDTO>(radTreeListView2.Items.Cast<StructureNodeDTO>());
          nodeCollection.SetNodesOrderNumber();
          if (this.ContinueActionIfMBusIsStarted(this._scannerMinoConnectManager))
            this.SaveFixedStructure(nodeCollection);
        }));
      }
    }

    public ICommand SaveFixedStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._nodesCollection.SetNodesOrderNumber();
          List<StructureNodeDTO> nodesList = new List<StructureNodeDTO>();
          this.GetNodesList(this._nodesCollection, ref nodesList);
          this.GetStructuresManagerInstance().TransactionalUpdateStructure((IList<StructureNodeDTO>) nodesList, StructureTypeEnum.Fixed, (StructureNodeEquipmentSettings) null);
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message();
          message.MessageType = MessageTypeEnum.Success;
          message.MessageText = MessageCodes.Success_Save.GetStringValue();
          foreach (StructureNodeDTO structureNodeDto in nodesList)
          {
            Guid entityId;
            StructureNodeTypeEnum entityType;
            StructuresHelper.GetEntityIdAndEntityType(structureNodeDto, out entityId, out entityType);
            EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
            {
              Guid = structureNodeDto.Id,
              EntityId = entityId,
              EntityType = entityType,
              Message = message
            }, (IViewModel) this);
          }
          this.OnRequestClose(false);
        }));
      }
    }

    private void SaveFixedStructure(
      ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      if (!this.ReconstructCollectionWithoutInvalidMBusScannerMeters(nodeCollection))
        return;
      this.GetStructuresManagerInstance().TransactionalSaveNewFixedStructure((IList<StructureNodeDTO>) nodeCollection, this.StructureEquipmentSettings);
      MSS.DTO.Message.Message message = new MSS.DTO.Message.Message();
      message.MessageType = MessageTypeEnum.Success;
      message.MessageText = MessageCodes.Success_Save.GetStringValue();
      foreach (StructureNodeDTO node in (Collection<StructureNodeDTO>) nodeCollection)
      {
        Guid entityId;
        StructureNodeTypeEnum entityType;
        StructuresHelper.GetEntityIdAndEntityType(node, out entityId, out entityType);
        EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
        {
          Guid = node.Id,
          EntityId = entityId,
          EntityType = entityType,
          Message = message
        }, (IViewModel) this);
      }
      this.OnRequestClose(false);
    }

    public ICommand EditEntityCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          if (selectedItem != null)
          {
            this.EditSelectedStructureNode(selectedItem);
            if (selectedItem.NodeType.Name == "Tenant" && selectedItem.SubNodes.Any<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")))
              this.CalculateNoOfDevicesForTenantParent(selectedItem.SubNodes.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
            else if (selectedItem.NodeType.Name == "Meter")
              this.CalculateNoOfDevicesForTenantParent(selectedItem);
          }
          this._nodesCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (object obj in radTreeListView.Items)
          {
            if (((StructureNodeDTO) obj).ParentNode == null)
              this._nodesCollection.Add((StructureNodeDTO) obj);
          }
          this.OnPropertyChanged("FixedStructureNodeCollection");
        }));
      }
    }

    public ICommand DeleteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          this._nodesCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (object obj in radTreeListView.Items)
          {
            if (((StructureNodeDTO) obj).ParentNode == null)
              this._nodesCollection.Add((StructureNodeDTO) obj);
          }
          StructureNodeDTO structureNodeDto = (StructureNodeDTO) null;
          if (selectedItem.NodeType.Name == "Meter")
            structureNodeDto = this.GetTenantParent(selectedItem);
          this.RemoveSelectedNodeFromStructure(selectedItem, this._nodesCollection);
          this.RemoveSerialNumberFromUniquenessList(selectedItem);
          if (structureNodeDto != null)
            (structureNodeDto.Entity as TenantDTO).NoOfDevices = new int?(structureNodeDto.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          this.OnPropertyChanged("FixedStructureNodeCollection");
        }));
      }
    }

    public StructureNodeDTO SelectedStructureNode
    {
      get => this._selectedStructureNode;
      set
      {
        this._selectedStructureNode = value;
        this.IsTenantSelected = value != null && value.NodeType.Name == "Tenant";
        this.OnPropertyChanged(nameof (SelectedStructureNode));
      }
    }

    public StructureNodeDTO SelectedTenantStructureNode
    {
      get => this._selectedTenantStructureNode;
      set
      {
        if (this.SelectedMeterStructureNode != null)
          this.SelectedMeterStructureNode = (StructureNodeDTO) null;
        this._selectedTenantStructureNode = value;
        this.SelectedStructureNode = value;
        this.OnPropertyChanged(nameof (SelectedTenantStructureNode));
      }
    }

    public StructureNodeDTO SelectedMeterStructureNode
    {
      get => this._selectedMeterStructureNode;
      set
      {
        if (this._selectedMeterStructureNode != null)
        {
          this._selectedMeterStructureNode = (StructureNodeDTO) null;
          this.OnPropertyChanged(nameof (SelectedMeterStructureNode));
        }
        if (this._selectedTenantStructureNode != null)
          this.SelectedTenantStructureNode = (StructureNodeDTO) null;
        this._selectedMeterStructureNode = value;
        this.SelectedStructureNode = value;
        this.OnPropertyChanged(nameof (SelectedMeterStructureNode));
      }
    }

    public bool IsPasteActive
    {
      get => this._isPasteActive;
      set
      {
        this._isPasteActive = value;
        this.OnPropertyChanged(nameof (IsPasteActive));
      }
    }

    public StructureNodeDTO SavedinClipStructureNodeDto
    {
      get => this._savedInClipBoardStructureNodeDto;
      set
      {
        this._savedInClipBoardStructureNodeDto = value;
        this.IsPasteActive = value != null;
      }
    }

    public ICommand CutToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          this.SavedinClipStructureNodeDto = (StructureNodeDTO) radTreeListView.SelectedItem;
          if (this.SavedinClipStructureNodeDto.ParentNode == null || this.SavedinClipStructureNodeDto.ParentNode != null && this.SavedinClipStructureNodeDto.ParentNode.Name == CultureResources.GetValue("MSS_Available_Nodes_Folder"))
          {
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Remove(this.SavedinClipStructureNodeDto);
            if (((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Count != 0)
              return;
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_ROOTNODE_CANNOT_BE_CUTTED);
          }
          else
          {
            StructureNodeDTO meterNode = (StructureNodeDTO) null;
            if (this.SavedinClipStructureNodeDto.NodeType.Name == "Meter")
              meterNode = this.GetTenantParent(this.SavedinClipStructureNodeDto);
            this.SavedinClipStructureNodeDto.ParentNode.SubNodes.Remove(this.SavedinClipStructureNodeDto);
            this.CalculateNoOfDevicesForTenantParent(meterNode);
          }
        }));
      }
    }

    public ICommand PasteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedStructureNode = (StructureNodeDTO) radTreeListView.SelectedItem;
          radTreeListView.SelectedItem = (object) null;
          FixedStructureNodesValidator structureNodesValidator = new FixedStructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, selectedStructureNode, false))
          {
            if (selectedStructureNode != null && selectedStructureNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = selectedStructureNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = selectedStructureNode.RootNode));
              selectedStructureNode.SubNodes.Add(this.SavedinClipStructureNodeDto);
            }
            else if (selectedStructureNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
            if (selectedStructureNode.NodeType.Name == "Tenant")
              (selectedStructureNode.Entity as TenantDTO).NoOfDevices = new int?(selectedStructureNode.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
        }));
      }
    }

    public ICommand PasteAfterToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          StructureNodeDTO parentNode = selectedItem.ParentNode;
          radTreeListView.SelectedItem = (object) null;
          FixedStructureNodesValidator structureNodesValidator = new FixedStructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, parentNode, false))
          {
            if (parentNode != null && parentNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = parentNode.RootNode));
              int num = parentNode.SubNodes.IndexOf(selectedItem);
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              parentNode.SubNodes.Insert(num + 1, this.SavedinClipStructureNodeDto);
            }
            else if (parentNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              this.SavedinClipStructureNodeDto.RootNode = this.SavedinClipStructureNodeDto;
              this.SavedinClipStructureNodeDto.ParentNode = (StructureNodeDTO) null;
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
            this.CalculateNoOfDevicesForAllTenants(selectedItem.RootNode);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
        }));
      }
    }

    public override ICommand CancelWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message();
          message.MessageType = MessageTypeEnum.Warning;
          message.MessageText = MessageCodes.OperationCancelled.GetStringValue();
          if (!this.ContinueActionIfMBusIsStarted(this._scannerMinoConnectManager))
            return;
          EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
          {
            Guid = Guid.Empty,
            Message = message
          }, (IViewModel) this);
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand CancelWindowAndDeleteStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          StructureNodeDTO nodeDTO = StructuresHelper.LoadStructureFromRootNodeId(this._repositoryFactory, this._nodesCollection[0].Id);
          this.GetStructuresManagerInstance().DeleteStructureNodeAndDescendants(nodeDTO);
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = MessageCodes.OperationCancelled.GetStringValue()
          };
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand ScanSettingsCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<StructureScanSettingsViewModel>((IParameter) new ConstructorArgument("equipmentSettings", (object) this.StructureEquipmentSettings)));
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_ScanSettings_Update_Message);
        }));
      }
    }

    public ICommand StartScanCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.MBusSelectedItem = this.SelectedItem;
          this._scannerMinoConnectManager = new ScanMinoConnectManager(this._repositoryFactory, this.StructureEquipmentSettings, this._deviceManager);
          this._scannerMinoConnectManager.OnProgressChanged += new EventHandler<int>(this.ScannerMinoConnectManagerOnProgressChanged);
          this._scannerMinoConnectManager.OnProgressMessage += new EventHandler<string>(this.ScannerMinoConnectManagerOnProgressMessage);
          this._scannerMinoConnectManager.OnMeterFound += new EventHandler<ZENNER.CommonLibrary.Entities.Meter>(this.ScannerMinoConnectManagerOnMeterFound);
          bool flag = this._scannerMinoConnectManager.StartScan();
          this.IsStartMBusScanButtonEnabled = false;
          this.IsStopMBusScanButtonEnabled = true;
          this.IsWalkByTestButtonEnabled = false;
          this.IsStopWalkByTestButtonEnabled = false;
          ScanMinoConnectManager.IsScanningStarted = true;
          WalkByTestManager.IsWalkByTestStarted = false;
          if (flag)
            return;
          this._scannerMinoConnectManager.StopScan();
          this.ResetStartStopButtons();
          MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_ScanSettingsNotSet, false);
        }));
      }
    }

    public ICommand StopScanCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          MSS.Business.Errors.MessageHandler.LogDebug("User stoped the scanning");
          this._scannerMinoConnectManager.StopScan();
          this.ResetStartStopButtons();
        }));
      }
    }

    public ICommand WalkByTestCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = CustomerConfiguration.GetPropertyValue<bool>("IsTabletMode") ? this.SelectedStructureNode : this.SelectedItem;
          this.walkByTestManager = new WalkByTestManager(this._repositoryFactory, Guid.Empty, (ProfileType) null);
          this.walkByTestManager.OnMeterValuesReceivedHandler += new EventHandler<MSS.Core.Model.Meters.Meter>(this.OnMeterValuesReceivedHandler);
          this.walkByTestManager.OnErrorReceivedHandler += new EventHandler(this.OnErrorReceivedHandler);
          this.walkByTestManager.StartReadingValues(structureNodeDto, new ProfileType());
          this.IsStartMBusScanButtonEnabled = false;
          this.IsStopMBusScanButtonEnabled = false;
          this.IsWalkByTestButtonEnabled = false;
          this.IsStopWalkByTestButtonEnabled = true;
          WalkByTestManager.IsWalkByTestStarted = true;
          this.GetMetersInStructure(structureNodeDto);
          this._numberOfReadMeters = 0;
          this._numberOfMetersInStructure = this._metersInStructure.Count<StructureNodeDTO>();
        }));
      }
    }

    public ICommand StopWalkByTestCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.walkByTestManager.OnMeterValuesReceivedHandler -= new EventHandler<MSS.Core.Model.Meters.Meter>(this.OnMeterValuesReceivedHandler);
          this.walkByTestManager.OnErrorReceivedHandler -= new EventHandler(this.OnErrorReceivedHandler);
          this.walkByTestManager.StopReadingValues();
          this.ResetStartStopButtons();
        }));
      }
    }

    private void OnMeterValuesReceivedHandler(object sender, MSS.Core.Model.Meters.Meter meter)
    {
      MeterDTO savedMeterDTO = Mapper.Map<MSS.Core.Model.Meters.Meter, MeterDTO>(meter);
      foreach (StructureNodeDTO structureNodeDto in this._metersInStructure)
      {
        StructureNodeDTO node = structureNodeDto;
        if (node.NodeType.Name == "Meter" && ((MeterDTO) node.Entity).Id == meter.Id && ((MeterDTO) node.Entity).SerialNumber == meter.SerialNumber)
        {
          ++this._numberOfReadMeters;
          Application.Current.Dispatcher.Invoke((Action) (() =>
          {
            node.Entity = (object) savedMeterDTO;
            node.Image = node.SetImageNode();
          }));
        }
      }
      if (this._numberOfReadMeters != this._numberOfMetersInStructure)
        return;
      this.walkByTestManager.StopReadingValues();
      this.ResetStartStopButtons();
    }

    private void OnErrorReceivedHandler(object sender, object e) => this.ResetStartStopButtons();

    private void ScannerMinoConnectManagerOnMeterFound(object sender, ZENNER.CommonLibrary.Entities.Meter e)
    {
      Application.Current.Dispatcher.Invoke((Action) (() =>
      {
        try
        {
          this.AddDevicesToFixedStructure(e);
        }
        catch (Exception ex)
        {
          MSS.Business.Errors.MessageHandler.LogException(ex);
          throw;
        }
      }));
    }

    private void ScannerMinoConnectManagerOnProgressMessage(object sender, string e)
    {
      this.ProgressDialogMessage = e;
    }

    private void ScannerMinoConnectManagerOnProgressChanged(object sender, int e)
    {
      this.ProgressBarValue = e;
      if (e != 100 || string.IsNullOrEmpty(this._scannerMinoConnectManager.SystemName) || !(this._scannerMinoConnectManager.SystemName == "M-Bus"))
        return;
      this._scannerMinoConnectManager.StopScan();
      this.ResetStartStopButtons();
    }

    private void GetMetersInStructure(StructureNodeDTO selectedNode)
    {
      this._metersInStructure.Clear();
      if (selectedNode.NodeType.Name == "Meter")
        this._metersInStructure.Add(selectedNode);
      this.WalkStructure(selectedNode);
    }

    private void WalkStructure(StructureNodeDTO selectedNode)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) selectedNode.SubNodes)
      {
        if (subNode.NodeType.Name == "Meter")
          this._metersInStructure.Add(subNode);
        this.WalkStructure(subNode);
      }
    }

    private void ResetStartStopButtons()
    {
      ScanMinoConnectManager.IsScanningStarted = false;
      WalkByTestManager.IsWalkByTestStarted = false;
      this.IsStartMBusScanButtonEnabled = true;
      this.IsStopMBusScanButtonEnabled = false;
      this.IsWalkByTestButtonEnabled = true;
      this.IsStopWalkByTestButtonEnabled = false;
    }

    private StructureNodeDTO GetTenantParent(StructureNodeDTO node)
    {
      StructureNodeDTO structureNodeDto = node;
      while (structureNodeDto.ParentNode != null && structureNodeDto != structureNodeDto.RootNode && structureNodeDto.NodeType.Name != "Tenant")
        structureNodeDto = structureNodeDto.ParentNode;
      return structureNodeDto.NodeType.Name == "Tenant" ? structureNodeDto : (StructureNodeDTO) null;
    }

    protected void OnItemDropped(ItemDropped treeChange)
    {
      foreach (StructureNodeDTO fixedStructureNode in (Collection<StructureNodeDTO>) this.FixedStructureNodeCollection)
        this.CalculateNoOfDevicesForAllTenants(fixedStructureNode);
    }

    protected void UpdateStructure(ActionStructureAndEntitiesUpdate update)
    {
      this._node = update.Node;
      this._updatedLocation = update.Location;
      this._updateMeterDTO = update.MeterDTO;
      this._updatedTenant = update.Tenant;
      this._name = update.Name;
      this._description = update.Description;
      if (update.Location != null)
        this._nodesCollection[0] = update.Node;
      if (this._updateMeterDTO != null)
        this._node.Entity = (object) this._updateMeterDTO;
      if (this._updatedTenant != null)
        this._node.Entity = (object) Mapper.Map<Tenant, TenantDTO>(this._updatedTenant);
      if (this._node != null)
      {
        this._node.Name = this._name;
        this._node.Description = this._description;
      }
      if (this._isEditStructureNode)
        return;
      new StructuresManager(this._repositoryFactory).TransactionalUpdateStructure((IList<StructureNodeDTO>) new StructureNodeDTO[1]
      {
        this._node
      }, StructureTypeEnum.Fixed, (StructureNodeEquipmentSettings) null);
    }

    private void GetNodesList(
      ObservableCollection<StructureNodeDTO> nodeCollection,
      ref List<StructureNodeDTO> nodesList)
    {
      foreach (StructureNodeDTO node in (Collection<StructureNodeDTO>) nodeCollection)
      {
        nodesList.Add(node);
        this.GetNodesList(node.SubNodes, ref nodesList);
      }
    }
  }
}


--- CreateLogicalStructureViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.CreateLogicalStructureViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Structures;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MVVM.Commands;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using Telerik.Windows.Controls;
using Telerik.Windows.Controls.TreeListView;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class CreateLogicalStructureViewModel : StructureViewModelBase
  {
    private ObservableCollection<StructureNodeDTO> _nodesCollection = new ObservableCollection<StructureNodeDTO>();
    private bool _isPasteActive;
    private StructureNodeDTO _savedInClipBoardStructureNodeDto;

    public CreateLogicalStructureViewModel(
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
      : base(repositoryFactory, windowFactory)
    {
      Mapper.CreateMap<Meter, MeterDTO>();
      Mapper.CreateMap<StructureNodeDTO, StructureNodeDTO>().ForMember((Expression<Func<StructureNodeDTO, object>>) (x => x.SubNodes), (Action<IMemberConfigurationExpression<StructureNodeDTO>>) (y => y.Ignore()));
      EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(((StructureViewModelBase) this).UpdateEntities));
      this.Groups = new ObservableCollection<StructureNodeDTO>();
      StructureNodeType nodeType = this._structureNodeTypeRepository.FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (s => s.Name == StructureNodeTypeEnum.Folder.GetStringValue()));
      if (nodeType != null)
      {
        StructureNodeDTO structureNodeDto1 = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_Available_Nodes_Folder"), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Logical);
        foreach (StructureNodeDTO logicalNode in (Collection<StructureNodeDTO>) this.LogicalNodeCollection)
          structureNodeDto1.SubNodes.Add(logicalNode);
        this.Groups.Add(structureNodeDto1);
        StructureNodeDTO structureNodeDto2 = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_Physical_Nodes_Folder"), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Physical);
        foreach (StructureNodeDTO physicalStructureNode in (Collection<StructureNodeDTO>) this.PhysicalStructureNodeCollection)
          structureNodeDto2.SubNodes.Add(physicalStructureNode);
        this.Groups.Add(structureNodeDto2);
      }
      this.DragDropAttachedProp = new DragDropAttachedObject()
      {
        IsEnabled = true,
        PhysicalLinks = new List<StructureNodeLinks>()
      };
    }

    public DragDropAttachedObject DragDropAttachedProp { get; set; }

    public ObservableCollection<StructureNodeDTO> Groups { get; private set; }

    public ObservableCollection<StructureNodeDTO> LogicalNodeCollection
    {
      get
      {
        List<StructureNodeDTO> list = new List<StructureNodeDTO>();
        IRepository<StructureNodeType> nodeTypeRepository = this._structureNodeTypeRepository;
        Expression<Func<StructureNodeType, bool>> predicate = (Expression<Func<StructureNodeType, bool>>) (s => s.IsLogical);
        foreach (StructureNodeType nodeType in (IEnumerable<StructureNodeType>) nodeTypeRepository.SearchFor(predicate))
        {
          StructureNodeDTO structureNodeDto = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Logical);
          list.Add(structureNodeDto);
        }
        return new ObservableCollection<StructureNodeDTO>(list);
      }
    }

    public StructureNodeDTO SelectedStructureNode { get; set; }

    public bool IsPasteActive
    {
      get => this._isPasteActive;
      set
      {
        this._isPasteActive = value;
        this.OnPropertyChanged(nameof (IsPasteActive));
      }
    }

    public StructureNodeDTO SavedinClipStructureNodeDto
    {
      get => this._savedInClipBoardStructureNodeDto;
      set
      {
        this._savedInClipBoardStructureNodeDto = value;
        this.IsPasteActive = value != null;
      }
    }

    public ICommand CutToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          this.SavedinClipStructureNodeDto = (StructureNodeDTO) radTreeListView.SelectedItem;
          if (this.SavedinClipStructureNodeDto.ParentNode == null || this.SavedinClipStructureNodeDto.ParentNode != null && this.SavedinClipStructureNodeDto.ParentNode.Name == CultureResources.GetValue("MSS_Available_Nodes_Folder"))
          {
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Remove(this.SavedinClipStructureNodeDto);
            if (((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Count != 0)
              return;
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_ROOTNODE_CANNOT_BE_CUTTED);
          }
          else
            this.SavedinClipStructureNodeDto.ParentNode.SubNodes.Remove(this.SavedinClipStructureNodeDto);
        }));
      }
    }

    public ICommand PasteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedStructureNode = (StructureNodeDTO) radTreeListView.SelectedItem;
          radTreeListView.SelectedItem = (object) null;
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, selectedStructureNode, false))
          {
            if (selectedStructureNode != null && selectedStructureNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = selectedStructureNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = selectedStructureNode.RootNode));
              selectedStructureNode.SubNodes.Add(this.SavedinClipStructureNodeDto);
            }
            else if (selectedStructureNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
        }));
      }
    }

    public ICommand PasteAfterToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          StructureNodeDTO parentNode = selectedItem.ParentNode;
          radTreeListView.SelectedItem = (object) null;
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, parentNode, false))
          {
            if (parentNode != null && parentNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = parentNode.RootNode));
              int num = parentNode.SubNodes.IndexOf(selectedItem);
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              parentNode.SubNodes.Insert(num + 1, this.SavedinClipStructureNodeDto);
            }
            else if (parentNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              this.SavedinClipStructureNodeDto.RootNode = this.SavedinClipStructureNodeDto;
              this.SavedinClipStructureNodeDto.ParentNode = (StructureNodeDTO) null;
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
        }));
      }
    }

    public ICommand AddNodeCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = parameter as StructureNodeDTO;
          if (!StructuresHelper.IsMeterWithMeterParent(structureNodeDto))
          {
            StructureNodeDTO destination = new StructureNodeDTO();
            StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
            Mapper.Map<StructureNodeDTO, StructureNodeDTO>(structureNodeDto, destination);
            if (structureNodeDto != null)
              destination.SubNodes = structureNodeDto.SubNodes;
            if (this.SelectedStructureNode == null)
            {
              StructureTypeEnum? structureType = destination.StructureType;
              StructureTypeEnum structureTypeEnum = StructureTypeEnum.Logical;
              if (structureType.GetValueOrDefault() == structureTypeEnum && structureType.HasValue)
              {
                destination.RootNode = destination;
                this.LogicalStructureNodeCollection.Add(destination);
              }
              else
                this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
            }
            else if (structureNodesValidator.IsValidNodesRelationship(structureNodeDto, this.SelectedStructureNode, false))
            {
              this.SelectedStructureNode.SubNodes.Add(destination);
              this.OnPropertyChanged("LogicalStructureNodeCollection");
            }
            else
              this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_CannotMoveSubMeter);
        }));
      }
    }

    public ObservableCollection<StructureNodeDTO> PhysicalStructureNodeCollection
    {
      get
      {
        return this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
      }
    }

    public ObservableCollection<StructureNodeDTO> LogicalStructureNodeCollection
    {
      get
      {
        StructureImageHelper.SetImageIconPath(this._nodesCollection);
        return this._nodesCollection;
      }
    }

    public ICommand SaveStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is RadTreeListView radTreeListView2))
            return;
          radTreeListView2.ExpandAllHierarchyItems();
          ObservableCollection<StructureNodeDTO> nodeCollection = new ObservableCollection<StructureNodeDTO>(radTreeListView2.Items.Cast<StructureNodeDTO>());
          nodeCollection.SetNodesOrderNumber();
          this.GetStructuresManagerInstance().TransactionalSaveNewLogicalStructure((IList<StructureNodeDTO>) nodeCollection);
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Success,
            MessageText = MessageCodes.Success_Save.GetStringValue()
          };
          foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) nodeCollection)
          {
            Guid entityId;
            StructureNodeTypeEnum entityType;
            StructuresHelper.GetEntityIdAndEntityType(structureNodeDto, out entityId, out entityType);
            EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
            {
              Guid = structureNodeDto.Id,
              EntityId = entityId,
              EntityType = entityType,
              Message = message
            }, (IViewModel) this);
          }
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand EditSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadContextMenu parent = parameter is RadMenuItem radMenuItem2 ? (RadContextMenu) radMenuItem2.Parent : (RadContextMenu) null;
          if (parent == null)
            return;
          TreeListViewRow clickedElement = parent.GetClickedElement<TreeListViewRow>();
          this.EditSelectedStructureNode((StructureNodeDTO) clickedElement.Item);
          RadTreeListView radTreeListView = clickedElement.ParentOfType<RadTreeListView>();
          ObservableCollection<StructureNodeDTO> observableCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (object obj in radTreeListView.Items)
            observableCollection.Add((StructureNodeDTO) obj);
          this._nodesCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) observableCollection)
          {
            if (structureNodeDto.ParentNode == null)
              this._nodesCollection.Add(structureNodeDto);
          }
          this.OnPropertyChanged("LogicalStructureNodeCollection");
        }));
      }
    }

    public ICommand EditEntityCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          if (selectedItem != null)
            this.EditSelectedStructureNode(selectedItem);
          ObservableCollection<StructureNodeDTO> observableCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (object obj in radTreeListView.Items)
            observableCollection.Add((StructureNodeDTO) obj);
          this._nodesCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) observableCollection)
          {
            if (structureNodeDto.ParentNode == null || structureNodeDto.ParentNode != null && structureNodeDto.ParentNode.Name == CultureResources.GetValue("MSS_Available_Nodes_Folder"))
              this._nodesCollection.Add(structureNodeDto);
          }
          this.OnPropertyChanged("LogicalStructureNodeCollection");
        }));
      }
    }

    public ICommand DeleteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          ObservableCollection<StructureNodeDTO> observableCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (object obj in radTreeListView.Items)
            observableCollection.Add((StructureNodeDTO) obj);
          this._nodesCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) observableCollection)
          {
            if (structureNodeDto.ParentNode == null)
              this._nodesCollection.Add(structureNodeDto);
          }
          foreach (StructureNodeDTO selectedNode in this.GetNodesToDelete(radTreeListView))
          {
            this.RemoveSelectedNodeFromStructure(selectedNode, this._nodesCollection);
            this.RemoveSerialNumberFromUniquenessList(selectedNode);
          }
          this.OnPropertyChanged("LogicalStructureNodeCollection");
        }));
      }
    }

    private List<StructureNodeDTO> GetNodesToDelete(RadTreeListView radTreeListView)
    {
      List<StructureNodeDTO> nodesToDelete = new List<StructureNodeDTO>();
      foreach (object selectedItem in (Collection<object>) radTreeListView.SelectedItems)
      {
        StructureNodeDTO foundNode = (StructureNodeDTO) null;
        this.GetNodeToDeleteFromStructure((StructureNodeDTO) selectedItem, this.LogicalStructureNodeCollection, ref foundNode);
        if (foundNode != null)
          nodesToDelete.Add(foundNode);
      }
      return nodesToDelete;
    }

    private void GetNodeToDeleteFromStructure(
      StructureNodeDTO nodeToDelete,
      ObservableCollection<StructureNodeDTO> collectionToSearch,
      ref StructureNodeDTO foundNode)
    {
      foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) collectionToSearch)
      {
        if (nodeToDelete != structureNodeDto)
        {
          this.GetNodeToDeleteFromStructure(nodeToDelete, structureNodeDto.SubNodes, ref foundNode);
        }
        else
        {
          foundNode = structureNodeDto;
          break;
        }
      }
    }

    public override ICommand CancelWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = MessageCodes.OperationCancelled.GetStringValue()
          };
          EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
          {
            Guid = Guid.Empty,
            Message = message
          }, (IViewModel) this);
          this.OnRequestClose(false);
        }));
      }
    }
  }
}


--- CreatePhysicalStructureViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.CreatePhysicalStructureViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using Microsoft.Win32;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.Configuration;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.GMMWrapper;
using MSS.Business.Modules.LicenseManagement;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Business.Utils;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Structures;
using MSS.Core.Utils;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.Configuration;
using MSS_Client.ViewModel.Meters;
using MSS_Client.ViewModel.Settings;
using MVVM.Commands;
using NHibernate;
using NHibernate.Linq;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using Telerik.Windows.Controls;
using Telerik.Windows.Controls.TreeListView;
using Telerik.Windows.Data;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class CreatePhysicalStructureViewModel : StructureViewModelBase
  {
    private ObservableCollection<StructureNodeDTO> _nodesCollection = new ObservableCollection<StructureNodeDTO>();
    private ScanMinoConnectManager _scannerMinoConnectManager;
    private int _metersInStructures;
    private string _systemName;
    private Dictionary<StructureNodeDTO, StructureNodeEquipmentSettings> _equipmentSettingsForMeters = new Dictionary<StructureNodeDTO, StructureNodeEquipmentSettings>();
    private IRepository<PhotoMeter> _photoMeterRepository;
    private IRepository<Note> _noteRepository;
    private bool _canViewMeter;
    private bool _canAddMeter;
    private bool _canEditMeter;
    private bool _canDeleteMeter;
    private readonly IDeviceManager _deviceManager;
    private string _progressDialogMessage;
    private int _progressBarValue;
    private bool _isPasteActive;
    private bool _isPhotosButtonActive;
    private StructureNodeDTO _savedInClipBoardStructureNodeDto;
    private bool _mBusScanNetworkVisibility;

    public CreatePhysicalStructureViewModel(
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
      : base(repositoryFactory, windowFactory)
    {
      this._photoMeterRepository = this._repositoryFactory.GetRepository<PhotoMeter>();
      this._noteRepository = this._repositoryFactory.GetRepository<Note>();
      this.AvailableNodesGroups = new ObservableCollection<MSS.Business.Modules.StructuresManagement.Group>();
      MSS.Business.Modules.StructuresManagement.Group group = new MSS.Business.Modules.StructuresManagement.Group()
      {
        Name = CultureResources.GetValue("MSS_Available_Nodes_Folder")
      };
      StructuresHelper.LoadItemsInGroup(group, this.AvailableNodesSettingsGroup);
      this.AvailableNodesGroups.Add(group);
      Mapper.CreateMap<StructureNodeDTO, StructureNodeDTO>();
      Mapper.CreateMap<MSS.Core.Model.Meters.Meter, MeterDTO>();
      EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(((StructureViewModelBase) this).UpdateEntities));
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(((StructureViewModelBase) this).ShowActionSyncFinished));
      EventPublisher.Register<TreeDragDropChange>(new Action<TreeDragDropChange>(this.OnTreeChange));
      EventPublisher.Register<MeterNotesUpdated>(new Action<MeterNotesUpdated>(this.UpdateTreeWithMeterNotes));
      EventPublisher.Register<MeterPhotosUpdated>(new Action<MeterPhotosUpdated>(this.UpdateTreeWithMeterPhotos));
      this.DragDropAttachedProp = new DragDropAttachedObject()
      {
        IsEnabled = true,
        PhysicalLinks = new List<StructureNodeLinks>()
      };
      this._deviceManager = (IDeviceManager) new DeviceManagerWrapper("DefaultScanner");
      StructureViewModelBase.deviceModelsInLicense = LicenseHelper.GetDeviceTypes().ToList<string>();
      this.InitStructureNodesCollection();
      this.StructureEquipmentSettings = new StructureNodeEquipmentSettings();
      this.UpdateDevicesFoundLabel();
      UsersManager usersManager = new UsersManager(repositoryFactory);
      this.MBusScanNetworkVisibility = usersManager.HasRight(OperationEnum.MbuScanNetwork.ToString());
      this._canViewMeter = usersManager.HasRight(OperationEnum.MeterView.ToString());
      this._canAddMeter = usersManager.HasRight(OperationEnum.MeterAdd.ToString());
      this._canDeleteMeter = usersManager.HasRight(OperationEnum.MeterDelete.ToString());
      this._canEditMeter = usersManager.HasRight(OperationEnum.MeterEdit.ToString());
    }

    public DragDropAttachedObject DragDropAttachedProp { get; set; }

    public ObservableCollection<MSS.Business.Modules.StructuresManagement.Group> AvailableNodesGroups { get; private set; }

    public ObservableCollection<StructureNodeDTO> AvailableNodesSettingsGroup
    {
      get
      {
        List<StructureNodeDTO> source = new List<StructureNodeDTO>();
        IRepository<StructureNodeType> nodeTypeRepository = this._structureNodeTypeRepository;
        Expression<Func<StructureNodeType, bool>> predicate = (Expression<Func<StructureNodeType, bool>>) (n => n.IsPhysical);
        foreach (StructureNodeType nodeType in (IEnumerable<StructureNodeType>) nodeTypeRepository.SearchFor(predicate))
        {
          StructureNodeDTO structureNodeDto = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Physical);
          source.Add(structureNodeDto);
        }
        return new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) source.OrderBy<StructureNodeDTO, string>((Func<StructureNodeDTO, string>) (n => n.Name)));
      }
    }

    public ObservableCollection<StructureNodeDTO> StructureNodeCollection
    {
      get => this._nodesCollection;
      set
      {
        this._nodesCollection = value;
        this.OnPropertyChanged(nameof (StructureNodeCollection));
      }
    }

    public StructureNodeDTO SelectedStructureNode { get; set; }

    public string ProgressDialogMessage
    {
      get => this._progressDialogMessage;
      set
      {
        this._progressDialogMessage = value;
        this.OnPropertyChanged(nameof (ProgressDialogMessage));
      }
    }

    public int ProgressBarValue
    {
      get => this._progressBarValue;
      set
      {
        this._progressBarValue = value;
        this.OnPropertyChanged(nameof (ProgressBarValue));
      }
    }

    public bool IsPasteActive
    {
      get => this._isPasteActive;
      set
      {
        this._isPasteActive = value;
        this.OnPropertyChanged(nameof (IsPasteActive));
      }
    }

    public bool IsPhotosButtonActive
    {
      get => this._isPhotosButtonActive;
      set
      {
        this._isPhotosButtonActive = value;
        this.OnPropertyChanged(nameof (IsPhotosButtonActive));
      }
    }

    public StructureNodeDTO SavedinClipStructureNodeDto
    {
      get => this._savedInClipBoardStructureNodeDto;
      set
      {
        this._savedInClipBoardStructureNodeDto = value;
        this.IsPasteActive = value != null;
      }
    }

    public bool MBusScanNetworkVisibility
    {
      get => this._mBusScanNetworkVisibility;
      set
      {
        this._mBusScanNetworkVisibility = value;
        this.OnPropertyChanged(nameof (MBusScanNetworkVisibility));
      }
    }

    public ICommand ChangeDeviceModelParametersCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (this.SelectedItem == null || !(this.SelectedItem.NodeType.Name == "Meter"))
            return;
          if (this.SelectedItem.Entity is MeterDTO entity2)
          {
            DeviceModel deviceModel = this._deviceManager.GetDeviceModel(entity2.DeviceType.GetGMMDeviceModelName());
            StructureNodeEquipmentSettings equipmentSettings = this._equipmentSettingsForMeters.FirstOrDefault<KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings>>((Func<KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings>, bool>) (item => item.Key == this.SelectedItem)).Value;
            if (equipmentSettings != null && !string.IsNullOrEmpty(equipmentSettings.DeviceModelReadingParams))
              deviceModel = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.UpdateDeviceModelWithSavedParams(deviceModel, equipmentSettings.DeviceModelReadingParams);
            if (deviceModel != null && deviceModel.ChangeableParameters != null && deviceModel.ChangeableParameters.Any<ChangeableParameter>())
            {
              DeviceModelChangeableParametersViewModel parametersViewModel = DIConfigurator.GetConfigurator().Get<DeviceModelChangeableParametersViewModel>((IParameter) new ConstructorArgument("selectedDeviceModel", (object) deviceModel));
              bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) parametersViewModel);
              if (newModalDialog.HasValue & newModalDialog.Value)
              {
                List<Config> changeableParameters = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.GetConfigListFromChangeableParameters(parametersViewModel.SelectedDeviceModel.ChangeableParameters);
                if (equipmentSettings == null)
                  equipmentSettings = new StructureNodeEquipmentSettings();
                equipmentSettings.DeviceModelReadingParams = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.SerializedConfigList(changeableParameters, parametersViewModel.SelectedDeviceModel.ChangeableParameters);
                if (this._equipmentSettingsForMeters.Any<KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings>>() && this._equipmentSettingsForMeters[this.SelectedItem] != null)
                  this._equipmentSettingsForMeters[this.SelectedItem] = equipmentSettings;
                else
                  this._equipmentSettingsForMeters.Add(this.SelectedItem, equipmentSettings);
              }
            }
            else
              MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Client_DeviceModeChangeableParameters_ParamsAreNull, false);
          }
          else
            MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_DeviceModelChangeableParams_MissingDeviceModel, false);
        }));
      }
    }

    public ICommand CutToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          this.SavedinClipStructureNodeDto = (StructureNodeDTO) radTreeListView.SelectedItem;
          if (this.SavedinClipStructureNodeDto.ParentNode == null || this.SavedinClipStructureNodeDto.ParentNode != null && this.SavedinClipStructureNodeDto.ParentNode.Name == CultureResources.GetValue("MSS_Available_Nodes_Folder"))
          {
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Remove(this.SavedinClipStructureNodeDto);
            if (((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Count == 0)
            {
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
              this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
              this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_ROOTNODE_CANNOT_BE_CUTTED);
            }
          }
          else
            this.SavedinClipStructureNodeDto.ParentNode.SubNodes.Remove(this.SavedinClipStructureNodeDto);
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand PasteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedStructureNode = (StructureNodeDTO) radTreeListView.SelectedItem;
          radTreeListView.SelectedItem = (object) null;
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, selectedStructureNode, false))
          {
            if (selectedStructureNode != null && selectedStructureNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = selectedStructureNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = selectedStructureNode.RootNode));
              selectedStructureNode.SubNodes.Add(this.SavedinClipStructureNodeDto);
            }
            else if (selectedStructureNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand PasteAfterToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          StructureNodeDTO parentNode = selectedItem.ParentNode;
          radTreeListView.SelectedItem = (object) null;
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, parentNode, false))
          {
            if (parentNode != null && parentNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = parentNode.RootNode));
              int num = parentNode.SubNodes.IndexOf(selectedItem);
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              parentNode.SubNodes.Insert(num + 1, this.SavedinClipStructureNodeDto);
            }
            else if (parentNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              this.SavedinClipStructureNodeDto.RootNode = this.SavedinClipStructureNodeDto;
              this.SavedinClipStructureNodeDto.ParentNode = (StructureNodeDTO) null;
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand AddNodeCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = parameter as StructureNodeDTO;
          StructureNodeDTO destination = new StructureNodeDTO();
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          Mapper.Map<StructureNodeDTO, StructureNodeDTO>(structureNodeDto, destination);
          if (this.SelectedItem == null)
          {
            if (!destination.NodeType.Name.Equals(typeof (MSS.Core.Model.Meters.Meter).Name))
            {
              destination.RootNode = destination;
              this.StructureNodeCollection.Add(destination);
            }
            else
              this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
          }
          else if (structureNodesValidator.IsValidNodesRelationship(structureNodeDto, this.SelectedItem, false))
          {
            this.SelectedItem.SubNodes.Add(destination);
            this.OnPropertyChanged("StructureNodeCollection");
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand SaveStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is RadTreeListView radTreeListView2))
            return;
          radTreeListView2.ExpandAllHierarchyItems();
          DataItemCollection items = radTreeListView2.Items;
          if (items.Count > 0)
          {
            ObservableCollection<StructureNodeDTO> nodeCollection = new ObservableCollection<StructureNodeDTO>(items.Cast<StructureNodeDTO>());
            if (this.ContinueActionIfMBusIsStarted(this._scannerMinoConnectManager) && this.ReconstructCollectionWithoutInvalidMBusScannerMeters(nodeCollection))
            {
              if (this.RemoveDuplicateAndNonExistentSerialNumbers(ref nodeCollection))
                MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DeleteStructure_Warning_Title, Resources.MSS_Client_DuplicateMetersWillNotBeSaved, false);
              nodeCollection.SetNodesOrderNumber();
              foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) nodeCollection)
              {
                if (structureNodeDto.Entity is MeterDTO && !((MeterDTO) structureNodeDto.Entity).ConfigDate.HasValue)
                  ((MeterDTO) structureNodeDto.Entity).ConfigDate = new DateTime?(DateTime.Now);
              }
              this.GetStructuresManagerInstance().TransactionalSaveNewPhysicalStructure((IList<StructureNodeDTO>) nodeCollection, this.StructureEquipmentSettings);
              MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
              {
                MessageType = MessageTypeEnum.Success,
                MessageText = MessageCodes.Success_Save.GetStringValue()
              };
              foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) nodeCollection)
              {
                Guid entityId;
                StructureNodeTypeEnum entityType;
                StructuresHelper.GetEntityIdAndEntityType(structureNodeDto, out entityId, out entityType);
                EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
                {
                  Guid = structureNodeDto.Id,
                  EntityId = entityId,
                  EntityType = entityType,
                  Message = message
                }, (IViewModel) this);
              }
              if (this._equipmentSettingsForMeters.Any<KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings>>())
              {
                List<Guid> structureNodeIds = this._equipmentSettingsForMeters.Keys.Select<StructureNodeDTO, Guid>((Func<StructureNodeDTO, Guid>) (item => item.Id)).ToList<Guid>();
                List<StructureNode> list = this._structureNodeRepository.Where((Expression<Func<StructureNode, bool>>) (item => structureNodeIds.Contains(item.Id))).ToList<StructureNode>();
                foreach (KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings> settingsForMeter in this._equipmentSettingsForMeters)
                {
                  KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings> currentEquipmentSettings = settingsForMeter;
                  StructureNode structureNode = list.FirstOrDefault<StructureNode>((Func<StructureNode, bool>) (item => item.Id == currentEquipmentSettings.Key.Id));
                  currentEquipmentSettings.Value.StructureNode = structureNode;
                }
                IRepository<StructureNodeEquipmentSettings> repository = this._repositoryFactory.GetRepository<StructureNodeEquipmentSettings>();
                ISession session = this._repositoryFactory.GetSession();
                session.BeginTransaction();
                repository.TransactionalInsertMany((IEnumerable<StructureNodeEquipmentSettings>) this._equipmentSettingsForMeters.Values.ToList<StructureNodeEquipmentSettings>());
                session.Transaction.Commit();
                session.Clear();
              }
              this.OnRequestClose(true);
            }
          }
          else
            this.OnRequestClose(false);
        }));
      }
    }

    private bool RemoveDuplicateAndNonExistentSerialNumbers(
      ref ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      List<string> distinctSerialNumbers = new List<string>();
      List<StructureNodeDTO> nodesToRemove = new List<StructureNodeDTO>();
      TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) nodeCollection, (Action<StructureNodeDTO>) (item =>
      {
        if (!(item.NodeType.Name == "Meter") && !(item.NodeType.Name == "RadioMeter"))
          return;
        if (item.Entity is MeterDTO entity2 && !distinctSerialNumbers.Contains(entity2.SerialNumber) && !string.IsNullOrEmpty(entity2.SerialNumber))
          distinctSerialNumbers.Add(entity2.SerialNumber);
        else
          nodesToRemove.Add(item);
      }));
      foreach (StructureNodeDTO node in nodesToRemove)
      {
        if (nodeCollection.Contains(node))
        {
          this.RemoveNodeAndChildrenFromCollection(node, ref nodeCollection);
          node.ParentNode.SubNodes.Remove(node);
        }
      }
      return nodesToRemove.Any<StructureNodeDTO>();
    }

    private void RemoveNodeAndChildrenFromCollection(
      StructureNodeDTO node,
      ref ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      nodeCollection.Remove(node);
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
        this.RemoveNodeAndChildrenFromCollection(subNode, ref nodeCollection);
    }

    public ICommand EditSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadContextMenu parent = parameter is RadMenuItem radMenuItem2 ? (RadContextMenu) radMenuItem2.Parent : (RadContextMenu) null;
          if (parent == null)
            return;
          TreeListViewRow clickedElement = parent.GetClickedElement<TreeListViewRow>();
          this.EditSelectedStructureNode((StructureNodeDTO) clickedElement.Item);
          RadTreeListView radTreeListView = clickedElement.ParentOfType<RadTreeListView>();
          this._nodesCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (object obj in radTreeListView.Items)
          {
            if (((StructureNodeDTO) obj).ParentNode == null)
              this._nodesCollection.Add((StructureNodeDTO) obj);
          }
          this.OnPropertyChanged("StructureNodeCollection");
        }));
      }
    }

    public ICommand EditEntityCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          if (selectedItem != null)
            this.EditSelectedStructureNode(selectedItem);
          this._nodesCollection = new ObservableCollection<StructureNodeDTO>();
          foreach (object obj in radTreeListView.Items)
          {
            if (((StructureNodeDTO) obj).ParentNode == null)
              this._nodesCollection.Add((StructureNodeDTO) obj);
          }
          this.OnPropertyChanged("StructureNodeCollection");
        }));
      }
    }

    public ICommand DeleteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.DeleteSelectedNodes(this.GetNodesToDelete(parameter as RadTreeListView));
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    private List<StructureNodeDTO> GetNodesToDelete(RadTreeListView radTreeListView)
    {
      List<StructureNodeDTO> nodesToDelete = new List<StructureNodeDTO>();
      foreach (object selectedItem in (Collection<object>) radTreeListView.SelectedItems)
      {
        StructureNodeDTO foundNode = (StructureNodeDTO) null;
        this.GetNodeToDeleteFromStructure((StructureNodeDTO) selectedItem, this.StructureNodeCollection, ref foundNode);
        if (foundNode != null)
          nodesToDelete.Add(foundNode);
      }
      return nodesToDelete;
    }

    private void GetNodeToDeleteFromStructure(
      StructureNodeDTO nodeToDelete,
      ObservableCollection<StructureNodeDTO> collectionToSearch,
      ref StructureNodeDTO foundNode)
    {
      foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) collectionToSearch)
      {
        if (nodeToDelete != structureNodeDto)
        {
          this.GetNodeToDeleteFromStructure(nodeToDelete, structureNodeDto.SubNodes, ref foundNode);
        }
        else
        {
          foundNode = structureNodeDto;
          break;
        }
      }
    }

    private void DeleteSelectedNodes(List<StructureNodeDTO> selectedNodesToDelete)
    {
      List<StructureNodeDTO> descendants = new List<StructureNodeDTO>();
      selectedNodesToDelete.ForEach((Action<StructureNodeDTO>) (item => descendants.AddRange(StructuresHelper.Descendants(item))));
      selectedNodesToDelete.ForEach((Action<StructureNodeDTO>) (nodeToDelete =>
      {
        this.RemoveSelectedNodeFromStructure(nodeToDelete, this._nodesCollection);
        this.RemoveSerialNumberFromUniquenessList(nodeToDelete);
      }));
      this.OnPropertyChanged("StructureNodeCollection");
    }

    public ICommand ScanSettingsCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<StructureScanSettingsViewModel>((IParameter) new ConstructorArgument("equipmentSettings", (object) this.StructureEquipmentSettings)));
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_ScanSettings_Update_Message);
        }));
      }
    }

    public ICommand ImportRadioMetersCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (!(this.SelectedItem.NodeType.Name == "Radio"))
            return;
          Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
          OpenFileDialog openFileDialog = new OpenFileDialog()
          {
            Filter = "CSV Document|*.csv|XML Document|*.xml|Xcel Document|*.xlsx",
            Title = Resources.MSS_Client_ImportStructureFromFile,
            RestoreDirectory = true
          };
          bool? nullable = openFileDialog.ShowDialog();
          if (nullable.HasValue && nullable.Value)
          {
            this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
            if (openFileDialog.FileName == string.Empty)
              return;
            this.ImportRadioMeters(openFileDialog.FileName);
            this.UpdateDevicesFoundLabel();
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
        }));
      }
    }

    public ICommand ImportDeliveryNoteCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ => this.ImportDeliveryNote(this.StructureNodeCollection)));
      }
    }

    public ICommand PhotosCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (this.SelectedItem.Id == Guid.Empty)
            Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Order_Warning_Title, Resources.MSS_Client_Photos_MeterMustBeSavedFirst, false)));
          else
            this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<MeterPhotosViewModel>((IParameter) new ConstructorArgument("windowFactory", (object) this._windowFactory), (IParameter) new ConstructorArgument("selectedStructureNode", (object) this.SelectedItem)));
        }));
      }
    }

    public override ICommand CancelWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = MessageCodes.OperationCancelled.GetStringValue()
          };
          if (!this.ContinueActionIfMBusIsStarted(this._scannerMinoConnectManager))
            return;
          EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
          {
            Guid = Guid.Empty,
            Message = message
          }, (IViewModel) this);
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand StartScanCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.MBusSelectedItem = this.SelectedItem;
          this._scannerMinoConnectManager = new ScanMinoConnectManager(this._repositoryFactory, this.StructureEquipmentSettings, this._deviceManager);
          this._scannerMinoConnectManager.OnProgressChanged += new EventHandler<int>(this.ScannerMinoConnectManagerOnProgressChanged);
          this._scannerMinoConnectManager.OnProgressMessage += new EventHandler<string>(this.ScannerMinoConnectManagerOnProgressMessage);
          this._scannerMinoConnectManager.OnMeterFound += new EventHandler<ZENNER.CommonLibrary.Entities.Meter>(this.ScannerMinoConnectManagerOnMeterFound);
          this._scannerMinoConnectManager.OnMissingTranslationRule += new EventHandler<string>(((StructureViewModelBase) this).OnMissingTranslationRule);
          this._systemName = this.StructureEquipmentSettings.SystemName;
          bool flag = this._scannerMinoConnectManager.StartScan();
          this.IsStartMBusScanButtonEnabled = false;
          ScanMinoConnectManager.IsScanningStarted = true;
          if (flag)
            return;
          this._scannerMinoConnectManager.StopScan();
          ScanMinoConnectManager.IsScanningStarted = false;
          this.IsStartMBusScanButtonEnabled = true;
          MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_ScanSettingsNotSet, false);
        }));
      }
    }

    private void ScannerMinoConnectManagerOnMeterFound(object sender, ZENNER.CommonLibrary.Entities.Meter e)
    {
      Application.Current.Dispatcher.Invoke((Action) (() =>
      {
        try
        {
          this.AddDevicesToPhysicalStructure(e, this._systemName);
          this.UpdateDevicesFoundLabel();
          this.RemoveSerialNumberOfMeterThatIsMissingTranslationRulesFromList(e.SerialNumber);
        }
        catch (Exception ex)
        {
          MSS.Business.Errors.MessageHandler.LogException(ex);
          throw;
        }
      }));
    }

    private void ScannerMinoConnectManagerOnProgressMessage(object sender, string e)
    {
      this.ProgressDialogMessage = e;
    }

    private void ScannerMinoConnectManagerOnProgressChanged(object sender, int e)
    {
      this.ProgressBarValue = e;
      if (e != 100 || string.IsNullOrEmpty(this._scannerMinoConnectManager.SystemName) || !(this._scannerMinoConnectManager.SystemName == "M-Bus"))
        return;
      this._scannerMinoConnectManager.StopScan();
      ScanMinoConnectManager.IsScanningStarted = false;
      this.IsStartMBusScanButtonEnabled = true;
      this.UpdateDevicesFoundLabel();
    }

    public ICommand StopScanCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._scannerMinoConnectManager.StopScan();
          ScanMinoConnectManager.IsScanningStarted = false;
          this.IsStartMBusScanButtonEnabled = true;
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand NotesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (async _ =>
        {
          await Task.Delay(100);
          await Task.Run((Action) (() =>
          {
            if (this.SelectedItem.AssignedNotes == null)
              this.SelectedItem.AssignedNotes = new List<Note>();
            Application.Current.Dispatcher.InvokeAsync<bool?>((Func<bool?>) (() => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<MeterNotesViewModel>((IParameter) new ConstructorArgument("windowFactory", (object) this._windowFactory), (IParameter) new ConstructorArgument("selectedStructureNode", (object) this.SelectedItem), (IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory)))));
          }));
        }));
      }
    }

    protected override sealed void UpdateDevicesFoundLabel()
    {
      this._metersInStructures = 0;
      if (this.StructureNodeCollection != null && this.StructureNodeCollection.Count > 0)
      {
        foreach (StructureNodeDTO structureNode in (Collection<StructureNodeDTO>) this.StructureNodeCollection)
        {
          int meters;
          this.GetMetersInStructure(structureNode, out meters);
          this._metersInStructures += meters;
        }
      }
      this.DevicesFoundLabel = Resources.MSS_DevicesFound + " " + (object) this._metersInStructures;
    }

    private void InitStructureNodesCollection()
    {
      StructureImageHelper.SetImageIconPath(this._nodesCollection);
      this.LoadPhotosAndNotes(this._nodesCollection);
    }

    public void OnTreeChange(TreeDragDropChange obj) => this.UpdateDevicesFoundLabel();

    private void LoadPhotosAndNotes(
      ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      foreach (StructureNodeDTO node in (Collection<StructureNodeDTO>) nodeCollection)
      {
        this.LoadPhotosAndNotesForNode(node);
        this.WalkSubnodesAndLoadPhotosAndNotes(node);
      }
    }

    private void WalkSubnodesAndLoadPhotosAndNotes(StructureNodeDTO node)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
      {
        this.LoadPhotosAndNotesForNode(subNode);
        this.WalkSubnodesAndLoadPhotosAndNotes(subNode);
      }
    }

    private void LoadPhotosAndNotesForNode(StructureNodeDTO node)
    {
      node.AssignedPicture = (List<byte[]>) null;
      node.AssignedNotes = new List<Note>();
      if (!(node.Id != Guid.Empty) || !(node.NodeType.Name == "Meter") && !(node.NodeType.Name == "RadioMeter"))
        return;
      node.AssignedPicture = this._photoMeterRepository.SearchFor((Expression<Func<PhotoMeter, bool>>) (item => item.StructureNode.Id == node.Id)).ToList<PhotoMeter>().Select<PhotoMeter, byte[]>((Func<PhotoMeter, byte[]>) (x => x.Payload)).ToList<byte[]>();
      node.AssignedNotes = this._noteRepository.SearchFor((Expression<Func<Note, bool>>) (item => item.StructureNode.Id == node.Id)).ToList<Note>();
      StructureNodeDTO structureNodeDto1 = node;
      StructureNodeDTO structureNodeDto2 = node;
      int num1;
      if (structureNodeDto2 == null)
      {
        num1 = 0;
      }
      else
      {
        int? count = structureNodeDto2.AssignedPicture?.Count;
        int num2 = 0;
        num1 = count.GetValueOrDefault() > num2 ? (count.HasValue ? 1 : 0) : 0;
      }
      List<byte[]> assignedPicture = num1 != 0 ? node.AssignedPicture : (List<byte[]>) null;
      structureNodeDto1.AssignedPicture = assignedPicture;
    }

    private void UpdateTreeWithMeterNotes(MeterNotesUpdated update)
    {
      if (update.UpdatedNode == null)
        return;
      List<Note> noteList = new List<Note>();
      foreach (Note assignedNote in update.UpdatedNode.AssignedNotes)
      {
        if (!update.NewNotesList.Contains(assignedNote))
          noteList.Add(assignedNote);
      }
      StructureNodeDTO structureNodeDto = update.UpdatedNode.NodeType.Name == "Meter" || update.UpdatedNode.NodeType.Name == "RadioMeter" ? update.UpdatedNode : this.GetMeterById(this._nodesCollection.First<StructureNodeDTO>(), update.UpdatedNode.Id);
      if (structureNodeDto != null)
      {
        noteList.ForEach((Action<Note>) (item => this._noteRepository.Delete(item)));
        structureNodeDto.AssignedNotes = update.NewNotesList;
        this.OnPropertyChanged("StructureNodeCollection");
      }
    }

    private void UpdateTreeWithMeterPhotos(MeterPhotosUpdated update)
    {
      if (update.UpdatedNode == null)
        return;
      StructureNodeDTO meterById = this.GetMeterById(this._nodesCollection.FirstOrDefault<StructureNodeDTO>(), update.UpdatedNode.Id);
      if (meterById != null)
      {
        meterById.AssignedPicture = update.NewPhotos;
        this.OnPropertyChanged("StructureNodeCollection");
      }
    }

    private StructureNodeDTO GetMeterById(StructureNodeDTO root, Guid idToFind)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) root.SubNodes)
      {
        if (subNode.Id != Guid.Empty && subNode.Id == idToFind)
          return subNode;
        this.GetMeterById(subNode, idToFind);
      }
      return (StructureNodeDTO) null;
    }
  }
}


--- DeleteStructureViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.DeleteStructureViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  internal class DeleteStructureViewModel : ViewModelBase
  {
    private ObservableCollection<StructureNodeDTO> _selectedNodeStructure;
    private bool _isLogicalStructureAffected;
    private GridLength _structureRowHeight;
    private GridLength _logicalStructureRowHeight;
    private ObservableCollection<StructureNodeDTO> _logicalStructureAffected;

    public DeleteStructureViewModel(
      ObservableCollection<StructureNodeDTO> structureToDelete,
      ObservableCollection<StructureNodeDTO> otherAffectedStructures)
    {
      this._selectedNodeStructure = structureToDelete;
      this.IsLogicalStructureAffected = otherAffectedStructures.Count != 0;
      this.LogicalStructureAffected = DeleteStructureViewModel.GetUniqueNodes(otherAffectedStructures);
    }

    private static ObservableCollection<StructureNodeDTO> GetUniqueNodes(
      ObservableCollection<StructureNodeDTO> otherAffectedStructures)
    {
      ObservableCollection<StructureNodeDTO> uniqueNodes = new ObservableCollection<StructureNodeDTO>();
      List<Guid> guidList = new List<Guid>();
      foreach (StructureNodeDTO affectedStructure in (Collection<StructureNodeDTO>) otherAffectedStructures)
      {
        if (!guidList.Contains(affectedStructure.Id))
        {
          uniqueNodes.Add(affectedStructure);
          guidList.Add(affectedStructure.Id);
        }
      }
      return uniqueNodes;
    }

    public ObservableCollection<StructureNodeDTO> SelectedNodeStructure
    {
      get => this._selectedNodeStructure;
      set => this._selectedNodeStructure = value;
    }

    public bool IsLogicalStructureAffected
    {
      get => this._isLogicalStructureAffected;
      set
      {
        this._isLogicalStructureAffected = value;
        if (this._isLogicalStructureAffected)
        {
          this._structureRowHeight = new GridLength(5.0, GridUnitType.Star);
          this._logicalStructureRowHeight = new GridLength(5.0, GridUnitType.Star);
        }
        else
        {
          this._structureRowHeight = new GridLength(10.0, GridUnitType.Star);
          this._logicalStructureRowHeight = new GridLength(0.0, GridUnitType.Star);
        }
        this.OnPropertyChanged(nameof (IsLogicalStructureAffected));
      }
    }

    public GridLength StructureRowHeight
    {
      get => this._structureRowHeight;
      set => this._structureRowHeight = value;
    }

    public GridLength LogicalStructureRowHeight
    {
      get => this._logicalStructureRowHeight;
      set => this._logicalStructureRowHeight = value;
    }

    public ObservableCollection<StructureNodeDTO> LogicalStructureAffected
    {
      get => this._logicalStructureAffected;
      set => this._logicalStructureAffected = value;
    }

    public ICommand DeleteStructureCommand
    {
      get => (ICommand) new RelayCommand((Action<object>) (Delegate => this.OnRequestClose(true)));
    }
  }
}


--- EditFixedStructureViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.EditFixedStructureViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.GMMWrapper;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.MSSClient;
using MSS.Core.Model.Structures;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Orders;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.Settings;
using MVVM.Commands;
using NHibernate;
using NHibernate.Linq;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using Telerik.Windows.Controls;
using Telerik.Windows.Controls.TreeListView;
using Telerik.Windows.Data;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class EditFixedStructureViewModel : StructureViewModelBase
  {
    private readonly StructureNodeDTO _parentForSelectedNode;
    private readonly StructureNodeDTO _selectedNode;
    private readonly bool _updatedForReadingOrder;
    private readonly ObservableCollection<StructureNodeDTO> _nodesCollection = new ObservableCollection<StructureNodeDTO>();
    private readonly List<StructureNodeLinks> _fixedStructureNodeLinksToDelete = new List<StructureNodeLinks>();
    private readonly List<StructureNode> _structureNodesToDelete = new List<StructureNode>();
    private readonly ObservableCollection<StructureNodeDTO> _fixedNodesDTOToDelete = new ObservableCollection<StructureNodeDTO>();
    private List<StructureNodeDTO> _newNodes = new List<StructureNodeDTO>();
    private byte[] _structureBytes;
    private ScanMinoConnectManager _scannerMinoConnectManager;
    private bool _isEditStructureNode;
    private int _numberOfReadMeters;
    private int _numberOfMetersInStructure;
    private List<StructureNodeDTO> _metersInStructure = new List<StructureNodeDTO>();
    private WalkByTestManager walkByTestManager;
    private readonly IDeviceManager _deviceManager;
    private string _progressDialogMessage;
    private int _progressBarValue;
    private bool _isTenantSelected;
    private StructureNodeDTO _selectedStructureNode;
    private StructureNodeDTO _selectedTenantStructureNode;
    private StructureNodeDTO _selectedMeterStructureNode;
    private bool _isPasteActive;
    private StructureNodeDTO _savedInClipBoardStructureNodeDto;
    private bool _isBusy;

    [Inject]
    public EditFixedStructureViewModel(
      StructureNodeDTO selectedNode,
      bool updatedForReadingOrder,
      bool isExecuteInstallation,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
      : base(repositoryFactory, windowFactory)
    {
      this._selectedNode = selectedNode;
      this._updatedForReadingOrder = updatedForReadingOrder;
      this._nodesCollection.Add(this._selectedNode);
      this._parentForSelectedNode = selectedNode.ParentNode;
      this._deviceManager = (IDeviceManager) new DeviceManagerWrapper("DefaultScanner");
      this.Title = isExecuteInstallation ? Resources.MSS_Client_Execute_Installation_Order : Resources.MSS_Client_Structures_Edit_Fixed_Structure;
      this.UpdateSerialNumberListForReadingOrder(updatedForReadingOrder);
      this.AvailableNodesGroups = new ObservableCollection<MSS.Business.Modules.StructuresManagement.Group>();
      MSS.Business.Modules.StructuresManagement.Group group = new MSS.Business.Modules.StructuresManagement.Group()
      {
        Name = CultureResources.GetValue("MSS_Available_Nodes_Folder")
      };
      StructuresHelper.LoadItemsInGroup(group, this.AvailableNodesSettingsGroup);
      this.AvailableNodesGroups.Add(group);
      Mapper.CreateMap<StructureNodeDTO, StructureNodeDTO>();
      Mapper.CreateMap<MSS.Core.Model.Meters.Meter, MeterDTO>();
      Mapper.CreateMap<MSS.Core.Model.Structures.Location, LocationDTO>();
      Mapper.CreateMap<Tenant, TenantDTO>();
      Mapper.CreateMap<Minomat, MinomatSerializableDTO>().ForMember((Expression<Func<MinomatSerializableDTO, object>>) (x => (object) x.ProviderId), (Action<IMemberConfigurationExpression<Minomat>>) (x => x.ResolveUsing((Func<Minomat, object>) (y => y.Provider != null ? (object) y.Provider.Id : (object) Guid.Empty))));
      EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(((StructureViewModelBase) this).UpdateEntities));
      EventPublisher.Register<ReplaceDeviceEvent>(new Action<ReplaceDeviceEvent>(((StructureViewModelBase) this).ReplaceDevice));
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(((StructureViewModelBase) this).ShowActionSyncFinished));
      this.StructureEquipmentSettings = this._repositoryFactory.GetRepository<StructureNodeEquipmentSettings>().FirstOrDefault((Expression<Func<StructureNodeEquipmentSettings, bool>>) (e => e.StructureNode.Id == selectedNode.RootNode.Id)) ?? new StructureNodeEquipmentSettings();
      this.DragDropAttachedProp = new DragDropAttachedObject()
      {
        IsEnabled = true,
        PhysicalLinks = new List<StructureNodeLinks>()
      };
      EventPublisher.Register<ItemDropped>(new Action<ItemDropped>(this.OnItemDropped));
      foreach (StructureNodeDTO root in (Collection<StructureNodeDTO>) this.StructureForSelectedNode)
        this.CalculateNoOfDevicesForAllTenants(root);
      this.ResetStartStopButtons();
      LocationDTO entity = this.StructureForSelectedNode[0].Entity as LocationDTO;
      if (!CustomerConfiguration.GetPropertyValue<bool>("IsTabletMode") || entity == null || entity.Generation != GenerationEnum.Radio3)
        return;
      EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(this.UpdateStructure));
    }

    [Inject]
    public EditFixedStructureViewModel(
      StructureNodeDTO selectedNode,
      bool updatedForReadingOrder,
      bool isExecuteInstallation,
      OrderDTO orderDTO,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
      : base(repositoryFactory, windowFactory)
    {
      this._selectedNode = selectedNode;
      this._structureBytes = orderDTO?.StructureBytes;
      this._updatedForReadingOrder = updatedForReadingOrder;
      this._nodesCollection.Add(this._selectedNode);
      this._parentForSelectedNode = selectedNode.ParentNode;
      this.Title = isExecuteInstallation ? Resources.MSS_Client_Execute_Installation_Order : Resources.MSS_Client_Structures_Edit_Fixed_Structure;
      this.UpdateSerialNumberListForReadingOrder(updatedForReadingOrder);
      this.AvailableNodesGroups = new ObservableCollection<MSS.Business.Modules.StructuresManagement.Group>();
      MSS.Business.Modules.StructuresManagement.Group group = new MSS.Business.Modules.StructuresManagement.Group()
      {
        Name = CultureResources.GetValue("MSS_Available_Nodes_Folder")
      };
      StructuresHelper.LoadItemsInGroup(group, this.AvailableNodesSettingsGroup);
      this.AvailableNodesGroups.Add(group);
      Mapper.CreateMap<StructureNodeDTO, StructureNodeDTO>();
      Mapper.CreateMap<MSS.Core.Model.Meters.Meter, MeterDTO>();
      Mapper.CreateMap<MSS.Core.Model.Structures.Location, LocationDTO>();
      Mapper.CreateMap<Tenant, TenantDTO>();
      Mapper.CreateMap<Minomat, MinomatSerializableDTO>().ForMember((Expression<Func<MinomatSerializableDTO, object>>) (x => (object) x.ProviderId), (Action<IMemberConfigurationExpression<Minomat>>) (x => x.ResolveUsing((Func<Minomat, object>) (y => y.Provider != null ? (object) y.Provider.Id : (object) Guid.Empty))));
      EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(((StructureViewModelBase) this).UpdateEntities));
      EventPublisher.Register<ReplaceDeviceEvent>(new Action<ReplaceDeviceEvent>(((StructureViewModelBase) this).ReplaceDevice));
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(((StructureViewModelBase) this).ShowActionSyncFinished));
      this.DragDropAttachedProp = new DragDropAttachedObject()
      {
        IsEnabled = true,
        PhysicalLinks = new List<StructureNodeLinks>()
      };
      EventPublisher.Register<ItemDropped>(new Action<ItemDropped>(this.OnItemDropped));
      foreach (StructureNodeDTO root in (Collection<StructureNodeDTO>) this.StructureForSelectedNode)
        this.CalculateNoOfDevicesForAllTenants(root);
      this.ResetStartStopButtons();
    }

    public DragDropAttachedObject DragDropAttachedProp { get; set; }

    public ObservableCollection<MSS.Business.Modules.StructuresManagement.Group> AvailableNodesGroups { get; }

    public ObservableCollection<StructureNodeDTO> AvailableNodesSettingsGroup
    {
      get
      {
        List<StructureNodeDTO> source = new List<StructureNodeDTO>();
        IRepository<StructureNodeType> nodeTypeRepository = this._structureNodeTypeRepository;
        Expression<Func<StructureNodeType, bool>> predicate = (Expression<Func<StructureNodeType, bool>>) (s => s.IsFixed);
        foreach (StructureNodeType nodeType in (IEnumerable<StructureNodeType>) nodeTypeRepository.SearchFor(predicate).OrderBy<StructureNodeType, string>((Func<StructureNodeType, string>) (n => n.Name)))
        {
          if (!nodeType.Name.Contains("Minomat"))
          {
            StructureNodeDTO structureNodeDto = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Fixed);
            source.Add(structureNodeDto);
          }
        }
        return new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) source.OrderBy<StructureNodeDTO, string>((Func<StructureNodeDTO, string>) (n => n.Name)));
      }
    }

    public ObservableCollection<StructureNodeDTO> StructureForSelectedNode
    {
      get
      {
        StructureImageHelper.SetImageIconPath(this._nodesCollection);
        return this._nodesCollection;
      }
    }

    public string Title { get; set; }

    public string ProgressDialogMessage
    {
      get => this._progressDialogMessage;
      set
      {
        this._progressDialogMessage = value;
        this.OnPropertyChanged(nameof (ProgressDialogMessage));
      }
    }

    public int ProgressBarValue
    {
      get => this._progressBarValue;
      set
      {
        this._progressBarValue = value;
        this.OnPropertyChanged(nameof (ProgressBarValue));
      }
    }

    public bool IsTenantSelected
    {
      get => this._isTenantSelected;
      set
      {
        this._isTenantSelected = value;
        this.OnPropertyChanged(nameof (IsTenantSelected));
      }
    }

    public StructureNodeDTO SelectedStructureNode
    {
      get => this._selectedStructureNode;
      set
      {
        this._selectedStructureNode = value;
        this.IsTenantSelected = value != null && value.NodeType.Name == "Tenant";
        this.OnPropertyChanged(nameof (SelectedStructureNode));
      }
    }

    public StructureNodeDTO SelectedTenantStructureNode
    {
      get => this._selectedTenantStructureNode;
      set
      {
        if (this.SelectedMeterStructureNode != null)
          this.SelectedMeterStructureNode = (StructureNodeDTO) null;
        this._selectedTenantStructureNode = value;
        this.SelectedStructureNode = value;
        this.OnPropertyChanged(nameof (SelectedTenantStructureNode));
      }
    }

    public StructureNodeDTO SelectedMeterStructureNode
    {
      get => this._selectedMeterStructureNode;
      set
      {
        if (this._selectedMeterStructureNode != null)
        {
          this._selectedMeterStructureNode = (StructureNodeDTO) null;
          this.OnPropertyChanged(nameof (SelectedMeterStructureNode));
        }
        if (this._selectedTenantStructureNode != null)
          this.SelectedTenantStructureNode = (StructureNodeDTO) null;
        this._selectedMeterStructureNode = value;
        this.SelectedStructureNode = value;
        this.OnPropertyChanged(nameof (SelectedMeterStructureNode));
      }
    }

    public bool IsPasteActive
    {
      get => this._isPasteActive;
      set
      {
        this._isPasteActive = value;
        this.OnPropertyChanged(nameof (IsPasteActive));
      }
    }

    public StructureNodeDTO SavedinClipStructureNodeDto
    {
      get => this._savedInClipBoardStructureNodeDto;
      set
      {
        this._savedInClipBoardStructureNodeDto = value;
        this.IsPasteActive = value != null;
      }
    }

    public ICommand AddTenantCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          StructureNodeType nodeType = this._repositoryFactory.GetRepository<StructureNodeType>().FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (x => x.Name == StructureNodeTypeEnum.Tenant.ToString()));
          StructureNodeDTO node = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Fixed)
          {
            ParentNode = this._nodesCollection[0],
            RootNode = this._nodesCollection[0]
          };
          this._nodesCollection[0].SubNodes.Add(node);
          bool? nullable = this.EditSelectedStructureNode(node);
          if (!nullable.HasValue || !nullable.Value)
            this._nodesCollection[0].SubNodes.Remove(node);
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public ICommand AddMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (this.SelectedStructureNode == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_ADD_METER);
          }
          else
          {
            StructureNodeType nodeType = this._repositoryFactory.GetRepository<StructureNodeType>().FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (x => x.Name == StructureNodeTypeEnum.Meter.ToString()));
            StructureNodeDTO node = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Fixed)
            {
              ParentNode = this.SelectedStructureNode,
              RootNode = this.StructureForSelectedNode.ElementAt<StructureNodeDTO>(0)
            };
            this.SelectedStructureNode.SubNodes.Insert(0, node);
            this.EditSelectedStructureNode(node);
            StructureNodeDTO tenantParent = this.GetTenantParent(node);
            StructureNodeDTO structureNodeDto = tenantParent.SubNodes.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter" && item.Id == Guid.Empty));
            if (structureNodeDto != null)
              tenantParent.SubNodes.Remove(structureNodeDto);
            if (tenantParent == null)
              return;
            (tenantParent.Entity as TenantDTO).NoOfDevices = new int?(tenantParent.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          }
        }));
      }
    }

    public ICommand EditTenantOrMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          this._isEditStructureNode = true;
          if (this.SelectedStructureNode == null)
          {
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_EXECUTE_INSTALLATION_ORDER_INVALID_OPERATION);
          }
          else
          {
            this.EditSelectedStructureNode(this.SelectedStructureNode);
            this._isEditStructureNode = false;
          }
        }));
      }
    }

    public ICommand DeleteTenantOrMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = (StructureNodeDTO) null;
          if (this.SelectedStructureNode.NodeType.Name == "Meter")
            structureNodeDto = this.GetTenantParent(this.SelectedStructureNode);
          this.RemoveSerialNumberFromUniquenessList(this.SelectedStructureNode);
          this.RemoveSelectedNodeFromStructure(this.SelectedStructureNode, this._nodesCollection);
          if (structureNodeDto != null)
            (structureNodeDto.Entity as TenantDTO).NoOfDevices = new int?(structureNodeDto.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public ICommand EditLocationCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._isEditStructureNode = true;
          IKernel configurator = DIConfigurator.GetConfigurator();
          IParameter[] parameterArray = new IParameter[3];
          Guid? id = this._nodesCollection[0]?.Id;
          Guid empty = Guid.Empty;
          parameterArray[0] = (IParameter) new ConstructorArgument("isExistingEntity", (object) (bool) (id.HasValue ? (id.HasValue ? (id.GetValueOrDefault() != empty ? 1 : 0) : 0) : 1));
          parameterArray[1] = (IParameter) new ConstructorArgument("node", (object) this._nodesCollection[0]);
          parameterArray[2] = (IParameter) new ConstructorArgument("locationNumberList", (object) this.locationNumberList);
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) configurator.Get<CreateEditLocationViewModel>(parameterArray));
          if (newModalDialog.HasValue && newModalDialog.Value)
            this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
          else
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          this._isEditStructureNode = false;
        }));
      }
    }

    public ICommand CutToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          this.SavedinClipStructureNodeDto = (StructureNodeDTO) radTreeListView.SelectedItem;
          if (this.SavedinClipStructureNodeDto.ParentNode == null || this.SavedinClipStructureNodeDto.ParentNode != null && this.SavedinClipStructureNodeDto.ParentNode.Name == CultureResources.GetValue("MSS_Available_Nodes_Folder"))
          {
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Remove(this.SavedinClipStructureNodeDto);
            if (((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Count != 0)
              return;
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_ROOTNODE_CANNOT_BE_CUTTED);
          }
          else
          {
            StructureNodeDTO meterNode = (StructureNodeDTO) null;
            if (this.SavedinClipStructureNodeDto.NodeType.Name == "Meter")
              meterNode = this.GetTenantParent(this.SavedinClipStructureNodeDto);
            this.SavedinClipStructureNodeDto.ParentNode.SubNodes.Remove(this.SavedinClipStructureNodeDto);
            this.CalculateNoOfDevicesForTenantParent(meterNode);
          }
        }));
      }
    }

    public ICommand PasteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedStructureNode = (StructureNodeDTO) radTreeListView.SelectedItem;
          radTreeListView.SelectedItem = (object) null;
          FixedStructureNodesValidator structureNodesValidator = new FixedStructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, selectedStructureNode, false))
          {
            if (selectedStructureNode != null && selectedStructureNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = selectedStructureNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = selectedStructureNode.RootNode));
              selectedStructureNode.SubNodes.Add(this.SavedinClipStructureNodeDto);
            }
            else if (selectedStructureNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
            if (selectedStructureNode.NodeType.Name == "Tenant")
              (selectedStructureNode.Entity as TenantDTO).NoOfDevices = new int?(selectedStructureNode.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
        }));
      }
    }

    public ICommand PasteAfterToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          StructureNodeDTO parentNode = selectedItem.ParentNode;
          radTreeListView.SelectedItem = (object) null;
          FixedStructureNodesValidator structureNodesValidator = new FixedStructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, parentNode, false))
          {
            if (parentNode != null && parentNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = parentNode.RootNode));
              int num = parentNode.SubNodes.IndexOf(selectedItem);
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              parentNode.SubNodes.Insert(num + 1, this.SavedinClipStructureNodeDto);
            }
            else if (parentNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              this.SavedinClipStructureNodeDto.RootNode = this.SavedinClipStructureNodeDto;
              this.SavedinClipStructureNodeDto.ParentNode = (StructureNodeDTO) null;
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
            this.CalculateNoOfDevicesForAllTenants(selectedItem.RootNode);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
        }));
      }
    }

    public ICommand AddNodeCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto1 = parameter as StructureNodeDTO;
          if (new FixedStructureNodesValidator().IsValidNodesRelationship(structureNodeDto1, this.SelectedItem, false))
          {
            StructureNodeDTO structureNodeDto2 = new StructureNodeDTO();
            Mapper.Map<StructureNodeDTO, StructureNodeDTO>(structureNodeDto1, structureNodeDto2);
            if (structureNodeDto2.NodeType.Name == "Tenant")
              structureNodeDto2.Entity = (object) new TenantDTO();
            this.SelectedItem.SubNodes.Add(structureNodeDto2);
            if (structureNodeDto2.NodeType.Name == "Meter")
              this.CalculateNoOfDevicesForTenantParent(structureNodeDto2);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        if (this._isBusy == value)
          return;
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    public ICommand SaveFixedStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._nodesCollection.SetNodesOrderNumber();
          List<StructureNodeDTO> nodesList = new List<StructureNodeDTO>();
          this.GetNodesList(this._nodesCollection, ref nodesList);
          this.GetStructuresManagerInstance().TransactionalUpdateStructure((IList<StructureNodeDTO>) nodesList, StructureTypeEnum.Fixed, (StructureNodeEquipmentSettings) null);
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message();
          message.MessageType = MessageTypeEnum.Success;
          message.MessageText = MessageCodes.Success_Save.GetStringValue();
          foreach (StructureNodeDTO structureNodeDto in nodesList)
          {
            Guid entityId;
            StructureNodeTypeEnum entityType;
            StructuresHelper.GetEntityIdAndEntityType(structureNodeDto, out entityId, out entityType);
            EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
            {
              Guid = structureNodeDto.Id,
              EntityId = entityId,
              EntityType = entityType,
              Message = message
            }, (IViewModel) this);
          }
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand CancelWindowAndDeleteNewNodesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (this._newNodes.Any<StructureNodeDTO>())
          {
            List<Guid> structureNodeIds = this._newNodes.Select<StructureNodeDTO, Guid>((Func<StructureNodeDTO, Guid>) (item => item.Id)).ToList<Guid>();
            List<StructureNode> list1 = this._structureNodeRepository.Where((Expression<Func<StructureNode, bool>>) (item => structureNodeIds.Contains(item.Id))).ToList<StructureNode>();
            List<StructureNodeLinks> list2 = this._structureNodeLinkRepository.Where((Expression<Func<StructureNodeLinks, bool>>) (item => structureNodeIds.Contains(item.Node.Id))).ToList<StructureNodeLinks>();
            ISession session = this._repositoryFactory.GetSession();
            session.BeginTransaction();
            this.GetStructuresManagerInstance().TransactionalDeleteAffectedStructureNodes((IList<StructureNodeLinks>) list2, (IList<StructureNode>) list1);
            session.Transaction.Commit();
          }
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = MessageCodes.OperationCancelled.GetStringValue()
          };
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand SaveStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (async parameter =>
        {
          if (!(parameter is RadTreeListView radTreeListView2))
            return;
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message();
          bool isDeleted = true;
          radTreeListView2.ExpandAllHierarchyItems();
          DataItemCollection nodes = radTreeListView2.Items;
          ObservableCollection<StructureNodeDTO> nodeCollection = new ObservableCollection<StructureNodeDTO>(nodes.Cast<StructureNodeDTO>());
          bool continueSave = this.ReconstructCollectionWithoutInvalidMBusScannerMeters(nodeCollection);
          if (this.ContinueActionIfMBusIsStarted(this._scannerMinoConnectManager) && continueSave)
          {
            this.IsBusy = true;
            isDeleted = false;
            await Task.Run((Func<Task>) (async () =>
            {
              nodeCollection.SetNodesOrderNumber(this._selectedNode, this._parentForSelectedNode);
              ObservableCollection<StructureNodeDTO> actualNodeCollection = this.ReconstructNodeCollection(nodeCollection, this._parentForSelectedNode);
              if (this._fixedStructureNodeLinksToDelete.Count != 0 || this._structureNodesToDelete.Count != 0)
              {
                bool? isOkButton;
                await Task.Run((Func<Task>) (async () => await Application.Current.Dispatcher.InvokeAsync((Action) (() =>
                {
                  isOkButton = this.ShowWarningWithStructuresToDeleteDialog(this._fixedNodesDTOToDelete, new ObservableCollection<StructureNodeDTO>());
                  if (isOkButton.HasValue && isOkButton.Value)
                  {
                    if (!this._updatedForReadingOrder)
                      this.GetStructuresManagerInstance().TransactionalUpdateStructure((IList<StructureNodeDTO>) actualNodeCollection, StructureTypeEnum.Fixed, this.StructureEquipmentSettings, (IList<StructureNodeLinks>) this._fixedStructureNodeLinksToDelete, (IList<StructureNode>) this._structureNodesToDelete);
                    else
                      this._structureBytes = this.GetStructuresManagerInstance().CreateStructureBytes(actualNodeCollection, this._structureBytes);
                  }
                  else
                  {
                    message.MessageType = MessageTypeEnum.Warning;
                    message.MessageText = MessageCodes.OperationCancelled.GetStringValue();
                    isDeleted = true;
                  }
                }))));
              }
              else
              {
                if (!this._updatedForReadingOrder)
                  this.GetStructuresManagerInstance().TransactionalUpdateStructure((IList<StructureNodeDTO>) actualNodeCollection, StructureTypeEnum.Fixed, this.StructureEquipmentSettings);
                else
                  this._structureBytes = this.GetStructuresManagerInstance().CreateStructureBytes(actualNodeCollection, this._structureBytes);
                message.MessageType = MessageTypeEnum.Success;
                message.MessageText = MessageCodes.Success_Save.GetStringValue();
              }
              if (!this._updatedForReadingOrder)
              {
                StructureNodeDTO location = nodeCollection.Count > 0 ? nodeCollection.First<StructureNodeDTO>().RootNode : this._fixedNodesDTOToDelete.First<StructureNodeDTO>().RootNode;
                StructureNodeLinks locationLink = this._repositoryFactory.GetRepository<StructureNodeLinks>().FirstOrDefault((Expression<Func<StructureNodeLinks, bool>>) (x => x.ParentNodeId == location.Id));
                IList<StructureNodeLinks> allLinksInTheStructure = (IList<StructureNodeLinks>) null;
                if (locationLink != null)
                {
                  Guid locationLinkParentNodeId = locationLink.ParentNodeId;
                  allLinksInTheStructure = this._repositoryFactory.GetRepository<StructureNodeLinks>().SearchFor((Expression<Func<StructureNodeLinks, bool>>) (x => x.ParentNodeId == locationLinkParentNodeId));
                }
                TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) nodeCollection, (Action<StructureNodeDTO>) (structureNodeDto =>
                {
                  Guid entityId;
                  StructureNodeTypeEnum entityType;
                  StructuresHelper.GetEntityIdAndEntityType(structureNodeDto, out entityId, out entityType);
                  StructureNodeLinks structureNodeLinks = allLinksInTheStructure != null ? allLinksInTheStructure.FirstOrDefault<StructureNodeLinks>((Func<StructureNodeLinks, bool>) (l => l.Node != null && l.Node.Id == structureNodeDto.Id && l.ParentNodeId == (structureNodeDto.ParentNode != null ? structureNodeDto.ParentNode.Id : Guid.Empty) && !l.EndDate.HasValue)) : (StructureNodeLinks) null;
                  message.MessageType = MessageTypeEnum.Success;
                  message.MessageText = MessageCodes.Success_Save.GetStringValue();
                  EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
                  {
                    Guid = structureNodeDto.Id,
                    LinkGuid = structureNodeLinks != null ? structureNodeLinks.Id : Guid.Empty,
                    EntityId = entityId,
                    EntityType = entityType,
                    Message = message
                  }, (IViewModel) this);
                }));
                StructureNodeDTO rootNode = nodeCollection.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.ParentNode == null && n.RootNode == n));
                EventPublisher.Publish<StructureRootUpdated>(new StructureRootUpdated()
                {
                  RootNodeId = rootNode != null ? rootNode.Id : Guid.Empty
                }, (IViewModel) this);
                foreach (StructureNodeDTO replacedMeter in this._replacedMeterList)
                {
                  this.GetStructuresManagerInstance().DeleteStructure(replacedMeter, StructureTypeEnum.Fixed, false);
                  this.GetStructuresManagerInstance().UpdateReplacedMeter(replacedMeter);
                }
                locationLink = (StructureNodeLinks) null;
                rootNode = (StructureNodeDTO) null;
              }
              else
              {
                this._structureBytes = this.GetStructuresManagerInstance().UpdateReplacedMeter(this._replacedMeterList, this._structureBytes);
                EventPublisher.Publish<StructureBytesUpdated>(new StructureBytesUpdated()
                {
                  StructureBytes = this._structureBytes
                }, (IViewModel) this);
              }
            }));
            this.IsBusy = false;
            if (!isDeleted)
              this.OnRequestClose(true);
          }
          nodes = (DataItemCollection) null;
        }));
      }
    }

    public ICommand EditEntityCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO selectedItem = (StructureNodeDTO) (parameter as RadTreeListView).SelectedItem;
          if (selectedItem != null)
          {
            this.SetParentAndRootNode(selectedItem);
            this.EditSelectedStructureNode(selectedItem);
            if (selectedItem.NodeType.Name == "Tenant" && selectedItem.SubNodes.Any<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")))
              this.CalculateNoOfDevicesForTenantParent(selectedItem.SubNodes.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
            else if (selectedItem.NodeType.Name == "Meter")
              this.CalculateNoOfDevicesForTenantParent(selectedItem);
          }
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public ICommand DeleteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO selectedItem = (StructureNodeDTO) (parameter as RadTreeListView).SelectedItem;
          StructureNodeDTO structureNodeDto = (StructureNodeDTO) null;
          if (selectedItem.NodeType.Name == "Meter")
            structureNodeDto = this.GetTenantParent(selectedItem);
          this.DeleteSelectedNode(selectedItem);
          if (structureNodeDto != null)
            (structureNodeDto.Entity as TenantDTO).NoOfDevices = new int?(structureNodeDto.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    private void DeleteSelectedNode(StructureNodeDTO selectedNode)
    {
      IEnumerable<StructureNodeDTO> source = StructuresHelper.Descendants(selectedNode);
      if (selectedNode.Id == Guid.Empty && source.All<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.Id == Guid.Empty)))
      {
        this.RemoveSelectedNodeFromStructure(selectedNode, this._nodesCollection);
        this.RemoveSerialNumberFromUniquenessList(selectedNode);
      }
      else
      {
        bool? nullable = MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning_DeleteStructure_Title.GetStringValue(), MessageCodes.Warning_DeleteFixedStructure.GetStringValue(), true);
        if (nullable.HasValue && nullable.Value)
        {
          this._fixedNodesDTOToDelete.Add(selectedNode);
          this.GetAffectedStructureNodesToDelete(selectedNode);
          this.RemoveSelectedNodeFromStructure(selectedNode, this._nodesCollection);
          this.RemoveSerialNumberFromUniquenessList(selectedNode);
        }
      }
    }

    public override ICommand CancelWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = MessageCodes.OperationCancelled.GetStringValue()
          };
          if (!this.ContinueActionIfMBusIsStarted(this._scannerMinoConnectManager))
            return;
          EventPublisher.Publish<ShowMessage>(new ShowMessage()
          {
            Message = message
          }, (IViewModel) this);
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand ReplaceMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (param =>
        {
          if (param is StructureNodeDTO node2)
            this.EditSelectedStructureNode(node2, true);
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public ICommand ReplaceMeterContextMenuCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (param =>
        {
          RadContextMenu parent = param is RadMenuItem radMenuItem2 ? (RadContextMenu) radMenuItem2.Parent : (RadContextMenu) null;
          if (parent != null)
          {
            StructureNodeDTO node = (StructureNodeDTO) parent.GetClickedElement<TreeListViewRow>().Item;
            if (node != null)
              this.EditSelectedStructureNode(node, true);
          }
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public ICommand ScanSettingsCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<StructureScanSettingsViewModel>((IParameter) new ConstructorArgument("equipmentSettings", (object) this.StructureEquipmentSettings)));
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_ScanSettings_Update_Message);
        }));
      }
    }

    public ICommand StartScanCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.MBusSelectedItem = this.SelectedItem;
          this._scannerMinoConnectManager = new ScanMinoConnectManager(this._repositoryFactory, this.StructureEquipmentSettings, this._deviceManager);
          this._scannerMinoConnectManager.OnProgressChanged += new EventHandler<int>(this.ScannerMinoConnectManagerOnProgressChanged);
          this._scannerMinoConnectManager.OnProgressMessage += new EventHandler<string>(this.ScannerMinoConnectManagerOnProgressMessage);
          this._scannerMinoConnectManager.OnMeterFound += new EventHandler<ZENNER.CommonLibrary.Entities.Meter>(this.ScannerMinoConnectManagerOnMeterFound);
          bool flag = this._scannerMinoConnectManager.StartScan();
          this.IsStartMBusScanButtonEnabled = false;
          this.IsStopMBusScanButtonEnabled = true;
          this.IsWalkByTestButtonEnabled = false;
          this.IsStopWalkByTestButtonEnabled = false;
          ScanMinoConnectManager.IsScanningStarted = true;
          if (flag)
            return;
          this._scannerMinoConnectManager.StopScan();
          this.ResetStartStopButtons();
          MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_ScanSettingsNotSet, false);
        }));
      }
    }

    public ICommand StopScanCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._scannerMinoConnectManager.StopScan();
          this.ResetStartStopButtons();
        }));
      }
    }

    public ICommand WalkByTestCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = CustomerConfiguration.GetPropertyValue<bool>("IsTabletMode") ? this.SelectedStructureNode : this.SelectedItem;
          this.walkByTestManager = new WalkByTestManager(this._repositoryFactory, Guid.Empty, (ProfileType) null);
          this.walkByTestManager.OnMeterValuesReceivedHandler += new EventHandler<MSS.Core.Model.Meters.Meter>(this.OnMeterValuesReceivedHandler);
          this.walkByTestManager.OnErrorReceivedHandler += new EventHandler(this.OnErrorReceivedHandler);
          this.walkByTestManager.StartReadingValues(structureNodeDto, new ProfileType());
          this.IsStartMBusScanButtonEnabled = false;
          this.IsStopMBusScanButtonEnabled = false;
          this.IsWalkByTestButtonEnabled = false;
          this.IsStopWalkByTestButtonEnabled = true;
          WalkByTestManager.IsWalkByTestStarted = true;
          this.GetMetersInStructure(structureNodeDto);
          this._numberOfReadMeters = 0;
          this._numberOfMetersInStructure = this._metersInStructure.Count<StructureNodeDTO>();
        }));
      }
    }

    public ICommand StopWalkByTestCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.walkByTestManager.OnMeterValuesReceivedHandler -= new EventHandler<MSS.Core.Model.Meters.Meter>(this.OnMeterValuesReceivedHandler);
          this.walkByTestManager.OnErrorReceivedHandler -= new EventHandler(this.OnErrorReceivedHandler);
          this.walkByTestManager.StopReadingValues();
          this.ResetStartStopButtons();
        }));
      }
    }

    private void OnMeterValuesReceivedHandler(object sender, MSS.Core.Model.Meters.Meter meter)
    {
      MeterDTO savedMeterDTO = Mapper.Map<MSS.Core.Model.Meters.Meter, MeterDTO>(meter);
      foreach (StructureNodeDTO structureNodeDto in this._metersInStructure)
      {
        StructureNodeDTO node = structureNodeDto;
        if (node.NodeType.Name == "Meter" && ((MeterDTO) node.Entity).Id == meter.Id && ((MeterDTO) node.Entity).SerialNumber == meter.SerialNumber)
        {
          ++this._numberOfReadMeters;
          Application.Current.Dispatcher.Invoke((Action) (() =>
          {
            node.Entity = (object) savedMeterDTO;
            node.Image = node.SetImageNode();
          }));
        }
      }
      if (this._numberOfReadMeters != this._numberOfMetersInStructure)
        return;
      this.walkByTestManager.StopReadingValues();
      this.ResetStartStopButtons();
    }

    private void OnErrorReceivedHandler(object sender, object e) => this.ResetStartStopButtons();

    private void ScannerMinoConnectManagerOnMeterFound(object sender, ZENNER.CommonLibrary.Entities.Meter e)
    {
      Application.Current.Dispatcher.Invoke((Action) (() =>
      {
        try
        {
          this.AddDevicesToFixedStructure(e);
        }
        catch (Exception ex)
        {
          MSS.Business.Errors.MessageHandler.LogException(ex);
          throw;
        }
      }));
    }

    private void ScannerMinoConnectManagerOnProgressMessage(object sender, string e)
    {
      this.ProgressDialogMessage = e;
    }

    private void ScannerMinoConnectManagerOnProgressChanged(object sender, int e)
    {
      this.ProgressBarValue = e;
      if (e != 100 || string.IsNullOrEmpty(this._scannerMinoConnectManager.SystemName) || !(this._scannerMinoConnectManager.SystemName == "M-Bus"))
        return;
      this._scannerMinoConnectManager.StopScan();
      this.ResetStartStopButtons();
    }

    private void GetAffectedStructureNodesToDelete(StructureNodeDTO selectedNode)
    {
      List<StructureNodeLinks> structureNodeLinks;
      List<StructureNode> structureNodes;
      this.GetStructuresManagerInstance().GetFixedStructureNodes(selectedNode, out structureNodeLinks, out structureNodes);
      structureNodeLinks.ForEach(new Action<StructureNodeLinks>(this._fixedStructureNodeLinksToDelete.Add));
      structureNodes.ForEach(new Action<StructureNode>(this._structureNodesToDelete.Add));
    }

    private void SetParentAndRootNode(StructureNodeDTO node)
    {
      if (node.ParentNode != null || node.RootNode != null || this._parentForSelectedNode == null)
        return;
      StructureNodeDTO structureNodeDto = this._parentForSelectedNode.RootNode != this._parentForSelectedNode ? this._parentForSelectedNode.RootNode : this._parentForSelectedNode;
      node.ParentNode = this._parentForSelectedNode;
      node.RootNode = structureNodeDto;
    }

    public override ObservableCollection<StructureNodeDTO> GetStructureCollection()
    {
      return this._nodesCollection;
    }

    private void GetMetersInStructure(StructureNodeDTO selectedNode)
    {
      this._metersInStructure.Clear();
      if (selectedNode.NodeType.Name == "Meter")
        this._metersInStructure.Add(selectedNode);
      this.WalkStructure(selectedNode);
    }

    private void WalkStructure(StructureNodeDTO selectedNode)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) selectedNode.SubNodes)
      {
        if (subNode.NodeType.Name == "Meter")
          this._metersInStructure.Add(subNode);
        this.WalkStructure(subNode);
      }
    }

    private void ResetStartStopButtons()
    {
      ScanMinoConnectManager.IsScanningStarted = false;
      WalkByTestManager.IsWalkByTestStarted = false;
      this.IsStartMBusScanButtonEnabled = true;
      this.IsStopMBusScanButtonEnabled = false;
      this.IsWalkByTestButtonEnabled = true;
      this.IsStopWalkByTestButtonEnabled = false;
    }

    private StructureNodeDTO GetTenantParent(StructureNodeDTO node)
    {
      StructureNodeDTO structureNodeDto = node;
      while (structureNodeDto.ParentNode != null && structureNodeDto != structureNodeDto.RootNode && structureNodeDto.NodeType.Name != "Tenant")
        structureNodeDto = structureNodeDto.ParentNode;
      return structureNodeDto.NodeType.Name == "Tenant" ? structureNodeDto : (StructureNodeDTO) null;
    }

    protected void OnItemDropped(ItemDropped treeChange)
    {
      foreach (StructureNodeDTO root in (Collection<StructureNodeDTO>) this.StructureForSelectedNode)
        this.CalculateNoOfDevicesForAllTenants(root);
    }

    private void GetNodesList(
      ObservableCollection<StructureNodeDTO> nodeCollection,
      ref List<StructureNodeDTO> nodesList)
    {
      foreach (StructureNodeDTO node in (Collection<StructureNodeDTO>) nodeCollection)
      {
        nodesList.Add(node);
        this.GetNodesList(node.SubNodes, ref nodesList);
      }
    }

    protected void UpdateStructure(ActionStructureAndEntitiesUpdate update)
    {
      this._node = update.Node;
      this._updatedLocation = update.Location;
      this._updateMeterDTO = update.MeterDTO;
      this._updatedTenant = update.Tenant;
      this._name = update.Name;
      this._description = update.Description;
      if (update.Location != null)
        this._nodesCollection[0] = update.Node;
      if (this._updateMeterDTO != null)
        this._node.Entity = (object) this._updateMeterDTO;
      if (this._updatedTenant != null)
        this._node.Entity = (object) Mapper.Map<Tenant, TenantDTO>(this._updatedTenant);
      if (this._node != null)
      {
        this._node.Name = this._name;
        this._node.Description = this._description;
      }
      if (this._isEditStructureNode)
        return;
      new StructuresManager(this._repositoryFactory).TransactionalUpdateStructure((IList<StructureNodeDTO>) new StructureNodeDTO[1]
      {
        this._node
      }, StructureTypeEnum.Fixed, (StructureNodeEquipmentSettings) null);
      if (this._node.NodeType.Name == "Meter")
        this._newNodes.Insert(0, this._node);
      else if (this._node.NodeType.Name == "Tenant")
        this._newNodes.Insert(this._newNodes.Count, this._node);
    }
  }
}


--- EditGenericEntityViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.EditGenericEntityViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.DTO.MessageHandler;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class EditGenericEntityViewModel : ViewModelBase
  {
    private StructureNodeDTO _selectedNode;
    private readonly IRepositoryFactory _repositoryFactory;
    private string _entityDialogTitle;
    private string _name;
    private string _description;

    public EditGenericEntityViewModel(StructureNodeDTO node, IRepositoryFactory repositoryFactory)
    {
      this._repositoryFactory = repositoryFactory;
      this.EntityDialogTitle = Resources.MSS_Client_Edit + " " + node.NodeType.Name;
      this._selectedNode = node;
      this.Name = node.Name;
      this.Description = node.Description;
    }

    public string EntityDialogTitle
    {
      get => this._entityDialogTitle;
      set => this._entityDialogTitle = value;
    }

    public string Name
    {
      get => this._name;
      set
      {
        this._name = value;
        this.OnPropertyChanged(nameof (Name));
      }
    }

    public string Description
    {
      get => this._description;
      set
      {
        this._description = value;
        this.OnPropertyChanged(nameof (Description));
      }
    }

    public ICommand EditDeviceCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          EventPublisher.Publish<ActionStructureAndEntitiesUpdate>(new ActionStructureAndEntitiesUpdate()
          {
            Guid = this._selectedNode.RootNode != this._selectedNode ? this._selectedNode.RootNode.Id : this._selectedNode.Id,
            Node = this._selectedNode,
            Message = new MSS.DTO.Message.Message()
            {
              MessageType = MessageTypeEnum.Success,
              MessageText = MessageCodes.Success_Save.GetStringValue()
            },
            Name = this.Name,
            Description = this.Description
          }, (IViewModel) this);
          this.OnRequestClose(true);
        });
      }
    }
  }
}


--- EditLogicalStructureViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.EditLogicalStructureViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Structures;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MVVM.Commands;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using Telerik.Windows.Controls;
using Telerik.Windows.Controls.TreeListView;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class EditLogicalStructureViewModel : StructureViewModelBase
  {
    private readonly StructureNodeDTO _parentForSelectedNode;
    private readonly StructureNodeDTO _selectedNode;
    private bool _updatedForReadingOrder;
    private ObservableCollection<StructureNodeDTO> _nodesCollection = new ObservableCollection<StructureNodeDTO>();
    private List<StructureNodeLinks> _physicalStructureNodeLinksToDelete = new List<StructureNodeLinks>();
    private List<StructureNodeLinks> _logicalStructureNodeLinksToDelete = new List<StructureNodeLinks>();
    private List<StructureNode> _structureNodesToDelete = new List<StructureNode>();
    private ObservableCollection<StructureNodeDTO> _physicalNodesDTOToDelete = new ObservableCollection<StructureNodeDTO>();
    private ObservableCollection<StructureNodeDTO> _logicalNodesDTOToDelete = new ObservableCollection<StructureNodeDTO>();
    private bool _isPasteActive;
    private StructureNodeDTO _savedInClipBoardStructureNodeDto;

    public EditLogicalStructureViewModel(
      StructureNodeDTO selectedNode,
      bool updatedForReadingOrder,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
      : base(repositoryFactory, windowFactory)
    {
      this._selectedNode = selectedNode;
      this._updatedForReadingOrder = updatedForReadingOrder;
      this._nodesCollection.Add(this._selectedNode);
      this._parentForSelectedNode = selectedNode.ParentNode;
      Mapper.CreateMap<Meter, MeterDTO>();
      EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(((StructureViewModelBase) this).UpdateEntities));
      Mapper.CreateMap<StructureNodeDTO, StructureNodeDTO>().ForMember((Expression<Func<StructureNodeDTO, object>>) (x => x.SubNodes), (Action<IMemberConfigurationExpression<StructureNodeDTO>>) (y => y.Ignore()));
      this.Groups = new ObservableCollection<StructureNodeDTO>();
      StructureNodeType nodeType = this._structureNodeTypeRepository.FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (s => s.Name == StructureNodeTypeEnum.Folder.GetStringValue()));
      if (nodeType != null)
      {
        StructureNodeDTO structureNodeDto1 = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_Available_Nodes_Folder"), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Logical);
        foreach (StructureNodeDTO logicalNodes in (Collection<StructureNodeDTO>) this.LogicalNodesCollection)
          structureNodeDto1.SubNodes.Add(logicalNodes);
        this.Groups.Add(structureNodeDto1);
        StructureNodeDTO structureNodeDto2 = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_Physical_Nodes_Folder"), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Physical);
        foreach (StructureNodeDTO physicalStructure in (Collection<StructureNodeDTO>) this.PhysicalStructureCollection)
          structureNodeDto2.SubNodes.Add(physicalStructure);
        this.Groups.Add(structureNodeDto2);
      }
      DragDropAttachedObject dropAttachedObject = new DragDropAttachedObject();
      dropAttachedObject.IsEnabled = true;
      dropAttachedObject.PhysicalLinks = this._structureNodeLinkRepository.SearchFor((Expression<Func<StructureNodeLinks, bool>>) (l => (int) l.StructureType == 0)).ToList<StructureNodeLinks>();
      this.DragDropAttachedProp = dropAttachedObject;
    }

    public ObservableCollection<StructureNodeDTO> Groups { get; private set; }

    public ObservableCollection<StructureNodeDTO> LogicalNodesCollection
    {
      get
      {
        List<StructureNodeDTO> list = new List<StructureNodeDTO>();
        IRepository<StructureNodeType> nodeTypeRepository = this._structureNodeTypeRepository;
        Expression<Func<StructureNodeType, bool>> predicate = (Expression<Func<StructureNodeType, bool>>) (s => s.IsLogical);
        foreach (StructureNodeType nodeType in (IEnumerable<StructureNodeType>) nodeTypeRepository.SearchFor(predicate))
        {
          StructureNodeDTO structureNodeDto = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Logical);
          list.Add(structureNodeDto);
        }
        return new ObservableCollection<StructureNodeDTO>(list);
      }
    }

    public ObservableCollection<StructureNodeDTO> PhysicalStructureCollection
    {
      get
      {
        return this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
      }
    }

    public ObservableCollection<StructureNodeDTO> StructureForSelectedNode
    {
      get
      {
        StructureImageHelper.SetImageIconPath(this._nodesCollection);
        return this._nodesCollection;
      }
    }

    public DragDropAttachedObject DragDropAttachedProp { get; set; }

    public ICommand SaveStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          byte[] structureBytes = (byte[]) null;
          if (!(parameter is RadTreeListView radTreeListView2))
            return;
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message();
          radTreeListView2.ExpandAllHierarchyItems();
          ObservableCollection<StructureNodeDTO> observableCollection1 = new ObservableCollection<StructureNodeDTO>(radTreeListView2.Items.Cast<StructureNodeDTO>());
          observableCollection1.SetNodesOrderNumber(this._selectedNode, this._parentForSelectedNode);
          ObservableCollection<StructureNodeDTO> observableCollection2 = this.ReconstructNodeCollection(observableCollection1, this._parentForSelectedNode);
          if (this._logicalStructureNodeLinksToDelete.Count != 0 || this._structureNodesToDelete.Count != 0)
          {
            bool? deleteDialog = this.ShowWarningWithStructuresToDeleteDialog(this._logicalNodesDTOToDelete, new ObservableCollection<StructureNodeDTO>());
            if (deleteDialog.HasValue && deleteDialog.Value)
            {
              if (!this._updatedForReadingOrder)
                this.GetStructuresManagerInstance().TransactionalUpdateStructure((IList<StructureNodeDTO>) observableCollection2, StructureTypeEnum.Logical, (StructureNodeEquipmentSettings) null, (IList<StructureNodeLinks>) this._logicalStructureNodeLinksToDelete, (IList<StructureNode>) this._structureNodesToDelete);
              else
                this.CreateStructureBytes(observableCollection2, out structureBytes);
            }
            else
            {
              message.MessageType = MessageTypeEnum.Warning;
              message.MessageText = MessageCodes.OperationCancelled.GetStringValue();
            }
          }
          else
          {
            if (!this._updatedForReadingOrder)
              this.GetStructuresManagerInstance().TransactionalUpdateStructure((IList<StructureNodeDTO>) observableCollection2, StructureTypeEnum.Logical, (StructureNodeEquipmentSettings) null);
            else
              this.CreateStructureBytes(observableCollection2, out structureBytes);
            message.MessageType = MessageTypeEnum.Success;
            message.MessageText = MessageCodes.Success_Save.GetStringValue();
          }
          if (!this._updatedForReadingOrder)
          {
            if (observableCollection1 != null && observableCollection1.Any<StructureNodeDTO>())
            {
              foreach (StructureNodeDTO structureNodeDto1 in (Collection<StructureNodeDTO>) observableCollection1)
              {
                StructureNodeDTO structureNodeDto = structureNodeDto1;
                Guid entityId;
                StructureNodeTypeEnum entityType;
                StructuresHelper.GetEntityIdAndEntityType(structureNodeDto, out entityId, out entityType);
                StructureNodeLinks structureNodeLinks = this._repositoryFactory.GetRepository<StructureNodeLinks>().FirstOrDefault((Expression<Func<StructureNodeLinks, bool>>) (l => l.Node.Id == structureNodeDto.Id && l.ParentNodeId == (structureNodeDto.ParentNode != default (object) ? structureNodeDto.ParentNode.Id : Guid.Empty) && l.RootNode.Id == structureNodeDto.RootNode.Id && l.EndDate == new DateTime?()));
                EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
                {
                  Guid = structureNodeDto.Id,
                  LinkGuid = structureNodeLinks != null ? structureNodeLinks.Id : Guid.Empty,
                  EntityId = entityId,
                  EntityType = entityType,
                  Message = message
                }, (IViewModel) this);
              }
              StructureNodeDTO structureNodeDto2 = observableCollection1.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.ParentNode == null && n.RootNode == n));
              EventPublisher.Publish<StructureRootUpdated>(new StructureRootUpdated()
              {
                RootNodeId = structureNodeDto2 != null ? structureNodeDto2.Id : Guid.Empty
              }, (IViewModel) this);
              EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
              {
                RootNode = structureNodeDto2,
                Message = message
              }, (IViewModel) this);
            }
            else
              EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
              {
                Message = message
              }, (IViewModel) this);
          }
          else
            EventPublisher.Publish<StructureBytesUpdated>(new StructureBytesUpdated()
            {
              StructureBytes = structureBytes
            }, (IViewModel) this);
          this.OnRequestClose(true);
        }));
      }
    }

    public StructureNodeDTO SelectedStructureNode { get; set; }

    public bool IsPasteActive
    {
      get => this._isPasteActive;
      set
      {
        this._isPasteActive = value;
        this.OnPropertyChanged(nameof (IsPasteActive));
      }
    }

    public StructureNodeDTO SavedinClipStructureNodeDto
    {
      get => this._savedInClipBoardStructureNodeDto;
      set
      {
        this._savedInClipBoardStructureNodeDto = value;
        this.IsPasteActive = value != null;
      }
    }

    public ICommand CutToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          this.SavedinClipStructureNodeDto = (StructureNodeDTO) radTreeListView.SelectedItem;
          if (this.SavedinClipStructureNodeDto.ParentNode == null || this.SavedinClipStructureNodeDto.ParentNode != null && this.SavedinClipStructureNodeDto.ParentNode.Name == CultureResources.GetValue("MSS_Available_Nodes_Folder"))
          {
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Remove(this.SavedinClipStructureNodeDto);
            if (((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Count != 0)
              return;
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_ROOTNODE_CANNOT_BE_CUTTED);
          }
          else
            this.SavedinClipStructureNodeDto.ParentNode.SubNodes.Remove(this.SavedinClipStructureNodeDto);
        }));
      }
    }

    public ICommand PasteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedStructureNode = (StructureNodeDTO) radTreeListView.SelectedItem;
          radTreeListView.SelectedItem = (object) null;
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, selectedStructureNode, false))
          {
            if (selectedStructureNode != null && selectedStructureNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = selectedStructureNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = selectedStructureNode.RootNode));
              selectedStructureNode.SubNodes.Add(this.SavedinClipStructureNodeDto);
            }
            else if (selectedStructureNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
        }));
      }
    }

    public ICommand PasteAfterToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          StructureNodeDTO parentNode = selectedItem.ParentNode;
          radTreeListView.SelectedItem = (object) null;
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, parentNode, false))
          {
            if (parentNode != null && parentNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = parentNode.RootNode));
              int num = parentNode.SubNodes.IndexOf(selectedItem);
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              parentNode.SubNodes.Insert(num + 1, this.SavedinClipStructureNodeDto);
            }
            else if (parentNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              this.SavedinClipStructureNodeDto.RootNode = this.SavedinClipStructureNodeDto;
              this.SavedinClipStructureNodeDto.ParentNode = (StructureNodeDTO) null;
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
        }));
      }
    }

    public ICommand AddNodeCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = parameter as StructureNodeDTO;
          if (!StructuresHelper.IsMeterWithMeterParent(structureNodeDto))
          {
            StructureNodeDTO destination = new StructureNodeDTO();
            StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
            Mapper.Map<StructureNodeDTO, StructureNodeDTO>(structureNodeDto, destination);
            if (structureNodeDto != null)
              destination.SubNodes = structureNodeDto.SubNodes;
            if (this.SelectedStructureNode == null)
            {
              StructureTypeEnum? structureType = destination.StructureType;
              StructureTypeEnum structureTypeEnum = StructureTypeEnum.Logical;
              if (structureType.GetValueOrDefault() == structureTypeEnum && structureType.HasValue)
              {
                destination.RootNode = destination;
                this.LogicalNodesCollection.Add(destination);
              }
              else
                this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
            }
            else if (structureNodesValidator.IsValidNodesRelationship(structureNodeDto, this.SelectedStructureNode, false))
            {
              this.SelectedStructureNode.SubNodes.Add(destination);
              this.OnPropertyChanged("LogicalNodesCollection");
            }
            else
              this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_CannotMoveSubMeter);
        }));
      }
    }

    private void CreateStructureBytes(
      ObservableCollection<StructureNodeDTO> actualNodeCollection,
      out byte[] structureBytes)
    {
      this.GetStructuresManagerInstance().InsertEntitiesGuid(actualNodeCollection);
      this.GetStructuresManagerInstance().InsertStructureNodesGuid(actualNodeCollection);
      Structure structure = this.GetStructuresManagerInstance().GetStructure(actualNodeCollection);
      structureBytes = StructuresHelper.SerializeStructure(structure);
    }

    public override ICommand CancelWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
          {
            MessageType = MessageTypeEnum.Warning,
            MessageText = MessageCodes.OperationCancelled.GetStringValue()
          };
          EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
          {
            Guid = Guid.Empty,
            Message = message
          }, (IViewModel) this);
          this.OnRequestClose(false);
        }));
      }
    }

    private void SetParentAndRootNode(StructureNodeDTO selectedItem)
    {
      if (selectedItem.ParentNode != null || selectedItem.RootNode != null || this._parentForSelectedNode == null)
        return;
      StructureNodeDTO structureNodeDto = this._parentForSelectedNode.RootNode != this._parentForSelectedNode ? this._parentForSelectedNode.RootNode : this._parentForSelectedNode;
      selectedItem.ParentNode = this._parentForSelectedNode;
      selectedItem.RootNode = structureNodeDto;
    }

    public ICommand EditSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is RadMenuItem radMenuItem2))
            return;
          RadContextMenu parent = (RadContextMenu) radMenuItem2.Parent;
          if (parent != null)
          {
            StructureNodeDTO structureNodeDto = (StructureNodeDTO) parent.GetClickedElement<TreeListViewRow>().Item;
            this.SetParentAndRootNode(structureNodeDto);
            this.EditSelectedStructureNode(structureNodeDto);
            this.OnPropertyChanged("StructureForSelectedNode");
          }
        }));
      }
    }

    public ICommand EditEntityCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO selectedItem = (StructureNodeDTO) (parameter as RadTreeListView).SelectedItem;
          this.SetParentAndRootNode(selectedItem);
          if (selectedItem == null)
            return;
          this.EditSelectedStructureNode(selectedItem);
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public ICommand DeleteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          List<StructureNodeDTO> nodesToDelete = this.GetNodesToDelete(parameter as RadTreeListView);
          List<StructureNodeDTO> descendants = new List<StructureNodeDTO>();
          nodesToDelete.ForEach((Action<StructureNodeDTO>) (item => descendants.AddRange(StructuresHelper.Descendants(item))));
          if (nodesToDelete.All<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.Id == Guid.Empty)) && descendants.All<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.Id == Guid.Empty)))
          {
            nodesToDelete.ForEach((Action<StructureNodeDTO>) (nodeToDelete =>
            {
              this.RemoveSelectedNodeFromStructure(nodeToDelete, this._nodesCollection);
              this.RemoveSerialNumberFromUniquenessList(nodeToDelete);
            }));
          }
          else
          {
            bool? nullable = MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning_DeleteStructure_Title.GetStringValue(), MessageCodes.Warning_DeleteLogicalStructure.GetStringValue(), true);
            if (nullable.HasValue && nullable.Value)
              nodesToDelete.ForEach((Action<StructureNodeDTO>) (nodeToDelete =>
              {
                this._logicalNodesDTOToDelete.Add(nodeToDelete);
                this.GetAffectedStructureNodesToDelete(nodeToDelete);
                this.RemoveSelectedNodeFromStructure(nodeToDelete, this._nodesCollection);
                this.RemoveSerialNumberFromUniquenessList(nodeToDelete);
              }));
          }
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    private List<StructureNodeDTO> GetNodesToDelete(RadTreeListView radTreeListView)
    {
      List<StructureNodeDTO> nodesToDelete = new List<StructureNodeDTO>();
      foreach (object selectedItem in (Collection<object>) radTreeListView.SelectedItems)
      {
        StructureNodeDTO foundNode = (StructureNodeDTO) null;
        this.GetNodeToDeleteFromStructure((StructureNodeDTO) selectedItem, this.StructureForSelectedNode, ref foundNode);
        if (foundNode != null)
          nodesToDelete.Add(foundNode);
      }
      return nodesToDelete;
    }

    private void GetNodeToDeleteFromStructure(
      StructureNodeDTO nodeToDelete,
      ObservableCollection<StructureNodeDTO> collectionToSearch,
      ref StructureNodeDTO foundNode)
    {
      foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) collectionToSearch)
      {
        if (nodeToDelete != structureNodeDto)
        {
          this.GetNodeToDeleteFromStructure(nodeToDelete, structureNodeDto.SubNodes, ref foundNode);
        }
        else
        {
          foundNode = structureNodeDto;
          break;
        }
      }
    }

    private void GetAffectedStructureNodesToDelete(StructureNodeDTO selectedNode)
    {
      List<StructureNodeLinks> structureNodeLinks;
      List<StructureNode> structureNodes;
      this.GetStructuresManagerInstance().GetLogicalStructureNodes(selectedNode, out structureNodeLinks, out structureNodes);
      structureNodeLinks.ForEach(new Action<StructureNodeLinks>(this._logicalStructureNodeLinksToDelete.Add));
      structureNodes.ForEach(new Action<StructureNode>(this._structureNodesToDelete.Add));
    }
  }
}


--- EditMinomatMasterViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.EditMinomatMasterViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Modules.WCFRelated;
using MSS.Business.Utils;
using MSS.Core.Model.ApplicationParamenters;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.MSSClient;
using MSS.Core.Model.Structures;
using MSS.Core.Model.UsersManagement;
using MSS.DTO.MessageHandler;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Windows;
using Telerik.Windows.Data;
using ZENNER;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  internal class EditMinomatMasterViewModel : ValidationViewModelBase
  {
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly StructureNodeDTO _structureNode;
    private readonly IWindowFactory _windowFactory;
    private readonly string _orderNumber;
    private readonly IRepository<Country> _countryRepository;
    private readonly IRepository<Minomat> _minomatRepository;
    private readonly IRepository<MinomatRadioDetails> _minomatRadioDetailsRepository;
    private Minomat _selectedMinomat;
    private MinomatRadioDetails _selectedMinomatRadioDetails;
    private readonly bool _useMasterpool;
    private string _title;
    private bool _isBusy;
    private string _radioId;
    private int _netId;
    private int _nodeId;
    private string _entrance;
    private static List<string> _entrancesList;
    private string _floorNameValue = string.Empty;
    private string _floorNrValue = string.Empty;
    private string _apartmentNrValue = string.Empty;
    private int? _selectedDirectionId;
    private int? _selectedFloorNameId;
    private string _description;
    private int _channel;
    private Provider _provider;
    private string _simPin;
    private string _accessPoint;
    private string _userId;
    private string _userPassword;
    private int? _polling;
    private string _hostandPort;
    private string _url;
    private ViewModelBase _messageUserControl;
    private string _simCardNumber;

    public EditMinomatMasterViewModel(
      IRepositoryFactory repositoryFactory,
      StructureNodeDTO node,
      IWindowFactory windowFactory,
      string orderNumber)
    {
      this._structureNode = node;
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._orderNumber = orderNumber;
      this._countryRepository = repositoryFactory.GetRepository<Country>();
      this._minomatRepository = this._repositoryFactory.GetRepository<Minomat>();
      this._minomatRadioDetailsRepository = this._repositoryFactory.GetRepository<MinomatRadioDetails>();
      ApplicationParameter applicationParameter = MSS.Business.Utils.AppContext.Current.Parameters.FirstOrDefault<ApplicationParameter>((Func<ApplicationParameter, bool>) (p => p.Parameter == "MinomatUseMasterpool"));
      this._useMasterpool = applicationParameter != null && bool.Parse(applicationParameter.Value);
      Task.Run((Action) (() =>
      {
        this.IsBusy = true;
        this.InitializeView();
        this.IsBusy = false;
      })).ContinueWith((Action<Task>) (t =>
      {
        if (t.IsFaulted && t.Exception != null)
          throw t.Exception;
      }));
    }

    private void InitializeView()
    {
      this.EntrancesList = new StructureEntrancesManager().GetStructureEntrances(this._structureNode, this._repositoryFactory);
      MinomatSerializableDTO selectedMinomatDto = this._structureNode.Entity as MinomatSerializableDTO;
      if (selectedMinomatDto != null)
      {
        this.Title = Resources.MSS_EditMinomatMaster;
        this._selectedMinomat = Mapper.Map<MinomatSerializableDTO, Minomat>(selectedMinomatDto);
        this._selectedMinomatRadioDetails = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (x => x.Minomat.Id == selectedMinomatDto.Id)).FirstOrDefault<MinomatRadioDetails>();
        if (!string.IsNullOrEmpty(this._selectedMinomatRadioDetails?.Location))
        {
          string[] positionInfo = this._selectedMinomatRadioDetails.Location.Split('/');
          this.FloorNrValue = positionInfo[0];
          this.FloorNameValue = positionInfo[1];
          if (this.GetFloorNames.FirstOrDefault<FloorNameDTO>((Func<FloorNameDTO, bool>) (fl => fl.FloorNameEnum.ToString() == positionInfo[1])) != null)
          {
            FloorNameDTO floorNameDto = this.GetFloorNames.FirstOrDefault<FloorNameDTO>((Func<FloorNameDTO, bool>) (fl => fl.FloorNameEnum.ToString() == positionInfo[1]));
            if (floorNameDto != null)
              this.SelectedFloorNameId = new int?(floorNameDto.Id);
          }
          this.ApartmentNrValue = positionInfo[2];
          DirectionDTO directionDto = this.GetDirections.FirstOrDefault<DirectionDTO>((Func<DirectionDTO, bool>) (d => d.DirectionEnum.ToString() == positionInfo[3]));
          if (directionDto != null)
            this.SelectedDirectionId = new int?(directionDto.Id);
          this.Entrance = this.EntrancesList.FirstOrDefault<string>((Func<string, bool>) (item => item == this._selectedMinomatRadioDetails.Entrance));
          this.Description = this._selectedMinomatRadioDetails?.Description;
          int parsedValue;
          bool result = int.TryParse(this._selectedMinomatRadioDetails?.NetId, out parsedValue);
          if (result)
            this.NetId = parsedValue;
          result = int.TryParse(this._selectedMinomatRadioDetails?.NodeId, out parsedValue);
          this.NodeId = result ? parsedValue : 1;
          result = int.TryParse(this._selectedMinomatRadioDetails?.Channel, out parsedValue);
          this.Channel = this.GetListOfChannels.FirstOrDefault<int>((Func<int, bool>) (item => !result ? item == 0 : item == parsedValue));
        }
        this._radioId = this._selectedMinomat.RadioId;
        this.SelectedProvider = this.GetListofProviders.FirstOrDefault<Provider>((Func<Provider, bool>) (item =>
        {
          Guid id1 = item.Id;
          Guid? id2 = this._selectedMinomat?.Provider?.Id;
          return id2.HasValue && id1 == id2.GetValueOrDefault();
        }));
        this.SimCardNumber = this._selectedMinomat.SimCardNumber;
        this.Polling = new int?(this._selectedMinomat.Polling);
        this.HostAndPort = this._selectedMinomat.HostAndPort;
        this.Url = this._selectedMinomat.Url;
        Country country = this._selectedMinomat.Country;
        this.SelectedCountryId = country != null ? country.Id : Guid.Empty;
      }
      else
      {
        this.Title = Resources.MSS_AddMinomatMaster;
        this._selectedMinomatRadioDetails = new MinomatRadioDetails();
        this._selectedMinomat = new Minomat();
        this._selectedMinomat.IsMaster = true;
        IList<Provider> all = this._repositoryFactory.GetRepository<Provider>().GetAll();
        this._selectedMinomat.Provider = all.Count == 1 ? all.First<Provider>() : (Provider) null;
        MSS.Business.Modules.AppParametersManagement.AppParametersManagement parametersManagement = new MSS.Business.Modules.AppParametersManagement.AppParametersManagement(this._repositoryFactory);
        this.Url = parametersManagement.GetAppParam("Url").Value;
        this.HostAndPort = parametersManagement.GetAppParam("HostAndPort").Value;
        this.Polling = new int?(Convert.ToInt32(parametersManagement.GetAppParam("Polling").Value));
        this.NetId = this.GenerateNetId();
        this.NodeId = 1;
        Country country = MSS.Business.Utils.AppContext.Current.LoggedUser.Country;
        this.SelectedCountryId = country != null ? country.Id : Guid.Empty;
      }
    }

    public System.Windows.Input.ICommand EditMinomatMasterCommand
    {
      get
      {
        return (System.Windows.Input.ICommand) new RelayCommand((Action<object>) delegate
        {
          try
          {
            if (this.IsValid)
            {
              Minomat minomat1;
              if (this.IsNewMinomat())
              {
                minomat1 = this._minomatRepository.SearchWithFetch<Scenario>((Expression<Func<Minomat, bool>>) (item => item.RadioId == this.RadioId && item.Status == StatusMinomatEnum.New.ToString() && !item.IsDeactivated), (Expression<Func<Minomat, Scenario>>) (m => m.Scenario)).FirstOrDefault<Minomat>();
              }
              else
              {
                minomat1 = this._minomatRepository.SearchWithFetch<Scenario>((Expression<Func<Minomat, bool>>) (m => m.Id == ((MinomatSerializableDTO) this._structureNode.Entity).Id), (Expression<Func<Minomat, Scenario>>) (m => m.Scenario)).FirstOrDefault<Minomat>();
                if (minomat1 != null)
                  minomat1.RadioDetails = this._selectedMinomatRadioDetails;
              }
              if (minomat1 != null)
              {
                this._selectedMinomat = minomat1;
                this.CopyNewMinomatSettings(false);
              }
              else
                this.CopyNewMinomatSettings(true);
              if (this._useMasterpool)
              {
                if (minomat1 == null && this.IsNewMinomat())
                {
                  this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_MinomatMaster_MinomatNotFound);
                  return;
                }
              }
              else
              {
                MinomatSerializableDTO minomat2 = Mapper.Map<Minomat, MinomatSerializableDTO>(this._selectedMinomat);
                using (ServiceClient serviceClient = new ServiceClient(MSS.Business.Utils.AppContext.Current.GetParameterValue<string>("ServerIp")))
                {
                  if (!serviceClient.SaveMinomatOnServer(minomat2))
                  {
                    this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_MinomatMaster_MinomatSaveOnServer);
                    return;
                  }
                }
              }
              GMMMinomatConfigurator gmmConfigurator = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
              gmmConfigurator.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
              this.IsBusy = true;
              Task.Run<GMMMinomatConfiguratorResult>((Func<GMMMinomatConfiguratorResult>) (() => gmmConfigurator.SetupMinomat(this._selectedMinomat, this._orderNumber))).ContinueWith((Action<Task<GMMMinomatConfiguratorResult>>) (p =>
              {
                GMMMinomatConfiguratorResult gmmConfiguratorResult = p.Result;
                if (gmmConfiguratorResult.IsSuccess)
                {
                  this._selectedMinomat.Status = StatusMinomatEnum.BuiltIn.ToString();
                  ISession session = this._repositoryFactory.GetSession();
                  session.BeginTransaction();
                  try
                  {
                    this._minomatRepository.TransactionalUpdate(this._selectedMinomat);
                    this._minomatRadioDetailsRepository.TransactionalInsertOrUpdate(this._selectedMinomatRadioDetails, (Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == this._selectedMinomat.Id), (Func<MinomatRadioDetails, bool>) (item => item.Minomat.Id == this._selectedMinomat.Id));
                    session.Transaction.Commit();
                  }
                  catch (Exception ex)
                  {
                    session.Transaction.Rollback();
                    Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
                  }
                  if (this._structureNode.Entity == null)
                    this._structureNode.Entity = (object) new MinomatSerializableDTO();
                  Mapper.CreateMap<Minomat, MinomatSerializableDTO>();
                  Mapper.Map<Minomat, object>(this._selectedMinomat, this._structureNode.Entity);
                  EventPublisher.Publish<ActionStructureAndEntitiesUpdate>(new ActionStructureAndEntitiesUpdate()
                  {
                    Minomat = this._selectedMinomat,
                    Node = this._structureNode,
                    Guid = this._structureNode.RootNode != this._structureNode ? this._structureNode.RootNode.Id : this._structureNode.Id,
                    Message = new MSS.DTO.Message.Message()
                    {
                      MessageType = MessageTypeEnum.Success,
                      MessageText = MessageCodes.Success_Save.GetStringValue()
                    },
                    Name = this.RadioId,
                    Description = this._structureNode.Description
                  }, (IViewModel) this);
                  Application.Current.Dispatcher.Invoke((Action) (() => this.OnRequestClose(true)));
                }
                else
                {
                  if (this.IsNewMinomat())
                  {
                    this._selectedMinomat = new Minomat();
                    this._selectedMinomatRadioDetails = (MinomatRadioDetails) null;
                  }
                  Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, gmmConfiguratorResult.Message, false)));
                }
                this.IsBusy = false;
              }));
            }
            else
              this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_ValidationError);
          }
          catch (Exception ex)
          {
            Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
          }
        });
      }
    }

    public RadObservableCollection<Provider> GetListofProviders
    {
      get
      {
        RadObservableCollection<Provider> getListofProviders = new RadObservableCollection<Provider>();
        IOrderedEnumerable<Provider> orderedEnumerable = this._repositoryFactory.GetRepository<Provider>().GetAll().OrderBy<Provider, string>((Func<Provider, string>) (p => p.ProviderName));
        if (orderedEnumerable.Any<Provider>())
          getListofProviders = new RadObservableCollection<Provider>((IEnumerable<Provider>) orderedEnumerable);
        return getListofProviders;
      }
    }

    public RadObservableCollection<int> GetListOfChannels
    {
      get
      {
        RadObservableCollection<int> getListOfChannels = new RadObservableCollection<int>();
        getListOfChannels.Add(0);
        getListOfChannels.Add(1);
        return getListOfChannels;
      }
    }

    public IEnumerable<FloorNameDTO> GetFloorNames => FloorHelper.GetFloorNames();

    public ObservableCollection<DirectionDTO> GetDirections
    {
      get => new ObservableCollection<DirectionDTO>(FloorHelper.GetDirections());
    }

    private void CopyNewMinomatSettings(bool isNew)
    {
      if (this._selectedMinomatRadioDetails == null)
        this._selectedMinomatRadioDetails = new MinomatRadioDetails();
      if (this._selectedMinomatRadioDetails.Minomat == null)
      {
        this._selectedMinomatRadioDetails.Minomat = this._selectedMinomat;
        this._selectedMinomat.RadioDetails = this._selectedMinomatRadioDetails;
      }
      this._selectedMinomatRadioDetails.DueDate = (DateTime?) ((LocationDTO) this._structureNode.RootNode?.Entity)?.DueDate;
      this._selectedMinomat.RadioId = this.RadioId;
      MinomatRadioDetails minomatRadioDetails1 = this._selectedMinomatRadioDetails;
      object[] objArray = new object[7];
      objArray[0] = (object) this.FloorNrValue;
      objArray[1] = (object) "/";
      int? nullable1 = this.SelectedFloorNameId;
      int num1 = 1;
      objArray[2] = (object) (FloorNamesEnum) (nullable1.HasValue ? new int?(nullable1.GetValueOrDefault() - num1) : new int?()).Value;
      objArray[3] = (object) "/";
      objArray[4] = (object) this.ApartmentNrValue;
      objArray[5] = (object) "/";
      int? selectedDirectionId = this.SelectedDirectionId;
      int num2 = 1;
      int? nullable2;
      if (!selectedDirectionId.HasValue)
      {
        nullable1 = new int?();
        nullable2 = nullable1;
      }
      else
        nullable2 = new int?(selectedDirectionId.GetValueOrDefault() - num2);
      nullable1 = nullable2;
      objArray[6] = (object) (DirectionsEnum) nullable1.Value;
      string str1 = string.Concat(objArray);
      minomatRadioDetails1.Location = str1;
      this._selectedMinomatRadioDetails.Entrance = this.Entrance;
      this._selectedMinomatRadioDetails.Description = this.Description;
      this._selectedMinomatRadioDetails.NetId = this.NetId.ToString();
      MinomatRadioDetails minomatRadioDetails2 = this._selectedMinomatRadioDetails;
      int num3 = this.NodeId;
      string str2 = num3.ToString();
      minomatRadioDetails2.NodeId = str2;
      MinomatRadioDetails minomatRadioDetails3 = this._selectedMinomatRadioDetails;
      num3 = this.Channel;
      string str3 = num3.ToString();
      minomatRadioDetails3.Channel = str3;
      this._selectedMinomat.Provider = this.SelectedProvider;
      this._selectedMinomat.SimPin = this.SimPin;
      this._selectedMinomat.AccessPoint = this.AccessPoint;
      this._selectedMinomat.UserId = this.UserId;
      this._selectedMinomat.UserPassword = this.UserPassword;
      this._selectedMinomat.SimCardNumber = this.SimCardNumber ?? "";
      Minomat selectedMinomat = this._selectedMinomat;
      nullable1 = this.Polling;
      int num4;
      if (!nullable1.HasValue)
      {
        num4 = 0;
      }
      else
      {
        nullable1 = this.Polling;
        num4 = nullable1.Value;
      }
      selectedMinomat.Polling = num4;
      this._selectedMinomat.HostAndPort = this.HostAndPort;
      this._selectedMinomat.Url = this.Url;
      this._selectedMinomat.Country = this.CountryCollection.FirstOrDefault<Country>((Func<Country, bool>) (item => item.Id == this.SelectedCountryId));
      if (!this._selectedMinomatRadioDetails.StatusDevices.HasValue)
        this._selectedMinomatRadioDetails.StatusDevices = new MinomatStatusDevicesEnum?(MinomatStatusDevicesEnum.Open);
      if (!this._selectedMinomatRadioDetails.StatusNetwork.HasValue)
        this._selectedMinomatRadioDetails.StatusNetwork = new MinomatStatusNetworkEnum?(MinomatStatusNetworkEnum.Open);
      if (isNew)
      {
        this._selectedMinomat.Challenge = MeterListenerManager.CreateRandomChallengeKey().ToString();
        this._selectedMinomat.GsmId = this.RadioId;
        this._selectedMinomat.SessionKey = MeterListenerManager.CreateRandomSessionKey().ToString();
        this._selectedMinomat.CreatedOn = new DateTime?(DateTime.Now);
        this._selectedMinomat.CreatedBy = MSS.Business.Utils.AppContext.Current.LoggedUser.Id.ToString();
        this._selectedMinomat.Status = StatusMinomatEnum.New.ToString();
      }
      this._selectedMinomat.LastUpdatedBy = "";
      Guid? id = ((LocationDTO) this._structureNode.RootNode?.Entity)?.Scenario?.Id;
      if (!id.HasValue)
        return;
      this._selectedMinomat.Scenario = this._repositoryFactory.GetRepository<Scenario>().GetById((object) id);
    }

    private int GenerateNetId()
    {
      List<int> intList = new List<int>();
      if (this._structureNode?.ParentNode?.NodeType?.Name == "Location")
      {
        foreach (StructureNodeDTO structureNodeDto in this._structureNode.ParentNode.SubNodes.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item =>
        {
          if (!(item.NodeType.Name == "MinomatMaster") || item.Entity == null)
            return false;
          Guid? id = ((MinomatSerializableDTO) item.Entity)?.Id;
          Guid empty = Guid.Empty;
          if (!id.HasValue)
            return true;
          return id.HasValue && id.GetValueOrDefault() != empty;
        })).ToList<StructureNodeDTO>())
        {
          StructureNodeDTO currentMaster = structureNodeDto;
          intList.Add(this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => item.Minomat.Id == currentMaster.Id)).Select<MinomatRadioDetails, int>((Expression<Func<MinomatRadioDetails, int>>) (item => int.Parse(item.NetId))).FirstOrDefault<int>());
        }
      }
      Random random = new Random();
      int netId = random.Next(0, 250);
      if (intList.Count > 0)
      {
        while (intList.Contains(netId))
          netId = random.Next(0, 250);
      }
      return netId;
    }

    public override List<string> ValidateProperty(string propertyName)
    {
      this.IsValid = true;
      string propertyName1 = this.GetPropertyName<string>((Expression<Func<string>>) (() => this.RadioId));
      string propertyName2 = this.GetPropertyName<string>((Expression<Func<string>>) (() => this.SimCardNumber));
      if (propertyName == propertyName1)
      {
        ICollection<string> validationErrors;
        this.ValidateMasterRadioId(this.RadioId, out validationErrors);
        if (validationErrors.Count > 0)
          this.IsValid = false;
        return validationErrors.ToList<string>();
      }
      if (!(propertyName == propertyName2) || string.IsNullOrEmpty(this._simCardNumber))
        return new List<string>();
      ICollection<string> validationErrors1;
      this.ValidateSimCardNumber(this._simCardNumber, out validationErrors1);
      if (validationErrors1.Count > 0)
        this.IsValid = false;
      return validationErrors1.ToList<string>();
    }

    public bool ValidateMasterRadioId(
      string masterRadioId,
      out ICollection<string> validationErrors)
    {
      validationErrors = (ICollection<string>) new List<string>();
      List<Minomat> list = this._repositoryFactory.GetRepository<Minomat>().Where((Expression<Func<Minomat, bool>>) (x => x.RadioId == masterRadioId && !x.IsDeactivated)).ToList<Minomat>();
      if (this._useMasterpool && list.Any<Minomat>((Func<Minomat, bool>) (item => item.Status != StatusMinomatEnum.New.ToString())) && this._selectedMinomat.Id == Guid.Empty)
        validationErrors.Add(Resources.MSS_MINOMAT_RADIO_ID_NOT_UNIQUE);
      else if (list.Any<Minomat>())
      {
        foreach (Minomat minomat in list)
        {
          if ((!(minomat.RadioId == this._selectedMinomat.RadioId) || !(minomat.Id == this._selectedMinomat.Id)) && this._selectedMinomat.Id != Guid.Empty)
          {
            validationErrors.Add(Resources.MSS_MINOMAT_RADIO_ID_NOT_UNIQUE);
            break;
          }
        }
      }
      return validationErrors.Count == 0;
    }

    public bool ValidateSimCardNumber(
      string simCardNumber,
      out ICollection<string> validationErrors)
    {
      validationErrors = (ICollection<string>) new List<string>();
      if (!string.IsNullOrEmpty(simCardNumber) && simCardNumber.Length != 30)
        validationErrors.Add(Resources.MSS_MinomatMaster_SimCardNumber_TooFewDigits);
      return validationErrors.Count == 0;
    }

    private bool IsNewMinomat() => this._structureNode.Entity == null;

    public string Title
    {
      get => this._title;
      set
      {
        this._title = value;
        this.OnPropertyChanged(nameof (Title));
      }
    }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        if (this._isBusy == value)
          return;
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_MASTER_RADIO_ID")]
    [Range(47100000, 48099999, ErrorMessage = "MSS_MINOMATS_RADIO_ID_BETWEEN")]
    public string RadioId
    {
      get => this._radioId;
      set
      {
        this._radioId = value;
        this.OnPropertyChanged(nameof (RadioId));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMATS_NET_ID_REQUIRED")]
    [Range(0, 249, ErrorMessage = "MSS_MINOMATS_NET_ID_OUT_OF_RANGE")]
    public int NetId
    {
      get => this._netId;
      set
      {
        this._netId = value;
        this.OnPropertyChanged(nameof (NetId));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMATS_NODE_ID_REQUIRED")]
    [Range(1, 1, ErrorMessage = "MSS_MINOMATS_NODE_ID_MUST_BE_1")]
    public int NodeId
    {
      get => this._nodeId;
      set
      {
        this._nodeId = value;
        this.OnPropertyChanged(nameof (NodeId));
      }
    }

    [Required(ErrorMessage = "MSS_Client_EntranceRequired")]
    public string Entrance
    {
      get => this._entrance;
      set
      {
        this._entrance = value;
        this.OnPropertyChanged(nameof (Entrance));
      }
    }

    public List<string> EntrancesList
    {
      get => EditMinomatMasterViewModel._entrancesList;
      set => EditMinomatMasterViewModel._entrancesList = value;
    }

    public string FloorNameValue
    {
      get => this._floorNameValue;
      set
      {
        this._floorNameValue = value;
        this.OnPropertyChanged(nameof (FloorNameValue));
      }
    }

    [Required(ErrorMessage = "MSS_Client_FloorNoRequired")]
    public string FloorNrValue
    {
      get => this._floorNrValue;
      set
      {
        this._floorNrValue = value;
        this.OnPropertyChanged(nameof (FloorNrValue));
      }
    }

    [Required(ErrorMessage = "MSS_Client_ApartmentNoRequired")]
    public string ApartmentNrValue
    {
      get => this._apartmentNrValue;
      set
      {
        this._apartmentNrValue = value;
        this.OnPropertyChanged(nameof (ApartmentNrValue));
      }
    }

    [Required(ErrorMessage = "MSS_Client_DirectionRequired")]
    public int? SelectedDirectionId
    {
      get => this._selectedDirectionId;
      set
      {
        this._selectedDirectionId = value;
        this.OnPropertyChanged(nameof (SelectedDirectionId));
      }
    }

    [Required(ErrorMessage = "MSS_Client_FloorNameRequired")]
    public int? SelectedFloorNameId
    {
      get => this._selectedFloorNameId;
      set
      {
        this._selectedFloorNameId = value;
        this.OnPropertyChanged(nameof (SelectedFloorNameId));
      }
    }

    public string Description
    {
      get => this._description;
      set
      {
        this._description = value;
        this.OnPropertyChanged(nameof (Description));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_CHANNEL_REQUIRED")]
    public int Channel
    {
      get => this._channel;
      set
      {
        this._channel = value;
        this.OnPropertyChanged(nameof (Channel));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMATS_PROVIDER")]
    public Provider SelectedProvider
    {
      get => this._provider;
      set
      {
        this._provider = value;
        if (this._provider != null)
        {
          this.SimPin = this._provider.SimPin;
          this.AccessPoint = this._provider.AccessPoint;
          this.UserId = this._provider.UserId;
          this.UserPassword = this._provider.UserPassword;
        }
        this.OnPropertyChanged(nameof (SelectedProvider));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_SIMPIN")]
    public string SimPin
    {
      get => this._simPin;
      set
      {
        this._simPin = value;
        this.OnPropertyChanged(nameof (SimPin));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_ACCESSPOINT")]
    public string AccessPoint
    {
      get => this._accessPoint;
      set
      {
        this._accessPoint = value;
        this.OnPropertyChanged(nameof (AccessPoint));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_USERID")]
    public string UserId
    {
      get => this._userId;
      set
      {
        this._userId = value;
        this.OnPropertyChanged(nameof (UserId));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_USERPASS")]
    public string UserPassword
    {
      get => this._userPassword;
      set
      {
        this._userPassword = value;
        this.OnPropertyChanged(nameof (UserPassword));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_POLLING_REQUIRED")]
    public int? Polling
    {
      get => this._polling;
      set
      {
        this._polling = value;
        this.OnPropertyChanged(nameof (Polling));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_HOSTANDPORT_REQUIRED")]
    public string HostAndPort
    {
      get => this._hostandPort;
      set
      {
        this._hostandPort = value;
        this.OnPropertyChanged(nameof (HostAndPort));
      }
    }

    public string Url
    {
      get => this._url;
      set
      {
        this._url = value;
        this.OnPropertyChanged(nameof (Url));
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public IEnumerable<Country> CountryCollection
    {
      get
      {
        return (IEnumerable<Country>) this._countryRepository.GetAll().OrderBy<Country, string>((Func<Country, string>) (x => x.Name)).ToList<Country>();
      }
    }

    public Guid SelectedCountryId { get; set; }

    public string SimCardNumber
    {
      get => this._simCardNumber;
      set
      {
        this._simCardNumber = value;
        this.OnPropertyChanged(nameof (SimCardNumber));
      }
    }
  }
}


--- EditMinomatSlaveViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.EditMinomatSlaveViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.MSSClient;
using MSS.Core.Model.Structures;
using MSS.Core.Model.UsersManagement;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  internal class EditMinomatSlaveViewModel : ValidationViewModelBase
  {
    private IRepositoryFactory _repositoryFactory;
    private StructureNodeDTO _structureNode;
    private IWindowFactory _windowFactory;
    private readonly string _orderNumber;
    private IRepository<Minomat> _minomatRepository;
    private readonly IRepository<MinomatRadioDetails> _minomatRadioDetailsRepository;
    private readonly IRepository<Country> _countryRepository;
    private Minomat _currentMinomatSlave;
    private MinomatRadioDetails _currentMinomatSlaveRadioDetails;
    private Minomat _currentMinomatMaster;
    private MinomatRadioDetails _currentMinomatMasterRadioDetails;
    private bool wasSlaveSaved = false;
    private string _title;
    private bool _isBusy;
    private string _slaveRadioId;
    private int _nodeId;
    private int _netId = 0;
    private string _masterRadioId;
    private ViewModelBase _messageUserControl;
    private string _floorNrValue = string.Empty;
    private string _apartmentNrValue = string.Empty;
    private int? _selectedDirectionId;
    private int? _selectedFloorNameId;
    private string _entrance;
    private static List<string> _entrancesList;
    private int _channel;

    public EditMinomatSlaveViewModel(
      IRepositoryFactory repositoryFactory,
      StructureNodeDTO node,
      IWindowFactory windowFactory,
      string orderNumber)
    {
      this._structureNode = node;
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._orderNumber = orderNumber;
      this._minomatRepository = this._repositoryFactory.GetRepository<Minomat>();
      this._minomatRadioDetailsRepository = this._repositoryFactory.GetRepository<MinomatRadioDetails>();
      this._countryRepository = repositoryFactory.GetRepository<Country>();
      MinomatSerializableDTO selectedMinomatSlaveDto = node.Entity as MinomatSerializableDTO;
      MinomatSerializableDTO selectedMinomatMasterDto = new MinomatSerializableDTO();
      if (node.ParentNode != null && node.ParentNode.Entity != null)
      {
        selectedMinomatMasterDto = node.ParentNode.Entity as MinomatSerializableDTO;
        if (selectedMinomatMasterDto != null)
        {
          this._currentMinomatMaster = Mapper.Map<MinomatSerializableDTO, Minomat>(selectedMinomatMasterDto);
          this._currentMinomatMasterRadioDetails = repositoryFactory.GetRepository<MinomatRadioDetails>().SearchFor((Expression<Func<MinomatRadioDetails, bool>>) (x => x.Minomat.Id == selectedMinomatMasterDto.Id)).FirstOrDefault<MinomatRadioDetails>();
          this.MasterRadioId = this._currentMinomatMaster.RadioId;
          this.Channel = this._currentMinomatMasterRadioDetails?.Channel != null ? int.Parse(this._currentMinomatMasterRadioDetails?.Channel) : 0;
          if (this._currentMinomatMasterRadioDetails?.NetId != null)
            this.NetId = int.Parse(this._currentMinomatMasterRadioDetails.NetId);
        }
      }
      EditMinomatSlaveViewModel._entrancesList = this.GetStructureEntrances(node);
      if (selectedMinomatSlaveDto != null)
      {
        this.Title = Resources.MSS_EditMinomatSlave;
        this._currentMinomatSlave = Mapper.Map<MinomatSerializableDTO, Minomat>(selectedMinomatSlaveDto);
        this._currentMinomatSlaveRadioDetails = repositoryFactory.GetRepository<MinomatRadioDetails>().SearchFor((Expression<Func<MinomatRadioDetails, bool>>) (x => x.Minomat.Id == selectedMinomatSlaveDto.Id)).FirstOrDefault<MinomatRadioDetails>();
        if (this._currentMinomatSlaveRadioDetails != null)
        {
          if (!string.IsNullOrEmpty(this._currentMinomatSlaveRadioDetails.Location))
          {
            string[] positionInfo = this._currentMinomatSlaveRadioDetails.Location.Split('/');
            this.FloorNrValue = positionInfo[0];
            FloorNameDTO floorNameDto = this.GetFloorNames.FirstOrDefault<FloorNameDTO>((Func<FloorNameDTO, bool>) (fl => fl.FloorNameEnum.ToString() == positionInfo[1]));
            if (floorNameDto != null)
              this.SelectedFloorNameId = new int?(floorNameDto.Id);
            this.ApartmentNrValue = positionInfo[2];
            DirectionDTO directionDto = this.GetDirections.FirstOrDefault<DirectionDTO>((Func<DirectionDTO, bool>) (d => d.DirectionEnum.ToString() == positionInfo[3]));
            if (directionDto != null)
              this.SelectedDirectionId = new int?(directionDto.Id);
          }
          this.NodeId = int.Parse(this._currentMinomatSlaveRadioDetails.NodeId);
          this.Description = this._currentMinomatSlaveRadioDetails.Description;
          this.SlaveRadioId = this._currentMinomatSlave.RadioId;
          this.Entrance = this.EntrancesList.FirstOrDefault<string>((Func<string, bool>) (item => item == this._currentMinomatSlaveRadioDetails.Entrance));
          this.Description = this._currentMinomatSlaveRadioDetails.Description;
        }
        Country country = this._currentMinomatSlave.Country;
        this.SelectedCountryId = country != null ? country.Id : Guid.Empty;
      }
      else
      {
        this.Title = Resources.MSS_AddMinomatSlave;
        this._currentMinomatSlave = new Minomat();
        this._currentMinomatSlaveRadioDetails = new MinomatRadioDetails();
        int generatedNodeId;
        bool isSuccessful;
        this.GenerateSlaveNodeId(out generatedNodeId, out isSuccessful);
        if (isSuccessful)
          this.NodeId = generatedNodeId;
        else
          this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_MinomatSlave_CannotGenerateNodeId);
        Country country = MSS.Business.Utils.AppContext.Current.LoggedUser.Country;
        this.SelectedCountryId = country != null ? country.Id : Guid.Empty;
      }
    }

    public ICommand EditMinomatSlaveCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          if (this.IsValid)
          {
            Minomat minomat;
            if (this.IsNewMinomat())
            {
              minomat = this._minomatRepository.SearchFor((Expression<Func<Minomat, bool>>) (item => item.RadioId == this.SlaveRadioId && item.Status == StatusMinomatEnum.New.ToString() && !item.IsDeactivated)).FirstOrDefault<Minomat>();
            }
            else
            {
              minomat = this._minomatRepository.GetById((object) ((MinomatSerializableDTO) this._structureNode.Entity).Id);
              minomat.RadioDetails = this._currentMinomatSlaveRadioDetails;
            }
            if (minomat != null && this.IsNewMinomat())
            {
              bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_MinomatSlave_ExistingMinomatSlave), (IParameter) new ConstructorArgument("message", (object) Resources.MSS_MinomatSlave_SaveNewSettings), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) true)));
              if (newModalDialog.HasValue && newModalDialog.Value)
                minomat = (Minomat) null;
            }
            if (minomat != null)
            {
              this._currentMinomatSlave = minomat;
              this.CopyNewMinomatSettings(false);
            }
            else
            {
              this.CopyNewMinomatSettings(true);
              this._currentMinomatSlave.RadioDetails = this._currentMinomatSlaveRadioDetails;
            }
            GMMMinomatConfigurator gmmConfigurator = GMMMinomatConfigurator.GetInstance(true, CustomerConfiguration.GetPropertyValue<bool>("IsDeviceConnectionMandatory"));
            gmmConfigurator.OnError = (EventHandler<GMMMinomatConfiguratorResult>) ((sender, result) => Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, result.Message, false))));
            this.IsBusy = true;
            Task.Run<GMMMinomatConfiguratorResult>((Func<GMMMinomatConfiguratorResult>) (() => gmmConfigurator.SetupMinomat(this._currentMinomatSlave, this._orderNumber))).ContinueWith((Action<Task<GMMMinomatConfiguratorResult>>) (p =>
            {
              GMMMinomatConfiguratorResult gmmConfiguratorResult = p.Result;
              if (gmmConfiguratorResult.IsSuccess)
              {
                this._currentMinomatSlave.Status = StatusMinomatEnum.BuiltIn.ToString();
                ISession session = this._repositoryFactory.GetSession();
                session.BeginTransaction();
                try
                {
                  this._currentMinomatSlaveRadioDetails.LastConnection = new DateTime?(DateTime.Now);
                  this._minomatRepository.TransactionalUpdate(this._currentMinomatSlave);
                  this._minomatRadioDetailsRepository.TransactionalUpdate(this._currentMinomatSlaveRadioDetails);
                  session.Transaction.Commit();
                  this.wasSlaveSaved = true;
                }
                catch (Exception ex)
                {
                  session.Transaction.Rollback();
                  Application.Current.Dispatcher.Invoke((Action) (() => this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(ex.Message)));
                }
                if (this._structureNode.Entity == null)
                  this._structureNode.Entity = (object) new MinomatSerializableDTO();
                Mapper.CreateMap<Minomat, MinomatSerializableDTO>();
                Mapper.Map<Minomat, object>(this._currentMinomatSlave, this._structureNode.Entity);
                EventPublisher.Publish<ActionStructureAndEntitiesUpdate>(new ActionStructureAndEntitiesUpdate()
                {
                  Minomat = this._currentMinomatSlave,
                  Node = this._structureNode,
                  Guid = this._structureNode.RootNode != this._structureNode ? this._structureNode.RootNode.Id : this._structureNode.Id,
                  Message = new MSS.DTO.Message.Message()
                  {
                    MessageType = MessageTypeEnum.Success,
                    MessageText = MessageCodes.Success_Save.GetStringValue()
                  },
                  Name = this.SlaveRadioId,
                  Description = this._structureNode.Description
                }, (IViewModel) this);
                Application.Current.Dispatcher.Invoke((Action) (() => this.OnRequestClose(true)));
              }
              else
                Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Error_Title, gmmConfiguratorResult.Message, false)));
              this.IsBusy = false;
            }));
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_ValidationError);
        });
      }
    }

    private void CopyNewMinomatSettings(bool isNew)
    {
      if (this._currentMinomatSlaveRadioDetails == null)
        this._currentMinomatSlaveRadioDetails = new MinomatRadioDetails();
      if (this._currentMinomatSlaveRadioDetails.Minomat == null)
        this._currentMinomatSlaveRadioDetails.Minomat = this._currentMinomatSlave;
      this._currentMinomatSlaveRadioDetails.DueDate = (DateTime?) ((LocationDTO) this._structureNode.RootNode?.Entity)?.DueDate;
      this._currentMinomatSlave.RadioId = this.SlaveRadioId;
      MinomatRadioDetails slaveRadioDetails = this._currentMinomatSlaveRadioDetails;
      object[] objArray = new object[7];
      objArray[0] = (object) this.FloorNrValue;
      objArray[1] = (object) "/";
      int? nullable1 = this.SelectedFloorNameId;
      int num1 = 1;
      objArray[2] = (object) (FloorNamesEnum) (nullable1.HasValue ? new int?(nullable1.GetValueOrDefault() - num1) : new int?()).Value;
      objArray[3] = (object) "/";
      objArray[4] = (object) this.ApartmentNrValue;
      objArray[5] = (object) "/";
      int? selectedDirectionId = this.SelectedDirectionId;
      int num2 = 1;
      int? nullable2;
      if (!selectedDirectionId.HasValue)
      {
        nullable1 = new int?();
        nullable2 = nullable1;
      }
      else
        nullable2 = new int?(selectedDirectionId.GetValueOrDefault() - num2);
      nullable1 = nullable2;
      objArray[6] = (object) (DirectionsEnum) nullable1.Value;
      string str = string.Concat(objArray);
      slaveRadioDetails.Location = str;
      this._currentMinomatSlaveRadioDetails.Entrance = this.Entrance;
      this._currentMinomatSlaveRadioDetails.Description = this.Description;
      this._currentMinomatSlaveRadioDetails.NetId = this.NetId.ToString();
      this._currentMinomatSlaveRadioDetails.NodeId = this.NodeId.ToString();
      this._currentMinomatSlaveRadioDetails.Channel = this.Channel.ToString();
      this._currentMinomatSlave.Provider = this._currentMinomatMaster?.Provider;
      this._currentMinomatSlave.SimPin = this._currentMinomatMaster?.SimPin;
      this._currentMinomatSlave.AccessPoint = this._currentMinomatMaster?.AccessPoint;
      this._currentMinomatSlave.UserId = this._currentMinomatMaster?.UserId;
      this._currentMinomatSlave.UserPassword = this._currentMinomatMaster?.UserPassword;
      this._currentMinomatSlave.SimCardNumber = this._currentMinomatMaster?.SimCardNumber;
      this._currentMinomatSlave.Polling = this._currentMinomatMaster != null ? this._currentMinomatMaster.Polling : 0;
      this._currentMinomatSlave.HostAndPort = this._currentMinomatMaster?.HostAndPort;
      this._currentMinomatSlave.Url = this._currentMinomatMaster?.Url;
      this._currentMinomatSlave.Country = this.CountryCollection.FirstOrDefault<Country>((Func<Country, bool>) (item => item.Id == this.SelectedCountryId));
      if (!this._currentMinomatSlaveRadioDetails.StatusDevices.HasValue)
        this._currentMinomatSlaveRadioDetails.StatusDevices = new MinomatStatusDevicesEnum?(MinomatStatusDevicesEnum.Open);
      if (!this._currentMinomatSlaveRadioDetails.StatusNetwork.HasValue)
        this._currentMinomatSlaveRadioDetails.StatusNetwork = new MinomatStatusNetworkEnum?(MinomatStatusNetworkEnum.Open);
      if (isNew)
      {
        this._currentMinomatSlave.MinomatMasterId = new Guid?(this._currentMinomatMaster != null ? this._currentMinomatMaster.Id : Guid.Empty);
        this._currentMinomatSlave.Challenge = this._currentMinomatMaster?.Challenge;
        this._currentMinomatSlave.GsmId = this.SlaveRadioId;
        this._currentMinomatSlave.SessionKey = this._currentMinomatMaster?.SessionKey;
        this._currentMinomatSlave.CreatedOn = new DateTime?(DateTime.Now);
        this._currentMinomatSlave.CreatedBy = MSS.Business.Utils.AppContext.Current.LoggedUser.Id.ToString();
        this._currentMinomatSlave.Status = StatusMinomatEnum.New.ToString();
      }
      this._currentMinomatSlave.LastUpdatedBy = "";
      Guid? id = ((LocationDTO) this._structureNode.RootNode?.Entity)?.Scenario?.Id;
      if (!id.HasValue)
        return;
      this._currentMinomatSlave.Scenario = this._repositoryFactory.GetRepository<Scenario>().GetById((object) id);
    }

    public string Title
    {
      get => this._title;
      set
      {
        this._title = value;
        this.OnPropertyChanged(nameof (Title));
      }
    }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        if (this._isBusy == value)
          return;
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_SLAVE_RADIO_ID_REQUIRED")]
    [Range(48100000, 2147483647, ErrorMessage = "MSS_MINOMAT_SLAVE_RADIO_ID_GREATER_THAN")]
    public string SlaveRadioId
    {
      get => this._slaveRadioId;
      set
      {
        this._slaveRadioId = value;
        this.OnPropertyChanged(nameof (SlaveRadioId));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_SLAVE_NODE_ID_REQUIRED")]
    [Range(2, 999, ErrorMessage = "MSS_MINOMAT_SLAVE_NODE_ID_OUT_OF_RANGE")]
    public int NodeId
    {
      get => this._nodeId;
      set
      {
        this._nodeId = value;
        this.OnPropertyChanged(nameof (NodeId));
      }
    }

    public int NetId
    {
      get => this._netId;
      set
      {
        this._netId = value;
        this.OnPropertyChanged(nameof (NetId));
      }
    }

    public string MasterRadioId
    {
      get => this._masterRadioId;
      set
      {
        this._masterRadioId = value;
        this.OnPropertyChanged(nameof (MasterRadioId));
      }
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    public string Description
    {
      get
      {
        return this._currentMinomatSlaveRadioDetails != null ? this._currentMinomatSlaveRadioDetails.Description : "";
      }
      set
      {
        this._currentMinomatSlaveRadioDetails.Description = value;
        this.OnPropertyChanged(nameof (Description));
      }
    }

    [Required(ErrorMessage = "MSS_Client_FloorNoRequired")]
    public string FloorNrValue
    {
      get => this._floorNrValue;
      set
      {
        this._floorNrValue = value;
        this.OnPropertyChanged(nameof (FloorNrValue));
      }
    }

    [Required(ErrorMessage = "MSS_Client_ApartmentNoRequired")]
    public string ApartmentNrValue
    {
      get => this._apartmentNrValue;
      set
      {
        this._apartmentNrValue = value;
        this.OnPropertyChanged(nameof (ApartmentNrValue));
      }
    }

    [Required(ErrorMessage = "MSS_Client_DirectionRequired")]
    public int? SelectedDirectionId
    {
      get => this._selectedDirectionId;
      set
      {
        this._selectedDirectionId = value;
        this.OnPropertyChanged(nameof (SelectedDirectionId));
      }
    }

    [Required(ErrorMessage = "MSS_Client_FloorNameRequired")]
    public int? SelectedFloorNameId
    {
      get => this._selectedFloorNameId;
      set
      {
        this._selectedFloorNameId = value;
        this.OnPropertyChanged(nameof (SelectedFloorNameId));
      }
    }

    [Required(ErrorMessage = "MSS_Client_EntranceRequired")]
    public string Entrance
    {
      get => this._entrance;
      set
      {
        this._entrance = value;
        this.OnPropertyChanged(nameof (Entrance));
      }
    }

    public List<string> EntrancesList
    {
      get => EditMinomatSlaveViewModel._entrancesList;
      set => EditMinomatSlaveViewModel._entrancesList = value;
    }

    [Required(ErrorMessage = "MSS_MINOMAT_CHANNEL_REQUIRED")]
    public int Channel
    {
      get => this._channel;
      set
      {
        this._channel = value;
        this.OnPropertyChanged(nameof (Channel));
      }
    }

    public IEnumerable<Country> CountryCollection
    {
      get
      {
        return (IEnumerable<Country>) this._countryRepository.GetAll().OrderBy<Country, string>((Func<Country, string>) (x => x.Name)).ToList<Country>();
      }
    }

    public Guid SelectedCountryId { get; set; }

    private void ShowSuccessMessage()
    {
      MSS.DTO.Message.Message message = new MSS.DTO.Message.Message()
      {
        MessageType = MessageTypeEnum.Success,
        MessageText = MessageCodes.Success_Save.GetStringValue()
      };
    }

    public override List<string> ValidateProperty(string propertyName)
    {
      string propertyName1 = this.GetPropertyName<string>((Expression<Func<string>>) (() => this.SlaveRadioId));
      if (!(propertyName == propertyName1) || this.wasSlaveSaved)
        return new List<string>();
      ICollection<string> validationErrors;
      this.ValidateSlaveRadioId(this.SlaveRadioId, out validationErrors);
      return validationErrors.ToList<string>();
    }

    public bool ValidateSlaveRadioId(string slaveRadioId, out ICollection<string> validationErrors)
    {
      validationErrors = (ICollection<string>) new List<string>();
      List<Minomat> list = this._repositoryFactory.GetRepository<Minomat>().Where((Expression<Func<Minomat, bool>>) (x => x.RadioId == slaveRadioId && !x.IsDeactivated)).ToList<Minomat>();
      int num;
      if (list.Any<Minomat>((Func<Minomat, bool>) (item => item.Status != StatusMinomatEnum.New.ToString())))
      {
        Guid id = this._currentMinomatSlave.Id;
        num = this._currentMinomatSlave.Id == Guid.Empty ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
        validationErrors.Add(Resources.MSS_MINOMAT_RADIO_ID_NOT_UNIQUE);
      else if (list.Any<Minomat>())
      {
        foreach (Minomat minomat in list)
        {
          if (!(minomat.RadioId == this._currentMinomatSlave.RadioId) || !(minomat.Id == this._currentMinomatSlave.Id))
          {
            validationErrors.Add(Resources.MSS_MINOMAT_RADIO_ID_NOT_UNIQUE);
            break;
          }
        }
      }
      return validationErrors.Count == 0;
    }

    private List<string> GetStructureEntrances(StructureNodeDTO node)
    {
      List<string> first = new List<string>();
      List<Guid> minomatGuidList = new List<Guid>();
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.RootNode.SubNodes)
      {
        if (subNode.Entity != null)
        {
          string name = subNode.NodeType?.Name;
          if (name != null)
          {
            switch ((StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), name, true))
            {
              case StructureNodeTypeEnum.Tenant:
                if (subNode.Entity is TenantDTO entity1)
                {
                  string entrance = entity1.Entrance;
                  if (entrance != null && !first.Contains(entrance))
                    first.Add(entrance);
                  break;
                }
                break;
              case StructureNodeTypeEnum.MinomatMaster:
                if (subNode.Entity is MinomatSerializableDTO entity3)
                {
                  Guid id1 = entity3.Id;
                  if (id1 != Guid.Empty)
                    minomatGuidList.Add(id1);
                  using (IEnumerator<StructureNodeDTO> enumerator = subNode.SubNodes.GetEnumerator())
                  {
                    while (enumerator.MoveNext())
                    {
                      if (enumerator.Current.Entity is MinomatSerializableDTO entity2)
                      {
                        Guid id2 = entity2.Id;
                        if (id2 != Guid.Empty)
                          minomatGuidList.Add(id2);
                      }
                    }
                    break;
                  }
                }
                else
                  break;
            }
          }
        }
      }
      List<string> stringList;
      if (minomatGuidList.Count <= 0)
        stringList = new List<string>();
      else
        stringList = this._minomatRadioDetailsRepository.SearchFor((Expression<Func<MinomatRadioDetails, bool>>) (x => minomatGuidList.Contains(x.Minomat.Id))).Select<MinomatRadioDetails, string>((Func<MinomatRadioDetails, string>) (x => x.Entrance)).Distinct<string>().ToList<string>();
      List<string> second = stringList;
      return first.Union<string>((IEnumerable<string>) second).OrderBy<string, string>((Func<string, string>) (x => x)).ToList<string>();
    }

    public ObservableCollection<DirectionDTO> GetDirections
    {
      get => new ObservableCollection<DirectionDTO>(FloorHelper.GetDirections());
    }

    public IEnumerable<FloorNameDTO> GetFloorNames => FloorHelper.GetFloorNames();

    private void GenerateSlaveNodeId(out int generatedNodeId, out bool isSuccessful)
    {
      generatedNodeId = 0;
      isSuccessful = false;
      List<string> source = new List<string>();
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) this._structureNode.RootNode.SubNodes)
      {
        MinomatSerializableDTO masterSerializableDTO = subNode.Entity as MinomatSerializableDTO;
        if (masterSerializableDTO != null)
        {
          List<Guid> slavesIdsAssignedToMaster = this._minomatRepository.Where((Expression<Func<Minomat, bool>>) (item => item.MinomatMasterId != new Guid?() && item.MinomatMasterId == (Guid?) masterSerializableDTO.Id)).Select<Minomat, Guid>((Expression<Func<Minomat, Guid>>) (item => item.Id)).ToList<Guid>();
          List<string> list = this._minomatRadioDetailsRepository.Where((Expression<Func<MinomatRadioDetails, bool>>) (item => slavesIdsAssignedToMaster.Contains(item.Minomat.Id))).Select<MinomatRadioDetails, string>((Expression<Func<MinomatRadioDetails, string>>) (item => item.NodeId)).ToList<string>();
          source.AddRange((IEnumerable<string>) list);
        }
      }
      if (source.Any<string>())
      {
        for (int index = 2; index <= 999; ++index)
        {
          if (!source.Contains(index.ToString()))
          {
            generatedNodeId = index;
            isSuccessful = true;
            break;
          }
        }
      }
      else
      {
        generatedNodeId = 2;
        isSuccessful = true;
      }
    }

    private bool IsNewMinomat() => this._structureNode.Entity == null;
  }
}


--- EditMinomatViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.EditMinomatViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.JobsManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Structures;
using MSS.Core.Model.UsersManagement;
using MSS.DTO.MessageHandler;
using MSS.DTO.Minomat;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Windows.Input;
using Telerik.Windows.Data;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class EditMinomatViewModel : ValidationViewModelBase
  {
    private IRepositoryFactory _repositoryFactory;
    private MSS.Core.Model.DataCollectors.Minomat selectedMinomat;
    private StructureNodeDTO _structureNode;
    private Country _selectedCountry;
    private bool _minomatScenarioEditable;
    private ScenarioDTO _selectedScenario;
    private List<ScenarioDTO> _scenarioList = new List<ScenarioDTO>();
    private string _name;
    private string _description;
    private bool _isInMasterPool;
    private bool _isMaster;
    private StatusMinomatEnum _status;
    private string _radioId;
    private DateTime? _startDate;
    private DateTime? _endDate;
    private Provider _provider;
    private string _simPin;
    private string _accessPoint;
    private string _userId;
    private string _userPassword;
    private bool _registered;
    private bool _notRegistered;
    private string _challenge;
    private string _gsmId;
    private int? _polling;
    private string _hostandPort;
    private string _url;
    private DateTime? _dateAppended;
    private string _appendedBy;
    private string _sessionKey;

    public EditMinomatViewModel(
      bool isExistingEntity,
      IRepositoryFactory repositoryFactory,
      MinomatSerializableDTO minomatSerializable,
      StructureNodeDTO node)
    {
      this._structureNode = node;
      this._repositoryFactory = repositoryFactory;
      Mapper.CreateMap<MinomatSerializableDTO, MinomatDTO>().ForMember((Expression<Func<MinomatDTO, object>>) (x => x.Provider), (Action<IMemberConfigurationExpression<MinomatSerializableDTO>>) (y => y.Ignore()));
      Mapper.CreateMap<MSS.Core.Model.DataCollectors.Minomat, MinomatDTO>();
      Mapper.CreateMap<MinomatDTO, MSS.Core.Model.DataCollectors.Minomat>();
      MinomatDTO minomat = new MinomatDTO();
      if (!isExistingEntity)
      {
        Mapper.Map<MSS.Core.Model.DataCollectors.Minomat, MinomatDTO>(this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().GetById((object) minomatSerializable.Id), minomat);
        Provider provider = this._repositoryFactory.GetRepository<Provider>().FirstOrDefault((Expression<Func<Provider, bool>>) (x => x.Id == minomat.Provider.Id));
        if (provider != null)
          minomat.Provider = provider;
      }
      else
      {
        Mapper.Map<MinomatSerializableDTO, MinomatDTO>(minomatSerializable, minomat);
        minomat.Country = this._repositoryFactory.GetRepository<Country>().GetById((object) minomatSerializable.CountryId);
        Guid providerId = minomatSerializable.ProviderId;
        if (minomatSerializable.ProviderId != Guid.Empty)
          minomat.Provider = this._repositoryFactory.GetRepository<Provider>().GetById((object) minomatSerializable.ProviderId);
      }
      this.selectedMinomat = Mapper.Map<MinomatDTO, MSS.Core.Model.DataCollectors.Minomat>(minomat);
      this._repositoryFactory = repositoryFactory;
      this.RadioId = minomat.RadioId;
      this.StartDate = minomat.StartDate;
      this.EndDate = minomat.EndDate;
      if (minomat.Provider != null)
      {
        Provider byId = this._repositoryFactory.GetRepository<Provider>().GetById((object) minomat.Provider.Id);
        if (byId != null)
          this.SelectedProvider = byId;
      }
      this.Status = (StatusMinomatEnum) Enum.ToObject(typeof (StatusMinomatEnum), minomat.idEnumStatus);
      this.Registered = minomat.Registered;
      this.NotRegistered = !minomat.Registered;
      this.Challenge = minomat.Challenge;
      this.GsmId = minomat.GsmId;
      this.Polling = new int?(minomat.Polling);
      this.HostAndPort = minomat.HostAndPort;
      this.Url = minomat.Url;
      this.DateAppended = minomat.CreatedOn;
      Guid createBy;
      if (Guid.TryParse(minomat.CreatedBy, out createBy))
      {
        User user = this._repositoryFactory.GetRepository<User>().FirstOrDefault((Expression<Func<User, bool>>) (x => x.Id == createBy));
        if (user != null)
          this.AppendedBy = string.Format("{0} {1}", (object) user.FirstName, (object) user.LastName);
      }
      else
        this.AppendedBy = minomat.CreatedBy;
      this.IsInMasterPool = minomat.IsInMasterPool;
      this.IsMaster = minomat.IsMaster;
      this.SimPin = minomat.SimPin;
      this.AccessPoint = minomat.AccessPoint;
      this.UserId = minomat.UserId;
      this.UserPassword = minomat.UserPassword;
      this.SessionKey = minomat.SessionKey;
      this.SelectedCountry = minomat.Country;
      this.SelectedScenario = minomat.Scenario != null ? this.GetListofScenarios.FirstOrDefault<ScenarioDTO>((Func<ScenarioDTO, bool>) (x => x.Id == minomat.Scenario.Id)) : (ScenarioDTO) null;
      this.Name = node.Name;
      this.Description = node.Description;
      this.IsMinomatScenarioEditable = new UsersManager(this._repositoryFactory).HasRight(OperationEnum.MinomatScenarioEdit.ToString());
    }

    public bool IsReading { get; set; }

    public RadObservableCollection<StatusMinomatEnum> GetListofStatuses
    {
      get
      {
        RadObservableCollection<StatusMinomatEnum> getListofStatuses = new RadObservableCollection<StatusMinomatEnum>();
        List<StatusMinomatEnum> list = Enum.GetValues(typeof (StatusMinomatEnum)).Cast<StatusMinomatEnum>().ToList<StatusMinomatEnum>();
        if (list.Any<StatusMinomatEnum>())
          getListofStatuses = new RadObservableCollection<StatusMinomatEnum>((IEnumerable<StatusMinomatEnum>) list);
        return getListofStatuses;
      }
    }

    public RadObservableCollection<Provider> GetListofProviders
    {
      get
      {
        RadObservableCollection<Provider> getListofProviders = new RadObservableCollection<Provider>();
        IOrderedEnumerable<Provider> orderedEnumerable = this._repositoryFactory.GetRepository<Provider>().GetAll().OrderBy<Provider, string>((Func<Provider, string>) (p => p.ProviderName));
        if (orderedEnumerable.Any<Provider>())
          getListofProviders = new RadObservableCollection<Provider>((IEnumerable<Provider>) orderedEnumerable);
        return getListofProviders;
      }
    }

    public ICommand EditMinomatCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          if (!this.IsMaster && !string.IsNullOrEmpty(this.RadioId) && this.SelectedCountry != null)
            this.IsValid = true;
          if (!this.IsValid)
            return;
          if (!this.IsReading)
            this.selectedMinomat = this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().FirstOrDefault((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (x => x.Id == this.selectedMinomat.Id));
          this.selectedMinomat.RadioId = this.RadioId;
          this.selectedMinomat.Provider = this.SelectedProvider;
          this.selectedMinomat.GsmId = this.GsmId;
          this.selectedMinomat.Polling = this.Polling.HasValue ? this.Polling.Value : 0;
          this.selectedMinomat.HostAndPort = this.HostAndPort;
          this.selectedMinomat.Url = this.Url;
          this.selectedMinomat.IsInMasterPool = this.IsInMasterPool;
          this.selectedMinomat.SimPin = this.SimPin;
          this.selectedMinomat.AccessPoint = this.AccessPoint;
          this.selectedMinomat.UserId = this.UserId;
          this.selectedMinomat.UserPassword = this.UserPassword;
          this.selectedMinomat.SessionKey = this.SessionKey;
          this.selectedMinomat.IsMaster = this.IsMaster;
          this.selectedMinomat.Country = this._repositoryFactory.GetRepository<Country>().FirstOrDefault((Expression<Func<Country, bool>>) (x => x.Id == this.SelectedCountry.Id));
          this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().Update(this.selectedMinomat);
          this.selectedMinomat.Scenario = this.SelectedScenario != null ? this._repositoryFactory.GetRepository<Scenario>().GetById((object) this.SelectedScenario.Id) : (Scenario) null;
          if (!string.IsNullOrEmpty(this.Name))
            this._structureNode.Name = this.Name;
          if (!string.IsNullOrEmpty(this.Description))
            this._structureNode.Description = this.Description;
          EventPublisher.Publish<ActionStructureAndEntitiesUpdate>(new ActionStructureAndEntitiesUpdate()
          {
            Minomat = this.selectedMinomat,
            Node = this._structureNode,
            Guid = this._structureNode.RootNode != this._structureNode ? this._structureNode.RootNode.Id : this._structureNode.Id,
            Message = new MSS.DTO.Message.Message()
            {
              MessageType = MessageTypeEnum.Success,
              MessageText = MessageCodes.Success_Save.GetStringValue()
            },
            Name = this._structureNode.Name,
            Description = this._structureNode.Description
          }, (IViewModel) this);
          this.OnRequestClose(true);
        });
      }
    }

    public ICommand DeleteMinomatCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          this.selectedMinomat = this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().FirstOrDefault((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (x => x.Id == this.selectedMinomat.Id));
          this.selectedMinomat.IsDeactivated = true;
          this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().Update(this.selectedMinomat);
          EventPublisher.Publish<MinomatUpdate>(new MinomatUpdate()
          {
            IsUpdate = true,
            Ids = new List<Guid>()
            {
              this.selectedMinomat.Id
            }
          }, (IViewModel) this);
          this.OnRequestClose(true);
        });
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_COUNTRY_REQUIRED")]
    public Country SelectedCountry
    {
      get => this._selectedCountry;
      set
      {
        this._selectedCountry = value;
        this.OnPropertyChanged(nameof (SelectedCountry));
      }
    }

    public RadObservableCollection<Country> GetListofCountries
    {
      get
      {
        RadObservableCollection<Country> getListofCountries = new RadObservableCollection<Country>();
        IOrderedEnumerable<Country> orderedEnumerable = this._repositoryFactory.GetRepository<Country>().GetAll().OrderBy<Country, string>((Func<Country, string>) (c => c.Name));
        if (orderedEnumerable.Any<Country>())
          getListofCountries = new RadObservableCollection<Country>((IEnumerable<Country>) orderedEnumerable);
        return getListofCountries;
      }
    }

    public bool IsMinomatScenarioEditable
    {
      get => this._minomatScenarioEditable;
      set
      {
        this._minomatScenarioEditable = value;
        this.OnPropertyChanged(nameof (IsMinomatScenarioEditable));
      }
    }

    public ScenarioDTO SelectedScenario
    {
      get => this._selectedScenario;
      set
      {
        this._selectedScenario = value;
        this.OnPropertyChanged(nameof (SelectedScenario));
      }
    }

    public RadObservableCollection<ScenarioDTO> GetListofScenarios
    {
      get
      {
        RadObservableCollection<ScenarioDTO> observableCollection = new RadObservableCollection<ScenarioDTO>();
        if (this._scenarioList.Count == 0)
          this._scenarioList.AddRange(new JobsManager(this._repositoryFactory).GetScenarioDTOs());
        return new RadObservableCollection<ScenarioDTO>((IEnumerable<ScenarioDTO>) this._scenarioList);
      }
    }

    public string Name
    {
      get => this._name;
      set
      {
        this._name = value;
        this.OnPropertyChanged(nameof (Name));
      }
    }

    public string Description
    {
      get => this._description;
      set
      {
        this._description = value;
        this.OnPropertyChanged(nameof (Description));
      }
    }

    public bool IsInMasterPool
    {
      get => this._isInMasterPool;
      set
      {
        this._isInMasterPool = value;
        this.OnPropertyChanged(nameof (IsInMasterPool));
      }
    }

    public bool IsMaster
    {
      get => this._isMaster;
      set
      {
        this._isMaster = value;
        this.OnPropertyChanged(nameof (IsMaster));
      }
    }

    public StatusMinomatEnum Status
    {
      get => this._status;
      set
      {
        this._status = value;
        this.OnPropertyChanged(nameof (Status));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_MASTER_RADIO_ID")]
    public string RadioId
    {
      get => this._radioId;
      set
      {
        this._radioId = value;
        this.OnPropertyChanged(nameof (RadioId));
      }
    }

    public DateTime? StartDate
    {
      get => this._startDate;
      set
      {
        this._startDate = value;
        this.OnPropertyChanged(nameof (StartDate));
      }
    }

    public DateTime? EndDate
    {
      get => this._endDate;
      set
      {
        this._endDate = value;
        this.OnPropertyChanged(nameof (EndDate));
      }
    }

    public Provider SelectedProvider
    {
      get => this._provider;
      set
      {
        this._provider = value;
        this.SimPin = this._provider.SimPin;
        this.AccessPoint = this._provider.AccessPoint;
        this.UserId = this._provider.UserId;
        this.UserPassword = this._provider.UserPassword;
        this.OnPropertyChanged(nameof (SelectedProvider));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_SIMPIN")]
    public string SimPin
    {
      get => this._simPin;
      set
      {
        this._simPin = value;
        this.OnPropertyChanged(nameof (SimPin));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_ACCESSPOINT")]
    public string AccessPoint
    {
      get => this._accessPoint;
      set
      {
        this._accessPoint = value;
        this.OnPropertyChanged(nameof (AccessPoint));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_USERID")]
    public string UserId
    {
      get => this._userId;
      set
      {
        this._userId = value;
        this.OnPropertyChanged(nameof (UserId));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_USERPASS")]
    public string UserPassword
    {
      get => this._userPassword;
      set
      {
        this._userPassword = value;
        this.OnPropertyChanged(nameof (UserPassword));
      }
    }

    public bool Registered
    {
      get => this._registered;
      set
      {
        this._registered = value;
        this.OnPropertyChanged(nameof (Registered));
      }
    }

    public bool NotRegistered
    {
      get => this._notRegistered;
      set
      {
        this._notRegistered = value;
        this.OnPropertyChanged(nameof (NotRegistered));
      }
    }

    public string Challenge
    {
      get => this._challenge;
      set
      {
        this._challenge = value;
        this.OnPropertyChanged(nameof (Challenge));
      }
    }

    public string GsmId
    {
      get => this._gsmId;
      set
      {
        this._gsmId = value;
        this.OnPropertyChanged(nameof (GsmId));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_POLLING_REQUIRED")]
    public int? Polling
    {
      get => this._polling;
      set
      {
        this._polling = value;
        this.OnPropertyChanged(nameof (Polling));
      }
    }

    [Required(ErrorMessage = "MSS_MINOMAT_HOSTANDPORT_REQUIRED")]
    public string HostAndPort
    {
      get => this._hostandPort;
      set
      {
        this._hostandPort = value;
        this.OnPropertyChanged(nameof (HostAndPort));
      }
    }

    public string Url
    {
      get => this._url;
      set
      {
        this._url = value;
        this.OnPropertyChanged(nameof (Url));
      }
    }

    public DateTime? DateAppended
    {
      get => this._dateAppended;
      set
      {
        this._dateAppended = value;
        this.OnPropertyChanged(nameof (DateAppended));
      }
    }

    public string AppendedBy
    {
      get => this._appendedBy;
      set
      {
        this._appendedBy = value;
        this.OnPropertyChanged(nameof (AppendedBy));
      }
    }

    public string SessionKey
    {
      get => this._sessionKey;
      set
      {
        this._sessionKey = value;
        this.OnPropertyChanged(nameof (SessionKey));
      }
    }

    public override List<string> ValidateProperty(string propertyName)
    {
      string propertyName1 = this.GetPropertyName<string>((Expression<Func<string>>) (() => this.RadioId));
      if (!(propertyName == propertyName1))
        return new List<string>();
      ICollection<string> validationErrors;
      this.ValidateMasterRadioId(this.RadioId, out validationErrors);
      if (validationErrors.Count > 0)
        this.IsValid = false;
      return validationErrors.ToList<string>();
    }

    public bool ValidateMasterRadioId(
      string masterRadioId,
      out ICollection<string> validationErrors)
    {
      validationErrors = (ICollection<string>) new List<string>();
      IList<MSS.Core.Model.DataCollectors.Minomat> source = this._repositoryFactory.GetRepository<MSS.Core.Model.DataCollectors.Minomat>().SearchFor((Expression<Func<MSS.Core.Model.DataCollectors.Minomat, bool>>) (x => x.RadioId == masterRadioId));
      if (this.selectedMinomat == null && source.Any<MSS.Core.Model.DataCollectors.Minomat>())
        validationErrors.Add(Resources.MSS_MINOMAT_RADIO_ID_NOT_UNIQUE);
      else if (source.Any<MSS.Core.Model.DataCollectors.Minomat>() && source.FirstOrDefault<MSS.Core.Model.DataCollectors.Minomat>((Func<MSS.Core.Model.DataCollectors.Minomat, bool>) (x => x.RadioId != null && x.RadioId != this.selectedMinomat.RadioId)) != null)
        validationErrors.Add(Resources.MSS_MINOMAT_RADIO_ID_NOT_UNIQUE);
      return validationErrors.Count == 0;
    }
  }
}


--- EditPhysicalStructureViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.EditPhysicalStructureViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using Microsoft.Win32;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.Configuration;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.GMMWrapper;
using MSS.Business.Modules.LicenseManagement;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Business.Utils;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Structures;
using MSS.Core.Utils;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.Configuration;
using MSS_Client.ViewModel.Meters;
using MSS_Client.ViewModel.Settings;
using MVVM.Commands;
using NHibernate;
using NHibernate.Linq;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using Telerik.Windows.Controls;
using Telerik.Windows.Controls.TreeListView;
using Telerik.Windows.Data;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class EditPhysicalStructureViewModel : StructureViewModelBase
  {
    private readonly StructureNodeDTO _parentForSelectedNode;
    private readonly StructureNodeDTO _selectedNode;
    private bool _updatedForReadingOrder;
    private string _systemName;
    private ObservableCollection<StructureNodeDTO> _nodesCollection = new ObservableCollection<StructureNodeDTO>();
    private List<StructureNodeLinks> _physicalStructureNodeLinksToDelete = new List<StructureNodeLinks>();
    private List<StructureNodeLinks> _logicalStructureNodeLinksToDelete = new List<StructureNodeLinks>();
    private List<StructureNode> _structureNodesToDelete = new List<StructureNode>();
    private Dictionary<StructureNodeDTO, StructureNodeEquipmentSettings> _equipmentSettingsForMeters;
    private ObservableCollection<StructureNodeDTO> _physicalNodesDTOToDelete = new ObservableCollection<StructureNodeDTO>();
    private ObservableCollection<StructureNodeDTO> _logicalNodesDTOToDelete = new ObservableCollection<StructureNodeDTO>();
    private byte[] _structureBytes;
    private ScanMinoConnectManager _scannerMinoConnectManager;
    private int _metersInStructure;
    private IRepository<PhotoMeter> _photoMeterRepository;
    private IRepository<Note> _noteRepository;
    private bool wasSaveExecuted = false;
    private readonly IDeviceManager _deviceManager;
    private string _progressDialogMessage;
    private bool _isBusy;
    private int _progressBarValue;
    private bool _isPasteActive;
    private bool _isPhotosButtonEnabled;
    private StructureNodeDTO _savedInClipBoardStructureNodeDto;
    private bool _mBusScanNetworkVisibility;

    public EditPhysicalStructureViewModel(
      StructureNodeDTO selectedNode,
      bool isExecuteInstallation,
      bool updatedForReadingOrder,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
      : base(repositoryFactory, windowFactory)
    {
      this._selectedNode = selectedNode;
      this._updatedForReadingOrder = updatedForReadingOrder;
      this._nodesCollection.Add(this._selectedNode);
      this._parentForSelectedNode = selectedNode?.ParentNode;
      this.Title = isExecuteInstallation ? Resources.MSS_Client_Execute_Installation_Order : Resources.MSS_Client_Structures_Edit_Physical_Structure;
      this.UpdateSerialNumberListForReadingOrder(updatedForReadingOrder);
      this._photoMeterRepository = this._repositoryFactory.GetRepository<PhotoMeter>();
      this._noteRepository = this._repositoryFactory.GetRepository<Note>();
      this._deviceManager = (IDeviceManager) new DeviceManagerWrapper("DefaultScanner");
      this.AvailableNodesGroups = new ObservableCollection<MSS.Business.Modules.StructuresManagement.Group>();
      MSS.Business.Modules.StructuresManagement.Group group = new MSS.Business.Modules.StructuresManagement.Group();
      group.Name = CultureResources.GetValue("MSS_Available_Nodes_Folder");
      StructuresHelper.LoadItemsInGroup(group, this.AvailableNodesSettingsGroup);
      this.AvailableNodesGroups.Add(group);
      Mapper.CreateMap<StructureNodeDTO, StructureNodeDTO>();
      Mapper.CreateMap<MSS.Core.Model.Meters.Meter, MeterDTO>();
      EventPublisher.Register<ActionStructureAndEntitiesUpdate>(new Action<ActionStructureAndEntitiesUpdate>(((StructureViewModelBase) this).UpdateEntities));
      EventPublisher.Register<ReplaceDeviceEvent>(new Action<ReplaceDeviceEvent>(((StructureViewModelBase) this).ReplaceDevice));
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(((StructureViewModelBase) this).ShowActionSyncFinished));
      EventPublisher.Register<TreeDragDropChange>(new Action<TreeDragDropChange>(this.OnTreeChange));
      EventPublisher.Register<MeterNotesUpdated>(new Action<MeterNotesUpdated>(this.UpdateTreeWithMeterNotes));
      EventPublisher.Register<MeterPhotosUpdated>(new Action<MeterPhotosUpdated>(this.UpdateTreeWithMeterPhotos));
      this.InitStructureForSelectedNode();
      ScanMinoConnectManager.IsScanningStarted = false;
      this.DragDropAttachedProp = new DragDropAttachedObject()
      {
        IsEnabled = true,
        PhysicalLinks = new List<StructureNodeLinks>()
      };
      this.StructureEquipmentSettings = this._repositoryFactory.GetRepository<StructureNodeEquipmentSettings>().FirstOrDefault((Expression<Func<StructureNodeEquipmentSettings, bool>>) (e => e.StructureNode.Id == selectedNode.RootNode.Id)) ?? new StructureNodeEquipmentSettings();
      this.UpdateDevicesFoundLabel();
      this.IsChangeDeviceModelParametersEnabled = false;
      StructureViewModelBase.deviceModelsInLicense = LicenseHelper.GetDeviceTypes().ToList<string>();
      this._equipmentSettingsForMeters = new Dictionary<StructureNodeDTO, StructureNodeEquipmentSettings>();
      List<StructureNodeDTO> structureNodesForMeters = new List<StructureNodeDTO>();
      List<StructureNodeDTO> structureNodes = new List<StructureNodeDTO>();
      structureNodes.Add(this.StructureForSelectedNode[0]);
      this.GetMeterNodesAndStructureNodes(this.StructureForSelectedNode[0], ref structureNodesForMeters, ref structureNodes);
      List<Guid> structureNodeIds = structureNodesForMeters.Select<StructureNodeDTO, Guid>((Func<StructureNodeDTO, Guid>) (item => item.Id)).ToList<Guid>();
      List<StructureNodeEquipmentSettings> list = this._repositoryFactory.GetRepository<StructureNodeEquipmentSettings>().Where((Expression<Func<StructureNodeEquipmentSettings, bool>>) (item => structureNodeIds.Contains(item.StructureNode.Id))).ToList<StructureNodeEquipmentSettings>();
      foreach (StructureNodeDTO structureNodeDto in structureNodesForMeters)
      {
        StructureNodeDTO currentStructureNode = structureNodeDto;
        StructureNodeEquipmentSettings equipmentSettings = list.FirstOrDefault<StructureNodeEquipmentSettings>((Func<StructureNodeEquipmentSettings, bool>) (item => item.StructureNode.Id == currentStructureNode.Id));
        if (equipmentSettings != null)
          this._equipmentSettingsForMeters.Add(currentStructureNode, equipmentSettings);
      }
      foreach (StructureNodeDTO node in structureNodes)
        node.IsMeterNonEditable = node.Entity is MeterDTO && this.IsItemNonEditable(node);
      this.MBusScanNetworkVisibility = new UsersManager(repositoryFactory).HasRight(OperationEnum.MbuScanNetwork.ToString());
    }

    public DragDropAttachedObject DragDropAttachedProp { get; set; }

    public ObservableCollection<MSS.Business.Modules.StructuresManagement.Group> AvailableNodesGroups { get; private set; }

    public ObservableCollection<StructureNodeDTO> AvailableNodesSettingsGroup
    {
      get
      {
        List<StructureNodeDTO> source = new List<StructureNodeDTO>();
        IRepository<StructureNodeType> nodeTypeRepository = this._structureNodeTypeRepository;
        Expression<Func<StructureNodeType, bool>> predicate = (Expression<Func<StructureNodeType, bool>>) (n => n.IsPhysical);
        foreach (StructureNodeType nodeType in (IEnumerable<StructureNodeType>) nodeTypeRepository.SearchFor(predicate))
        {
          StructureNodeDTO structureNodeDto = new StructureNodeDTO(Guid.Empty, CultureResources.GetValue("MSS_StructureNode_" + nodeType.Name), new BitmapImage(new Uri(nodeType.IconPath)), nodeType, "", (object) null, true, StructureTypeEnum.Physical);
          source.Add(structureNodeDto);
        }
        return new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) source.OrderBy<StructureNodeDTO, string>((Func<StructureNodeDTO, string>) (n => n.Name)));
      }
    }

    public ObservableCollection<StructureNodeDTO> StructureForSelectedNode
    {
      get => this._nodesCollection;
      set
      {
        this._nodesCollection = value;
        this.OnPropertyChanged(nameof (StructureForSelectedNode));
      }
    }

    public string Title { get; set; }

    public string ProgressDialogMessage
    {
      get => this._progressDialogMessage;
      set
      {
        this._progressDialogMessage = value;
        this.OnPropertyChanged(nameof (ProgressDialogMessage));
      }
    }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    public int ProgressBarValue
    {
      get => this._progressBarValue;
      set
      {
        this._progressBarValue = value;
        this.OnPropertyChanged(nameof (ProgressBarValue));
      }
    }

    public StructureNodeDTO SelectedStructureNode { get; set; }

    public bool IsPasteActive
    {
      get => this._isPasteActive;
      set
      {
        this._isPasteActive = value;
        this.OnPropertyChanged(nameof (IsPasteActive));
      }
    }

    public bool IsPhotosButtonEnabled
    {
      get => this._isPhotosButtonEnabled;
      set
      {
        this._isPhotosButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsPhotosButtonEnabled));
      }
    }

    public StructureNodeDTO SavedinClipStructureNodeDto
    {
      get => this._savedInClipBoardStructureNodeDto;
      set
      {
        this._savedInClipBoardStructureNodeDto = value;
        this.IsPasteActive = value != null;
      }
    }

    public bool MBusScanNetworkVisibility
    {
      get => this._mBusScanNetworkVisibility;
      set
      {
        this._mBusScanNetworkVisibility = value;
        this.OnPropertyChanged(nameof (MBusScanNetworkVisibility));
      }
    }

    public ICommand ChangeDeviceModelParametersCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (this.SelectedItem == null || !(this.SelectedItem.NodeType.Name == "Meter"))
            return;
          if (this.SelectedItem.Entity is MeterDTO entity2)
          {
            DeviceModel deviceModel = this._deviceManager.GetDeviceModel(entity2.DeviceType.GetGMMDeviceModelName());
            StructureNodeEquipmentSettings equipmentSettings = this._equipmentSettingsForMeters.FirstOrDefault<KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings>>((Func<KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings>, bool>) (item => item.Key == this.SelectedItem)).Value;
            if (equipmentSettings != null && !string.IsNullOrEmpty(equipmentSettings.DeviceModelReadingParams))
              deviceModel = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.UpdateDeviceModelWithSavedParams(deviceModel, equipmentSettings.DeviceModelReadingParams);
            if (deviceModel != null && deviceModel.ChangeableParameters != null && deviceModel.ChangeableParameters.Any<ChangeableParameter>())
            {
              DeviceModelChangeableParametersViewModel parametersViewModel = DIConfigurator.GetConfigurator().Get<DeviceModelChangeableParametersViewModel>((IParameter) new ConstructorArgument("selectedDeviceModel", (object) deviceModel));
              bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) parametersViewModel);
              if (newModalDialog.HasValue & newModalDialog.Value)
              {
                List<Config> changeableParameters = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.GetConfigListFromChangeableParameters(parametersViewModel.SelectedDeviceModel.ChangeableParameters);
                if (equipmentSettings == null)
                  equipmentSettings = new StructureNodeEquipmentSettings();
                equipmentSettings.DeviceModelReadingParams = MSS.Business.Modules.AppParametersManagement.AppParametersManagement.SerializedConfigList(changeableParameters, parametersViewModel.SelectedDeviceModel.ChangeableParameters);
                if (this._equipmentSettingsForMeters.Any<KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings>>() && this._equipmentSettingsForMeters.Keys.Contains<StructureNodeDTO>(this.SelectedItem) && this._equipmentSettingsForMeters[this.SelectedItem] != null)
                  this._equipmentSettingsForMeters[this.SelectedItem] = equipmentSettings;
                else
                  this._equipmentSettingsForMeters.Add(this.SelectedItem, equipmentSettings);
              }
            }
            else
              MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_Client_DeviceModeChangeableParameters_ParamsAreNull, false);
          }
          else
            MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.MSS_DeviceModelChangeableParams_MissingDeviceModel, false);
        }));
      }
    }

    public ICommand CutToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          this.SavedinClipStructureNodeDto = (StructureNodeDTO) radTreeListView.SelectedItem;
          if (this.SavedinClipStructureNodeDto.ParentNode == null || this.SavedinClipStructureNodeDto.ParentNode != null && this.SavedinClipStructureNodeDto.ParentNode.Name == CultureResources.GetValue("MSS_Available_Nodes_Folder"))
          {
            ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Remove(this.SavedinClipStructureNodeDto);
            if (((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Count == 0)
            {
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
              this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
              this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_ROOTNODE_CANNOT_BE_CUTTED);
            }
          }
          else
            this.SavedinClipStructureNodeDto.ParentNode.SubNodes.Remove(this.SavedinClipStructureNodeDto);
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand PasteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedStructureNode = (StructureNodeDTO) radTreeListView.SelectedItem;
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, selectedStructureNode, false))
          {
            if (selectedStructureNode != null && selectedStructureNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = selectedStructureNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = selectedStructureNode.RootNode));
              selectedStructureNode.SubNodes.Add(this.SavedinClipStructureNodeDto);
            }
            else if (selectedStructureNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand PasteAfterToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          StructureNodeDTO selectedItem = (StructureNodeDTO) radTreeListView.SelectedItem;
          StructureNodeDTO parentNode = selectedItem.ParentNode;
          radTreeListView.SelectedItem = (object) null;
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          if (this.SavedinClipStructureNodeDto == null)
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_NOTHING_TO_PASTE);
          else if (structureNodesValidator.IsValidNodesRelationship(this.SavedinClipStructureNodeDto, parentNode, false))
          {
            if (parentNode != null && parentNode.SubNodes != null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = parentNode.RootNode));
              int num = parentNode.SubNodes.IndexOf(selectedItem);
              this.SavedinClipStructureNodeDto.ParentNode = parentNode;
              parentNode.SubNodes.Insert(num + 1, this.SavedinClipStructureNodeDto);
            }
            else if (parentNode == null)
            {
              this.SavedinClipStructureNodeDto.ParentNode = this.SavedinClipStructureNodeDto;
              StructuresHelper.Descendants(this.SavedinClipStructureNodeDto).ToList<StructureNodeDTO>().ForEach((Action<StructureNodeDTO>) (x => x.RootNode = this.SavedinClipStructureNodeDto));
              this.SavedinClipStructureNodeDto.RootNode = this.SavedinClipStructureNodeDto;
              this.SavedinClipStructureNodeDto.ParentNode = (StructureNodeDTO) null;
              ((Collection<StructureNodeDTO>) radTreeListView.ItemsSource).Add(this.SavedinClipStructureNodeDto);
            }
            this.SavedinClipStructureNodeDto = (StructureNodeDTO) null;
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_CUT_PASTE_ERROR);
          this.OnPropertyChanged("StructureForSelectedNode");
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand AddNodeCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = parameter as StructureNodeDTO;
          StructureNodeDTO destination = new StructureNodeDTO();
          StructureNodesValidator structureNodesValidator = new StructureNodesValidator();
          Mapper.Map<StructureNodeDTO, StructureNodeDTO>(structureNodeDto, destination);
          if (this.SelectedItem == null)
          {
            if (!destination.NodeType.Name.Equals(typeof (MSS.Core.Model.Meters.Meter).Name))
            {
              destination.RootNode = destination;
              this.StructureForSelectedNode.Add(destination);
            }
            else
              this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
          }
          else if (structureNodesValidator.IsValidNodesRelationship(structureNodeDto, this.SelectedItem, false))
          {
            this.SelectedItem.SubNodes.Add(destination);
            this.OnPropertyChanged("StructureForSelectedNode");
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_Structure_Validation_Message);
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand SaveStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is RadTreeListView radTreeListView2))
            return;
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message();
          radTreeListView2.ExpandAllHierarchyItems();
          DataItemCollection items = radTreeListView2.Items;
          ObservableCollection<StructureNodeDTO> nodeCollection = new ObservableCollection<StructureNodeDTO>(items.Cast<StructureNodeDTO>());
          bool flag = this.ReconstructCollectionWithoutInvalidMBusScannerMeters(nodeCollection);
          if (this.ContinueActionIfMBusIsStarted(this._scannerMinoConnectManager) && flag)
          {
            if (this.RemoveDuplicateAndNonExistentSerialNumbers(ref nodeCollection))
              MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DeleteStructure_Warning_Title, Resources.MSS_Client_DuplicateMetersWillNotBeSaved, false);
            nodeCollection.SetNodesOrderNumber(this._selectedNode, this._parentForSelectedNode);
            foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) nodeCollection)
            {
              if (structureNodeDto.Entity is MeterDTO && !((MeterDTO) structureNodeDto.Entity).ConfigDate.HasValue)
                ((MeterDTO) structureNodeDto.Entity).ConfigDate = new DateTime?(DateTime.Now);
            }
            ObservableCollection<StructureNodeDTO> observableCollection = this.ReconstructNodeCollection(nodeCollection, this._parentForSelectedNode);
            if (this._physicalStructureNodeLinksToDelete.Count != 0 || this._logicalStructureNodeLinksToDelete.Count != 0 || this._structureNodesToDelete.Count != 0)
            {
              foreach (StructureNodeDTO selectedNode in (Collection<StructureNodeDTO>) this._physicalNodesDTOToDelete)
                this.GetStructuresManagerInstance().GetAffectedLogicalStructure(selectedNode, StructureTypeEnum.Physical).ToList<StructureNodeDTO>().ForEach(new Action<StructureNodeDTO>(((Collection<StructureNodeDTO>) this._logicalNodesDTOToDelete).Add));
              bool? deleteDialog = this.ShowWarningWithStructuresToDeleteDialog(this._physicalNodesDTOToDelete, this._logicalNodesDTOToDelete);
              if (deleteDialog.HasValue && deleteDialog.Value)
              {
                List<StructureNodeLinks> structureNodeLinksToBeDeleted = new List<StructureNodeLinks>();
                this._physicalStructureNodeLinksToDelete.ForEach(new Action<StructureNodeLinks>(structureNodeLinksToBeDeleted.Add));
                this._logicalStructureNodeLinksToDelete.ForEach(new Action<StructureNodeLinks>(structureNodeLinksToBeDeleted.Add));
                if (!this._updatedForReadingOrder)
                  this.GetStructuresManagerInstance().TransactionalUpdateStructure((IList<StructureNodeDTO>) observableCollection, StructureTypeEnum.Physical, this.StructureEquipmentSettings, (IList<StructureNodeLinks>) structureNodeLinksToBeDeleted, (IList<StructureNode>) this._structureNodesToDelete);
                else
                  this._structureBytes = this.CreateStructureBytes(observableCollection, this._structureBytes);
              }
              else
              {
                message.MessageType = MessageTypeEnum.Warning;
                message.MessageText = MessageCodes.OperationCancelled.GetStringValue();
              }
            }
            else
            {
              if (!this._updatedForReadingOrder)
                this.GetStructuresManagerInstance().TransactionalUpdateStructure((IList<StructureNodeDTO>) observableCollection, StructureTypeEnum.Physical, this.StructureEquipmentSettings);
              else
                this._structureBytes = this.CreateStructureBytes(observableCollection, this._structureBytes);
              message.MessageType = MessageTypeEnum.Success;
              message.MessageText = MessageCodes.Success_Save.GetStringValue();
            }
            if (!this._updatedForReadingOrder)
            {
              if (nodeCollection != null && nodeCollection.Any<StructureNodeDTO>())
              {
                foreach (StructureNodeDTO structureNodeDto1 in (Collection<StructureNodeDTO>) nodeCollection)
                {
                  StructureNodeDTO structureNodeDto = structureNodeDto1;
                  Guid entityId;
                  StructureNodeTypeEnum entityType;
                  StructuresHelper.GetEntityIdAndEntityType(structureNodeDto, out entityId, out entityType);
                  StructureNodeLinks structureNodeLinks = this._repositoryFactory.GetRepository<StructureNodeLinks>().FirstOrDefault((Expression<Func<StructureNodeLinks, bool>>) (l => l.Node.Id == structureNodeDto.Id && l.ParentNodeId == (structureNodeDto.ParentNode != default (object) ? structureNodeDto.ParentNode.Id : Guid.Empty) && l.RootNode.Id == structureNodeDto.RootNode.Id && l.EndDate == new DateTime?()));
                  EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
                  {
                    Guid = structureNodeDto.Id,
                    LinkGuid = structureNodeLinks != null ? structureNodeLinks.Id : Guid.Empty,
                    EntityId = entityId,
                    EntityType = entityType,
                    Message = message
                  }, (IViewModel) this);
                }
                if (items.Count > observableCollection.Count)
                  EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
                  {
                    Guid = Guid.Empty,
                    Message = message
                  }, (IViewModel) this);
                StructureNodeDTO structureNodeDto2 = nodeCollection.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.ParentNode == null && n.RootNode == n));
                EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
                {
                  RootNode = structureNodeDto2,
                  Message = message
                }, (IViewModel) this);
              }
              else
                EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
                {
                  Message = message
                }, (IViewModel) this);
              foreach (StructureNodeDTO replacedMeter1 in this._replacedMeterList)
              {
                StructureNodeDTO replacedMeter = replacedMeter1;
                StructureNodeDTO structureNodeDto = replacedMeter;
                if (replacedMeter.Id == Guid.Empty)
                  structureNodeDto = Mapper.Map<StructureNode, StructureNodeDTO>(this._structureNodeRepository.FirstOrDefault((Expression<Func<StructureNode, bool>>) (item => item.EntityId == (replacedMeter.Entity as MeterDTO).Id && item.EndDate == new DateTime?())));
                if (structureNodeDto != null)
                {
                  this.GetStructuresManagerInstance().DeleteStructure(structureNodeDto, StructureTypeEnum.Physical, false);
                  this.GetStructuresManagerInstance().UpdateReplacedMeter(structureNodeDto);
                  this.GetStructuresManagerInstance().ReplacePhysicalMeterInLogicalStructure(structureNodeDto);
                }
              }
            }
            else
            {
              this._structureBytes = this.GetStructuresManagerInstance().UpdateReplacedMeter(this._replacedMeterList, this._structureBytes);
              EventPublisher.Publish<StructureBytesUpdated>(new StructureBytesUpdated()
              {
                StructureBytes = this._structureBytes
              }, (IViewModel) this);
            }
            if (this._equipmentSettingsForMeters.Any<KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings>>())
            {
              List<Guid> structureNodeIds = this._equipmentSettingsForMeters.Keys.Select<StructureNodeDTO, Guid>((Func<StructureNodeDTO, Guid>) (item => item.Id)).ToList<Guid>();
              List<StructureNode> list = this._structureNodeRepository.Where((Expression<Func<StructureNode, bool>>) (item => structureNodeIds.Contains(item.Id))).ToList<StructureNode>();
              foreach (KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings> settingsForMeter in this._equipmentSettingsForMeters)
              {
                KeyValuePair<StructureNodeDTO, StructureNodeEquipmentSettings> currentEquipmentSettings = settingsForMeter;
                StructureNode structureNode = list.FirstOrDefault<StructureNode>((Func<StructureNode, bool>) (item => item.Id == currentEquipmentSettings.Key.Id));
                currentEquipmentSettings.Value.StructureNode = structureNode;
              }
              IRepository<StructureNodeEquipmentSettings> repository = this._repositoryFactory.GetRepository<StructureNodeEquipmentSettings>();
              List<StructureNodeEquipmentSettings> equipmentSettingsToInsert = new List<StructureNodeEquipmentSettings>();
              List<StructureNodeEquipmentSettings> equipmentSettingsToUpdate = new List<StructureNodeEquipmentSettings>();
              TypeHelperExtensionMethods.ForEach<StructureNodeEquipmentSettings>((IEnumerable<StructureNodeEquipmentSettings>) this._equipmentSettingsForMeters.Values, (Action<StructureNodeEquipmentSettings>) (eqSettings =>
              {
                if (eqSettings.Id == Guid.Empty)
                  equipmentSettingsToInsert.Add(eqSettings);
                else
                  equipmentSettingsToUpdate.Add(eqSettings);
              }));
              ISession session = this._repositoryFactory.GetSession();
              session.BeginTransaction();
              repository.TransactionalInsertMany((IEnumerable<StructureNodeEquipmentSettings>) equipmentSettingsToInsert);
              repository.TransactionalInsertMany((IEnumerable<StructureNodeEquipmentSettings>) equipmentSettingsToUpdate);
              session.Transaction.Commit();
              session.Clear();
            }
            this.wasSaveExecuted = true;
            this.OnRequestClose(true);
          }
        }));
      }
    }

    private bool RemoveDuplicateAndNonExistentSerialNumbers(
      ref ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      List<string> distinctSerialNumbers = new List<string>();
      List<StructureNodeDTO> nodesToRemove = new List<StructureNodeDTO>();
      TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) nodeCollection, (Action<StructureNodeDTO>) (item =>
      {
        if (!(item.NodeType.Name == "Meter") && !(item.NodeType.Name == "RadioMeter"))
          return;
        if (item.Entity is MeterDTO entity2 && !distinctSerialNumbers.Contains(entity2.SerialNumber) && !string.IsNullOrEmpty(entity2.SerialNumber))
          distinctSerialNumbers.Add(entity2.SerialNumber);
        else
          nodesToRemove.Add(item);
      }));
      foreach (StructureNodeDTO node in nodesToRemove)
      {
        if (nodeCollection.Contains(node))
        {
          this.RemoveNodeAndChildrenFromCollection(node, ref nodeCollection);
          node.ParentNode.SubNodes.Remove(node);
        }
      }
      return nodesToRemove.Any<StructureNodeDTO>();
    }

    private void RemoveNodeAndChildrenFromCollection(
      StructureNodeDTO node,
      ref ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      nodeCollection.Remove(node);
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
        this.RemoveNodeAndChildrenFromCollection(subNode, ref nodeCollection);
    }

    private byte[] CreateStructureBytes(
      ObservableCollection<StructureNodeDTO> actualNodeCollection,
      byte[] structureBytes)
    {
      this.GetStructuresManagerInstance().InsertEntitiesGuid(actualNodeCollection);
      this.GetStructuresManagerInstance().InsertStructureNodesGuid(actualNodeCollection);
      structureBytes = StructuresHelper.SerializeStructure(actualNodeCollection, structureBytes);
      return structureBytes;
    }

    public ICommand EditSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is RadMenuItem radMenuItem2))
            return;
          RadContextMenu parent = (RadContextMenu) radMenuItem2.Parent;
          if (parent != null)
          {
            StructureNodeDTO structureNodeDto = (StructureNodeDTO) parent.GetClickedElement<TreeListViewRow>().Item;
            this.SetParentAndRootNode(structureNodeDto);
            this.EditSelectedStructureNode(structureNodeDto);
            this.OnPropertyChanged("StructureForSelectedNode");
          }
        }));
      }
    }

    public ICommand EditEntityCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO selectedItem = (StructureNodeDTO) (parameter as RadTreeListView).SelectedItem;
          if (selectedItem == null)
            return;
          this.SetParentAndRootNode(selectedItem);
          this.EditSelectedStructureNode(selectedItem);
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public ICommand DeleteToolbarSelectedItemCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.DeleteSelectedNodes(this.GetNodesToDelete(parameter as RadTreeListView));
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    private List<StructureNodeDTO> GetNodesToDelete(RadTreeListView radTreeListView)
    {
      List<StructureNodeDTO> nodesToDelete = new List<StructureNodeDTO>();
      foreach (object selectedItem in (Collection<object>) radTreeListView.SelectedItems)
      {
        StructureNodeDTO foundNode = (StructureNodeDTO) null;
        this.GetNodeToDeleteFromStructure((StructureNodeDTO) selectedItem, this.StructureForSelectedNode, ref foundNode);
        if (foundNode != null)
          nodesToDelete.Add(foundNode);
      }
      return nodesToDelete;
    }

    private void GetNodeToDeleteFromStructure(
      StructureNodeDTO nodeToDelete,
      ObservableCollection<StructureNodeDTO> collectionToSearch,
      ref StructureNodeDTO foundNode)
    {
      foreach (StructureNodeDTO structureNodeDto in (Collection<StructureNodeDTO>) collectionToSearch)
      {
        if (nodeToDelete != structureNodeDto)
        {
          this.GetNodeToDeleteFromStructure(nodeToDelete, structureNodeDto.SubNodes, ref foundNode);
        }
        else
        {
          foundNode = structureNodeDto;
          break;
        }
      }
    }

    private void DeleteSelectedNodes(List<StructureNodeDTO> selectedNodesToDelete)
    {
      List<StructureNodeDTO> descendants = new List<StructureNodeDTO>();
      selectedNodesToDelete.ForEach((Action<StructureNodeDTO>) (item => descendants.AddRange(StructuresHelper.Descendants(item))));
      bool? shouldContinueWithDeletion = new bool?(true);
      if (!selectedNodesToDelete.All<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.Id == Guid.Empty)) || !descendants.All<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (n => n.Id == Guid.Empty)))
        Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => shouldContinueWithDeletion = MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning_DeleteStructure_Title.GetStringValue(), MessageCodes.Warning_DeletePhysicalNodeInReadingOrder_Message.GetStringValue(), true)));
      if (!shouldContinueWithDeletion.HasValue || !shouldContinueWithDeletion.Value)
        return;
      selectedNodesToDelete.ForEach((Action<StructureNodeDTO>) (nodeToDelete =>
      {
        if (!this._updatedForReadingOrder)
          this.GetRelatedPhysicalAndLogicalNodes(nodeToDelete);
        else
          this.RemovePhysicalNodeInReadingOrder(nodeToDelete);
      }));
    }

    private void GetRelatedPhysicalAndLogicalNodes(StructureNodeDTO selectedNode)
    {
      this._physicalNodesDTOToDelete.Add(selectedNode);
      this.GetAffectedStructureNodesToDelete(selectedNode);
      this.RemoveSelectedNodeFromStructure(selectedNode, this._nodesCollection);
      this.RemoveSerialNumberFromUniquenessList(selectedNode);
    }

    private void RemovePhysicalNodeInReadingOrder(StructureNodeDTO selectedNode)
    {
      this._physicalNodesDTOToDelete.Add(selectedNode);
      this.RemoveSelectedNodeFromStructure(selectedNode, this._nodesCollection);
      this.RemoveSerialNumberFromUniquenessList(selectedNode);
    }

    public override ICommand CancelWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          MSS.DTO.Message.Message message = new MSS.DTO.Message.Message();
          if (!this.wasSaveExecuted)
          {
            message.MessageType = MessageTypeEnum.Warning;
            message.MessageText = MessageCodes.OperationCancelled.GetStringValue();
          }
          if (!this.ContinueActionIfMBusIsStarted(this._scannerMinoConnectManager))
            return;
          EventPublisher.Publish<StructureUpdated>(new StructureUpdated()
          {
            Guid = Guid.Empty,
            Message = message
          }, (IViewModel) this);
          this.OnRequestClose(false);
        }));
      }
    }

    public ICommand ReplaceMeterCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (param =>
        {
          if (param is StructureNodeDTO node2)
            this.EditSelectedStructureNode(node2, true);
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public ICommand ReplaceMeterContextMenuCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (param =>
        {
          if (param is RadMenuItem radMenuItem2)
          {
            RadContextMenu parent = (RadContextMenu) radMenuItem2.Parent;
            if (parent != null)
            {
              StructureNodeDTO node = (StructureNodeDTO) parent.GetClickedElement<TreeListViewRow>().Item;
              if (node != null)
                this.EditSelectedStructureNode(node, true);
            }
          }
          this.OnPropertyChanged("StructureForSelectedNode");
        }));
      }
    }

    public ICommand ScanSettingsCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<StructureScanSettingsViewModel>((IParameter) new ConstructorArgument("equipmentSettings", (object) this.StructureEquipmentSettings)));
          if (!newModalDialog.HasValue || !newModalDialog.Value)
            return;
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_Client_ScanSettings_Update_Message);
        }));
      }
    }

    public ICommand ImportRadioMetersCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          if (!(this.SelectedItem.NodeType.Name == "Radio"))
            return;
          Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
          OpenFileDialog openFileDialog = new OpenFileDialog()
          {
            Filter = "CSV Document|*.csv|XML Document|*.xml|Xcel Document|*.xlsx",
            Title = Resources.MSS_Client_ImportStructureFromFile,
            RestoreDirectory = true
          };
          bool? nullable = openFileDialog.ShowDialog();
          if (nullable.HasValue && nullable.Value)
          {
            this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
            if (openFileDialog.FileName == string.Empty)
              return;
            this.ImportRadioMeters(openFileDialog.FileName);
            this.UpdateDevicesFoundLabel();
          }
          else
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
        }));
      }
    }

    public ICommand ImportDeliveryNoteCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ => this.ImportDeliveryNote(this.StructureForSelectedNode)));
      }
    }

    public ICommand StartScanCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this.MBusSelectedItem = this.SelectedItem;
          this._scannerMinoConnectManager = new ScanMinoConnectManager(this._repositoryFactory, this.StructureEquipmentSettings, this._deviceManager);
          this._scannerMinoConnectManager.OnProgressChanged += new EventHandler<int>(this.ScannerMinoConnectManagerOnProgressChanged);
          this._scannerMinoConnectManager.OnProgressMessage += new EventHandler<string>(this.ScannerMinoConnectManagerOnProgressMessage);
          this._scannerMinoConnectManager.OnMeterFound += new EventHandler<ZENNER.CommonLibrary.Entities.Meter>(this.ScannerMinoConnectManagerOnMeterFound);
          this._systemName = this.StructureEquipmentSettings.SystemName;
          bool flag = this._scannerMinoConnectManager.StartScan();
          ScanMinoConnectManager.IsScanningStarted = true;
          this.IsStartMBusScanButtonEnabled = false;
          if (flag)
            return;
          this._scannerMinoConnectManager.StopScan();
          ScanMinoConnectManager.IsScanningStarted = false;
          this.IsStartMBusScanButtonEnabled = true;
          MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_ScanSettingsNotSet, false);
        }));
      }
    }

    public ICommand StopScanCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._scannerMinoConnectManager.StopScan();
          ScanMinoConnectManager.IsScanningStarted = false;
          this.IsStartMBusScanButtonEnabled = true;
          this.UpdateDevicesFoundLabel();
        }));
      }
    }

    public ICommand PhotosCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (async _ =>
        {
          this.IsBusy = true;
          await Task.Delay(100);
          int num = await Task.Run((Action) (() =>
          {
            if (this.SelectedItem.Id == Guid.Empty)
            {
              Application.Current.Dispatcher.Invoke<bool?>((Func<bool?>) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Order_Warning_Title, Resources.MSS_Client_Photos_MeterMustBeSavedFirst, false)));
            }
            else
            {
              if (this.SelectedItem.AssignedPicture == null)
                this.SelectedItem.AssignedPicture = this._repositoryFactory.GetRepository<PhotoMeter>().SearchFor((Expression<Func<PhotoMeter, bool>>) (p => p.StructureNode.Id == this.SelectedItem.Id)).Select<PhotoMeter, byte[]>((Func<PhotoMeter, byte[]>) (p => p.Payload)).ToList<byte[]>();
              Application.Current.Dispatcher.InvokeAsync<bool?>((Func<bool?>) (() => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<MeterPhotosViewModel>((IParameter) new ConstructorArgument("windowFactory", (object) this._windowFactory), (IParameter) new ConstructorArgument("selectedStructureNode", (object) this.SelectedItem)))));
            }
          })).ContinueWith<bool>((Func<Task, bool>) (v => this.IsBusy = false), System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext()) ? 1 : 0;
        }));
      }
    }

    public ICommand NotesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (async _ =>
        {
          this.IsBusy = true;
          await Task.Delay(100);
          await Task.Run((Action) (() =>
          {
            if (this.SelectedItem.AssignedNotes == null)
              this.SelectedItem.AssignedNotes = this._repositoryFactory.GetRepository<Note>().SearchFor((Expression<Func<Note, bool>>) (n => n.StructureNode.Id == this.SelectedItem.Id)).ToList<Note>();
            Application.Current.Dispatcher.InvokeAsync<bool?>((Func<bool?>) (() => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<MeterNotesViewModel>((IParameter) new ConstructorArgument("windowFactory", (object) this._windowFactory), (IParameter) new ConstructorArgument("selectedStructureNode", (object) this.SelectedItem), (IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory)))));
          }));
          this.IsBusy = false;
        }));
      }
    }

    private void ScannerMinoConnectManagerOnMeterFound(object sender, ZENNER.CommonLibrary.Entities.Meter e)
    {
      Application.Current.Dispatcher.Invoke((Action) (() =>
      {
        try
        {
          this.AddDevicesToPhysicalStructure(e, this._systemName);
          this.GetMetersInStructure(this._selectedNode, out this._metersInStructure);
          this.DevicesFoundLabel = Resources.MSS_DevicesFound + " " + (object) this._metersInStructure;
        }
        catch (Exception ex)
        {
          MSS.Business.Errors.MessageHandler.LogException(ex);
          throw;
        }
      }));
    }

    private void ScannerMinoConnectManagerOnProgressMessage(object sender, string e)
    {
      this.ProgressDialogMessage = e;
    }

    private void ScannerMinoConnectManagerOnProgressChanged(object sender, int e)
    {
      this.ProgressBarValue = e;
      if (e != 100 || string.IsNullOrEmpty(this._scannerMinoConnectManager.SystemName) || !(this._scannerMinoConnectManager.SystemName == "M-Bus"))
        return;
      this._scannerMinoConnectManager.StopScan();
      ScanMinoConnectManager.IsScanningStarted = false;
      this.IsStartMBusScanButtonEnabled = true;
      this.UpdateDevicesFoundLabel();
    }

    private void SetParentAndRootNode(StructureNodeDTO selectedItem)
    {
      if (selectedItem.ParentNode != null || selectedItem.RootNode != null || this._parentForSelectedNode == null)
        return;
      StructureNodeDTO structureNodeDto = this._parentForSelectedNode.RootNode != this._parentForSelectedNode ? this._parentForSelectedNode.RootNode : this._parentForSelectedNode;
      selectedItem.ParentNode = this._parentForSelectedNode;
      selectedItem.RootNode = structureNodeDto;
    }

    private void GetAffectedStructureNodesToDelete(StructureNodeDTO selectedNode)
    {
      List<StructureNodeLinks> structureNodeLinks;
      List<StructureNodeLinks> logicalStructureNodeLinks;
      List<StructureNode> structureNodes;
      this.GetStructuresManagerInstance().GetAffectedPhysicalStructureNodes(selectedNode, StructureTypeEnum.Physical, out structureNodeLinks, out logicalStructureNodeLinks, out structureNodes);
      structureNodeLinks.ForEach(new Action<StructureNodeLinks>(this._physicalStructureNodeLinksToDelete.Add));
      logicalStructureNodeLinks.ForEach(new Action<StructureNodeLinks>(this._logicalStructureNodeLinksToDelete.Add));
      structureNodes.ForEach(new Action<StructureNode>(this._structureNodesToDelete.Add));
    }

    public override ObservableCollection<StructureNodeDTO> GetStructureCollection()
    {
      return this._nodesCollection;
    }

    protected override void UpdateDevicesFoundLabel()
    {
      this.GetMetersInStructure(this._selectedNode, out this._metersInStructure);
      this.DevicesFoundLabel = Resources.MSS_DevicesFound + " " + (object) this._metersInStructure;
    }

    private void InitStructureForSelectedNode()
    {
      StructureImageHelper.SetImageIconPath(this._nodesCollection);
      this.LoadPhotosAndNotes(this._nodesCollection);
    }

    public void OnTreeChange(TreeDragDropChange obj) => this.UpdateDevicesFoundLabel();

    private void LoadPhotosAndNotes(
      ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      foreach (StructureNodeDTO node in (Collection<StructureNodeDTO>) nodeCollection)
      {
        this.LoadPhotosAndNotesForNode(node);
        this.WalkSubnodesAndLoadPhotosAndNotes(node);
      }
    }

    private void WalkSubnodesAndLoadPhotosAndNotes(StructureNodeDTO node)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
      {
        this.LoadPhotosAndNotesForNode(subNode);
        this.WalkSubnodesAndLoadPhotosAndNotes(subNode);
      }
    }

    private void LoadPhotosAndNotesForNode(StructureNodeDTO node)
    {
      node.AssignedPicture = (List<byte[]>) null;
      node.AssignedNotes = new List<Note>();
      if (!(node.Id != Guid.Empty) || !(node.NodeType.Name == "Meter") && !(node.NodeType.Name == "RadioMeter"))
        return;
      node.AssignedPicture = this._photoMeterRepository.SearchFor((Expression<Func<PhotoMeter, bool>>) (item => item.StructureNode.Id == node.Id)).ToList<PhotoMeter>().Select<PhotoMeter, byte[]>((Func<PhotoMeter, byte[]>) (x => x.Payload)).ToList<byte[]>();
      node.AssignedNotes = this._noteRepository.SearchFor((Expression<Func<Note, bool>>) (item => item.StructureNode.Id == node.Id)).ToList<Note>();
      StructureNodeDTO structureNodeDto1 = node;
      StructureNodeDTO structureNodeDto2 = node;
      int num1;
      if (structureNodeDto2 == null)
      {
        num1 = 0;
      }
      else
      {
        int? count = structureNodeDto2.AssignedPicture?.Count;
        int num2 = 0;
        num1 = count.GetValueOrDefault() > num2 ? (count.HasValue ? 1 : 0) : 0;
      }
      List<byte[]> assignedPicture = num1 != 0 ? node.AssignedPicture : (List<byte[]>) null;
      structureNodeDto1.AssignedPicture = assignedPicture;
    }

    private void UpdateTreeWithMeterNotes(MeterNotesUpdated update)
    {
      if (update.UpdatedNode == null)
        return;
      StructureNodeDTO structureNodeDto = update.UpdatedNode.NodeType.Name == "Meter" || update.UpdatedNode.NodeType.Name == "RadioMeter" ? update.UpdatedNode : this.GetMeterById(this._nodesCollection.First<StructureNodeDTO>(), update.UpdatedNode.Id);
      if (structureNodeDto != null)
      {
        structureNodeDto.AssignedNotes = update.NewNotesList;
        this.OnPropertyChanged("StructureForSelectedNode");
      }
    }

    private void UpdateTreeWithMeterPhotos(MeterPhotosUpdated update)
    {
      if (update.UpdatedNode == null)
        return;
      StructureNodeDTO meterById = this.GetMeterById(this._nodesCollection.First<StructureNodeDTO>(), update.UpdatedNode.Id);
      if (meterById != null)
      {
        meterById.AssignedPicture = update.NewPhotos;
        this.OnPropertyChanged("StructureForSelectedNode");
      }
    }

    private StructureNodeDTO GetMeterById(StructureNodeDTO root, Guid idToFind)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) root.SubNodes)
      {
        if (subNode.Id != Guid.Empty && subNode.Id == idToFind)
          return subNode;
        this.GetMeterById(subNode, idToFind);
      }
      return (StructureNodeDTO) null;
    }

    private void GetMeterNodesAndStructureNodes(
      StructureNodeDTO rootNode,
      ref List<StructureNodeDTO> structureNodesForMeters,
      ref List<StructureNodeDTO> structureNodes)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) rootNode.SubNodes)
      {
        if (subNode.NodeType.Name == "Meter" && subNode.Entity is MeterDTO entity && entity.Id != Guid.Empty)
          structureNodesForMeters.Add(subNode);
        structureNodes.Add(subNode);
        this.GetMeterNodesAndStructureNodes(subNode, ref structureNodesForMeters, ref structureNodes);
      }
    }
  }
}


--- SetEvaluationFactorViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.SetEvaluationFactorViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.StructuresManagement;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Reporting;
using MSS.DTO.Meters;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MVVM.Commands;
using MVVM.ViewModel;
using NHibernate;
using NHibernate.Linq;
using Ninject;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class SetEvaluationFactorViewModel : ViewModelBase
  {
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly IWindowFactory _windowFactory;
    private readonly StructureNodeDTO _selectedNode;
    private IRepository<Heaters> _heatersRepository;
    private IRepository<Meter> _meterRepository;
    private ISession _nhSession;
    private ObservableCollection<StructureNodeDTO> _nodesCollection = new ObservableCollection<StructureNodeDTO>();
    private Heaters _selectedHeater;

    [Inject]
    public SetEvaluationFactorViewModel(
      StructureNodeDTO selectedNode,
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
    {
      this._selectedNode = StructuresHelper.UnreferencedStructureNode(selectedNode);
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this.InitializeRepositories();
      this.NodesCollection.Add(StructuresHelper.GetStructureByDeviceType(this._selectedNode, (IEnumerable<DeviceTypeEnum>) new List<DeviceTypeEnum>()
      {
        DeviceTypeEnum.M7,
        DeviceTypeEnum.M6
      }));
    }

    private void InitializeRepositories()
    {
      this._nhSession = this._repositoryFactory.GetSession();
      this._heatersRepository = this._repositoryFactory.GetRepository<Heaters>();
      this._meterRepository = this._repositoryFactory.GetRepository<Meter>();
    }

    protected StructuresManager GetStructuresManagerInstance()
    {
      return new StructuresManager(this._repositoryFactory);
    }

    public ObservableCollection<StructureNodeDTO> NodesCollection
    {
      get
      {
        StructureImageHelper.SetImageIconPath(this._nodesCollection);
        return this._nodesCollection;
      }
      set
      {
        this._nodesCollection = value;
        this.OnPropertyChanged(nameof (NodesCollection));
      }
    }

    public List<Heaters> HeatersCollection => this._heatersRepository.GetAll().ToList<Heaters>();

    public Heaters SelectedHeater
    {
      get => this._selectedHeater;
      set
      {
        this._selectedHeater = value;
        this.OnPropertyChanged(nameof (SelectedHeater));
      }
    }

    public ICommand SetEvaluationFactorCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          ObservableCollection<object> observableCollection = parameter as ObservableCollection<object>;
          Heaters selectedHeater = this.SelectedHeater;
          if (observableCollection == null)
            MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_SelectAtLeatADevice, false);
          bool flag = false;
          foreach (object obj in (Collection<object>) observableCollection)
          {
            if (obj is StructureNodeDTO structureNodeDto2 && structureNodeDto2.Entity is MeterDTO)
              flag = true;
          }
          if (!flag)
            MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_SelectAtLeatADevice, false);
          if (selectedHeater == null)
            MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_SelectHeater, false);
          if (!(observableCollection != null & flag) || selectedHeater == null)
            return;
          List<StructureNodeDTO> metersStructureNodes = StructuresHelper.GetMeters(this.NodesCollection);
          bool isNotADeviceMessage = true;
          TypeHelperExtensionMethods.ForEach<object>((IEnumerable<object>) observableCollection, (Action<object>) (structureNode =>
          {
            StructureNodeDTO structureNodeDto = (StructureNodeDTO) structureNode;
            if (structureNodeDto == null)
              return;
            if (structureNodeDto.Entity is MeterDTO entity2)
            {
              if (metersStructureNodes.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (x => x.Id == structureNodeDto.Id)) != null)
                entity2.EvaluationFactor = new double?(this.SelectedHeater.EvaluationFactor);
            }
            else if (isNotADeviceMessage)
            {
              MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Warning.GetStringValue(), Resources.Warning_NotADevice, false);
              isNotADeviceMessage = false;
            }
          }));
        }));
      }
    }

    public ICommand SaveEvaluationFactorCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructuresHelper.GetMeters(this.NodesCollection).ForEach((Action<StructureNodeDTO>) (snDto =>
          {
            MeterDTO entity = (MeterDTO) snDto.Entity;
            Meter byId = this._repositoryFactory.GetRepository<Meter>().GetById((object) entity.Id);
            byId.EvaluationFactor = new double?(Convert.ToDouble((object) entity.EvaluationFactor));
            this._repositoryFactory.GetRepository<Meter>().Update(byId);
          }));
          EventPublisher.Publish<RefreshFixedStructuresEvent>(new RefreshFixedStructuresEvent(), (IViewModel) this);
          this.OnRequestClose(true);
        }));
      }
    }

    public override ICommand CancelWindowCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          EventPublisher.Publish<RefreshFixedStructuresEvent>(new RefreshFixedStructuresEvent(), (IViewModel) this);
          this.OnRequestClose(false);
        }));
      }
    }
  }
}


--- StructuresViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.StructuresViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using GMMToMSSMigrator;
using Microsoft.Win32;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.LicenseManagement;
using MSS.Business.Modules.Reporting;
using MSS.Business.Modules.StructuresManagement;
using MSS.Business.Modules.UsersManagement;
using MSS.Business.Utils;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Reporting;
using MSS.Core.Model.Structures;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.GenericProgressDialog;
using MSS_Client.ViewModel.Meters;
using MSS_Client.ViewModel.RadioTest;
using MVVM.Commands;
using NHibernate.Linq;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Soap;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Threading;
using Telerik.Windows.Controls;
using ZR_ClassLibrary;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class StructuresViewModel : MVVM.ViewModel.ViewModelBase
  {
    private readonly IRepository<Location> _locationRepository;
    private readonly IRepository<Tenant> _tenantRepository;
    private readonly IRepository<MSS.Core.Model.Meters.Meter> _meterRepository;
    private readonly IRepository<Minomat> _minomatRepository;
    private readonly IRepository<MeterReadingValue> _meterReadingValueRepository;
    private readonly IRepository<StructureNode> _structureNodeRepository;
    private readonly IRepository<StructureNodeLinks> _structureNodeLinksRepository;
    private readonly IRepositoryFactory _repositoryFactory;
    private readonly IWindowFactory _windowFactory;
    private bool _canViewMeter;
    private int _selectedIndex;
    private ApplicationTabsEnum _selectedTab;
    private bool _isExpanded = false;
    private bool _logicalIsExpanded = false;
    private bool _fixedIsExpanded = false;
    private bool _structureVisibility;
    private MVVM.ViewModel.ViewModelBase _messageUserControlPhysical;
    private MVVM.ViewModel.ViewModelBase _messageUserControlLogical;
    private MVVM.ViewModel.ViewModelBase _messageUserControlFixed;
    private string _pageSize = string.Empty;
    private ObservableCollection<StructureNodeDTO> _structureNodeCollection;
    private bool _isBusy;
    private string _folderPath;
    private StructureNodeDTO _selectedItem;
    private bool _isRootItemSelected;
    private bool _isPhysicalTabSelected;
    private ObservableCollection<StructureNodeDTO> _logicalStructureNodeCollection;
    private StructureNodeDTO _selectedLogicalItem;
    private bool _isRootLogicalItemSelected;
    private bool _isLogicalTabSelected;
    private ObservableCollection<StructureNodeDTO> _fixedStructureNodeCollection;
    private StructureNodeDTO _selectedFixedItem;
    private bool _isRootFixedItemSelected;
    private bool _isFixedTabSelected;
    private bool _installationOrderAttachTestVisibility;
    private bool _createPhysicalStructuresVisibility;
    private bool _editPhysicalStructuresVisibility;
    private bool _removePhysicalStructuresVisibility;
    private bool _deletePhysicalStructuresVisibility;
    private bool _importPhysicalStructuresVisibility;
    private bool _exportPhysicalStructuresVisibility;
    private bool _readingValuesVisibility;
    private bool _createLogicalStructuresVisibility;
    private bool _editLogicalStructuresVisibility;
    private bool _removeLogicalStructuresVisibility;
    private bool _deleteLogicalStructuresVisibility;
    private bool _importLogicalStructuresVisibility;
    private bool _exportLogicalStructuresVisibility;
    private bool _createFixedStructuresVisibility;
    private bool _editFixedStructuresVisibility;
    private bool _removeFixedStructuresVisibility;
    private bool _deleteFixedStructuresVisibility;
    private bool _importFixedStructuresVisibility;
    private bool _exportFixedStructuresVisibility;

    [Inject]
    public StructuresViewModel(IRepositoryFactory repositoryFactory, IWindowFactory windowFactory)
    {
      this.IsBusy = true;
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._meterRepository = repositoryFactory.GetRepository<MSS.Core.Model.Meters.Meter>();
      this._locationRepository = repositoryFactory.GetRepository<Location>();
      this._tenantRepository = repositoryFactory.GetRepository<Tenant>();
      this._meterReadingValueRepository = repositoryFactory.GetRepository<MeterReadingValue>();
      this._minomatRepository = repositoryFactory.GetRepository<Minomat>();
      this._structureNodeRepository = repositoryFactory.GetRepository<StructureNode>();
      this._structureNodeLinksRepository = repositoryFactory.GetRepository<StructureNodeLinks>();
      EventPublisher.Register<StructureUpdated>(new Action<StructureUpdated>(this.RefreshStructure));
      EventPublisher.Register<ActionSearch<StructureNodeDTO>>(new Action<ActionSearch<StructureNodeDTO>>(this.RefreshStructuresAfterSearch));
      EventPublisher.Register<GridShouldBeUpdated>(new Action<GridShouldBeUpdated>(this.RefreshStructuresAfterSync));
      EventPublisher.Register<RefreshFixedStructuresEvent>(new Action<RefreshFixedStructuresEvent>(this.RefreshStructureAfterSettingEvFactor));
      EventPublisher.Register<MSS.Business.Events.ShowMessage>(new Action<MSS.Business.Events.ShowMessage>(this.ShowCancelMessage));
      this.IsRemoveVisible = false;
      UsersManager usersManager = new UsersManager(this._repositoryFactory);
      this.CreatePhysicalStructuresVisibility = usersManager.HasRight(OperationEnum.PhysicalStructureCreate.ToString());
      this.EditPhysicalStructuresVisibility = usersManager.HasRight(OperationEnum.PhysicalStructureEdit.ToString());
      this.DeletePhysicalStructuresVisibility = usersManager.HasRight(OperationEnum.PhysicalStructureDelete.ToString());
      this.RemovePhysicalStructuresVisibility = usersManager.HasRight(OperationEnum.PhysicalStructureRemove.ToString());
      this.ImportPhysicalStructuresVisibility = usersManager.HasRight(OperationEnum.PhysicalStructureImport.ToString());
      this.ExportPhysicalStructuresVisibility = usersManager.HasRight(OperationEnum.PhysicalStructureExport.ToString());
      this.CreateLogicalStructuresVisibility = usersManager.HasRight(OperationEnum.LogicalStructureCreate.ToString());
      this.EditLogicalStructuresVisibility = usersManager.HasRight(OperationEnum.LogicalStructureEdit.ToString());
      this.DeleteLogicalStructuresVisibility = usersManager.HasRight(OperationEnum.LogicalStructureDelete.ToString());
      this.RemoveLogicalStructuresVisibility = usersManager.HasRight(OperationEnum.LogicalStructureRemove.ToString());
      this.ImportLogicalStructuresVisibility = usersManager.HasRight(OperationEnum.LogicalStructureImport.ToString());
      this.ExportLogicalStructuresVisibility = usersManager.HasRight(OperationEnum.LogicalStructureExport.ToString());
      this.CreateFixedStructuresVisibility = usersManager.HasRight(OperationEnum.FixedStructureCreate.ToString());
      this.EditFixedStructuresVisibility = usersManager.HasRight(OperationEnum.FixedStructureEdit.ToString());
      this.DeleteFixedStructuresVisibility = usersManager.HasRight(OperationEnum.FixedStructureDelete.ToString());
      this.RemoveFixedStructuresVisibility = usersManager.HasRight(OperationEnum.FixedStructureRemove.ToString());
      this.ImportFixedStructuresVisibility = usersManager.HasRight(OperationEnum.FixedStructureImport.ToString());
      this.ExportFixedStructuresVisibility = usersManager.HasRight(OperationEnum.FixedStructureExport.ToString());
      this.ExportFixedStructureDevicesVisibility = usersManager.HasRight(OperationEnum.FixedStructureExport.ToString());
      this.InstallationOrderAttachTestVisibility = usersManager.HasRight(OperationEnum.InstallationOrderAttachTest.ToString());
      this.UnlockStructureVisibility = usersManager.HasRight(OperationEnum.UnlockStructure.ToString());
      this.ReadingValuesVisibility = usersManager.HasRight(OperationEnum.ReadingDataView.ToString());
      this.IsPhysicalTabVisible = usersManager.HasRight(OperationEnum.PhysicalStructureView.ToString());
      this.IsLogicalTabVisible = usersManager.HasRight(OperationEnum.LogicalStructureView.ToString());
      this.IsFixedTabVisible = usersManager.HasRight(OperationEnum.FixedStructureView.ToString());
      this.EvaluationFactorVisibility = LicenseHelper.LicenseIsDisplayEvaluationFactor();
      this.PageSize = MSS.Business.Utils.AppContext.Current.GetParameterValue<string>(nameof (PageSize));
      this._canViewMeter = usersManager.HasRight(OperationEnum.MeterView.ToString());
      if (this.IsPhysicalTabVisible)
        this.SelectedIndex = 0;
      else if (this.IsLogicalTabVisible)
        this.SelectedIndex = 1;
      else if (this.IsFixedTabVisible)
        this.SelectedIndex = 2;
      this.InitializeStructures();
      EventPublisher.Register<ActionSyncFinished>(new Action<ActionSyncFinished>(this.CreateMessage));
      EventPublisher.Register<SelectedTabChanged>((Action<SelectedTabChanged>) (changed => this.SelectedTab = changed.SelectedTab));
      EventPublisher.Register<SelectedTabValue>(new Action<SelectedTabValue>(this.SetTab));
      EventPublisher.Register<AttachTestConfigMessage>(new Action<AttachTestConfigMessage>(this.CreateMessage));
      EventPublisher.Register<LoadSubNodesForRoot>(new Action<LoadSubNodesForRoot>(this.LoadSubNodesForRootNodeEvent));
    }

    private void LoadSubNodesForRootNodeEvent(LoadSubNodesForRoot rootNodeEv)
    {
      this.IsBusy = true;
      BackgroundWorker backgroundWorker = new BackgroundWorker()
      {
        WorkerReportsProgress = true,
        WorkerSupportsCancellation = true
      };
      backgroundWorker.DoWork += (DoWorkEventHandler) ((sender, args) =>
      {
        StructureNodeDTO rootNode = rootNodeEv.RootNode;
        List<object> objectList = args.Argument as List<object>;
        this.LoadSubNodesForRootNode(objectList[0].As<IRepositoryFactory>(), objectList[1].As<IList<MSS.Core.Model.Structures.StructureNodeType>>(), objectList[2].As<IList<MeterReplacementHistory>>(), rootNode);
      });
      backgroundWorker.RunWorkerCompleted += (RunWorkerCompletedEventHandler) ((sender, args) =>
      {
        rootNodeEv.RootNode.SubNodes = new ObservableCollection<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) rootNodeEv.RootNode.SubNodes.OrderBy<StructureNodeDTO, int>((Func<StructureNodeDTO, int>) (structure => !(structure.Entity is TenantDTO entity2) ? structure.OrderNr : entity2.TenantNr)));
        if (!args.Cancelled && args.Error != null)
        {
          MSS.Business.Errors.MessageHandler.LogException(args.Error);
          MessageHandlingManager.ShowExceptionMessageDialog(MSSHelper.GetErrorMessage(args.Error), this._windowFactory);
        }
        Dispatcher.CurrentDispatcher.Invoke((Action) (() => this.IsBusy = false));
      });
      List<object> objectList1 = new List<object>()
      {
        (object) this._repositoryFactory,
        (object) this._repositoryFactory.GetRepository<MSS.Core.Model.Structures.StructureNodeType>().GetAll(),
        (object) this._repositoryFactory.GetRepository<MeterReplacementHistory>().GetAll()
      };
      backgroundWorker.RunWorkerAsync((object) objectList1);
    }

    public void LoadSubNodesForRootNode(
      IRepositoryFactory repositoryFactory,
      IList<MSS.Core.Model.Structures.StructureNodeType> structureNodeTypeList,
      IList<MeterReplacementHistory> meterReplacementHistoryList,
      StructureNodeDTO rootNode,
      bool canViewMeters = true)
    {
      StructureTypeEnum? structureType = rootNode.StructureType;
      ObservableCollection<StructureNodeDTO> collectionWithChildren = this.GetStructuresManagerInstance().GetNodeCollectionWithChildren(repositoryFactory.GetStructureNodeRepository(), structureType, structureNodeTypeList, meterReplacementHistoryList, rootNode.Id);
      if (rootNode.NodeType.Name == "Location")
      {
        Guid? entityId = repositoryFactory.GetRepository<StructureNode>().FirstOrDefault((Expression<Func<StructureNode, bool>>) (item => item.Id == rootNode.Id && item.EndDate == new DateTime?()))?.EntityId;
        if (entityId.HasValue)
        {
          object entity = (object) StructuresHelper.GetEntity<Location>(entityId.Value, repositoryFactory.GetSession());
          rootNode.Entity = StructuresHelper.GetEntityDTO(StructureNodeTypeEnum.Location, entity);
        }
      }
      if (collectionWithChildren.Count <= 0)
        return;
      TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) collectionWithChildren.First<StructureNodeDTO>().SubNodes, (Action<StructureNodeDTO>) (subnode =>
      {
        if (!(subnode.NodeType.Name == "Meter") && !(subnode.NodeType.Name == "RadioMeter"))
          return;
        Guid? entityId = this._repositoryFactory.GetRepository<StructureNode>().FirstOrDefault((Expression<Func<StructureNode, bool>>) (item => item.Id == subnode.Id && item.EndDate == new DateTime?()))?.EntityId;
        if (entityId.HasValue)
        {
          object entity = (object) StructuresHelper.GetEntity<MSS.Core.Model.Meters.Meter>(entityId.Value, this._repositoryFactory.GetSession());
          subnode.Entity = StructuresHelper.GetEntityDTO(subnode.NodeType.Name == "Meter" ? StructureNodeTypeEnum.Meter : StructureNodeTypeEnum.RadioMeter, entity);
        }
      }));
      rootNode.SubNodes = collectionWithChildren.First<StructureNodeDTO>().SubNodes;
    }

    public void LoadSubNodesForRootNode(StructureNodeDTO rootNode, bool canViewMeters = true)
    {
      this.LoadSubNodesForRootNode(this._repositoryFactory, this._repositoryFactory.GetRepository<MSS.Core.Model.Structures.StructureNodeType>().GetAll(), this._repositoryFactory.GetRepository<MeterReplacementHistory>().GetAll(), rootNode, canViewMeters);
    }

    private void RefreshStructureAfterSettingEvFactor(RefreshFixedStructuresEvent ev)
    {
      this._repositoryFactory.GetSession().Clear();
      this.FixedStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed, true);
    }

    public object SoapToFromFile(string filePath)
    {
      FileStream serializationStream = (FileStream) null;
      object fromFile;
      try
      {
        serializationStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
        fromFile = new SoapFormatter()
        {
          Binder = ((SerializationBinder) new CustomSerializationBinder())
        }.Deserialize((Stream) serializationStream);
      }
      catch (Exception ex)
      {
        throw new BaseApplicationException(Resources.MSS_SAS_IMPORT_ERROR_XmlFileFormat, ex);
      }
      finally
      {
        serializationStream?.Close();
      }
      return fromFile;
    }

    private void CreateMessage(AttachTestConfigMessage messageFinished)
    {
      MVVM.ViewModel.ViewModelBase viewModelBase = (MVVM.ViewModel.ViewModelBase) null;
      switch (messageFinished.Message.MessageType)
      {
        case MessageTypeEnum.Success:
          viewModelBase = MessageHandlingManager.ShowSuccessMessage(messageFinished.Message.MessageText);
          break;
        case MessageTypeEnum.Warning:
          viewModelBase = MessageHandlingManager.ShowWarningMessage(messageFinished.Message.MessageText);
          break;
      }
      if (this.IsFixedTabSelected)
        this.MessageUserControlFixed = viewModelBase;
      if (this.IsLogicalTabSelected)
        this.MessageUserControlLogical = viewModelBase;
      if (!this.IsPhysicalTabSelected)
        return;
      this.MessageUserControlPhysical = viewModelBase;
    }

    private void SetTab(SelectedTabValue selectedTabValue)
    {
      switch (selectedTabValue.Tab)
      {
        case ApplicationTabsEnum.StructuresPhysical:
          this.SelectedIndex = 0;
          break;
        case ApplicationTabsEnum.StructuresLogical:
          this.SelectedIndex = 1;
          break;
        case ApplicationTabsEnum.StructuresFixed:
          this.SelectedIndex = 2;
          break;
      }
    }

    private void CreateMessage(ActionSyncFinished messageFinished)
    {
      MVVM.ViewModel.ViewModelBase viewModelBase = (MVVM.ViewModel.ViewModelBase) null;
      switch (messageFinished.Message.MessageType)
      {
        case MessageTypeEnum.Success:
          viewModelBase = MessageHandlingManager.ShowSuccessMessage(messageFinished.Message.MessageText);
          break;
        case MessageTypeEnum.Warning:
          viewModelBase = MessageHandlingManager.ShowWarningMessage(messageFinished.Message.MessageText);
          break;
      }
      if (this.IsFixedTabSelected)
        this.MessageUserControlFixed = viewModelBase;
      if (this.IsLogicalTabSelected)
        this.MessageUserControlLogical = viewModelBase;
      if (!this.IsPhysicalTabSelected)
        return;
      this.MessageUserControlPhysical = viewModelBase;
    }

    private void RefreshStructuresAfterSearch(ActionSearch<StructureNodeDTO> update)
    {
      bool flag = update.Message == null;
      switch (update.SelectedTab)
      {
        case ApplicationTabsEnum.StructuresPhysical:
          this.StructureNodeCollection = update.ObservableCollection.Count == 0 ? this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical) : update.ObservableCollection;
          this.StructureExpanded = flag;
          break;
        case ApplicationTabsEnum.StructuresLogical:
          this.LogicalStructureNodeCollection = update.ObservableCollection.Count == 0 ? this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical) : update.ObservableCollection;
          this.LogicalStructureExpanded = flag;
          break;
        case ApplicationTabsEnum.StructuresFixed:
          this.FixedStructureNodeCollection = update.ObservableCollection.Count == 0 ? this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed, true) : update.ObservableCollection;
          this.FixedStructureExpanded = flag;
          break;
      }
      if (flag)
        return;
      if (this.IsFixedTabSelected)
        this.MessageUserControlFixed = MessageHandlingManager.ShowWarningMessage(update.Message.MessageText);
      if (this.IsLogicalTabSelected)
        this.MessageUserControlLogical = MessageHandlingManager.ShowWarningMessage(update.Message.MessageText);
      if (!this.IsPhysicalTabSelected)
        return;
      this.MessageUserControlPhysical = MessageHandlingManager.ShowWarningMessage(update.Message.MessageText);
    }

    private void RefreshStructuresAfterSync(GridShouldBeUpdated args)
    {
      this._repositoryFactory.GetSession().Clear();
      this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
    }

    private void RefreshStructure(StructureUpdated update)
    {
      if (update.Guid != Guid.Empty)
      {
        this._structureNodeRepository.Refresh((object) update.Guid);
        this._structureNodeLinksRepository.Refresh((object) update.LinkGuid);
      }
      else
      {
        this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
        this.LogicalStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical);
        this.FixedStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed);
      }
      if (update.EntityId != Guid.Empty)
      {
        switch (update.EntityType)
        {
          case StructureNodeTypeEnum.Location:
            this._locationRepository.Refresh((object) update.EntityId);
            break;
          case StructureNodeTypeEnum.Tenant:
            this._tenantRepository.Refresh((object) update.EntityId);
            break;
          case StructureNodeTypeEnum.Meter:
          case StructureNodeTypeEnum.RadioMeter:
            this._meterRepository.Refresh((object) update.EntityId);
            break;
          case StructureNodeTypeEnum.MinomatMaster:
          case StructureNodeTypeEnum.MinomatSlave:
            this._minomatRepository.Refresh((object) update.EntityId);
            break;
        }
      }
      update.RootNode?.LoadChildren();
      this.ShowActionMessage(update.Message);
    }

    private void ShowCancelMessage(MSS.Business.Events.ShowMessage message)
    {
      this.ShowActionMessage(message.Message);
    }

    private void ShowActionMessage(MSS.DTO.Message.Message message)
    {
      MVVM.ViewModel.ViewModelBase viewModelBase = (MVVM.ViewModel.ViewModelBase) null;
      switch (message.MessageType)
      {
        case MessageTypeEnum.Success:
          viewModelBase = MessageHandlingManager.ShowSuccessMessage(Resources.MSS_MessageCodes_SuccessOperation);
          break;
        case MessageTypeEnum.Warning:
          viewModelBase = MessageHandlingManager.ShowWarningMessage(message.MessageText);
          break;
      }
      if (this.IsFixedTabSelected)
        this.MessageUserControlFixed = viewModelBase;
      if (this.IsLogicalTabSelected)
        this.MessageUserControlLogical = viewModelBase;
      if (!this.IsPhysicalTabSelected)
        return;
      this.MessageUserControlPhysical = viewModelBase;
    }

    private StructuresManager GetStructuresManagerInstance()
    {
      return new StructuresManager(this._repositoryFactory);
    }

    private ReportingManager GetReportingManagerInstance()
    {
      return new ReportingManager(this._repositoryFactory);
    }

    public int SelectedIndex
    {
      get => this._selectedIndex;
      set
      {
        this._selectedIndex = value;
        this.OnPropertyChanged(nameof (SelectedIndex));
      }
    }

    private void SetSelectedTab()
    {
      switch (this.SelectedTab)
      {
        case ApplicationTabsEnum.StructuresPhysical:
          this._isPhysicalTabSelected = true;
          break;
        case ApplicationTabsEnum.StructuresLogical:
          this._isLogicalTabSelected = true;
          break;
        case ApplicationTabsEnum.StructuresFixed:
          this._isFixedTabSelected = true;
          break;
      }
    }

    public ApplicationTabsEnum SelectedTab
    {
      get => this._selectedTab;
      set
      {
        this._selectedTab = value;
        this.SetSelectedTab();
      }
    }

    public bool StructureExpanded
    {
      get => this._isExpanded;
      set
      {
        this._isExpanded = value;
        this.OnPropertyChanged(nameof (StructureExpanded));
      }
    }

    public bool LogicalStructureExpanded
    {
      get => this._logicalIsExpanded;
      set
      {
        this._logicalIsExpanded = value;
        this.OnPropertyChanged(nameof (LogicalStructureExpanded));
      }
    }

    public bool FixedStructureExpanded
    {
      get => this._fixedIsExpanded;
      set
      {
        this._fixedIsExpanded = value;
        this.OnPropertyChanged(nameof (FixedStructureExpanded));
      }
    }

    public bool StructuresVisibility
    {
      get => this._structureVisibility;
      set
      {
        this._structureVisibility = value;
        this.OnPropertyChanged(nameof (StructuresVisibility));
      }
    }

    public MVVM.ViewModel.ViewModelBase MessageUserControlPhysical
    {
      get => this._messageUserControlPhysical;
      set
      {
        this._messageUserControlPhysical = value;
        this.OnPropertyChanged(nameof (MessageUserControlPhysical));
      }
    }

    public MVVM.ViewModel.ViewModelBase MessageUserControlLogical
    {
      get => this._messageUserControlLogical;
      set
      {
        this._messageUserControlLogical = value;
        this.OnPropertyChanged(nameof (MessageUserControlLogical));
      }
    }

    public MVVM.ViewModel.ViewModelBase MessageUserControlFixed
    {
      get => this._messageUserControlFixed;
      set
      {
        this._messageUserControlFixed = value;
        this.OnPropertyChanged(nameof (MessageUserControlFixed));
      }
    }

    public bool UnlockStructureVisibility { get; set; }

    public string PageSize
    {
      get => this._pageSize;
      set
      {
        this._pageSize = value;
        this.OnPropertyChanged(nameof (PageSize));
      }
    }

    public ObservableCollection<StructureNodeDTO> StructureNodeCollection
    {
      get => this._structureNodeCollection;
      set
      {
        this._structureNodeCollection = value;
        this.OnPropertyChanged(nameof (StructureNodeCollection));
      }
    }

    public bool IsRemoveVisible { get; set; }

    public ICommand RemoveSelectedPhysicalStructureCommandDeleteSelectedPhysicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          IKernel configurator = DIConfigurator.GetConfigurator();
          if (radTreeListView == null)
            return;
          StructureNodeDTO currentItem = (StructureNodeDTO) radTreeListView.CurrentItem;
          ObservableCollection<StructureNodeDTO> observableCollection = new ObservableCollection<StructureNodeDTO>()
          {
            currentItem
          };
          IEnumerable<StructureNodeDTO> logicalStructure = this.GetStructuresManagerInstance().GetAffectedLogicalStructure(currentItem, StructureTypeEnum.Physical);
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) configurator.Get<DeleteStructureViewModel>((IParameter) new ConstructorArgument("structureToDelete", (object) observableCollection), (IParameter) new ConstructorArgument("otherAffectedStructures", (object) logicalStructure)));
          if (newModalDialog.HasValue && newModalDialog.Value)
          {
            this.GetStructuresManagerInstance().RemoveStructure(currentItem, StructureTypeEnum.Physical);
            this.MessageUserControlPhysical = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Remove_Structure.GetStringValue());
          }
          else
            this.MessageUserControlPhysical = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
          this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
          this.LogicalStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical);
        }));
      }
    }

    private void ShowMessage(MVVM.ViewModel.ViewModelBase control)
    {
      if (this.IsFixedTabSelected)
        this.MessageUserControlFixed = control;
      if (this.IsLogicalTabSelected)
        this.MessageUserControlLogical = control;
      if (!this.IsPhysicalTabSelected)
        return;
      this.MessageUserControlPhysical = control;
    }

    public ICommand ImportFromFileCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          try
          {
            MVVM.ViewModel.ViewModelBase viewModelBase = (MVVM.ViewModel.ViewModelBase) null;
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
            DIConfigurator.GetConfigurator();
            OpenFileDialog openFileDialog = new OpenFileDialog()
            {
              Filter = "CSV Document|*.csv|XML Document|*.xml|Xcel Document|*.xlsx",
              Title = Resources.MSS_Client_ImportStructureFromFile,
              RestoreDirectory = true
            };
            bool? nullable = openFileDialog.ShowDialog();
            List<string[]> nodesList = new List<string[]>();
            if (nullable.HasValue && nullable.Value)
              viewModelBase = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
            else
              this.ShowMessage(MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue()));
            if (openFileDialog.FileName == string.Empty)
              return;
            switch (openFileDialog.FilterIndex)
            {
              case 1:
                nodesList = new CSVManager().ReadStructureFromFile(openFileDialog.FileName);
                break;
              case 2:
                nodesList = new XMLManager<StructureNodeDTO>().ReadStructureFromFile(openFileDialog.FileName);
                break;
              case 3:
                nodesList = new XCellManager().ReadStructureFromFile(openFileDialog.FileName);
                break;
            }
            this.ImportNodeList(nodesList);
            this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
            this.LogicalStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical);
            this.FixedStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed, true);
          }
          catch
          {
            this.ShowMessage(MessageHandlingManager.ShowWarningMessage(MessageCodes.Error_Incorrect_Format.GetStringValue()));
          }
        }));
      }
    }

    public ICommand ImportTranslationRulesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (_ =>
        {
          MVVM.ViewModel.ViewModelBase control = (MVVM.ViewModel.ViewModelBase) null;
          Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
          OpenFileDialog openFileDialog = new OpenFileDialog()
          {
            Filter = "Translation Rules (*.xml)|*.xml|All files (*.*)|*.*",
            Title = "Import translation rules",
            RestoreDirectory = true
          };
          bool? nullable = openFileDialog.ShowDialog();
          if (nullable.HasValue && nullable.Value && !string.IsNullOrEmpty(openFileDialog.FileName))
          {
            try
            {
              TranslationRulesManager.ImportRulesIntoDatabase(openFileDialog.FileName);
              control = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
            }
            catch (Exception ex)
            {
              this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_Warning_Title), (IParameter) new ConstructorArgument("message", (object) ex.Message), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) false)));
            }
          }
          else
            control = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
          this.ShowMessage(control);
        }));
      }
    }

    private void ImportNodeList(List<string[]> nodesList)
    {
      if (this.GetReportingManagerInstance().ExistingRootNode(nodesList))
      {
        List<string[]> strArrayList = this.GetReportingManagerInstance().ExistingMeters(nodesList);
        if (strArrayList.Any<string[]>())
        {
          this.SaveImportedStructureWithRootAndExistingMeters(nodesList, strArrayList);
        }
        else
        {
          bool? nullable = MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_IMPORT_STRUCTURE_EXISTS_WARNING, Resources.MSS_IMPORT_STRUCTURE_EXISTS, true);
          if (nullable.HasValue && nullable.Value)
          {
            this.GetReportingManagerInstance().SaveImportedStructure(nodesList);
            this.ShowMessage(MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue()));
          }
          else
            this.ShowMessage(MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue()));
        }
      }
      else
      {
        List<string[]> strArrayList = this.GetReportingManagerInstance().ExistingMeters(nodesList);
        if (strArrayList.Any<string[]>())
          this.SaveImportedStructureWithExistingMeters(nodesList, strArrayList);
        else
          this.GetReportingManagerInstance().SaveImportedStructure(nodesList);
      }
    }

    private List<string> GetExistingSerialNumbers(List<string[]> existingMeterList)
    {
      List<string> existingSerialNumbers = new List<string>();
      foreach (string[] existingMeter in existingMeterList)
      {
        if (existingMeter[0] == typeof (MeterDTO).Name)
          existingSerialNumbers.Add(existingMeter[1]);
      }
      return existingSerialNumbers;
    }

    private void SaveImportedStructureWithRootAndExistingMeters(
      List<string[]> nodesList,
      List<string[]> existingMeters)
    {
      string rootAndMetersExists = Resources.MSS_IMPORT_ROOT_AND_METERS_EXISTS;
      List<string> existingSerialNumbers = this.GetExistingSerialNumbers(existingMeters);
      WarningWithListBoxViewModel listBoxViewModel = DIConfigurator.GetConfigurator().Get<WarningWithListBoxViewModel>((IParameter) new ConstructorArgument("existingItems", (object) existingSerialNumbers), (IParameter) new ConstructorArgument("warningMessage", (object) rootAndMetersExists));
      MVVM.ViewModel.ViewModelBase control = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
      bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) listBoxViewModel);
      if (newModalDialog.HasValue && newModalDialog.Value)
      {
        this.GetReportingManagerInstance().SaveImportedStructure(nodesList);
        this.ShowMessage(control);
      }
      else
        this.ShowMessage(MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue()));
    }

    private void SaveImportedStructureWithExistingMeters(
      List<string[]> nodesList,
      List<string[]> existingMeters)
    {
      string importMetersExists = Resources.MSS_IMPORT_METERS_EXISTS;
      List<string> existingSerialNumbers = this.GetExistingSerialNumbers(existingMeters);
      WarningWithListBoxViewModel listBoxViewModel = DIConfigurator.GetConfigurator().Get<WarningWithListBoxViewModel>((IParameter) new ConstructorArgument("existingItems", (object) existingSerialNumbers), (IParameter) new ConstructorArgument("warningMessage", (object) importMetersExists));
      MVVM.ViewModel.ViewModelBase control = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
      bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) listBoxViewModel);
      if (newModalDialog.HasValue && newModalDialog.Value)
      {
        this.GetReportingManagerInstance().SaveImportedStructure(nodesList);
        this.ShowMessage(control);
      }
      else
      {
        foreach (string[] existingMeter in existingMeters)
          nodesList.Remove(existingMeter);
        this.GetReportingManagerInstance().SaveImportedStructure(nodesList);
        this.ShowMessage(control);
      }
    }

    public ICommand ExportToFileCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          CultureInfo cultureInfo = (CultureInfo) Thread.CurrentThread.CurrentCulture.Clone();
          Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          ReportingManager reportingManager = new ReportingManager(this._repositoryFactory);
          if (radTreeListView == null)
            return;
          List<StructureNodeDTO> list = radTreeListView.SelectedItems.Cast<StructureNodeDTO>().ToList<StructureNodeDTO>();
          SaveFileDialog saveFileDialog = new SaveFileDialog()
          {
            Filter = "CSV Document|*.csv|XML Document|*.xml|Xcel Document|*.xlsx",
            Title = Resources.MSS_Client_SaveStructureToFile
          };
          bool? nullable = saveFileDialog.ShowDialog();
          List<StructureNodeDTO> nodesToBeIgnored = new List<StructureNodeDTO>();
          bool isNotRoot = false;
          list.ForEach((Action<StructureNodeDTO>) (x =>
          {
            StructureNodeDTO rootNode = x;
            this.LoadSubNodesForRootNode(rootNode);
            if (rootNode.RootNode == rootNode)
              return;
            nodesToBeIgnored.Add(rootNode);
            isNotRoot = true;
          }));
          list.RemoveAll(new Predicate<StructureNodeDTO>(nodesToBeIgnored.Contains));
          if (isNotRoot)
            MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_EXPORT_FIXED_STRUCTURE_TITLE, Resources.MSS_EXPORT_FIXED_STRUCTURE_NONROOT_NODES, false);
          List<string[]> nodeList1 = reportingManager.CreateNodeList(list);
          this.ShowMessage(!nullable.HasValue || !nullable.Value ? MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue()) : MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue()));
          if (saveFileDialog.FileName == string.Empty)
            return;
          switch (saveFileDialog.FilterIndex)
          {
            case 1:
              List<string[]> nodeList2 = CSVManager.AddQuatForCSV(nodeList1);
              new CSVManager().WriteToFile(saveFileDialog.FileName, nodeList2);
              break;
            case 2:
              new XMLManager<StructureNodeDTO>().WriteToFile(saveFileDialog.FileName, nodeList1);
              break;
            case 3:
              new XCellManager().WriteToFile(saveFileDialog.FileName, nodeList1);
              break;
          }
          Thread.CurrentThread.CurrentCulture = cultureInfo;
        }));
      }
    }

    public ICommand ExportStructureToFileCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          CultureInfo cultureInfo = (CultureInfo) Thread.CurrentThread.CurrentCulture.Clone();
          Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          ReportingManager reportingManager = new ReportingManager(this._repositoryFactory);
          if (radTreeListView == null)
            return;
          List<StructureNodeDTO> list = radTreeListView.SelectedItems.Cast<StructureNodeDTO>().ToList<StructureNodeDTO>();
          SaveFileDialog saveFileDialog = new SaveFileDialog()
          {
            Filter = "Excel Document|*.xlsx",
            Title = Resources.MSS_Client_SaveStructureToFile
          };
          bool? nullable = saveFileDialog.ShowDialog();
          List<StructureNodeDTO> nodesToBeIgnored = new List<StructureNodeDTO>();
          bool isNotRoot = false;
          list.ForEach((Action<StructureNodeDTO>) (x =>
          {
            StructureNodeDTO rootNode = x;
            this.LoadSubNodesForRootNode(rootNode);
            if (rootNode.RootNode == rootNode)
              return;
            nodesToBeIgnored.Add(rootNode);
            isNotRoot = true;
          }));
          list.RemoveAll(new Predicate<StructureNodeDTO>(nodesToBeIgnored.Contains));
          if (isNotRoot)
            MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_EXPORT_FIXED_STRUCTURE_TITLE, Resources.MSS_EXPORT_FIXED_STRUCTURE_NONROOT_NODES, false);
          List<string[]> deviceList = reportingManager.CreateDeviceList(list);
          this.ShowMessage(!nullable.HasValue || !nullable.Value ? MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue()) : MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue()));
          if (saveFileDialog.FileName == string.Empty)
            return;
          if (saveFileDialog.FilterIndex == 1)
            new XCellManager().WriteToFile(saveFileDialog.FileName, deviceList);
          Thread.CurrentThread.CurrentCulture = cultureInfo;
        }));
      }
    }

    public ICommand ViewReadingValuesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          IKernel configurator = DIConfigurator.GetConfigurator();
          if (radTreeListView == null)
            return;
          StructureNodeDTO currentItem = (StructureNodeDTO) radTreeListView.CurrentItem;
          this.LoadSubNodesForRootNode(currentItem);
          object obj = (object) null;
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) configurator.Get<MeterReadingValuesViewModel>((IParameter) new ConstructorArgument("structureNode", (object) currentItem), (IParameter) new ConstructorArgument("selectedOrder", obj)));
          if (newModalDialog.HasValue && newModalDialog.Value)
            this.ShowMessage(MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue()));
          else
            this.ShowMessage(MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue()));
        }));
      }
    }

    public async void InitializeStructures()
    {
      await Task.Run((Action) (() =>
      {
        StructuresManager structuresManager = new StructuresManager(this._repositoryFactory);
        this.StructureNodeCollection = structuresManager.GetStructureNodesCollection(StructureTypeEnum.Physical, true);
        this.LogicalStructureNodeCollection = structuresManager.GetStructureNodesCollection(StructureTypeEnum.Logical, true);
        this.FixedStructureNodeCollection = structuresManager.GetStructureNodesCollection(StructureTypeEnum.Fixed, true);
        if (!File.Exists(CustomerConfiguration.GetPropertyValue("GMMMigrationDatabasePath")) || this.StructureNodeCollection.Count != 0)
          return;
        this.MigrateDataFromGMM();
      }));
      this.IsBusy = false;
    }

    public bool IsBusy
    {
      get => this._isBusy;
      set
      {
        if (this._isBusy == value)
          return;
        this._isBusy = value;
        this.OnPropertyChanged(nameof (IsBusy));
      }
    }

    public string FolderPath
    {
      get => this._folderPath;
      set
      {
        this._folderPath = value;
        this.OnPropertyChanged(nameof (FolderPath));
      }
    }

    public ICommand ImportFromSasXmlCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (Delegate =>
        {
          OpenFileDialog openFileDialog = new OpenFileDialog()
          {
            Filter = "XML Files (*.xml)|*.xml"
          };
          bool? nullable = openFileDialog.ShowDialog();
          bool flag = true;
          if (nullable.GetValueOrDefault() != flag || !nullable.HasValue)
            return;
          this.FolderPath = openFileDialog.FileName;
          GenericProgressDialogViewModel pd = DIConfigurator.GetConfigurator().Get<GenericProgressDialogViewModel>((IParameter) new ConstructorArgument("progressDialogTitle", (object) Resources.SAS_IMPORT), (IParameter) new ConstructorArgument("progressDialogMessage", (object) Resources.SAS_IMPORT_TEXT));
          BackgroundWorker backgroundWorker = new BackgroundWorker()
          {
            WorkerReportsProgress = true,
            WorkerSupportsCancellation = true
          };
          backgroundWorker.DoWork += (DoWorkEventHandler) ((sender, args) =>
          {
            Mapper.CreateMap<ClassBwF, Heaters>();
            foreach (DictionaryEntry dictionaryEntry in (Hashtable) this.SoapToFromFile(this.FolderPath))
            {
              Heaters heater = Mapper.Map<ClassBwF, Heaters>((ClassBwF) dictionaryEntry.Value);
              if (this._repositoryFactory.GetRepository<Heaters>().SearchFor((Expression<Func<Heaters, bool>>) (x => x.Description == heater.Description && x.GroupName == heater.GroupName && x.Name == heater.Name)).Count == 0)
                this._repositoryFactory.GetRepository<Heaters>().Insert(heater);
              if (this._repositoryFactory.GetRepository<Heaters>().SearchFor((Expression<Func<Heaters, bool>>) (x => x.Description == heater.Description && x.GroupName == heater.GroupName && x.Name == heater.Name)).Count == 1)
              {
                Heaters entity = this._repositoryFactory.GetRepository<Heaters>().FirstOrDefault((Expression<Func<Heaters, bool>>) (x => x.Description == heater.Description && x.GroupName == heater.GroupName && x.Name == heater.Name));
                entity.EvaluationFactor = heater.EvaluationFactor;
                this._repositoryFactory.GetRepository<Heaters>().Update(entity);
              }
            }
          });
          backgroundWorker.RunWorkerCompleted += (RunWorkerCompletedEventHandler) ((sender, args) =>
          {
            pd.OnRequestClose(false);
            if (args.Cancelled)
              this.ShowMessage(MessageHandlingManager.ShowWarningMessage(Resources.MSS_SAS_IMPORT_CANCEL));
            else if (args.Error != null)
            {
              MSS.Business.Errors.MessageHandler.LogException(args.Error);
              if (args.Error.GetType() == typeof (BaseApplicationException))
                MSSUIHelper.ShowWarningDialog(this._windowFactory, MessageCodes.Error_SAS_Import.GetStringValue(), args.Error.Message, true);
              else
                MessageHandlingManager.ShowExceptionMessageDialog(CultureResources.GetValue(Resources.ERR_FAILED_TO_SAS_IMPORT) + Environment.NewLine + "Message:" + args.Error.Message + Environment.NewLine + "Inner Exception:" + (args.Error.InnerException != null ? args.Error.InnerException.Message : string.Empty) + Environment.NewLine + "Stack Trace:" + args.Error.StackTrace, this._windowFactory);
            }
            else
              this.ShowMessage(MessageHandlingManager.ShowSuccessMessage(Resources.MSS_SAS_IMPORT_SUCCEDDED));
          });
          backgroundWorker.RunWorkerAsync();
          this._windowFactory.CreateNewProgressDialog((IViewModel) pd, backgroundWorker);
        }));
      }
    }

    public ICommand SetEvaluationFactorCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          StructureNodeDTO structureNodeDto = parameter as StructureNodeDTO;
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<SetEvaluationFactorViewModel>((IParameter) new ConstructorArgument("selectedNode", (object) structureNodeDto)));
          if (newModalDialog.HasValue && newModalDialog.Value)
            this.MessageUserControlFixed = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
          else
            this.MessageUserControlFixed = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
        }));
      }
    }

    private ObservableCollection<StructureNodeDTO> RemoveNonRootNodes(
      ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      List<StructureNodeDTO> nodesToBeIgnored = new List<StructureNodeDTO>();
      bool isNotRoot = false;
      TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) nodeCollection, (Action<StructureNodeDTO>) (x =>
      {
        StructureNodeDTO structureNodeDto = x;
        if (structureNodeDto.RootNode == structureNodeDto)
          return;
        nodesToBeIgnored.Add(structureNodeDto);
        isNotRoot = true;
      }));
      foreach (StructureNodeDTO structureNodeDto in nodesToBeIgnored)
        nodeCollection.Remove(structureNodeDto);
      if (isNotRoot)
        MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DELETE_FIXED_STRUCTURE_TITLE, Resources.MSS_DELETE_FIXED_STRUCTURE_NONROOT_NODES, false);
      return nodeCollection;
    }

    public ICommand DeleteSelectedPhysicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          IKernel configurator = DIConfigurator.GetConfigurator();
          ObservableCollection<object> observableCollection = (ObservableCollection<object>) parameter;
          ObservableCollection<StructureNodeDTO> physicalStructureAffected = new ObservableCollection<StructureNodeDTO>();
          TypeHelperExtensionMethods.ForEach<object>((IEnumerable<object>) observableCollection, (Action<object>) (x =>
          {
            StructureNodeDTO rootNode = (StructureNodeDTO) x;
            this.LoadSubNodesForRootNode(rootNode);
            physicalStructureAffected.Add(rootNode);
          }));
          physicalStructureAffected = this.RemoveNonRootNodes(physicalStructureAffected);
          if (physicalStructureAffected.Count == 0)
          {
            MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_TITLE, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_EMPTY_LIST, false);
          }
          else
          {
            List<StructureNodeDTO> logicalStructure = new List<StructureNodeDTO>();
            TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) physicalStructureAffected, (Action<StructureNodeDTO>) (selectedNode => logicalStructure.AddRange(this.GetStructuresManagerInstance().GetAffectedLogicalStructure(selectedNode, StructureTypeEnum.Physical))));
            this.ShowDeleteWindow(logicalStructure, configurator, physicalStructureAffected);
          }
        }));
      }
    }

    private void ShowDeleteWindow(
      List<StructureNodeDTO> logicalStructure,
      IKernel diConfig,
      ObservableCollection<StructureNodeDTO> physicalStructureAffected)
    {
      ObservableCollection<StructureNodeDTO> observableCollection = new ObservableCollection<StructureNodeDTO>(logicalStructure);
      bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) diConfig.Get<DeleteStructureViewModel>((IParameter) new ConstructorArgument("structureToDelete", (object) physicalStructureAffected), (IParameter) new ConstructorArgument("otherAffectedStructures", (object) observableCollection)));
      if (newModalDialog.HasValue && newModalDialog.Value)
      {
        TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) physicalStructureAffected, (Action<StructureNodeDTO>) (selectedNode => this.GetStructuresManagerInstance().DeleteStructure(selectedNode, StructureTypeEnum.Physical)));
        this.MessageUserControlPhysical = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Delete_Structure.GetStringValue());
      }
      else
        this.MessageUserControlPhysical = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
      this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
      this.LogicalStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical);
    }

    public ICommand CreatePhysicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreatePhysicalStructureViewModel>());
          this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
          StructureTreeStateHelper.MaintainExpandedState(parameter as RadTreeListView, this._structureNodeCollection);
        }));
      }
    }

    public ICommand EditSelectedPhysicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!this.EditPhysicalStructuresVisibility || !(parameter is RadTreeListView radTreeListView2) || radTreeListView2.CurrentItem == null)
            return;
          StructureNodeDTO selectedNode = (StructureNodeDTO) radTreeListView2.CurrentItem;
          this.IsBusy = true;
          Task<StructureNodeDTO> task = new Task<StructureNodeDTO>((Func<StructureNodeDTO>) (() =>
          {
            if (selectedNode.ParentNode == null)
              this.LoadSubNodesForRootNode(selectedNode);
            return selectedNode;
          }));
          task.ContinueWith((Action<Task<StructureNodeDTO>>) (previousTask =>
          {
            this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditPhysicalStructureViewModel>((IParameter) new ConstructorArgument("selectedNode", (object) selectedNode), (IParameter) new ConstructorArgument("isExecuteInstallation", (object) false), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) false)));
            this.IsBusy = false;
          }), System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
          task.Start();
        }));
      }
    }

    public StructureNodeDTO SelectedItem
    {
      get => this._selectedItem;
      set
      {
        this._selectedItem = value;
        if (this._selectedItem != null)
          this.IsRootItemSelected = this._selectedItem.RootNode == this._selectedItem;
        else
          this.IsRootItemSelected = false;
      }
    }

    public bool IsRootItemSelected
    {
      get => this._isRootItemSelected;
      set
      {
        this._isRootItemSelected = value;
        this.OnPropertyChanged(nameof (IsRootItemSelected));
      }
    }

    public bool IsPhysicalTabSelected
    {
      get => this._isPhysicalTabSelected;
      set
      {
        this._isPhysicalTabSelected = value;
        if (!this._isPhysicalTabSelected)
          return;
        EventPublisher.Publish<SelectedTabChanged>(new SelectedTabChanged()
        {
          SelectedTab = ApplicationTabsEnum.StructuresPhysical
        }, (IViewModel) this);
      }
    }

    public ICommand UnlockPhysicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is StructureNodeDTO structureNodeDto2))
            return;
          this.GetStructuresManagerInstance().UnlockStructure(structureNodeDto2.RootNode.Id);
          this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
        }));
      }
    }

    public ICommand ExpandStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is RadTreeListView tree2))
            return;
          if (this.IsPhysicalTabSelected && this.StructureNodeCollection.Any<StructureNodeDTO>())
            this.ExpandNodesInStructure(this.StructureNodeCollection, tree2);
          else if (this.IsLogicalTabSelected && this.LogicalStructureNodeCollection.Any<StructureNodeDTO>())
            this.ExpandNodesInStructure(this.LogicalStructureNodeCollection, tree2);
          else if (this.IsFixedTabSelected && this.FixedStructureNodeCollection.Any<StructureNodeDTO>())
            this.ExpandNodesInStructure(this.FixedStructureNodeCollection, tree2);
        }));
      }
    }

    private void ExpandNodesInStructure(
      ObservableCollection<StructureNodeDTO> rootNodesCollection,
      RadTreeListView tree)
    {
      List<StructureNodeDTO> structureNodeDtoList = new List<StructureNodeDTO>();
      foreach (StructureNodeDTO rootNodes in (Collection<StructureNodeDTO>) rootNodesCollection)
      {
        if ((rootNodes.SubNodes == null || rootNodes.SubNodes.Count == 0) && rootNodes.Id == rootNodes.RootNode.Id)
          this.LoadSubNodesForRootNode(rootNodes, this._canViewMeter);
        structureNodeDtoList.Add(rootNodes);
      }
      rootNodesCollection.Clear();
      structureNodeDtoList.Reverse();
      foreach (StructureNodeDTO structureNodeDto in structureNodeDtoList)
      {
        rootNodesCollection.Insert(0, structureNodeDto);
        tree.ExpandAllHierarchyItems();
      }
    }

    public ICommand CollapseStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is RadTreeListView))
            return;
          if (this.IsPhysicalTabSelected && this.StructureNodeCollection.Any<StructureNodeDTO>())
            this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
          else if (this.IsLogicalTabSelected && this.LogicalStructureNodeCollection.Any<StructureNodeDTO>())
            this.LogicalStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical);
          else if (this.IsFixedTabSelected && this.FixedStructureNodeCollection.Any<StructureNodeDTO>())
            this.FixedStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed);
        }));
      }
    }

    public ObservableCollection<StructureNodeDTO> LogicalStructureNodeCollection
    {
      get => this._logicalStructureNodeCollection;
      set
      {
        this._logicalStructureNodeCollection = value;
        this.OnPropertyChanged(nameof (LogicalStructureNodeCollection));
      }
    }

    public ICommand RemoveSelectedLogicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          IKernel configurator = DIConfigurator.GetConfigurator();
          if (radTreeListView == null)
            return;
          StructureNodeDTO currentItem = (StructureNodeDTO) radTreeListView.CurrentItem;
          ObservableCollection<StructureNodeDTO> observableCollection1 = new ObservableCollection<StructureNodeDTO>()
          {
            currentItem
          };
          ObservableCollection<StructureNodeDTO> observableCollection2 = new ObservableCollection<StructureNodeDTO>();
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) configurator.Get<DeleteStructureViewModel>((IParameter) new ConstructorArgument("structureToDelete", (object) observableCollection1), (IParameter) new ConstructorArgument("otherAffectedStructures", (object) observableCollection2)));
          if (newModalDialog.HasValue && newModalDialog.Value)
          {
            this.GetStructuresManagerInstance().RemoveStructure(currentItem, StructureTypeEnum.Logical);
            this.MessageUserControlLogical = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Remove_Structure.GetStringValue());
          }
          else
            this.MessageUserControlLogical = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
          this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
          this.LogicalStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical);
        }));
      }
    }

    public ICommand DeleteSelectedLogicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          IKernel configurator = DIConfigurator.GetConfigurator();
          bool flag = false;
          ObservableCollection<object> observableCollection = (ObservableCollection<object>) parameter;
          ObservableCollection<StructureNodeDTO> logicalStructureAffected = new ObservableCollection<StructureNodeDTO>();
          ObservableCollection<StructureNodeDTO> otherAffectedStructures = new ObservableCollection<StructureNodeDTO>();
          TypeHelperExtensionMethods.ForEach<object>((IEnumerable<object>) observableCollection, (Action<object>) (x =>
          {
            StructureNodeDTO rootNode = (StructureNodeDTO) x;
            this.LoadSubNodesForRootNode(rootNode);
            logicalStructureAffected.Add(rootNode);
          }));
          logicalStructureAffected = this.RemoveNonRootNodes(logicalStructureAffected);
          if (logicalStructureAffected.Count == 0)
            MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_TITLE, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_EMPTY_LIST, false);
          else if (flag)
          {
            bool? nullable = MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_TITLE, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_MESSAGE, true);
            if (nullable.HasValue && nullable.Value)
              this.DeleteLogicalStructures(configurator, logicalStructureAffected, otherAffectedStructures);
            else
              this.MessageUserControlLogical = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
          }
          else
            this.DeleteLogicalStructures(configurator, logicalStructureAffected, otherAffectedStructures);
        }));
      }
    }

    private void DeleteLogicalStructures(
      IKernel diConfig,
      ObservableCollection<StructureNodeDTO> logicalStructureAffected,
      ObservableCollection<StructureNodeDTO> otherAffectedStructures)
    {
      bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) diConfig.Get<DeleteStructureViewModel>((IParameter) new ConstructorArgument("structureToDelete", (object) logicalStructureAffected), (IParameter) new ConstructorArgument(nameof (otherAffectedStructures), (object) otherAffectedStructures)));
      if (newModalDialog.HasValue && newModalDialog.Value)
      {
        TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) logicalStructureAffected, (Action<StructureNodeDTO>) (selectedNode => this.GetStructuresManagerInstance().DeleteStructure(selectedNode, StructureTypeEnum.Logical)));
        this.MessageUserControlLogical = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Delete_Structure.GetStringValue());
      }
      else
        this.MessageUserControlLogical = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
      this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
      this.LogicalStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical);
    }

    private void DeleteFixedStructures(
      IKernel diConfig,
      ObservableCollection<StructureNodeDTO> fixedStructureAffected,
      ObservableCollection<StructureNodeDTO> otherAffectedStructures)
    {
      bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) diConfig.Get<DeleteStructureViewModel>((IParameter) new ConstructorArgument("structureToDelete", (object) fixedStructureAffected), (IParameter) new ConstructorArgument(nameof (otherAffectedStructures), (object) otherAffectedStructures)));
      if (newModalDialog.HasValue && newModalDialog.Value)
      {
        TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) fixedStructureAffected, (Action<StructureNodeDTO>) (selectedNode => this.GetStructuresManagerInstance().DeleteStructure(selectedNode, StructureTypeEnum.Fixed)));
        this.MessageUserControlFixed = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Delete_Structure.GetStringValue());
      }
      else
        this.MessageUserControlFixed = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
      this.FixedStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed, true);
    }

    public ICommand CreateLogicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateLogicalStructureViewModel>());
          this.OnPropertyChanged("LogicalStructureNodeCollection");
          this.StructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Physical);
          this.LogicalStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical);
          StructureTreeStateHelper.MaintainExpandedState(parameter as RadTreeListView, this._logicalStructureNodeCollection);
        }));
      }
    }

    public ICommand EditSelectedLogicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!this.EditLogicalStructuresVisibility || !(parameter is RadTreeListView radTreeListView2) || radTreeListView2.CurrentItem == null)
            return;
          StructureNodeDTO selectedNode = (StructureNodeDTO) radTreeListView2.CurrentItem;
          this.IsBusy = true;
          Task<StructureNodeDTO> task = new Task<StructureNodeDTO>((Func<StructureNodeDTO>) (() =>
          {
            if (selectedNode.ParentNode == null)
              this.LoadSubNodesForRootNode(selectedNode);
            return selectedNode;
          }));
          task.ContinueWith((Action<Task<StructureNodeDTO>>) (previousTask =>
          {
            this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditLogicalStructureViewModel>((IParameter) new ConstructorArgument("selectedNode", (object) selectedNode), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) false)));
            this.IsBusy = false;
          }), System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
          task.Start();
        }));
      }
    }

    public StructureNodeDTO SelectedLogicalItem
    {
      get => this._selectedLogicalItem;
      set
      {
        this._selectedLogicalItem = value;
        if (this._selectedLogicalItem != null)
          this.IsRootLogicalItemSelected = this._selectedLogicalItem.RootNode == this._selectedLogicalItem;
        else
          this.IsRootLogicalItemSelected = false;
      }
    }

    public bool IsRootLogicalItemSelected
    {
      get => this._isRootLogicalItemSelected;
      set
      {
        this._isRootLogicalItemSelected = value;
        this.OnPropertyChanged(nameof (IsRootLogicalItemSelected));
      }
    }

    public bool IsLogicalTabSelected
    {
      get => this._isLogicalTabSelected;
      set
      {
        this._isLogicalTabSelected = value;
        if (!this._isLogicalTabSelected)
          return;
        EventPublisher.Publish<SelectedTabChanged>(new SelectedTabChanged()
        {
          SelectedTab = ApplicationTabsEnum.StructuresLogical
        }, (IViewModel) this);
      }
    }

    public ICommand UnlockLogicalStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is StructureNodeDTO structureNodeDto2))
            return;
          this.GetStructuresManagerInstance().UnlockStructure(structureNodeDto2.RootNode.Id);
          this.LogicalStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Logical);
        }));
      }
    }

    public ObservableCollection<StructureNodeDTO> FixedStructureNodeCollection
    {
      get => this._fixedStructureNodeCollection;
      set
      {
        this._fixedStructureNodeCollection = value;
        this.OnPropertyChanged(nameof (FixedStructureNodeCollection));
      }
    }

    public StructureNodeDTO SelectedFixedItem
    {
      get => this._selectedFixedItem;
      set
      {
        this._selectedFixedItem = value;
        if (this._selectedFixedItem != null)
          this.IsRootFixedItemSelected = this._selectedFixedItem.RootNode == this._selectedFixedItem;
        else
          this.IsRootFixedItemSelected = false;
      }
    }

    public bool IsRootFixedItemSelected
    {
      get => this._isRootFixedItemSelected;
      set
      {
        this._isRootFixedItemSelected = value;
        this.OnPropertyChanged(nameof (IsRootFixedItemSelected));
      }
    }

    public bool IsFixedTabSelected
    {
      get => this._isFixedTabSelected;
      set
      {
        this._isFixedTabSelected = value;
        if (!this._isFixedTabSelected)
          return;
        EventPublisher.Publish<SelectedTabChanged>(new SelectedTabChanged()
        {
          SelectedTab = ApplicationTabsEnum.StructuresFixed
        }, (IViewModel) this);
      }
    }

    public bool EvaluationFactorVisibility { get; set; }

    public bool InstallationOrderAttachTestVisibility
    {
      get => this._installationOrderAttachTestVisibility;
      set
      {
        this._installationOrderAttachTestVisibility = value;
        this.OnPropertyChanged(nameof (InstallationOrderAttachTestVisibility));
      }
    }

    public ICommand RadioTestRunDialog
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          IKernel configurator = DIConfigurator.GetConfigurator();
          if (radTreeListView == null)
            return;
          StructureNodeDTO currentItem = (StructureNodeDTO) radTreeListView.CurrentItem;
          this._windowFactory.CreateNewModalDialog((IViewModel) configurator.Get<RadioTestViewModel>((IParameter) new ConstructorArgument("structureNode", (object) currentItem)));
        }));
      }
    }

    public ICommand AssignRadioTestRunDialog
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          IKernel configurator = DIConfigurator.GetConfigurator();
          if (radTreeListView == null)
            return;
          StructureNodeDTO currentItem = (StructureNodeDTO) radTreeListView.CurrentItem;
          this._windowFactory.CreateNewModalDialog((IViewModel) configurator.Get<AssignTestRunViewModel>((IParameter) new ConstructorArgument("structureNode", (object) currentItem)));
        }));
      }
    }

    public ICommand RemoveSelectedFixedStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          IKernel configurator = DIConfigurator.GetConfigurator();
          if (radTreeListView == null)
            return;
          StructureNodeDTO currentItem = (StructureNodeDTO) radTreeListView.CurrentItem;
          ObservableCollection<StructureNodeDTO> observableCollection1 = new ObservableCollection<StructureNodeDTO>()
          {
            currentItem
          };
          ObservableCollection<StructureNodeDTO> observableCollection2 = new ObservableCollection<StructureNodeDTO>();
          bool? newModalDialog = this._windowFactory.CreateNewModalDialog((IViewModel) configurator.Get<DeleteStructureViewModel>((IParameter) new ConstructorArgument("structureToDelete", (object) observableCollection1), (IParameter) new ConstructorArgument("otherAffectedStructures", (object) observableCollection2)));
          if (newModalDialog.HasValue && newModalDialog.Value)
          {
            this.GetStructuresManagerInstance().RemoveStructure(currentItem, StructureTypeEnum.Fixed);
            this.MessageUserControlFixed = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Remove_Structure.GetStringValue());
          }
          else
            this.MessageUserControlFixed = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
          this.FixedStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed, true);
        }));
      }
    }

    public ICommand DeleteSelectedFixedStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          IKernel configurator = DIConfigurator.GetConfigurator();
          bool flag = false;
          ObservableCollection<object> observableCollection = (ObservableCollection<object>) parameter;
          ObservableCollection<StructureNodeDTO> fixedStructureaffected = new ObservableCollection<StructureNodeDTO>();
          ObservableCollection<StructureNodeDTO> nodeCollection = new ObservableCollection<StructureNodeDTO>();
          TypeHelperExtensionMethods.ForEach<object>((IEnumerable<object>) observableCollection, (Action<object>) (x =>
          {
            StructureNodeDTO rootNode = (StructureNodeDTO) x;
            this.LoadSubNodesForRootNode(rootNode);
            fixedStructureaffected.Add(rootNode);
          }));
          fixedStructureaffected = this.RemoveNonRootNodes(fixedStructureaffected);
          ObservableCollection<StructureNodeDTO> otherAffectedStructures = this.RemoveNonRootNodes(nodeCollection);
          if (fixedStructureaffected.Count == 0)
            MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_TITLE, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_EMPTY_LIST, false);
          else if (flag)
          {
            bool? nullable = MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_TITLE, Resources.MSS_DELETE_PHYSICAL_STRUCTURE_MESSAGE, true);
            if (nullable.HasValue && nullable.Value)
              this.DeleteFixedStructures(configurator, fixedStructureaffected, otherAffectedStructures);
            else
              this.MessageUserControlFixed = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
          }
          else
            this.DeleteFixedStructures(configurator, fixedStructureaffected, otherAffectedStructures);
        }));
      }
    }

    public ICommand CreateFixedStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateFixedStructureViewModel>());
          this.FixedStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed, true);
          StructureTreeStateHelper.MaintainExpandedState(parameter as RadTreeListView, this._fixedStructureNodeCollection);
        }));
      }
    }

    public ICommand EditSelectedFixedStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (async parameter =>
        {
          if (!this.EditFixedStructuresVisibility)
            return;
          RadTreeListView radTreeListView = parameter as RadTreeListView;
          if (radTreeListView != null && radTreeListView.CurrentItem != null)
          {
            StructureNodeDTO selectedNode = (StructureNodeDTO) radTreeListView.CurrentItem;
            StructureNodeDTO rootNode = selectedNode.RootNode ?? selectedNode;
            this.IsBusy = true;
            await Task.Run((Action) (() =>
            {
              if (rootNode.ParentNode != null)
                return;
              this.LoadSubNodesForRootNode(rootNode);
            }));
            EditFixedStructureViewModel vm = DIConfigurator.GetConfigurator().Get<EditFixedStructureViewModel>("EditFixedStructureForStructureViewModel", (IParameter) new ConstructorArgument("selectedNode", (object) rootNode), (IParameter) new ConstructorArgument("updatedForReadingOrder", (object) false), (IParameter) new ConstructorArgument("isExecuteInstallation", (object) false));
            this._windowFactory.CreateNewModalDialog((IViewModel) vm);
            this.IsBusy = false;
            selectedNode = (StructureNodeDTO) null;
            vm = (EditFixedStructureViewModel) null;
          }
          this.FixedStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed, true);
          StructureTreeStateHelper.MaintainExpandedState(radTreeListView, this._fixedStructureNodeCollection);
          radTreeListView = (RadTreeListView) null;
        }));
      }
    }

    public ICommand UnlockFixedStructureCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) (parameter =>
        {
          if (!(parameter is StructureNodeDTO structureNodeDto2))
            return;
          this.GetStructuresManagerInstance().UnlockStructure(structureNodeDto2.RootNode.Id);
          this.FixedStructureNodeCollection = this.GetStructuresManagerInstance().GetStructureNodesCollection(StructureTypeEnum.Fixed, true);
        }));
      }
    }

    public ICommand GmmToMssMigration
    {
      get => (ICommand) new RelayCommand((Action<object>) (_ => this.MigrateDataFromGMM()));
    }

    private void MigrateDataFromGMM()
    {
      MigrationManager migrationManager = new MigrationManager(this._repositoryFactory);
      SynchronizationContext.SetSynchronizationContext(new SynchronizationContext());
      System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext();
      bool? isOkButton = new bool?();
      if (new MSS.Business.Modules.AppParametersManagement.AppParametersManagement(this._repositoryFactory).GetAppParam("DoNotShowGmmImportScreenAtStartup").Value.ToLower() == "false")
        Application.Current.Dispatcher.Invoke((Action) (() => isOkButton = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<ImportGmmDataViewModel>())));
      if (!isOkButton.HasValue || !isOkButton.Value)
        return;
      new Task((Action) (() =>
      {
        this.IsBusy = true;
        try
        {
          string validationMessages = "";
          List<StructureNodeDTO> validatedStructures;
          migrationManager.ValidateStructureMigration(out validatedStructures, out validationMessages);
          if (!string.IsNullOrEmpty(validationMessages))
          {
            Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DeleteStructure_Warning_Title, validationMessages, false)));
          }
          else
          {
            migrationManager.MigrateStructuresAndMeters(validatedStructures);
            migrationManager.MigrateReadingValues();
            StructuresManager structuresManager = new StructuresManager(this._repositoryFactory);
            this.StructureNodeCollection = structuresManager.GetStructureNodesCollection(StructureTypeEnum.Physical, true);
            this.LogicalStructureNodeCollection = structuresManager.GetStructureNodesCollection(StructureTypeEnum.Logical, true);
            this.FixedStructureNodeCollection = structuresManager.GetStructureNodesCollection(StructureTypeEnum.Fixed, true);
            Application.Current.Dispatcher.Invoke((Action) (() => this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_Client_MigrationSuccessful_Title), (IParameter) new ConstructorArgument("message", (object) Resources.MSS_Client_MigrationSuccessful), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) false)))));
          }
        }
        catch (Exception ex)
        {
          MSS.Business.Errors.MessageHandler.LogException(ex, MessageCodes.Error_MigrationFailed);
          Application.Current.Dispatcher.Invoke((Action) (() => MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_DeleteStructure_Warning_Title, Resources.MSS_Client_MigrationFailed, false)));
        }
        finally
        {
          this.IsBusy = false;
        }
      })).Start();
    }

    public bool CreatePhysicalStructuresVisibility
    {
      get => this._createPhysicalStructuresVisibility;
      set
      {
        this._createPhysicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (CreatePhysicalStructuresVisibility));
      }
    }

    public bool EditPhysicalStructuresVisibility
    {
      get => this._editPhysicalStructuresVisibility;
      set
      {
        this._editPhysicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (EditPhysicalStructuresVisibility));
      }
    }

    public bool RemovePhysicalStructuresVisibility
    {
      get => this._removePhysicalStructuresVisibility;
      set
      {
        this._removePhysicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (RemovePhysicalStructuresVisibility));
      }
    }

    public bool DeletePhysicalStructuresVisibility
    {
      get => this._deletePhysicalStructuresVisibility;
      set
      {
        this._deletePhysicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (DeletePhysicalStructuresVisibility));
      }
    }

    public bool ImportPhysicalStructuresVisibility
    {
      get => this._importPhysicalStructuresVisibility;
      set
      {
        this._importPhysicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (ImportPhysicalStructuresVisibility));
      }
    }

    public bool ExportPhysicalStructuresVisibility
    {
      get => this._exportPhysicalStructuresVisibility;
      set
      {
        this._exportPhysicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (ExportPhysicalStructuresVisibility));
      }
    }

    public bool ReadingValuesVisibility
    {
      get => this._readingValuesVisibility;
      set
      {
        this._readingValuesVisibility = value;
        this.OnPropertyChanged(nameof (ReadingValuesVisibility));
      }
    }

    public bool CreateLogicalStructuresVisibility
    {
      get => this._createLogicalStructuresVisibility;
      set
      {
        this._createLogicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (CreateLogicalStructuresVisibility));
      }
    }

    public bool EditLogicalStructuresVisibility
    {
      get => this._editLogicalStructuresVisibility;
      set
      {
        this._editLogicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (EditLogicalStructuresVisibility));
      }
    }

    public bool RemoveLogicalStructuresVisibility
    {
      get => this._removeLogicalStructuresVisibility;
      set
      {
        this._removeLogicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (RemoveLogicalStructuresVisibility));
      }
    }

    public bool DeleteLogicalStructuresVisibility
    {
      get => this._deleteLogicalStructuresVisibility;
      set
      {
        this._deleteLogicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (DeleteLogicalStructuresVisibility));
      }
    }

    public bool ImportLogicalStructuresVisibility
    {
      get => this._importLogicalStructuresVisibility;
      set
      {
        this._importLogicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (ImportLogicalStructuresVisibility));
      }
    }

    public bool ExportLogicalStructuresVisibility
    {
      get => this._exportLogicalStructuresVisibility;
      set
      {
        this._exportLogicalStructuresVisibility = value;
        this.OnPropertyChanged(nameof (ExportLogicalStructuresVisibility));
      }
    }

    public bool CreateFixedStructuresVisibility
    {
      get => this._createFixedStructuresVisibility;
      set
      {
        this._createFixedStructuresVisibility = value;
        this.OnPropertyChanged(nameof (CreateFixedStructuresVisibility));
      }
    }

    public bool EditFixedStructuresVisibility
    {
      get => this._editFixedStructuresVisibility;
      set
      {
        this._editFixedStructuresVisibility = value;
        this.OnPropertyChanged(nameof (EditFixedStructuresVisibility));
      }
    }

    public bool RemoveFixedStructuresVisibility
    {
      get => this._removeFixedStructuresVisibility;
      set
      {
        this._removeFixedStructuresVisibility = value;
        this.OnPropertyChanged(nameof (RemoveFixedStructuresVisibility));
      }
    }

    public bool DeleteFixedStructuresVisibility
    {
      get => this._deleteFixedStructuresVisibility;
      set
      {
        this._deleteFixedStructuresVisibility = value;
        this.OnPropertyChanged(nameof (DeleteFixedStructuresVisibility));
      }
    }

    public bool ImportFixedStructuresVisibility
    {
      get => this._importFixedStructuresVisibility;
      set
      {
        this._importFixedStructuresVisibility = value;
        this.OnPropertyChanged(nameof (ImportFixedStructuresVisibility));
      }
    }

    public bool ExportFixedStructuresVisibility
    {
      get => this._exportFixedStructuresVisibility;
      set
      {
        this._exportFixedStructuresVisibility = value;
        this.OnPropertyChanged(nameof (ExportFixedStructuresVisibility));
      }
    }

    public bool ExportFixedStructureDevicesVisibility
    {
      get => this._exportFixedStructuresVisibility;
      set
      {
        this._exportFixedStructuresVisibility = value;
        this.OnPropertyChanged("ExportFixedStructuresVisibility");
      }
    }

    public bool IsPhysicalTabVisible { get; set; }

    public bool IsLogicalTabVisible { get; set; }

    public bool IsFixedTabVisible { get; set; }
  }
}


--- StructureViewModelBase.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.StructureViewModelBase
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using AutoMapper;
using Microsoft.Win32;
using MSS.Business.DTO;
using MSS.Business.Errors;
using MSS.Business.Events;
using MSS.Business.Modules.GMM;
using MSS.Business.Modules.Reporting;
using MSS.Business.Modules.StructuresManagement;
using MSS.Core.Model.DataCollectors;
using MSS.Core.Model.Meters;
using MSS.Core.Model.Structures;
using MSS.Core.Utils;
using MSS.DIConfiguration;
using MSS.DTO.MessageHandler;
using MSS.DTO.Meters;
using MSS.DTO.Structures;
using MSS.Interfaces;
using MSS.Localisation;
using MSS.Utils.Utils;
using MSS_Client.Utils;
using MSS_Client.ViewModel.Structures.DeviceViewModels;
using MSS_Client.ViewModel.Structures.Helpers.DeviceHelpers;
using MVVM.ViewModel;
using NHibernate.Criterion;
using NHibernate.Linq;
using Ninject;
using Ninject.Parameters;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Dynamic;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Xml;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public abstract class StructureViewModelBase : ViewModelBase
  {
    protected readonly IRepository<StructureNodeType> _structureNodeTypeRepository;
    protected readonly IRepository<MSS.Core.Model.Meters.Meter> _meterRepository;
    protected readonly IRepository<MeterReplacementHistory> _meterReplacementHistoryRepository;
    protected readonly IRepository<StructureNode> _structureNodeRepository;
    protected readonly IRepository<StructureNodeLinks> _structureNodeLinkRepository;
    protected readonly IRepositoryFactory _repositoryFactory;
    protected readonly IWindowFactory _windowFactory;
    protected MeterDTO _updateMeterDTO;
    protected MSS.Core.Model.Structures.Location _updatedLocation;
    protected Tenant _updatedTenant;
    protected Minomat _updatedMinomat;
    protected string _description;
    protected string _name;
    protected StructureNodeDTO _node;
    protected readonly List<StructureNodeDTO> _replacedMeterList = new List<StructureNodeDTO>();
    protected List<string> serialNumberList = new List<string>();
    protected List<string> locationNumberList = new List<string>();
    protected static List<string> deviceModelsInLicense = new List<string>();
    protected HashSet<string> _serialNumbersOfMetersThatAreMissingTranslationRules;
    private StructureNodeDTO _selectedItem;
    private bool _isChangeDeviceModelParametersEnabled;
    private bool _isNodeSelected;
    private bool _isRootItemSelected;
    private bool _isReplacebleMeterSelected;
    private string _devicesFoundLabel;
    private ViewModelBase _messageUserControl;
    private List<ZENNER.CommonLibrary.Entities.Meter> _physicalSubMeters = new List<ZENNER.CommonLibrary.Entities.Meter>();
    private List<ZENNER.CommonLibrary.Entities.Meter> _fixedSubMeters = new List<ZENNER.CommonLibrary.Entities.Meter>();
    private bool _isStartMBusScanButtonEnabled;
    private bool _isStopMBusScanButtonEnabled;
    private bool _isWalkByTestButtonEnabled;
    private bool _isStopWalkByTestButtonEnabled;
    private bool _isRadioSelected;
    private bool _isMeterSelected;

    protected StructureNodeEquipmentSettings StructureEquipmentSettings { get; set; }

    [Inject]
    protected StructureViewModelBase(
      IRepositoryFactory repositoryFactory,
      IWindowFactory windowFactory)
    {
      this._repositoryFactory = repositoryFactory;
      this._windowFactory = windowFactory;
      this._structureNodeTypeRepository = repositoryFactory.GetRepository<StructureNodeType>();
      this._meterRepository = repositoryFactory.GetRepository<MSS.Core.Model.Meters.Meter>();
      this._structureNodeRepository = repositoryFactory.GetRepository<StructureNode>();
      this._structureNodeLinkRepository = repositoryFactory.GetRepository<StructureNodeLinks>();
      this._meterReplacementHistoryRepository = repositoryFactory.GetRepository<MeterReplacementHistory>();
      this.serialNumberList = this._repositoryFactory.GetSession().CreateCriteria<MSS.Core.Model.Meters.Meter>().SetProjection((IProjection) Projections.Property("SerialNumber")).Add((ICriterion) Restrictions.Eq("IsDeactivated", (object) false)).List<string>().ToList<string>();
      this.locationNumberList = this._repositoryFactory.GetSession().CreateCriteria<MSS.Core.Model.Structures.Location>().SetProjection((IProjection) Projections.Property("BuildingNr")).Add((ICriterion) Restrictions.Eq("IsDeactivated", (object) false)).List<string>().ToList<string>();
      EventPublisher.Register<ExpandoObject>((Action<ExpandoObject>) (s => this.SetStartAndStopScanVisibility()));
      this._serialNumbersOfMetersThatAreMissingTranslationRules = new HashSet<string>();
    }

    protected StructureViewModelBase()
    {
    }

    protected StructuresManager GetStructuresManagerInstance()
    {
      return new StructuresManager(this._repositoryFactory);
    }

    public StructureNodeDTO SelectedItem
    {
      get => this._selectedItem;
      set
      {
        this._selectedItem = value;
        int num1;
        if (this._selectedItem != null)
        {
          string name1 = this._selectedItem.NodeType.Name;
          StructureNodeTypeEnum structureNodeTypeEnum = StructureNodeTypeEnum.Meter;
          string str1 = structureNodeTypeEnum.ToString();
          if (!(name1 == str1))
          {
            string name2 = this._selectedItem.NodeType.Name;
            structureNodeTypeEnum = StructureNodeTypeEnum.RadioMeter;
            string str2 = structureNodeTypeEnum.ToString();
            num1 = name2 == str2 ? 1 : 0;
          }
          else
            num1 = 1;
        }
        else
          num1 = 0;
        this.IsMeterSelected = num1 != 0;
        this.IsNodeSelected = this._selectedItem != null;
        this.IsRadioSelected = this._selectedItem != null && this._selectedItem.NodeType.Name == "Radio";
        if (this._selectedItem != null)
        {
          this.IsRootItemSelected = this._selectedItem.RootNode == this._selectedItem;
          this.IsReplacebleMeterSelected = this.SetIsReplacementMeterEnabled(this._selectedItem);
        }
        else
          this.IsRootItemSelected = false;
        int num2;
        if (this._selectedItem != null)
        {
          StructureTypeEnum? structureType = this._selectedItem.StructureType;
          StructureTypeEnum structureTypeEnum = StructureTypeEnum.Physical;
          if ((structureType.GetValueOrDefault() == structureTypeEnum ? (structureType.HasValue ? 1 : 0) : 0) != 0)
          {
            num2 = this._selectedItem.NodeType.Name == "Meter" ? 1 : 0;
            goto label_12;
          }
        }
        num2 = 0;
label_12:
        this.IsChangeDeviceModelParametersEnabled = num2 != 0;
        this.SetStartAndStopScanVisibility();
      }
    }

    public bool IsChangeDeviceModelParametersEnabled
    {
      get => this._isChangeDeviceModelParametersEnabled;
      set
      {
        this._isChangeDeviceModelParametersEnabled = value;
        this.OnPropertyChanged(nameof (IsChangeDeviceModelParametersEnabled));
      }
    }

    private bool SetIsReplacementMeterEnabled(StructureNodeDTO _selectedItem)
    {
      bool flag1 = false;
      bool flag2 = false;
      if (_selectedItem.Entity != null)
      {
        flag1 = true;
        if (_selectedItem.Entity is MeterDTO entity)
          flag2 |= entity.Id != Guid.Empty;
      }
      return ((!(_selectedItem.NodeType.Name == StructureNodeTypeEnum.Meter.ToString()) ? 0 : (_selectedItem.Id != Guid.Empty ? 1 : 0)) & (flag1 ? 1 : 0) & (flag2 ? 1 : 0)) != 0;
    }

    private void SetStartAndStopScanVisibility()
    {
      if (this._selectedItem == null)
        return;
      IList<StructureNodeType> structureNodeTypeList = (IList<StructureNodeType>) new List<StructureNodeType>();
      StructureTypeEnum? structureType = this._selectedItem.StructureType;
      if (structureType.HasValue)
      {
        switch (structureType.GetValueOrDefault())
        {
          case StructureTypeEnum.Physical:
            structureNodeTypeList = this._structureNodeTypeRepository.SearchFor((Expression<Func<StructureNodeType, bool>>) (s => s.Name == StructureNodeTypeEnum.COMServer.ToString() || s.Name == StructureNodeTypeEnum.Converter.ToString() || s.Name == StructureNodeTypeEnum.Repeater.ToString() || s.Name == StructureNodeTypeEnum.Radio.ToString()));
            break;
          case StructureTypeEnum.Fixed:
            structureNodeTypeList = this._structureNodeTypeRepository.SearchFor((Expression<Func<StructureNodeType, bool>>) (s => s.Name == StructureNodeTypeEnum.Location.ToString() || s.Name == StructureNodeTypeEnum.Tenant.ToString() || s.Name == StructureNodeTypeEnum.MinomatMaster.ToString() || s.Name == StructureNodeTypeEnum.MinomatSlave.ToString()));
            break;
        }
      }
      List<Guid> nodeTypeIds = new List<Guid>();
      TypeHelperExtensionMethods.ForEach<StructureNodeType>((IEnumerable<StructureNodeType>) structureNodeTypeList, (Action<StructureNodeType>) (n => nodeTypeIds.Add(n.Id)));
      this.IsStartMBusScanButtonEnabled = !ScanMinoConnectManager.IsScanningStarted && !WalkByTestManager.IsWalkByTestStarted && nodeTypeIds.Contains(this._selectedItem.NodeType.Id) && this.StructureEquipmentSettings?.EquipmentName != null && this._selectedItem != null;
      this.IsStopMBusScanButtonEnabled = ScanMinoConnectManager.IsScanningStarted;
      this.IsWalkByTestButtonEnabled = !ScanMinoConnectManager.IsScanningStarted && !WalkByTestManager.IsWalkByTestStarted && nodeTypeIds.Contains(this._selectedItem.NodeType.Id);
      this.IsStopWalkByTestButtonEnabled = WalkByTestManager.IsWalkByTestStarted;
    }

    public bool IsNodeSelected
    {
      get => this._isNodeSelected;
      set
      {
        this._isNodeSelected = value;
        this.OnPropertyChanged(nameof (IsNodeSelected));
      }
    }

    public bool IsRootItemSelected
    {
      get => this._isRootItemSelected;
      set
      {
        this._isRootItemSelected = value;
        this.OnPropertyChanged(nameof (IsRootItemSelected));
      }
    }

    public bool IsReplacebleMeterSelected
    {
      get => this._isReplacebleMeterSelected;
      set
      {
        this._isReplacebleMeterSelected = value;
        this.OnPropertyChanged(nameof (IsReplacebleMeterSelected));
      }
    }

    public string DevicesFoundLabel
    {
      get => this._devicesFoundLabel;
      set
      {
        this._devicesFoundLabel = value;
        this.OnPropertyChanged(nameof (DevicesFoundLabel));
      }
    }

    public virtual ObservableCollection<StructureNodeDTO> GetStructureCollection()
    {
      return new ObservableCollection<StructureNodeDTO>();
    }

    public ViewModelBase MessageUserControl
    {
      get => this._messageUserControl;
      set
      {
        this._messageUserControl = value;
        this.OnPropertyChanged(nameof (MessageUserControl));
      }
    }

    protected void ReplaceDevice(ReplaceDeviceEvent update)
    {
      MeterDTO currentMeterDto = update.CurrentMeterDTO;
      StructureNodeDTO _replacedMeter = update.ReplacedMeter;
      this._replacedMeterList.Add(_replacedMeter);
      ObservableCollection<StructureNodeDTO> structureCollection = this.GetStructureCollection();
      if (currentMeterDto != null)
      {
        if (_replacedMeter.Entity is MeterDTO entity)
        {
          List<MeterReplacementHistorySerializableDTO> replacementHistoryList = entity.MeterReplacementHistoryList;
          List<MeterReplacementHistorySerializableDTO> historySerializableDtoList = new List<MeterReplacementHistorySerializableDTO>();
          replacementHistoryList?.ForEach(new Action<MeterReplacementHistorySerializableDTO>(historySerializableDtoList.Add));
          historySerializableDtoList.Add(new MeterReplacementHistorySerializableDTO()
          {
            CurrentMeterId = currentMeterDto.Id,
            ReplacedByUserId = MSS.Business.Utils.AppContext.Current.LoggedUser.Id,
            ReplacedMeterId = entity.Id,
            ReplacedMeterDeviceType = entity.DeviceType,
            ReplacedMeterSerialNumber = entity.SerialNumber,
            ReplacementDate = DateTime.Now
          });
          currentMeterDto.MeterReplacementHistoryList = historySerializableDtoList;
          currentMeterDto.ReplacedMeterId = new Guid?(entity.Id);
          currentMeterDto.IsReplaced = true;
        }
        StructureNodeDTO newNodeDTO = new StructureNodeDTO()
        {
          Entity = (object) currentMeterDto,
          ParentNode = _replacedMeter.ParentNode,
          RootNode = _replacedMeter.RootNode,
          Name = update.Name,
          NodeType = update.CurrentMeterNodeType,
          Description = update.Description,
          IsNewNode = true,
          StructureType = _replacedMeter.StructureType,
          OrderNr = _replacedMeter.OrderNr,
          StartDate = _replacedMeter.StartDate,
          EndDate = new DateTime?(),
          IsExpanded = true,
          AssignedNotes = update.AssignedNotes,
          AssignedPicture = update.AssignedPicture,
          SubNodes = update.SubNodes
        };
        newNodeDTO.Image = StructuresHelper.GetImageForNode(newNodeDTO, newNodeDTO.Entity != null);
        foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) newNodeDTO.SubNodes)
        {
          subNode.ParentNode = newNodeDTO;
          subNode.RootNode = newNodeDTO.RootNode;
          subNode.StructureType = newNodeDTO.StructureType;
        }
        if (structureCollection.Any<StructureNodeDTO>() && structureCollection[0].NodeType == _replacedMeter.NodeType)
        {
          int index = structureCollection.FindIndex<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.OrderNr == newNodeDTO.OrderNr));
          structureCollection.Insert(index, newNodeDTO);
        }
        else
        {
          StructureNodeDTO parentNode = _replacedMeter.ParentNode;
          int index = parentNode.SubNodes.FindIndex<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.OrderNr == newNodeDTO.OrderNr));
          parentNode.SubNodes.Insert(index, newNodeDTO);
        }
      }
      this.RemoveSelectedNodeFromStructure(_replacedMeter, structureCollection);
      this.serialNumberList.Remove(_replacedMeter.Entity is MeterDTO entity1 ? entity1.SerialNumber : (string) null);
      MSS.Core.Model.Meters.Meter entity2 = this._meterRepository.FirstOrDefault((Expression<Func<MSS.Core.Model.Meters.Meter, bool>>) (item => item.Id == (_replacedMeter.Entity as MeterDTO).Id));
      if (entity2 != null)
      {
        entity2.IsDeactivated = true;
        this._meterRepository.Update(entity2);
      }
      if (update.MeterToReplaceWith != null)
      {
        StructureNodeLinks entity3 = this._structureNodeLinkRepository.FirstOrDefault((Expression<Func<StructureNodeLinks, bool>>) (item => item.Node.Id == update.MeterToReplaceWith.Id));
        if (entity3 != null)
        {
          entity3.EndDate = new DateTime?(DateTime.Now);
          this._structureNodeLinkRepository.Update(entity3);
        }
        StructureNode entity4 = this._structureNodeRepository.FirstOrDefault((Expression<Func<StructureNode, bool>>) (item => item.Id == update.MeterToReplaceWith.Id));
        if (entity4 != null)
        {
          entity4.EndDate = new DateTime?(DateTime.Now);
          this._structureNodeRepository.Update(entity4);
        }
        this.RemoveSelectedNodeFromStructure(update.MeterToReplaceWith, structureCollection);
      }
      if (currentMeterDto != null && !this.serialNumberList.Contains(currentMeterDto.SerialNumber))
        this.serialNumberList.Add(currentMeterDto.SerialNumber);
      this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(update.Message.MessageText);
    }

    protected void AddDevicesToPhysicalStructure(ZENNER.CommonLibrary.Entities.Meter obj, string systemName)
    {
      bool hasRadioAsParent = this.HasRadioAsParent();
      StructureNodeType nodeType = this._structureNodeTypeRepository.FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (n => n.Name == (hasRadioAsParent ? "RadioMeter" : "Meter")));
      bool isInCurrentStructure = false;
      MeterMBusStateEnum meterMbusState = this.GetMeterMBusState(obj.SerialNumber, this.MBusSelectedItem, this._meterRepository, this._structureNodeRepository, this._structureNodeLinkRepository, out isInCurrentStructure);
      switch (meterMbusState)
      {
        case MeterMBusStateEnum.New:
        case MeterMBusStateEnum.ExistingMeterInAnotherStructure:
          this.AddMeterToPhysicalStructure(obj, meterMbusState, nodeType, isInCurrentStructure);
          break;
        case MeterMBusStateEnum.Update:
        case MeterMBusStateEnum.ExistingMeterInAnotherStructureAndCurrentStructure:
          if (!(systemName != "wM-Bus") || !(systemName != "Radio2") || !(systemName != "Radio3"))
            break;
          List<StructureNodeDTO> list = StructuresHelper.Descendants(this.MBusSelectedItem).ToList<StructureNodeDTO>();
          StructureNodeDTO node1 = (StructureNodeDTO) null;
          if (list != null)
            node1 = list.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (node =>
            {
              if (node.NodeType.Name == "Meter" || node.NodeType.Name == "RadioMeter")
              {
                Guid? nullable = node.Entity is MeterDTO entity3 ? new Guid?(entity3.Id) : new Guid?();
                Guid empty = Guid.Empty;
                if ((nullable.HasValue ? (nullable.HasValue ? (nullable.GetValueOrDefault() != empty ? 1 : 0) : 0) : 1) != 0)
                  return (node.Entity is MeterDTO entity4 ? entity4.SerialNumber : (string) null) == obj.SerialNumber;
              }
              return false;
            }));
          if (node1 != null)
          {
            MeterDTO entity5 = node1.Entity as MeterDTO;
            entity5.DeviceType = StructuresHelper.GetDeviceTypeEnumByDeviceModelName(obj.DeviceModel.Name).Value;
            entity5.MBusStateEnum = new MeterMBusStateEnum?(meterMbusState);
            node1.Image = StructuresHelper.GetImageForMeterNode(new MeterMBusStateEnum?(meterMbusState), node1.NodeType, entity5.IsConfigured, entity5.SerialNumber, node1.StructureType, isInCurrentStructure, this._serialNumbersOfMetersThatAreMissingTranslationRules);
            this.AddAdditionalInfoToMeterDTO(obj, ref entity5);
            node1.IsMeterNonEditable = this.IsItemNonEditable(node1);
          }
          else
          {
            MeterMBusStateEnum meterState = meterMbusState == MeterMBusStateEnum.Update ? MeterMBusStateEnum.New : meterMbusState;
            this.AddMeterToPhysicalStructure(obj, meterState, nodeType, isInCurrentStructure);
          }
          break;
      }
    }

    private void AddMeterToPhysicalStructure(
      ZENNER.CommonLibrary.Entities.Meter meter,
      MeterMBusStateEnum meterState,
      StructureNodeType nodeType,
      bool meterWithSameSerialNumberExistsInCurrentStructure)
    {
      MeterDTO meterDTO = new MeterDTO()
      {
        SerialNumber = meter.SerialNumber,
        DeviceType = StructuresHelper.GetDeviceTypeEnumByDeviceModelName(meter.DeviceModel.Name).Value,
        MBusStateEnum = new MeterMBusStateEnum?(meterState),
        ReadingEnabled = true
      };
      this.AddAdditionalInfoToMeterDTO(meter, ref meterDTO);
      if (meter.AdditionalInfo != null && meter.AdditionalInfo.ContainsKey(AdditionalInfoKey.MainDeviceSecondaryAddress))
      {
        this._physicalSubMeters.Add(meter);
      }
      else
      {
        StructureNodeDTO node = new StructureNodeDTO()
        {
          IsNewNode = true,
          NodeType = nodeType,
          ParentNode = this.MBusSelectedItem,
          RootNode = this.MBusSelectedItem.RootNode,
          Entity = (object) meterDTO,
          Name = nodeType.Name,
          Image = StructuresHelper.GetImageForMeterNode(new MeterMBusStateEnum?(meterState), nodeType, meterDTO.IsConfigured, meterDTO.SerialNumber, new StructureTypeEnum?(StructureTypeEnum.Physical), meterWithSameSerialNumberExistsInCurrentStructure, this._serialNumbersOfMetersThatAreMissingTranslationRules),
          StructureType = this.MBusSelectedItem.StructureType
        };
        node.IsMeterNonEditable = this.IsItemNonEditable(node);
        this.MBusSelectedItem.SubNodes.Add(node);
      }
      foreach (ZENNER.CommonLibrary.Entities.Meter meter1 in new List<ZENNER.CommonLibrary.Entities.Meter>((IEnumerable<ZENNER.CommonLibrary.Entities.Meter>) this._physicalSubMeters))
      {
        int secondaryAddr;
        if (int.TryParse(meter1.AdditionalInfo[AdditionalInfoKey.MainDeviceSecondaryAddress], out secondaryAddr))
        {
          StructureNodeDTO structureNodeDto = this.MBusSelectedItem.SubNodes.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (x => x.Entity is MeterDTO && ((MeterDTO) x.Entity).SerialNumber == secondaryAddr.ToString()));
          if (structureNodeDto != null)
          {
            if (structureNodeDto.Entity != null)
              meterDTO.Manufacturer = ((MeterDTO) structureNodeDto.Entity).Manufacturer;
            StructureNodeDTO node = new StructureNodeDTO()
            {
              IsNewNode = true,
              NodeType = nodeType,
              ParentNode = this.MBusSelectedItem,
              RootNode = this.MBusSelectedItem.RootNode,
              Entity = (object) meterDTO,
              Name = nodeType.Name,
              Image = StructuresHelper.GetImageForMeterNode(new MeterMBusStateEnum?(meterState), nodeType, meterDTO.IsConfigured, meterDTO.SerialNumber, new StructureTypeEnum?(StructureTypeEnum.Physical), meterWithSameSerialNumberExistsInCurrentStructure, this._serialNumbersOfMetersThatAreMissingTranslationRules),
              StructureType = this.MBusSelectedItem.StructureType
            };
            node.IsMeterNonEditable = this.IsItemNonEditable(node);
            structureNodeDto.SubNodes.Add(node);
            this._physicalSubMeters.Remove(meter1);
          }
        }
      }
      this.serialNumberList.Add(meter.SerialNumber);
    }

    private void AddAdditionalInfoToMeterDTO(ZENNER.CommonLibrary.Entities.Meter meter, ref MeterDTO meterDTO)
    {
      if (meter.AdditionalInfo == null || meter.AdditionalInfo.Count <= 0)
        return;
      if (meter.AdditionalInfo.ContainsKey(AdditionalInfoKey.Manufacturer))
        meterDTO.Manufacturer = meter.AdditionalInfo[AdditionalInfoKey.Manufacturer];
      if (meter.AdditionalInfo.ContainsKey(AdditionalInfoKey.Medium))
      {
        string str = meter.AdditionalInfo[AdditionalInfoKey.Medium];
        DeviceMediumEnum result;
        if (Enum.IsDefined(typeof (DeviceMediumEnum), (object) str) && Enum.TryParse<DeviceMediumEnum>(str, true, out result))
        {
          bool flag = DeviceTypeVisibilityHelper.IsPropertyVisible(typeof (MSS.Core.Model.Meters.Meter), DeviceTypeVisibilityHelper.GetPropertyName<DeviceMediumEnum?>((Expression<Func<DeviceMediumEnum?>>) (() => System.Linq.Expressions.Expression.New(typeof (MSS.Core.Model.Meters.Meter)).Medium)), new DeviceTypeEnum?((DeviceTypeEnum) result));
          meterDTO.Medium = flag ? new DeviceMediumEnum?(result) : new DeviceMediumEnum?();
        }
      }
      if (meter.AdditionalInfo.ContainsKey(AdditionalInfoKey.InputNumber))
        meterDTO.InputNumber = meter.AdditionalInfo[AdditionalInfoKey.InputNumber];
      int result1;
      if (meter.AdditionalInfo.ContainsKey(AdditionalInfoKey.PrimaryAddress) && int.TryParse(meter.AdditionalInfo[AdditionalInfoKey.PrimaryAddress], out result1))
        meterDTO.PrimaryAddress = new int?(result1);
      if (meter.AdditionalInfo.ContainsKey(AdditionalInfoKey.Version))
        meterDTO.Generation = meter.AdditionalInfo[AdditionalInfoKey.Version];
      meterDTO.GMMAdditionalInfo = meter.AdditionalInfoString;
    }

    protected void AddDevicesToFixedStructure(ZENNER.CommonLibrary.Entities.Meter obj)
    {
      if (!GMMHelper.GetDeviceModelNameList(this.MBusSelectedItem.StructureType).Contains(obj.DeviceModel.Name))
        return;
      ZENNER.CommonLibrary.Entities.Meter meter = obj;
      bool hasRadioAsParent = this.HasRadioAsParent();
      StructureNodeType nodeType1 = this._structureNodeTypeRepository.FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (n => n.Name == (hasRadioAsParent ? "RadioMeter" : "Meter")));
      bool isInCurrentStructure = false;
      MeterMBusStateEnum meterMbusState = this.GetMeterMBusState(meter.SerialNumber, this.MBusSelectedItem, this._meterRepository, this._structureNodeRepository, this._structureNodeLinkRepository, out isInCurrentStructure);
      switch (meterMbusState)
      {
        case MeterMBusStateEnum.New:
        case MeterMBusStateEnum.ExistingMeterInAnotherStructure:
          if (!this.CurrentStructureContainsSerialNumber(this.MBusSelectedItem, obj.SerialNumber))
          {
            if (this.MBusSelectedItem.NodeType.Name == "Location")
            {
              if (!this.MBusSelectedItem.SubNodes.Any<StructureNodeDTO>())
              {
                StructureNodeType nodeType2 = this._structureNodeTypeRepository.FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (n => n.Name == "Tenant"));
                StructureNodeDTO structureNodeDto = new StructureNodeDTO()
                {
                  IsNewNode = true,
                  NodeType = nodeType2,
                  ParentNode = this.MBusSelectedItem,
                  RootNode = this.MBusSelectedItem.RootNode,
                  Entity = (object) null,
                  Name = "Tenant",
                  Image = StructuresHelper.GetImageForNode(nodeType2, (object) null, false),
                  StructureType = this.MBusSelectedItem.StructureType
                };
                this.MBusSelectedItem.SubNodes.Add(structureNodeDto);
                this.MBusSelectedItem = structureNodeDto;
              }
              else
                this.MBusSelectedItem = this.MBusSelectedItem.SubNodes.First<StructureNodeDTO>();
            }
            MeterDTO meterDTO = new MeterDTO()
            {
              SerialNumber = meter.SerialNumber,
              DeviceType = StructuresHelper.GetDeviceTypeEnumByDeviceModelName(meter.DeviceModel.Name).Value,
              MBusStateEnum = new MeterMBusStateEnum?(meterMbusState),
              ReadingEnabled = true
            };
            this.AddAdditionalInfoToMeterDTO(meter, ref meterDTO);
            if (meter.AdditionalInfo != null && meter.AdditionalInfo.ContainsKey(AdditionalInfoKey.MainDeviceSecondaryAddress))
              this._fixedSubMeters.Add(meter);
            else
              this.MBusSelectedItem.SubNodes.Add(new StructureNodeDTO()
              {
                IsNewNode = true,
                NodeType = nodeType1,
                ParentNode = this.MBusSelectedItem,
                RootNode = this.MBusSelectedItem.RootNode,
                Entity = (object) meterDTO,
                Name = nodeType1.Name,
                Image = StructuresHelper.GetImageForMeterNode(new MeterMBusStateEnum?(meterMbusState), nodeType1, meterDTO.IsConfigured, meterDTO.SerialNumber, new StructureTypeEnum?(StructureTypeEnum.Fixed), isInCurrentStructure, this._serialNumbersOfMetersThatAreMissingTranslationRules),
                StructureType = this.MBusSelectedItem.StructureType
              });
            using (List<ZENNER.CommonLibrary.Entities.Meter>.Enumerator enumerator = new List<ZENNER.CommonLibrary.Entities.Meter>((IEnumerable<ZENNER.CommonLibrary.Entities.Meter>) this._fixedSubMeters).GetEnumerator())
            {
              while (enumerator.MoveNext())
              {
                ZENNER.CommonLibrary.Entities.Meter current = enumerator.Current;
                int secondaryAddr;
                if (int.TryParse(current.AdditionalInfo[AdditionalInfoKey.MainDeviceSecondaryAddress], out secondaryAddr))
                {
                  StructureNodeDTO structureNodeDto1 = this.MBusSelectedItem.SubNodes.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (x => x.Entity is MeterDTO && ((MeterDTO) x.Entity).SerialNumber == secondaryAddr.ToString()));
                  if (structureNodeDto1 != null)
                  {
                    if (structureNodeDto1.Entity != null)
                      meterDTO.Manufacturer = ((MeterDTO) structureNodeDto1.Entity).Manufacturer;
                    StructureNodeDTO structureNodeDto2 = new StructureNodeDTO()
                    {
                      IsNewNode = true,
                      NodeType = nodeType1,
                      ParentNode = this.MBusSelectedItem,
                      RootNode = this.MBusSelectedItem.RootNode,
                      Entity = (object) meterDTO,
                      Name = nodeType1.Name,
                      Image = StructuresHelper.GetImageForMeterNode(new MeterMBusStateEnum?(meterMbusState), nodeType1, meterDTO.IsConfigured, meterDTO.SerialNumber, new StructureTypeEnum?(StructureTypeEnum.Fixed), isInCurrentStructure, this._serialNumbersOfMetersThatAreMissingTranslationRules),
                      StructureType = this.MBusSelectedItem.StructureType
                    };
                    structureNodeDto1.SubNodes.Add(structureNodeDto2);
                    this._fixedSubMeters.Remove(current);
                  }
                }
              }
              break;
            }
          }
          else
            break;
        case MeterMBusStateEnum.Update:
          MSS.Core.Model.Meters.Meter meter1 = this._meterRepository.FirstOrDefault((Expression<Func<MSS.Core.Model.Meters.Meter, bool>>) (m => m.SerialNumber == meter.SerialNumber && !m.IsDeactivated));
          using (IEnumerator<StructureNodeDTO> enumerator = StructuresHelper.Descendants(this.MBusSelectedItem).GetEnumerator())
          {
            while (enumerator.MoveNext())
            {
              StructureNodeDTO current = enumerator.Current;
              if ((current.NodeType.Name == "Meter" || current.NodeType.Name == "RadioMeter") && current.Entity is MeterDTO entity && meter1 != null && entity.Id == meter1.Id)
              {
                entity.DeviceType = StructuresHelper.GetDeviceTypeEnumByDeviceModelName(meter.DeviceModel.Name).Value;
                entity.MBusStateEnum = new MeterMBusStateEnum?(meterMbusState);
                current.Image = StructuresHelper.GetImageForMeterNode(new MeterMBusStateEnum?(meterMbusState), nodeType1, entity.IsConfigured, entity.SerialNumber, new StructureTypeEnum?(StructureTypeEnum.Fixed), isInCurrentStructure, this._serialNumbersOfMetersThatAreMissingTranslationRules);
                this.AddAdditionalInfoToMeterDTO(meter, ref entity);
              }
            }
            break;
          }
      }
    }

    private void SetRadioMetersPropertyWhenImportingFromFile(
      string propertyName,
      int columnIndex,
      int radioMeterIndex,
      List<string[]> radioMetersList,
      MeterDTO meterDTO)
    {
      switch (propertyName)
      {
        case "Medium":
          try
          {
            meterDTO.Medium = string.IsNullOrWhiteSpace(radioMetersList[radioMeterIndex][columnIndex]) ? new DeviceMediumEnum?() : new DeviceMediumEnum?((DeviceMediumEnum) Enum.Parse(typeof (DeviceMediumEnum), radioMetersList[radioMeterIndex][columnIndex].ToUpper()));
            break;
          }
          catch (Exception ex)
          {
            MSS.Business.Errors.MessageHandler.LogException(ex);
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_ImportCSV_RadioMeter_MediumError);
            throw new Exception(MessageCodes.Error_ImportRadioMeters_MediumFormat.ToString());
          }
        case "ReadingEnabled":
          try
          {
            meterDTO.ReadingEnabled = columnIndex < 0 || string.IsNullOrWhiteSpace(radioMetersList[radioMeterIndex][columnIndex]) || Convert.ToBoolean(radioMetersList[radioMeterIndex][columnIndex]);
            break;
          }
          catch (Exception ex)
          {
            MSS.Business.Errors.MessageHandler.LogException(ex);
            this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(Resources.MSS_Client_ImportCSV_RadioMeter_ReadingEnabledError);
            throw new Exception(MessageCodes.Error_ImportRadioMeters_ReadingEnabledFormat.ToString());
          }
        default:
          typeof (MbusRadioMeter).GetProperty(propertyName)?.SetValue((object) meterDTO.MbusRadioMeter, (object) radioMetersList[radioMeterIndex][columnIndex]);
          break;
      }
    }

    protected void ImportRadioMeters(string filePath)
    {
      try
      {
        List<string[]> radioMetersList = new CSVManager().ReadStructureFromFile(filePath, new string[1]
        {
          ";"
        });
        if (radioMetersList.Count <= 1)
          return;
        List<string> list = ((IEnumerable<string>) radioMetersList[0]).ToList<string>();
        int columnIndex1 = list.IndexOf("City");
        int columnIndex2 = list.IndexOf("Street");
        int columnIndex3 = list.IndexOf("House number");
        int columnIndex4 = list.IndexOf("House number supplement");
        int columnIndex5 = list.IndexOf("Apartment number");
        int columnIndex6 = list.IndexOf("ZIP code");
        int columnIndex7 = list.IndexOf("First name");
        int columnIndex8 = list.IndexOf("Last name");
        int columnIndex9 = list.IndexOf("Location");
        int columnIndex10 = list.IndexOf("Radio serial number");
        int columnIndex11 = list.IndexOf("Medium");
        int columnIndex12 = list.IndexOf("Reading enabled");
        if (columnIndex1 < 0 || columnIndex2 < 0 || columnIndex3 < 0 || columnIndex4 < 0 || columnIndex5 < 0 || columnIndex6 < 0 || columnIndex7 < 0 || columnIndex8 < 0 || columnIndex9 < 0 || columnIndex10 < 0 || columnIndex11 < 0)
        {
          MSS.Business.Errors.MessageHandler.LogDebug("Not all the expected columns found in CSV file to import");
          throw new BaseApplicationException(Resources.MSS_Client_ImportCSV_OpenFileError);
        }
        StructureNodeType nodeType = this._structureNodeTypeRepository.FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (item => item.Name == "RadioMeter"));
        for (int index = 1; index < radioMetersList.Count; ++index)
        {
          bool isInCurrentStructure = false;
          MeterMBusStateEnum meterMbusState = this.GetMeterMBusState(radioMetersList[index][columnIndex10], this.SelectedItem, this._meterRepository, this._structureNodeRepository, this._structureNodeLinkRepository, out isInCurrentStructure);
          MeterDTO meterDTO = new MeterDTO();
          meterDTO.MbusRadioMeter = new MbusRadioMeter();
          this.SetRadioMetersPropertyWhenImportingFromFile("City", columnIndex1, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("Street", columnIndex2, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("HouseNumber", columnIndex3, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("HouseNumberSupplement", columnIndex4, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("ApartmentNumber", columnIndex5, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("ZipCode", columnIndex6, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("FirstName", columnIndex7, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("LastName", columnIndex8, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("Location", columnIndex9, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("RadioSerialNumber", columnIndex10, index, radioMetersList, meterDTO);
          meterDTO.SerialNumber = meterDTO.MbusRadioMeter.RadioSerialNumber;
          meterDTO.MBusStateEnum = new MeterMBusStateEnum?(meterMbusState == MeterMBusStateEnum.Update ? MeterMBusStateEnum.New : meterMbusState);
          meterDTO.DeviceType = DeviceTypeEnum.GenericWMBus;
          this.SetRadioMetersPropertyWhenImportingFromFile("Medium", columnIndex11, index, radioMetersList, meterDTO);
          this.SetRadioMetersPropertyWhenImportingFromFile("ReadingEnabled", columnIndex12, index, radioMetersList, meterDTO);
          if (!string.IsNullOrWhiteSpace(meterDTO.SerialNumber))
            this.serialNumberList.Add(meterDTO.SerialNumber);
          StructureNodeDTO node = new StructureNodeDTO()
          {
            IsNewNode = true,
            NodeType = nodeType,
            ParentNode = this.SelectedItem,
            RootNode = this.SelectedItem.RootNode,
            Entity = (object) meterDTO,
            Name = "RadioMeter",
            Image = StructuresHelper.GetImageForMeterNode(meterDTO.MBusStateEnum, nodeType, meterDTO.IsConfigured, meterDTO.SerialNumber, new StructureTypeEnum?(StructureTypeEnum.Physical), isInCurrentStructure, this._serialNumbersOfMetersThatAreMissingTranslationRules),
            StructureType = this.SelectedItem.StructureType
          };
          node.IsMeterNonEditable = this.IsItemNonEditable(node);
          this.SelectedItem.SubNodes.Add(node);
        }
      }
      catch (BaseApplicationException ex)
      {
        this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(ex.Message);
      }
      catch (Exception ex)
      {
        string message1 = ex.Message;
        MessageCodes messageCodes = MessageCodes.Error_ImportRadioMeters_MediumFormat;
        string str1 = messageCodes.ToString();
        int num;
        if (message1 != str1)
        {
          string message2 = ex.Message;
          messageCodes = MessageCodes.Error_ImportRadioMeters_ReadingEnabledFormat;
          string str2 = messageCodes.ToString();
          num = message2 != str2 ? 1 : 0;
        }
        else
          num = 0;
        if (num == 0)
          return;
        MSS.Business.Errors.MessageHandler.LogException(ex);
        this.MessageUserControl = MessageHandlingManager.ShowValidationMessage(ex.Message);
      }
    }

    protected Dictionary<string, string> ImportAesKeysFromDeliveryNoteXml(string filePath)
    {
      if (string.IsNullOrEmpty(filePath))
        return (Dictionary<string, string>) null;
      Dictionary<string, string> dictionary = new Dictionary<string, string>();
      XmlDocument xmlDocument = new XmlDocument();
      xmlDocument.Load(filePath);
      XmlNode documentElement = (XmlNode) xmlDocument.DocumentElement;
      if (documentElement?.ChildNodes != null)
      {
        foreach (XmlNode childNode1 in documentElement.ChildNodes)
        {
          string key = (string) null;
          string str = (string) null;
          foreach (XmlNode childNode2 in childNode1.ChildNodes)
          {
            if (childNode2.LocalName == "SerialNo.Meter")
              key = childNode2.InnerText;
            if (childNode2.LocalName == "AES")
              str = childNode2?.Attributes["AesKey"]?.InnerText;
          }
          if (key != null && !dictionary.ContainsKey(key))
            dictionary.Add(key, str);
        }
      }
      return dictionary;
    }

    protected Dictionary<string, string> ImportAesKeysFromDeliveryNoteCsv(string filePath)
    {
      if (string.IsNullOrEmpty(filePath))
        return (Dictionary<string, string>) null;
      Dictionary<string, string> dictionary = new Dictionary<string, string>();
      List<string[]> source = new CSVManager().ReadStructureFromFile(filePath, new string[1]
      {
        ";"
      });
      if (source != null && source.Count > 1)
      {
        int index1 = ((IEnumerable<string>) source[0]).FindIndex<string>((Func<string, bool>) (item => item == "SerialNo. Meter"));
        int index2 = ((IEnumerable<string>) source[0]).FindIndex<string>((Func<string, bool>) (item => item == "AESKey"));
        foreach (string[] strArray in source.Skip<string[]>(1))
        {
          string key = strArray[index1];
          string str = strArray[index2];
          if (!string.IsNullOrWhiteSpace(key))
            dictionary.Add(key, str);
        }
      }
      return dictionary;
    }

    private bool UniqueMeter(ZENNER.CommonLibrary.Entities.Meter meter)
    {
      List<StructureNodeDTO> meters = StructuresHelper.GetMeters(new ObservableCollection<StructureNodeDTO>(StructuresHelper.Descendants(this.MBusSelectedItem.RootNode)));
      string inputNumber = string.Empty;
      string empty = string.Empty;
      if (meter.AdditionalInfo != null && meter.AdditionalInfo.Count > 0 && meter.AdditionalInfo.ContainsKey(AdditionalInfoKey.InputNumber))
        inputNumber = meter.AdditionalInfo[AdditionalInfoKey.InputNumber];
      if (meter.AdditionalInfo != null && meter.AdditionalInfo.Count > 0 && meter.AdditionalInfo.ContainsKey(AdditionalInfoKey.MainDeviceSecondaryAddress))
        empty = meter.AdditionalInfo[AdditionalInfoKey.MainDeviceSecondaryAddress];
      foreach (StructureNodeDTO structureNodeDto in meters)
      {
        if (structureNodeDto.Entity is MeterDTO entity)
        {
          if (!string.IsNullOrEmpty(empty))
          {
            if (entity.SerialNumber == empty && structureNodeDto.SubNodes != null && structureNodeDto.SubNodes.Select<StructureNodeDTO, MeterDTO>((Func<StructureNodeDTO, MeterDTO>) (childNode => childNode.Entity as MeterDTO)).Any<MeterDTO>((Func<MeterDTO, bool>) (childEntity => childEntity != null && childEntity.InputNumber == inputNumber)))
              return false;
          }
          else if (entity.SerialNumber == meter.SerialNumber)
            return false;
        }
      }
      return true;
    }

    public bool IsStartMBusScanButtonEnabled
    {
      get => this._isStartMBusScanButtonEnabled;
      set
      {
        this._isStartMBusScanButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsStartMBusScanButtonEnabled));
      }
    }

    public bool IsStopMBusScanButtonEnabled
    {
      get => this._isStopMBusScanButtonEnabled;
      set
      {
        this._isStopMBusScanButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsStopMBusScanButtonEnabled));
      }
    }

    public bool IsWalkByTestButtonEnabled
    {
      get => this._isWalkByTestButtonEnabled;
      set
      {
        this._isWalkByTestButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsWalkByTestButtonEnabled));
      }
    }

    public bool IsStopWalkByTestButtonEnabled
    {
      get => this._isStopWalkByTestButtonEnabled;
      set
      {
        this._isStopWalkByTestButtonEnabled = value;
        this.OnPropertyChanged(nameof (IsStopWalkByTestButtonEnabled));
      }
    }

    public bool IsRadioSelected
    {
      get => this._isRadioSelected;
      set
      {
        this._isRadioSelected = value;
        this.OnPropertyChanged(nameof (IsRadioSelected));
      }
    }

    public bool IsMeterSelected
    {
      get => this._isMeterSelected;
      set
      {
        this._isMeterSelected = value;
        this.OnPropertyChanged(nameof (IsMeterSelected));
      }
    }

    protected StructureNodeDTO MBusSelectedItem { get; set; }

    protected MeterMBusStateEnum GetMeterMBusState(
      string serialNumber,
      StructureNodeDTO selectedNode,
      IRepository<MSS.Core.Model.Meters.Meter> meterRepository,
      IRepository<StructureNode> structureNodeRepository,
      IRepository<StructureNodeLinks> structureNodeLinkRepository,
      out bool isInCurrentStructure)
    {
      isInCurrentStructure = false;
      if (selectedNode.SubNodes != null)
      {
        foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) selectedNode.SubNodes)
        {
          if (subNode.Entity is MeterDTO entity1 && entity1.SerialNumber == serialNumber)
            isInCurrentStructure = true;
          if (subNode.SubNodes != null && subNode.SubNodes.Any<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (s => s.Entity is MeterDTO entity2 && entity2.SerialNumber == serialNumber)))
            isInCurrentStructure = true;
        }
      }
      IList<MSS.Core.Model.Meters.Meter> meterList;
      if (meterRepository == null)
        meterList = (IList<MSS.Core.Model.Meters.Meter>) null;
      else
        meterList = meterRepository.SearchFor((Expression<Func<MSS.Core.Model.Meters.Meter, bool>>) (m => m.SerialNumber == serialNumber && !m.IsDeactivated));
      IList<MSS.Core.Model.Meters.Meter> source = meterList;
      if (source != null && source.Any<MSS.Core.Model.Meters.Meter>())
      {
        MSS.Core.Model.Meters.Meter existingMeter = source.First<MSS.Core.Model.Meters.Meter>();
        StructureNode node = structureNodeRepository.FirstOrDefault((Expression<Func<StructureNode, bool>>) (n => n.EntityId == existingMeter.Id && n.EndDate == new DateTime?()));
        if (node != null)
        {
          StructureNodeLinks structureNodeLinks = structureNodeLinkRepository.FirstOrDefault((Expression<Func<StructureNodeLinks, bool>>) (l => l.Node.Id == node.Id && l.EndDate == new DateTime?()));
          if (structureNodeLinks != null)
            return structureNodeLinks.RootNode.Id == selectedNode.RootNode.Id ? MeterMBusStateEnum.Update : (isInCurrentStructure ? MeterMBusStateEnum.ExistingMeterInAnotherStructureAndCurrentStructure : MeterMBusStateEnum.ExistingMeterInAnotherStructure);
        }
      }
      return isInCurrentStructure ? MeterMBusStateEnum.Update : MeterMBusStateEnum.New;
    }

    protected bool ReconstructCollectionWithoutInvalidMBusScannerMeters(
      ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      List<StructureNodeDTO> source = new List<StructureNodeDTO>();
      foreach (StructureNodeDTO node in (Collection<StructureNodeDTO>) nodeCollection)
      {
        StructureNodeTypeEnum structureNodeTypeEnum = (StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), node.NodeType.Name, true);
        if ((structureNodeTypeEnum == StructureNodeTypeEnum.Meter || structureNodeTypeEnum == StructureNodeTypeEnum.RadioMeter) && node.Entity is MeterDTO entity)
        {
          MeterMBusStateEnum? mbusStateEnum = entity.MBusStateEnum;
          MeterMBusStateEnum meterMbusStateEnum1 = MeterMBusStateEnum.ExistingMeterInAnotherStructure;
          int num;
          if ((mbusStateEnum.GetValueOrDefault() == meterMbusStateEnum1 ? (mbusStateEnum.HasValue ? 1 : 0) : 0) == 0)
          {
            mbusStateEnum = entity.MBusStateEnum;
            MeterMBusStateEnum meterMbusStateEnum2 = MeterMBusStateEnum.ExistingMeterInAnotherStructureAndCurrentStructure;
            num = mbusStateEnum.GetValueOrDefault() == meterMbusStateEnum2 ? (mbusStateEnum.HasValue ? 1 : 0) : 0;
          }
          else
            num = 1;
          if (num != 0)
            source.Add(node);
        }
      }
      if (!source.Any<StructureNodeDTO>())
        return true;
      bool? nullable = MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Warning_Title, Resources.MSS_Warning_InvalidMetersWillbeRemoved_Message, true);
      if (!nullable.HasValue || !nullable.Value)
        return false;
      foreach (StructureNodeDTO structureNodeDto in source)
        nodeCollection.Remove(structureNodeDto);
      return true;
    }

    protected void ShowActionSyncFinished(ActionSyncFinished obj)
    {
      switch (obj.Message.MessageType)
      {
        case MessageTypeEnum.Success:
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(obj.Message.MessageText);
          break;
        case MessageTypeEnum.Warning:
          this.IsStartMBusScanButtonEnabled = true;
          this.IsStopMBusScanButtonEnabled = false;
          this.IsWalkByTestButtonEnabled = true;
          this.IsStopWalkByTestButtonEnabled = false;
          ScanMinoConnectManager.IsScanningStarted = false;
          MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.MSS_Warning_Title, obj.Message.MessageText, false);
          break;
      }
    }

    protected bool ContinueActionIfMBusIsStarted(ScanMinoConnectManager scanMinoConnectManager)
    {
      bool flag = false;
      if (ScanMinoConnectManager.IsScanningStarted)
      {
        bool? nullable = MSSUIHelper.ShowWarningDialog(this._windowFactory, Resources.Warning_MBusScanning_Running_Title, Resources.Warning_MBusScanning_Running_Message, true);
        if (nullable.HasValue && nullable.Value)
        {
          scanMinoConnectManager.StopScan();
          this.IsStartMBusScanButtonEnabled = true;
          this.IsStopMBusScanButtonEnabled = false;
          this.IsWalkByTestButtonEnabled = true;
          this.IsStopWalkByTestButtonEnabled = false;
          ScanMinoConnectManager.IsScanningStarted = false;
          flag = true;
        }
      }
      else
        flag = true;
      return flag;
    }

    protected void UpdateEntities(ActionStructureAndEntitiesUpdate update)
    {
      this._updateMeterDTO = update.MeterDTO;
      this._node = update.Node;
      this._updatedLocation = update.Location;
      this._updatedTenant = update.Tenant;
      this._updatedMinomat = update.Minomat;
      this._name = update.Name;
      this._description = update.Description;
      if (update.Location != null)
      {
        if (!this.locationNumberList.Contains(update.Location.BuildingNr))
          this.locationNumberList.Add(update.Location.BuildingNr);
        this.UpdateRootNodeLocation(update.Location);
      }
      if (update.MeterDTO != null && !this.serialNumberList.Contains(update.MeterDTO.SerialNumber))
        this.serialNumberList.Add(update.MeterDTO.SerialNumber);
      if (update.Minomat != null)
        update.Node.Entity.SafeCast<MinomatSerializableDTO>().NetworkStatus = MinomatNetworkStatusEnum.New;
      if (this._updateMeterDTO != null)
      {
        this._node.Entity = (object) this._updateMeterDTO;
        ObservableCollection<StructureNodeDTO> structureCollection = this.GetStructureCollection();
        if (structureCollection.Any<StructureNodeDTO>() && structureCollection[0].NodeType == this._node.NodeType && !structureCollection.Contains(this._node))
          structureCollection.Add(this._node);
      }
      if (this._node != null)
      {
        this._node.Name = this._name;
        this._node.Description = this._description;
      }
      if (this._node != null)
      {
        if (this is EditPhysicalStructureViewModel)
          this.UpdateDevicesFoundLabel();
        else if (this is CreatePhysicalStructureViewModel)
          this.UpdateDevicesFoundLabel();
      }
      switch (update.Message.MessageType)
      {
        case MessageTypeEnum.Success:
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(update.Message.MessageText);
          break;
        case MessageTypeEnum.Warning:
          this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(update.Message.MessageText);
          break;
      }
    }

    private void UpdateRootNodeLocation(MSS.Core.Model.Structures.Location location)
    {
      LocationDTO locationEntity = new LocationDTO()
      {
        BuildingNr = location.BuildingNr,
        City = location.City,
        Description = location.City,
        DueDate = location.DueDate,
        Generation = location.Generation,
        HasMaster = location.HasMaster,
        Id = location.Id,
        IsDeactivated = location.IsDeactivated,
        LastChangedOn = location.LastChangedOn,
        Scale = location.Scale,
        Scenario = location.Scenario,
        Status = location.Status,
        Street = location.Street,
        ZipCode = location.ZipCode
      };
      StructureNodeDTO structureNodeDto = (StructureNodeDTO) null;
      string propertyName = string.Empty;
      switch (this)
      {
        case EditFixedStructureViewModel _:
          structureNodeDto = ((EditFixedStructureViewModel) this).StructureForSelectedNode.ElementAt<StructureNodeDTO>(0);
          this.UpdateRootNodeForFixedStructureNodes(((EditFixedStructureViewModel) this).StructureForSelectedNode.ElementAt<StructureNodeDTO>(0).SubNodes, structureNodeDto);
          propertyName = "StructureForSelectedNode";
          break;
        case CreateFixedStructureViewModel _:
          structureNodeDto = ((CreateFixedStructureViewModel) this).FixedStructureNodeCollection.ElementAt<StructureNodeDTO>(0);
          this.UpdateRootNodeForFixedStructureNodes(((CreateFixedStructureViewModel) this).FixedStructureNodeCollection.ElementAt<StructureNodeDTO>(0).SubNodes, structureNodeDto);
          propertyName = "FixedStructureNodeCollection";
          break;
      }
      this.UpdateLocationEntity(structureNodeDto, locationEntity);
      this.OnPropertyChanged(propertyName);
    }

    private void UpdateLocationEntity(StructureNodeDTO locationNode, LocationDTO locationEntity)
    {
      if (locationNode == null)
        return;
      locationNode.Entity = (object) locationEntity;
    }

    private void UpdateRootNodeForFixedStructureNodes(
      ObservableCollection<StructureNodeDTO> subnodes,
      StructureNodeDTO rootNode)
    {
      if (subnodes == null)
        return;
      TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) subnodes, (Action<StructureNodeDTO>) (t =>
      {
        t.RootNode = rootNode;
        t.ParentNode = rootNode;
        if (t.SubNodes == null || t.SubNodes.Count <= 0)
          return;
        TypeHelperExtensionMethods.ForEach<StructureNodeDTO>((IEnumerable<StructureNodeDTO>) t.SubNodes, (Action<StructureNodeDTO>) (m => m.RootNode = rootNode));
      }));
    }

    protected bool? EditSelectedStructureNode(
      StructureNodeDTO node,
      bool isReplacedMeter = false,
      string orderNumber = null)
    {
      ObservableCollection<StructureNodeDTO> structureCollection = this.GetStructureCollection();
      bool? nullable = new bool?();
      string name = node.NodeType?.Name;
      if (name == null)
        return new bool?(false);
      bool flag = node.Entity != null;
      switch ((StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), name, true))
      {
        case StructureNodeTypeEnum.Location:
          nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateEditLocationViewModel>((IParameter) new ConstructorArgument("isExistingEntity", (object) flag), (IParameter) new ConstructorArgument(nameof (node), (object) node), (IParameter) new ConstructorArgument("locationNumberList", (object) this.locationNumberList)));
          if (!nullable.HasValue || !nullable.Value)
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
          if (this._updatedLocation != null)
          {
            LocationDTO locationDto = Mapper.Map<MSS.Core.Model.Structures.Location, LocationDTO>(this._updatedLocation);
            node.Entity = (object) locationDto;
            break;
          }
          break;
        case StructureNodeTypeEnum.Tenant:
          List<int> localTenantNrs = StructureViewModelBase.GetLocalTenantNrs((IEnumerable<StructureNodeDTO>) structureCollection);
          if (node.Entity != null)
            localTenantNrs.Remove((node.Entity as TenantDTO).TenantNr);
          nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<CreateEditTenantViewModel>((IParameter) new ConstructorArgument("isExistingEntity", (object) flag), (IParameter) new ConstructorArgument(nameof (node), (object) node), (IParameter) new ConstructorArgument("localStructureTenantNrs", (object) localTenantNrs)));
          if (!nullable.HasValue || !nullable.Value)
          {
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
            break;
          }
          if (this._updatedTenant != null)
          {
            TenantDTO tenantDto = Mapper.Map<Tenant, TenantDTO>(this._updatedTenant);
            node.Entity = (object) tenantDto;
          }
          break;
        case StructureNodeTypeEnum.Meter:
        case StructureNodeTypeEnum.RadioMeter:
          DeviceStateEnum deviceStateEnum = !isReplacedMeter ? (!flag ? DeviceStateEnum.Create : DeviceStateEnum.Edit) : DeviceStateEnum.Replace;
          DeviceViewModel deviceViewModel = (DeviceViewModel) null;
          switch (deviceStateEnum)
          {
            case DeviceStateEnum.Create:
              deviceViewModel = (DeviceViewModel) DIConfigurator.GetConfigurator().Get<CreateDeviceViewModel>((IParameter) new ConstructorArgument("deviceState", (object) DeviceStateEnum.Create), (IParameter) new ConstructorArgument(nameof (node), (object) node), (IParameter) new ConstructorArgument("serialNumberList", (object) this.serialNumberList));
              break;
            case DeviceStateEnum.Edit:
              this.serialNumberList.Remove(node.Entity is MeterDTO entity ? entity.SerialNumber : (string) null);
              deviceViewModel = (DeviceViewModel) DIConfigurator.GetConfigurator().Get<EditDeviceViewModel>((IParameter) new ConstructorArgument("deviceState", (object) DeviceStateEnum.Edit), (IParameter) new ConstructorArgument(nameof (node), (object) node), (IParameter) new ConstructorArgument("serialNumberList", (object) this.serialNumberList));
              break;
            case DeviceStateEnum.Replace:
              deviceViewModel = (DeviceViewModel) DIConfigurator.GetConfigurator().Get<ReplaceDeviceViewModel>((IParameter) new ConstructorArgument("deviceState", (object) DeviceStateEnum.Replace), (IParameter) new ConstructorArgument(nameof (node), (object) node), (IParameter) new ConstructorArgument("serialNumberList", (object) this.serialNumberList));
              break;
          }
          nullable = this._windowFactory.CreateNewModalDialog((IViewModel) deviceViewModel, new object[1]
          {
            (object) node
          });
          if (!nullable.HasValue || !nullable.Value)
          {
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
            break;
          }
          break;
        case StructureNodeTypeEnum.MinomatMaster:
          StructureTypeEnum? structureType1 = node.StructureType;
          StructureTypeEnum structureTypeEnum1 = StructureTypeEnum.Fixed;
          if (structureType1.GetValueOrDefault() == structureTypeEnum1 && structureType1.HasValue)
          {
            nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditMinomatMasterViewModel>((IParameter) new ConstructorArgument(nameof (node), (object) node), (IParameter) new ConstructorArgument(nameof (orderNumber), (object) orderNumber)));
            if (!nullable.HasValue || !nullable.Value)
              this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
            else if (this._updatedMinomat != null)
            {
              MinomatSerializableDTO minomatSerializableDto = Mapper.Map<Minomat, MinomatSerializableDTO>(this._updatedMinomat);
              if (this._updatedMinomat.Country != null)
                minomatSerializableDto.CountryId = this._updatedMinomat.Country.Id;
              node.Entity = (object) minomatSerializableDto;
            }
            break;
          }
          break;
        case StructureNodeTypeEnum.MinomatSlave:
          StructureTypeEnum? structureType2 = node.StructureType;
          StructureTypeEnum structureTypeEnum2 = StructureTypeEnum.Fixed;
          if (structureType2.GetValueOrDefault() == structureTypeEnum2 && structureType2.HasValue)
          {
            nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditMinomatSlaveViewModel>((IParameter) new ConstructorArgument(nameof (node), (object) node), (IParameter) new ConstructorArgument("repositoryFactory", (object) this._repositoryFactory), (IParameter) new ConstructorArgument(nameof (orderNumber), (object) orderNumber)));
            if (!nullable.HasValue || !nullable.Value)
              this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
            else if (this._updatedMinomat != null)
            {
              MinomatSerializableDTO minomatSerializableDto = Mapper.Map<Minomat, MinomatSerializableDTO>(this._updatedMinomat);
              if (this._updatedMinomat.Country != null)
                minomatSerializableDto.CountryId = this._updatedMinomat.Country.Id;
              node.Entity = (object) minomatSerializableDto;
            }
            break;
          }
          break;
        default:
          nullable = this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<EditGenericEntityViewModel>((IParameter) new ConstructorArgument(nameof (node), (object) node)));
          if (!nullable.HasValue || !nullable.Value)
          {
            this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(Resources.MSS_Client_OperationCancelledMessage);
            break;
          }
          break;
      }
      return nullable;
    }

    private static List<int> GetLocalTenantNrs(IEnumerable<StructureNodeDTO> structureCollection)
    {
      List<int> localTenantNrs = new List<int>();
      foreach (StructureNodeDTO structure in structureCollection)
      {
        foreach (StructureNodeDTO descendant in StructuresHelper.Descendants(structure.RootNode))
        {
          if (descendant.Entity != null)
          {
            string name = descendant.NodeType?.Name;
            if (name != null && (StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), name, true) == StructureNodeTypeEnum.Tenant)
            {
              int tenantNr = (descendant.Entity as TenantDTO).TenantNr;
              localTenantNrs.Add(tenantNr);
            }
          }
        }
      }
      return localTenantNrs;
    }

    private static List<string> GetLocalMinomatsNrs(
      IEnumerable<StructureNodeDTO> structureCollection)
    {
      List<string> localMinomatsNrs = new List<string>();
      foreach (StructureNodeDTO structure in structureCollection)
      {
        foreach (StructureNodeDTO descendant in StructuresHelper.Descendants(structure.RootNode))
        {
          if (descendant.Entity != null)
          {
            string name = descendant.NodeType?.Name;
            if (name != null)
            {
              switch ((StructureNodeTypeEnum) Enum.Parse(typeof (StructureNodeTypeEnum), name, true))
              {
                case StructureNodeTypeEnum.MinomatMaster:
                case StructureNodeTypeEnum.MinomatSlave:
                  string radioId = (descendant.Entity as MinomatSerializableDTO).RadioId;
                  localMinomatsNrs.Add(radioId);
                  break;
              }
            }
          }
        }
      }
      return localMinomatsNrs;
    }

    protected ObservableCollection<StructureNodeDTO> ReconstructNodeCollection(
      ObservableCollection<StructureNodeDTO> actualNodeCollection,
      StructureNodeDTO parentForSelectedNode)
    {
      foreach (StructureNodeDTO node in actualNodeCollection.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (s => s.ParentNode == null && s.RootNode == s)))
      {
        StructureNodeDTO rootNode;
        if (parentForSelectedNode == null)
        {
          rootNode = node;
          node.ParentNode = (StructureNodeDTO) null;
          node.RootNode = rootNode;
        }
        else
        {
          rootNode = parentForSelectedNode.RootNode != parentForSelectedNode ? parentForSelectedNode.RootNode : parentForSelectedNode;
          node.ParentNode = parentForSelectedNode;
          node.RootNode = rootNode;
        }
        StructureViewModelBase.SetRootForChildren(node, rootNode);
      }
      foreach (StructureNodeDTO structureNodeDto1 in actualNodeCollection.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (s => s.ParentNode == null && s.RootNode == null)))
      {
        if (parentForSelectedNode != null)
        {
          StructureNodeDTO structureNodeDto2 = parentForSelectedNode.RootNode != parentForSelectedNode ? parentForSelectedNode.RootNode : parentForSelectedNode;
          structureNodeDto1.ParentNode = parentForSelectedNode;
          structureNodeDto1.RootNode = structureNodeDto2;
        }
      }
      foreach (StructureNodeDTO structureNodeDto3 in actualNodeCollection.Where<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (s =>
      {
        StructureTypeEnum? structureType = s.StructureType;
        StructureTypeEnum structureTypeEnum = StructureTypeEnum.Logical;
        return (structureType.GetValueOrDefault() == structureTypeEnum ? (structureType.HasValue ? 1 : 0) : 0) != 0 && s.RootNode == null;
      })))
      {
        if (parentForSelectedNode != null)
        {
          StructureNodeDTO structureNodeDto4 = parentForSelectedNode.RootNode != parentForSelectedNode ? parentForSelectedNode.RootNode : parentForSelectedNode;
          structureNodeDto3.ParentNode = parentForSelectedNode;
          structureNodeDto3.RootNode = structureNodeDto4;
        }
      }
      return actualNodeCollection;
    }

    private static void SetRootForChildren(StructureNodeDTO node, StructureNodeDTO rootNode)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
      {
        subNode.RootNode = rootNode;
        StructureViewModelBase.SetRootForChildren(subNode, rootNode);
      }
    }

    protected bool? ShowWarningWithStructuresToDeleteDialog(
      ObservableCollection<StructureNodeDTO> physicalStructureNodeDTOToDelete,
      ObservableCollection<StructureNodeDTO> logicalStructureNodeDTOToDelete)
    {
      return this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<DeleteStructureViewModel>((IParameter) new ConstructorArgument("structureToDelete", (object) physicalStructureNodeDTOToDelete), (IParameter) new ConstructorArgument("otherAffectedStructures", (object) logicalStructureNodeDTOToDelete)));
    }

    public void RemoveSelectedNodeFromStructure(
      StructureNodeDTO selectedNode,
      ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      foreach (StructureNodeDTO node in (Collection<StructureNodeDTO>) nodeCollection)
      {
        if (node == selectedNode)
        {
          nodeCollection.Remove(node);
          break;
        }
        this.RemoveSelectedNodeFromStructure(selectedNode, node.SubNodes);
      }
    }

    public void RemoveSelectedNodeFromStructureById(
      Guid selectedNodeId,
      ObservableCollection<StructureNodeDTO> nodeCollection)
    {
      foreach (StructureNodeDTO node in (Collection<StructureNodeDTO>) nodeCollection)
      {
        if (selectedNodeId != Guid.Empty && node.Id == selectedNodeId)
        {
          nodeCollection.Remove(node);
          break;
        }
        this.RemoveSelectedNodeFromStructureById(selectedNodeId, node.SubNodes);
      }
    }

    protected void RemoveSerialNumberFromUniquenessList(StructureNodeDTO selectedNode)
    {
      if (!(selectedNode.Entity is MeterDTO entity))
        return;
      this.serialNumberList.Remove(entity.SerialNumber);
    }

    protected void UpdateSerialNumberListForReadingOrder(bool updatedForReadingOrder)
    {
      if (!updatedForReadingOrder)
        return;
      foreach (StructureNodeDTO meter in StructuresHelper.GetMeters(this.GetStructureCollection()))
      {
        if (meter.Entity is MeterDTO entity)
        {
          if (!this.serialNumberList.Contains(entity.SerialNumber))
            this.serialNumberList.Add(entity.SerialNumber);
          List<MeterReplacementHistorySerializableDTO> replacementHistoryList = entity.MeterReplacementHistoryList;
          if (replacementHistoryList != null && replacementHistoryList.Count > 0)
            replacementHistoryList.ForEach((Action<MeterReplacementHistorySerializableDTO>) (h =>
            {
              if (this.serialNumberList.Contains(h.ReplacedMeterSerialNumber))
                return;
              this.serialNumberList.Add(h.ReplacedMeterSerialNumber);
            }));
        }
      }
    }

    private bool HasRadioAsParent()
    {
      if (this.SelectedItem == null)
        throw new Exception(CultureResources.GetValue("MSS_Client_Select_Node"));
      if (this.SelectedItem.NodeType.Name == "Radio")
        return true;
      for (StructureNodeDTO structureNodeDto = this.SelectedItem; structureNodeDto.ParentNode != null; structureNodeDto = structureNodeDto.ParentNode)
      {
        if (structureNodeDto.ParentNode.NodeType.Name == "Radio")
          return true;
      }
      return false;
    }

    private bool CurrentStructureContainsSerialNumber(
      StructureNodeDTO nodeInCurrentStructure,
      string serialNumber)
    {
      StructureNodeDTO rootNode = nodeInCurrentStructure.RootNode;
      List<string> serialNumberList = new List<string>();
      this.WalkTreeAndUpdateSerialNumbersList(rootNode, ref serialNumberList);
      return serialNumberList.Contains(serialNumber);
    }

    private void WalkTreeAndUpdateSerialNumbersList(
      StructureNodeDTO node,
      ref List<string> serialNumberList)
    {
      if (node.Entity != null && node.Entity is MeterDTO)
      {
        string serialNumber = (node.Entity as MeterDTO).SerialNumber;
        if (!serialNumberList.Contains(serialNumber))
          serialNumberList.Add(serialNumber);
      }
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
        this.WalkTreeAndUpdateSerialNumbersList(subNode, ref serialNumberList);
    }

    protected bool IsItemNonEditable(StructureNodeDTO node)
    {
      bool flag = false;
      StructureTypeEnum? structureType = node.StructureType;
      StructureTypeEnum structureTypeEnum = StructureTypeEnum.Physical;
      if ((structureType.GetValueOrDefault() == structureTypeEnum ? (structureType.HasValue ? 1 : 0) : 0) != 0 && (node.NodeType.Name == "Meter" || node.NodeType.Name == "RadioMeter"))
        flag = !(node.Entity is MeterDTO entity) || !StructureViewModelBase.deviceModelsInLicense.Contains(entity.DeviceType.GetGMMDeviceModelName());
      return flag;
    }

    protected void CalculateNoOfDevicesForAllTenants(StructureNodeDTO root)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) root.SubNodes)
      {
        if (subNode.NodeType.Name == "Tenant" && subNode.Entity is TenantDTO entity)
        {
          int? nullable = new int?(subNode.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
          entity.NoOfDevices = nullable;
        }
      }
    }

    protected void CalculateNoOfDevicesForTenantParent(StructureNodeDTO meterNode)
    {
      StructureNodeDTO structureNodeDto = meterNode;
      while (structureNodeDto.ParentNode != null && structureNodeDto != structureNodeDto.RootNode && structureNodeDto.NodeType.Name != "Tenant")
        structureNodeDto = structureNodeDto.ParentNode;
      if (!(structureNodeDto.NodeType.Name == "Tenant"))
        return;
      if (!(structureNodeDto.Entity is TenantDTO tenantDto))
        tenantDto = new TenantDTO();
      tenantDto.NoOfDevices = new int?(structureNodeDto.SubNodes.Count<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.NodeType.Name == "Meter")));
    }

    public void OnMissingTranslationRule(object sender, string e)
    {
      this._serialNumbersOfMetersThatAreMissingTranslationRules.Add(e);
    }

    protected void RemoveSerialNumberOfMeterThatIsMissingTranslationRulesFromList(
      string serialNumber)
    {
      this._serialNumbersOfMetersThatAreMissingTranslationRules.Remove(serialNumber);
    }

    protected void WalkStructure(StructureNodeDTO node, ref int meters)
    {
      foreach (StructureNodeDTO subNode in (Collection<StructureNodeDTO>) node.SubNodes)
      {
        if (subNode.NodeType.Name == "Meter" || subNode.NodeType.Name == "RadioMeter")
          ++meters;
        this.WalkStructure(subNode, ref meters);
      }
    }

    protected void GetMetersInStructure(StructureNodeDTO node, out int meters)
    {
      meters = 0;
      if (node == null)
        return;
      if (node.NodeType.Name == "Meter" || node.NodeType.Name == "RadioMeter")
        ++meters;
      this.WalkStructure(node, ref meters);
    }

    protected virtual void UpdateDevicesFoundLabel() => throw new NotImplementedException();

    protected Dictionary<string, string> GetMetersWithAesKeysFromDeliveryNote(
      int filterIndex,
      string fileName)
    {
      Dictionary<string, string> fromDeliveryNote = (Dictionary<string, string>) null;
      switch (filterIndex)
      {
        case 1:
          fromDeliveryNote = this.ImportAesKeysFromDeliveryNoteCsv(fileName);
          break;
        case 2:
          fromDeliveryNote = this.ImportAesKeysFromDeliveryNoteXml(fileName);
          break;
      }
      return fromDeliveryNote;
    }

    protected void ImportDeliveryNote(
      ObservableCollection<StructureNodeDTO> structureForSelectedNode)
    {
      if (structureForSelectedNode == null || structureForSelectedNode.Count == 0)
        return;
      try
      {
        Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
        OpenFileDialog openFileDialog1 = new OpenFileDialog();
        openFileDialog1.Filter = "CSV Document|*.csv|XML Document|*.xml";
        openFileDialog1.Title = Resources.MSS_Client_ImportDeliveryNoteFromFile;
        openFileDialog1.RestoreDirectory = true;
        OpenFileDialog openFileDialog2 = openFileDialog1;
        bool? nullable = openFileDialog2.ShowDialog();
        if (!nullable.HasValue || !nullable.Value)
        {
          this.MessageUserControl = MessageHandlingManager.ShowWarningMessage(MessageCodes.OperationCancelled.GetStringValue());
        }
        else
        {
          if (openFileDialog2.FileName == string.Empty)
            return;
          Dictionary<string, string> fromDeliveryNote = this.GetMetersWithAesKeysFromDeliveryNote(openFileDialog2.FilterIndex, openFileDialog2.FileName);
          if (fromDeliveryNote != null && fromDeliveryNote.Any<KeyValuePair<string, string>>())
          {
            List<StructureNodeDTO> radioMeters = StructuresHelper.GetRadioMeters(structureForSelectedNode);
            foreach (KeyValuePair<string, string> keyValuePair in fromDeliveryNote)
            {
              KeyValuePair<string, string> meterWithKey = keyValuePair;
              StructureNodeDTO structureNodeDto1 = radioMeters.FirstOrDefault<StructureNodeDTO>((Func<StructureNodeDTO, bool>) (item => item.Entity != null && item.Entity is MeterDTO && (item.Entity as MeterDTO).SerialNumber == meterWithKey.Key));
              if (structureNodeDto1 != null && structureNodeDto1.Entity is MeterDTO)
              {
                (structureNodeDto1.Entity as MeterDTO).AES = meterWithKey.Value;
              }
              else
              {
                MeterDTO meterDto = new MeterDTO();
                meterDto.SerialNumber = meterWithKey.Key;
                meterDto.AES = meterWithKey.Value;
                meterDto.DeviceType = DeviceTypeEnum.GenericWMBus;
                StructureNodeDTO structureNodeDto2 = new StructureNodeDTO();
                structureNodeDto2.Name = "RadioMeter";
                structureNodeDto2.Description = "";
                structureNodeDto2.NodeType = this._structureNodeTypeRepository.FirstOrDefault((Expression<Func<StructureNodeType, bool>>) (item => item.Name == "RadioMeter"));
                structureNodeDto2.Entity = (object) meterDto;
                structureNodeDto2.StructureType = new StructureTypeEnum?(StructureTypeEnum.Physical);
                structureNodeDto2.ParentNode = this.SelectedItem;
                StructureNodeDTO node = structureNodeDto2;
                node.Image = StructuresHelper.GetImageForNode(node, true);
                node.ParentNode.SubNodes.Add(node);
                node.IsMeterNonEditable = this.IsItemNonEditable(node);
              }
            }
            if (this is EditPhysicalStructureViewModel)
              this.UpdateDevicesFoundLabel();
            else if (this is CreatePhysicalStructureViewModel)
              this.UpdateDevicesFoundLabel();
          }
          this.MessageUserControl = MessageHandlingManager.ShowSuccessMessage(MessageCodes.Success_Operation.GetStringValue());
        }
      }
      catch (Exception ex)
      {
        MSS.Business.Errors.MessageHandler.LogException(ex, MessageCodes.Error);
        this._windowFactory.CreateNewModalDialog((IViewModel) DIConfigurator.GetConfigurator().Get<GenericMessageViewModel>((IParameter) new ConstructorArgument("title", (object) Resources.MSS_Warning_Title), (IParameter) new ConstructorArgument("message", (object) (ex.Message + Environment.NewLine + Resources.MSS_Client_CheckFileFormat)), (IParameter) new ConstructorArgument("isCancelButtonVisible", (object) false)));
      }
    }
  }
}


--- WarningWithListBoxViewModel.cs ---

ï»¿// Decompiled with JetBrains decompiler
// Type: MSS_Client.ViewModel.Structures.WarningWithListBoxViewModel
// Assembly: MSS_Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 04E68651-4483-4E77-961C-A6C12FC6E4D6
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\MSS_Client.exe

using MVVM.Commands;
using MVVM.ViewModel;
using System;
using System.Collections.Generic;
using System.Windows.Input;

#nullable disable
namespace MSS_Client.ViewModel.Structures
{
  public class WarningWithListBoxViewModel : ViewModelBase
  {
    public WarningWithListBoxViewModel(List<string> existingItems, string warningMessage)
    {
      this.WindowHeight = existingItems.Count > 0 ? "410" : "280";
      this.WarningMessage = warningMessage;
      this.ExistingItems = existingItems;
    }

    public string WarningMessage { get; set; }

    public string WindowHeight { get; set; }

    public List<string> ExistingItems { get; set; }

    public ICommand YesCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          this.OnRequestClose(true);
        });
      }
    }

    public ICommand NoCommand
    {
      get
      {
        return (ICommand) new RelayCommand((Action<object>) delegate
        {
          this.OnRequestClose(false);
        });
      }
    }
  }
}

