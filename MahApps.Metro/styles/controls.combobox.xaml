<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:MahApps.Metro.Controls"
                    xmlns:converters="clr-namespace:MahApps.Metro.Converters">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.TextBox.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
  <Style x:Key="EditableTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MetroTextBox}">
    <Setter Property="FrameworkElement.MinHeight" Value="26"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="enterGotFocus">
              <DoubleAnimation Duration="0:0:0.2" To=".2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Message"/>
            </Storyboard>
            <Storyboard x:Key="exitGotFocus">
              <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Message"/>
            </Storyboard>
            <Storyboard x:Key="enterHasText">
              <DoubleAnimation Duration="0:0:0.2" From=".2" To="0" Storyboard.TargetProperty="Opacity"
                               Storyboard.TargetName="PART_Message"/>
            </Storyboard>
            <Storyboard x:Key="exitHasText">
              <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Message"/>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <Border x:Name="Base" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"/>
            <Grid x:Name="PART_InnerGrid" Margin="2">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition x:Name="ButtonColumn"
                                  Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ButtonWidth), Mode=OneWay}"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition x:Name="ButtonRow" Height="*"/>
              </Grid.RowDefinitions>
              <Border x:Name="ReadOnlyVisualElement" Grid.Row="1" Grid.ColumnSpan="2" Opacity="0" Background="{x:Null}"/>
              <ScrollViewer x:Name="PART_ContentHost" Grid.Column="0" Grid.Row="1" BorderThickness="0" IsTabStop="false"
                            Margin="2" VerticalAlignment="Stretch" Background="{x:Null}"/>
              <TextBlock x:Name="PART_Message" Grid.Column="0" Grid.Row="1"
                         Text="{TemplateBinding Controls:TextBoxHelper.Watermark}"
                         Padding="{TemplateBinding Control.Padding}" Visibility="Collapsed"
                         Foreground="{TemplateBinding Control.Foreground}" IsHitTestVisible="false" Opacity="0.6"
                         HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                         VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="4,2,2,2"/>
              <ContentControl x:Name="PART_FloatingMessageContainer" Style="{DynamicResource FloatingMessageContainerStyle}"
                              Grid.Column="0" Grid.ColumnSpan="2">
                <TextBlock x:Name="PART_FloatingMessage" Text="{TemplateBinding Controls:TextBoxHelper.Watermark}"
                           Foreground="{TemplateBinding Control.Foreground}"
                           HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                           VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                           Style="{DynamicResource MetroAutoCollapsingTextBlock}"/>
              </ContentControl>
              <Button x:Name="PART_ClearText" Grid.Column="1" Grid.RowSpan="2"
                      Style="{DynamicResource ChromelessButtonStyle}" FontSize="16"
                      Foreground="{TemplateBinding Control.Foreground}" IsTabStop="false"
                      FontFamily="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:TextBoxHelper.ButtonFontFamily), Mode=OneWay}"
                      Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:TextBoxHelper.ButtonContent), Mode=OneWay}"
                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:TextBoxHelper.ClearTextButton), Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
                      Controls:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:TextBoxHelper.ClearTextButton), Mode=OneWay}"/>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Value="" Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}">
              <Setter TargetName="PART_Message" Property="UIElement.Visibility" Value="Visible"/>
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(Controls:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}"
                           Value="True"/>
                <Condition Binding="{Binding Path=(Controls:TextBoxHelper.HasText), RelativeSource={RelativeSource Self}}"
                           Value="True"/>
              </MultiDataTrigger.Conditions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource ShowFloatingMessageStoryboard}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HideFloatingMessageStoryboard}"/>
              </TriggerBase.ExitActions>
            </MultiDataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="TextBox.TextWrapping" Value="NoWrap"/>
                <Condition Property="TextBoxBase.AcceptsReturn" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="ButtonColumn" Value="{Binding ElementName=ButtonRow, Path=ActualHeight, Mode=OneWay}"
                      Property="ColumnDefinition.Width"/>
            </MultiTrigger>
            <DataTrigger Value="False"
                         Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:TextBoxHelper.ClearTextButton)}">
              <Setter TargetName="PART_ContentHost" Property="Grid.ColumnSpan" Value="2"/>
              <Setter TargetName="PART_Message" Property="Grid.ColumnSpan" Value="2"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Base"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.MouseOverBorderBrush)}"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
              <Setter TargetName="PART_ClearText" Property="UIElement.IsEnabled" Value="false"/>
              <Setter TargetName="ReadOnlyVisualElement" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="Base"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="PART_FloatingMessage" Value="{DynamicResource AccentColorBrush}"
                      Property="TextBlock.Foreground"/>
              <Setter TargetName="PART_FloatingMessage" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
            <Trigger SourceName="PART_ClearText" Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_ClearText" Value="{DynamicResource GrayBrush8}" Property="Control.Background"/>
              <Setter TargetName="PART_ClearText" Value="{DynamicResource AccentColorBrush}"
                      Property="Control.Foreground"/>
            </Trigger>
            <Trigger SourceName="PART_ClearText" Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_ClearText" Value="{DynamicResource BlackBrush}" Property="Control.Background"/>
              <Setter TargetName="PART_ClearText" Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Controls:TextBoxHelper.HasText" Value="false"/>
                <Condition Property="UIElement.IsFocused" Value="true"/>
              </MultiTrigger.Conditions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource enterGotFocus}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource exitGotFocus}"/>
              </TriggerBase.ExitActions>
            </MultiTrigger>
            <Trigger Property="Controls:TextBoxHelper.HasText" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource enterHasText}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource exitHasText}"/>
              </TriggerBase.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.MinHeight" Value="26"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource ControlBackgroundBrush}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
    <Setter Property="Controls:ControlsHelper.FocusBorderBrush"
            Value="{DynamicResource ComboBoxMouseOverInnerBorderBrush}"/>
    <Setter Property="Controls:ControlsHelper.MouseOverBorderBrush"
            Value="{DynamicResource TextBoxMouseOverBorderBrush}"/>
    <Setter Property="Control.FontFamily" Value="{DynamicResource ContentFontFamily}"/>
    <Setter Property="Control.FontSize" Value="{DynamicResource ContentFontSize}"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{DynamicResource MetroComboBoxItem}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorTemplate}"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="enterGotFocus">
              <DoubleAnimation Duration="0:0:0.2" To=".2" Storyboard.TargetProperty="Opacity"
                               Storyboard.TargetName="PART_WatermarkMessage"/>
            </Storyboard>
            <Storyboard x:Key="exitGotFocus">
              <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity"
                               Storyboard.TargetName="PART_WatermarkMessage"/>
            </Storyboard>
            <Storyboard x:Key="enterHasText">
              <DoubleAnimation Duration="0:0:0.2" From=".2" To="0" Storyboard.TargetProperty="Opacity"
                               Storyboard.TargetName="PART_WatermarkMessage"/>
            </Storyboard>
            <Storyboard x:Key="exitHasText">
              <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity"
                               Storyboard.TargetName="PART_WatermarkMessage"/>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <FrameworkElement.Resources>
              <Style x:Key="comboToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Control.Padding" Value="3"/>
                <Setter Property="Control.Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                      <Grid x:Name="ToggleButtonRootGrid">
                        <Border x:Name="Background" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Background="{TemplateBinding Control.Background}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}"/>
                        <Grid Margin="1">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="{Binding ElementName=ToggleButtonRootGrid, Path=ActualHeight, Mode=OneWay}"/>
                            <ColumnDefinition Width="{Binding ElementName=ToggleButtonRootGrid, Path=ActualHeight, Mode=OneWay}"/>
                          </Grid.ColumnDefinitions>
                          <Button x:Name="PART_ClearText" Grid.Column="1" FontSize="16"
                                  Style="{DynamicResource ChromelessButtonStyle}" Foreground="{TemplateBinding Control.Foreground}"
                                  FontFamily="Marlett" IsTabStop="false"
                                  Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(Controls:TextBoxHelper.ButtonContent), Mode=OneWay}"
                                  Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(Controls:TextBoxHelper.ClearTextButton), Converter={StaticResource BooleanToVisibilityConverter}}"
                                  Controls:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(Controls:TextBoxHelper.ClearTextButton), Mode=OneWay}"/>
                          <Rectangle x:Name="BtnArrowBackground" Grid.Column="2" Fill="Transparent" StrokeThickness="0"/>
                          <Path x:Name="BtnArrow" Grid.Column="2" IsHitTestVisible="false"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                Data="F1 M 301.14,-189.041 L 311.57,-189.041 306.355,-182.942 301.14,-189.041 Z"
                                HorizontalAlignment="Center" Height="4" Stretch="Uniform" Width="8"
                                Fill="{DynamicResource GrayBrush1}"/>
                        </Grid>
                      </Grid>
                      <ControlTemplate.Triggers>
                        <Trigger SourceName="BtnArrowBackground" Property="UIElement.IsMouseOver" Value="true">
                          <Setter TargetName="BtnArrowBackground" Value="{DynamicResource GrayBrush5}" Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger SourceName="PART_ClearText" Property="UIElement.IsMouseOver" Value="true">
                          <Setter TargetName="PART_ClearText" Value="{DynamicResource GrayBrush8}" Property="Control.Background"/>
                          <Setter TargetName="PART_ClearText" Value="{DynamicResource AccentColorBrush}"
                                  Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger SourceName="PART_ClearText" Property="ButtonBase.IsPressed" Value="true">
                          <Setter TargetName="PART_ClearText" Value="{DynamicResource BlackBrush}" Property="Control.Background"/>
                          <Setter TargetName="PART_ClearText" Value="{DynamicResource WhiteBrush}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                          <Setter TargetName="Background" Value="{DynamicResource GrayBrush8}" Property="Border.Background"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                          <Setter TargetName="Background" Value="{DynamicResource GrayBrush7}" Property="Border.Background"/>
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </FrameworkElement.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused"/>
                <VisualState x:Name="Unfocused"/>
                <VisualState x:Name="FocusedDropDown">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Duration="00:00:00" Storyboard.TargetProperty="(UIElement.Visibility)"
                                                   Storyboard.TargetName="PopupBorder">
                      <DiscreteObjectKeyFrame KeyTime="00:00:00">
                        <ObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </ObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualHeight, Mode=OneWay}"/>
                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=ActualHeight, Mode=OneWay}"/>
              </Grid.ColumnDefinitions>
              <ToggleButton x:Name="PART_DropDownToggle" Grid.ColumnSpan="3" Style="{DynamicResource comboToggleStyle}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                            Foreground="{TemplateBinding Control.Foreground}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            Background="{TemplateBinding Control.Background}" Margin="0" VerticalAlignment="Stretch"
                            KeyboardNavigation.IsTabStop="false"
                            Controls:ControlsHelper.CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              <TextBox x:Name="PART_EditableTextBox" Style="{StaticResource EditableTextBoxStyle}" Visibility="Collapsed"
                       HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                       HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                       VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" BorderThickness="0"
                       Margin="1,1,0,-1"
                       Controls:TextBoxHelper.Watermark="{TemplateBinding Controls:TextBoxHelper.Watermark}"
                       Controls:TextBoxHelper.UseFloatingWatermark="{TemplateBinding Controls:TextBoxHelper.UseFloatingWatermark}"
                       Controls:TextBoxHelper.HasText="{TemplateBinding Controls:TextBoxHelper.HasText}"
                       Foreground="{TemplateBinding Control.Foreground}" Focusable="true"
                       IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}"
                       FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                       Background="{x:Null}"
                       Controls:TextBoxHelper.ButtonContent="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:TextBoxHelper.ButtonContent), Mode=OneWay}"
                       MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ComboBoxHelper.MaxLength), Mode=OneWay}"
                       CharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ComboBoxHelper.CharacterCasing), Mode=OneWay}"/>
              <TextBlock x:Name="PART_WatermarkMessage" Text="{TemplateBinding Controls:TextBoxHelper.Watermark}"
                         Padding="{TemplateBinding Control.Padding}" Visibility="Collapsed"
                         Foreground="{TemplateBinding Control.Foreground}" IsHitTestVisible="false" Opacity="0.6"
                         HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                         VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                         FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                         Margin="6,2,6,2"/>
              <Grid x:Name="ContentSite" Margin="7 0 4 0">
                <ContentPresenter ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                  Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                  ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="false"
                                  Margin="{TemplateBinding Control.Padding}"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Grid>
            </Grid>
            <Border x:Name="FocusBorder" Grid.ColumnSpan="3"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}"
                    Background="{x:Null}"/>
            <Border x:Name="DisabledVisualElement" Grid.ColumnSpan="3"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    BorderBrush="{DynamicResource ControlsDisabledBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{DynamicResource ControlsDisabledBrush}" Opacity="0.6" IsHitTestVisible="false"
                    Visibility="Collapsed"
                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}"/>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
              <Grid MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
                <Border x:Name="PopupBorder" Effect="{DynamicResource DropShadowBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}" HorizontalAlignment="Stretch"
                        Height="Auto" BorderBrush="{DynamicResource ComboBoxPopupBrush}"
                        Background="{DynamicResource WhiteBrush}"/>
                <ScrollViewer x:Name="DropDownScrollViewer" BorderThickness="0" Margin="2" Padding="1">
                  <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False"/>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem}" Value="{x:Null}"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_WatermarkMessage" Property="UIElement.Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={x:Static converters:IsNullConverter.Instance}}"
                           Value="True"/>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True"/>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource enterGotFocus}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource exitGotFocus}"/>
              </TriggerBase.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={x:Static converters:IsNullConverter.Instance}}"
                           Value="False"/>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource enterHasText}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource exitHasText}"/>
              </TriggerBase.ExitActions>
            </MultiDataTrigger>
            <DataTrigger Value="False"
                         Binding="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:TextBoxHelper.ClearTextButton)}">
              <Setter TargetName="PART_EditableTextBox" Property="Grid.ColumnSpan" Value="2"/>
              <Setter TargetName="ContentSite" Property="Grid.ColumnSpan" Value="2"/>
              <Setter TargetName="PART_WatermarkMessage" Property="Grid.ColumnSpan" Value="2"/>
            </DataTrigger>
            <Trigger Property="ComboBox.IsEditable" Value="true">
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
              <Setter TargetName="PART_DropDownToggle" Property="UIElement.Focusable" Value="false"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="FocusBorder" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="FocusBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.MouseOverBorderBrush)}"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="FocusBorder" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="FocusBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="FocusBorder" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="FocusBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
              <Setter TargetName="FocusBorder" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="FocusBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.FocusBorderBrush)}"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="DisabledVisualElement" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VirtualisedMetroComboBox" TargetType="{x:Type ComboBox}"
         BasedOn="{StaticResource MetroComboBox}">
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained" IsVirtualizing="true"
                                  VirtualizationMode="Recycling"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Style.Triggers>
      <Trigger Property="ItemsControl.IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MetroComboBoxItem" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.Padding" Value="2"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
    <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
    <Setter Property="Control.Background" Value="{DynamicResource WhiteBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Grid Background="{TemplateBinding Control.Background}" Margin="0,0.5">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver"/>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="contentPresenter">
                      <SplineDoubleKeyFrame KeyTime="0" Value=".55"/>
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="ItemBackground" IsHitTestVisible="false"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}"/>
            <ContentPresenter x:Name="contentPresenter" TextElement.Foreground="{TemplateBinding Control.Foreground}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
              <Setter TargetName="ItemBackground" Value="{DynamicResource AccentColorBrush}" Property="Border.Background"/>
              <Setter Value="{DynamicResource AccentSelectedColorBrush}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ItemBackground" Value="{DynamicResource AccentColorBrush2}"
                      Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>