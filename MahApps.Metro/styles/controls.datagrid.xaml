<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:MahApps.Metro.Controls"
                    xmlns:Converters="clr-namespace:MahApps.Metro.Converters">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.CheckBox.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <BooleanToVisibilityConverter x:Key="bool2VisibilityConverter"/>
  <Style x:Key="MetroDataGridCheckBox" TargetType="{x:Type CheckBox}"
         BasedOn="{StaticResource MetroCheckBox}">
    <Setter Property="FrameworkElement.Margin" Value="0"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=IsReadOnly, RelativeSource={RelativeSource AncestorType=DataGridCell}}"
                   Value="True">
        <Setter Property="UIElement.IsHitTestVisible" Value="false"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{ComponentResourceKey ResourceId=MetroDataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Rectangle x:Name="Border" SnapsToDevicePixels="true">
              <FrameworkElement.Resources>
                <Style TargetType="{x:Type Rectangle}">
                  <Setter Property="Shape.Fill" Value="{DynamicResource GrayBrush7}"/>
                </Style>
              </FrameworkElement.Resources>
            </Rectangle>
            <Polygon x:Name="Arrow" Fill="{DynamicResource GrayBrush1}" HorizontalAlignment="Right" Margin="8,8,3,3"
                     Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush2}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.Width" Value="8"/>
    <Setter Property="Control.Background" Value="{DynamicResource GrayBrush5}"/>
    <Setter Property="FrameworkElement.Cursor" Value="SizeWE"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Control.Padding}" Background="Transparent">
            <Rectangle HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Width="1"
                       Fill="{TemplateBinding Control.Background}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroRowHeaderGripperStyle" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.Height" Value="6"/>
    <Setter Property="Control.Background" Value="{DynamicResource GrayBrush5}"/>
    <Setter Property="FrameworkElement.Cursor" Value="SizeNS"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Control.Padding}" Background="Transparent">
            <Rectangle VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Height="1"
                       Fill="{TemplateBinding Control.Background}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
    <Setter Property="Controls:ControlsHelper.ContentCharacterCasing" Value="Upper"/>
    <Setter Property="Control.FontWeight" Value="SemiBold"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="25"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="10,4,4,7"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
    <Setter Property="Control.BorderThickness" Value="0,0,0,3"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource GrayBrush5}"/>
    <Setter Property="Control.Background" Value="{DynamicResource GrayBrush8}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="BackgroundBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Grid.ColumnSpan="2" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"/>
            <Controls:ContentControlEx x:Name="HeaderContent" Content="{TemplateBinding ContentControl.Content}"
                                       ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                       ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                       ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                       SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                       HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                       Padding="{TemplateBinding Control.Padding}"
                                       VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                       RecognizesAccessKey="true"
                                       ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}"/>
            <Path x:Name="SortArrow" Visibility="Collapsed" Stretch="Fill" Grid.Column="1" Width="8" Height="10"
                  Margin="0,0,8,2" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5"
                  Fill="{DynamicResource GrayBrush2}"/>
            <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" HorizontalContentAlignment="Left"
                   Background="Transparent" Style="{StaticResource MetroColumnHeaderGripperStyle}"/>
            <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" HorizontalContentAlignment="Right"
                   Style="{StaticResource MetroColumnHeaderGripperStyle}" Grid.Column="1"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="DataGridColumnHeader.SortDirection">
              <Setter TargetName="BackgroundBorder" Value="{DynamicResource WhiteBrush}" Property="Border.Background"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Value="{x:Null}" Property="DataGridColumnHeader.SortDirection"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="BackgroundBorder" Value="{DynamicResource GrayBrush8}" Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="DataGridColumnHeader.SortDirection" Value="Ascending">
              <Setter TargetName="SortArrow" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="SortArrow" Property="Path.Data"
                      Value="F1 M 34,57 L 42,57 42,32.25 52,42.25 52,31.75 38,17.75 24,31.75 24,42.25 34,32.25 34,57 Z"/>
            </Trigger>
            <Trigger Property="DataGridColumnHeader.SortDirection" Value="Descending">
              <Setter TargetName="SortArrow" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="SortArrow" Property="Path.Data"
                      Value="F1 M 42,19.0002 L 34,19.0002 34,43.7502 24,33.7502 24,44.2502 38,58.2502 52,44.2502 52,33.7502 42,43.7502 42,19.0002 Z"/>
              <Setter TargetName="SortArrow" Property="FrameworkElement.Margin" Value="0,0,8,0"/>
            </Trigger>
            <Trigger Property="DataGridColumnHeader.DisplayIndex" Value="0">
              <Setter TargetName="PART_LeftHeaderGripper" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroDataGridRowHeader" TargetType="{x:Type DataGridRowHeader}">
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource GrayBrush5}"/>
    <Setter Property="Control.BorderThickness" Value="0,0,1,0"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
          <Grid>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}" Margin="{TemplateBinding FrameworkElement.Margin}"
                    SnapsToDevicePixels="true">
              <StackPanel Orientation="Horizontal">
                <ContentPresenter RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                <Control SnapsToDevicePixels="false"
                         Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
                         Visibility="{Binding (Validation.HasError), Converter={StaticResource bool2VisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"/>
              </StackPanel>
            </Border>
            <Thumb x:Name="PART_TopHeaderGripper" VerticalContentAlignment="Top" VerticalAlignment="Top"
                   Background="Transparent" Style="{StaticResource MetroRowHeaderGripperStyle}"/>
            <Thumb x:Name="PART_BottomHeaderGripper" VerticalContentAlignment="Bottom" VerticalAlignment="Bottom"
                   Style="{StaticResource MetroRowHeaderGripperStyle}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource AccentColorBrush3}" Property="Control.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MetroDataGridCell" TargetType="{x:Type DataGridCell}">
    <Setter Property="Controls:DataGridCellHelper.SaveDataGrid" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
            <ContentPresenter ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                              Margin="{TemplateBinding Control.Padding}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="DataGridCell.IsSelected" Value="true">
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}"/>
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="Cell"/>
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="CellOrRowHeader"/>
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="Cell"/>
          <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.FocusBorderBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="CellOrRowHeader"/>
          <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.FocusBorderBrush}"/>
      </MultiDataTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="DataGridCell.IsSelected" Value="true"/>
          <Condition Property="Selector.IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Foreground"
                Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightTextBrush}"/>
      </MultiTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="Cell"/>
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
          <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource Self}}"
                     Value="false"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background"
                Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="CellOrRowHeader"/>
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
          <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource Self}}"
                     Value="false"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background"
                Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="Cell"/>
          <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="CellOrRowHeader"/>
          <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
      </MultiDataTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsEnabled" Value="false"/>
          <Condition Property="DataGridCell.IsSelected" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}"/>
      </MultiTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="Cell"/>
          <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridCellHelper.DataGrid).SelectionUnit, RelativeSource={RelativeSource Self}}"
                     Value="CellOrRowHeader"/>
          <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="DefaultRowValidationErrorTemplate">
    <Grid VerticalAlignment="Center" Margin="2 0 2 0"
          DataContext="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}, Path=(Validation.Errors).CurrentItem}"
          ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=DataContext.ErrorContent}">
      <Path Height="20" Width="20" Stretch="Uniform" Fill="{DynamicResource ControlsValidationBrush}"
            Data="M 31.630585,39.233818 L 56.261485,14.603018 C 56.879785,13.984618 57.882285,13.984618 58.500685,14.603018 L 83.131485,39.233818 C 83.749885,39.852218 83.749885,40.854718 83.131485,41.473018 L 58.500685,66.103918 C 57.882385,66.722218 56.879785,66.722218 56.261485,66.103918 L 31.630585,41.473018 C 31.012285,40.854718 31.012285,39.852218 31.630585,39.233818 Z"/>
      <Path Height="10" Width="10" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform"
            Fill="{DynamicResource ValidationTextBrush}"
            Data="M 53.781741,31.196677 C 51.544017,31.196677 49.719241,33.021453 49.719241,35.259177 49.719241,37.496901 51.544017,39.321677 53.781741,39.321677 56.019465,39.321677 57.844241,37.496901 57.844241,35.259177 57.844241,33.021453 56.019465,31.196677 53.781741,31.196677 M 49.687991,9.821677 L 49.719241,10.352927 50.937991,29.821677 56.625491,29.821677 57.875491,9.821677 49.687991,9.821677 Z"/>
    </Grid>
  </ControlTemplate>
  <Style x:Key="MetroDataGridRow" TargetType="{x:Type DataGridRow}">
    <Setter Property="Controls:DataGridRowHelper.SelectionUnit"
            Value="{Binding Path=SelectionUnit, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Setter Property="DataGridRow.ValidationErrorTemplate"
            Value="{StaticResource DefaultRowValidationErrorTemplate}"/>
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridRowHelper.SelectionUnit), RelativeSource={RelativeSource Self}}"
                     Value="FullRow"/>
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridRowHelper.SelectionUnit), RelativeSource={RelativeSource Self}}"
                     Value="FullRow"/>
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
          <Condition Binding="{Binding Path=(Selector.IsSelectionActive), RelativeSource={RelativeSource Self}}"
                     Value="false"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background"
                Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
        <Setter Property="Control.BorderBrush"
                Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
        <Setter Property="Control.Foreground"
                Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightTextBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridRowHelper.SelectionUnit), RelativeSource={RelativeSource Self}}"
                     Value="FullRow"/>
          <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridRowHelper.SelectionUnit), RelativeSource={RelativeSource Self}}"
                     Value="FullRow"/>
          <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(Controls:DataGridRowHelper.SelectionUnit), RelativeSource={RelativeSource Self}}"
                     Value="FullRow"/>
          <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
          <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MetroDataGrid" TargetType="{x:Type DataGrid}">
    <Setter Property="DataGrid.MinRowHeight" Value="25"/>
    <Setter Property="DataGrid.GridLinesVisibility" Value="None"/>
    <Setter Property="Control.Background" Value="{DynamicResource WhiteBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0,0,0,0"/>
    <Setter Property="DataGrid.HorizontalGridLinesBrush" Value="{DynamicResource GrayBrush7}"/>
    <Setter Property="DataGrid.VerticalGridLinesBrush" Value="{DynamicResource GrayBrush7}"/>
    <Setter Property="DataGrid.ColumnHeaderStyle" Value="{StaticResource MetroDataGridColumnHeader}"/>
    <Setter Property="DataGrid.RowHeaderStyle" Value="{StaticResource MetroDataGridRowHeader}"/>
    <Setter Property="DataGrid.CellStyle" Value="{StaticResource MetroDataGridCell}"/>
    <Setter Property="DataGrid.RowStyle" Value="{StaticResource MetroDataGridRow}"/>
    <Setter Property="DataGrid.HeadersVisibility" Value="Column"/>
    <Setter Property="DataGrid.DropLocationIndicatorStyle">
      <Setter.Value>
        <Style TargetType="{x:Type Separator}">
          <Setter Property="Control.Background" Value="{DynamicResource GrayBrush7}"/>
          <Setter Property="FrameworkElement.Width" Value="2"/>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type Separator}">
                <Rectangle Fill="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}"
                           Width="{TemplateBinding FrameworkElement.Width}"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGrid}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true">
            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
              <Control.Template>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="*"/>
                      <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false"
                            Style="{DynamicResource {ComponentResourceKey ResourceId=MetroDataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}"
                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                    <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1"
                                                    Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                    <Grid Row="1" ColumnSpan="2">
                      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Grid.ColumnSpan="2"/>
                    </Grid>
                    <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2"
                               Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Orientation="Vertical" Grid.Row="1"
                               Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                               ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                               Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    <Grid Column="1" Row="2">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                        <ColumnDefinition Width="*"/>
                      </Grid.ColumnDefinitions>
                      <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1"
                                 Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Orientation="Horizontal"
                                 Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                                 ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                                 Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>
                  </Grid>
                </ControlTemplate>
              </Control.Template>
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ItemsControl.IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="AzureDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}"
         BasedOn="{StaticResource MetroDataGridColumnHeader}">
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,10"/>
  </Style>
  <Style x:Key="AzureDataGridRowHeader" TargetType="{x:Type DataGridRowHeader}"
         BasedOn="{StaticResource MetroDataGridRowHeader}">
    <Setter Property="Control.BorderThickness" Value="0,0,0,0"/>
  </Style>
  <Style x:Key="AzureDataGridCell" TargetType="{x:Type DataGridCell}"
         BasedOn="{StaticResource MetroDataGridCell}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
            <ContentPresenter ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Column.DisplayIndex}"
                   Value="0">
        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush4}"/>
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Column.DisplayIndex}"
                     Value="0"/>
          <Condition Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=IsSelected}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush2}"/>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="AzureDataGridRow" TargetType="{x:Type DataGridRow}"
         BasedOn="{StaticResource MetroDataGridRow}"/>
  <Style x:Key="AzureDataGridRowWithMargin" TargetType="{x:Type DataGridRow}"
         BasedOn="{StaticResource AzureDataGridRow}">
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,1"/>
  </Style>
  <Style x:Key="AzureDataGrid" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MetroDataGrid}">
    <Setter Property="DataGrid.ColumnHeaderStyle" Value="{StaticResource AzureDataGridColumnHeader}"/>
    <Setter Property="DataGrid.CellStyle" Value="{StaticResource AzureDataGridCell}"/>
    <Setter Property="DataGrid.RowStyle" Value="{StaticResource AzureDataGridRow}"/>
    <Setter Property="DataGrid.RowHeaderStyle" Value="{StaticResource AzureDataGridRowHeader}"/>
    <Style.Triggers>
      <Trigger Property="DataGrid.GridLinesVisibility" Value="None">
        <Setter Property="DataGrid.RowStyle" Value="{StaticResource AzureDataGridRowWithMargin}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>