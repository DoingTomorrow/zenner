<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="Controls.TextBox.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
    <Style.Resources>
      <Style TargetType="{x:Type Image}">
        <Style.Triggers>
          <Trigger Property="UIElement.IsEnabled" Value="false">
            <Setter Property="UIElement.Opacity" Value="0.5"/>
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="Border" BorderThickness="1" Background="{DynamicResource TransparentWhiteBrush}"
                  BorderBrush="{DynamicResource TransparentWhiteBrush}">
            <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="true"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="Border" Value="{DynamicResource GrayBrush7}" Property="Border.Background"/>
              <Setter TargetName="Border" Value="{DynamicResource GrayBrush7}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Border" Value="{DynamicResource GrayBrush7}" Property="Border.Background"/>
              <Setter TargetName="Border" Value="{DynamicResource GrayBrush7}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush}" Property="Border.Background"/>
              <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush}" Property="Border.Background"/>
              <Setter TargetName="Border" Value="{DynamicResource AccentColorBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource MenuItemDisabledBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}"
         TargetType="{x:Type Button}"/>
  <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}"/>
  <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}"
         TargetType="{x:Type CheckBox}"/>
  <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}"
         TargetType="{x:Type RadioButton}"/>
  <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}"
         BasedOn="{StaticResource MetroTextBox}"/>
  <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent" SnapsToDevicePixels="true" Margin="0,3,0,3">
            <Rectangle Width="4.9">
              <Shape.Fill>
                <DrawingBrush ViewportUnits="Absolute" ViewboxUnits="Absolute" Viewport="0,0,5,4" Viewbox="0,0,5,4"
                              TileMode="Tile">
                  <DrawingBrush.Drawing>
                    <GeometryDrawing Brush="{DynamicResource GrayBrush3}">
                      <GeometryDrawing.Geometry>
                        <GeometryGroup>
                          <GeometryGroup.Children>
                            <RectangleGeometry Rect="0,0,1,1"/>
                            <RectangleGeometry Rect="4,0,1,1"/>
                            <RectangleGeometry Rect="2,2,1,1"/>
                          </GeometryGroup.Children>
                        </GeometryGroup>
                      </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Shape.Fill>
            </Rectangle>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="Bd" CornerRadius="0,3,3,0" Background="Transparent" SnapsToDevicePixels="true">
            <Grid>
              <Rectangle Name="Rectangle" Height="1" Width="6" Fill="{DynamicResource BlackBrush}"
                         VerticalAlignment="Bottom" Margin="2,8"/>
              <Path Name="Arrow" Fill="{DynamicResource BlackBrush}" VerticalAlignment="Bottom" Margin="2,3"
                    Data="M 0,0 L 6,0 3,3 Z"/>
              <ContentPresenter/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Bd" Value="{DynamicResource GrayBrush7}" Property="Border.Background"/>
              <Setter TargetName="Arrow" Value="{DynamicResource AccentColorBrush}" Property="Shape.Fill"/>
              <Setter TargetName="Rectangle" Value="{DynamicResource AccentColorBrush}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="Bd" Value="{DynamicResource GrayBrush7}" Property="Border.Background"/>
              <Setter TargetName="Arrow" Value="{DynamicResource AccentColorBrush}" Property="Shape.Fill"/>
              <Setter TargetName="Rectangle" Value="{DynamicResource AccentColorBrush}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Bd" Value="{DynamicResource AccentColorBrush}" Property="Border.Background"/>
              <Setter TargetName="Arrow" Value="{DynamicResource BlackBrush}" Property="Shape.Fill"/>
              <Setter TargetName="Rectangle" Value="{DynamicResource BlackBrush}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Arrow" Value="{DynamicResource TransparentWhiteBrush}" Property="Shape.Fill"/>
              <Setter TargetName="Rectangle" Value="{DynamicResource TransparentWhiteBrush}" Property="Shape.Fill"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ToolBar}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <Border x:Name="Border" CornerRadius="2" BorderThickness="1"
                  Background="{DynamicResource TransparentWhiteBrush}"
                  BorderBrush="{DynamicResource TransparentWhiteBrush}">
            <DockPanel>
              <ToggleButton DockPanel.Dock="Right" IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                            Style="{StaticResource ToolBarOverflowButtonStyle}" ClickMode="Press"
                            IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Popup x:Name="OverflowPopup" AllowsTransparency="true" Placement="Bottom" StaysOpen="false"
                       Focusable="false" PopupAnimation="Slide"
                       IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                  <Border x:Name="DropDownBorder" Background="{DynamicResource ControlBackgroundBrush}" BorderThickness="1"
                          BorderBrush="{DynamicResource ControlBorderBrush}">
                    <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" WrapWidth="200" Focusable="true"
                                          KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"
                                          FocusVisualStyle="{x:Null}"/>
                  </Border>
                </Popup>
              </ToggleButton>
              <Thumb x:Name="ToolBarThumb" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
              <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2"/>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
              <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
              <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ToolBarTray}">
    <Setter Property="ToolBarTray.Background" Value="{DynamicResource WindowBackgroundBrush}"/>
  </Style>
</ResourceDictionary>