<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:MahApps.Metro.Controls">
  <Style x:Key="MetroValidationPopup" TargetType="{x:Type Controls:CustomValidationPopup}">
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
    <Setter Property="Popup.HorizontalOffset" Value="0"/>
    <Setter Property="Popup.VerticalOffset" Value="0"/>
    <Setter Property="Popup.PopupAnimation" Value="Fade"/>
    <Setter Property="Popup.Placement" Value="Right"/>
  </Style>
  <ControlTemplate x:Key="ValidationErrorTemplate">
    <AdornedElementPlaceholder x:Name="placeholder">
      <Grid SnapsToDevicePixels="true">
        <Rectangle x:Name="PopupTargetElement" StrokeThickness="0" Margin="-5,0,-5,0"
                   DataContext="{Binding ElementName=placeholder}"/>
        <Border x:Name="ValidationErrorElement" BorderBrush="{DynamicResource ControlsValidationBrush}"
                BorderThickness="1" DataContext="{Binding ElementName=placeholder}">
          <Grid Background="Transparent" HorizontalAlignment="Right" Height="12" Margin="1,-4,-4,0"
                VerticalAlignment="Top" Width="12">
            <Path Data="M 1,0 L 6,0 A 2,2 90 0 1 8,2 L 8,7 Z" Fill="{DynamicResource ValidationBrush5}"
                  Margin="1,3,0,0"/>
            <Path Data="M 0,0 L 2,0 8,6 8,8 " Fill="{DynamicResource WhiteColorBrush}" Margin="1,3,0,0"/>
          </Grid>
        </Border>
        <Controls:CustomValidationPopup x:Name="ValidationPopup" AllowsTransparency="true" IsOpen="false"
                                        PlacementTarget="{Binding ElementName=PopupTargetElement, Mode=OneWay}">
          <Grid x:Name="Root" Margin="4">
            <FrameworkElement.Resources>
              <Style TargetType="{x:Type Border}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ElementName=Root, Path=IsMouseOver, Mode=OneWay}" Value="True">
                    <TriggerBase.EnterActions>
                      <BeginStoryboard>
                        <Storyboard>
                          <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.15" Duration="0:0:0.1"/>
                        </Storyboard>
                      </BeginStoryboard>
                    </TriggerBase.EnterActions>
                    <TriggerBase.ExitActions>
                      <BeginStoryboard>
                        <Storyboard>
                          <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.1"/>
                        </Storyboard>
                      </BeginStoryboard>
                    </TriggerBase.ExitActions>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Resources>
            <Border Background="{DynamicResource ValidationBrush1}" CornerRadius="5" Margin="4,4,-4,-4"/>
            <Border Background="{DynamicResource ValidationBrush2}" CornerRadius="4" Margin="3,3,-3,-3"/>
            <Border Background="{DynamicResource ValidationBrush3}" CornerRadius="3" Margin="2,2,-2,-2"/>
            <Border Background="{DynamicResource ValidationBrush4}" CornerRadius="2" Margin="1,1,-1,-1"/>
            <Border Background="{DynamicResource ValidationBrush5}" CornerRadius="2">
              <FrameworkElement.Resources>
                <DataTemplate DataType="{x:Type ValidationError}">
                  <TextBlock Foreground="{DynamicResource ValidationTextBrush}" MaxWidth="250" Margin="8,4,8,4"
                             TextWrapping="Wrap" UseLayoutRounding="false" Text="{Binding ErrorContent}"/>
                </DataTemplate>
              </FrameworkElement.Resources>
              <ItemsControl ItemsSource="{Binding}"/>
            </Border>
          </Grid>
        </Controls:CustomValidationPopup>
      </Grid>
    </AdornedElementPlaceholder>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}"
                     Value="True"/>
          <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}"
                     Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="ValidationPopup" Property="Popup.IsOpen" Value="true"/>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>