
--- AssemblyInfo.cs ---

﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle("PDC_Handler")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("ZENNER")]
[assembly: AssemblyProduct("PDC_Handler")]
[assembly: AssemblyCopyright("Copyright ZENNER©  2015")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: Guid("AECFD14C-8D54-4DA2-ABCB-3351DD111DCA")]
[assembly: AssemblyFileVersion("1.0.3.0")]
[assembly: InternalsVisibleTo("UnitTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100ad6732b881b9d5b158cb6683534f39af848b5df5cb35d8cc418e95d5fe13b10b7a44757a918936f5234b958ce51c559fd0c828072112969f0de5dcc60115e13f8a3fe4871a0fa343d0fbab97d327bc687eb54c511765be73fc31676ab84b08c4ed6d38ab78b66b1f4cb8da30e3392c5051b60ae4fa1d14c045d0ab13da602ed2")]
[assembly: AssemblyVersion("1.0.3.0")]


--- ConfigFlagsPDCwMBus.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.ConfigFlagsPDCwMBus
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;

#nullable disable
namespace PDC_Handler
{
  [Flags]
  public enum ConfigFlagsPDCwMBus : ushort
  {
    CONFIG_ENABLE_PULSE = 1,
    CONFIG_ENABLE_RADIO = 2,
    CONFIG_LOG_ENABLED = 4,
    CONFIG_FLOW_CHECK = 8,
    CONFIG_DISABLE_A = 256, // 0x0100
    CONFIG_DISABLE_B = 512, // 0x0200
    CONFIG_AUTO_RADIO_A = 1024, // 0x0400
    CONFIG_AUTO_RADIO_B = 2048, // 0x0800
  }
}


--- ConfigInit.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.ConfigInit
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  public enum ConfigInit : byte
  {
    OK,
    FIRSTRUN,
    CORRUPT,
  }
}


--- ConfiguratorPdcRadio.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.ConfiguratorPdcRadio
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using CorporateDesign;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Windows.Forms.Layout;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public class ConfiguratorPdcRadio : Form
  {
    private PDC_Meter tempWorkMeter;
    private PDC_Meter tempTypeMeter;
    private PDC_Meter tempBackupMeter;
    private PDC_Meter tempConnectedMeter;
    private IContainer components = (IContainer) null;
    private Button btnCancel;
    private Button btnSave;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Label label1;
    private Label label2;
    private Label label3;
    private Label label4;
    private Label label5;
    private Label label6;
    private Label label7;
    private NumericUpDown txtMeterID;
    private NumericUpDown txtHardwareTypeID;
    private NumericUpDown txtMeterInfoID;
    private NumericUpDown txtBaseTypeID;
    private NumericUpDown txtMeterTypeID;
    private NumericUpDown txtSapMaterialNumber;
    private NumericUpDown txtSapProductionOrderNumber;
    private GroupBox groupBox1;
    private GroupBox gboxRadio;
    private Label label9;
    private NumericUpDown txtRadioTransmitInterval;
    private Label label8;
    private ComboBox cboxRadioMode;
    private GroupBox groupBox3;
    private Label label12;
    private NumericUpDown txtTimeZone;
    private Label label13;
    private NumericUpDown txtPulseReadingA;
    private Label label16;
    private ComboBox cboxRadioPower;
    private Label label17;
    private NumericUpDown txtRadioFrequencyOffset;
    private TextBox txtAESkey;
    private Label label18;
    private DateTimePicker txtDueDate;
    private Label label22;
    private ToolTip toolTip;
    private Label label26;
    private NumericUpDown txtPulsePeriod;
    private Label label36;
    private ComboBox cboxHandlerObject;
    private Panel panel;
    private Label label34;
    private NumericUpDown txtPulseActivateRadio;
    private GroupBox groupBox8;
    private CheckedListBox listHardwareErrors;
    private Label label59;
    private NumericUpDown txtRadioInstallCount;
    private Label label57;
    private NumericUpDown txtRadioInstallInterval;
    private DateTimePicker txtBatteryEndDate;
    private Label label63;
    private CheckBox ckboxShowParameterNamesUsedInFirmware;
    private TextBox txtManufacturerC;
    private NumericUpDown txtMBusGenerationC;
    private ComboBox cboxMBusMediumC;
    private NumericUpDown txtMBusAddressC;
    private Label label10;
    private Label label14;
    private Label label15;
    private Label label19;
    private Label label23;
    private TextBox txtObisC;
    private Label label37;
    private Label label38;
    private NumericUpDown txtPulseReadingB;
    private Label label40;
    private NumericUpDown txtRadioPacketBOffset;
    private NumericUpDown txtSerialC;
    private GroupBox groupBox4;
    private TextBox txtFullSerialnumberC;
    private Label label41;
    private GroupBox groupBox6;
    private Label label11;
    private TextBox txtFullSerialnumberB;
    private NumericUpDown txtScaleExponentB;
    private Label label20;
    private Label label33;
    private NumericUpDown txtMBusAddressB;
    private NumericUpDown txtScaleMantissaB;
    private NumericUpDown txtMBusGenerationB;
    private NumericUpDown txtVifB;
    private NumericUpDown txtSerialB;
    private Label label35;
    private ComboBox cboxMBusMediumB;
    private Label label64;
    private TextBox txtObisB;
    private Label label65;
    private TextBox txtManufacturerB;
    private Label label66;
    private Label label21;
    private Label label67;
    private Label label24;
    private Label label68;
    private Label label25;
    private Label label69;
    private Label label27;
    private Label label70;
    private Label label28;
    private Label label71;
    private Label label29;
    private Label label72;
    private NumericUpDown txtUndersizeLimitB;
    private Label label73;
    private NumericUpDown txtPulseBlockLimitB;
    private Label label74;
    private NumericUpDown txtPulseLeakLimitB;
    private NumericUpDown txtBurstLimitB;
    private NumericUpDown txtPulseUnleakLimitB;
    private NumericUpDown txtBurstDiffB;
    private NumericUpDown txtPulseLeakLowerB;
    private NumericUpDown txtPulseLeakUpperB;
    private NumericUpDown txtUndersizeDiffB;
    private NumericUpDown txtOversizeDiffB;
    private NumericUpDown txtOversizeLimitB;
    private GroupBox groupBox5;
    private Label label32;
    private NumericUpDown txtScaleExponentA;
    private Label label31;
    private NumericUpDown txtScaleMantissaA;
    private NumericUpDown txtVifA;
    private Label label30;
    private Label label51;
    private Label label52;
    private Label label53;
    private Label label54;
    private Label label55;
    private Label label56;
    private Label label47;
    private Label label46;
    private Label label45;
    private Label label44;
    private Label label43;
    private NumericUpDown txtBurstLimitA;
    private NumericUpDown txtBurstDiffA;
    private NumericUpDown txtUndersizeLimitA;
    private NumericUpDown txtUndersizeDiffA;
    private NumericUpDown txtOversizeLimitA;
    private NumericUpDown txtOversizeDiffA;
    private NumericUpDown txtPulseLeakUpperA;
    private NumericUpDown txtPulseLeakLowerA;
    private NumericUpDown txtPulseUnleakLimitA;
    private NumericUpDown txtPulseLeakLimitA;
    private NumericUpDown txtPulseBlockLimitA;
    private TextBox txtFullSerialnumberA;
    private Label label42;
    private NumericUpDown txtMBusAddressA;
    private NumericUpDown txtMBusGenerationA;
    private NumericUpDown txtSerialA;
    private ComboBox cboxMBusMediumA;
    private TextBox txtObisA;
    private TextBox txtManufacturerA;
    private Label label48;
    private Label label49;
    private Label label50;
    private Label label58;
    private Label label60;
    private Label label61;
    private Label label39;
    private NumericUpDown txtPulseOn;
    private ComboBox cboxRadioListType;
    private Label label62;
    private Label label75;
    private NumericUpDown txtRadioTimeBias;
    private DateTimePicker txtSystemTime;
    private Label label76;
    private GroupBox groupBox7;
    private CheckedListBox listRadioFlags;
    private GroupBox groupBox2;
    private CheckedListBox listConfigFlags;
    private GroupBox groupBox9;
    private CheckedListBox listPersistentFlagsA;
    private GroupBox groupBox10;
    private CheckedListBox listPersistentFlagsB;

    public ConfiguratorPdcRadio() => this.InitializeComponent();

    private void Configurator_Load(object sender, EventArgs e) => this.InitializeForm();

    internal static void ShowDialog(Form owner, PDC_HandlerFunctions MyFunctions)
    {
      if (MyFunctions == null || MyFunctions.WorkMeter == null || MyFunctions.WorkMeter.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        return;
      using (ConfiguratorPdcRadio configuratorPdcRadio = new ConfiguratorPdcRadio())
      {
        if (MyFunctions.WorkMeter != null)
          configuratorPdcRadio.tempWorkMeter = MyFunctions.WorkMeter.DeepCopy();
        if (MyFunctions.TypeMeter != null)
          configuratorPdcRadio.tempTypeMeter = MyFunctions.TypeMeter.DeepCopy();
        if (MyFunctions.BackupMeter != null)
          configuratorPdcRadio.tempBackupMeter = MyFunctions.BackupMeter.DeepCopy();
        if (MyFunctions.ConnectedMeter != null)
          configuratorPdcRadio.tempConnectedMeter = MyFunctions.ConnectedMeter.DeepCopy();
        if (configuratorPdcRadio.ShowDialog((IWin32Window) owner) == DialogResult.OK)
        {
          MyFunctions.WorkMeter = configuratorPdcRadio.tempWorkMeter;
          MyFunctions.TypeMeter = configuratorPdcRadio.tempTypeMeter;
          MyFunctions.BackupMeter = configuratorPdcRadio.tempBackupMeter;
          MyFunctions.ConnectedMeter = configuratorPdcRadio.tempConnectedMeter;
        }
      }
    }

    private void btnSave_Click(object sender, EventArgs e)
    {
      this.SaveValues();
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    private void cboxHandlerObject_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.LoadValues();
    }

    private void ckboxShowParameterNamesUsedInFirmware_CheckedChanged(object sender, EventArgs e)
    {
      this.SwitchLableNames(this.Controls);
    }

    private void SwitchLableNames(Control.ControlCollection controls)
    {
      if (controls == null || controls.Count == 0)
        return;
      foreach (Control control in (ArrangedElementCollection) controls)
      {
        if (control.Tag != null && control.Tag.ToString() != string.Empty)
        {
          string str = control.Tag.ToString();
          string text = control.Text;
          control.Text = str;
          control.Tag = (object) text;
        }
        this.SwitchLableNames(control.Controls);
      }
    }

    private void LoadValues()
    {
      try
      {
        PDC_Meter handlerMeter = this.GetHandlerMeter();
        this.panel.Visible = handlerMeter != null;
        if (handlerMeter == null)
          return;
        DeviceIdentification deviceIdentification = handlerMeter.GetDeviceIdentification();
        string serialnumberFull = handlerMeter.GetSerialnumberFull();
        uint? serialMbusPdc = handlerMeter.GetSerialMBusPDC();
        byte? mbusAddressPdc = handlerMeter.GetMBusAddressPDC();
        MBusDeviceType? mediumPdc = handlerMeter.GetMediumPDC();
        string manufacturerPdc = handlerMeter.GetManufacturerPDC();
        byte? mbusGenerationPdc = handlerMeter.GetMBusGenerationPDC();
        string obisPdc = handlerMeter.GetObisPDC();
        string serialnumberFullInputA = handlerMeter.GetSerialnumberFullInputA();
        uint? serialMbusInputA = handlerMeter.GetSerialMBusInputA();
        byte? mbusAddressInputA = handlerMeter.GetMBusAddressInputA();
        MBusDeviceType? mediumInputA = handlerMeter.GetMediumInputA();
        string manufacturerInputA = handlerMeter.GetManufacturerInputA();
        byte? generationInputA = handlerMeter.GetMBusGenerationInputA();
        string obisInputA = handlerMeter.GetObisInputA();
        ushort? blockLimitInputA = handlerMeter.GetPulseBlockLimitInputA();
        ushort? pulseLeakLimitInputA = handlerMeter.GetPulseLeakLimitInputA();
        ushort? unleakLimitInputA = handlerMeter.GetPulseUnleakLimitInputA();
        short? pulseLeakLowerInputA = handlerMeter.GetPulseLeakLowerInputA();
        short? pulseLeakUpperInputA = handlerMeter.GetPulseLeakUpperInputA();
        ushort? oversizeDiffInputA = handlerMeter.GetOversizeDiffInputA();
        ushort? oversizeLimitInputA = handlerMeter.GetOversizeLimitInputA();
        ushort? undersizeDiffInputA = handlerMeter.GetUndersizeDiffInputA();
        ushort? undersizeLimitInputA = handlerMeter.GetUndersizeLimitInputA();
        ushort? burstDiffInputA = handlerMeter.GetBurstDiffInputA();
        ushort? burstLimitInputA = handlerMeter.GetBurstLimitInputA();
        byte? vifInputA = handlerMeter.GetVIFInputA();
        ushort? scaleMantissaInputA = handlerMeter.GetScaleMantissaInputA();
        sbyte? scaleExponentInputA = handlerMeter.GetScaleExponentInputA();
        Warning? warningsInputA = handlerMeter.GetWarningsInputA();
        string serialnumberFullInputB = handlerMeter.GetSerialnumberFullInputB();
        uint? serialMbusInputB = handlerMeter.GetSerialMBusInputB();
        byte? mbusAddressInputB = handlerMeter.GetMBusAddressInputB();
        MBusDeviceType? mediumInputB = handlerMeter.GetMediumInputB();
        string manufacturerInputB = handlerMeter.GetManufacturerInputB();
        byte? generationInputB = handlerMeter.GetMBusGenerationInputB();
        string obisInputB = handlerMeter.GetObisInputB();
        ushort? blockLimitInputB = handlerMeter.GetPulseBlockLimitInputB();
        ushort? pulseLeakLimitInputB = handlerMeter.GetPulseLeakLimitInputB();
        ushort? unleakLimitInputB = handlerMeter.GetPulseUnleakLimitInputB();
        short? pulseLeakLowerInputB = handlerMeter.GetPulseLeakLowerInputB();
        short? pulseLeakUpperInputB = handlerMeter.GetPulseLeakUpperInputB();
        ushort? oversizeDiffInputB = handlerMeter.GetOversizeDiffInputB();
        ushort? oversizeLimitInputB = handlerMeter.GetOversizeLimitInputB();
        ushort? undersizeDiffInputB = handlerMeter.GetUndersizeDiffInputB();
        ushort? undersizeLimitInputB = handlerMeter.GetUndersizeLimitInputB();
        ushort? burstDiffInputB = handlerMeter.GetBurstDiffInputB();
        ushort? burstLimitInputB = handlerMeter.GetBurstLimitInputB();
        byte? vifInputB = handlerMeter.GetVIFInputB();
        ushort? scaleMantissaInputB = handlerMeter.GetScaleMantissaInputB();
        sbyte? scaleExponentInputB = handlerMeter.GetScaleExponentInputB();
        Warning? warningsInputB = handlerMeter.GetWarningsInputB();
        RadioMode? radioMode = handlerMeter.GetRadioMode();
        RadioPower? radioPower = handlerMeter.GetRadioPower();
        RadioList? radioListType = handlerMeter.GetRadioListType();
        short? radioTimeBias = handlerMeter.GetRadioTimeBias();
        ushort? transmitInterval = handlerMeter.GetRadioTransmitInterval();
        ushort? radioInstallInterval = handlerMeter.GetRadioInstallInterval();
        byte? radioInstallCount = handlerMeter.GetRadioInstallCount();
        short? frequencyOffset = handlerMeter.GetFrequencyOffset();
        short? radioPacketBoffset = handlerMeter.GetRadioPacketBOffset();
        byte[] aeSkey = handlerMeter.GetAESkey();
        DateTime? systemTime = handlerMeter.GetSystemTime();
        DateTime? dueDate = handlerMeter.GetDueDate();
        int? timeZone = handlerMeter.GetTimeZone();
        DateTime batteryEndDate = handlerMeter.GetBatteryEndDate();
        byte? pulseActivateRadio = handlerMeter.GetPulseActivateRadio();
        ushort? pulsePeriod = handlerMeter.GetPulsePeriod();
        byte? pulseOn = handlerMeter.GetPulseOn();
        ConfigFlagsPDCwMBus? configFlagsPdCwMbus1 = handlerMeter.GetConfigFlagsPDCwMBus();
        RadioFlagsPDCwMBus? radioFlagsPdCwMbus1 = handlerMeter.GetRadioFlagsPDCwMBus();
        HardwareError? hardwareErrors = handlerMeter.GetHardwareErrors();
        uint? meterValueA = handlerMeter.GetMeterValueA();
        uint? meterValueB = handlerMeter.GetMeterValueB();
        if (deviceIdentification != null)
        {
          this.txtBaseTypeID.Value = (Decimal) deviceIdentification.BaseTypeID;
          this.txtHardwareTypeID.Value = (Decimal) deviceIdentification.HardwareTypeID;
          this.txtMeterID.Value = (Decimal) deviceIdentification.MeterID;
          this.txtMeterInfoID.Value = (Decimal) deviceIdentification.MeterInfoID;
          this.txtMeterTypeID.Value = (Decimal) deviceIdentification.MeterTypeID;
          this.txtSapMaterialNumber.Value = (Decimal) deviceIdentification.SapMaterialNumber;
          this.txtSapProductionOrderNumber.Value = (Decimal) deviceIdentification.SapProductionOrderNumber;
        }
        this.txtFullSerialnumberC.Text = serialnumberFull ?? string.Empty;
        this.txtSerialC.Value = (Decimal) (serialMbusPdc.HasValue ? serialMbusPdc.Value : 0U);
        this.txtMBusAddressC.Value = (Decimal) (mbusAddressPdc.HasValue ? (int) mbusAddressPdc.Value : 0);
        this.cboxMBusMediumC.SelectedItem = mediumPdc.HasValue ? (object) mediumPdc.Value.ToString() : (object) string.Empty;
        this.txtManufacturerC.Text = manufacturerPdc ?? string.Empty;
        this.txtMBusGenerationC.Value = (Decimal) (mbusGenerationPdc.HasValue ? (int) mbusGenerationPdc.Value : 0);
        this.txtObisC.Text = obisPdc ?? string.Empty;
        this.txtFullSerialnumberA.Text = serialnumberFullInputA ?? string.Empty;
        this.txtSerialA.Value = (Decimal) (serialMbusInputA.HasValue ? serialMbusInputA.Value : 0U);
        this.txtMBusAddressA.Value = (Decimal) (mbusAddressInputA.HasValue ? (int) mbusAddressInputA.Value : 0);
        this.cboxMBusMediumA.SelectedItem = mediumInputA.HasValue ? (object) mediumInputA.Value.ToString() : (object) string.Empty;
        this.txtManufacturerA.Text = manufacturerInputA ?? string.Empty;
        this.txtMBusGenerationA.Value = (Decimal) (generationInputA.HasValue ? (int) generationInputA.Value : 0);
        this.txtObisA.Text = obisInputA ?? string.Empty;
        this.txtPulseBlockLimitA.Value = (Decimal) (blockLimitInputA.HasValue ? (int) blockLimitInputA.Value : 0);
        this.txtPulseLeakLimitA.Value = (Decimal) (pulseLeakLimitInputA.HasValue ? (int) pulseLeakLimitInputA.Value : 0);
        this.txtPulseUnleakLimitA.Value = (Decimal) (unleakLimitInputA.HasValue ? (int) unleakLimitInputA.Value : 0);
        this.txtPulseLeakLowerA.Value = (Decimal) (pulseLeakLowerInputA.HasValue ? (int) pulseLeakLowerInputA.Value : 0);
        this.txtPulseLeakUpperA.Value = (Decimal) (pulseLeakUpperInputA.HasValue ? (int) pulseLeakUpperInputA.Value : 0);
        this.txtOversizeDiffA.Value = (Decimal) (oversizeDiffInputA.HasValue ? (int) oversizeDiffInputA.Value : 0);
        this.txtOversizeLimitA.Value = (Decimal) (oversizeLimitInputA.HasValue ? (int) oversizeLimitInputA.Value : 0);
        this.txtUndersizeDiffA.Value = (Decimal) (undersizeDiffInputA.HasValue ? (int) undersizeDiffInputA.Value : 0);
        this.txtUndersizeLimitA.Value = (Decimal) (undersizeLimitInputA.HasValue ? (int) undersizeLimitInputA.Value : 0);
        this.txtBurstDiffA.Value = (Decimal) (burstDiffInputA.HasValue ? (int) burstDiffInputA.Value : 0);
        this.txtBurstLimitA.Value = (Decimal) (burstLimitInputA.HasValue ? (int) burstLimitInputA.Value : 0);
        this.txtVifA.Value = (Decimal) (vifInputA.HasValue ? (int) vifInputA.Value : 0);
        this.txtScaleMantissaA.Value = (Decimal) (scaleMantissaInputA.HasValue ? (int) scaleMantissaInputA.Value : 0);
        this.txtScaleExponentA.Value = (Decimal) (scaleExponentInputA.HasValue ? (int) scaleExponentInputA.Value : 0);
        this.txtFullSerialnumberB.Text = serialnumberFullInputB ?? string.Empty;
        this.txtSerialB.Value = (Decimal) (serialMbusInputB.HasValue ? serialMbusInputB.Value : 0U);
        this.txtMBusAddressB.Value = (Decimal) (mbusAddressInputB.HasValue ? (int) mbusAddressInputB.Value : 0);
        this.cboxMBusMediumB.SelectedItem = mediumInputB.HasValue ? (object) mediumInputB.Value.ToString() : (object) string.Empty;
        this.txtManufacturerB.Text = manufacturerInputB ?? string.Empty;
        this.txtMBusGenerationB.Value = (Decimal) (generationInputB.HasValue ? (int) generationInputB.Value : 0);
        this.txtObisB.Text = obisInputB ?? string.Empty;
        this.txtPulseBlockLimitB.Value = (Decimal) (blockLimitInputB.HasValue ? (int) blockLimitInputB.Value : 0);
        this.txtPulseLeakLimitB.Value = (Decimal) (pulseLeakLimitInputB.HasValue ? (int) pulseLeakLimitInputB.Value : 0);
        this.txtPulseUnleakLimitB.Value = (Decimal) (unleakLimitInputB.HasValue ? (int) unleakLimitInputB.Value : 0);
        this.txtPulseLeakLowerB.Value = (Decimal) (pulseLeakLowerInputB.HasValue ? (int) pulseLeakLowerInputB.Value : 0);
        this.txtPulseLeakUpperB.Value = (Decimal) (pulseLeakUpperInputB.HasValue ? (int) pulseLeakUpperInputB.Value : 0);
        this.txtOversizeDiffB.Value = (Decimal) (oversizeDiffInputB.HasValue ? (int) oversizeDiffInputB.Value : 0);
        this.txtOversizeLimitB.Value = (Decimal) (oversizeLimitInputB.HasValue ? (int) oversizeLimitInputB.Value : 0);
        this.txtUndersizeDiffB.Value = (Decimal) (undersizeDiffInputB.HasValue ? (int) undersizeDiffInputB.Value : 0);
        this.txtUndersizeLimitB.Value = (Decimal) (undersizeLimitInputB.HasValue ? (int) undersizeLimitInputB.Value : 0);
        this.txtBurstDiffB.Value = (Decimal) (burstDiffInputB.HasValue ? (int) burstDiffInputB.Value : 0);
        this.txtBurstLimitB.Value = (Decimal) (burstLimitInputB.HasValue ? (int) burstLimitInputB.Value : 0);
        this.txtVifB.Value = (Decimal) (vifInputB.HasValue ? (int) vifInputB.Value : 0);
        this.txtScaleMantissaB.Value = (Decimal) (scaleMantissaInputB.HasValue ? (int) scaleMantissaInputB.Value : 0);
        this.txtScaleExponentB.Value = (Decimal) (scaleExponentInputB.HasValue ? (int) scaleExponentInputB.Value : 0);
        this.cboxRadioMode.SelectedItem = radioMode.HasValue ? (object) radioMode.Value.ToString() : (object) string.Empty;
        this.cboxRadioPower.SelectedItem = radioPower.HasValue ? (object) radioPower.Value.ToString() : (object) string.Empty;
        this.cboxRadioListType.SelectedItem = radioListType.HasValue ? (object) radioListType.Value.ToString() : (object) string.Empty;
        this.txtRadioTimeBias.Value = (Decimal) (radioTimeBias.HasValue ? (int) radioTimeBias.Value : 0);
        this.txtRadioTransmitInterval.Value = (Decimal) (transmitInterval.HasValue ? (int) transmitInterval.Value : 0);
        this.txtRadioInstallInterval.Value = (Decimal) (radioInstallInterval.HasValue ? (int) radioInstallInterval.Value : 0);
        this.txtRadioInstallCount.Value = (Decimal) (radioInstallCount.HasValue ? (int) radioInstallCount.Value : 0);
        this.txtRadioFrequencyOffset.Value = (Decimal) (frequencyOffset.HasValue ? (int) frequencyOffset.Value : 0);
        this.txtRadioPacketBOffset.Value = (Decimal) (radioPacketBoffset.HasValue ? (int) radioPacketBoffset.Value : 0);
        this.txtAESkey.Text = aeSkey != null ? ZR_ClassLibrary.Util.ByteArrayToHexString(aeSkey) : string.Empty;
        this.txtSystemTime.Value = systemTime.HasValue ? systemTime.Value : PDC_HandlerFunctions.DateTimeNull;
        this.txtDueDate.Value = dueDate.HasValue ? dueDate.Value : PDC_HandlerFunctions.DateTimeNull;
        this.txtTimeZone.Value = (Decimal) (timeZone.HasValue ? timeZone.Value : 0);
        this.txtBatteryEndDate.Value = batteryEndDate;
        this.txtPulseActivateRadio.Value = (Decimal) (pulseActivateRadio.HasValue ? (int) pulseActivateRadio.Value : 0);
        this.txtPulsePeriod.Value = (Decimal) (pulsePeriod.HasValue ? (int) pulsePeriod.Value : 0);
        this.txtPulseOn.Value = (Decimal) (pulseOn.HasValue ? (int) pulseOn.Value : 0);
        this.txtPulseReadingA.Value = (Decimal) (meterValueA.HasValue ? meterValueA.Value : 0U);
        this.txtPulseReadingB.Value = (Decimal) (meterValueB.HasValue ? meterValueB.Value : 0U);
        if (hardwareErrors.HasValue)
        {
          for (int index = 0; index < this.listHardwareErrors.Items.Count; ++index)
          {
            HardwareError hardwareError1 = (HardwareError) Enum.Parse(typeof (HardwareError), this.listHardwareErrors.GetItemText(this.listHardwareErrors.Items[index]), true);
            HardwareError? nullable1 = hardwareErrors;
            HardwareError hardwareError2 = hardwareError1;
            HardwareError? nullable2 = nullable1.HasValue ? new HardwareError?(nullable1.GetValueOrDefault() & hardwareError2) : new HardwareError?();
            HardwareError hardwareError3 = hardwareError1;
            bool flag = nullable2.GetValueOrDefault() == hardwareError3 & nullable2.HasValue;
            this.listHardwareErrors.SetItemChecked(index, flag);
          }
        }
        Warning? nullable3;
        if (warningsInputA.HasValue)
        {
          for (int index = 0; index < this.listPersistentFlagsA.Items.Count; ++index)
          {
            Warning warning1 = (Warning) Enum.Parse(typeof (Warning), this.listPersistentFlagsA.GetItemText(this.listPersistentFlagsA.Items[index]), true);
            nullable3 = warningsInputA;
            Warning warning2 = warning1;
            Warning? nullable4 = nullable3.HasValue ? new Warning?(nullable3.GetValueOrDefault() & warning2) : new Warning?();
            Warning warning3 = warning1;
            bool flag = nullable4.GetValueOrDefault() == warning3 & nullable4.HasValue;
            this.listPersistentFlagsA.SetItemChecked(index, flag);
          }
        }
        if (warningsInputB.HasValue)
        {
          for (int index = 0; index < this.listPersistentFlagsB.Items.Count; ++index)
          {
            Warning warning4 = (Warning) Enum.Parse(typeof (Warning), this.listPersistentFlagsB.GetItemText(this.listPersistentFlagsB.Items[index]), true);
            nullable3 = warningsInputB;
            Warning warning5 = warning4;
            Warning? nullable5 = nullable3.HasValue ? new Warning?(nullable3.GetValueOrDefault() & warning5) : new Warning?();
            Warning warning6 = warning4;
            bool flag = nullable5.GetValueOrDefault() == warning6 & nullable5.HasValue;
            this.listPersistentFlagsB.SetItemChecked(index, flag);
          }
        }
        if (configFlagsPdCwMbus1.HasValue)
        {
          for (int index = 0; index < this.listConfigFlags.Items.Count; ++index)
          {
            ConfigFlagsPDCwMBus configFlagsPdCwMbus2 = (ConfigFlagsPDCwMBus) Enum.Parse(typeof (ConfigFlagsPDCwMBus), this.listConfigFlags.GetItemText(this.listConfigFlags.Items[index]), true);
            ConfigFlagsPDCwMBus? nullable6 = configFlagsPdCwMbus1;
            ConfigFlagsPDCwMBus configFlagsPdCwMbus3 = configFlagsPdCwMbus2;
            ConfigFlagsPDCwMBus? nullable7 = nullable6.HasValue ? new ConfigFlagsPDCwMBus?(nullable6.GetValueOrDefault() & configFlagsPdCwMbus3) : new ConfigFlagsPDCwMBus?();
            ConfigFlagsPDCwMBus configFlagsPdCwMbus4 = configFlagsPdCwMbus2;
            bool flag = nullable7.GetValueOrDefault() == configFlagsPdCwMbus4 & nullable7.HasValue;
            this.listConfigFlags.SetItemChecked(index, flag);
          }
        }
        if (!radioFlagsPdCwMbus1.HasValue)
          return;
        for (int index = 0; index < this.listRadioFlags.Items.Count; ++index)
        {
          RadioFlagsPDCwMBus radioFlagsPdCwMbus2 = (RadioFlagsPDCwMBus) Enum.Parse(typeof (RadioFlagsPDCwMBus), this.listRadioFlags.GetItemText(this.listRadioFlags.Items[index]), true);
          RadioFlagsPDCwMBus? nullable8 = radioFlagsPdCwMbus1;
          RadioFlagsPDCwMBus radioFlagsPdCwMbus3 = radioFlagsPdCwMbus2;
          RadioFlagsPDCwMBus? nullable9 = nullable8.HasValue ? new RadioFlagsPDCwMBus?(nullable8.GetValueOrDefault() & radioFlagsPdCwMbus3) : new RadioFlagsPDCwMBus?();
          RadioFlagsPDCwMBus radioFlagsPdCwMbus4 = radioFlagsPdCwMbus2;
          bool flag = nullable9.GetValueOrDefault() == radioFlagsPdCwMbus4 & nullable9.HasValue;
          this.listRadioFlags.SetItemChecked(index, flag);
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message + Environment.NewLine + ex.StackTrace, "Error by load the values", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void SaveValues()
    {
      try
      {
        PDC_Meter handlerMeter = this.GetHandlerMeter();
        if (handlerMeter == null)
          return;
        handlerMeter.SetDeviceIdentification(new DeviceIdentification()
        {
          BaseTypeID = (uint) this.txtBaseTypeID.Value,
          HardwareTypeID = (uint) this.txtHardwareTypeID.Value,
          MeterID = (uint) this.txtMeterID.Value,
          MeterInfoID = (uint) this.txtMeterInfoID.Value,
          MeterTypeID = (uint) this.txtMeterTypeID.Value,
          SapMaterialNumber = (uint) this.txtSapMaterialNumber.Value,
          SapProductionOrderNumber = (uint) this.txtSapProductionOrderNumber.Value
        });
        handlerMeter.SetSerialnumberFull(this.txtFullSerialnumberC.Text);
        handlerMeter.SetSerialMBusPDC(Convert.ToUInt32(this.txtSerialC.Value));
        handlerMeter.SetMBusAddressPDC(Convert.ToByte(this.txtMBusAddressC.Value));
        handlerMeter.SetMediumPDC((MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), this.cboxMBusMediumC.SelectedItem.ToString(), true));
        handlerMeter.SetManufacturerPDC(this.txtManufacturerC.Text);
        handlerMeter.SetMBusGenerationPDC(Convert.ToByte(this.txtMBusGenerationC.Value));
        handlerMeter.SetObisPDC(this.txtObisC.Text);
        handlerMeter.SetSerialnumberFullInputA(this.txtFullSerialnumberA.Text);
        handlerMeter.SetSerialMBusInputA(Convert.ToUInt32(this.txtSerialA.Value));
        handlerMeter.SetMBusAddressInputA(Convert.ToByte(this.txtMBusAddressA.Value));
        handlerMeter.SetMediumInputA((MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), this.cboxMBusMediumA.SelectedItem.ToString(), true));
        handlerMeter.SetManufacturerInputA(this.txtManufacturerA.Text);
        handlerMeter.SetMBusGenerationInputA(Convert.ToByte(this.txtMBusGenerationA.Value));
        handlerMeter.SetObisInputA(this.txtObisA.Text);
        handlerMeter.SetPulseBlockLimitInputA(Convert.ToUInt16(this.txtPulseBlockLimitA.Value));
        handlerMeter.SetPulseLeakLimitInputA(Convert.ToUInt16(this.txtPulseLeakLimitA.Value));
        handlerMeter.SetPulseUnleakLimitInputA(Convert.ToUInt16(this.txtPulseUnleakLimitA.Value));
        handlerMeter.SetPulseLeakLowerInputA(Convert.ToInt16(this.txtPulseLeakLowerA.Value));
        handlerMeter.SetPulseLeakUpperInputA(Convert.ToInt16(this.txtPulseLeakUpperA.Value));
        handlerMeter.SetOversizeDiffInputA(Convert.ToUInt16(this.txtOversizeDiffA.Value));
        handlerMeter.SetOversizeLimitInputA(Convert.ToUInt16(this.txtOversizeLimitA.Value));
        handlerMeter.SetUndersizeDiffInputA(Convert.ToUInt16(this.txtUndersizeDiffA.Value));
        handlerMeter.SetUndersizeLimitInputA(Convert.ToUInt16(this.txtUndersizeLimitA.Value));
        handlerMeter.SetBurstDiffInputA(Convert.ToUInt16(this.txtBurstDiffA.Value));
        handlerMeter.SetBurstLimitInputA(Convert.ToUInt16(this.txtBurstLimitA.Value));
        handlerMeter.SetVIFInputA(Convert.ToByte(this.txtVifA.Value));
        handlerMeter.SetScaleMantissaInputA(Convert.ToUInt16(this.txtScaleMantissaA.Value));
        handlerMeter.SetScaleExponentInputA(Convert.ToSByte(this.txtScaleExponentA.Value));
        handlerMeter.SetWarningsInputA(this.GetWarningsInputA());
        handlerMeter.SetSerialnumberFullInputB(this.txtFullSerialnumberB.Text);
        handlerMeter.SetSerialMBusInputB(Convert.ToUInt32(this.txtSerialB.Value));
        handlerMeter.SetMBusAddressInputB(Convert.ToByte(this.txtMBusAddressB.Value));
        handlerMeter.SetMediumInputB((MBusDeviceType) Enum.Parse(typeof (MBusDeviceType), this.cboxMBusMediumB.SelectedItem.ToString(), true));
        handlerMeter.SetManufacturerInputB(this.txtManufacturerB.Text);
        handlerMeter.SetMBusGenerationInputB(Convert.ToByte(this.txtMBusGenerationB.Value));
        handlerMeter.SetObisInputB(this.txtObisB.Text);
        handlerMeter.SetPulseBlockLimitInputB(Convert.ToUInt16(this.txtPulseBlockLimitB.Value));
        handlerMeter.SetPulseLeakLimitInputB(Convert.ToUInt16(this.txtPulseLeakLimitB.Value));
        handlerMeter.SetPulseUnleakLimitInputB(Convert.ToUInt16(this.txtPulseUnleakLimitB.Value));
        handlerMeter.SetPulseLeakLowerInputB(Convert.ToInt16(this.txtPulseLeakLowerB.Value));
        handlerMeter.SetPulseLeakUpperInputB(Convert.ToInt16(this.txtPulseLeakUpperB.Value));
        handlerMeter.SetOversizeDiffInputB(Convert.ToUInt16(this.txtOversizeDiffB.Value));
        handlerMeter.SetOversizeLimitInputB(Convert.ToUInt16(this.txtOversizeLimitB.Value));
        handlerMeter.SetUndersizeDiffInputB(Convert.ToUInt16(this.txtUndersizeDiffB.Value));
        handlerMeter.SetUndersizeLimitInputB(Convert.ToUInt16(this.txtUndersizeLimitB.Value));
        handlerMeter.SetBurstDiffInputB(Convert.ToUInt16(this.txtBurstDiffB.Value));
        handlerMeter.SetBurstLimitInputB(Convert.ToUInt16(this.txtBurstLimitB.Value));
        handlerMeter.SetVIFInputB(Convert.ToByte(this.txtVifB.Value));
        handlerMeter.SetScaleMantissaInputB(Convert.ToUInt16(this.txtScaleMantissaB.Value));
        handlerMeter.SetScaleExponentInputB(Convert.ToSByte(this.txtScaleExponentB.Value));
        handlerMeter.SetWarningsInputB(this.GetWarningsInputB());
        handlerMeter.SetRadioMode((RadioMode) Enum.Parse(typeof (RadioMode), this.cboxRadioMode.SelectedItem.ToString(), true));
        handlerMeter.SetRadioPower((RadioPower) Enum.Parse(typeof (RadioPower), this.cboxRadioPower.SelectedItem.ToString(), true));
        handlerMeter.SetRadioListType((RadioList) Enum.Parse(typeof (RadioList), this.cboxRadioListType.SelectedItem.ToString(), true));
        handlerMeter.SetRadioTimeBias(Convert.ToInt16(this.txtRadioTimeBias.Value));
        handlerMeter.SetRadioTransmitInterval(Convert.ToUInt16(this.txtRadioTransmitInterval.Value));
        handlerMeter.SetRadioInstallInterval(Convert.ToUInt16(this.txtRadioInstallInterval.Value));
        handlerMeter.SetRadioInstallCount(Convert.ToByte(this.txtRadioInstallCount.Value));
        handlerMeter.SetFrequencyOffset(Convert.ToInt16(this.txtRadioFrequencyOffset.Value));
        handlerMeter.SetRadioPacketBOffset(Convert.ToInt16(this.txtRadioPacketBOffset.Value));
        handlerMeter.SetAESkey(ZR_ClassLibrary.Util.HexStringToByteArray(this.txtAESkey.Text));
        handlerMeter.SetDueDate(this.txtDueDate.Value);
        handlerMeter.SetTimeZone(Convert.ToInt32(this.txtTimeZone.Value));
        handlerMeter.SetBatteryEndDate(this.txtBatteryEndDate.Value);
        handlerMeter.SetPulseActivateRadio(Convert.ToByte(this.txtPulseActivateRadio.Value));
        handlerMeter.SetPulsePeriod(Convert.ToUInt16(this.txtPulsePeriod.Value));
        handlerMeter.SetPulseOn(Convert.ToByte(this.txtPulseOn.Value));
        handlerMeter.SetHardwareErrors(this.GetCheckedHardwareErrors());
        handlerMeter.SetRadioFlagsPDCwMBus(this.GetRadioFlagsPDCwMBus());
        handlerMeter.SetConfigFlagsPDCwMBus(this.GetConfigFlagsPDCwMBus());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message + Environment.NewLine + ex.StackTrace, "Error occurred while save the values", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private Warning GetWarningsInputA()
    {
      Warning warningsInputA = (Warning) 0;
      foreach (object checkedItem in this.listPersistentFlagsA.CheckedItems)
      {
        Warning warning = (Warning) Enum.Parse(typeof (Warning), checkedItem.ToString(), true);
        warningsInputA |= warning;
      }
      return warningsInputA;
    }

    private Warning GetWarningsInputB()
    {
      Warning warningsInputB = (Warning) 0;
      foreach (object checkedItem in this.listPersistentFlagsB.CheckedItems)
      {
        Warning warning = (Warning) Enum.Parse(typeof (Warning), checkedItem.ToString(), true);
        warningsInputB |= warning;
      }
      return warningsInputB;
    }

    private ConfigFlagsPDCwMBus GetConfigFlagsPDCwMBus()
    {
      ConfigFlagsPDCwMBus configFlagsPdCwMbus1 = (ConfigFlagsPDCwMBus) 0;
      foreach (object checkedItem in this.listConfigFlags.CheckedItems)
      {
        ConfigFlagsPDCwMBus configFlagsPdCwMbus2 = (ConfigFlagsPDCwMBus) Enum.Parse(typeof (ConfigFlagsPDCwMBus), checkedItem.ToString(), true);
        configFlagsPdCwMbus1 |= configFlagsPdCwMbus2;
      }
      return configFlagsPdCwMbus1;
    }

    private RadioFlagsPDCwMBus GetRadioFlagsPDCwMBus()
    {
      RadioFlagsPDCwMBus radioFlagsPdCwMbus1 = (RadioFlagsPDCwMBus) 0;
      foreach (object checkedItem in this.listRadioFlags.CheckedItems)
      {
        RadioFlagsPDCwMBus radioFlagsPdCwMbus2 = (RadioFlagsPDCwMBus) Enum.Parse(typeof (RadioFlagsPDCwMBus), checkedItem.ToString(), true);
        radioFlagsPdCwMbus1 |= radioFlagsPdCwMbus2;
      }
      return radioFlagsPdCwMbus1;
    }

    private HardwareError GetCheckedHardwareErrors()
    {
      HardwareError checkedHardwareErrors = (HardwareError) 0;
      foreach (object checkedItem in this.listHardwareErrors.CheckedItems)
      {
        HardwareError hardwareError = (HardwareError) Enum.Parse(typeof (HardwareError), checkedItem.ToString(), true);
        checkedHardwareErrors |= hardwareError;
      }
      return checkedHardwareErrors;
    }

    private PDC_Meter GetHandlerMeter()
    {
      PDC_Meter handlerMeter;
      switch ((HandlerMeterType) Enum.Parse(typeof (HandlerMeterType), this.cboxHandlerObject.SelectedItem.ToString()))
      {
        case HandlerMeterType.WorkMeter:
          handlerMeter = this.tempWorkMeter;
          break;
        case HandlerMeterType.TypeMeter:
          handlerMeter = this.tempTypeMeter;
          break;
        case HandlerMeterType.BackupMeter:
          handlerMeter = this.tempBackupMeter;
          break;
        case HandlerMeterType.ConnectedMeter:
          handlerMeter = this.tempConnectedMeter;
          break;
        default:
          throw new NotImplementedException();
      }
      return handlerMeter;
    }

    private void InitializeForm()
    {
      this.cboxMBusMediumA.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (MBusDeviceType));
      this.cboxMBusMediumB.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (MBusDeviceType));
      this.cboxMBusMediumC.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (MBusDeviceType));
      this.cboxRadioPower.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (RadioPower));
      this.cboxRadioListType.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (RadioList));
      List<string> stringList = new List<string>((IEnumerable<string>) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (RadioMode)));
      stringList.Remove(RadioMode.Radio2.ToString());
      stringList.Remove(RadioMode.Radio3.ToString());
      this.cboxRadioMode.DataSource = (object) stringList;
      this.listHardwareErrors.Items.Clear();
      foreach (object obj in ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (HardwareError)))
        this.listHardwareErrors.Items.Add(obj, false);
      this.listConfigFlags.Items.Clear();
      foreach (object obj in ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (ConfigFlagsPDCwMBus)))
        this.listConfigFlags.Items.Add(obj, false);
      this.listRadioFlags.Items.Clear();
      foreach (object obj in ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (RadioFlagsPDCwMBus)))
        this.listRadioFlags.Items.Add(obj, false);
      this.listPersistentFlagsA.Items.Clear();
      this.listPersistentFlagsB.Items.Clear();
      foreach (string str in ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (Warning)))
      {
        this.listPersistentFlagsA.Items.Add((object) str, false);
        this.listPersistentFlagsB.Items.Add((object) str, false);
      }
      this.cboxHandlerObject.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (HandlerMeterType));
      this.cboxHandlerObject.SelectedItem = (object) HandlerMeterType.WorkMeter;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (ConfiguratorPdcRadio));
      this.btnCancel = new Button();
      this.btnSave = new Button();
      this.label1 = new Label();
      this.label2 = new Label();
      this.label3 = new Label();
      this.label4 = new Label();
      this.label5 = new Label();
      this.label6 = new Label();
      this.label7 = new Label();
      this.txtMeterID = new NumericUpDown();
      this.txtHardwareTypeID = new NumericUpDown();
      this.txtMeterInfoID = new NumericUpDown();
      this.txtBaseTypeID = new NumericUpDown();
      this.txtMeterTypeID = new NumericUpDown();
      this.txtSapMaterialNumber = new NumericUpDown();
      this.txtSapProductionOrderNumber = new NumericUpDown();
      this.groupBox1 = new GroupBox();
      this.gboxRadio = new GroupBox();
      this.label75 = new Label();
      this.txtRadioTimeBias = new NumericUpDown();
      this.cboxRadioListType = new ComboBox();
      this.label62 = new Label();
      this.label40 = new Label();
      this.txtRadioPacketBOffset = new NumericUpDown();
      this.label59 = new Label();
      this.txtRadioInstallCount = new NumericUpDown();
      this.label57 = new Label();
      this.txtRadioInstallInterval = new NumericUpDown();
      this.txtAESkey = new TextBox();
      this.label18 = new Label();
      this.label17 = new Label();
      this.txtRadioFrequencyOffset = new NumericUpDown();
      this.label16 = new Label();
      this.cboxRadioPower = new ComboBox();
      this.label9 = new Label();
      this.txtRadioTransmitInterval = new NumericUpDown();
      this.label8 = new Label();
      this.cboxRadioMode = new ComboBox();
      this.label34 = new Label();
      this.txtPulseActivateRadio = new NumericUpDown();
      this.groupBox3 = new GroupBox();
      this.txtSystemTime = new DateTimePicker();
      this.label76 = new Label();
      this.label39 = new Label();
      this.txtPulseOn = new NumericUpDown();
      this.txtBatteryEndDate = new DateTimePicker();
      this.label63 = new Label();
      this.label26 = new Label();
      this.txtPulsePeriod = new NumericUpDown();
      this.label12 = new Label();
      this.txtTimeZone = new NumericUpDown();
      this.txtDueDate = new DateTimePicker();
      this.label22 = new Label();
      this.label13 = new Label();
      this.txtPulseReadingA = new NumericUpDown();
      this.txtSerialC = new NumericUpDown();
      this.txtObisC = new TextBox();
      this.label37 = new Label();
      this.label23 = new Label();
      this.label19 = new Label();
      this.label15 = new Label();
      this.label14 = new Label();
      this.label10 = new Label();
      this.txtManufacturerC = new TextBox();
      this.txtMBusAddressC = new NumericUpDown();
      this.cboxMBusMediumC = new ComboBox();
      this.txtMBusGenerationC = new NumericUpDown();
      this.toolTip = new ToolTip();
      this.label36 = new Label();
      this.cboxHandlerObject = new ComboBox();
      this.panel = new Panel();
      this.groupBox10 = new GroupBox();
      this.listPersistentFlagsB = new CheckedListBox();
      this.groupBox9 = new GroupBox();
      this.listPersistentFlagsA = new CheckedListBox();
      this.groupBox7 = new GroupBox();
      this.listRadioFlags = new CheckedListBox();
      this.groupBox2 = new GroupBox();
      this.listConfigFlags = new CheckedListBox();
      this.groupBox6 = new GroupBox();
      this.label11 = new Label();
      this.txtFullSerialnumberB = new TextBox();
      this.txtScaleExponentB = new NumericUpDown();
      this.label20 = new Label();
      this.label33 = new Label();
      this.txtMBusAddressB = new NumericUpDown();
      this.txtScaleMantissaB = new NumericUpDown();
      this.txtMBusGenerationB = new NumericUpDown();
      this.txtVifB = new NumericUpDown();
      this.txtSerialB = new NumericUpDown();
      this.label35 = new Label();
      this.cboxMBusMediumB = new ComboBox();
      this.label64 = new Label();
      this.txtObisB = new TextBox();
      this.label65 = new Label();
      this.txtManufacturerB = new TextBox();
      this.label66 = new Label();
      this.label21 = new Label();
      this.label67 = new Label();
      this.label24 = new Label();
      this.label68 = new Label();
      this.label25 = new Label();
      this.label69 = new Label();
      this.label27 = new Label();
      this.label70 = new Label();
      this.label28 = new Label();
      this.label71 = new Label();
      this.label29 = new Label();
      this.label72 = new Label();
      this.txtUndersizeLimitB = new NumericUpDown();
      this.label73 = new Label();
      this.txtPulseBlockLimitB = new NumericUpDown();
      this.label74 = new Label();
      this.txtPulseLeakLimitB = new NumericUpDown();
      this.txtBurstLimitB = new NumericUpDown();
      this.txtPulseUnleakLimitB = new NumericUpDown();
      this.txtBurstDiffB = new NumericUpDown();
      this.txtPulseLeakLowerB = new NumericUpDown();
      this.txtPulseLeakUpperB = new NumericUpDown();
      this.txtUndersizeDiffB = new NumericUpDown();
      this.txtOversizeDiffB = new NumericUpDown();
      this.txtOversizeLimitB = new NumericUpDown();
      this.groupBox5 = new GroupBox();
      this.label32 = new Label();
      this.txtScaleExponentA = new NumericUpDown();
      this.label31 = new Label();
      this.txtScaleMantissaA = new NumericUpDown();
      this.txtVifA = new NumericUpDown();
      this.label30 = new Label();
      this.label51 = new Label();
      this.label52 = new Label();
      this.label53 = new Label();
      this.label54 = new Label();
      this.label55 = new Label();
      this.label56 = new Label();
      this.label47 = new Label();
      this.label46 = new Label();
      this.label45 = new Label();
      this.label44 = new Label();
      this.label43 = new Label();
      this.txtBurstLimitA = new NumericUpDown();
      this.txtBurstDiffA = new NumericUpDown();
      this.txtUndersizeLimitA = new NumericUpDown();
      this.txtUndersizeDiffA = new NumericUpDown();
      this.txtOversizeLimitA = new NumericUpDown();
      this.txtOversizeDiffA = new NumericUpDown();
      this.txtPulseLeakUpperA = new NumericUpDown();
      this.txtPulseLeakLowerA = new NumericUpDown();
      this.txtPulseUnleakLimitA = new NumericUpDown();
      this.txtPulseLeakLimitA = new NumericUpDown();
      this.txtPulseBlockLimitA = new NumericUpDown();
      this.txtFullSerialnumberA = new TextBox();
      this.label42 = new Label();
      this.txtMBusAddressA = new NumericUpDown();
      this.txtMBusGenerationA = new NumericUpDown();
      this.txtSerialA = new NumericUpDown();
      this.cboxMBusMediumA = new ComboBox();
      this.txtObisA = new TextBox();
      this.txtManufacturerA = new TextBox();
      this.label48 = new Label();
      this.label49 = new Label();
      this.label50 = new Label();
      this.label58 = new Label();
      this.label60 = new Label();
      this.label61 = new Label();
      this.groupBox4 = new GroupBox();
      this.txtFullSerialnumberC = new TextBox();
      this.label41 = new Label();
      this.label38 = new Label();
      this.txtPulseReadingB = new NumericUpDown();
      this.groupBox8 = new GroupBox();
      this.listHardwareErrors = new CheckedListBox();
      this.ckboxShowParameterNamesUsedInFirmware = new CheckBox();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.txtMeterID.BeginInit();
      this.txtHardwareTypeID.BeginInit();
      this.txtMeterInfoID.BeginInit();
      this.txtBaseTypeID.BeginInit();
      this.txtMeterTypeID.BeginInit();
      this.txtSapMaterialNumber.BeginInit();
      this.txtSapProductionOrderNumber.BeginInit();
      this.groupBox1.SuspendLayout();
      this.gboxRadio.SuspendLayout();
      this.txtRadioTimeBias.BeginInit();
      this.txtRadioPacketBOffset.BeginInit();
      this.txtRadioInstallCount.BeginInit();
      this.txtRadioInstallInterval.BeginInit();
      this.txtRadioFrequencyOffset.BeginInit();
      this.txtRadioTransmitInterval.BeginInit();
      this.txtPulseActivateRadio.BeginInit();
      this.groupBox3.SuspendLayout();
      this.txtPulseOn.BeginInit();
      this.txtPulsePeriod.BeginInit();
      this.txtTimeZone.BeginInit();
      this.txtPulseReadingA.BeginInit();
      this.txtSerialC.BeginInit();
      this.txtMBusAddressC.BeginInit();
      this.txtMBusGenerationC.BeginInit();
      this.panel.SuspendLayout();
      this.groupBox10.SuspendLayout();
      this.groupBox9.SuspendLayout();
      this.groupBox7.SuspendLayout();
      this.groupBox2.SuspendLayout();
      this.groupBox6.SuspendLayout();
      this.txtScaleExponentB.BeginInit();
      this.txtMBusAddressB.BeginInit();
      this.txtScaleMantissaB.BeginInit();
      this.txtMBusGenerationB.BeginInit();
      this.txtVifB.BeginInit();
      this.txtSerialB.BeginInit();
      this.txtUndersizeLimitB.BeginInit();
      this.txtPulseBlockLimitB.BeginInit();
      this.txtPulseLeakLimitB.BeginInit();
      this.txtBurstLimitB.BeginInit();
      this.txtPulseUnleakLimitB.BeginInit();
      this.txtBurstDiffB.BeginInit();
      this.txtPulseLeakLowerB.BeginInit();
      this.txtPulseLeakUpperB.BeginInit();
      this.txtUndersizeDiffB.BeginInit();
      this.txtOversizeDiffB.BeginInit();
      this.txtOversizeLimitB.BeginInit();
      this.groupBox5.SuspendLayout();
      this.txtScaleExponentA.BeginInit();
      this.txtScaleMantissaA.BeginInit();
      this.txtVifA.BeginInit();
      this.txtBurstLimitA.BeginInit();
      this.txtBurstDiffA.BeginInit();
      this.txtUndersizeLimitA.BeginInit();
      this.txtUndersizeDiffA.BeginInit();
      this.txtOversizeLimitA.BeginInit();
      this.txtOversizeDiffA.BeginInit();
      this.txtPulseLeakUpperA.BeginInit();
      this.txtPulseLeakLowerA.BeginInit();
      this.txtPulseUnleakLimitA.BeginInit();
      this.txtPulseLeakLimitA.BeginInit();
      this.txtPulseBlockLimitA.BeginInit();
      this.txtMBusAddressA.BeginInit();
      this.txtMBusGenerationA.BeginInit();
      this.txtSerialA.BeginInit();
      this.groupBox4.SuspendLayout();
      this.txtPulseReadingB.BeginInit();
      this.groupBox8.SuspendLayout();
      this.SuspendLayout();
      this.btnCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnCancel.DialogResult = DialogResult.Cancel;
      this.btnCancel.Image = (Image) componentResourceManager.GetObject("btnCancel.Image");
      this.btnCancel.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnCancel.ImeMode = ImeMode.NoControl;
      this.btnCancel.Location = new Point(947, 598);
      this.btnCancel.Name = "btnCancel";
      this.btnCancel.Size = new Size(77, 29);
      this.btnCancel.TabIndex = 19;
      this.btnCancel.Text = "Cancel";
      this.btnCancel.TextAlign = ContentAlignment.MiddleRight;
      this.btnCancel.UseVisualStyleBackColor = true;
      this.btnSave.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnSave.Image = (Image) componentResourceManager.GetObject("btnSave.Image");
      this.btnSave.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSave.ImeMode = ImeMode.NoControl;
      this.btnSave.Location = new Point(847, 598);
      this.btnSave.Name = "btnSave";
      this.btnSave.Size = new Size(77, 29);
      this.btnSave.TabIndex = 18;
      this.btnSave.Text = "Save";
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.label1.Location = new Point(11, 16);
      this.label1.Name = "label1";
      this.label1.Size = new Size(135, 15);
      this.label1.TabIndex = 21;
      this.label1.Tag = (object) "Con_MeterId";
      this.label1.Text = "Meter ID:";
      this.label1.TextAlign = ContentAlignment.MiddleRight;
      this.label2.Location = new Point(11, 36);
      this.label2.Name = "label2";
      this.label2.Size = new Size(135, 15);
      this.label2.TabIndex = 23;
      this.label2.Tag = (object) "Con_HardwareTypeId";
      this.label2.Text = "Hardware Type ID:";
      this.label2.TextAlign = ContentAlignment.MiddleRight;
      this.label3.Location = new Point(11, 55);
      this.label3.Name = "label3";
      this.label3.Size = new Size(135, 15);
      this.label3.TabIndex = 25;
      this.label3.Tag = (object) "Con_MeterInfoId";
      this.label3.Text = "Meter Info ID:";
      this.label3.TextAlign = ContentAlignment.MiddleRight;
      this.label4.Location = new Point(11, 74);
      this.label4.Name = "label4";
      this.label4.Size = new Size(135, 15);
      this.label4.TabIndex = 27;
      this.label4.Tag = (object) "Con_BaseTypeId";
      this.label4.Text = "Base Type ID:";
      this.label4.TextAlign = ContentAlignment.MiddleRight;
      this.label5.Location = new Point(11, 94);
      this.label5.Name = "label5";
      this.label5.Size = new Size(135, 15);
      this.label5.TabIndex = 29;
      this.label5.Tag = (object) "Con_MeterTypeId";
      this.label5.Text = "Meter Type ID:";
      this.label5.TextAlign = ContentAlignment.MiddleRight;
      this.label6.Location = new Point(11, 111);
      this.label6.Name = "label6";
      this.label6.Size = new Size(135, 15);
      this.label6.TabIndex = 31;
      this.label6.Tag = (object) "Con_SAP_MaterialNumber";
      this.label6.Text = "SAP Material Nr:";
      this.label6.TextAlign = ContentAlignment.MiddleRight;
      this.label7.Location = new Point(11, 129);
      this.label7.Name = "label7";
      this.label7.Size = new Size(135, 15);
      this.label7.TabIndex = 33;
      this.label7.Tag = (object) "Con_SAP_ProductionOrderNumber";
      this.label7.Text = "SAP Order Nr:";
      this.label7.TextAlign = ContentAlignment.MiddleRight;
      this.txtMeterID.Location = new Point(152, 15);
      this.txtMeterID.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtMeterID.Name = "txtMeterID";
      this.txtMeterID.Size = new Size(87, 20);
      this.txtMeterID.TabIndex = 34;
      this.txtHardwareTypeID.Location = new Point(152, 34);
      this.txtHardwareTypeID.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtHardwareTypeID.Name = "txtHardwareTypeID";
      this.txtHardwareTypeID.Size = new Size(87, 20);
      this.txtHardwareTypeID.TabIndex = 35;
      this.txtMeterInfoID.Location = new Point(152, 53);
      this.txtMeterInfoID.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtMeterInfoID.Name = "txtMeterInfoID";
      this.txtMeterInfoID.Size = new Size(87, 20);
      this.txtMeterInfoID.TabIndex = 36;
      this.txtBaseTypeID.Location = new Point(152, 72);
      this.txtBaseTypeID.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtBaseTypeID.Name = "txtBaseTypeID";
      this.txtBaseTypeID.Size = new Size(87, 20);
      this.txtBaseTypeID.TabIndex = 37;
      this.txtMeterTypeID.Location = new Point(152, 91);
      this.txtMeterTypeID.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtMeterTypeID.Name = "txtMeterTypeID";
      this.txtMeterTypeID.Size = new Size(87, 20);
      this.txtMeterTypeID.TabIndex = 38;
      this.txtSapMaterialNumber.Location = new Point(152, 110);
      this.txtSapMaterialNumber.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtSapMaterialNumber.Name = "txtSapMaterialNumber";
      this.txtSapMaterialNumber.Size = new Size(87, 20);
      this.txtSapMaterialNumber.TabIndex = 39;
      this.txtSapProductionOrderNumber.Location = new Point(152, 129);
      this.txtSapProductionOrderNumber.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtSapProductionOrderNumber.Name = "txtSapProductionOrderNumber";
      this.txtSapProductionOrderNumber.Size = new Size(87, 20);
      this.txtSapProductionOrderNumber.TabIndex = 40;
      this.groupBox1.Controls.Add((Control) this.label1);
      this.groupBox1.Controls.Add((Control) this.txtSapProductionOrderNumber);
      this.groupBox1.Controls.Add((Control) this.label2);
      this.groupBox1.Controls.Add((Control) this.txtSapMaterialNumber);
      this.groupBox1.Controls.Add((Control) this.label3);
      this.groupBox1.Controls.Add((Control) this.txtMeterTypeID);
      this.groupBox1.Controls.Add((Control) this.label4);
      this.groupBox1.Controls.Add((Control) this.txtBaseTypeID);
      this.groupBox1.Controls.Add((Control) this.label5);
      this.groupBox1.Controls.Add((Control) this.txtMeterInfoID);
      this.groupBox1.Controls.Add((Control) this.label6);
      this.groupBox1.Controls.Add((Control) this.txtHardwareTypeID);
      this.groupBox1.Controls.Add((Control) this.label7);
      this.groupBox1.Controls.Add((Control) this.txtMeterID);
      this.groupBox1.Location = new Point(785, 1);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.Size = new Size(245, 154);
      this.groupBox1.TabIndex = 41;
      this.groupBox1.TabStop = false;
      this.groupBox1.Text = "Identification";
      this.gboxRadio.Controls.Add((Control) this.label75);
      this.gboxRadio.Controls.Add((Control) this.txtRadioTimeBias);
      this.gboxRadio.Controls.Add((Control) this.cboxRadioListType);
      this.gboxRadio.Controls.Add((Control) this.label62);
      this.gboxRadio.Controls.Add((Control) this.label40);
      this.gboxRadio.Controls.Add((Control) this.txtRadioPacketBOffset);
      this.gboxRadio.Controls.Add((Control) this.label59);
      this.gboxRadio.Controls.Add((Control) this.txtRadioInstallCount);
      this.gboxRadio.Controls.Add((Control) this.label57);
      this.gboxRadio.Controls.Add((Control) this.txtRadioInstallInterval);
      this.gboxRadio.Controls.Add((Control) this.txtAESkey);
      this.gboxRadio.Controls.Add((Control) this.label18);
      this.gboxRadio.Controls.Add((Control) this.label17);
      this.gboxRadio.Controls.Add((Control) this.txtRadioFrequencyOffset);
      this.gboxRadio.Controls.Add((Control) this.label16);
      this.gboxRadio.Controls.Add((Control) this.cboxRadioPower);
      this.gboxRadio.Controls.Add((Control) this.label9);
      this.gboxRadio.Controls.Add((Control) this.txtRadioTransmitInterval);
      this.gboxRadio.Controls.Add((Control) this.label8);
      this.gboxRadio.Controls.Add((Control) this.cboxRadioMode);
      this.gboxRadio.Location = new Point(4, 157);
      this.gboxRadio.Name = "gboxRadio";
      this.gboxRadio.Size = new Size(266, 232);
      this.gboxRadio.TabIndex = 42;
      this.gboxRadio.TabStop = false;
      this.gboxRadio.Text = "Radio settings";
      this.label75.Location = new Point(5, 77);
      this.label75.Name = "label75";
      this.label75.Size = new Size(194, 15);
      this.label75.TabIndex = 104;
      this.label75.Tag = (object) "cfg_radio_time_bias";
      this.label75.Text = "Radio time bias:";
      this.label75.TextAlign = ContentAlignment.MiddleRight;
      this.txtRadioTimeBias.Location = new Point(205, 76);
      this.txtRadioTimeBias.Maximum = new Decimal(new int[4]
      {
        (int) short.MaxValue,
        0,
        0,
        0
      });
      this.txtRadioTimeBias.Minimum = new Decimal(new int[4]
      {
        32768,
        0,
        0,
        int.MinValue
      });
      this.txtRadioTimeBias.Name = "txtRadioTimeBias";
      this.txtRadioTimeBias.Size = new Size(53, 20);
      this.txtRadioTimeBias.TabIndex = 105;
      this.txtRadioTimeBias.Value = new Decimal(new int[4]
      {
        2,
        0,
        0,
        0
      });
      this.cboxRadioListType.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxRadioListType.FormattingEnabled = true;
      this.cboxRadioListType.Location = new Point(166, 54);
      this.cboxRadioListType.Name = "cboxRadioListType";
      this.cboxRadioListType.Size = new Size(93, 21);
      this.cboxRadioListType.TabIndex = 102;
      this.label62.Location = new Point(6, 54);
      this.label62.Name = "label62";
      this.label62.Size = new Size(153, 15);
      this.label62.TabIndex = 103;
      this.label62.Tag = (object) "cfg_list";
      this.label62.Text = "List type:";
      this.label62.TextAlign = ContentAlignment.MiddleRight;
      this.label40.Location = new Point(4, 172);
      this.label40.Name = "label40";
      this.label40.Size = new Size(194, 15);
      this.label40.TabIndex = 61;
      this.label40.Tag = (object) "cfg_radio_packetb_offset";
      this.label40.Text = "Radio packet B offset:";
      this.label40.TextAlign = ContentAlignment.MiddleRight;
      this.txtRadioPacketBOffset.Location = new Point(205, 171);
      this.txtRadioPacketBOffset.Maximum = new Decimal(new int[4]
      {
        (int) ushort.MaxValue,
        0,
        0,
        0
      });
      this.txtRadioPacketBOffset.Name = "txtRadioPacketBOffset";
      this.txtRadioPacketBOffset.Size = new Size(53, 20);
      this.txtRadioPacketBOffset.TabIndex = 62;
      this.label59.Location = new Point(4, 134);
      this.label59.Name = "label59";
      this.label59.Size = new Size(194, 15);
      this.label59.TabIndex = 59;
      this.label59.Tag = (object) "cfg_radio_install_count";
      this.label59.Text = "Install count:";
      this.label59.TextAlign = ContentAlignment.MiddleRight;
      this.txtRadioInstallCount.Location = new Point(205, 133);
      this.txtRadioInstallCount.Maximum = new Decimal(new int[4]
      {
        256,
        0,
        0,
        0
      });
      this.txtRadioInstallCount.Name = "txtRadioInstallCount";
      this.txtRadioInstallCount.Size = new Size(53, 20);
      this.txtRadioInstallCount.TabIndex = 60;
      this.label57.Location = new Point(4, 115);
      this.label57.Name = "label57";
      this.label57.Size = new Size(194, 15);
      this.label57.TabIndex = 55;
      this.label57.Tag = (object) "cfg_radio_install_basetime";
      this.label57.Text = "Install interval:";
      this.label57.TextAlign = ContentAlignment.MiddleRight;
      this.txtRadioInstallInterval.Location = new Point(205, 114);
      this.txtRadioInstallInterval.Maximum = new Decimal(new int[4]
      {
        (int) ushort.MaxValue,
        0,
        0,
        0
      });
      this.txtRadioInstallInterval.Minimum = new Decimal(new int[4]
      {
        2,
        0,
        0,
        0
      });
      this.txtRadioInstallInterval.Name = "txtRadioInstallInterval";
      this.txtRadioInstallInterval.Size = new Size(53, 20);
      this.txtRadioInstallInterval.TabIndex = 56;
      this.txtRadioInstallInterval.Value = new Decimal(new int[4]
      {
        2,
        0,
        0,
        0
      });
      this.txtAESkey.Location = new Point(7, 206);
      this.txtAESkey.MaxLength = 32;
      this.txtAESkey.Name = "txtAESkey";
      this.txtAESkey.Size = new Size(215, 20);
      this.txtAESkey.TabIndex = 46;
      this.label18.Location = new Point(10, 190);
      this.label18.Name = "label18";
      this.label18.Size = new Size(149, 15);
      this.label18.TabIndex = 45;
      this.label18.Tag = (object) "cfg_key";
      this.label18.Text = "AES key (32 chars as HEX)";
      this.label17.Location = new Point(4, 153);
      this.label17.Name = "label17";
      this.label17.Size = new Size(194, 15);
      this.label17.TabIndex = 43;
      this.label17.Tag = (object) "cfg_radio_freq_offset";
      this.label17.Text = "Frequency offset:";
      this.label17.TextAlign = ContentAlignment.MiddleRight;
      this.txtRadioFrequencyOffset.Location = new Point(205, 152);
      this.txtRadioFrequencyOffset.Maximum = new Decimal(new int[4]
      {
        (int) short.MaxValue,
        0,
        0,
        0
      });
      this.txtRadioFrequencyOffset.Minimum = new Decimal(new int[4]
      {
        32768,
        0,
        0,
        int.MinValue
      });
      this.txtRadioFrequencyOffset.Name = "txtRadioFrequencyOffset";
      this.txtRadioFrequencyOffset.Size = new Size(53, 20);
      this.txtRadioFrequencyOffset.TabIndex = 44;
      this.label16.Location = new Point(7, 34);
      this.label16.Name = "label16";
      this.label16.Size = new Size(153, 15);
      this.label16.TabIndex = 42;
      this.label16.Tag = (object) "cfg_radio_power";
      this.label16.Text = "Power:";
      this.label16.TextAlign = ContentAlignment.MiddleRight;
      this.cboxRadioPower.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxRadioPower.FormattingEnabled = true;
      this.cboxRadioPower.Location = new Point(166, 34);
      this.cboxRadioPower.Name = "cboxRadioPower";
      this.cboxRadioPower.Size = new Size(93, 21);
      this.cboxRadioPower.TabIndex = 41;
      this.label9.Location = new Point(4, 96);
      this.label9.Name = "label9";
      this.label9.Size = new Size(194, 15);
      this.label9.TabIndex = 36;
      this.label9.Tag = (object) "cfg_radio_normal_basetime";
      this.label9.Text = "Transmit interval:";
      this.label9.TextAlign = ContentAlignment.MiddleRight;
      this.txtRadioTransmitInterval.Location = new Point(205, 95);
      this.txtRadioTransmitInterval.Maximum = new Decimal(new int[4]
      {
        (int) ushort.MaxValue,
        0,
        0,
        0
      });
      this.txtRadioTransmitInterval.Minimum = new Decimal(new int[4]
      {
        2,
        0,
        0,
        0
      });
      this.txtRadioTransmitInterval.Name = "txtRadioTransmitInterval";
      this.txtRadioTransmitInterval.Size = new Size(53, 20);
      this.txtRadioTransmitInterval.TabIndex = 37;
      this.txtRadioTransmitInterval.Value = new Decimal(new int[4]
      {
        2,
        0,
        0,
        0
      });
      this.label8.Location = new Point(7, 14);
      this.label8.Name = "label8";
      this.label8.Size = new Size(153, 15);
      this.label8.TabIndex = 22;
      this.label8.Tag = (object) "cfg_radio_mode";
      this.label8.Text = "Mode:";
      this.label8.TextAlign = ContentAlignment.MiddleRight;
      this.cboxRadioMode.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxRadioMode.FormattingEnabled = true;
      this.cboxRadioMode.Location = new Point(166, 14);
      this.cboxRadioMode.Name = "cboxRadioMode";
      this.cboxRadioMode.Size = new Size(93, 21);
      this.cboxRadioMode.TabIndex = 0;
      this.label34.Location = new Point(8, 98);
      this.label34.Name = "label34";
      this.label34.Size = new Size(157, 15);
      this.label34.TabIndex = 51;
      this.label34.Tag = (object) "cfg_pulse_activate";
      this.label34.Text = "Pulse activate:";
      this.label34.TextAlign = ContentAlignment.MiddleRight;
      this.txtPulseActivateRadio.Location = new Point(171, 97);
      this.txtPulseActivateRadio.Maximum = new Decimal(new int[4]
      {
        (int) ushort.MaxValue,
        0,
        0,
        0
      });
      this.txtPulseActivateRadio.Name = "txtPulseActivateRadio";
      this.txtPulseActivateRadio.Size = new Size(86, 20);
      this.txtPulseActivateRadio.TabIndex = 52;
      this.groupBox3.Controls.Add((Control) this.txtSystemTime);
      this.groupBox3.Controls.Add((Control) this.label76);
      this.groupBox3.Controls.Add((Control) this.label39);
      this.groupBox3.Controls.Add((Control) this.txtPulseOn);
      this.groupBox3.Controls.Add((Control) this.txtBatteryEndDate);
      this.groupBox3.Controls.Add((Control) this.label34);
      this.groupBox3.Controls.Add((Control) this.label63);
      this.groupBox3.Controls.Add((Control) this.txtPulseActivateRadio);
      this.groupBox3.Controls.Add((Control) this.label26);
      this.groupBox3.Controls.Add((Control) this.txtPulsePeriod);
      this.groupBox3.Controls.Add((Control) this.label12);
      this.groupBox3.Controls.Add((Control) this.txtTimeZone);
      this.groupBox3.Controls.Add((Control) this.txtDueDate);
      this.groupBox3.Controls.Add((Control) this.label22);
      this.groupBox3.Location = new Point(4, 390);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.Size = new Size(266, 160);
      this.groupBox3.TabIndex = 43;
      this.groupBox3.TabStop = false;
      this.groupBox3.Text = "Common settings";
      this.txtSystemTime.CustomFormat = "dd.MM.yyyy HH:mm";
      this.txtSystemTime.Enabled = false;
      this.txtSystemTime.Format = DateTimePickerFormat.Custom;
      this.txtSystemTime.Location = new Point(147, 16);
      this.txtSystemTime.Name = "txtSystemTime";
      this.txtSystemTime.ShowUpDown = true;
      this.txtSystemTime.Size = new Size(111, 20);
      this.txtSystemTime.TabIndex = 70;
      this.label76.Location = new Point(7, 16);
      this.label76.Name = "label76";
      this.label76.Size = new Size(134, 15);
      this.label76.TabIndex = 69;
      this.label76.Tag = (object) "hwSystemDate";
      this.label76.Text = "System time:";
      this.label76.TextAlign = ContentAlignment.MiddleRight;
      this.label39.Location = new Point(5, 135);
      this.label39.Name = "label39";
      this.label39.Size = new Size(160, 15);
      this.label39.TabIndex = 67;
      this.label39.Tag = (object) "cfg_pulse_on";
      this.label39.Text = "Pulse on:";
      this.label39.TextAlign = ContentAlignment.MiddleRight;
      this.txtPulseOn.Location = new Point(171, 135);
      this.txtPulseOn.Maximum = new Decimal(new int[4]
      {
        256,
        0,
        0,
        0
      });
      this.txtPulseOn.Name = "txtPulseOn";
      this.txtPulseOn.Size = new Size(86, 20);
      this.txtPulseOn.TabIndex = 68;
      this.txtBatteryEndDate.CustomFormat = "dd.MM.yyyy";
      this.txtBatteryEndDate.Format = DateTimePickerFormat.Custom;
      this.txtBatteryEndDate.Location = new Point(171, 77);
      this.txtBatteryEndDate.Name = "txtBatteryEndDate";
      this.txtBatteryEndDate.ShowUpDown = true;
      this.txtBatteryEndDate.Size = new Size(87, 20);
      this.txtBatteryEndDate.TabIndex = 66;
      this.label63.Location = new Point(5, 77);
      this.label63.Name = "label63";
      this.label63.Size = new Size(160, 15);
      this.label63.TabIndex = 65;
      this.label63.Tag = (object) "cfg_lowbatt_year_month_day";
      this.label63.Text = "Battery end date:";
      this.label63.TextAlign = ContentAlignment.MiddleRight;
      this.label26.Location = new Point(5, 116);
      this.label26.Name = "label26";
      this.label26.Size = new Size(160, 15);
      this.label26.TabIndex = 56;
      this.label26.Tag = (object) "cfg_pulse_period";
      this.label26.Text = "Pulse period:";
      this.label26.TextAlign = ContentAlignment.MiddleRight;
      this.txtPulsePeriod.Location = new Point(171, 116);
      this.txtPulsePeriod.Maximum = new Decimal(new int[4]
      {
        (int) ushort.MaxValue,
        0,
        0,
        0
      });
      this.txtPulsePeriod.Name = "txtPulsePeriod";
      this.txtPulsePeriod.Size = new Size(86, 20);
      this.txtPulsePeriod.TabIndex = 57;
      this.label12.Location = new Point(5, 58);
      this.label12.Name = "label12";
      this.label12.Size = new Size(160, 15);
      this.label12.TabIndex = 39;
      this.label12.Tag = (object) "Bak_TimeZoneInQuarterHours";
      this.label12.Text = "Timezone (qarter hours):";
      this.label12.TextAlign = ContentAlignment.MiddleRight;
      this.txtTimeZone.Location = new Point(171, 58);
      this.txtTimeZone.Maximum = new Decimal(new int[4]
      {
        56,
        0,
        0,
        0
      });
      this.txtTimeZone.Minimum = new Decimal(new int[4]
      {
        48,
        0,
        0,
        int.MinValue
      });
      this.txtTimeZone.Name = "txtTimeZone";
      this.txtTimeZone.Size = new Size(86, 20);
      this.txtTimeZone.TabIndex = 40;
      this.txtDueDate.CustomFormat = "dd.MM";
      this.txtDueDate.Format = DateTimePickerFormat.Custom;
      this.txtDueDate.Location = new Point(171, 38);
      this.txtDueDate.Name = "txtDueDate";
      this.txtDueDate.ShowUpDown = true;
      this.txtDueDate.Size = new Size(87, 20);
      this.txtDueDate.TabIndex = 44;
      this.label22.Location = new Point(5, 38);
      this.label22.Name = "label22";
      this.label22.Size = new Size(160, 15);
      this.label22.TabIndex = 43;
      this.label22.Tag = (object) "cfg_stichtag_month_day";
      this.label22.Text = "Due date (day, month):";
      this.label22.TextAlign = ContentAlignment.MiddleRight;
      this.label13.Location = new Point(25, 553);
      this.label13.Name = "label13";
      this.label13.Size = new Size(133, 15);
      this.label13.TabIndex = 43;
      this.label13.Tag = (object) "pulseReadingA";
      this.label13.Text = "Pulses Input A:";
      this.label13.TextAlign = ContentAlignment.MiddleRight;
      this.txtPulseReadingA.Location = new Point(164, 551);
      this.txtPulseReadingA.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtPulseReadingA.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtPulseReadingA.Name = "txtPulseReadingA";
      this.txtPulseReadingA.ReadOnly = true;
      this.txtPulseReadingA.Size = new Size(106, 20);
      this.txtPulseReadingA.TabIndex = 44;
      this.txtSerialC.Location = new Point(158, 34);
      this.txtSerialC.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtSerialC.Name = "txtSerialC";
      this.txtSerialC.Size = new Size(102, 20);
      this.txtSerialC.TabIndex = 97;
      this.txtObisC.Location = new Point(158, 129);
      this.txtObisC.MaxLength = 3;
      this.txtObisC.Name = "txtObisC";
      this.txtObisC.Size = new Size(102, 20);
      this.txtObisC.TabIndex = 96;
      this.txtObisC.Tag = (object) "";
      this.label37.Location = new Point(5, 129);
      this.label37.Name = "label37";
      this.label37.Size = new Size(147, 15);
      this.label37.TabIndex = 95;
      this.label37.Tag = (object) "cfg_obis_c";
      this.label37.Text = "Obis:";
      this.label37.TextAlign = ContentAlignment.MiddleRight;
      this.label23.Location = new Point(5, 53);
      this.label23.Name = "label23";
      this.label23.Size = new Size(147, 15);
      this.label23.TabIndex = 71;
      this.label23.Tag = (object) "cfg_mbus_address_c";
      this.label23.Text = "M-Bus address:";
      this.label23.TextAlign = ContentAlignment.MiddleRight;
      this.label19.Location = new Point(5, 72);
      this.label19.Name = "label19";
      this.label19.Size = new Size(147, 15);
      this.label19.TabIndex = 73;
      this.label19.Tag = (object) "cfg_mbus_medium_c";
      this.label19.Text = "M-Bus medium:";
      this.label19.TextAlign = ContentAlignment.MiddleRight;
      this.label15.Location = new Point(5, 110);
      this.label15.Name = "label15";
      this.label15.Size = new Size(147, 15);
      this.label15.TabIndex = 75;
      this.label15.Tag = (object) "cfg_mbus_version_c";
      this.label15.Text = "M-Bus generation:";
      this.label15.TextAlign = ContentAlignment.MiddleRight;
      this.label14.Location = new Point(5, 15);
      this.label14.Name = "label14";
      this.label14.Size = new Size(147, 15);
      this.label14.TabIndex = 77;
      this.label14.Tag = (object) "Con_fullserialnumber";
      this.label14.Text = "Full Serialnumber:";
      this.label14.TextAlign = ContentAlignment.MiddleRight;
      this.label10.Location = new Point(5, 92);
      this.label10.Name = "label10";
      this.label10.Size = new Size(147, 15);
      this.label10.TabIndex = 79;
      this.label10.Tag = (object) "cfg_mbus_manid_c";
      this.label10.Text = "Manufacturer:";
      this.label10.TextAlign = ContentAlignment.MiddleRight;
      this.txtManufacturerC.Location = new Point(158, 92);
      this.txtManufacturerC.MaxLength = 3;
      this.txtManufacturerC.Name = "txtManufacturerC";
      this.txtManufacturerC.Size = new Size(102, 20);
      this.txtManufacturerC.TabIndex = 80;
      this.txtManufacturerC.Tag = (object) "";
      this.txtMBusAddressC.Location = new Point(158, 53);
      this.txtMBusAddressC.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtMBusAddressC.Name = "txtMBusAddressC";
      this.txtMBusAddressC.Size = new Size(102, 20);
      this.txtMBusAddressC.TabIndex = 72;
      this.cboxMBusMediumC.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxMBusMediumC.FormattingEnabled = true;
      this.cboxMBusMediumC.Location = new Point(158, 72);
      this.cboxMBusMediumC.Name = "cboxMBusMediumC";
      this.cboxMBusMediumC.Size = new Size(102, 21);
      this.cboxMBusMediumC.TabIndex = 74;
      this.txtMBusGenerationC.Location = new Point(158, 110);
      this.txtMBusGenerationC.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtMBusGenerationC.Name = "txtMBusGenerationC";
      this.txtMBusGenerationC.Size = new Size(102, 20);
      this.txtMBusGenerationC.TabIndex = 76;
      this.toolTip.AutoPopDelay = 10000;
      this.toolTip.InitialDelay = 500;
      this.toolTip.ReshowDelay = 100;
      this.toolTip.ShowAlways = true;
      this.label36.BackColor = Color.White;
      this.label36.Location = new Point(203, 7);
      this.label36.Name = "label36";
      this.label36.Size = new Size(84, 15);
      this.label36.TabIndex = 51;
      this.label36.Text = "Handler object:";
      this.label36.TextAlign = ContentAlignment.MiddleRight;
      this.cboxHandlerObject.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxHandlerObject.FormattingEnabled = true;
      this.cboxHandlerObject.Location = new Point(295, 5);
      this.cboxHandlerObject.Name = "cboxHandlerObject";
      this.cboxHandlerObject.Size = new Size(132, 21);
      this.cboxHandlerObject.TabIndex = 50;
      this.cboxHandlerObject.SelectedIndexChanged += new System.EventHandler(this.cboxHandlerObject_SelectedIndexChanged);
      this.panel.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.panel.Controls.Add((Control) this.groupBox10);
      this.panel.Controls.Add((Control) this.groupBox9);
      this.panel.Controls.Add((Control) this.groupBox7);
      this.panel.Controls.Add((Control) this.groupBox2);
      this.panel.Controls.Add((Control) this.groupBox6);
      this.panel.Controls.Add((Control) this.groupBox5);
      this.panel.Controls.Add((Control) this.groupBox4);
      this.panel.Controls.Add((Control) this.label38);
      this.panel.Controls.Add((Control) this.txtPulseReadingB);
      this.panel.Controls.Add((Control) this.label13);
      this.panel.Controls.Add((Control) this.groupBox8);
      this.panel.Controls.Add((Control) this.txtPulseReadingA);
      this.panel.Controls.Add((Control) this.btnCancel);
      this.panel.Controls.Add((Control) this.btnSave);
      this.panel.Controls.Add((Control) this.groupBox1);
      this.panel.Controls.Add((Control) this.gboxRadio);
      this.panel.Controls.Add((Control) this.groupBox3);
      this.panel.Location = new Point(0, 36);
      this.panel.Name = "panel";
      this.panel.Size = new Size(1036, 634);
      this.panel.TabIndex = 52;
      this.groupBox10.Controls.Add((Control) this.listPersistentFlagsB);
      this.groupBox10.Location = new Point(528, 424);
      this.groupBox10.Name = "groupBox10";
      this.groupBox10.Size = new Size(252, 203);
      this.groupBox10.TabIndex = 50;
      this.groupBox10.TabStop = false;
      this.groupBox10.Tag = (object) "persistentFlagsB";
      this.groupBox10.Text = "Warnings B";
      this.listPersistentFlagsB.CheckOnClick = true;
      this.listPersistentFlagsB.FormattingEnabled = true;
      this.listPersistentFlagsB.Location = new Point(3, 16);
      this.listPersistentFlagsB.Name = "listPersistentFlagsB";
      this.listPersistentFlagsB.Size = new Size(246, 184);
      this.listPersistentFlagsB.TabIndex = 0;
      this.groupBox9.Controls.Add((Control) this.listPersistentFlagsA);
      this.groupBox9.Location = new Point(276, 423);
      this.groupBox9.Name = "groupBox9";
      this.groupBox9.Size = new Size(246, 204);
      this.groupBox9.TabIndex = 49;
      this.groupBox9.TabStop = false;
      this.groupBox9.Tag = (object) "persistentFlagsA";
      this.groupBox9.Text = "Warnings A";
      this.listPersistentFlagsA.CheckOnClick = true;
      this.listPersistentFlagsA.FormattingEnabled = true;
      this.listPersistentFlagsA.Location = new Point(3, 16);
      this.listPersistentFlagsA.Name = "listPersistentFlagsA";
      this.listPersistentFlagsA.Size = new Size(241, 184);
      this.listPersistentFlagsA.TabIndex = 0;
      this.groupBox7.Controls.Add((Control) this.listRadioFlags);
      this.groupBox7.Location = new Point(786, 303);
      this.groupBox7.Name = "groupBox7";
      this.groupBox7.Size = new Size(244, 130);
      this.groupBox7.TabIndex = 50;
      this.groupBox7.TabStop = false;
      this.groupBox7.Tag = (object) "cfg_radio_flags";
      this.groupBox7.Text = "Radio flags";
      this.listRadioFlags.CheckOnClick = true;
      this.listRadioFlags.FormattingEnabled = true;
      this.listRadioFlags.Location = new Point(3, 16);
      this.listRadioFlags.Name = "listRadioFlags";
      this.listRadioFlags.Size = new Size(235, 109);
      this.listRadioFlags.TabIndex = 0;
      this.groupBox2.Controls.Add((Control) this.listConfigFlags);
      this.groupBox2.Location = new Point(786, 157);
      this.groupBox2.Name = "groupBox2";
      this.groupBox2.Size = new Size(244, 146);
      this.groupBox2.TabIndex = 49;
      this.groupBox2.TabStop = false;
      this.groupBox2.Tag = (object) "cfg_config_flags";
      this.groupBox2.Text = "Config flags";
      this.listConfigFlags.CheckOnClick = true;
      this.listConfigFlags.FormattingEnabled = true;
      this.listConfigFlags.Location = new Point(3, 16);
      this.listConfigFlags.Name = "listConfigFlags";
      this.listConfigFlags.Size = new Size(235, 124);
      this.listConfigFlags.TabIndex = 0;
      this.groupBox6.Controls.Add((Control) this.label11);
      this.groupBox6.Controls.Add((Control) this.txtFullSerialnumberB);
      this.groupBox6.Controls.Add((Control) this.txtScaleExponentB);
      this.groupBox6.Controls.Add((Control) this.label20);
      this.groupBox6.Controls.Add((Control) this.label33);
      this.groupBox6.Controls.Add((Control) this.txtMBusAddressB);
      this.groupBox6.Controls.Add((Control) this.txtScaleMantissaB);
      this.groupBox6.Controls.Add((Control) this.txtMBusGenerationB);
      this.groupBox6.Controls.Add((Control) this.txtVifB);
      this.groupBox6.Controls.Add((Control) this.txtSerialB);
      this.groupBox6.Controls.Add((Control) this.label35);
      this.groupBox6.Controls.Add((Control) this.cboxMBusMediumB);
      this.groupBox6.Controls.Add((Control) this.label64);
      this.groupBox6.Controls.Add((Control) this.txtObisB);
      this.groupBox6.Controls.Add((Control) this.label65);
      this.groupBox6.Controls.Add((Control) this.txtManufacturerB);
      this.groupBox6.Controls.Add((Control) this.label66);
      this.groupBox6.Controls.Add((Control) this.label21);
      this.groupBox6.Controls.Add((Control) this.label67);
      this.groupBox6.Controls.Add((Control) this.label24);
      this.groupBox6.Controls.Add((Control) this.label68);
      this.groupBox6.Controls.Add((Control) this.label25);
      this.groupBox6.Controls.Add((Control) this.label69);
      this.groupBox6.Controls.Add((Control) this.label27);
      this.groupBox6.Controls.Add((Control) this.label70);
      this.groupBox6.Controls.Add((Control) this.label28);
      this.groupBox6.Controls.Add((Control) this.label71);
      this.groupBox6.Controls.Add((Control) this.label29);
      this.groupBox6.Controls.Add((Control) this.label72);
      this.groupBox6.Controls.Add((Control) this.txtUndersizeLimitB);
      this.groupBox6.Controls.Add((Control) this.label73);
      this.groupBox6.Controls.Add((Control) this.txtPulseBlockLimitB);
      this.groupBox6.Controls.Add((Control) this.label74);
      this.groupBox6.Controls.Add((Control) this.txtPulseLeakLimitB);
      this.groupBox6.Controls.Add((Control) this.txtBurstLimitB);
      this.groupBox6.Controls.Add((Control) this.txtPulseUnleakLimitB);
      this.groupBox6.Controls.Add((Control) this.txtBurstDiffB);
      this.groupBox6.Controls.Add((Control) this.txtPulseLeakLowerB);
      this.groupBox6.Controls.Add((Control) this.txtPulseLeakUpperB);
      this.groupBox6.Controls.Add((Control) this.txtUndersizeDiffB);
      this.groupBox6.Controls.Add((Control) this.txtOversizeDiffB);
      this.groupBox6.Controls.Add((Control) this.txtOversizeLimitB);
      this.groupBox6.Location = new Point(528, 1);
      this.groupBox6.Name = "groupBox6";
      this.groupBox6.Size = new Size(252, 420);
      this.groupBox6.TabIndex = 101;
      this.groupBox6.TabStop = false;
      this.groupBox6.Text = "Input B";
      this.label11.Location = new Point(8, 397);
      this.label11.Margin = new Padding(3, 0, 0, 0);
      this.label11.Name = "label11";
      this.label11.Size = new Size(178, 15);
      this.label11.TabIndex = 154;
      this.label11.Tag = (object) "cfg_scale_exponent_b";
      this.label11.Text = "Scale exponent:";
      this.label11.TextAlign = ContentAlignment.MiddleRight;
      this.txtFullSerialnumberB.Location = new Point(144, 16);
      this.txtFullSerialnumberB.Name = "txtFullSerialnumberB";
      this.txtFullSerialnumberB.Size = new Size(102, 20);
      this.txtFullSerialnumberB.TabIndex = 99;
      this.txtFullSerialnumberB.Tag = (object) "";
      this.txtScaleExponentB.Location = new Point(189, 396);
      this.txtScaleExponentB.Maximum = new Decimal(new int[4]
      {
        (int) sbyte.MaxValue,
        0,
        0,
        0
      });
      this.txtScaleExponentB.Minimum = new Decimal(new int[4]
      {
        128,
        0,
        0,
        int.MinValue
      });
      this.txtScaleExponentB.Name = "txtScaleExponentB";
      this.txtScaleExponentB.Size = new Size(57, 20);
      this.txtScaleExponentB.TabIndex = 155;
      this.label20.Location = new Point(5, 34);
      this.label20.Name = "label20";
      this.label20.Size = new Size(133, 15);
      this.label20.TabIndex = 98;
      this.label20.Tag = (object) "cfg_serial_b";
      this.label20.Text = "Serialnumber:";
      this.label20.TextAlign = ContentAlignment.MiddleRight;
      this.label33.Location = new Point(8, 378);
      this.label33.Margin = new Padding(3, 0, 0, 0);
      this.label33.Name = "label33";
      this.label33.Size = new Size(178, 15);
      this.label33.TabIndex = 152;
      this.label33.Tag = (object) "cfg_scale_mantissa_b";
      this.label33.Text = "Scale mantissa:";
      this.label33.TextAlign = ContentAlignment.MiddleRight;
      this.txtMBusAddressB.Location = new Point(144, 53);
      this.txtMBusAddressB.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtMBusAddressB.Name = "txtMBusAddressB";
      this.txtMBusAddressB.Size = new Size(102, 20);
      this.txtMBusAddressB.TabIndex = 72;
      this.txtScaleMantissaB.Location = new Point(189, 377);
      this.txtScaleMantissaB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtScaleMantissaB.Name = "txtScaleMantissaB";
      this.txtScaleMantissaB.Size = new Size(57, 20);
      this.txtScaleMantissaB.TabIndex = 153;
      this.txtMBusGenerationB.Location = new Point(144, 110);
      this.txtMBusGenerationB.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtMBusGenerationB.Name = "txtMBusGenerationB";
      this.txtMBusGenerationB.Size = new Size(102, 20);
      this.txtMBusGenerationB.TabIndex = 76;
      this.txtVifB.Location = new Point(189, 358);
      this.txtVifB.Maximum = new Decimal(new int[4]
      {
        (int) ushort.MaxValue,
        0,
        0,
        0
      });
      this.txtVifB.Name = "txtVifB";
      this.txtVifB.Size = new Size(57, 20);
      this.txtVifB.TabIndex = 151;
      this.txtSerialB.Location = new Point(144, 35);
      this.txtSerialB.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtSerialB.Name = "txtSerialB";
      this.txtSerialB.Size = new Size(102, 20);
      this.txtSerialB.TabIndex = 97;
      this.label35.Location = new Point(50, 358);
      this.label35.Name = "label35";
      this.label35.Size = new Size(136, 15);
      this.label35.TabIndex = 150;
      this.label35.Tag = (object) "cfg_vif_b";
      this.label35.Text = "VIF:";
      this.label35.TextAlign = ContentAlignment.MiddleRight;
      this.cboxMBusMediumB.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxMBusMediumB.FormattingEnabled = true;
      this.cboxMBusMediumB.Location = new Point(144, 72);
      this.cboxMBusMediumB.Name = "cboxMBusMediumB";
      this.cboxMBusMediumB.Size = new Size(102, 21);
      this.cboxMBusMediumB.TabIndex = 74;
      this.label64.Location = new Point(8, 340);
      this.label64.Margin = new Padding(3, 0, 0, 0);
      this.label64.Name = "label64";
      this.label64.Size = new Size(178, 15);
      this.label64.TabIndex = 148;
      this.label64.Tag = (object) "cfg_burst_b_limit";
      this.label64.Text = "Burst limit:";
      this.label64.TextAlign = ContentAlignment.MiddleRight;
      this.txtObisB.Location = new Point(144, 129);
      this.txtObisB.MaxLength = 3;
      this.txtObisB.Name = "txtObisB";
      this.txtObisB.Size = new Size(102, 20);
      this.txtObisB.TabIndex = 96;
      this.txtObisB.Tag = (object) "";
      this.label65.Location = new Point(8, 321);
      this.label65.Margin = new Padding(3, 0, 0, 0);
      this.label65.Name = "label65";
      this.label65.Size = new Size(178, 15);
      this.label65.TabIndex = 146;
      this.label65.Tag = (object) "cfg_burst_b_diff";
      this.label65.Text = "Burst diff:";
      this.label65.TextAlign = ContentAlignment.MiddleRight;
      this.txtManufacturerB.Location = new Point(144, 92);
      this.txtManufacturerB.MaxLength = 3;
      this.txtManufacturerB.Name = "txtManufacturerB";
      this.txtManufacturerB.Size = new Size(102, 20);
      this.txtManufacturerB.TabIndex = 80;
      this.txtManufacturerB.Tag = (object) "";
      this.label66.Location = new Point(8, 302);
      this.label66.Margin = new Padding(3, 0, 0, 0);
      this.label66.Name = "label66";
      this.label66.Size = new Size(178, 15);
      this.label66.TabIndex = 144;
      this.label66.Tag = (object) "cfg_undersize_b_limit";
      this.label66.Text = "Undersize limit:";
      this.label66.TextAlign = ContentAlignment.MiddleRight;
      this.label21.Location = new Point(5, 92);
      this.label21.Name = "label21";
      this.label21.Size = new Size(133, 15);
      this.label21.TabIndex = 79;
      this.label21.Tag = (object) "cfg_mbus_manid_b";
      this.label21.Text = "Manufacturer:";
      this.label21.TextAlign = ContentAlignment.MiddleRight;
      this.label67.Location = new Point(8, 283);
      this.label67.Margin = new Padding(3, 0, 0, 0);
      this.label67.Name = "label67";
      this.label67.Size = new Size(178, 15);
      this.label67.TabIndex = 142;
      this.label67.Tag = (object) "cfg_undersize_b_diff";
      this.label67.Text = "Undersize diff:";
      this.label67.TextAlign = ContentAlignment.MiddleRight;
      this.label24.Location = new Point(5, 129);
      this.label24.Name = "label24";
      this.label24.Size = new Size(133, 15);
      this.label24.TabIndex = 95;
      this.label24.Tag = (object) "cfg_obis_b";
      this.label24.Text = "Obis:";
      this.label24.TextAlign = ContentAlignment.MiddleRight;
      this.label68.Location = new Point(8, 264);
      this.label68.Margin = new Padding(3, 0, 0, 0);
      this.label68.Name = "label68";
      this.label68.Size = new Size(178, 15);
      this.label68.TabIndex = 140;
      this.label68.Tag = (object) "cfg_oversize_b_limit";
      this.label68.Text = "Oversize limit:";
      this.label68.TextAlign = ContentAlignment.MiddleRight;
      this.label25.Location = new Point(5, 15);
      this.label25.Name = "label25";
      this.label25.Size = new Size(133, 15);
      this.label25.TabIndex = 77;
      this.label25.Tag = (object) "Con_fullserialnumberB";
      this.label25.Text = "Full Serialnumber:";
      this.label25.TextAlign = ContentAlignment.MiddleRight;
      this.label69.Location = new Point(8, 245);
      this.label69.Margin = new Padding(3, 0, 0, 0);
      this.label69.Name = "label69";
      this.label69.Size = new Size(178, 15);
      this.label69.TabIndex = 138;
      this.label69.Tag = (object) "cfg_oversize_b_diff";
      this.label69.Text = "Oversize diff:";
      this.label69.TextAlign = ContentAlignment.MiddleRight;
      this.label27.Location = new Point(5, 110);
      this.label27.Name = "label27";
      this.label27.Size = new Size(133, 15);
      this.label27.TabIndex = 75;
      this.label27.Tag = (object) "cfg_mbus_version_b";
      this.label27.Text = "M-Bus generation:";
      this.label27.TextAlign = ContentAlignment.MiddleRight;
      this.label70.Location = new Point(8, 226);
      this.label70.Margin = new Padding(3, 0, 0, 0);
      this.label70.Name = "label70";
      this.label70.Size = new Size(178, 15);
      this.label70.TabIndex = 136;
      this.label70.Tag = (object) "cfg_pulse_b_leak_upper";
      this.label70.Text = "Pulse leak upper:";
      this.label70.TextAlign = ContentAlignment.MiddleRight;
      this.label28.Location = new Point(5, 72);
      this.label28.Name = "label28";
      this.label28.Size = new Size(133, 15);
      this.label28.TabIndex = 73;
      this.label28.Tag = (object) "cfg_mbus_medium_b";
      this.label28.Text = "M-Bus medium:";
      this.label28.TextAlign = ContentAlignment.MiddleRight;
      this.label71.Location = new Point(8, 207);
      this.label71.Margin = new Padding(3, 0, 0, 0);
      this.label71.Name = "label71";
      this.label71.Size = new Size(178, 15);
      this.label71.TabIndex = 134;
      this.label71.Tag = (object) "cfg_pulse_b_leak_lower";
      this.label71.Text = "Pulse leak lower:";
      this.label71.TextAlign = ContentAlignment.MiddleRight;
      this.label29.Location = new Point(5, 53);
      this.label29.Name = "label29";
      this.label29.Size = new Size(133, 15);
      this.label29.TabIndex = 71;
      this.label29.Tag = (object) "cfg_mbus_address_b";
      this.label29.Text = "M-Bus address:";
      this.label29.TextAlign = ContentAlignment.MiddleRight;
      this.label72.Location = new Point(8, 189);
      this.label72.Margin = new Padding(3, 0, 0, 0);
      this.label72.Name = "label72";
      this.label72.Size = new Size(178, 15);
      this.label72.TabIndex = 132;
      this.label72.Tag = (object) "cfg_pulse_b_unleak_limit";
      this.label72.Text = "Pulse unleak limit:";
      this.label72.TextAlign = ContentAlignment.MiddleRight;
      this.txtUndersizeLimitB.Location = new Point(189, 301);
      this.txtUndersizeLimitB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtUndersizeLimitB.Name = "txtUndersizeLimitB";
      this.txtUndersizeLimitB.Size = new Size(57, 20);
      this.txtUndersizeLimitB.TabIndex = 145;
      this.label73.Location = new Point(8, 169);
      this.label73.Margin = new Padding(3, 0, 0, 0);
      this.label73.Name = "label73";
      this.label73.Size = new Size(178, 15);
      this.label73.TabIndex = 130;
      this.label73.Tag = (object) "cfg_pulse_b_leak_limit";
      this.label73.Text = "Pulse leak limit:";
      this.label73.TextAlign = ContentAlignment.MiddleRight;
      this.txtPulseBlockLimitB.Location = new Point(189, 149);
      this.txtPulseBlockLimitB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtPulseBlockLimitB.Name = "txtPulseBlockLimitB";
      this.txtPulseBlockLimitB.Size = new Size(57, 20);
      this.txtPulseBlockLimitB.TabIndex = 129;
      this.label74.Location = new Point(8, 150);
      this.label74.Margin = new Padding(3, 0, 0, 0);
      this.label74.Name = "label74";
      this.label74.Size = new Size(178, 15);
      this.label74.TabIndex = 128;
      this.label74.Tag = (object) "cfg_pulse_b_block_limit";
      this.label74.Text = "Pulse block limit:";
      this.label74.TextAlign = ContentAlignment.MiddleRight;
      this.txtPulseLeakLimitB.Location = new Point(189, 168);
      this.txtPulseLeakLimitB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtPulseLeakLimitB.Name = "txtPulseLeakLimitB";
      this.txtPulseLeakLimitB.Size = new Size(57, 20);
      this.txtPulseLeakLimitB.TabIndex = 131;
      this.txtBurstLimitB.Location = new Point(189, 339);
      this.txtBurstLimitB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtBurstLimitB.Name = "txtBurstLimitB";
      this.txtBurstLimitB.Size = new Size(57, 20);
      this.txtBurstLimitB.TabIndex = 149;
      this.txtPulseUnleakLimitB.Location = new Point(189, 187);
      this.txtPulseUnleakLimitB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtPulseUnleakLimitB.Name = "txtPulseUnleakLimitB";
      this.txtPulseUnleakLimitB.Size = new Size(57, 20);
      this.txtPulseUnleakLimitB.TabIndex = 133;
      this.txtBurstDiffB.Location = new Point(189, 320);
      this.txtBurstDiffB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtBurstDiffB.Name = "txtBurstDiffB";
      this.txtBurstDiffB.Size = new Size(57, 20);
      this.txtBurstDiffB.TabIndex = 147;
      this.txtPulseLeakLowerB.Location = new Point(189, 206);
      this.txtPulseLeakLowerB.Maximum = new Decimal(new int[4]
      {
        (int) short.MaxValue,
        0,
        0,
        0
      });
      this.txtPulseLeakLowerB.Minimum = new Decimal(new int[4]
      {
        32768,
        0,
        0,
        int.MinValue
      });
      this.txtPulseLeakLowerB.Name = "txtPulseLeakLowerB";
      this.txtPulseLeakLowerB.Size = new Size(57, 20);
      this.txtPulseLeakLowerB.TabIndex = 135;
      this.txtPulseLeakUpperB.Location = new Point(189, 225);
      this.txtPulseLeakUpperB.Maximum = new Decimal(new int[4]
      {
        (int) short.MaxValue,
        0,
        0,
        0
      });
      this.txtPulseLeakUpperB.Minimum = new Decimal(new int[4]
      {
        32768,
        0,
        0,
        int.MinValue
      });
      this.txtPulseLeakUpperB.Name = "txtPulseLeakUpperB";
      this.txtPulseLeakUpperB.Size = new Size(57, 20);
      this.txtPulseLeakUpperB.TabIndex = 137;
      this.txtUndersizeDiffB.Location = new Point(189, 282);
      this.txtUndersizeDiffB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtUndersizeDiffB.Name = "txtUndersizeDiffB";
      this.txtUndersizeDiffB.Size = new Size(57, 20);
      this.txtUndersizeDiffB.TabIndex = 143;
      this.txtOversizeDiffB.Location = new Point(189, 244);
      this.txtOversizeDiffB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtOversizeDiffB.Name = "txtOversizeDiffB";
      this.txtOversizeDiffB.Size = new Size(57, 20);
      this.txtOversizeDiffB.TabIndex = 139;
      this.txtOversizeLimitB.Location = new Point(189, 263);
      this.txtOversizeLimitB.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtOversizeLimitB.Name = "txtOversizeLimitB";
      this.txtOversizeLimitB.Size = new Size(57, 20);
      this.txtOversizeLimitB.TabIndex = 141;
      this.groupBox5.Controls.Add((Control) this.label32);
      this.groupBox5.Controls.Add((Control) this.txtScaleExponentA);
      this.groupBox5.Controls.Add((Control) this.label31);
      this.groupBox5.Controls.Add((Control) this.txtScaleMantissaA);
      this.groupBox5.Controls.Add((Control) this.txtVifA);
      this.groupBox5.Controls.Add((Control) this.label30);
      this.groupBox5.Controls.Add((Control) this.label51);
      this.groupBox5.Controls.Add((Control) this.label52);
      this.groupBox5.Controls.Add((Control) this.label53);
      this.groupBox5.Controls.Add((Control) this.label54);
      this.groupBox5.Controls.Add((Control) this.label55);
      this.groupBox5.Controls.Add((Control) this.label56);
      this.groupBox5.Controls.Add((Control) this.label47);
      this.groupBox5.Controls.Add((Control) this.label46);
      this.groupBox5.Controls.Add((Control) this.label45);
      this.groupBox5.Controls.Add((Control) this.label44);
      this.groupBox5.Controls.Add((Control) this.label43);
      this.groupBox5.Controls.Add((Control) this.txtBurstLimitA);
      this.groupBox5.Controls.Add((Control) this.txtBurstDiffA);
      this.groupBox5.Controls.Add((Control) this.txtUndersizeLimitA);
      this.groupBox5.Controls.Add((Control) this.txtUndersizeDiffA);
      this.groupBox5.Controls.Add((Control) this.txtOversizeLimitA);
      this.groupBox5.Controls.Add((Control) this.txtOversizeDiffA);
      this.groupBox5.Controls.Add((Control) this.txtPulseLeakUpperA);
      this.groupBox5.Controls.Add((Control) this.txtPulseLeakLowerA);
      this.groupBox5.Controls.Add((Control) this.txtPulseUnleakLimitA);
      this.groupBox5.Controls.Add((Control) this.txtPulseLeakLimitA);
      this.groupBox5.Controls.Add((Control) this.txtPulseBlockLimitA);
      this.groupBox5.Controls.Add((Control) this.txtFullSerialnumberA);
      this.groupBox5.Controls.Add((Control) this.label42);
      this.groupBox5.Controls.Add((Control) this.txtMBusAddressA);
      this.groupBox5.Controls.Add((Control) this.txtMBusGenerationA);
      this.groupBox5.Controls.Add((Control) this.txtSerialA);
      this.groupBox5.Controls.Add((Control) this.cboxMBusMediumA);
      this.groupBox5.Controls.Add((Control) this.txtObisA);
      this.groupBox5.Controls.Add((Control) this.txtManufacturerA);
      this.groupBox5.Controls.Add((Control) this.label48);
      this.groupBox5.Controls.Add((Control) this.label49);
      this.groupBox5.Controls.Add((Control) this.label50);
      this.groupBox5.Controls.Add((Control) this.label58);
      this.groupBox5.Controls.Add((Control) this.label60);
      this.groupBox5.Controls.Add((Control) this.label61);
      this.groupBox5.Location = new Point(276, 1);
      this.groupBox5.Name = "groupBox5";
      this.groupBox5.Size = new Size(246, 420);
      this.groupBox5.TabIndex = 100;
      this.groupBox5.TabStop = false;
      this.groupBox5.Text = "Input A";
      this.label32.Location = new Point(7, 397);
      this.label32.Margin = new Padding(3, 0, 0, 0);
      this.label32.Name = "label32";
      this.label32.Size = new Size(174, 15);
      this.label32.TabIndex = 126;
      this.label32.Tag = (object) "cfg_scale_exponent_a";
      this.label32.Text = "Scale exponent:";
      this.label32.TextAlign = ContentAlignment.MiddleRight;
      this.txtScaleExponentA.Location = new Point(184, 396);
      this.txtScaleExponentA.Maximum = new Decimal(new int[4]
      {
        (int) sbyte.MaxValue,
        0,
        0,
        0
      });
      this.txtScaleExponentA.Minimum = new Decimal(new int[4]
      {
        128,
        0,
        0,
        int.MinValue
      });
      this.txtScaleExponentA.Name = "txtScaleExponentA";
      this.txtScaleExponentA.Size = new Size(57, 20);
      this.txtScaleExponentA.TabIndex = (int) sbyte.MaxValue;
      this.label31.Location = new Point(7, 378);
      this.label31.Margin = new Padding(3, 0, 0, 0);
      this.label31.Name = "label31";
      this.label31.Size = new Size(174, 15);
      this.label31.TabIndex = 124;
      this.label31.Tag = (object) "cfg_scale_mantissa_a";
      this.label31.Text = "Scale mantissa:";
      this.label31.TextAlign = ContentAlignment.MiddleRight;
      this.txtScaleMantissaA.Location = new Point(184, 377);
      this.txtScaleMantissaA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtScaleMantissaA.Name = "txtScaleMantissaA";
      this.txtScaleMantissaA.Size = new Size(57, 20);
      this.txtScaleMantissaA.TabIndex = 125;
      this.txtVifA.Location = new Point(184, 358);
      this.txtVifA.Maximum = new Decimal(new int[4]
      {
        (int) ushort.MaxValue,
        0,
        0,
        0
      });
      this.txtVifA.Name = "txtVifA";
      this.txtVifA.Size = new Size(57, 20);
      this.txtVifA.TabIndex = 123;
      this.label30.Location = new Point(49, 358);
      this.label30.Name = "label30";
      this.label30.Size = new Size(132, 15);
      this.label30.TabIndex = 122;
      this.label30.Tag = (object) "cfg_vif_a";
      this.label30.Text = "VIF:";
      this.label30.TextAlign = ContentAlignment.MiddleRight;
      this.label51.Location = new Point(7, 340);
      this.label51.Margin = new Padding(3, 0, 0, 0);
      this.label51.Name = "label51";
      this.label51.Size = new Size(174, 15);
      this.label51.TabIndex = 120;
      this.label51.Tag = (object) "cfg_burst_a_limit";
      this.label51.Text = "Burst limit:";
      this.label51.TextAlign = ContentAlignment.MiddleRight;
      this.label52.Location = new Point(7, 321);
      this.label52.Margin = new Padding(3, 0, 0, 0);
      this.label52.Name = "label52";
      this.label52.Size = new Size(174, 15);
      this.label52.TabIndex = 118;
      this.label52.Tag = (object) "cfg_burst_a_diff";
      this.label52.Text = "Burst diff:";
      this.label52.TextAlign = ContentAlignment.MiddleRight;
      this.label53.Location = new Point(7, 302);
      this.label53.Margin = new Padding(3, 0, 0, 0);
      this.label53.Name = "label53";
      this.label53.Size = new Size(174, 15);
      this.label53.TabIndex = 116;
      this.label53.Tag = (object) "cfg_undersize_a_limit";
      this.label53.Text = "Undersize limit:";
      this.label53.TextAlign = ContentAlignment.MiddleRight;
      this.label54.Location = new Point(7, 283);
      this.label54.Margin = new Padding(3, 0, 0, 0);
      this.label54.Name = "label54";
      this.label54.Size = new Size(174, 15);
      this.label54.TabIndex = 114;
      this.label54.Tag = (object) "cfg_undersize_a_diff";
      this.label54.Text = "Undersize diff:";
      this.label54.TextAlign = ContentAlignment.MiddleRight;
      this.label55.Location = new Point(7, 264);
      this.label55.Margin = new Padding(3, 0, 0, 0);
      this.label55.Name = "label55";
      this.label55.Size = new Size(174, 15);
      this.label55.TabIndex = 112;
      this.label55.Tag = (object) "cfg_oversize_a_limit";
      this.label55.Text = "Oversize limit:";
      this.label55.TextAlign = ContentAlignment.MiddleRight;
      this.label56.Location = new Point(7, 245);
      this.label56.Margin = new Padding(3, 0, 0, 0);
      this.label56.Name = "label56";
      this.label56.Size = new Size(174, 15);
      this.label56.TabIndex = 110;
      this.label56.Tag = (object) "cfg_oversize_a_diff";
      this.label56.Text = "Oversize diff:";
      this.label56.TextAlign = ContentAlignment.MiddleRight;
      this.label47.Location = new Point(7, 226);
      this.label47.Margin = new Padding(3, 0, 0, 0);
      this.label47.Name = "label47";
      this.label47.Size = new Size(174, 15);
      this.label47.TabIndex = 108;
      this.label47.Tag = (object) "cfg_pulse_a_leak_upper";
      this.label47.Text = "Pulse leak upper:";
      this.label47.TextAlign = ContentAlignment.MiddleRight;
      this.label46.Location = new Point(7, 207);
      this.label46.Margin = new Padding(3, 0, 0, 0);
      this.label46.Name = "label46";
      this.label46.Size = new Size(174, 15);
      this.label46.TabIndex = 106;
      this.label46.Tag = (object) "cfg_pulse_a_leak_lower";
      this.label46.Text = "Pulse leak lower:";
      this.label46.TextAlign = ContentAlignment.MiddleRight;
      this.label45.Location = new Point(7, 189);
      this.label45.Margin = new Padding(3, 0, 0, 0);
      this.label45.Name = "label45";
      this.label45.Size = new Size(174, 15);
      this.label45.TabIndex = 104;
      this.label45.Tag = (object) "cfg_pulse_a_unleak_limit";
      this.label45.Text = "Pulse unleak limit:";
      this.label45.TextAlign = ContentAlignment.MiddleRight;
      this.label44.Location = new Point(7, 169);
      this.label44.Margin = new Padding(3, 0, 0, 0);
      this.label44.Name = "label44";
      this.label44.Size = new Size(174, 15);
      this.label44.TabIndex = 102;
      this.label44.Tag = (object) "cfg_pulse_a_leak_limit";
      this.label44.Text = "Pulse leak limit:";
      this.label44.TextAlign = ContentAlignment.MiddleRight;
      this.label43.Location = new Point(7, 150);
      this.label43.Margin = new Padding(3, 0, 0, 0);
      this.label43.Name = "label43";
      this.label43.Size = new Size(174, 15);
      this.label43.TabIndex = 100;
      this.label43.Tag = (object) "cfg_pulse_a_block_limit";
      this.label43.Text = "Pulse block limit:";
      this.label43.TextAlign = ContentAlignment.MiddleRight;
      this.txtBurstLimitA.Location = new Point(184, 339);
      this.txtBurstLimitA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtBurstLimitA.Name = "txtBurstLimitA";
      this.txtBurstLimitA.Size = new Size(57, 20);
      this.txtBurstLimitA.TabIndex = 121;
      this.txtBurstDiffA.Location = new Point(184, 320);
      this.txtBurstDiffA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtBurstDiffA.Name = "txtBurstDiffA";
      this.txtBurstDiffA.Size = new Size(57, 20);
      this.txtBurstDiffA.TabIndex = 119;
      this.txtUndersizeLimitA.Location = new Point(184, 301);
      this.txtUndersizeLimitA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtUndersizeLimitA.Name = "txtUndersizeLimitA";
      this.txtUndersizeLimitA.Size = new Size(57, 20);
      this.txtUndersizeLimitA.TabIndex = 117;
      this.txtUndersizeDiffA.Location = new Point(184, 282);
      this.txtUndersizeDiffA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtUndersizeDiffA.Name = "txtUndersizeDiffA";
      this.txtUndersizeDiffA.Size = new Size(57, 20);
      this.txtUndersizeDiffA.TabIndex = 115;
      this.txtOversizeLimitA.Location = new Point(184, 263);
      this.txtOversizeLimitA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtOversizeLimitA.Name = "txtOversizeLimitA";
      this.txtOversizeLimitA.Size = new Size(57, 20);
      this.txtOversizeLimitA.TabIndex = 113;
      this.txtOversizeDiffA.Location = new Point(184, 244);
      this.txtOversizeDiffA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtOversizeDiffA.Name = "txtOversizeDiffA";
      this.txtOversizeDiffA.Size = new Size(57, 20);
      this.txtOversizeDiffA.TabIndex = 111;
      this.txtPulseLeakUpperA.Location = new Point(184, 225);
      this.txtPulseLeakUpperA.Maximum = new Decimal(new int[4]
      {
        (int) short.MaxValue,
        0,
        0,
        0
      });
      this.txtPulseLeakUpperA.Minimum = new Decimal(new int[4]
      {
        32768,
        0,
        0,
        int.MinValue
      });
      this.txtPulseLeakUpperA.Name = "txtPulseLeakUpperA";
      this.txtPulseLeakUpperA.Size = new Size(57, 20);
      this.txtPulseLeakUpperA.TabIndex = 109;
      this.txtPulseLeakLowerA.Location = new Point(184, 206);
      this.txtPulseLeakLowerA.Maximum = new Decimal(new int[4]
      {
        (int) short.MaxValue,
        0,
        0,
        0
      });
      this.txtPulseLeakLowerA.Minimum = new Decimal(new int[4]
      {
        32768,
        0,
        0,
        int.MinValue
      });
      this.txtPulseLeakLowerA.Name = "txtPulseLeakLowerA";
      this.txtPulseLeakLowerA.Size = new Size(57, 20);
      this.txtPulseLeakLowerA.TabIndex = 107;
      this.txtPulseUnleakLimitA.Location = new Point(184, 187);
      this.txtPulseUnleakLimitA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtPulseUnleakLimitA.Name = "txtPulseUnleakLimitA";
      this.txtPulseUnleakLimitA.Size = new Size(57, 20);
      this.txtPulseUnleakLimitA.TabIndex = 105;
      this.txtPulseLeakLimitA.Location = new Point(184, 168);
      this.txtPulseLeakLimitA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtPulseLeakLimitA.Name = "txtPulseLeakLimitA";
      this.txtPulseLeakLimitA.Size = new Size(57, 20);
      this.txtPulseLeakLimitA.TabIndex = 103;
      this.txtPulseBlockLimitA.Location = new Point(184, 149);
      this.txtPulseBlockLimitA.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtPulseBlockLimitA.Name = "txtPulseBlockLimitA";
      this.txtPulseBlockLimitA.Size = new Size(57, 20);
      this.txtPulseBlockLimitA.TabIndex = 101;
      this.txtFullSerialnumberA.Location = new Point(140, 15);
      this.txtFullSerialnumberA.Name = "txtFullSerialnumberA";
      this.txtFullSerialnumberA.Size = new Size(102, 20);
      this.txtFullSerialnumberA.TabIndex = 99;
      this.txtFullSerialnumberA.Tag = (object) "";
      this.label42.Location = new Point(5, 34);
      this.label42.Name = "label42";
      this.label42.Size = new Size(129, 15);
      this.label42.TabIndex = 98;
      this.label42.Tag = (object) "cfg_serial_a";
      this.label42.Text = "Serialnumber:";
      this.label42.TextAlign = ContentAlignment.MiddleRight;
      this.txtMBusAddressA.Location = new Point(140, 53);
      this.txtMBusAddressA.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtMBusAddressA.Name = "txtMBusAddressA";
      this.txtMBusAddressA.Size = new Size(102, 20);
      this.txtMBusAddressA.TabIndex = 72;
      this.txtMBusGenerationA.Location = new Point(140, 111);
      this.txtMBusGenerationA.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtMBusGenerationA.Name = "txtMBusGenerationA";
      this.txtMBusGenerationA.Size = new Size(102, 20);
      this.txtMBusGenerationA.TabIndex = 76;
      this.txtSerialA.Location = new Point(140, 34);
      this.txtSerialA.Maximum = new Decimal(new int[4]
      {
        -1,
        0,
        0,
        0
      });
      this.txtSerialA.Name = "txtSerialA";
      this.txtSerialA.Size = new Size(102, 20);
      this.txtSerialA.TabIndex = 97;
      this.cboxMBusMediumA.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxMBusMediumA.FormattingEnabled = true;
      this.cboxMBusMediumA.Location = new Point(140, 72);
      this.cboxMBusMediumA.Name = "cboxMBusMediumA";
      this.cboxMBusMediumA.Size = new Size(102, 21);
      this.cboxMBusMediumA.TabIndex = 74;
      this.txtObisA.Location = new Point(140, 130);
      this.txtObisA.MaxLength = 1;
      this.txtObisA.Name = "txtObisA";
      this.txtObisA.Size = new Size(102, 20);
      this.txtObisA.TabIndex = 96;
      this.txtObisA.Tag = (object) "";
      this.txtManufacturerA.Location = new Point(140, 92);
      this.txtManufacturerA.MaxLength = 3;
      this.txtManufacturerA.Name = "txtManufacturerA";
      this.txtManufacturerA.Size = new Size(102, 20);
      this.txtManufacturerA.TabIndex = 80;
      this.txtManufacturerA.Tag = (object) "";
      this.label48.Location = new Point(5, 92);
      this.label48.Name = "label48";
      this.label48.Size = new Size(129, 15);
      this.label48.TabIndex = 79;
      this.label48.Tag = (object) "cfg_mbus_manid_a";
      this.label48.Text = "Manufacturer:";
      this.label48.TextAlign = ContentAlignment.MiddleRight;
      this.label49.Location = new Point(5, 130);
      this.label49.Name = "label49";
      this.label49.Size = new Size(129, 15);
      this.label49.TabIndex = 95;
      this.label49.Tag = (object) "cfg_obis_a";
      this.label49.Text = "Obis:";
      this.label49.TextAlign = ContentAlignment.MiddleRight;
      this.label50.Location = new Point(5, 15);
      this.label50.Name = "label50";
      this.label50.Size = new Size(129, 15);
      this.label50.TabIndex = 77;
      this.label50.Tag = (object) "Con_fullserialnumberA";
      this.label50.Text = "Full Serialnumber:";
      this.label50.TextAlign = ContentAlignment.MiddleRight;
      this.label58.Location = new Point(5, 111);
      this.label58.Name = "label58";
      this.label58.Size = new Size(129, 15);
      this.label58.TabIndex = 75;
      this.label58.Tag = (object) "cfg_mbus_version_a";
      this.label58.Text = "M-Bus generation:";
      this.label58.TextAlign = ContentAlignment.MiddleRight;
      this.label60.Location = new Point(5, 72);
      this.label60.Name = "label60";
      this.label60.Size = new Size(129, 15);
      this.label60.TabIndex = 73;
      this.label60.Tag = (object) "cfg_mbus_medium_a";
      this.label60.Text = "M-Bus medium:";
      this.label60.TextAlign = ContentAlignment.MiddleRight;
      this.label61.Location = new Point(5, 53);
      this.label61.Name = "label61";
      this.label61.Size = new Size(129, 15);
      this.label61.TabIndex = 71;
      this.label61.Tag = (object) "cfg_mbus_address_a";
      this.label61.Text = "M-Bus address:";
      this.label61.TextAlign = ContentAlignment.MiddleRight;
      this.groupBox4.Controls.Add((Control) this.txtFullSerialnumberC);
      this.groupBox4.Controls.Add((Control) this.label41);
      this.groupBox4.Controls.Add((Control) this.txtMBusAddressC);
      this.groupBox4.Controls.Add((Control) this.txtMBusGenerationC);
      this.groupBox4.Controls.Add((Control) this.txtSerialC);
      this.groupBox4.Controls.Add((Control) this.cboxMBusMediumC);
      this.groupBox4.Controls.Add((Control) this.txtObisC);
      this.groupBox4.Controls.Add((Control) this.txtManufacturerC);
      this.groupBox4.Controls.Add((Control) this.label10);
      this.groupBox4.Controls.Add((Control) this.label37);
      this.groupBox4.Controls.Add((Control) this.label14);
      this.groupBox4.Controls.Add((Control) this.label15);
      this.groupBox4.Controls.Add((Control) this.label19);
      this.groupBox4.Controls.Add((Control) this.label23);
      this.groupBox4.Location = new Point(4, 1);
      this.groupBox4.Name = "groupBox4";
      this.groupBox4.Size = new Size(266, 155);
      this.groupBox4.TabIndex = 60;
      this.groupBox4.TabStop = false;
      this.groupBox4.Text = "Main device (C)";
      this.txtFullSerialnumberC.Location = new Point(158, 15);
      this.txtFullSerialnumberC.Name = "txtFullSerialnumberC";
      this.txtFullSerialnumberC.Size = new Size(102, 20);
      this.txtFullSerialnumberC.TabIndex = 99;
      this.txtFullSerialnumberC.Tag = (object) "";
      this.label41.Location = new Point(5, 34);
      this.label41.Name = "label41";
      this.label41.Size = new Size(147, 15);
      this.label41.TabIndex = 98;
      this.label41.Tag = (object) "cfg_serial_c";
      this.label41.Text = "Serialnumber:";
      this.label41.TextAlign = ContentAlignment.MiddleRight;
      this.label38.Location = new Point(18, 577);
      this.label38.Name = "label38";
      this.label38.Size = new Size(140, 15);
      this.label38.TabIndex = 53;
      this.label38.Tag = (object) "pulseReadingB";
      this.label38.Text = "Pulses Input B:";
      this.label38.TextAlign = ContentAlignment.MiddleRight;
      this.txtPulseReadingB.Location = new Point(164, 577);
      this.txtPulseReadingB.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtPulseReadingB.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtPulseReadingB.Name = "txtPulseReadingB";
      this.txtPulseReadingB.ReadOnly = true;
      this.txtPulseReadingB.Size = new Size(106, 20);
      this.txtPulseReadingB.TabIndex = 54;
      this.groupBox8.Controls.Add((Control) this.listHardwareErrors);
      this.groupBox8.Location = new Point(786, 434);
      this.groupBox8.Name = "groupBox8";
      this.groupBox8.Size = new Size(244, 157);
      this.groupBox8.TabIndex = 48;
      this.groupBox8.TabStop = false;
      this.groupBox8.Tag = (object) "hwStatusFlags";
      this.groupBox8.Text = "Hardware errors";
      this.listHardwareErrors.CheckOnClick = true;
      this.listHardwareErrors.FormattingEnabled = true;
      this.listHardwareErrors.Location = new Point(3, 16);
      this.listHardwareErrors.Name = "listHardwareErrors";
      this.listHardwareErrors.Size = new Size(235, 139);
      this.listHardwareErrors.TabIndex = 0;
      this.ckboxShowParameterNamesUsedInFirmware.AutoSize = true;
      this.ckboxShowParameterNamesUsedInFirmware.BackColor = Color.White;
      this.ckboxShowParameterNamesUsedInFirmware.Location = new Point(471, 7);
      this.ckboxShowParameterNamesUsedInFirmware.Name = "ckboxShowParameterNamesUsedInFirmware";
      this.ckboxShowParameterNamesUsedInFirmware.Size = new Size(216, 17);
      this.ckboxShowParameterNamesUsedInFirmware.TabIndex = 53;
      this.ckboxShowParameterNamesUsedInFirmware.Text = "Show parameter names used in firmware";
      this.ckboxShowParameterNamesUsedInFirmware.UseVisualStyleBackColor = false;
      this.ckboxShowParameterNamesUsedInFirmware.CheckedChanged += new System.EventHandler(this.ckboxShowParameterNamesUsedInFirmware_CheckedChanged);
      this.zennerCoroprateDesign1.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(1036, 36);
      this.zennerCoroprateDesign1.TabIndex = 20;
      this.AcceptButton = (IButtonControl) this.btnSave;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.btnCancel;
      this.ClientSize = new Size(1036, 669);
      this.Controls.Add((Control) this.ckboxShowParameterNamesUsedInFirmware);
      this.Controls.Add((Control) this.panel);
      this.Controls.Add((Control) this.label36);
      this.Controls.Add((Control) this.cboxHandlerObject);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.FormBorderStyle = FormBorderStyle.Fixed3D;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (ConfiguratorPdcRadio);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Configurator PDC wireless M-Bus";
      this.Load += new System.EventHandler(this.Configurator_Load);
      this.txtMeterID.EndInit();
      this.txtHardwareTypeID.EndInit();
      this.txtMeterInfoID.EndInit();
      this.txtBaseTypeID.EndInit();
      this.txtMeterTypeID.EndInit();
      this.txtSapMaterialNumber.EndInit();
      this.txtSapProductionOrderNumber.EndInit();
      this.groupBox1.ResumeLayout(false);
      this.gboxRadio.ResumeLayout(false);
      this.gboxRadio.PerformLayout();
      this.txtRadioTimeBias.EndInit();
      this.txtRadioPacketBOffset.EndInit();
      this.txtRadioInstallCount.EndInit();
      this.txtRadioInstallInterval.EndInit();
      this.txtRadioFrequencyOffset.EndInit();
      this.txtRadioTransmitInterval.EndInit();
      this.txtPulseActivateRadio.EndInit();
      this.groupBox3.ResumeLayout(false);
      this.txtPulseOn.EndInit();
      this.txtPulsePeriod.EndInit();
      this.txtTimeZone.EndInit();
      this.txtPulseReadingA.EndInit();
      this.txtSerialC.EndInit();
      this.txtMBusAddressC.EndInit();
      this.txtMBusGenerationC.EndInit();
      this.panel.ResumeLayout(false);
      this.groupBox10.ResumeLayout(false);
      this.groupBox9.ResumeLayout(false);
      this.groupBox7.ResumeLayout(false);
      this.groupBox2.ResumeLayout(false);
      this.groupBox6.ResumeLayout(false);
      this.groupBox6.PerformLayout();
      this.txtScaleExponentB.EndInit();
      this.txtMBusAddressB.EndInit();
      this.txtScaleMantissaB.EndInit();
      this.txtMBusGenerationB.EndInit();
      this.txtVifB.EndInit();
      this.txtSerialB.EndInit();
      this.txtUndersizeLimitB.EndInit();
      this.txtPulseBlockLimitB.EndInit();
      this.txtPulseLeakLimitB.EndInit();
      this.txtBurstLimitB.EndInit();
      this.txtPulseUnleakLimitB.EndInit();
      this.txtBurstDiffB.EndInit();
      this.txtPulseLeakLowerB.EndInit();
      this.txtPulseLeakUpperB.EndInit();
      this.txtUndersizeDiffB.EndInit();
      this.txtOversizeDiffB.EndInit();
      this.txtOversizeLimitB.EndInit();
      this.groupBox5.ResumeLayout(false);
      this.groupBox5.PerformLayout();
      this.txtScaleExponentA.EndInit();
      this.txtScaleMantissaA.EndInit();
      this.txtVifA.EndInit();
      this.txtBurstLimitA.EndInit();
      this.txtBurstDiffA.EndInit();
      this.txtUndersizeLimitA.EndInit();
      this.txtUndersizeDiffA.EndInit();
      this.txtOversizeLimitA.EndInit();
      this.txtOversizeDiffA.EndInit();
      this.txtPulseLeakUpperA.EndInit();
      this.txtPulseLeakLowerA.EndInit();
      this.txtPulseUnleakLimitA.EndInit();
      this.txtPulseLeakLimitA.EndInit();
      this.txtPulseBlockLimitA.EndInit();
      this.txtMBusAddressA.EndInit();
      this.txtMBusGenerationA.EndInit();
      this.txtSerialA.EndInit();
      this.groupBox4.ResumeLayout(false);
      this.groupBox4.PerformLayout();
      this.txtPulseReadingB.EndInit();
      this.groupBox8.ResumeLayout(false);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- ControlWord0.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.ControlWord0
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;

#nullable disable
namespace PDC_Handler
{
  public sealed class ControlWord0
  {
    public ushort ControlWord { get; set; }

    public ControlWord0(ushort controlWord) => this.ControlWord = controlWord;

    public int ByteCount
    {
      get => ((int) this.ControlWord & 3840) >> 8;
      set
      {
        this.ControlWord &= (ushort) 61695;
        this.ControlWord |= (ushort) (value << 8);
      }
    }

    public int VifDifCount
    {
      get => (int) this.ControlWord & 15;
      set
      {
        this.ControlWord &= (ushort) 65520;
        this.ControlWord |= (ushort) value;
      }
    }

    public Param Param
    {
      get => (Param) Enum.ToObject(typeof (Param), (int) this.ControlWord & 240);
      set
      {
        this.ControlWord &= (ushort) 65295;
        this.ControlWord = (ushort) ((Param) this.ControlWord | value);
      }
    }

    public ParamLog ParamLog
    {
      get => (ParamLog) Enum.ToObject(typeof (ParamLog), (int) this.ControlWord & 28672);
      set
      {
        this.ControlWord &= (ushort) 36863;
        this.ControlWord = (ushort) ((ParamLog) this.ControlWord | value);
      }
    }

    public override string ToString()
    {
      return string.Format("PRM: {0}, {1} bytes, {2} VIFDIF, PRMLOG: {3}", (object) this.Param, (object) this.ByteCount, (object) this.VifDifCount, (object) this.ParamLog);
    }
  }
}


--- Data.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.Data
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class Data
  {
    public string FullSerialNumber { get; set; }

    public byte[] AesKey { get; set; }

    public string AesKeyAsHexString
    {
      get => this.AesKey == null ? string.Empty : Util.ByteArrayToHexString(this.AesKey);
    }

    public string SapMaterialNumber { get; set; }

    public int MeterID { get; set; }
  }
}


--- DatabaseDeviceInfo.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.DatabaseDeviceInfo
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class DatabaseDeviceInfo
  {
    public HardwareType HardwareType { get; set; }

    public MeterInfo MeterInfo { get; set; }

    public override string ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (this.HardwareType != null)
        stringBuilder.AppendLine(this.HardwareType.ToString());
      if (this.MeterInfo != null)
        stringBuilder.AppendLine(this.MeterInfo.ToString());
      return stringBuilder.ToString();
    }

    public DatabaseDeviceInfo DeepCopy()
    {
      return new DatabaseDeviceInfo()
      {
        HardwareType = this.HardwareType != null ? this.HardwareType.DeepCopy() : (HardwareType) null,
        MeterInfo = this.MeterInfo != null ? this.MeterInfo.DeepCopy() : (MeterInfo) null
      };
    }
  }
}


--- DeviceIdentification.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.DeviceIdentification
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using System.Collections.Generic;
using System.Text;

#nullable disable
namespace PDC_Handler
{
  public sealed class DeviceIdentification
  {
    private const byte BLOCK_SIZE = 30;

    public uint MeterID { get; set; }

    public uint HardwareTypeID { get; set; }

    public uint MeterInfoID { get; set; }

    public uint BaseTypeID { get; set; }

    public uint MeterTypeID { get; set; }

    public uint SapMaterialNumber { get; set; }

    public uint SapProductionOrderNumber { get; set; }

    public ushort IdentificationChecksum { get; set; }

    public byte[] Buffer
    {
      get
      {
        List<byte> byteList = new List<byte>(30);
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.MeterID));
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.HardwareTypeID));
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.MeterInfoID));
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.BaseTypeID));
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.MeterTypeID));
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.SapMaterialNumber));
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.SapProductionOrderNumber));
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.IdentificationChecksum));
        return byteList.ToArray();
      }
    }

    public bool IsChecksumOK => (int) this.CalculateChecksum() == (int) this.IdentificationChecksum;

    public ushort CalculateChecksum()
    {
      ushort checksum = 0;
      byte[] buffer = this.Buffer;
      for (int index = 0; index < buffer.Length - 2; ++index)
        checksum += (ushort) buffer[index];
      return checksum;
    }

    public string ToString(int spaces)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("MeterID: ".PadRight(spaces)).AppendLine(this.MeterID.ToString());
      stringBuilder.Append("HardwareTypeID: ".PadRight(spaces)).AppendLine(this.HardwareTypeID.ToString());
      stringBuilder.Append("MeterInfoID: ".PadRight(spaces)).AppendLine(this.MeterInfoID.ToString());
      stringBuilder.Append("BaseTypeID: ".PadRight(spaces)).AppendLine(this.BaseTypeID.ToString());
      stringBuilder.Append("MeterTypeID: ".PadRight(spaces)).AppendLine(this.MeterTypeID.ToString());
      stringBuilder.Append("SAP_MaterialNumber: ".PadRight(spaces)).AppendLine(this.SapMaterialNumber.ToString());
      stringBuilder.Append("SAP_ProductionOrderNumber: ".PadRight(spaces)).AppendLine(this.SapProductionOrderNumber.ToString());
      stringBuilder.Append("IsChecksumOK: ".PadRight(spaces)).AppendLine(this.IsChecksumOK.ToString());
      return stringBuilder.ToString();
    }
  }
}


--- DeviceVersion.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.DeviceVersion
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using DeviceCollector;
using System;
using System.Collections.Generic;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class DeviceVersion
  {
    public const int SIZE = 18;

    public uint Version { get; set; }

    public byte Major => (byte) (this.Version >> 24);

    public byte Minor => (byte) (this.Version >> 16 & (uint) byte.MaxValue);

    public ushort Revision => (ushort) ((this.Version & 61440U) >> 12);

    public ushort TypeValue => (ushort) (this.Version & 4095U);

    public string VersionString
    {
      get
      {
        return string.Format("{0}.{1}.{2}:{3}", (object) this.Major, (object) this.Minor, (object) this.Revision, (object) this.Type);
      }
    }

    public uint HardwareTypeID { get; set; }

    public uint SvnRevision { get; set; }

    public DateTime? BuildTime { get; set; }

    public ushort Signatur { get; set; }

    public PDC_DeviceIdentity Type
    {
      get
      {
        return Enum.IsDefined(typeof (PDC_DeviceIdentity), (object) this.TypeValue) ? (PDC_DeviceIdentity) Enum.ToObject(typeof (PDC_DeviceIdentity), this.TypeValue) : PDC_DeviceIdentity.Unknown;
      }
    }

    public DeviceVersion DeepCopy() => this.MemberwiseClone() as DeviceVersion;

    public override string ToString() => this.VersionString;

    public string ToString(int spaces)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("Version: ".PadRight(spaces)).AppendLine(this.VersionString);
      stringBuilder.Append("Version (dec): ".PadRight(spaces)).AppendLine(this.Version.ToString());
      stringBuilder.Append("Version (hex): ".PadRight(spaces)).Append("0x").AppendLine(this.Version.ToString("X8"));
      stringBuilder.Append("Device Identity: ".PadRight(spaces)).Append(((byte) this.Type).ToString()).Append(" 0x").AppendLine(((byte) this.Type).ToString("X2"));
      stringBuilder.Append("HardwareTypeID: ".PadRight(spaces)).AppendLine(this.HardwareTypeID.ToString());
      stringBuilder.Append("SvnRevision: ".PadRight(spaces)).AppendLine(this.SvnRevision.ToString());
      stringBuilder.Append("BuildTime: ".PadRight(spaces)).AppendLine(this.BuildTime.HasValue ? this.BuildTime.Value.ToString("G") : "null");
      stringBuilder.Append("Signatur: ".PadRight(spaces)).AppendLine("0x" + this.Signatur.ToString("X4"));
      return stringBuilder.ToString();
    }

    internal byte[] GetBytes()
    {
      List<byte> byteList = new List<byte>(18);
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.Version));
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.HardwareTypeID));
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.SvnRevision));
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(0));
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.Signatur));
      if (byteList.Count != 18)
      {
        int num = 18;
        string str1 = num.ToString();
        num = byteList.Count;
        string str2 = num.ToString();
        throw new ArgumentOutOfRangeException("Invalid size of versions buffer! Expected: " + str1 + ", Actual: " + str2);
      }
      return byteList.ToArray();
    }

    internal static DeviceVersion Parse(byte[] buffer, ref int offset)
    {
      try
      {
        DeviceVersion deviceVersion = new DeviceVersion();
        deviceVersion.Version = BitConverter.ToUInt32(buffer, offset);
        offset += 4;
        deviceVersion.HardwareTypeID = BitConverter.ToUInt32(buffer, offset);
        offset += 4;
        deviceVersion.SvnRevision = BitConverter.ToUInt32(buffer, offset);
        offset += 4;
        deviceVersion.BuildTime = MBusDifVif.GetMBusDateTime(buffer, offset);
        offset += 4;
        deviceVersion.Signatur = BitConverter.ToUInt16(buffer, offset);
        offset += 2;
        return deviceVersion;
      }
      catch
      {
        return (DeviceVersion) null;
      }
    }

    internal static bool IsEqual(DeviceVersion a, DeviceVersion b)
    {
      return a != null && b != null && (int) a.Version == (int) b.Version;
    }
  }
}


--- Firmware.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.Firmware
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class Firmware
  {
    public DeviceVersion Version { get; set; }

    public ProgFiles FirmwareFile { get; set; }

    public string FirmwareText
    {
      get => this.FirmwareFile != null ? this.FirmwareFile.HexText : string.Empty;
    }
  }
}


--- FirmwareEditor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.FirmwareEditor
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using CorporateDesign;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public class FirmwareEditor : Form
  {
    private PDC_HandlerFunctions MyFunctions;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Button btnCancel;
    private Button btnUpgrade;
    private ComboBox cboxFirmware;
    private RadioButton rbtnUseFirmwareFromDB;
    private RadioButton rbtnUseFirmwareFromFile;
    private Button btnBrowse;
    private ProgressBar progressBar;

    internal FirmwareEditor() => this.InitializeComponent();

    private void FirmwareEditor_Load(object sender, EventArgs e)
    {
      this.LoadDatabaseFirmwares();
      this.MyFunctions.OnProgress += new ValueEventHandler<int>(this.MyFunctions_OnProgress);
    }

    private void FirmwareEditor_FormClosing(object sender, FormClosingEventArgs e)
    {
      this.MyFunctions.OnProgress -= new ValueEventHandler<int>(this.MyFunctions_OnProgress);
    }

    internal static void ShowDialog(Form owner, PDC_HandlerFunctions MyFunctions)
    {
      if (MyFunctions == null)
        return;
      using (FirmwareEditor firmwareEditor = new FirmwareEditor())
      {
        firmwareEditor.MyFunctions = MyFunctions;
        int num = (int) firmwareEditor.ShowDialog((IWin32Window) owner);
      }
    }

    private void cboxEdcHardware_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.LoadDatabaseFirmwares();
    }

    private void btnUpgrade_Click(object sender, EventArgs e)
    {
      byte[] firmware = this.GetFirmware();
      if (firmware == null)
      {
        int num1 = (int) MessageBox.Show("Invalid source of firmware!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
      {
        this.progressBar.Visible = true;
        this.progressBar.Value = 0;
        this.Enabled = false;
        try
        {
          if (this.MyFunctions.UpgradeFirmware(firmware))
          {
            int num2 = (int) MessageBox.Show("Successfully upgraded the firmware!", "Info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          }
          else
          {
            int num3 = (int) MessageBox.Show("Faled upgrade the firmware!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
        }
        finally
        {
          this.progressBar.Visible = false;
          this.Enabled = true;
        }
      }
    }

    private void rbtnUseFirmwareFromFile_CheckedChanged(object sender, EventArgs e)
    {
      bool flag = this.rbtnUseFirmwareFromFile.Checked;
      this.btnBrowse.Visible = flag;
      if (flag)
      {
        this.cboxFirmware.DropDownStyle = ComboBoxStyle.Simple;
        this.cboxFirmware.Text = string.Empty;
      }
      else
      {
        this.cboxFirmware.DropDownStyle = ComboBoxStyle.DropDownList;
        this.LoadDatabaseFirmwares();
      }
    }

    private void btnBrowse_Click(object sender, EventArgs e)
    {
      using (OpenFileDialog openFileDialog = new OpenFileDialog())
      {
        openFileDialog.RestoreDirectory = true;
        openFileDialog.Title = "Please select a file to upgrade";
        int num = (int) openFileDialog.ShowDialog();
        this.cboxFirmware.Text = openFileDialog.FileName;
      }
    }

    private void LoadDatabaseFirmwares()
    {
      this.cboxFirmware.DataSource = (object) PDC_Database.LoadFirmware(new PDC_DeviceIdentity?(PDC_DeviceIdentity.PDC_WmBus));
      this.cboxFirmware.DisplayMember = "Version";
      this.cboxFirmware.ValueMember = "FirmwareText";
    }

    private byte[] GetFirmware()
    {
      return this.rbtnUseFirmwareFromFile.Checked ? (string.IsNullOrEmpty(this.cboxFirmware.Text) ? (byte[]) null : FirmwareManager.ReadFirmwareFromFile(this.cboxFirmware.Text)) : (this.cboxFirmware.SelectedValue == null ? (byte[]) null : FirmwareManager.ReadFirmwareFromText(this.cboxFirmware.SelectedValue as string));
    }

    private void MyFunctions_OnProgress(object sender, int e)
    {
      if (e < 0 || e > 100)
        return;
      this.progressBar.Value = e;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (FirmwareEditor));
      this.btnCancel = new Button();
      this.btnUpgrade = new Button();
      this.cboxFirmware = new ComboBox();
      this.rbtnUseFirmwareFromDB = new RadioButton();
      this.rbtnUseFirmwareFromFile = new RadioButton();
      this.btnBrowse = new Button();
      this.progressBar = new ProgressBar();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.SuspendLayout();
      this.btnCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnCancel.DialogResult = DialogResult.Cancel;
      this.btnCancel.Image = (Image) componentResourceManager.GetObject("btnCancel.Image");
      this.btnCancel.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnCancel.ImeMode = ImeMode.NoControl;
      this.btnCancel.Location = new Point(232, 134);
      this.btnCancel.Name = "btnCancel";
      this.btnCancel.Size = new Size(79, 29);
      this.btnCancel.TabIndex = 21;
      this.btnCancel.Text = "Close";
      this.btnCancel.UseVisualStyleBackColor = true;
      this.btnUpgrade.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnUpgrade.Image = (Image) componentResourceManager.GetObject("btnUpgrade.Image");
      this.btnUpgrade.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnUpgrade.ImeMode = ImeMode.NoControl;
      this.btnUpgrade.Location = new Point(147, 134);
      this.btnUpgrade.Name = "btnUpgrade";
      this.btnUpgrade.Size = new Size(79, 29);
      this.btnUpgrade.TabIndex = 20;
      this.btnUpgrade.Text = "Upgrade";
      this.btnUpgrade.TextAlign = ContentAlignment.MiddleRight;
      this.btnUpgrade.Click += new System.EventHandler(this.btnUpgrade_Click);
      this.cboxFirmware.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxFirmware.FormattingEnabled = true;
      this.cboxFirmware.Location = new Point(12, 75);
      this.cboxFirmware.Name = "cboxFirmware";
      this.cboxFirmware.Size = new Size(434, 21);
      this.cboxFirmware.TabIndex = 24;
      this.rbtnUseFirmwareFromDB.AutoSize = true;
      this.rbtnUseFirmwareFromDB.Checked = true;
      this.rbtnUseFirmwareFromDB.Location = new Point(16, 52);
      this.rbtnUseFirmwareFromDB.Name = "rbtnUseFirmwareFromDB";
      this.rbtnUseFirmwareFromDB.Size = new Size(156, 17);
      this.rbtnUseFirmwareFromDB.TabIndex = 25;
      this.rbtnUseFirmwareFromDB.TabStop = true;
      this.rbtnUseFirmwareFromDB.Text = "Use firmware from database";
      this.rbtnUseFirmwareFromDB.UseVisualStyleBackColor = true;
      this.rbtnUseFirmwareFromFile.AutoSize = true;
      this.rbtnUseFirmwareFromFile.Location = new Point(197, 52);
      this.rbtnUseFirmwareFromFile.Name = "rbtnUseFirmwareFromFile";
      this.rbtnUseFirmwareFromFile.Size = new Size(125, 17);
      this.rbtnUseFirmwareFromFile.TabIndex = 26;
      this.rbtnUseFirmwareFromFile.Text = "Use firmware from file";
      this.rbtnUseFirmwareFromFile.UseVisualStyleBackColor = true;
      this.rbtnUseFirmwareFromFile.CheckedChanged += new System.EventHandler(this.rbtnUseFirmwareFromFile_CheckedChanged);
      this.btnBrowse.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnBrowse.Location = new Point(370, 49);
      this.btnBrowse.Margin = new Padding(2, 3, 2, 3);
      this.btnBrowse.Name = "btnBrowse";
      this.btnBrowse.Size = new Size(77, 23);
      this.btnBrowse.TabIndex = 27;
      this.btnBrowse.Text = "Browse...";
      this.btnBrowse.UseVisualStyleBackColor = true;
      this.btnBrowse.Visible = false;
      this.btnBrowse.Click += new System.EventHandler(this.btnBrowse_Click);
      this.progressBar.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.progressBar.Location = new Point(13, 102);
      this.progressBar.Name = "progressBar";
      this.progressBar.Size = new Size(434, 18);
      this.progressBar.TabIndex = 1;
      this.progressBar.Visible = false;
      this.zennerCoroprateDesign1.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(458, 36);
      this.zennerCoroprateDesign1.TabIndex = 2;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(458, 175);
      this.Controls.Add((Control) this.btnBrowse);
      this.Controls.Add((Control) this.progressBar);
      this.Controls.Add((Control) this.rbtnUseFirmwareFromFile);
      this.Controls.Add((Control) this.rbtnUseFirmwareFromDB);
      this.Controls.Add((Control) this.cboxFirmware);
      this.Controls.Add((Control) this.btnCancel);
      this.Controls.Add((Control) this.btnUpgrade);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (FirmwareEditor);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Firmware";
      this.FormClosing += new FormClosingEventHandler(this.FirmwareEditor_FormClosing);
      this.Load += new System.EventHandler(this.FirmwareEditor_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- FirmwareManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.FirmwareManager
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using System.IO;
using System.Text;

#nullable disable
namespace PDC_Handler
{
  public static class FirmwareManager
  {
    public static byte[] ReadFirmwareFromFile(string path)
    {
      using (FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
      {
        using (StreamReader sr = new StreamReader((Stream) fileStream))
          return FirmwareManager.ReadFirmware(sr);
      }
    }

    public static byte[] ReadFirmwareFromText(string firmware)
    {
      if (string.IsNullOrEmpty(firmware))
        throw new ArgumentException("The firmware can not be null!");
      using (MemoryStream memoryStream = new MemoryStream(Encoding.ASCII.GetBytes(firmware)))
      {
        using (StreamReader sr = new StreamReader((Stream) memoryStream))
          return FirmwareManager.ReadFirmware(sr);
      }
    }

    private static byte[] ReadFirmware(StreamReader sr)
    {
      string str = sr.ReadLine();
      if (!str.StartsWith("@"))
        throw new ArgumentException("The firmware file is not valid!");
      byte[] destinationArray = new byte[1048576];
      for (int index = 0; index < destinationArray.Length; ++index)
        destinationArray[index] = byte.MaxValue;
      while (!string.IsNullOrEmpty(str))
      {
        if (str.StartsWith("@"))
        {
          int int32 = Convert.ToInt32(str.Substring(1), 16);
          for (str = sr.ReadLine().Trim(); !str.StartsWith("@") && !str.StartsWith("q"); str = sr.ReadLine().Trim())
          {
            string[] strArray = str.Split(' ');
            byte[] sourceArray = new byte[strArray.Length];
            for (int index = 0; index < strArray.Length; ++index)
              sourceArray[index] = Convert.ToByte(strArray[index], 16);
            Array.Copy((Array) sourceArray, 0, (Array) destinationArray, int32, sourceArray.Length);
            int32 += sourceArray.Length;
          }
        }
        if (str.StartsWith("q"))
          break;
      }
      return destinationArray;
    }
  }
}


--- FlashLoggerEntry.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.FlashLoggerEntry
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class FlashLoggerEntry
  {
    public const int SIZE = 12;

    public FlashLoggerType Type { get; set; }

    public uint? ValueInputA { get; set; }

    public uint? ValueInputB { get; set; }

    public DateTime? Timepoint { get; set; }

    public bool IsCrcOK { get; set; }

    public ushort Address { get; set; }

    public static FlashLoggerEntry Parse(byte[] memory, ushort address, FlashLoggerType type)
    {
      bool flag = (int) BitConverter.ToUInt16(memory, (int) address + 10) == (int) Util.CalculatesCRC16_CC430(memory, (int) address, 10);
      if (!flag)
        return (FlashLoggerEntry) null;
      return new FlashLoggerEntry()
      {
        Type = type,
        Address = address,
        ValueInputA = new uint?(BitConverter.ToUInt32(memory, (int) address)),
        ValueInputB = new uint?(BitConverter.ToUInt32(memory, (int) address + 4)),
        Timepoint = Util.ConvertToDate_MBus_CP16_TypeG(memory, (int) address + 8),
        IsCrcOK = flag
      };
    }

    public override string ToString()
    {
      if (!this.IsCrcOK)
        return string.Format("0x{0:X4} {1}, NULL", (object) this.Address, (object) this.Type);
      return this.Timepoint.HasValue ? string.Format("0x{0:X4} {1}, {2:d}, A: {3}, B: {4}", (object) this.Address, (object) this.Type, (object) this.Timepoint, (object) this.ValueInputA, (object) this.ValueInputB) : string.Format("0x{0:X4} {1}, Invalid Timestamp, A: {2}, B: {3}", (object) this.Address, (object) this.Type, (object) this.ValueInputA, (object) this.ValueInputB);
    }
  }
}


--- FlashLoggerType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.FlashLoggerType
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  public enum FlashLoggerType
  {
    None,
    Halfmonth,
    Fullmonth,
    Year,
  }
}


--- HandlerMeterType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.HandlerMeterType
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  internal enum HandlerMeterType
  {
    WorkMeter,
    TypeMeter,
    BackupMeter,
    ConnectedMeter,
  }
}


--- HardwareError.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.HardwareError
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;

#nullable disable
namespace PDC_Handler
{
  [Flags]
  public enum HardwareError : ushort
  {
    HW_ERROR_OSCILLATOR = 1,
    HW_ERROR_RADIOCAL = 2,
    HW_ERROR_CALLBACK = 4,
    HW_ERROR_BOR = 8,
    HW_ERROR_RAM = 16, // 0x0010
    HW_ERROR_OVERSIZE_A = 256, // 0x0100
    HW_ERROR_OVERSIZE_B = 512, // 0x0200
    HW_ERROR_UNDERSIZE_A = 1024, // 0x0400
    HW_ERROR_UNDERSIZE_B = 2048, // 0x0800
  }
}


--- InputResolution.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.InputResolution
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  public static class InputResolution
  {
    public static readonly string[] Values = new string[26]
    {
      "0.000m\u00B3",
      "0.00m\u00B3",
      "0.0m\u00B3",
      "0m\u00B3",
      "0.000MWh",
      "0.00MWh",
      "0.000kWh",
      "0.00kWh",
      "0.0kWh",
      "0kWh",
      "0.000Wh",
      "0.00Wh",
      "0.0Wh",
      "0Wh",
      "0.000GJ",
      "0.00GJ",
      "0MJ",
      "0.000L",
      "0.00L",
      "0.0L",
      "0L",
      "0.0000",
      "0.000",
      "0.00",
      "0.0",
      "0"
    };
  }
}


--- InvalidMapFileException.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.InvalidMapFileException
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;

#nullable disable
namespace PDC_Handler
{
  internal sealed class InvalidMapFileException(string message) : Exception(message)
  {
  }
}


--- ListStructure.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.ListStructure
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using System.Collections.Generic;
using System.Text;

#nullable disable
namespace PDC_Handler
{
  internal sealed class ListStructure
  {
    internal ushort LogChannelIndexA { get; set; }

    internal ushort LogChannelIndexB { get; set; }

    internal MBusList Channel_A_ListA { get; set; }

    internal MBusList Channel_A_ListB { get; set; }

    internal MBusList Channel_A_ListC { get; set; }

    internal MBusList Channel_A_ListInstall { get; set; }

    internal MBusList Channel_B_ListA { get; set; }

    internal MBusList Channel_B_ListB { get; set; }

    internal MBusList Channel_B_ListC { get; set; }

    internal MBusList Channel_B_ListInstall { get; set; }

    internal MBusList Channel_C_ListA { get; set; }

    internal MBusList Channel_C_ListB { get; set; }

    internal MBusList Channel_C_ListC { get; set; }

    internal MBusList Channel_C_ListInstall { get; set; }

    internal static ListStructure Parse(byte[] buffer, ushort addr)
    {
      ushort addr1 = buffer != null ? BitConverter.ToUInt16(buffer, (int) addr) : throw new NullReferenceException(nameof (buffer));
      addr += (ushort) 2;
      ushort uint16_1 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_2 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_3 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_4 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_5 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_6 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_7 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_8 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_9 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_10 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ushort uint16_11 = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      ListStructure listStructure = new ListStructure();
      listStructure.LogChannelIndexA = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      listStructure.LogChannelIndexB = BitConverter.ToUInt16(buffer, (int) addr);
      addr += (ushort) 2;
      listStructure.Channel_A_ListA = MBusList.Parse(buffer, addr1);
      listStructure.Channel_A_ListB = MBusList.Parse(buffer, uint16_1);
      listStructure.Channel_A_ListC = MBusList.Parse(buffer, uint16_2);
      listStructure.Channel_A_ListInstall = MBusList.Parse(buffer, uint16_3);
      listStructure.Channel_B_ListA = MBusList.Parse(buffer, uint16_4);
      listStructure.Channel_B_ListB = MBusList.Parse(buffer, uint16_5);
      listStructure.Channel_B_ListC = MBusList.Parse(buffer, uint16_6);
      listStructure.Channel_B_ListInstall = MBusList.Parse(buffer, uint16_7);
      listStructure.Channel_C_ListA = MBusList.Parse(buffer, uint16_8);
      listStructure.Channel_C_ListB = MBusList.Parse(buffer, uint16_9);
      listStructure.Channel_C_ListC = MBusList.Parse(buffer, uint16_10);
      listStructure.Channel_C_ListInstall = MBusList.Parse(buffer, uint16_11);
      return listStructure;
    }

    internal byte[] CreateMemory(ushort address)
    {
      List<byte> buffer = new List<byte>();
      buffer.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.LogChannelIndexA));
      buffer.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.LogChannelIndexB));
      byte[] memory1 = this.Channel_A_ListA == null ? (byte[]) null : this.Channel_A_ListA.CreateMemory();
      byte[] memory2 = this.Channel_A_ListB == null ? (byte[]) null : this.Channel_A_ListB.CreateMemory();
      byte[] memory3 = this.Channel_A_ListC == null ? (byte[]) null : this.Channel_A_ListC.CreateMemory();
      byte[] memory4 = this.Channel_A_ListInstall == null ? (byte[]) null : this.Channel_A_ListInstall.CreateMemory();
      byte[] memory5 = this.Channel_B_ListA == null ? (byte[]) null : this.Channel_B_ListA.CreateMemory();
      byte[] memory6 = this.Channel_B_ListB == null ? (byte[]) null : this.Channel_B_ListB.CreateMemory();
      byte[] memory7 = this.Channel_B_ListC == null ? (byte[]) null : this.Channel_B_ListC.CreateMemory();
      byte[] memory8 = this.Channel_B_ListInstall == null ? (byte[]) null : this.Channel_B_ListInstall.CreateMemory();
      byte[] memory9 = this.Channel_C_ListA == null ? (byte[]) null : this.Channel_C_ListA.CreateMemory();
      byte[] memory10 = this.Channel_C_ListB == null ? (byte[]) null : this.Channel_C_ListB.CreateMemory();
      byte[] memory11 = this.Channel_C_ListC == null ? (byte[]) null : this.Channel_C_ListC.CreateMemory();
      byte[] memory12 = this.Channel_C_ListInstall == null ? (byte[]) null : this.Channel_C_ListInstall.CreateMemory();
      if (memory1 != null)
        buffer.AddRange((IEnumerable<byte>) memory1);
      if (memory2 != null)
        buffer.AddRange((IEnumerable<byte>) memory2);
      if (memory3 != null)
        buffer.AddRange((IEnumerable<byte>) memory3);
      if (memory4 != null)
        buffer.AddRange((IEnumerable<byte>) memory4);
      if (memory5 != null)
        buffer.AddRange((IEnumerable<byte>) memory5);
      if (memory6 != null)
        buffer.AddRange((IEnumerable<byte>) memory6);
      if (memory7 != null)
        buffer.AddRange((IEnumerable<byte>) memory7);
      if (memory8 != null)
        buffer.AddRange((IEnumerable<byte>) memory8);
      if (memory9 != null)
        buffer.AddRange((IEnumerable<byte>) memory9);
      if (memory10 != null)
        buffer.AddRange((IEnumerable<byte>) memory10);
      if (memory11 != null)
        buffer.AddRange((IEnumerable<byte>) memory11);
      if (memory12 != null)
        buffer.AddRange((IEnumerable<byte>) memory12);
      ushort offset = (ushort) ((uint) address + 28U);
      ListStructure.AddAddress(buffer, memory1, 0, ref offset);
      ListStructure.AddAddress(buffer, memory2, 2, ref offset);
      ListStructure.AddAddress(buffer, memory3, 4, ref offset);
      ListStructure.AddAddress(buffer, memory4, 6, ref offset);
      ListStructure.AddAddress(buffer, memory5, 8, ref offset);
      ListStructure.AddAddress(buffer, memory6, 10, ref offset);
      ListStructure.AddAddress(buffer, memory7, 12, ref offset);
      ListStructure.AddAddress(buffer, memory8, 14, ref offset);
      ListStructure.AddAddress(buffer, memory9, 16, ref offset);
      ListStructure.AddAddress(buffer, memory10, 18, ref offset);
      ListStructure.AddAddress(buffer, memory11, 20, ref offset);
      ListStructure.AddAddress(buffer, memory12, 22, ref offset);
      return buffer.ToArray();
    }

    private static void AddAddress(
      List<byte> buffer,
      byte[] list,
      int insertIndex,
      ref ushort offset)
    {
      if (list != null)
      {
        buffer.InsertRange(insertIndex, (IEnumerable<byte>) BitConverter.GetBytes((ushort) ((uint) offset + 2U)));
        offset += (ushort) list.Length;
      }
      else
        buffer.InsertRange(insertIndex, (IEnumerable<byte>) new byte[2]
        {
          byte.MaxValue,
          byte.MaxValue
        });
    }

    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.AppendLine("Lists:");
      sb.AppendLine("LogChannelIndexA = " + this.LogChannelIndexA.ToString());
      sb.AppendLine("LogChannelIndexB = " + this.LogChannelIndexB.ToString());
      this.PrintList(sb, "Channel_A_ListA: ", this.Channel_A_ListA);
      this.PrintList(sb, "Channel_A_ListB: ", this.Channel_A_ListB);
      this.PrintList(sb, "Channel_A_ListC: ", this.Channel_A_ListC);
      this.PrintList(sb, "Channel_A_ListInstall: ", this.Channel_A_ListInstall);
      this.PrintList(sb, "Channel_B_ListA: ", this.Channel_B_ListA);
      this.PrintList(sb, "Channel_B_ListB: ", this.Channel_B_ListB);
      this.PrintList(sb, "Channel_B_ListC: ", this.Channel_B_ListC);
      this.PrintList(sb, "Channel_B_ListInstall: ", this.Channel_B_ListInstall);
      this.PrintList(sb, "Channel_C_ListA: ", this.Channel_C_ListA);
      this.PrintList(sb, "Channel_C_ListB: ", this.Channel_C_ListB);
      this.PrintList(sb, "Channel_C_ListC: ", this.Channel_C_ListC);
      this.PrintList(sb, "Channel_C_ListInstall: ", this.Channel_C_ListInstall);
      return sb.ToString();
    }

    private void PrintList(StringBuilder sb, string name, MBusList list)
    {
      sb.AppendLine(name).AppendLine(list != null ? list.ToString() : "NULL");
    }
  }
}


--- LoggerEditor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.LoggerEditor
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using CorporateDesign;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public class LoggerEditor : Form
  {
    private PDC_HandlerFunctions MyFunctions;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    internal Button btnPrint;
    private Button btnCancel;
    private DataGridView tableRamDataLogger;
    private Label label36;
    private ComboBox cboxHandlerObject;
    private TabControl tabs;
    private TabPage tabRamLogger;
    private TabPage tabFlashLogger;
    private TabPage tabEventLogger;
    private TabPage tabSystemLogger;
    private DataGridView tableFlashDataLogger;
    private TextBox txtLog_stichtag_address;
    private Label label4;
    private TextBox txtLog_fullmonth_address;
    private Label label5;
    private TextBox txtLog_halfmonth_address;
    private Label label6;
    private TextBox txtLOG_ADDRESS_STICHTAG_START;
    private Label label3;
    private TextBox txtLOG_ADDRESS_FULLMONTH_START;
    private Label label2;
    private TextBox txtLOG_ADDRESS_HALFMONTH_START;
    private Label label1;
    private TextBox txtHwSystemDate;
    private Label label11;
    private TextBox txtLogDate;
    private Label label7;
    private GroupBox gboxRamHeader;
    private TextBox txtRamHeaderCRC;
    private Label label18;
    private DateTimePicker txtRamHeaderLastDate;
    private Label label17;
    private ComboBox cboxRamHeaderFlags;
    private Label label16;
    private TextBox txtRamHeaderFifoEnd;
    private Label label15;
    private TextBox txtRamHeaderLength;
    private Label label14;
    private TextBox txtRamHeaderMaxLength;
    private Label label13;
    private TextBox txtRamHeaderAddress;
    private Label label12;
    private DataGridView tableRamDataLoggerValues;
    private ComboBox cboxRamLoggerType;
    private Label label19;
    private TabPage tabValues;
    private DataGridView tableValuesA;
    private DataGridView tableValuesB;
    private Label label21;
    private Label label20;

    private LoggerEditor() => this.InitializeComponent();

    internal static void ShowDialog(Form owner, PDC_HandlerFunctions MyFunctions)
    {
      if (MyFunctions == null)
        return;
      using (LoggerEditor loggerEditor = new LoggerEditor())
      {
        loggerEditor.MyFunctions = MyFunctions;
        int num = (int) loggerEditor.ShowDialog((IWin32Window) owner);
      }
    }

    private void LoggerEditor_Load(object sender, EventArgs e)
    {
      this.cboxHandlerObject.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (HandlerMeterType));
      this.cboxHandlerObject.SelectedItem = (object) HandlerMeterType.WorkMeter;
    }

    private void tabs_Selected(object sender, TabControlEventArgs e)
    {
      PDC_Meter handlerMeter = this.GetHandlerMeter();
      if (handlerMeter == null)
      {
        this.txtLOG_ADDRESS_HALFMONTH_START.Text = string.Empty;
        this.txtLOG_ADDRESS_FULLMONTH_START.Text = string.Empty;
        this.txtLOG_ADDRESS_STICHTAG_START.Text = string.Empty;
        this.txtLog_fullmonth_address.Text = string.Empty;
        this.txtLog_halfmonth_address.Text = string.Empty;
        this.txtLog_stichtag_address.Text = string.Empty;
        this.txtHwSystemDate.Text = string.Empty;
        this.txtLogDate.Text = string.Empty;
        this.tableFlashDataLogger.DataSource = (object) null;
      }
      else
      {
        if (!LoggerManager.IsLoggerDataAvailable(handlerMeter))
          return;
        this.txtHwSystemDate.Text = handlerMeter.GetSystemTime().ToString();
        if (e.TabPage == this.tabValues && e.Action == TabControlAction.Selected)
        {
          this.tableValuesA.DataSource = (object) ValueIdent.ToDataTable(this.MyFunctions.GetValues(1));
          this.tableValuesB.DataSource = (object) ValueIdent.ToDataTable(this.MyFunctions.GetValues(2));
        }
        else if (e.TabPage == this.tabFlashLogger && e.Action == TabControlAction.Selected)
        {
          DataTable flashLoggerTable = LoggerManager.CreateFlashLoggerTable(handlerMeter.Map.MemoryBytes);
          if (flashLoggerTable == null)
            return;
          ushort uint16_1 = BitConverter.ToUInt16(handlerMeter.Map.GetMemoryBytes(handlerMeter.GetParameter("log_halfmonth_address")), 0);
          ushort uint16_2 = BitConverter.ToUInt16(handlerMeter.Map.GetMemoryBytes(handlerMeter.GetParameter("log_fullmonth_address")), 0);
          ushort uint16_3 = BitConverter.ToUInt16(handlerMeter.Map.GetMemoryBytes(handlerMeter.GetParameter("log_stichtag_address")), 0);
          this.txtLOG_ADDRESS_HALFMONTH_START.Text = string.Format("0x{0:X4}", (object) (ushort) 32768);
          this.txtLOG_ADDRESS_FULLMONTH_START.Text = string.Format("0x{0:X4}", (object) (ushort) 35072);
          this.txtLOG_ADDRESS_STICHTAG_START.Text = string.Format("0x{0:X4}", (object) (ushort) 37376);
          this.txtLog_fullmonth_address.Text = string.Format("0x{0:X4}", (object) uint16_2);
          this.txtLog_halfmonth_address.Text = string.Format("0x{0:X4}", (object) uint16_1);
          this.txtLog_stichtag_address.Text = string.Format("0x{0:X4}", (object) uint16_3);
          this.txtLogDate.Text = handlerMeter.GetParameterValue<DateTime>("logDate").ToString();
          this.tableFlashDataLogger.DataSource = (object) flashLoggerTable;
        }
        else
        {
          if (e.TabPage != this.tabRamLogger || e.Action != TabControlAction.Selected)
            return;
          List<RamLogger> ramLogger = LoggerManager.ParseRamLogger(handlerMeter);
          if (ramLogger == null)
            return;
          this.cboxRamLoggerType.Tag = (object) ramLogger;
          this.cboxRamLoggerType.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (RamLoggerType));
          this.cboxRamLoggerType.SelectedItem = (object) RamLoggerType.QuarterHour.ToString();
          this.cboxRamHeaderFlags.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (RamLoggerFifoType));
        }
      }
    }

    private void cboxRamLoggerType_SelectedIndexChanged(object sender, EventArgs e)
    {
      RamLoggerType ramLoggerType = (RamLoggerType) Enum.Parse(typeof (RamLoggerType), this.cboxRamLoggerType.SelectedItem.ToString());
      this.gboxRamHeader.Visible = ramLoggerType != 0;
      this.tableRamDataLogger.Visible = ramLoggerType != 0;
      this.tableRamDataLoggerValues.Visible = ramLoggerType != 0;
      if (!(this.cboxRamLoggerType.Tag is List<RamLogger> tag))
        return;
      RamLogger ramLogger = tag.Find((Predicate<RamLogger>) (x => x.Type == ramLoggerType));
      if (ramLogger == null)
        return;
      try
      {
        this.txtRamHeaderAddress.Text = ramLogger.Header.Address.ToString("X4");
        this.txtRamHeaderFifoEnd.Text = ramLogger.Header.FifoEnd.ToString();
        TextBox ramHeaderMaxLength = this.txtRamHeaderMaxLength;
        byte num = ramLogger.Header.MaxLength;
        string str1 = num.ToString();
        ramHeaderMaxLength.Text = str1;
        TextBox txtRamHeaderLength = this.txtRamHeaderLength;
        num = ramLogger.Header.Length;
        string str2 = num.ToString();
        txtRamHeaderLength.Text = str2;
        this.cboxRamHeaderFlags.SelectedItem = (object) ramLogger.Header.Flags.ToString();
        this.txtRamHeaderLastDate.Value = ramLogger.Header.LastDate.HasValue ? ramLogger.Header.LastDate.Value : new DateTime(2000, 1, 1);
        this.txtRamHeaderCRC.Text = ramLogger.Header.CRC.ToString("X4");
        this.tableRamDataLogger.DataSource = (object) ramLogger.CreateTableRawData();
        this.tableRamDataLoggerValues.DataSource = (object) ramLogger.CreateTableValues();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "RAM Header error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
    }

    private void btnCancel_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.Cancel;
      this.Close();
    }

    private void cboxHandlerObject_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.tabs_Selected(sender, new TabControlEventArgs(this.tabs.SelectedTab, this.tabs.SelectedIndex, TabControlAction.Selected));
    }

    private void btnPrint_Click(object sender, EventArgs e)
    {
      PDC_Meter handlerMeter = this.GetHandlerMeter();
      if (handlerMeter == null)
        return;
      string str = handlerMeter.GetSerialnumberFull();
      if (string.IsNullOrEmpty(str))
        str = "???";
      if (this.tabs.SelectedTab != this.tabFlashLogger)
        return;
      PrintDataGridView.Print(this.tableFlashDataLogger, str + " FLASH DATA LOGGER");
    }

    private PDC_Meter GetHandlerMeter()
    {
      PDC_Meter handlerMeter;
      switch ((HandlerMeterType) Enum.Parse(typeof (HandlerMeterType), this.cboxHandlerObject.SelectedItem.ToString()))
      {
        case HandlerMeterType.WorkMeter:
          handlerMeter = this.MyFunctions.WorkMeter;
          break;
        case HandlerMeterType.TypeMeter:
          handlerMeter = this.MyFunctions.TypeMeter;
          break;
        case HandlerMeterType.BackupMeter:
          handlerMeter = this.MyFunctions.BackupMeter;
          break;
        case HandlerMeterType.ConnectedMeter:
          handlerMeter = this.MyFunctions.ConnectedMeter;
          break;
        default:
          throw new NotImplementedException();
      }
      return handlerMeter;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (LoggerEditor));
      DataGridViewCellStyle gridViewCellStyle1 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle2 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle3 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle4 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle5 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle6 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle7 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle8 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle9 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle10 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle11 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle12 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle13 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle14 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle15 = new DataGridViewCellStyle();
      this.btnPrint = new Button();
      this.btnCancel = new Button();
      this.tableRamDataLogger = new DataGridView();
      this.label36 = new Label();
      this.cboxHandlerObject = new ComboBox();
      this.tabs = new TabControl();
      this.tabValues = new TabPage();
      this.label21 = new Label();
      this.label20 = new Label();
      this.tableValuesB = new DataGridView();
      this.tableValuesA = new DataGridView();
      this.tabFlashLogger = new TabPage();
      this.txtLogDate = new TextBox();
      this.label7 = new Label();
      this.txtLog_stichtag_address = new TextBox();
      this.label4 = new Label();
      this.txtLog_fullmonth_address = new TextBox();
      this.label5 = new Label();
      this.txtLog_halfmonth_address = new TextBox();
      this.label6 = new Label();
      this.txtLOG_ADDRESS_STICHTAG_START = new TextBox();
      this.label3 = new Label();
      this.txtLOG_ADDRESS_FULLMONTH_START = new TextBox();
      this.label2 = new Label();
      this.txtLOG_ADDRESS_HALFMONTH_START = new TextBox();
      this.label1 = new Label();
      this.tableFlashDataLogger = new DataGridView();
      this.tabRamLogger = new TabPage();
      this.tableRamDataLoggerValues = new DataGridView();
      this.cboxRamLoggerType = new ComboBox();
      this.label19 = new Label();
      this.gboxRamHeader = new GroupBox();
      this.txtRamHeaderCRC = new TextBox();
      this.label18 = new Label();
      this.txtRamHeaderLastDate = new DateTimePicker();
      this.label17 = new Label();
      this.cboxRamHeaderFlags = new ComboBox();
      this.label16 = new Label();
      this.txtRamHeaderFifoEnd = new TextBox();
      this.label15 = new Label();
      this.txtRamHeaderLength = new TextBox();
      this.label14 = new Label();
      this.txtRamHeaderMaxLength = new TextBox();
      this.label13 = new Label();
      this.txtRamHeaderAddress = new TextBox();
      this.label12 = new Label();
      this.tabEventLogger = new TabPage();
      this.tabSystemLogger = new TabPage();
      this.txtHwSystemDate = new TextBox();
      this.label11 = new Label();
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      ((ISupportInitialize) this.tableRamDataLogger).BeginInit();
      this.tabs.SuspendLayout();
      this.tabValues.SuspendLayout();
      ((ISupportInitialize) this.tableValuesB).BeginInit();
      ((ISupportInitialize) this.tableValuesA).BeginInit();
      this.tabFlashLogger.SuspendLayout();
      ((ISupportInitialize) this.tableFlashDataLogger).BeginInit();
      this.tabRamLogger.SuspendLayout();
      ((ISupportInitialize) this.tableRamDataLoggerValues).BeginInit();
      this.gboxRamHeader.SuspendLayout();
      this.SuspendLayout();
      this.btnPrint.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnPrint.Image = (Image) componentResourceManager.GetObject("btnPrint.Image");
      this.btnPrint.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnPrint.Location = new Point(10, 521);
      this.btnPrint.Name = "btnPrint";
      this.btnPrint.Size = new Size(66, 29);
      this.btnPrint.TabIndex = 22;
      this.btnPrint.Text = "Print";
      this.btnPrint.TextAlign = ContentAlignment.MiddleRight;
      this.btnPrint.UseVisualStyleBackColor = true;
      this.btnPrint.Click += new System.EventHandler(this.btnPrint_Click);
      this.btnCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnCancel.DialogResult = DialogResult.Cancel;
      this.btnCancel.Image = (Image) componentResourceManager.GetObject("btnCancel.Image");
      this.btnCancel.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnCancel.ImeMode = ImeMode.NoControl;
      this.btnCancel.Location = new Point(695, 521);
      this.btnCancel.Name = "btnCancel";
      this.btnCancel.Size = new Size(77, 29);
      this.btnCancel.TabIndex = 21;
      this.btnCancel.Text = "Close";
      this.btnCancel.UseVisualStyleBackColor = true;
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.tableRamDataLogger.AllowUserToAddRows = false;
      this.tableRamDataLogger.AllowUserToDeleteRows = false;
      this.tableRamDataLogger.AllowUserToResizeRows = false;
      gridViewCellStyle1.BackColor = Color.FromArgb(228, 241, 244);
      this.tableRamDataLogger.AlternatingRowsDefaultCellStyle = gridViewCellStyle1;
      this.tableRamDataLogger.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
      this.tableRamDataLogger.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.tableRamDataLogger.BackgroundColor = Color.White;
      this.tableRamDataLogger.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      gridViewCellStyle2.Alignment = DataGridViewContentAlignment.MiddleLeft;
      gridViewCellStyle2.BackColor = SystemColors.Window;
      gridViewCellStyle2.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      gridViewCellStyle2.ForeColor = SystemColors.ControlText;
      gridViewCellStyle2.SelectionBackColor = SystemColors.Highlight;
      gridViewCellStyle2.SelectionForeColor = SystemColors.HighlightText;
      gridViewCellStyle2.WrapMode = DataGridViewTriState.True;
      this.tableRamDataLogger.DefaultCellStyle = gridViewCellStyle2;
      this.tableRamDataLogger.Location = new Point(212, 10);
      this.tableRamDataLogger.Name = "tableRamDataLogger";
      this.tableRamDataLogger.RowHeadersVisible = false;
      this.tableRamDataLogger.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
      gridViewCellStyle3.WrapMode = DataGridViewTriState.True;
      this.tableRamDataLogger.RowsDefaultCellStyle = gridViewCellStyle3;
      this.tableRamDataLogger.RowTemplate.Resizable = DataGridViewTriState.True;
      this.tableRamDataLogger.Size = new Size(291, 438);
      this.tableRamDataLogger.TabIndex = 23;
      this.label36.BackColor = Color.White;
      this.label36.Location = new Point(173, 7);
      this.label36.Name = "label36";
      this.label36.Size = new Size(84, 15);
      this.label36.TabIndex = 53;
      this.label36.Text = "Handler object:";
      this.label36.TextAlign = ContentAlignment.MiddleRight;
      this.cboxHandlerObject.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxHandlerObject.FormattingEnabled = true;
      this.cboxHandlerObject.Location = new Point(265, 5);
      this.cboxHandlerObject.Name = "cboxHandlerObject";
      this.cboxHandlerObject.Size = new Size(132, 21);
      this.cboxHandlerObject.TabIndex = 52;
      this.cboxHandlerObject.SelectedIndexChanged += new System.EventHandler(this.cboxHandlerObject_SelectedIndexChanged);
      this.tabs.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tabs.Controls.Add((Control) this.tabValues);
      this.tabs.Controls.Add((Control) this.tabFlashLogger);
      this.tabs.Controls.Add((Control) this.tabRamLogger);
      this.tabs.Controls.Add((Control) this.tabEventLogger);
      this.tabs.Controls.Add((Control) this.tabSystemLogger);
      this.tabs.Location = new Point(2, 38);
      this.tabs.Name = "tabs";
      this.tabs.SelectedIndex = 0;
      this.tabs.Size = new Size(782, 477);
      this.tabs.TabIndex = 54;
      this.tabs.Selected += new TabControlEventHandler(this.tabs_Selected);
      this.tabValues.Controls.Add((Control) this.label21);
      this.tabValues.Controls.Add((Control) this.label20);
      this.tabValues.Controls.Add((Control) this.tableValuesB);
      this.tabValues.Controls.Add((Control) this.tableValuesA);
      this.tabValues.Location = new Point(4, 22);
      this.tabValues.Name = "tabValues";
      this.tabValues.Size = new Size(774, 451);
      this.tabValues.TabIndex = 4;
      this.tabValues.Text = "Values";
      this.tabValues.UseVisualStyleBackColor = true;
      this.label21.AutoSize = true;
      this.label21.Location = new Point(394, 5);
      this.label21.Name = "label21";
      this.label21.Size = new Size(41, 13);
      this.label21.TabIndex = 28;
      this.label21.Text = "Input B";
      this.label20.AutoSize = true;
      this.label20.Location = new Point(8, 5);
      this.label20.Name = "label20";
      this.label20.Size = new Size(41, 13);
      this.label20.TabIndex = 27;
      this.label20.Text = "Input A";
      this.tableValuesB.AllowUserToAddRows = false;
      this.tableValuesB.AllowUserToDeleteRows = false;
      this.tableValuesB.AllowUserToResizeRows = false;
      gridViewCellStyle4.BackColor = Color.FromArgb(228, 241, 244);
      this.tableValuesB.AlternatingRowsDefaultCellStyle = gridViewCellStyle4;
      this.tableValuesB.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableValuesB.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.tableValuesB.BackgroundColor = Color.White;
      this.tableValuesB.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      gridViewCellStyle5.Alignment = DataGridViewContentAlignment.MiddleLeft;
      gridViewCellStyle5.BackColor = SystemColors.Window;
      gridViewCellStyle5.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      gridViewCellStyle5.ForeColor = SystemColors.ControlText;
      gridViewCellStyle5.SelectionBackColor = SystemColors.Highlight;
      gridViewCellStyle5.SelectionForeColor = SystemColors.HighlightText;
      gridViewCellStyle5.WrapMode = DataGridViewTriState.True;
      this.tableValuesB.DefaultCellStyle = gridViewCellStyle5;
      this.tableValuesB.Location = new Point(397, 23);
      this.tableValuesB.Name = "tableValuesB";
      this.tableValuesB.RowHeadersVisible = false;
      this.tableValuesB.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
      gridViewCellStyle6.WrapMode = DataGridViewTriState.True;
      this.tableValuesB.RowsDefaultCellStyle = gridViewCellStyle6;
      this.tableValuesB.RowTemplate.Resizable = DataGridViewTriState.True;
      this.tableValuesB.Size = new Size(374, 425);
      this.tableValuesB.TabIndex = 26;
      this.tableValuesA.AllowUserToAddRows = false;
      this.tableValuesA.AllowUserToDeleteRows = false;
      this.tableValuesA.AllowUserToResizeRows = false;
      gridViewCellStyle7.BackColor = Color.FromArgb(228, 241, 244);
      this.tableValuesA.AlternatingRowsDefaultCellStyle = gridViewCellStyle7;
      this.tableValuesA.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
      this.tableValuesA.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.tableValuesA.BackgroundColor = Color.White;
      this.tableValuesA.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      gridViewCellStyle8.Alignment = DataGridViewContentAlignment.MiddleLeft;
      gridViewCellStyle8.BackColor = SystemColors.Window;
      gridViewCellStyle8.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      gridViewCellStyle8.ForeColor = SystemColors.ControlText;
      gridViewCellStyle8.SelectionBackColor = SystemColors.Highlight;
      gridViewCellStyle8.SelectionForeColor = SystemColors.HighlightText;
      gridViewCellStyle8.WrapMode = DataGridViewTriState.True;
      this.tableValuesA.DefaultCellStyle = gridViewCellStyle8;
      this.tableValuesA.Location = new Point(3, 23);
      this.tableValuesA.Name = "tableValuesA";
      this.tableValuesA.RowHeadersVisible = false;
      this.tableValuesA.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
      gridViewCellStyle9.WrapMode = DataGridViewTriState.True;
      this.tableValuesA.RowsDefaultCellStyle = gridViewCellStyle9;
      this.tableValuesA.RowTemplate.Resizable = DataGridViewTriState.True;
      this.tableValuesA.Size = new Size(388, 425);
      this.tableValuesA.TabIndex = 25;
      this.tabFlashLogger.Controls.Add((Control) this.txtLogDate);
      this.tabFlashLogger.Controls.Add((Control) this.label7);
      this.tabFlashLogger.Controls.Add((Control) this.txtLog_stichtag_address);
      this.tabFlashLogger.Controls.Add((Control) this.label4);
      this.tabFlashLogger.Controls.Add((Control) this.txtLog_fullmonth_address);
      this.tabFlashLogger.Controls.Add((Control) this.label5);
      this.tabFlashLogger.Controls.Add((Control) this.txtLog_halfmonth_address);
      this.tabFlashLogger.Controls.Add((Control) this.label6);
      this.tabFlashLogger.Controls.Add((Control) this.txtLOG_ADDRESS_STICHTAG_START);
      this.tabFlashLogger.Controls.Add((Control) this.label3);
      this.tabFlashLogger.Controls.Add((Control) this.txtLOG_ADDRESS_FULLMONTH_START);
      this.tabFlashLogger.Controls.Add((Control) this.label2);
      this.tabFlashLogger.Controls.Add((Control) this.txtLOG_ADDRESS_HALFMONTH_START);
      this.tabFlashLogger.Controls.Add((Control) this.label1);
      this.tabFlashLogger.Controls.Add((Control) this.tableFlashDataLogger);
      this.tabFlashLogger.Location = new Point(4, 22);
      this.tabFlashLogger.Name = "tabFlashLogger";
      this.tabFlashLogger.Padding = new Padding(3);
      this.tabFlashLogger.Size = new Size(774, 451);
      this.tabFlashLogger.TabIndex = 1;
      this.tabFlashLogger.Text = "FLASH Data Logger";
      this.tabFlashLogger.UseVisualStyleBackColor = true;
      this.txtLogDate.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.txtLogDate.Location = new Point(657, 379);
      this.txtLogDate.Name = "txtLogDate";
      this.txtLogDate.ReadOnly = true;
      this.txtLogDate.Size = new Size(109, 20);
      this.txtLogDate.TabIndex = 48;
      this.label7.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label7.Location = new Point(570, 382);
      this.label7.Name = "label7";
      this.label7.Size = new Size(83, 17);
      this.label7.TabIndex = 47;
      this.label7.Text = "logDate";
      this.label7.TextAlign = ContentAlignment.TopRight;
      this.txtLog_stichtag_address.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.txtLog_stichtag_address.Location = new Point(399, 422);
      this.txtLog_stichtag_address.Name = "txtLog_stichtag_address";
      this.txtLog_stichtag_address.ReadOnly = true;
      this.txtLog_stichtag_address.Size = new Size(56, 20);
      this.txtLog_stichtag_address.TabIndex = 36;
      this.label4.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label4.Location = new Point(272, 425);
      this.label4.Name = "label4";
      this.label4.Size = new Size(128, 17);
      this.label4.TabIndex = 35;
      this.label4.Text = "log_stichtag_address";
      this.label4.TextAlign = ContentAlignment.TopRight;
      this.txtLog_fullmonth_address.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.txtLog_fullmonth_address.Location = new Point(399, 400);
      this.txtLog_fullmonth_address.Name = "txtLog_fullmonth_address";
      this.txtLog_fullmonth_address.ReadOnly = true;
      this.txtLog_fullmonth_address.Size = new Size(56, 20);
      this.txtLog_fullmonth_address.TabIndex = 34;
      this.label5.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label5.Location = new Point(272, 403);
      this.label5.Name = "label5";
      this.label5.Size = new Size(128, 17);
      this.label5.TabIndex = 33;
      this.label5.Text = "log_fullmonth_address";
      this.label5.TextAlign = ContentAlignment.TopRight;
      this.txtLog_halfmonth_address.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.txtLog_halfmonth_address.Location = new Point(399, 379);
      this.txtLog_halfmonth_address.Name = "txtLog_halfmonth_address";
      this.txtLog_halfmonth_address.ReadOnly = true;
      this.txtLog_halfmonth_address.Size = new Size(56, 20);
      this.txtLog_halfmonth_address.TabIndex = 32;
      this.label6.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label6.Location = new Point(272, 382);
      this.label6.Name = "label6";
      this.label6.Size = new Size(128, 17);
      this.label6.TabIndex = 31;
      this.label6.Text = "log_halfmonth_address";
      this.label6.TextAlign = ContentAlignment.TopRight;
      this.txtLOG_ADDRESS_STICHTAG_START.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.txtLOG_ADDRESS_STICHTAG_START.Location = new Point(215, 421);
      this.txtLOG_ADDRESS_STICHTAG_START.Name = "txtLOG_ADDRESS_STICHTAG_START";
      this.txtLOG_ADDRESS_STICHTAG_START.ReadOnly = true;
      this.txtLOG_ADDRESS_STICHTAG_START.Size = new Size(56, 20);
      this.txtLOG_ADDRESS_STICHTAG_START.TabIndex = 30;
      this.label3.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label3.Location = new Point(2, 424);
      this.label3.Name = "label3";
      this.label3.Size = new Size(210, 17);
      this.label3.TabIndex = 29;
      this.label3.Text = "LOG_ADDRESS_STICHTAG_START";
      this.label3.TextAlign = ContentAlignment.TopRight;
      this.txtLOG_ADDRESS_FULLMONTH_START.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.txtLOG_ADDRESS_FULLMONTH_START.Location = new Point(215, 400);
      this.txtLOG_ADDRESS_FULLMONTH_START.Name = "txtLOG_ADDRESS_FULLMONTH_START";
      this.txtLOG_ADDRESS_FULLMONTH_START.ReadOnly = true;
      this.txtLOG_ADDRESS_FULLMONTH_START.Size = new Size(56, 20);
      this.txtLOG_ADDRESS_FULLMONTH_START.TabIndex = 28;
      this.label2.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label2.Location = new Point(2, 403);
      this.label2.Name = "label2";
      this.label2.Size = new Size(210, 17);
      this.label2.TabIndex = 27;
      this.label2.Text = "LOG_ADDRESS_FULLMONTH_START";
      this.label2.TextAlign = ContentAlignment.TopRight;
      this.txtLOG_ADDRESS_HALFMONTH_START.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.txtLOG_ADDRESS_HALFMONTH_START.Location = new Point(215, 379);
      this.txtLOG_ADDRESS_HALFMONTH_START.Name = "txtLOG_ADDRESS_HALFMONTH_START";
      this.txtLOG_ADDRESS_HALFMONTH_START.ReadOnly = true;
      this.txtLOG_ADDRESS_HALFMONTH_START.Size = new Size(56, 20);
      this.txtLOG_ADDRESS_HALFMONTH_START.TabIndex = 26;
      this.label1.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label1.Location = new Point(2, 382);
      this.label1.Name = "label1";
      this.label1.Size = new Size(210, 17);
      this.label1.TabIndex = 25;
      this.label1.Text = "LOG_ADDRESS_HALFMONTH_START";
      this.label1.TextAlign = ContentAlignment.TopRight;
      this.tableFlashDataLogger.AllowUserToAddRows = false;
      this.tableFlashDataLogger.AllowUserToDeleteRows = false;
      this.tableFlashDataLogger.AllowUserToResizeRows = false;
      gridViewCellStyle10.BackColor = Color.FromArgb(228, 241, 244);
      this.tableFlashDataLogger.AlternatingRowsDefaultCellStyle = gridViewCellStyle10;
      this.tableFlashDataLogger.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableFlashDataLogger.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.tableFlashDataLogger.BackgroundColor = Color.White;
      this.tableFlashDataLogger.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      gridViewCellStyle11.Alignment = DataGridViewContentAlignment.MiddleLeft;
      gridViewCellStyle11.BackColor = SystemColors.Window;
      gridViewCellStyle11.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      gridViewCellStyle11.ForeColor = SystemColors.ControlText;
      gridViewCellStyle11.SelectionBackColor = SystemColors.Highlight;
      gridViewCellStyle11.SelectionForeColor = SystemColors.HighlightText;
      gridViewCellStyle11.WrapMode = DataGridViewTriState.True;
      this.tableFlashDataLogger.DefaultCellStyle = gridViewCellStyle11;
      this.tableFlashDataLogger.Location = new Point(7, 6);
      this.tableFlashDataLogger.Name = "tableFlashDataLogger";
      this.tableFlashDataLogger.RowHeadersVisible = false;
      this.tableFlashDataLogger.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
      gridViewCellStyle12.WrapMode = DataGridViewTriState.True;
      this.tableFlashDataLogger.RowsDefaultCellStyle = gridViewCellStyle12;
      this.tableFlashDataLogger.RowTemplate.Resizable = DataGridViewTriState.True;
      this.tableFlashDataLogger.Size = new Size(761, 367);
      this.tableFlashDataLogger.TabIndex = 24;
      this.tabRamLogger.Controls.Add((Control) this.tableRamDataLoggerValues);
      this.tabRamLogger.Controls.Add((Control) this.cboxRamLoggerType);
      this.tabRamLogger.Controls.Add((Control) this.label19);
      this.tabRamLogger.Controls.Add((Control) this.gboxRamHeader);
      this.tabRamLogger.Controls.Add((Control) this.tableRamDataLogger);
      this.tabRamLogger.Location = new Point(4, 22);
      this.tabRamLogger.Name = "tabRamLogger";
      this.tabRamLogger.Padding = new Padding(3);
      this.tabRamLogger.Size = new Size(774, 451);
      this.tabRamLogger.TabIndex = 0;
      this.tabRamLogger.Text = "RAM Data Logger";
      this.tabRamLogger.UseVisualStyleBackColor = true;
      this.tableRamDataLoggerValues.AllowUserToAddRows = false;
      this.tableRamDataLoggerValues.AllowUserToDeleteRows = false;
      this.tableRamDataLoggerValues.AllowUserToResizeRows = false;
      gridViewCellStyle13.BackColor = Color.FromArgb(228, 241, 244);
      this.tableRamDataLoggerValues.AlternatingRowsDefaultCellStyle = gridViewCellStyle13;
      this.tableRamDataLoggerValues.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableRamDataLoggerValues.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.tableRamDataLoggerValues.BackgroundColor = Color.White;
      this.tableRamDataLoggerValues.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      gridViewCellStyle14.Alignment = DataGridViewContentAlignment.MiddleLeft;
      gridViewCellStyle14.BackColor = SystemColors.Window;
      gridViewCellStyle14.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      gridViewCellStyle14.ForeColor = SystemColors.ControlText;
      gridViewCellStyle14.SelectionBackColor = SystemColors.Highlight;
      gridViewCellStyle14.SelectionForeColor = SystemColors.HighlightText;
      gridViewCellStyle14.WrapMode = DataGridViewTriState.True;
      this.tableRamDataLoggerValues.DefaultCellStyle = gridViewCellStyle14;
      this.tableRamDataLoggerValues.Location = new Point(509, 9);
      this.tableRamDataLoggerValues.Name = "tableRamDataLoggerValues";
      this.tableRamDataLoggerValues.RowHeadersVisible = false;
      this.tableRamDataLoggerValues.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
      gridViewCellStyle15.WrapMode = DataGridViewTriState.True;
      this.tableRamDataLoggerValues.RowsDefaultCellStyle = gridViewCellStyle15;
      this.tableRamDataLoggerValues.RowTemplate.Resizable = DataGridViewTriState.True;
      this.tableRamDataLoggerValues.Size = new Size(262, 439);
      this.tableRamDataLoggerValues.TabIndex = 36;
      this.cboxRamLoggerType.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxRamLoggerType.FormattingEnabled = true;
      this.cboxRamLoggerType.Location = new Point(40, 10);
      this.cboxRamLoggerType.Name = "cboxRamLoggerType";
      this.cboxRamLoggerType.Size = new Size(160, 21);
      this.cboxRamLoggerType.TabIndex = 35;
      this.cboxRamLoggerType.SelectedIndexChanged += new System.EventHandler(this.cboxRamLoggerType_SelectedIndexChanged);
      this.label19.Location = new Point(4, 13);
      this.label19.Name = "label19";
      this.label19.Size = new Size(36, 15);
      this.label19.TabIndex = 34;
      this.label19.Text = "Type:";
      this.label19.TextAlign = ContentAlignment.TopRight;
      this.gboxRamHeader.Controls.Add((Control) this.txtRamHeaderCRC);
      this.gboxRamHeader.Controls.Add((Control) this.label18);
      this.gboxRamHeader.Controls.Add((Control) this.txtRamHeaderLastDate);
      this.gboxRamHeader.Controls.Add((Control) this.label17);
      this.gboxRamHeader.Controls.Add((Control) this.cboxRamHeaderFlags);
      this.gboxRamHeader.Controls.Add((Control) this.label16);
      this.gboxRamHeader.Controls.Add((Control) this.txtRamHeaderFifoEnd);
      this.gboxRamHeader.Controls.Add((Control) this.label15);
      this.gboxRamHeader.Controls.Add((Control) this.txtRamHeaderLength);
      this.gboxRamHeader.Controls.Add((Control) this.label14);
      this.gboxRamHeader.Controls.Add((Control) this.txtRamHeaderMaxLength);
      this.gboxRamHeader.Controls.Add((Control) this.label13);
      this.gboxRamHeader.Controls.Add((Control) this.txtRamHeaderAddress);
      this.gboxRamHeader.Controls.Add((Control) this.label12);
      this.gboxRamHeader.Location = new Point(4, 37);
      this.gboxRamHeader.Name = "gboxRamHeader";
      this.gboxRamHeader.Size = new Size(204, 176);
      this.gboxRamHeader.TabIndex = 25;
      this.gboxRamHeader.TabStop = false;
      this.gboxRamHeader.Text = "Header";
      this.txtRamHeaderCRC.Location = new Point(73, 145);
      this.txtRamHeaderCRC.Name = "txtRamHeaderCRC";
      this.txtRamHeaderCRC.Size = new Size(55, 20);
      this.txtRamHeaderCRC.TabIndex = 37;
      this.label18.Location = new Point(6, 148);
      this.label18.Name = "label18";
      this.label18.Size = new Size(65, 15);
      this.label18.TabIndex = 36;
      this.label18.Text = "CRC 0x:";
      this.label18.TextAlign = ContentAlignment.TopRight;
      this.txtRamHeaderLastDate.CustomFormat = "dd.MM.yyyy HH:mm:ss";
      this.txtRamHeaderLastDate.Format = DateTimePickerFormat.Custom;
      this.txtRamHeaderLastDate.Location = new Point(73, 123);
      this.txtRamHeaderLastDate.Name = "txtRamHeaderLastDate";
      this.txtRamHeaderLastDate.Size = new Size(122, 20);
      this.txtRamHeaderLastDate.TabIndex = 35;
      this.txtRamHeaderLastDate.Value = new DateTime(2014, 10, 14, 14, 52, 17, 0);
      this.label17.Location = new Point(6, 126);
      this.label17.Name = "label17";
      this.label17.Size = new Size(65, 15);
      this.label17.TabIndex = 34;
      this.label17.Text = "Last date:";
      this.label17.TextAlign = ContentAlignment.TopRight;
      this.cboxRamHeaderFlags.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxRamHeaderFlags.FormattingEnabled = true;
      this.cboxRamHeaderFlags.Location = new Point(73, 101);
      this.cboxRamHeaderFlags.Name = "cboxRamHeaderFlags";
      this.cboxRamHeaderFlags.Size = new Size(122, 21);
      this.cboxRamHeaderFlags.TabIndex = 33;
      this.label16.Location = new Point(6, 104);
      this.label16.Name = "label16";
      this.label16.Size = new Size(65, 15);
      this.label16.TabIndex = 32;
      this.label16.Text = "Flags:";
      this.label16.TextAlign = ContentAlignment.TopRight;
      this.txtRamHeaderFifoEnd.Location = new Point(73, 79);
      this.txtRamHeaderFifoEnd.Name = "txtRamHeaderFifoEnd";
      this.txtRamHeaderFifoEnd.Size = new Size(55, 20);
      this.txtRamHeaderFifoEnd.TabIndex = 31;
      this.label15.Location = new Point(6, 82);
      this.label15.Name = "label15";
      this.label15.Size = new Size(65, 15);
      this.label15.TabIndex = 30;
      this.label15.Text = "Fifo end:";
      this.label15.TextAlign = ContentAlignment.TopRight;
      this.txtRamHeaderLength.Location = new Point(73, 58);
      this.txtRamHeaderLength.Name = "txtRamHeaderLength";
      this.txtRamHeaderLength.Size = new Size(55, 20);
      this.txtRamHeaderLength.TabIndex = 29;
      this.label14.Location = new Point(6, 61);
      this.label14.Name = "label14";
      this.label14.Size = new Size(65, 15);
      this.label14.TabIndex = 28;
      this.label14.Text = "Length:";
      this.label14.TextAlign = ContentAlignment.TopRight;
      this.txtRamHeaderMaxLength.Location = new Point(73, 37);
      this.txtRamHeaderMaxLength.Name = "txtRamHeaderMaxLength";
      this.txtRamHeaderMaxLength.Size = new Size(55, 20);
      this.txtRamHeaderMaxLength.TabIndex = 27;
      this.label13.Location = new Point(6, 40);
      this.label13.Name = "label13";
      this.label13.Size = new Size(65, 15);
      this.label13.TabIndex = 26;
      this.label13.Text = "Max length:";
      this.label13.TextAlign = ContentAlignment.TopRight;
      this.txtRamHeaderAddress.Location = new Point(73, 16);
      this.txtRamHeaderAddress.Name = "txtRamHeaderAddress";
      this.txtRamHeaderAddress.Size = new Size(55, 20);
      this.txtRamHeaderAddress.TabIndex = 25;
      this.label12.Location = new Point(6, 19);
      this.label12.Name = "label12";
      this.label12.Size = new Size(65, 15);
      this.label12.TabIndex = 24;
      this.label12.Text = "Address: 0x";
      this.label12.TextAlign = ContentAlignment.TopRight;
      this.tabEventLogger.Location = new Point(4, 22);
      this.tabEventLogger.Name = "tabEventLogger";
      this.tabEventLogger.Padding = new Padding(3);
      this.tabEventLogger.Size = new Size(774, 451);
      this.tabEventLogger.TabIndex = 2;
      this.tabEventLogger.Text = "Event Logger";
      this.tabEventLogger.UseVisualStyleBackColor = true;
      this.tabSystemLogger.Location = new Point(4, 22);
      this.tabSystemLogger.Name = "tabSystemLogger";
      this.tabSystemLogger.Padding = new Padding(3);
      this.tabSystemLogger.Size = new Size(774, 451);
      this.tabSystemLogger.TabIndex = 3;
      this.tabSystemLogger.Text = "System Logger";
      this.tabSystemLogger.UseVisualStyleBackColor = true;
      this.txtHwSystemDate.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.txtHwSystemDate.Location = new Point(209, 526);
      this.txtHwSystemDate.Name = "txtHwSystemDate";
      this.txtHwSystemDate.ReadOnly = true;
      this.txtHwSystemDate.Size = new Size(109, 20);
      this.txtHwSystemDate.TabIndex = 46;
      this.label11.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.label11.Location = new Point(122, 529);
      this.label11.Name = "label11";
      this.label11.Size = new Size(83, 17);
      this.label11.TabIndex = 45;
      this.label11.Text = "hwSystemDate";
      this.label11.TextAlign = ContentAlignment.TopRight;
      this.zennerCoroprateDesign1.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(784, 36);
      this.zennerCoroprateDesign1.TabIndex = 2;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(784, 562);
      this.Controls.Add((Control) this.tabs);
      this.Controls.Add((Control) this.label36);
      this.Controls.Add((Control) this.txtHwSystemDate);
      this.Controls.Add((Control) this.label11);
      this.Controls.Add((Control) this.cboxHandlerObject);
      this.Controls.Add((Control) this.btnPrint);
      this.Controls.Add((Control) this.btnCancel);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (LoggerEditor);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Logger Editor";
      this.Load += new System.EventHandler(this.LoggerEditor_Load);
      ((ISupportInitialize) this.tableRamDataLogger).EndInit();
      this.tabs.ResumeLayout(false);
      this.tabValues.ResumeLayout(false);
      this.tabValues.PerformLayout();
      ((ISupportInitialize) this.tableValuesB).EndInit();
      ((ISupportInitialize) this.tableValuesA).EndInit();
      this.tabFlashLogger.ResumeLayout(false);
      this.tabFlashLogger.PerformLayout();
      ((ISupportInitialize) this.tableFlashDataLogger).EndInit();
      this.tabRamLogger.ResumeLayout(false);
      ((ISupportInitialize) this.tableRamDataLoggerValues).EndInit();
      this.gboxRamHeader.ResumeLayout(false);
      this.gboxRamHeader.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- LoggerManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.LoggerManager
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using System.Collections.Generic;
using System.Data;

#nullable disable
namespace PDC_Handler
{
  internal static class LoggerManager
  {
    public const ushort ADDR_LOGAREA_START = 32768;
    public const ushort ADDR_LOGAREA_END = 37759;
    public const ushort ADDR_HALF_MONTH_START = 32768;
    public const ushort ADDR_HALF_MONTH_END = 35071;
    public const ushort ADDR_MONTH_START = 35072;
    public const ushort ADDR_MONTH_END = 37375;
    public const ushort ADDR_YEAR_START = 37376;
    public const ushort ADDR_YEAR_END = 37759;
    public static ushort RAM_LOGGER_DATA_SIZE = 1856;
    public static ushort RAM_LOGGER_SIZE = 1926;

    internal static DataTable CreateFlashLoggerTable(byte[] memory)
    {
      if (memory == null)
        return (DataTable) null;
      List<FlashLoggerEntry> flashLogger = LoggerManager.ParseFlashLogger(memory);
      if (flashLogger == null)
        return (DataTable) null;
      DataTable flashLoggerTable = new DataTable();
      Type type1 = typeof (string);
      Type type2 = typeof (uint);
      Type type3 = typeof (bool);
      flashLoggerTable.Columns.Add("Type", type1);
      flashLoggerTable.Columns.Add("Timepoint", type1);
      flashLoggerTable.Columns.Add("ValueInputA", type2);
      flashLoggerTable.Columns.Add("ValueInputB", type2);
      flashLoggerTable.Columns.Add("IsCrcOK", type3);
      flashLoggerTable.Columns.Add("Address", type1);
      foreach (FlashLoggerEntry flashLoggerEntry in flashLogger)
        flashLoggerTable.Rows.Add((object) flashLoggerEntry.Type.ToString(), (object) flashLoggerEntry.Timepoint, (object) flashLoggerEntry.ValueInputA, (object) flashLoggerEntry.ValueInputB, (object) flashLoggerEntry.IsCrcOK, (object) ("0x" + flashLoggerEntry.Address.ToString("X4")));
      return flashLoggerTable;
    }

    internal static List<FlashLoggerEntry> ParseFlashLogger(byte[] memory)
    {
      if (memory == null)
        throw new ArgumentNullException(nameof (memory));
      List<FlashLoggerEntry> flashLogger = new List<FlashLoggerEntry>();
      flashLogger.AddRange((IEnumerable<FlashLoggerEntry>) LoggerManager.ParseFlashLogger(memory, FlashLoggerType.Halfmonth, (ushort) 32768, (ushort) 35071));
      flashLogger.AddRange((IEnumerable<FlashLoggerEntry>) LoggerManager.ParseFlashLogger(memory, FlashLoggerType.Fullmonth, (ushort) 35072, (ushort) 37375));
      flashLogger.AddRange((IEnumerable<FlashLoggerEntry>) LoggerManager.ParseFlashLogger(memory, FlashLoggerType.Year, (ushort) 37376, (ushort) 37759));
      return flashLogger;
    }

    private static List<FlashLoggerEntry> ParseFlashLogger(
      byte[] memory,
      FlashLoggerType type,
      ushort startAddr,
      ushort endAddr)
    {
      List<FlashLoggerEntry> flashLogger = new List<FlashLoggerEntry>();
      for (ushort address = startAddr; (int) address < (int) endAddr; address += (ushort) 12)
      {
        FlashLoggerEntry flashLoggerEntry = FlashLoggerEntry.Parse(memory, address, type);
        if (flashLoggerEntry != null)
          flashLogger.Add(flashLoggerEntry);
      }
      return flashLogger;
    }

    internal static bool IsLoggerDataAvailable(PDC_Meter meter)
    {
      return meter != null && meter.Map.AreBytesDefined((ushort) 32768, 12);
    }

    internal static List<RamLogger> ParseRamLogger(PDC_Meter meter)
    {
      ushort address = meter != null ? LoggerManager.GetStartAddressOfRamLogger(meter.Version) : throw new NullReferenceException(nameof (meter));
      if (!meter.Map.AreBytesDefined(address, (int) LoggerManager.RAM_LOGGER_SIZE))
        throw new Exception("The memory for RAM logger was not read!");
      return LoggerManager.ParseRamLogger(meter.Map.MemoryBytes, address);
    }

    internal static List<RamLogger> ParseRamLogger(byte[] buffer, ushort address)
    {
      if (buffer == null)
        throw new ArgumentNullException(nameof (buffer));
      ushort offset = address;
      List<ReadValue> ramLoggerData1 = LoggerManager.ParseRamLoggerData(buffer, ref offset, 96);
      List<ReadValue> ramLoggerData2 = LoggerManager.ParseRamLoggerData(buffer, ref offset, 96);
      List<ReadValue> ramLoggerData3 = LoggerManager.ParseRamLoggerData(buffer, ref offset, 18);
      List<ReadValue> ramLoggerData4 = LoggerManager.ParseRamLoggerData(buffer, ref offset, 18);
      List<ReadValue> ramLoggerData5 = LoggerManager.ParseRamLoggerData(buffer, ref offset, 4);
      RamLoggerHeader ramLoggerHeader1 = RamLoggerHeader.Parse(buffer, ref offset);
      RamLoggerHeader ramLoggerHeader2 = RamLoggerHeader.Parse(buffer, ref offset);
      RamLoggerHeader ramLoggerHeader3 = RamLoggerHeader.Parse(buffer, ref offset);
      RamLoggerHeader ramLoggerHeader4 = RamLoggerHeader.Parse(buffer, ref offset);
      RamLoggerHeader ramLoggerHeader5 = RamLoggerHeader.Parse(buffer, ref offset);
      return new List<RamLogger>()
      {
        new RamLogger()
        {
          Type = RamLoggerType.QuarterHour,
          Header = ramLoggerHeader1,
          Data = ramLoggerData1
        },
        new RamLogger()
        {
          Type = RamLoggerType.Daily,
          Header = ramLoggerHeader2,
          Data = ramLoggerData2
        },
        new RamLogger()
        {
          Type = RamLoggerType.Halfmonth,
          Header = ramLoggerHeader3,
          Data = ramLoggerData3
        },
        new RamLogger()
        {
          Type = RamLoggerType.Fullmonth,
          Header = ramLoggerHeader4,
          Data = ramLoggerData4
        },
        new RamLogger()
        {
          Type = RamLoggerType.DueDate,
          Header = ramLoggerHeader5,
          Data = ramLoggerData5
        }
      };
    }

    private static List<ReadValue> ParseRamLoggerData(byte[] buffer, ref ushort offset, int count)
    {
      int num = count * 8 + (int) offset;
      List<ReadValue> ramLoggerData = new List<ReadValue>();
      for (int startIndex = (int) offset; startIndex < num; startIndex += 8)
      {
        ReadValue readValue;
        readValue.A = BitConverter.ToUInt32(buffer, startIndex);
        readValue.B = BitConverter.ToUInt32(buffer, startIndex + 4);
        ramLoggerData.Add(readValue);
      }
      offset = (ushort) num;
      return ramLoggerData;
    }

    internal static ushort GetStartAddressOfRamLogger(DeviceVersion version)
    {
      return (ushort) ((uint) PDC_MemoryMap.GetParameter(version, "log_fifos").Address - (uint) LoggerManager.RAM_LOGGER_DATA_SIZE);
    }
  }
}


--- MBusList.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.MBusList
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using System.Collections.Generic;
using System.Text;

#nullable disable
namespace PDC_Handler
{
  public sealed class MBusList
  {
    public ushort UniqueID { get; set; }

    public List<MBusParameter> Parameters { get; set; }

    public MBusList() => this.Parameters = new List<MBusParameter>();

    internal static MBusList Parse(byte[] buffer, ushort addr)
    {
      if (addr == ushort.MaxValue)
        return (MBusList) null;
      MBusList mbusList = new MBusList();
      mbusList.UniqueID = BitConverter.ToUInt16(buffer, (int) addr - 2);
      for (ushort uint16 = BitConverter.ToUInt16(buffer, (int) addr); uint16 != (ushort) 0 && uint16 != ushort.MaxValue; uint16 = BitConverter.ToUInt16(buffer, (int) addr))
      {
        MBusParameter mbusParameter = MBusParameter.Parse(buffer, ref addr);
        if (mbusParameter != null)
          mbusList.Parameters.Add(mbusParameter);
      }
      return mbusList;
    }

    internal byte[] CreateMemory()
    {
      List<byte> byteList = new List<byte>();
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.UniqueID));
      foreach (MBusParameter parameter in this.Parameters)
        byteList.AddRange((IEnumerable<byte>) parameter.CreateMemory());
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes((ushort) 0));
      return byteList.ToArray();
    }

    public override string ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("UniqueID: ").AppendLine(this.UniqueID.ToString());
      foreach (MBusParameter parameter in this.Parameters)
        stringBuilder.AppendLine(parameter.ToString());
      return stringBuilder.ToString();
    }
  }
}


--- MBusParameter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.MBusParameter
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class MBusParameter
  {
    public ControlWord0 Control0 { get; set; }

    public List<byte> VifDif { get; set; }

    public ushort? Value { get; set; }

    public ushort? LogHistoryIndex { get; set; }

    public ushort? LogResetPointer { get; set; }

    internal static MBusParameter Parse(byte[] buffer, ref ushort addr)
    {
      ushort uint16 = BitConverter.ToUInt16(buffer, (int) addr);
      MBusParameter mbusParameter = new MBusParameter();
      mbusParameter.Control0 = new ControlWord0(uint16);
      addr += (ushort) 2;
      mbusParameter.VifDif = new List<byte>();
      for (int index = 0; index < mbusParameter.Control0.VifDifCount; ++index)
        mbusParameter.VifDif.Add(buffer[(int) addr++]);
      if (mbusParameter.Control0.VifDifCount % 2 != 0)
        ++addr;
      if (mbusParameter.Control0.ParamLog == ParamLog.LOG_HISTORY_INDEX)
      {
        mbusParameter.LogHistoryIndex = new ushort?(BitConverter.ToUInt16(buffer, (int) addr));
        addr += (ushort) 2;
      }
      if (mbusParameter.Control0.ParamLog == ParamLog.LOG_RESET)
      {
        mbusParameter.LogResetPointer = new ushort?(BitConverter.ToUInt16(buffer, (int) addr));
        addr += (ushort) 2;
      }
      bool flag1 = mbusParameter.Control0.Param == Param.VALUE || mbusParameter.Control0.Param == Param.VALUE_BCD || mbusParameter.Control0.Param == Param.DATE || mbusParameter.Control0.Param == Param.DATE_TIME || mbusParameter.Control0.Param == Param.STORE_SAVE || mbusParameter.Control0.Param == Param.STORE_DIFF || mbusParameter.Control0.Param == Param.STORE_DIFF_BCD || mbusParameter.Control0.Param == Param.STORE2_BYTE || mbusParameter.Control0.Param == Param.STORE2_SHORT || mbusParameter.Control0.ParamLog == ParamLog.LOG_CHANNEL;
      bool flag2 = mbusParameter.Control0.Param == Param.LOG_DATE || mbusParameter.Control0.Param == Param.LOG_DATE_TIME || mbusParameter.Control0.Param == Param.LOG_VALUE || mbusParameter.Control0.Param == Param.LOG_VALUE_BCD || mbusParameter.Control0.ParamLog == ParamLog.LOG_NULL;
      if (flag1)
      {
        mbusParameter.Value = new ushort?(BitConverter.ToUInt16(buffer, (int) addr));
        addr += (ushort) 2;
      }
      else if (!flag2)
        throw new NotImplementedException();
      return mbusParameter;
    }

    public override string ToString()
    {
      object[] objArray = new object[4]
      {
        this.Control0 != null ? (object) this.Control0.ToString() : (object) "NULL",
        this.VifDif.Count > 0 ? (object) ("0x" + Util.ByteArrayToHexString(this.VifDif.ToArray())) : (object) "NULL",
        null,
        null
      };
      ushort? logHistoryIndex;
      string str1;
      if (!this.Value.HasValue)
      {
        str1 = "NULL";
      }
      else
      {
        logHistoryIndex = this.Value;
        str1 = "0x" + logHistoryIndex.Value.ToString("X4");
      }
      objArray[2] = (object) str1;
      logHistoryIndex = this.LogHistoryIndex;
      string str2;
      if (!logHistoryIndex.HasValue)
      {
        str2 = "NULL";
      }
      else
      {
        logHistoryIndex = this.LogHistoryIndex;
        str2 = logHistoryIndex.ToString();
      }
      objArray[3] = (object) str2;
      return string.Format("{0} DIFVIF: {1}, Value: {2}, LogHistoryIndex: {3}", objArray);
    }

    internal byte[] CreateMemory()
    {
      if (this.Control0 == null)
        throw new ArgumentNullException("Control0");
      List<byte> byteList = new List<byte>();
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.Control0.ControlWord));
      if (this.VifDif != null && this.VifDif.Count > 0)
      {
        byteList.AddRange((IEnumerable<byte>) this.VifDif.ToArray());
        if (this.VifDif.Count % 2 != 0)
          byteList.Add((byte) 0);
      }
      if (this.LogHistoryIndex.HasValue)
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.LogHistoryIndex.Value));
      if (this.LogResetPointer.HasValue)
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.LogResetPointer.Value));
      if (this.Value.HasValue)
        byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(this.Value.Value));
      return byteList.ToArray();
    }
  }
}


--- OverwriteEditor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.OverwriteEditor
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using CorporateDesign;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

#nullable disable
namespace PDC_Handler
{
  public class OverwriteEditor : Form
  {
    private PDC_HandlerFunctions MyFunctions;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private Button btnCancel;
    private Button btnOverwrite;
    private CheckedListBox listParts;
    private Label label1;
    private CheckBox cboxSelectDeselectAll;

    internal OverwriteEditor() => this.InitializeComponent();

    private void OverwriteEditor_Load(object sender, EventArgs e)
    {
      foreach (object obj in new List<string>((IEnumerable<string>) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (OverwritePart))))
        this.listParts.Items.Add(obj, false);
    }

    internal static void ShowDialog(Form owner, PDC_HandlerFunctions MyFunctions)
    {
      if (MyFunctions == null)
        return;
      using (OverwriteEditor overwriteEditor = new OverwriteEditor())
      {
        overwriteEditor.MyFunctions = MyFunctions;
        int num = (int) overwriteEditor.ShowDialog((IWin32Window) owner);
      }
    }

    private void btnOverwrite_Click(object sender, EventArgs e)
    {
      OverwritePart checkedParts = this.GetCheckedParts();
      try
      {
        if (this.MyFunctions.Overwrite(checkedParts))
        {
          this.Close();
        }
        else
        {
          int num = (int) MessageBox.Show("Failed to overwrite selected parts!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Failed to overwrite selected parts! " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void cboxSelectDeselectAll_CheckedChanged(object sender, EventArgs e)
    {
      for (int index = 0; index < this.listParts.Items.Count; ++index)
        this.listParts.SetItemChecked(index, this.cboxSelectDeselectAll.Checked);
    }

    private OverwritePart GetCheckedParts()
    {
      OverwritePart checkedParts = (OverwritePart) 0;
      foreach (object checkedItem in this.listParts.CheckedItems)
      {
        OverwritePart overwritePart = (OverwritePart) Enum.Parse(typeof (OverwritePart), checkedItem.ToString(), true);
        checkedParts |= overwritePart;
      }
      return checkedParts;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (OverwriteEditor));
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.btnCancel = new Button();
      this.btnOverwrite = new Button();
      this.listParts = new CheckedListBox();
      this.label1 = new Label();
      this.cboxSelectDeselectAll = new CheckBox();
      this.SuspendLayout();
      this.zennerCoroprateDesign1.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(295, 36);
      this.zennerCoroprateDesign1.TabIndex = 2;
      this.btnCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnCancel.DialogResult = DialogResult.Cancel;
      this.btnCancel.Image = (Image) componentResourceManager.GetObject("btnCancel.Image");
      this.btnCancel.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnCancel.ImeMode = ImeMode.NoControl;
      this.btnCancel.Location = new Point(166, 215);
      this.btnCancel.Name = "btnCancel";
      this.btnCancel.Size = new Size(104, 29);
      this.btnCancel.TabIndex = 21;
      this.btnCancel.Text = "Cancel";
      this.btnCancel.TextAlign = ContentAlignment.MiddleRight;
      this.btnCancel.UseVisualStyleBackColor = true;
      this.btnOverwrite.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnOverwrite.Image = (Image) componentResourceManager.GetObject("btnOverwrite.Image");
      this.btnOverwrite.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnOverwrite.ImeMode = ImeMode.NoControl;
      this.btnOverwrite.Location = new Point(39, 215);
      this.btnOverwrite.Name = "btnOverwrite";
      this.btnOverwrite.Size = new Size(104, 29);
      this.btnOverwrite.TabIndex = 20;
      this.btnOverwrite.Text = "Overwrite";
      this.btnOverwrite.Click += new System.EventHandler(this.btnOverwrite_Click);
      this.listParts.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.listParts.CheckOnClick = true;
      this.listParts.FormattingEnabled = true;
      this.listParts.Location = new Point(12, 62);
      this.listParts.Name = "listParts";
      this.listParts.Size = new Size(271, 124);
      this.listParts.TabIndex = 22;
      this.label1.AutoSize = true;
      this.label1.Location = new Point(13, 43);
      this.label1.Name = "label1";
      this.label1.Size = new Size(121, 13);
      this.label1.TabIndex = 23;
      this.label1.Text = "Select parts to overwrite";
      this.cboxSelectDeselectAll.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.cboxSelectDeselectAll.AutoSize = true;
      this.cboxSelectDeselectAll.Location = new Point(12, 190);
      this.cboxSelectDeselectAll.Name = "cboxSelectDeselectAll";
      this.cboxSelectDeselectAll.Size = new Size(120, 17);
      this.cboxSelectDeselectAll.TabIndex = 24;
      this.cboxSelectDeselectAll.Text = "Select / deselect all";
      this.cboxSelectDeselectAll.UseVisualStyleBackColor = true;
      this.cboxSelectDeselectAll.CheckedChanged += new System.EventHandler(this.cboxSelectDeselectAll_CheckedChanged);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(295, 256);
      this.Controls.Add((Control) this.cboxSelectDeselectAll);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.listParts);
      this.Controls.Add((Control) this.btnCancel);
      this.Controls.Add((Control) this.btnOverwrite);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (OverwriteEditor);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Select overwrite items";
      this.Load += new System.EventHandler(this.OverwriteEditor_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- OverwritePart.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.OverwritePart
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;

#nullable disable
namespace PDC_Handler
{
  [Flags]
  public enum OverwritePart : byte
  {
    TypeIdentification = 1,
    RadioSettings = 2,
    DeviceSettings = 4,
    Constants = 8,
  }
}


--- Param.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.Param
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  public enum Param : ushort
  {
    NULL = 0,
    DATE = 16, // 0x0010
    DATE_TIME = 32, // 0x0020
    LOG_DATE = 48, // 0x0030
    LOG_DATE_TIME = 64, // 0x0040
    LOG_VALUE = 80, // 0x0050
    LOG_VALUE_BCD = 96, // 0x0060
    VALUE_BCD = 112, // 0x0070
    VALUE = 128, // 0x0080
    STORE_SAVE = 144, // 0x0090
    STORE_DIFF = 160, // 0x00A0
    STORE_DIFF_BCD = 176, // 0x00B0
    STORE2_BYTE = 192, // 0x00C0
    STORE2_SHORT = 208, // 0x00D0
  }
}


--- Parameter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.Parameter
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System.Diagnostics;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  [DebuggerDisplay("{Name} {Address} {Type}")]
  public sealed class Parameter
  {
    public int MapID { get; set; }

    public string Name { get; set; }

    public ushort Address { get; set; }

    public int Size { get; set; }

    public string DifVif { get; set; }

    public S3_VariableTypes Type { get; set; }

    public override string ToString() => this.Name;
  }
}


--- ParameterEditor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.ParameterEditor
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using CorporateDesign;
using GmmDbLib;
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public class ParameterEditor : Form
  {
    private PDC_HandlerFunctions MyFunctions;
    private bool initialized = false;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign1;
    private DataGridView tableParameter;
    private TextBox txtDescription;
    private SplitContainer splitContainer1;
    private Button btnSave;
    private Button btnCancel;
    internal Button btnPrint;
    private Label label36;
    private ComboBox cboxHandlerObject;
    private Panel panel;

    internal ParameterEditor() => this.InitializeComponent();

    private void ParameterEditor_Load(object sender, EventArgs e)
    {
      this.cboxHandlerObject.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (HandlerMeterType));
      this.cboxHandlerObject.SelectedItem = (object) HandlerMeterType.WorkMeter;
      if (!this.initialized)
        this.initialized = true;
      this.LoadParameter();
    }

    private void btnCancel_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.Cancel;
      this.Close();
    }

    private void btnSave_Click(object sender, EventArgs e)
    {
      if (this.tableParameter.Tag is PDC_Meter tag)
      {
        switch ((HandlerMeterType) Enum.Parse(typeof (HandlerMeterType), this.cboxHandlerObject.SelectedItem.ToString()))
        {
          case HandlerMeterType.WorkMeter:
            this.MyFunctions.WorkMeter = tag;
            break;
          case HandlerMeterType.TypeMeter:
            this.MyFunctions.TypeMeter = tag;
            break;
          case HandlerMeterType.BackupMeter:
            this.MyFunctions.BackupMeter = tag;
            break;
          case HandlerMeterType.ConnectedMeter:
            this.MyFunctions.ConnectedMeter = tag;
            break;
          default:
            throw new NotImplementedException();
        }
      }
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    private void btnPrintTable_Click(object sender, EventArgs e)
    {
      if (!(this.tableParameter.Tag is PDC_Meter tag))
        return;
      PrintDataGridView.Print(this.tableParameter, tag.Version.VersionString + " Serialnumber: " + tag.GetSerialnumberFull());
    }

    private void dataGridViewParameter_CellValueChanged(object sender, DataGridViewCellEventArgs e)
    {
      if (!(this.tableParameter.Tag is PDC_Meter tag) || e.ColumnIndex != 6 && e.ColumnIndex != 7)
        return;
      this.tableParameter[e.ColumnIndex, e.RowIndex].ErrorText = string.Empty;
      try
      {
        ushort uint16 = Convert.ToUInt16(this.tableParameter[5, e.RowIndex].Value.ToString(), 16);
        int int32 = Convert.ToInt32(this.tableParameter[3, e.RowIndex].Value);
        string hexString = ZR_ClassLibrary.Util.ByteArrayToHexString(tag.Map.GetMemoryBytes(uint16, int32));
        string hex = this.tableParameter[6, e.RowIndex].Value.ToString();
        if (hexString.ToUpper() == hex.ToUpper())
        {
          this.tableParameter.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.White;
        }
        else
        {
          this.tableParameter.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.Yellow;
          this.btnSave.Enabled = true;
        }
        byte[] byteArray = ZR_ClassLibrary.Util.HexStringToByteArray(hex);
        tag.Map.SetMemoryBytes(uint16, byteArray);
      }
      catch (Exception ex)
      {
        this.tableParameter[e.ColumnIndex, e.RowIndex].ErrorText = "Invalid value! Reason: " + ex.Message;
      }
    }

    private void tableParameter_SelectionChanged(object sender, EventArgs e)
    {
      if (this.tableParameter.CurrentRow == null)
        return;
      this.ShowParameterInfo(this.tableParameter.CurrentRow.Index);
    }

    private void tableParameter_Sorted(object sender, EventArgs e)
    {
      if (!(this.tableParameter.Tag is PDC_Meter tag))
        return;
      foreach (DataGridViewRow row in (IEnumerable) this.tableParameter.Rows)
      {
        ushort uint16 = Convert.ToUInt16(row.Cells[5].Value.ToString());
        int int32 = Convert.ToInt32(row.Cells[3].Value);
        if (int32 > 0)
        {
          string hexString = ZR_ClassLibrary.Util.ByteArrayToHexString(tag.Map.GetMemoryBytes(uint16, int32));
          row.Cells[6].Value = (object) hexString;
        }
      }
    }

    private void tableParameter_CellClick(object sender, DataGridViewCellEventArgs e)
    {
      this.ShowParameterInfo(e.RowIndex);
    }

    private void cboxHandlerObject_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (!this.initialized)
        return;
      this.LoadParameter();
    }

    private void ShowParameterInfo(int rowIndex)
    {
      if (rowIndex < 0)
        return;
      string TextKey = this.tableParameter[1, rowIndex].Value.ToString();
      string translatedLanguageText = Ot.GetTranslatedLanguageText("S3ParaDesc", TextKey);
      if (translatedLanguageText != "S3ParaDesc" + TextKey)
        this.txtDescription.Text = translatedLanguageText;
      else
        this.txtDescription.Text = string.Empty;
    }

    internal static void ShowDialog(Form owner, PDC_HandlerFunctions MyFunctions)
    {
      if (MyFunctions == null)
        return;
      using (ParameterEditor parameterEditor = new ParameterEditor())
      {
        parameterEditor.MyFunctions = MyFunctions;
        int num = (int) parameterEditor.ShowDialog((IWin32Window) owner);
      }
    }

    private PDC_Meter GetHandlerMeter()
    {
      PDC_Meter pdcMeter;
      switch ((HandlerMeterType) Enum.Parse(typeof (HandlerMeterType), this.cboxHandlerObject.SelectedItem.ToString()))
      {
        case HandlerMeterType.WorkMeter:
          pdcMeter = this.MyFunctions.WorkMeter;
          break;
        case HandlerMeterType.TypeMeter:
          pdcMeter = this.MyFunctions.TypeMeter;
          break;
        case HandlerMeterType.BackupMeter:
          pdcMeter = this.MyFunctions.BackupMeter;
          break;
        case HandlerMeterType.ConnectedMeter:
          pdcMeter = this.MyFunctions.ConnectedMeter;
          break;
        default:
          throw new NotImplementedException();
      }
      return pdcMeter?.DeepCopy();
    }

    private void LoadParameter()
    {
      PDC_Meter handlerMeter = this.GetHandlerMeter();
      this.panel.Visible = handlerMeter != null;
      this.tableParameter.Tag = (object) handlerMeter;
      if (handlerMeter == null)
        this.tableParameter.DataSource = (object) null;
      else
        this.tableParameter.DataSource = (object) handlerMeter.CreateParameterTable();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      DataGridViewCellStyle gridViewCellStyle1 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle2 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle3 = new DataGridViewCellStyle();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (ParameterEditor));
      this.zennerCoroprateDesign1 = new ZennerCoroprateDesign();
      this.tableParameter = new DataGridView();
      this.txtDescription = new TextBox();
      this.splitContainer1 = new SplitContainer();
      this.btnSave = new Button();
      this.btnCancel = new Button();
      this.btnPrint = new Button();
      this.label36 = new Label();
      this.cboxHandlerObject = new ComboBox();
      this.panel = new Panel();
      ((ISupportInitialize) this.tableParameter).BeginInit();
      this.splitContainer1.BeginInit();
      this.splitContainer1.Panel1.SuspendLayout();
      this.splitContainer1.Panel2.SuspendLayout();
      this.splitContainer1.SuspendLayout();
      this.panel.SuspendLayout();
      this.SuspendLayout();
      this.zennerCoroprateDesign1.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.zennerCoroprateDesign1.Location = new Point(0, 0);
      this.zennerCoroprateDesign1.Name = "zennerCoroprateDesign1";
      this.zennerCoroprateDesign1.Size = new Size(784, 36);
      this.zennerCoroprateDesign1.TabIndex = 1;
      this.tableParameter.AllowUserToAddRows = false;
      this.tableParameter.AllowUserToDeleteRows = false;
      this.tableParameter.AllowUserToResizeColumns = false;
      this.tableParameter.AllowUserToResizeRows = false;
      gridViewCellStyle1.BackColor = Color.FromArgb(228, 241, 244);
      this.tableParameter.AlternatingRowsDefaultCellStyle = gridViewCellStyle1;
      this.tableParameter.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.tableParameter.BackgroundColor = Color.White;
      this.tableParameter.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      gridViewCellStyle2.Alignment = DataGridViewContentAlignment.MiddleLeft;
      gridViewCellStyle2.BackColor = SystemColors.Window;
      gridViewCellStyle2.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      gridViewCellStyle2.ForeColor = SystemColors.ControlText;
      gridViewCellStyle2.SelectionBackColor = SystemColors.Highlight;
      gridViewCellStyle2.SelectionForeColor = SystemColors.HighlightText;
      gridViewCellStyle2.WrapMode = DataGridViewTriState.True;
      this.tableParameter.DefaultCellStyle = gridViewCellStyle2;
      this.tableParameter.Dock = DockStyle.Fill;
      this.tableParameter.Location = new Point(0, 0);
      this.tableParameter.Name = "tableParameter";
      this.tableParameter.RowHeadersVisible = false;
      this.tableParameter.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.DisableResizing;
      gridViewCellStyle3.WrapMode = DataGridViewTriState.True;
      this.tableParameter.RowsDefaultCellStyle = gridViewCellStyle3;
      this.tableParameter.RowTemplate.Resizable = DataGridViewTriState.True;
      this.tableParameter.Size = new Size(777, 373);
      this.tableParameter.TabIndex = 0;
      this.tableParameter.CellClick += new DataGridViewCellEventHandler(this.tableParameter_CellClick);
      this.tableParameter.CellValueChanged += new DataGridViewCellEventHandler(this.dataGridViewParameter_CellValueChanged);
      this.tableParameter.SelectionChanged += new System.EventHandler(this.tableParameter_SelectionChanged);
      this.tableParameter.Sorted += new System.EventHandler(this.tableParameter_Sorted);
      this.txtDescription.BackColor = Color.White;
      this.txtDescription.BorderStyle = BorderStyle.FixedSingle;
      this.txtDescription.Dock = DockStyle.Fill;
      this.txtDescription.Location = new Point(0, 0);
      this.txtDescription.Multiline = true;
      this.txtDescription.Name = "txtDescription";
      this.txtDescription.Size = new Size(777, 99);
      this.txtDescription.TabIndex = 14;
      this.splitContainer1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.splitContainer1.Location = new Point(2, 3);
      this.splitContainer1.Name = "splitContainer1";
      this.splitContainer1.Orientation = Orientation.Horizontal;
      this.splitContainer1.Panel1.Controls.Add((Control) this.tableParameter);
      this.splitContainer1.Panel2.Controls.Add((Control) this.txtDescription);
      this.splitContainer1.Size = new Size(777, 476);
      this.splitContainer1.SplitterDistance = 373;
      this.splitContainer1.TabIndex = 15;
      this.btnSave.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnSave.Enabled = false;
      this.btnSave.Image = (Image) componentResourceManager.GetObject("btnSave.Image");
      this.btnSave.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSave.ImeMode = ImeMode.NoControl;
      this.btnSave.Location = new Point(595, 485);
      this.btnSave.Name = "btnSave";
      this.btnSave.Size = new Size(77, 29);
      this.btnSave.TabIndex = 16;
      this.btnSave.Text = "Save";
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnCancel.DialogResult = DialogResult.Cancel;
      this.btnCancel.Image = (Image) componentResourceManager.GetObject("btnCancel.Image");
      this.btnCancel.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnCancel.ImeMode = ImeMode.NoControl;
      this.btnCancel.Location = new Point(695, 485);
      this.btnCancel.Name = "btnCancel";
      this.btnCancel.Size = new Size(77, 29);
      this.btnCancel.TabIndex = 17;
      this.btnCancel.Text = "Cancel";
      this.btnCancel.TextAlign = ContentAlignment.MiddleRight;
      this.btnCancel.UseVisualStyleBackColor = true;
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.btnPrint.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnPrint.Image = (Image) componentResourceManager.GetObject("btnPrint.Image");
      this.btnPrint.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnPrint.Location = new Point(12, 485);
      this.btnPrint.Name = "btnPrint";
      this.btnPrint.Size = new Size(66, 29);
      this.btnPrint.TabIndex = 19;
      this.btnPrint.Text = "Print";
      this.btnPrint.TextAlign = ContentAlignment.MiddleRight;
      this.btnPrint.UseVisualStyleBackColor = true;
      this.btnPrint.Click += new System.EventHandler(this.btnPrintTable_Click);
      this.label36.BackColor = Color.White;
      this.label36.Location = new Point(160, 7);
      this.label36.Name = "label36";
      this.label36.Size = new Size(84, 15);
      this.label36.TabIndex = 53;
      this.label36.Text = "Handler object:";
      this.label36.TextAlign = ContentAlignment.MiddleRight;
      this.cboxHandlerObject.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxHandlerObject.FormattingEnabled = true;
      this.cboxHandlerObject.Location = new Point(252, 5);
      this.cboxHandlerObject.Name = "cboxHandlerObject";
      this.cboxHandlerObject.Size = new Size(132, 21);
      this.cboxHandlerObject.TabIndex = 52;
      this.cboxHandlerObject.SelectedIndexChanged += new System.EventHandler(this.cboxHandlerObject_SelectedIndexChanged);
      this.panel.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.panel.Controls.Add((Control) this.splitContainer1);
      this.panel.Controls.Add((Control) this.btnPrint);
      this.panel.Controls.Add((Control) this.btnCancel);
      this.panel.Controls.Add((Control) this.btnSave);
      this.panel.Location = new Point(0, 36);
      this.panel.Name = "panel";
      this.panel.Size = new Size(782, 524);
      this.panel.TabIndex = 54;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(784, 562);
      this.Controls.Add((Control) this.panel);
      this.Controls.Add((Control) this.label36);
      this.Controls.Add((Control) this.cboxHandlerObject);
      this.Controls.Add((Control) this.zennerCoroprateDesign1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (ParameterEditor);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Parameter Editor";
      this.Load += new System.EventHandler(this.ParameterEditor_Load);
      ((ISupportInitialize) this.tableParameter).EndInit();
      this.splitContainer1.Panel1.ResumeLayout(false);
      this.splitContainer1.Panel2.ResumeLayout(false);
      this.splitContainer1.Panel2.PerformLayout();
      this.splitContainer1.EndInit();
      this.splitContainer1.ResumeLayout(false);
      this.panel.ResumeLayout(false);
      this.ResumeLayout(false);
    }
  }
}


--- ParamLog.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.ParamLog
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  public enum ParamLog : ushort
  {
    LOG_NULL = 0,
    LOG_RESET = 4096, // 0x1000
    LOG_STICHTAG_RESET = 8192, // 0x2000
    LOG_NEXT = 12288, // 0x3000
    LOG_TABLE_SELECT = 16384, // 0x4000
    LOG_HISTORY_INDEX = 20480, // 0x5000
    LOG_TABLE_INDEX = 24576, // 0x6000
    LOG_CHANNEL = 28672, // 0x7000
  }
}


--- PDC_Database.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.PDC_Database
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using GmmDbLib;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public static class PDC_Database
  {
    private static Logger logger = LogManager.GetLogger(nameof (PDC_Database));
    private const int METER_HARDWARE_ID_PDC = 102;

    public static List<Parameter> LoadParameter(DeviceVersion version)
    {
      return PDC_Database.LoadParameter(DbBasis.PrimaryDB, version);
    }

    public static List<Parameter> LoadParameter(DbBasis db, DeviceVersion version)
    {
      if (db == null)
        throw new ArgumentNullException("Input parameter 'db' can not be null!");
      try
      {
        using (IDbConnection dbConnection = db.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = db.DbCommand(dbConnection);
          cmd.CommandText = "SELECT DISTINCT MapID FROM HardwareType WHERE FirmwareVersion=@FirmwareVersion;";
          MeterDatabase.AddParameter(cmd, "@FirmwareVersion", (double) version.Version);
          object obj = cmd.ExecuteScalar();
          if (obj == null || obj == DBNull.Value)
            return (List<Parameter>) null;
          int int32 = Convert.ToInt32(obj);
          cmd.CommandText = "SELECT p.ParameterName, m.cValue, p.DefaultDivVif, p.VariableType, p.MaxValue FROM MapDef AS m, S3_Parameter AS p \r\n\t\t\t\t\t\t\t\t\t\tWHERE m.MapID=@MapID AND p.ParameterName=m.ConstName ORDER BY m.cValue ASC;";
          cmd.Parameters.Clear();
          MeterDatabase.AddParameter(cmd, "@MapID", int32);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<Parameter>) null;
          List<Parameter> parameterList = new List<Parameter>();
          while (dataReader.Read())
          {
            string str = dataReader["ParameterName"].ToString();
            S3_VariableTypes s3VariableTypes = (S3_VariableTypes) Enum.ToObject(typeof (S3_VariableTypes), dataReader["VariableType"]);
            int num;
            switch (s3VariableTypes)
            {
              case S3_VariableTypes.INT8:
              case S3_VariableTypes.UINT8:
                num = 1;
                break;
              case S3_VariableTypes.UINT16:
              case S3_VariableTypes.INT16:
                num = 2;
                break;
              case S3_VariableTypes.UINT32:
              case S3_VariableTypes.INT32:
              case S3_VariableTypes.REAL32:
              case S3_VariableTypes.MeterTime1980:
                num = 4;
                break;
              case S3_VariableTypes.INT64:
              case S3_VariableTypes.UINT64:
              case S3_VariableTypes.REAL64:
                num = 8;
                break;
              case S3_VariableTypes.Address:
                num = 0;
                break;
              case S3_VariableTypes.ByteArray:
                num = (int) Convert.ToUInt16(dataReader["MaxValue"]);
                break;
              default:
                throw new NotImplementedException("Type is not implemented! Value: " + s3VariableTypes.ToString());
            }
            if (str == "cfg_key" && num != 16)
              throw new Exception("INTERNAL ERROR: The database is invalid! cfg_key should be 16 bytes!");
            parameterList.Add(new Parameter()
            {
              MapID = int32,
              Name = str,
              Address = Convert.ToUInt16(dataReader["cValue"]),
              Size = num,
              DifVif = dataReader["DefaultDivVif"].ToString(),
              Type = s3VariableTypes
            });
          }
          return parameterList;
        }
      }
      catch (InvalidMapFileException ex)
      {
        throw ex;
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<Parameter>) null;
      }
    }

    internal static ZR_ClassLibrary.HardwareType GetHardwareType(
      uint version,
      ushort hardwareVersion)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT HardwareTypeID, MapID, HardwareName, HardwareResource, Description FROM HardwareType WHERE FirmwareVersion=@FirmwareVersion AND HardwareVersion=@HardwareVersion;";
          MeterDatabase.AddParameter(cmd, "@FirmwareVersion", (double) version);
          MeterDatabase.AddParameter(cmd, "@HardwareVersion", (int) hardwareVersion);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (ZR_ClassLibrary.HardwareType) null;
          ZR_ClassLibrary.HardwareType hardwareType = new ZR_ClassLibrary.HardwareType();
          hardwareType.HardwareTypeID = Convert.ToInt32(dataReader["HardwareTypeID"]);
          hardwareType.MapID = Convert.ToInt32(dataReader["MapID"]);
          hardwareType.FirmwareVersion = version;
          hardwareType.HardwareName = dataReader["HardwareName"].ToString();
          hardwareType.HardwareVersion = (int) hardwareVersion;
          hardwareType.HardwareResource = dataReader["HardwareResource"].ToString();
          hardwareType.Description = dataReader["Description"].ToString();
          if (dataReader.Read())
            throw new Exception("INTERNAL ERROR: The hardware type is no unique! Version: " + version.ToString() + " HardwareVersion: " + hardwareVersion.ToString());
          return hardwareType;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (ZR_ClassLibrary.HardwareType) null;
      }
    }

    public static List<ZR_ClassLibrary.HardwareType> LoadHardwareTypeByDescription(
      string description)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT HardwareTypeID, MapID, FirmwareVersion, HardwareName, HardwareVersion, HardwareResource FROM HardwareType WHERE Description LIKE @Description;";
          MeterDatabase.AddParameter(cmd, "@Description", description);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<ZR_ClassLibrary.HardwareType>) null;
          List<ZR_ClassLibrary.HardwareType> hardwareTypeList = new List<ZR_ClassLibrary.HardwareType>();
          if (dataReader.Read())
            hardwareTypeList.Add(new ZR_ClassLibrary.HardwareType()
            {
              HardwareTypeID = Convert.ToInt32(dataReader["HardwareTypeID"]),
              MapID = Convert.ToInt32(dataReader["MapID"]),
              FirmwareVersion = Convert.ToUInt32(dataReader["FirmwareVersion"]),
              HardwareName = dataReader["HardwareName"].ToString(),
              HardwareVersion = Convert.ToInt32(dataReader["HardwareVersion"]),
              HardwareResource = dataReader["HardwareResource"].ToString(),
              Description = description
            });
          return hardwareTypeList;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<ZR_ClassLibrary.HardwareType>) null;
      }
    }

    public static List<ZR_ClassLibrary.HardwareType> LoadHardwareType(string hardwareName)
    {
      if (string.IsNullOrEmpty(hardwareName))
        return (List<ZR_ClassLibrary.HardwareType>) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM HardwareType WHERE HardwareName=@HardwareName;";
          MeterDatabase.AddParameter(cmd, "@HardwareName", hardwareName);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<ZR_ClassLibrary.HardwareType>) null;
          List<ZR_ClassLibrary.HardwareType> hardwareTypeList = new List<ZR_ClassLibrary.HardwareType>();
          while (dataReader.Read())
            hardwareTypeList.Add(new ZR_ClassLibrary.HardwareType()
            {
              HardwareTypeID = Convert.ToInt32(dataReader["HardwareTypeID"]),
              MapID = Convert.ToInt32(dataReader["MapID"]),
              FirmwareVersion = Convert.ToUInt32(dataReader["FirmwareVersion"]),
              HardwareName = dataReader["HardwareName"].ToString(),
              HardwareVersion = Convert.ToInt32(dataReader["HardwareVersion"]),
              HardwareResource = dataReader["HardwareResource"].ToString(),
              Description = dataReader["Description"].ToString()
            });
          return hardwareTypeList;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<ZR_ClassLibrary.HardwareType>) null;
      }
    }

    public static List<ZR_ClassLibrary.HardwareType> LoadHardwareType(DeviceVersion version)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM HardwareType WHERE FirmwareVersion=@FirmwareVersion;";
          MeterDatabase.AddParameter(cmd, "@FirmwareVersion", (double) version.Version);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<ZR_ClassLibrary.HardwareType>) null;
          List<ZR_ClassLibrary.HardwareType> hardwareTypeList = new List<ZR_ClassLibrary.HardwareType>();
          while (dataReader.Read())
            hardwareTypeList.Add(new ZR_ClassLibrary.HardwareType()
            {
              HardwareTypeID = Convert.ToInt32(dataReader["HardwareTypeID"]),
              MapID = Convert.ToInt32(dataReader["MapID"]),
              FirmwareVersion = Convert.ToUInt32(dataReader["FirmwareVersion"]),
              HardwareName = dataReader["HardwareName"].ToString(),
              HardwareVersion = Convert.ToInt32(dataReader["HardwareVersion"]),
              HardwareResource = dataReader["HardwareResource"].ToString(),
              Description = dataReader["Description"].ToString()
            });
          return hardwareTypeList;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<ZR_ClassLibrary.HardwareType>) null;
      }
    }

    public static ZR_ClassLibrary.MeterInfo GetMeterInfo(uint meterInfoID)
    {
      return MeterDatabase.GetMeterInfo(meterInfoID);
    }

    public static List<ZR_ClassLibrary.MeterInfo> LoadMeterInfo(
      string sapMaterialNumber,
      PDC_DeviceIdentity hardware)
    {
      return MeterDatabase.LoadMeterInfo(sapMaterialNumber, hardware.ToString());
    }

    public static List<ZR_ClassLibrary.MeterInfo> LoadMeterInfo(int hardwareTypeID)
    {
      return MeterDatabase.LoadMeterInfoByHardwareTypeID(hardwareTypeID);
    }

    public static List<Meter> LoadMeter()
    {
      return PDC_Database.LoadMeter(new DateTime?(), new DateTime?());
    }

    public static List<Meter> LoadMeter(DateTime? start, DateTime? end)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.Parameters.Clear();
          if (start.HasValue && end.HasValue)
          {
            cmd.CommandText = "SELECT m.MeterID, m.MeterInfoID, m.SerialNr, m.ProductionDate, m.ApprovalDate, m.OrderNr FROM Meter as m, MeterInfo as mi WHERE mi.MeterHardwareID = 102 AND m.MeterInfoID=mi.MeterInfoID AND m.ProductionDate >= @start AND m.ProductionDate <= @end;";
            MeterDatabase.AddParameter(cmd, "@start", start);
            MeterDatabase.AddParameter(cmd, "@end", end);
          }
          else
            cmd.CommandText = "SELECT * FROM Meter;";
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<Meter>) null;
          List<Meter> meterList = new List<Meter>();
          while (dataReader.Read())
          {
            int int32_1 = Convert.ToInt32(dataReader["MeterID"]);
            if (int32_1 != 0)
            {
              int int32_2 = Convert.ToInt32(dataReader["MeterInfoID"]);
              string str = dataReader["SerialNr"].ToString();
              if (string.IsNullOrEmpty(str) || !str.StartsWith("6ZRI"))
              {
                List<ZR_ClassLibrary.MeterData> meterDataList = PDC_Database.LoadMeterData(int32_1, new int?(1));
                if (meterDataList != null && meterDataList.Count != 0 && PDC_Meter.IsValidZipBuffer(meterDataList[0].PValueBinary))
                {
                  DateTime? nullable1 = new DateTime?();
                  if (dataReader["ProductionDate"] != DBNull.Value)
                    nullable1 = new DateTime?(Convert.ToDateTime(dataReader["ProductionDate"]));
                  DateTime? nullable2 = new DateTime?();
                  if (dataReader["ApprovalDate"] != DBNull.Value)
                    nullable2 = new DateTime?(Convert.ToDateTime(dataReader["ApprovalDate"]));
                  meterList.Add(new Meter()
                  {
                    MeterID = int32_1,
                    MeterInfoID = int32_2,
                    SerialNr = str,
                    ProductionDate = nullable1,
                    ApprovalDate = nullable2,
                    OrderNr = dataReader["OrderNr"].ToString()
                  });
                }
              }
            }
          }
          return meterList;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<Meter>) null;
      }
    }

    internal static ZR_ClassLibrary.MeterData LoadMeterData(int meterId, DateTime timePoint)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM MeterData WHERE MeterID=@MeterID AND TimePoint=@TimePoint;";
          MeterDatabase.AddParameter(cmd, "@MeterID", meterId);
          MeterDatabase.AddParameter(cmd, "@TimePoint", timePoint);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null || !dataReader.Read())
            return (ZR_ClassLibrary.MeterData) null;
          ZR_ClassLibrary.MeterData meterData = new ZR_ClassLibrary.MeterData()
          {
            MeterID = Convert.ToInt32(dataReader["MeterID"]),
            TimePoint = new DateTime?(Convert.ToDateTime(dataReader["TimePoint"])),
            PValue = dataReader["PValue"].ToString(),
            PValueBinary = dataReader["PValueBinary"] == DBNull.Value || dataReader["PValueBinary"] == null ? (byte[]) null : (byte[]) dataReader["PValueBinary"]
          };
          if (dataReader.Read())
            throw new Exception("INTERNAL ERROR: The meter data is no unique for this time point! MeterID: " + meterId.ToString() + ", Timepoint: " + timePoint.ToString());
          return meterData;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (ZR_ClassLibrary.MeterData) null;
      }
    }

    internal static List<ZR_ClassLibrary.MeterData> LoadMeterData(int meterID)
    {
      return PDC_Database.LoadMeterData(meterID, new int?());
    }

    internal static List<ZR_ClassLibrary.MeterData> LoadMeterData(int meterID, int? maxRows)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT * FROM MeterData WHERE MeterID=@MeterID;";
          MeterDatabase.AddParameter(cmd, "@MeterID", meterID);
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<ZR_ClassLibrary.MeterData>) null;
          List<ZR_ClassLibrary.MeterData> meterDataList = new List<ZR_ClassLibrary.MeterData>();
          int? nullable1 = maxRows;
          while (dataReader.Read())
          {
            int? nullable2 = nullable1;
            int num = 0;
            if (nullable2.GetValueOrDefault() <= num & nullable2.HasValue)
              return meterDataList;
            nullable2 = nullable1;
            nullable1 = nullable2.HasValue ? new int?(nullable2.GetValueOrDefault() - 1) : new int?();
            int int32 = dataReader["PValue"] != DBNull.Value ? Convert.ToInt32(dataReader["PValue"]) : 0;
            byte[] numArray = dataReader["PValueBinary"] != DBNull.Value ? (byte[]) dataReader["PValueBinary"] : (byte[]) null;
            meterDataList.Add(new ZR_ClassLibrary.MeterData()
            {
              MeterID = Convert.ToInt32(dataReader["MeterID"]),
              TimePoint = new DateTime?(Convert.ToDateTime(dataReader["TimePoint"])),
              PValueID = int32,
              PValueBinary = numArray
            });
          }
          return meterDataList;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<ZR_ClassLibrary.MeterData>) null;
      }
    }

    internal static object LoadSupportedFirmwareVersions()
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.CommandText = "SELECT FirmwareVersion FROM HardwareType WHERE HardwareName=@HardwareName1 OR HardwareName=@HardwareName2 GROUP BY FirmwareVersion;";
          MeterDatabase.AddParameter(cmd, "@HardwareName1", PDC_DeviceIdentity.PDC_WmBus.ToString());
          MeterDatabase.AddParameter(cmd, "@HardwareName2", PDC_DeviceIdentity.PDC_mBus.ToString());
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (object) null;
          List<string> stringList = new List<string>();
          while (dataReader.Read())
            stringList.Add(new DeviceVersion()
            {
              Version = Convert.ToUInt32(dataReader["FirmwareVersion"])
            }.VersionString);
          return (object) stringList;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (object) null;
      }
    }

    internal static bool CreateType(
      string sapMaterialNumber,
      int hardwareTypeID,
      string typeDescription,
      PDC_Meter meter)
    {
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.Transaction = dbConnection.BeginTransaction();
          if (!PDC_Database.CreateType(cmd, sapMaterialNumber, hardwareTypeID, typeDescription, meter))
            return false;
          cmd.Transaction.Commit();
          return true;
        }
      }
      catch (Exception ex)
      {
        if (cmd != null && cmd.Transaction != null)
          cmd.Transaction.Rollback();
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    internal static bool CreateType(
      IDbCommand cmd,
      string sapMaterialNumber,
      int hardwareTypeID,
      string typeDescription,
      PDC_Meter meter)
    {
      if (cmd == null || cmd.Connection == null || cmd.Connection.State != ConnectionState.Open)
        throw new ArgumentException(nameof (cmd));
      if (hardwareTypeID <= 0)
        return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "HardwareTypeID is invalid!");
      if (meter == null)
        return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "Meter object is not available!");
      if (string.IsNullOrEmpty(sapMaterialNumber))
        return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "SAP material number is not defined!");
      if (string.IsNullOrEmpty(typeDescription))
        return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.MissingData, "The type description can not be empty!");
      if (sapMaterialNumber != "PDC_BASETYPE" && sapMaterialNumber != "NotDefined")
      {
        List<ZR_ClassLibrary.MeterInfo> meterInfoList = PDC_Database.LoadMeterInfo(sapMaterialNumber, meter.Version.Type);
        if (meterInfoList != null && meterInfoList.Count > 0)
          return ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, "More then one identical SAP number detected! SAP material number: " + sapMaterialNumber);
      }
      bool isBaseType = "PDC_BASETYPE" == sapMaterialNumber;
      int? nextUniqueId1;
      int? nextUniqueId2;
      if (isBaseType)
      {
        nextUniqueId1 = MeterDatabase.GetNextUniqueID(cmd, "MeterInfo_BASE", "MeterInfoID");
        nextUniqueId2 = MeterDatabase.GetNextUniqueID(cmd, "MeterType_BASE", "MeterTypeID");
      }
      else
      {
        nextUniqueId1 = MeterDatabase.GetNextUniqueID(cmd, "MeterInfo", "MeterInfoID");
        nextUniqueId2 = MeterDatabase.GetNextUniqueID(cmd, "MeterType", "MeterTypeID");
      }
      if (!nextUniqueId1.HasValue || !nextUniqueId2.HasValue)
        return false;
      ZR_ClassLibrary.MeterInfo meterInfo = MeterDatabase.AddMeterInfo(cmd, nextUniqueId1.Value, 102, nextUniqueId2.Value, sapMaterialNumber, "0", typeDescription, hardwareTypeID);
      if (meterInfo == null)
        return false;
      ZR_ClassLibrary.MeterType meterType = MeterDatabase.AddMeterType(cmd, nextUniqueId2.Value, "MTypeZelsius", meter.Version.Type.ToString(), DateTime.Now, typeDescription);
      if (meterType == null)
        return false;
      meter = PDC_Database.PrepareType(meterInfo, meter, isBaseType);
      byte[] EEPdata = meter.Zip();
      if (MeterDatabase.AddMeterTypeData(cmd, meterType.MTypeTableName, meterType.MeterTypeID, EEPdata, string.Empty) == null)
        return false;
      if (isBaseType)
      {
        if (!MeterDatabase.SetNextUniqueID(cmd, "MeterInfo_BASE", "MeterInfoID", nextUniqueId1.Value + 1) || !MeterDatabase.SetNextUniqueID(cmd, "MeterType_BASE", "MeterTypeID", nextUniqueId2.Value + 1))
          return false;
      }
      else if (!MeterDatabase.SetNextUniqueID(cmd, "MeterInfo", "MeterInfoID", nextUniqueId1.Value + 1) || !MeterDatabase.SetNextUniqueID(cmd, "MeterType", "MeterTypeID", nextUniqueId2.Value + 1))
        return false;
      meter.DBDeviceInfo.MeterInfo = meterInfo;
      return true;
    }

    private static PDC_Meter PrepareType(ZR_ClassLibrary.MeterInfo meterInfo, PDC_Meter meter, bool isBaseType)
    {
      if (meterInfo == null)
        throw new ArgumentNullException(nameof (meterInfo));
      if (meter == null)
        throw new ArgumentNullException(nameof (meter));
      if (!meter.SetSerialnumberFull((string) null))
        return (PDC_Meter) null;
      uint num = 0;
      DeviceIdentification deviceIdentification = meter.GetDeviceIdentification();
      if (deviceIdentification != null)
        num = deviceIdentification.BaseTypeID;
      DeviceIdentification ident = new DeviceIdentification();
      ident.MeterID = 0U;
      ident.SapProductionOrderNumber = 0U;
      ident.HardwareTypeID = !isBaseType ? (uint) meterInfo.HardwareTypeID : 0U;
      ident.MeterInfoID = (uint) meterInfo.MeterInfoID;
      ident.MeterTypeID = (uint) meterInfo.MeterTypeID;
      ident.BaseTypeID = num;
      if (meterInfo.PPSArtikelNr == "PDC_BASETYPE")
      {
        ident.SapMaterialNumber = 0U;
        ident.BaseTypeID = (uint) meterInfo.MeterInfoID;
      }
      else if (meterInfo.PPSArtikelNr == "NotDefined")
        ident.SapMaterialNumber = 0U;
      else
        ident.SapMaterialNumber = Util.IsNumeric((object) meterInfo.PPSArtikelNr) ? uint.Parse(meterInfo.PPSArtikelNr) : throw new ArgumentException("The value of 'meterInfo.PPSArtikelNr' is invalid!");
      if (!meter.SetDeviceIdentification(ident))
        return (PDC_Meter) null;
      meter.Version.HardwareTypeID = ident.HardwareTypeID;
      return meter;
    }

    internal static bool UpdateType(ZR_ClassLibrary.MeterInfo meterInfo, PDC_Meter meter)
    {
      if (meterInfo == null || meter == null)
        return false;
      meter = PDC_Database.PrepareType(meterInfo, meter, meterInfo.PPSArtikelNr == "PDC_BASETYPE");
      ZR_ClassLibrary.MeterType meterType = MeterDatabase.GetMeterType(meterInfo.MeterTypeID);
      if (meterType == null)
        return false;
      byte[] EEPdata = meter.Zip();
      if (!MeterDatabase.UpdateMeterTypeData(meterType.MTypeTableName, meterInfo.MeterTypeID, EEPdata, string.Empty) || !MeterDatabase.UpdateMeterInfo(meterInfo))
        return false;
      meter.DBDeviceInfo.MeterInfo = meterInfo;
      return true;
    }

    public static MeterTypeData LoadType(int meterInfoID)
    {
      ZR_ClassLibrary.MeterInfo meterInfo = MeterDatabase.LoadMeterInfo((uint) meterInfoID);
      if (meterInfo == null)
        return (MeterTypeData) null;
      ZR_ClassLibrary.MeterType meterType = MeterDatabase.GetMeterType(meterInfo.MeterTypeID);
      return meterType == null ? (MeterTypeData) null : MeterDatabase.GetMeterTypeData(meterType.MTypeTableName, meterInfo.MeterTypeID);
    }

    public static bool DeleteType(int meterInfoID)
    {
      ZR_ClassLibrary.MeterInfo meterInfo = PDC_Database.GetMeterInfo((uint) meterInfoID);
      if (meterInfo == null)
        return false;
      ZR_ClassLibrary.MeterType meterType = MeterDatabase.GetMeterType(meterInfo.MeterTypeID);
      if (meterType == null)
        return false;
      IDbCommand cmd = (IDbCommand) null;
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          cmd.Transaction = dbConnection.BeginTransaction();
          cmd.CommandText = "DELETE FROM MeterInfo WHERE MeterInfoID=@MeterInfoID;";
          cmd.Parameters.Clear();
          MeterDatabase.AddParameter(cmd, "@MeterInfoID", meterInfoID);
          if (cmd.ExecuteNonQuery() != 1)
            return false;
          cmd.CommandText = "DELETE FROM MeterType WHERE MeterTypeID=@MeterTypeID;";
          cmd.Parameters.Clear();
          MeterDatabase.AddParameter(cmd, "@MeterTypeID", meterType.MeterTypeID);
          if (cmd.ExecuteNonQuery() != 1)
            return false;
          cmd.CommandText = "DELETE FROM " + meterType.MTypeTableName + " WHERE MeterTypeID=@MeterTypeID;";
          cmd.Parameters.Clear();
          MeterDatabase.AddParameter(cmd, "@MeterTypeID", meterInfo.MeterTypeID);
          if (cmd.ExecuteNonQuery() != 1)
            return false;
          try
          {
            cmd.CommandText = "DELETE FROM PPS_Cache WHERE PPS_MaterialNumber=@PPS_MaterialNumber;";
            cmd.Parameters.Clear();
            MeterDatabase.AddParameter(cmd, "@PPS_MaterialNumber", meterInfo.PPSArtikelNr);
            cmd.ExecuteNonQuery();
          }
          catch
          {
          }
          cmd.Transaction.Commit();
          return true;
        }
      }
      catch (Exception ex)
      {
        cmd.Transaction.Rollback();
        MeterDatabase.LogFailedSQLQuery(cmd);
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return false;
      }
    }

    internal static List<Firmware> LoadFirmware()
    {
      return PDC_Database.LoadFirmware(new PDC_DeviceIdentity?());
    }

    public static List<Firmware> LoadFirmware(PDC_DeviceIdentity? hardware)
    {
      try
      {
        using (IDbConnection dbConnection = DbBasis.PrimaryDB.GetDbConnection())
        {
          dbConnection.Open();
          IDbCommand cmd = DbBasis.PrimaryDB.DbCommand(dbConnection);
          if (!hardware.HasValue)
          {
            cmd.CommandText = "SELECT FirmwareVersion, MapID FROM HardwareType WHERE HardwareName=@HardwareName1 OR HardwareName=@HardwareName2 GROUP BY FirmwareVersion, MapID ORDER BY MapID DESC;";
            MeterDatabase.AddParameter(cmd, "@HardwareName1", PDC_DeviceIdentity.PDC_WmBus.ToString());
            MeterDatabase.AddParameter(cmd, "@HardwareName2", PDC_DeviceIdentity.PDC_mBus.ToString());
          }
          else
          {
            cmd.CommandText = "SELECT FirmwareVersion, MapID FROM HardwareType WHERE HardwareName=@HardwareName GROUP BY FirmwareVersion, MapID ORDER BY MapID DESC;";
            MeterDatabase.AddParameter(cmd, "@HardwareName", hardware.Value.ToString());
          }
          IDataReader dataReader = cmd.ExecuteReader();
          if (dataReader == null)
            return (List<Firmware>) null;
          List<Firmware> firmwareList = new List<Firmware>();
          while (dataReader.Read())
          {
            ProgFiles firmware = MeterDatabase.GetFirmware(Convert.ToInt32(dataReader["MapID"]));
            if (firmware != null && !string.IsNullOrEmpty(firmware.HexText))
              firmwareList.Add(new Firmware()
              {
                Version = new DeviceVersion()
                {
                  Version = Convert.ToUInt32(dataReader["FirmwareVersion"])
                },
                FirmwareFile = firmware
              });
          }
          return firmwareList;
        }
      }
      catch (Exception ex)
      {
        string str = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
        PDC_Database.logger.ErrorException(str, ex);
        ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.DatabaseError, str);
        return (List<Firmware>) null;
      }
    }

    public static PDC_Handler.Data GetData(string fullSerialNumber)
    {
      List<int> intList = !string.IsNullOrEmpty(fullSerialNumber) ? MeterDatabase.LoadMeter(fullSerialNumber) : throw new ArgumentNullException(nameof (fullSerialNumber), "Can not get data of the device!");
      if (intList == null)
        return (PDC_Handler.Data) null;
      int meterId = intList.Count <= 1 ? intList[0] : throw new Exception("Can not get data of the device! The serial number '" + fullSerialNumber + "' is not unique, it exist " + intList.Count.ToString() + " items. Check the 'Meter' table.");
      ZR_ClassLibrary.MeterData dataOfLastBackup = MeterDatabase.GetMeterDataOfLastBackup(meterId);
      if (dataOfLastBackup == null)
        return (PDC_Handler.Data) null;
      PDC_Meter pdcMeter = PDC_Meter.Unzip(dataOfLastBackup.PValueBinary);
      if (pdcMeter == null)
        throw new Exception("Can not get data of the device! Invalid data in table 'MeterData'. Serial number: " + fullSerialNumber + ", MeterID: " + meterId.ToString() + ", Timepoint: " + dataOfLastBackup.TimePoint.ToString());
      DeviceIdentification deviceIdentification = !(fullSerialNumber != pdcMeter.GetSerialnumberFull()) ? pdcMeter.GetDeviceIdentification() : throw new Exception("Can not get data of the device! Invalid data in table 'Meter' and 'MeterData'. The serial number in table 'Meter' is: " + fullSerialNumber + " The serial number in the table 'MeterData' is: " + pdcMeter.GetSerialnumberFull() + ". Check 'MeterData' table. MeterID: " + meterId.ToString() + ", Timepoint: " + dataOfLastBackup.TimePoint.ToString());
      return new PDC_Handler.Data()
      {
        MeterID = meterId,
        FullSerialNumber = fullSerialNumber,
        SapMaterialNumber = deviceIdentification != null ? deviceIdentification.SapMaterialNumber.ToString() : "",
        AesKey = pdcMeter.GetAESkey()
      };
    }
  }
}


--- PDC_HandlerFunctions.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.PDC_HandlerFunctions
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using DeviceCollector;
using GmmDbLib;
using GmmDbLib.DataSets;
using HandlerLib;
using NLog;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class PDC_HandlerFunctions : ICreateMeter
  {
    private static Logger logger = LogManager.GetLogger(nameof (PDC_HandlerFunctions));
    public static readonly DateTime DateTimeNull = new DateTime(2000, 1, 1);
    internal IDeviceCollector MyDeviceCollector;
    internal PDC_Meter ConnectedMeter;
    internal PDC_Meter WorkMeter;
    internal PDC_Meter TypeMeter;
    internal PDC_Meter BackupMeter;
    private PDC_HandlerWindow MyWindow;
    private AsyncOperation asyncOperation = (AsyncOperation) null;

    public PDC_HandlerFunctions()
    {
      ZR_Component.CommonGmmInterface.GarantComponentLoaded(GMM_Components.DeviceCollector);
      if (!ZR_Component.CommonGmmInterface.LoadedComponentsList.ContainsKey(GMM_Components.DeviceCollector))
        return;
      this.MyDeviceCollector = ZR_Component.CommonGmmInterface.LoadedComponentsList[GMM_Components.DeviceCollector] as IDeviceCollector;
    }

    public PDC_HandlerFunctions(IDeviceCollector deviceCollector)
    {
      this.MyDeviceCollector = deviceCollector;
    }

    public PDC_Meter Meter => this.WorkMeter;

    public event ValueEventHandler<int> OnProgress;

    public string ShowHandlerWindow()
    {
      this.MyWindow = new PDC_HandlerWindow(this);
      this.MyWindow.BringToFront();
      int num = (int) this.MyWindow.ShowDialog();
      string nextComponentName = this.MyWindow.NextComponentName;
      this.MyWindow.Dispose();
      return nextComponentName;
    }

    public void GMM_Dispose()
    {
    }

    internal ToolStripItem[] GetComponentMenuItems()
    {
      ToolStripMenuItem toolStripMenuItem1 = new ToolStripMenuItem();
      toolStripMenuItem1.Name = "ComponentMenuItemGMM";
      toolStripMenuItem1.Size = new Size(173, 22);
      toolStripMenuItem1.Text = "GlobalMeterManager";
      toolStripMenuItem1.Click += new System.EventHandler(this.MenuItemSelectComponent_Click);
      toolStripMenuItem1.Tag = (object) GMM_Components.GMM.ToString();
      ToolStripMenuItem toolStripMenuItem2 = new ToolStripMenuItem();
      toolStripMenuItem2.Name = "ComponentMenuItemBack";
      toolStripMenuItem2.Size = new Size(173, 22);
      toolStripMenuItem2.Text = "Back";
      toolStripMenuItem2.Click += new System.EventHandler(this.MenuItemSelectComponent_Click);
      toolStripMenuItem2.Tag = (object) "";
      ToolStripMenuItem toolStripMenuItem3 = new ToolStripMenuItem();
      toolStripMenuItem3.Name = "ComponentMenuItemQuit";
      toolStripMenuItem3.Size = new Size(173, 22);
      toolStripMenuItem3.Text = "Quit";
      toolStripMenuItem3.Click += new System.EventHandler(this.MenuItemSelectComponent_Click);
      toolStripMenuItem3.Tag = (object) "Exit";
      ToolStripSeparator toolStripSeparator = new ToolStripSeparator();
      ToolStripMenuItem toolStripMenuItem4 = new ToolStripMenuItem();
      toolStripMenuItem4.Name = "ComponentMenuItemDeviceCollector";
      toolStripMenuItem4.Size = new Size(173, 22);
      toolStripMenuItem4.Text = GMM_Components.DeviceCollector.ToString();
      toolStripMenuItem4.Click += new System.EventHandler(this.MenuItemSelectComponent_Click);
      toolStripMenuItem4.Tag = (object) GMM_Components.DeviceCollector.ToString();
      ToolStripMenuItem toolStripMenuItem5 = new ToolStripMenuItem();
      toolStripMenuItem5.Name = "ComponentMenuItemAsyncCom";
      toolStripMenuItem5.Size = new Size(173, 22);
      toolStripMenuItem5.Text = GMM_Components.AsyncCom.ToString();
      toolStripMenuItem5.Click += new System.EventHandler(this.MenuItemSelectComponent_Click);
      toolStripMenuItem5.Tag = (object) GMM_Components.AsyncCom.ToString();
      return new ToolStripItem[6]
      {
        (ToolStripItem) toolStripMenuItem1,
        (ToolStripItem) toolStripMenuItem2,
        (ToolStripItem) toolStripMenuItem3,
        (ToolStripItem) toolStripSeparator,
        (ToolStripItem) toolStripMenuItem4,
        (ToolStripItem) toolStripMenuItem5
      };
    }

    private void MenuItemSelectComponent_Click(object sender, EventArgs e)
    {
      this.MyWindow.NextComponentName = (sender as ToolStripMenuItem).Tag.ToString();
      this.MyWindow.Close();
    }

    public void ClearAllData()
    {
      this.MyDeviceCollector.BreakRequest = false;
      PDC_HandlerFunctions.logger.Debug("Clear all values in handler.");
      this.ConnectedMeter = (PDC_Meter) null;
      this.WorkMeter = (PDC_Meter) null;
      this.BackupMeter = (PDC_Meter) null;
      this.TypeMeter = (PDC_Meter) null;
    }

    public bool UpgradeFirmware(byte[] firmware)
    {
      if (firmware == null)
        throw new ArgumentNullException("Firmware can not be null!");
      if (this.OnProgress != null)
        this.OnProgress((object) this, 1);
      if (this.ManageIrDaWakeUpAndReadVersion() != null)
      {
        this.RadioDisable();
        this.PulseDisable();
      }
      if (!this.UpdateModeEnter())
        return false;
      for (uint address = 38400; address < (uint) ushort.MaxValue; address += 512U)
      {
        if (!this.UpdateFirmwareBlock(firmware, address))
        {
          Thread.Sleep(100);
          PDC_HandlerFunctions.logger.Warn("Failed to update 512 bytes! Attempt 1 of 5");
          if (!this.UpdateFirmwareBlock(firmware, address))
          {
            Thread.Sleep(100);
            PDC_HandlerFunctions.logger.Warn("Failed to update 512 bytes! Attempt 2 of 5");
            if (!this.UpdateFirmwareBlock(firmware, address))
            {
              Thread.Sleep(100);
              PDC_HandlerFunctions.logger.Warn("Failed to update 512 bytes! Attempt 3 of 5");
              if (!this.UpdateFirmwareBlock(firmware, address))
              {
                Thread.Sleep(100);
                PDC_HandlerFunctions.logger.Warn("Failed to update 512 bytes! Attempt 4 of 5");
                if (!this.UpdateFirmwareBlock(firmware, address))
                {
                  PDC_HandlerFunctions.logger.Warn("Failed to update 512 bytes! Attempt 5 of 5");
                  return false;
                }
              }
            }
          }
        }
      }
      if (this.OnProgress != null)
        this.OnProgress((object) this, 100);
      return this.UpdateModeExit() && this.ReadVersion() != null;
    }

    private bool UpdateFirmwareBlock(byte[] firmware, uint address)
    {
      if (!this.UpdateModeEraseFlash(address))
      {
        Thread.Sleep(100);
        PDC_HandlerFunctions.logger.Warn("Failed to erase 512 bytes! Attempt 1 of 4");
        if (!this.UpdateModeEraseFlash(address))
        {
          Thread.Sleep(100);
          PDC_HandlerFunctions.logger.Warn("Failed to erase 512 bytes! Attempt 2 of 4");
          if (!this.UpdateModeEraseFlash(address))
          {
            Thread.Sleep(100);
            PDC_HandlerFunctions.logger.Warn("Failed to erase 512 bytes! Attempt 3 of 4");
            if (!this.UpdateModeEraseFlash(address))
            {
              PDC_HandlerFunctions.logger.Warn("Failed to erase 512 bytes! Attempt 4 of 4");
              return false;
            }
          }
        }
      }
      for (uint index1 = address; index1 < address + 512U; index1 += 128U)
      {
        byte[] numArray1 = new byte[128];
        Buffer.BlockCopy((Array) firmware, (int) index1, (Array) numArray1, 0, numArray1.Length);
        if (this.OnProgress != null)
          this.OnProgress((object) this, ((int) index1 - 38400) * 100 / 27135);
        if (!this.UpdateModeWriteFlash(index1, numArray1))
        {
          Thread.Sleep(100);
          PDC_HandlerFunctions.logger.Warn("Failed to write 128 bytes! Attempt 1 of 2");
          if (!this.UpdateModeWriteFlash(index1, numArray1))
          {
            PDC_HandlerFunctions.logger.Warn("Failed to write 128 bytes! Attempt 2 of 2");
            return false;
          }
        }
        byte[] numArray2 = this.UpdateModeReadFlash(index1, (byte) 128);
        if (numArray2 == null)
        {
          Thread.Sleep(100);
          PDC_HandlerFunctions.logger.Warn("Failed to read 128 bytes! Attempt 1 of 3");
          numArray2 = this.UpdateModeReadFlash(index1, (byte) 128);
          if (numArray2 == null)
          {
            Thread.Sleep(100);
            PDC_HandlerFunctions.logger.Warn("Failed to read 128 bytes! Attempt 2 of 3");
            numArray2 = this.UpdateModeReadFlash(index1, (byte) 128);
            if (numArray2 == null)
            {
              PDC_HandlerFunctions.logger.Warn("Can not read 128 bytes. Attempt 3 of 3");
              return false;
            }
          }
        }
        for (int index2 = 0; index2 < numArray2.Length; ++index2)
        {
          if ((int) numArray1[index2] != (int) numArray2[index2])
          {
            PDC_HandlerFunctions.logger.Warn("Corrupt block detected! Write error.");
            return false;
          }
        }
      }
      return true;
    }

    public bool ReadDevice() => this.ReadDevice(false);

    public bool ReadDevice(bool readLoggerToo)
    {
      this.MyDeviceCollector.BreakRequest = false;
      DeviceVersion version = this.ManageIrDaWakeUpAndReadVersion();
      if (version == null)
        return false;
      RangeSet<ushort> blocksToRead = version.Type == PDC_DeviceIdentity.PDC_WmBus ? PDC_MemoryMap.GetMemoryBlocksToRead(version) : throw new Exception(Ot.Gtt(Tg.Common, "NotPDC1", "Connected device is not PDC"));
      if (blocksToRead == null)
        throw new NotSupportedException("This firmware version is not supported! Version: " + version.VersionString);
      PDC_MemoryMap map = new PDC_MemoryMap();
      if (!this.ReadMemory(map, blocksToRead))
        return false;
      if (map.IsEmpty())
        throw new Exception("The MAP is empty! Version:" + version.VersionString);
      if (readLoggerToo)
      {
        RangeSet<ushort> loggerBlocksToRead = PDC_HandlerFunctions.GetLoggerBlocksToRead(version, map);
        if (loggerBlocksToRead != null && loggerBlocksToRead.Count > 0 && !this.ReadMemory(map, loggerBlocksToRead))
          return false;
      }
      this.ConnectedMeter = new PDC_Meter(map);
      this.ConnectedMeter.Version = version;
      this.TryLoadType(version);
      this.WorkMeter = this.ConnectedMeter.DeepCopy();
      return true;
    }

    private void TryLoadType(DeviceVersion version)
    {
      DeviceIdentification deviceIdentification = this.ConnectedMeter.GetDeviceIdentification();
      if (deviceIdentification == null || !deviceIdentification.IsChecksumOK)
        return;
      this.ConnectedMeter.DBDeviceInfo.MeterInfo = PDC_Database.GetMeterInfo(deviceIdentification.MeterInfoID);
      this.ConnectedMeter.DBDeviceInfo.HardwareType = MeterDatabase.GetHardwareType((int) version.HardwareTypeID);
      try
      {
        this.TypeMeter = PDC_HandlerFunctions.LoadType((int) deviceIdentification.MeterInfoID);
      }
      catch (Exception ex)
      {
        PDC_HandlerFunctions.logger.Fatal("Can not load type! Error: " + ex.Message);
      }
    }

    private bool ReadMemory(PDC_MemoryMap map, RangeSet<ushort> blocksToRead)
    {
      int num = 0;
      foreach (Range<ushort> range in (List<Range<ushort>>) blocksToRead)
      {
        byte[] buffer;
        if (!this.ReadMemory(range.Start, (int) range.End + 1 - (int) range.Start, out buffer))
          return false;
        map.SetMemoryBytes(range.Start, buffer);
        if (this.OnProgress != null)
        {
          int progress = 100;
          if (blocksToRead.IndexOf(range) != blocksToRead.Count - 1)
            progress = Convert.ToInt32((double) num++ / (double) blocksToRead.Count * 100.0);
          this.OnProgressAsynchronously(progress);
        }
      }
      return true;
    }

    private static RangeSet<ushort> GetLoggerBlocksToRead(DeviceVersion version, PDC_MemoryMap map)
    {
      ushort uint16_1 = BitConverter.ToUInt16(map.GetMemoryBytes(PDC_MemoryMap.GetParameter(version, "log_halfmonth_address")), 0);
      ushort uint16_2 = BitConverter.ToUInt16(map.GetMemoryBytes(PDC_MemoryMap.GetParameter(version, "log_fullmonth_address")), 0);
      ushort uint16_3 = BitConverter.ToUInt16(map.GetMemoryBytes(PDC_MemoryMap.GetParameter(version, "log_stichtag_address")), 0);
      bool[] points = new bool[(int) ushort.MaxValue];
      for (int index = 0; index < points.Length; ++index)
      {
        if (index >= 32768 && index <= 35071 && uint16_1 > (ushort) 32768 && index <= (int) uint16_1)
          points[index] = true;
        else if (index >= 35072 && index <= 37375 && uint16_2 > (ushort) 35072 && index <= (int) uint16_2)
        {
          points[index] = true;
        }
        else
        {
          int num = index < 37376 || index > 37759 || uint16_3 <= (ushort) 37376 ? 0 : (index <= (int) uint16_3 ? 1 : 0);
          points[index] = num != 0;
        }
      }
      ushort addressOfRamLogger = LoggerManager.GetStartAddressOfRamLogger(version);
      for (int index = (int) addressOfRamLogger; index <= (int) addressOfRamLogger + (int) LoggerManager.RAM_LOGGER_SIZE; ++index)
        points[index] = true;
      return PDC_MemoryMap.ConvertBoolArrayToRangeSet(points);
    }

    public bool WriteDevice() => this.WriteDevice(true, true);

    internal bool WriteDevice(bool doRamBackup, bool doDeviceReset)
    {
      this.MyDeviceCollector.BreakRequest = false;
      if (this.WorkMeter == null)
        throw new ArgumentNullException("WriteDevice: WorkMeter can not be null!");
      DeviceVersion a = this.ManageIrDaWakeUpAndReadVersion();
      if (a == null)
        return false;
      SortedList<ushort, byte[]> changedRamBlocks = this.WorkMeter.GetChangedRamBlocks(this.ConnectedMeter);
      List<ushort> segmentsToErase;
      SortedList<ushort, byte[]> changedFlashBlocks = this.WorkMeter.GetChangedFlashBlocks(this.ConnectedMeter, out segmentsToErase);
      bool flag1 = changedRamBlocks != null && changedRamBlocks.Count > 0;
      bool flag2 = changedFlashBlocks != null && changedFlashBlocks.Count > 0 && segmentsToErase != null && segmentsToErase.Count > 0;
      if (!flag1 && !flag2)
        return true;
      DeviceVersion version = this.WorkMeter.Version;
      if (!DeviceVersion.IsEqual(a, version))
        throw new Exception("Can not write to connected device! Two different firmware versions detected." + Environment.NewLine + " Actual version is: " + a?.ToString() + Environment.NewLine + " Expected version is: " + version?.ToString() + Environment.NewLine);
      if (changedFlashBlocks != null && changedFlashBlocks.Count > 0 && segmentsToErase != null && segmentsToErase.Count > 0)
      {
        foreach (ushort address in segmentsToErase)
        {
          if (!this.MyDeviceCollector.PDCHandler.EraseFLASHSegment(address))
            return false;
        }
        foreach (KeyValuePair<ushort, byte[]> keyValuePair in changedFlashBlocks)
        {
          if (!this.MyDeviceCollector.PDCHandler.WriteFLASH(keyValuePair.Key, keyValuePair.Value))
            return false;
        }
      }
      if (changedRamBlocks != null && changedRamBlocks.Count > 0)
      {
        foreach (KeyValuePair<ushort, byte[]> keyValuePair in changedRamBlocks)
        {
          if (!this.MyDeviceCollector.PDCHandler.WriteRAM(keyValuePair.Key, keyValuePair.Value))
            return false;
        }
        if (doRamBackup && !this.MyDeviceCollector.PDCHandler.RunRAMBackup() || doDeviceReset && !this.MyDeviceCollector.PDCHandler.ResetDevice())
          return false;
      }
      return true;
    }

    public SortedList<long, SortedList<DateTime, ReadingValue>> GetValues(int channel)
    {
      return this.GetValues(channel, (List<long>) null);
    }

    public SortedList<long, SortedList<DateTime, ReadingValue>> GetValues(
      int channel,
      List<long> filter)
    {
      return this.WorkMeter == null ? (SortedList<long, SortedList<DateTime, ReadingValue>>) null : this.WorkMeter.GetValues(channel, filter);
    }

    public bool SaveDevice() => this.SaveDevice(out DateTime? _);

    public bool SaveDevice(out DateTime? timepoint)
    {
      timepoint = new DateTime?();
      if (this.WorkMeter == null)
        return false;
      DeviceIdentification deviceIdentification = this.WorkMeter.GetDeviceIdentification();
      if (deviceIdentification == null || !deviceIdentification.IsChecksumOK)
        throw new ArgumentNullException("The 'MeterID' can not be null!");
      if (deviceIdentification.MeterID == 0U || deviceIdentification.MeterID == uint.MaxValue)
        throw new ArgumentException("The 'MeterID' is invalid! Value: " + deviceIdentification.MeterID.ToString(), "MeterID");
      if (deviceIdentification.HardwareTypeID == 0U || deviceIdentification.HardwareTypeID == uint.MaxValue)
        throw new ArgumentException("The 'HardwareTypeID' is invalid! Value: " + deviceIdentification.HardwareTypeID.ToString(), "HardwareTypeID");
      BaseDbConnection baseDbConnection = DbBasis.PrimaryDB.BaseDbConnection;
      BaseTables.HardwareTypeRow hardwareType = GmmDbLib.HardwareType.GetHardwareType(baseDbConnection, (int) deviceIdentification.HardwareTypeID);
      if (hardwareType == null)
        throw new ArgumentException("The 'HardwareTypeID' is invalid! This id is not existing in database. Value: " + deviceIdentification.HardwareTypeID.ToString(), "HardwareTypeID");
      if (hardwareType.HardwareName != PDC_DeviceIdentity.PDC_WmBus.ToString())
        throw new ArgumentException("The 'HardwareTypeID' is not the PDC device! DB: " + hardwareType?.ToString(), "HardwareTypeID");
      int meterId = (int) deviceIdentification.MeterID;
      int meterInfoId = (int) deviceIdentification.MeterInfoID;
      uint hardwareTypeId = deviceIdentification.HardwareTypeID;
      string serialnumberFull = this.WorkMeter.GetSerialnumberFull();
      string orderNr = deviceIdentification.SapProductionOrderNumber != 0U ? deviceIdentification.SapProductionOrderNumber.ToString() : string.Empty;
      byte[] deviceMemory = this.WorkMeter.Zip();
      timepoint = Device.Save(baseDbConnection, meterId, meterInfoId, hardwareTypeId, serialnumberFull, orderNr, deviceMemory, true);
      this.BackupMeter = this.WorkMeter.DeepCopy();
      return true;
    }

    public bool OpenDevice(int meterId, DateTime timePoint)
    {
      ZR_ClassLibrary.MeterData meterData = PDC_Database.LoadMeterData(meterId, timePoint);
      return meterData != null && this.OpenDevice(meterData.PValueBinary);
    }

    public bool OpenDevice(byte[] zippedBuffer)
    {
      this.BackupMeter = zippedBuffer != null ? PDC_Meter.Unzip(zippedBuffer) : throw new ArgumentNullException(nameof (zippedBuffer));
      this.WorkMeter = this.BackupMeter.DeepCopy();
      if (this.WorkMeter.DBDeviceInfo != null && this.WorkMeter.DBDeviceInfo.MeterInfo != null)
        this.TypeMeter = PDC_HandlerFunctions.LoadType(this.WorkMeter.DBDeviceInfo.MeterInfo.MeterInfoID);
      return true;
    }

    public bool OpenType(int meterInfoID)
    {
      this.TypeMeter = PDC_HandlerFunctions.LoadType(meterInfoID);
      if (this.TypeMeter == null)
        return false;
      if (this.WorkMeter == null)
        this.WorkMeter = this.TypeMeter.DeepCopy();
      return true;
    }

    internal static PDC_Meter LoadType(int meterInfoID)
    {
      MeterTypeData meterTypeData = PDC_Database.LoadType(meterInfoID);
      return meterTypeData == null ? (PDC_Meter) null : PDC_Meter.Unzip(meterTypeData.EEPdata);
    }

    public bool CreateType(
      IDbCommand cmd,
      string sapMaterialNumber,
      PDC_HardwareIdentification hardwareIdent,
      string typeDescription)
    {
      if (hardwareIdent == null)
        throw new ArgumentNullException(nameof (hardwareIdent));
      if (this.WorkMeter == null)
        throw new ArgumentNullException("WorkMeter");
      DeviceVersion deviceVersion = this.WorkMeter.Version != null ? this.WorkMeter.Version : throw new ArgumentNullException("WorkMeter.Version");
      string key = hardwareIdent.CreateKey();
      return this.CreateType(cmd, sapMaterialNumber, (GmmDbLib.HardwareType.GetHardwareType(DbBasis.PrimaryDB.BaseDbConnection, key, (int) deviceVersion.Version) ?? throw new Exception("The hardware type does not exist in database! Type: " + key + ", Version: " + deviceVersion.Version.ToString())).HardwareTypeID, typeDescription);
    }

    public bool CreateType(
      string sapMaterialNumber,
      PDC_HardwareIdentification hardwareIdent,
      string typeDescription)
    {
      if (hardwareIdent == null)
        return false;
      if (this.WorkMeter == null)
        throw new ArgumentNullException("CreateType: WorkMeter can not be null!");
      if (this.WorkMeter.Version == null)
        throw new ArgumentNullException("CreateType: Version can not be null!");
      string key = hardwareIdent.CreateKey();
      BaseTables.HardwareTypeRow hardwareType = GmmDbLib.HardwareType.GetHardwareType(DbBasis.PrimaryDB.BaseDbConnection, key, (int) this.WorkMeter.Version.Version);
      return hardwareType != null && this.CreateType(sapMaterialNumber, hardwareType.HardwareTypeID, typeDescription);
    }

    public bool CreateType(
      IDbCommand cmd,
      string sapMaterialNumber,
      int hardwareTypeID,
      string typeDescription)
    {
      return PDC_HandlerFunctions.CreateType(cmd, sapMaterialNumber, hardwareTypeID, typeDescription, this.WorkMeter);
    }

    public bool CreateType(string sapMaterialNumber, int hardwareTypeID, string typeDescription)
    {
      return PDC_HandlerFunctions.CreateType(sapMaterialNumber, hardwareTypeID, typeDescription, this.WorkMeter);
    }

    internal static bool CreateType(
      IDbCommand cmd,
      string sapMaterialNumber,
      int hardwareTypeID,
      string typeDescription,
      PDC_Meter meter)
    {
      return PDC_Database.CreateType(cmd, sapMaterialNumber, hardwareTypeID, typeDescription, meter);
    }

    internal static bool CreateType(
      string sapMaterialNumber,
      int hardwareTypeID,
      string typeDescription,
      PDC_Meter meter)
    {
      return PDC_Database.CreateType(sapMaterialNumber, hardwareTypeID, typeDescription, meter);
    }

    public bool Overwrite(OverwritePart parts)
    {
      if (this.TypeMeter == null)
        throw new Exception("Failed overwrite with base type! The 'TypeMeter' is null.");
      if (this.WorkMeter == null)
        throw new Exception("Failed overwrite with base type! The 'WorkMeter' is null.");
      return this.WorkMeter.Overwrite(this.TypeMeter, parts);
    }

    private DeviceVersion ManageIrDaWakeUpAndReadVersion()
    {
      this.MyDeviceCollector.AsyncCom.WakeupTemporaryOff = true;
      int maxRequestRepeat = this.MyDeviceCollector.MaxRequestRepeat;
      try
      {
        this.MyDeviceCollector.MaxRequestRepeat = 1;
        DeviceVersion deviceVersion1 = this.ReadVersion();
        if (deviceVersion1 != null)
          return deviceVersion1;
        this.MyDeviceCollector.AsyncCom.ClearWakeup();
        this.MyDeviceCollector.MaxRequestRepeat = maxRequestRepeat;
        DeviceVersion deviceVersion2 = this.ReadVersion();
        if (deviceVersion2 != null)
          return deviceVersion2;
      }
      finally
      {
        this.MyDeviceCollector.MaxRequestRepeat = maxRequestRepeat;
      }
      return (DeviceVersion) null;
    }

    public DateTime? ReadSystemTime()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadSystemTime();
    }

    public bool WriteSystemTime(DateTime value)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteSystemTime(value);
    }

    public int? ReadMeterValue(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadMeterValue(channel);
    }

    public bool WriteMeterValue(byte channel, uint value)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteMeterValue(channel, value);
    }

    public DeviceVersion ReadVersion()
    {
      this.MyDeviceCollector.BreakRequest = false;
      ReadVersionData versionData;
      if (!this.MyDeviceCollector.PDCHandler.ReadVersion(out versionData) || versionData == null)
        return (DeviceVersion) null;
      return new DeviceVersion()
      {
        Version = versionData.Version,
        HardwareTypeID = versionData.HardwareIdentification,
        SvnRevision = versionData.BuildRevision,
        BuildTime = new DateTime?(versionData.BuildTime),
        Signatur = versionData.FirmwareSignature
      };
    }

    internal bool ReadMemory(ushort startAddress, int size, out byte[] buffer)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadMemory(startAddress, size, out buffer);
    }

    internal bool WriteMemory(ushort address, byte[] buffer)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteRAM(address, buffer);
    }

    public bool ResetDevice()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ResetDevice();
    }

    private bool UpdateModeEnter()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.UpdateModeEnter();
    }

    private bool UpdateModeExit()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.UpdateModeExit();
    }

    private bool UpdateModeEraseFlash(uint address)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.UpdateModeEraseFlash(address);
    }

    private bool UpdateModeWriteFlash(uint address, byte[] memory_128byte)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.UpdateModeWriteFlash(address, memory_128byte);
    }

    private byte[] UpdateModeReadFlash(uint address, byte count)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.UpdateModeReadFlash(address, count);
    }

    public bool RunRAMBackup()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.RunRAMBackup();
    }

    public bool PulseDisable()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.PulseDisable();
    }

    public bool PulseEnable()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.PulseEnable();
    }

    public uint? ReadPulseSettings()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.PulseSettingsRead();
    }

    public uint? WritePulseSettings(ushort period, byte ontime)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.PulseSettingsWrite(period, ontime);
    }

    public bool SendSND_NKE()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.SendSND_NKE();
    }

    public bool RadioDisable()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.RadioDisable();
    }

    public bool RadioNormal()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.RadioNormal();
    }

    public bool RadioOOK()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.RadioDisable() && this.MyDeviceCollector.PDCHandler.RadioOOK();
    }

    public bool RadioOOK(RadioMode mode, short offset, ushort timeoutInSeconds)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.RadioDisable() && this.MyDeviceCollector.PDCHandler.RadioOOK(mode, offset, timeoutInSeconds);
    }

    public bool RadioPN9()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.RadioDisable() && this.MyDeviceCollector.PDCHandler.RadioPN9();
    }

    public bool RadioPN9(RadioMode mode, short offset, ushort timeoutInSeconds)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.RadioDisable() && this.MyDeviceCollector.PDCHandler.RadioPN9(mode, offset, timeoutInSeconds);
    }

    public bool RadioReceive(
      out RadioPacket packet,
      out byte[] buffer,
      out int rssi_dBm,
      out int lqi,
      uint timeout)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.RadioReceive(out packet, out buffer, out rssi_dBm, out lqi, timeout);
    }

    public bool StartRadioReceiver()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.StartRadioReceiver();
    }

    private void OnProgressAsynchronously(int progress)
    {
      if (this.OnProgress == null)
        return;
      if (this.asyncOperation == null)
        this.asyncOperation = AsyncOperationManager.CreateOperation((object) null);
      this.asyncOperation.Post((SendOrPostCallback) (state =>
      {
        try
        {
          this.OnProgress((object) this, progress);
        }
        catch (Exception ex)
        {
          string message = string.Format("Error: {0}, Trace: {1}", (object) ex.Message, (object) ex.StackTrace);
          PDC_HandlerFunctions.logger.ErrorException(message, ex);
        }
      }), (object) null);
    }

    public bool EventLogClear()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.EventLogClear();
    }

    public bool SystemLogClear()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.SystemLogClear();
    }

    public string ValidateMeter(PDC_Meter meter)
    {
      return meter == null ? string.Empty : new StringBuilder().ToString();
    }

    public ushort? ReadStatusFlags(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.StatusFlagsRead(channel);
    }

    public ushort? ClearStatusFlags(byte channel, ushort flags)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.StatusFlagsClear(channel, flags);
    }

    public ushort? ReadConfigFlags()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadConfigFlags();
    }

    public ushort? WriteConfigFlags(ushort flags)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteConfigFlags(flags);
    }

    public ushort? ModifyConfigFlags(ushort flags_set, ushort flags_clear)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ModifyConfigFlags(flags_set, flags_clear);
    }

    public byte? ReadRadioFlags()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadRadioFlags();
    }

    public byte? WriteRadioFlags(byte flags)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteRadioFlags(flags);
    }

    public byte? ModifyRadioFlags(byte flags_set, byte flags_clear)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ModifyRadioFlags(flags_set, flags_clear);
    }

    public uint? ReadSerialNumber(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadSerial(channel);
    }

    public uint? WriteSerialNumber(byte channel, uint serial)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteSerial(channel, serial);
    }

    public byte? ReadMBusAddress(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadMBusAddress(channel);
    }

    public byte? WriteMBusAddress(byte channel, byte address)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteMBusAddress(channel, address);
    }

    public byte? ReadMBusVersion(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadMBusVersion(channel);
    }

    public byte? WriteMBusVersion(byte channel, byte version)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteMBusVersion(channel, version);
    }

    public byte? ReadMBusType(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadMBusMedium(channel);
    }

    public byte? WriteMBusType(byte channel, byte medium)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteMBusMedium(channel, medium);
    }

    public ushort? ReadMBusManId(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadMBusManid(channel);
    }

    public ushort? WriteMBusManId(byte channel, ushort manid)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteMBusManid(channel, manid);
    }

    public byte? ReadObisCode(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadMBusMedium(channel);
    }

    public byte? WriteObisCode(byte channel, byte code)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteObisCode(channel, code);
    }

    public byte? ReadVIF(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadVIF(channel);
    }

    public byte? WriteVIF(byte channel, byte code)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteVIF(channel, code);
    }

    public ushort? ReadMantissa(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadMantissa(channel);
    }

    public ushort? WriteMantissa(byte channel, ushort code)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteMantissa(channel, code);
    }

    public sbyte? ReadExponent(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadExponent(channel);
    }

    public sbyte? WriteExponent(byte channel, sbyte code)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteExponent(channel, code);
    }

    public ushort? ReadFlowBlock(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadFlowBlock(channel);
    }

    public ushort? WriteFlowBlock(byte channel, ushort code)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteFlowBlock(channel, code);
    }

    public ulong? ReadFlowLeak(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadFlowLeak(channel);
    }

    public ulong? WriteFlowLeak(
      byte channel,
      ushort leak,
      ushort unleak,
      ushort upper,
      ushort lower)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteFlowLeak(channel, leak, unleak, upper, lower);
    }

    public uint? ReadFlowBurst(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadFlowBurst(channel);
    }

    public uint? WriteFlowBurst(byte channel, ushort diff, ushort limit)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteFlowBurst(channel, diff, limit);
    }

    public uint? ReadFlowOversize(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadFlowOversize(channel);
    }

    public uint? WriteFlowOversize(byte channel, ushort diff, ushort limit)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteFlowOversize(channel, diff, limit);
    }

    public uint? ReadFlowUndersize(byte channel)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadFlowUndersize(channel);
    }

    public uint? WriteFlowUndersize(byte channel, ushort diff, ushort limit)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteFlowUndersize(channel, diff, limit);
    }

    public ushort? ReadKeydate()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadKeyDate();
    }

    public ushort? WriteKeydate(byte month, byte day)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteKeyDate(month, day);
    }

    public byte? ReadRadioList()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadRadioList();
    }

    public byte? WriteRadioList(byte list)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteRadioList(list);
    }

    public uint? QueryRadioList()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ListQuery();
    }

    public bool ResetToDelivery()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.DeliveryState();
    }

    public bool Depassivate()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.Depassivate();
    }

    public uint? ReadDepass()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadDepass();
    }

    public uint? WriteDepass(ushort timeout, ushort period)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteDepass(timeout, period);
    }

    public byte? QueryMBusState()
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.ReadMBusStatus();
    }

    public byte? WriteMBusState(byte state)
    {
      this.MyDeviceCollector.BreakRequest = false;
      return this.MyDeviceCollector.PDCHandler.WriteMBusStatus(state);
    }

    public IMeter CreateMeter(byte[] zippedBuffer)
    {
      return zippedBuffer != null ? (IMeter) PDC_Meter.Unzip(zippedBuffer) : throw new ArgumentNullException(nameof (zippedBuffer));
    }

    public void Dispose() => this.GMM_Dispose();
  }
}


--- PDC_HandlerWindow.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.PDC_HandlerWindow
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using CorporateDesign;
using GmmDbLib;
using HandlerLib;
using NLog;
using StartupLib;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Windows;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public class PDC_HandlerWindow : Form
  {
    private static Logger logger = LogManager.GetLogger(nameof (PDC_HandlerWindow));
    internal string NextComponentName = "Exit";
    private PDC_HandlerFunctions handler;
    private bool isCanceled;
    private Stopwatch stopwatch;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign2;
    private MenuStrip menuStrip;
    private ToolStripMenuItem ToolStripMenuItemComponents;
    private GroupBox gboxTypeDevice;
    private Button btnOverwriteWorkFromType;
    private TextBox txtTypeInfo;
    private Button btnClear;
    private GroupBox gboxConnectedDevice;
    private TextBox txtConnectedDeviceInfo;
    private GroupBox groupBoxShowEditData;
    private Button btnParameter;
    private Button btnLogger;
    private GroupBox gboxBackupDevice;
    private Button btnLoadBackup;
    private Button btnCreateBackup;
    private TextBox txtBackupDeviceInfo;
    private Button btnTestDialog;
    private StatusStrip statusStrip;
    private ToolStripProgressBar progress;
    private ToolStripStatusLabel lblStatus;
    private Button btnConfigurator;
    private Button btnTypeEditor;
    private CheckBox ckboxReadLoggerToo;
    private Button btnFirmware;
    private Button btnReadDevice;
    private Button btnWriteDevice;
    private CheckBox cboxReadCyclic;
    private GroupBox gboxWorkDevice;
    private TextBox txtWorkDeviceInfo;
    private Button btnZoomWork;
    private Button btnZoomType;
    private Button btnZoomConnected;
    private Button btnZoomDeviceBackup;
    private Button btnSimulator;

    public PDC_HandlerWindow(PDC_HandlerFunctions handler)
    {
      this.InitializeComponent();
      this.handler = handler;
      Version version = typeof (PDC_HandlerWindow).Assembly.GetName().Version;
      this.Text = string.Format("PDC Handler v{0}.{1}.{2}", (object) version.Major, (object) version.Minor, (object) version.Build);
      this.ToolStripMenuItemComponents.DropDownItems.AddRange(handler.GetComponentMenuItems());
      this.menuStrip.Visible = true;
      this.btnWriteDevice.Enabled = false;
      this.cboxReadCyclic.Visible = UserManager.CheckPermission("Developer");
      this.stopwatch = new Stopwatch();
      this.ResetUI();
      FormTranslatorSupport.TranslateWindow(Tg.PDC_HandlerWindow, (Form) this);
    }

    private void PDC_HandlerWindow_Load(object sender, EventArgs e)
    {
      this.UpdateUI();
      this.handler.MyDeviceCollector.OnMessage += new EventHandler<GMM_EventArgs>(this.MyDeviceCollector_OnMessage);
      this.handler.OnProgress += new ValueEventHandler<int>(this.MyFunctions_OnProgress);
      if (!UserManager.CheckPermission("PDC_Handler"))
        throw new PermissionException("PDC_Handler");
    }

    private void PDC_HandlerWindow_FormClosing(object sender, FormClosingEventArgs e)
    {
      this.handler.MyDeviceCollector.OnMessage -= new EventHandler<GMM_EventArgs>(this.MyDeviceCollector_OnMessage);
      this.handler.OnProgress -= new ValueEventHandler<int>(this.MyFunctions_OnProgress);
    }

    private void btnSimulator_Click(object sender, EventArgs e)
    {
      Simulator.ShowDialog((Form) this, this.handler);
      ZR_ClassLibMessages.ClearErrors();
    }

    private void btnUpgradeFirmware_Click(object sender, EventArgs e)
    {
      FirmwareEditor.ShowDialog((Form) this, this.handler);
    }

    private void btnConfigurator_Click(object sender, EventArgs e)
    {
      ConfiguratorPdcRadio.ShowDialog((Form) this, this.handler);
      this.UpdateUI();
    }

    private void btnOverwriteWorkFromType_Click(object sender, EventArgs e)
    {
      OverwriteEditor.ShowDialog((Form) this, this.handler);
      this.UpdateUI();
    }

    private void btnTypeEditor_Click(object sender, EventArgs e)
    {
      TypeEditor.ShowDialog((Form) this, this.handler);
      this.UpdateUI();
    }

    private void btnLoadBackup_Click(object sender, EventArgs e)
    {
      byte[] zippedBuffer = BackupWindow.ShowDialog((Window) null, (ICreateMeter) this.handler, "PDC_WmBus", false);
      if (zippedBuffer == null)
        return;
      this.handler.OpenDevice(zippedBuffer);
      this.UpdateUI();
    }

    private void btnSaveBackup_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.handler.SaveDevice())
        {
          this.UpdateUI();
          int num = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, "Successfully saved!", "Backup", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        else
        {
          int num1 = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, "Unable to create backup! " + ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription, "Backup failed", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }
      }
      catch (Exception ex)
      {
        int num = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, "Unable to create backup! " + ex.Message, "Backup failed", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnReadDevice_Click(object sender, EventArgs e)
    {
      try
      {
        this.handler.ClearAllData();
        this.DisableUI();
        this.ResetUI();
        this.progress.Visible = true;
        Cursor.Current = Cursors.WaitCursor;
        if (this.cboxReadCyclic.Checked)
        {
          int num1 = 0;
          int num2 = 0;
          while (this.cboxReadCyclic.Checked)
          {
            ZR_ClassLibMessages.ClearErrors();
            if (!this.handler.ReadDevice(this.ckboxReadLoggerToo.Checked))
            {
              this.DisableUI();
              this.ResetUI();
              this.txtConnectedDeviceInfo.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
              ++num2;
            }
            else
            {
              this.UpdateUI();
              ++num1;
            }
            this.lblStatus.Text = string.Format("Cyclic read: OK ({0}) Failed ({1}), Time elapsed: {2}", (object) num1, (object) num2, (object) ZR_ClassLibrary.Util.ElapsedToString(this.stopwatch.Elapsed));
            System.Windows.Forms.Application.DoEvents();
            Cursor.Current = Cursors.WaitCursor;
          }
        }
        else
        {
          bool flag = this.handler.ReadDevice(this.ckboxReadLoggerToo.Checked);
          this.stopwatch.Stop();
          if (!flag)
          {
            this.lblStatus.Text = "Error occurred!";
            int num = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          else
          {
            this.lblStatus.Text = "Time elapsed: " + ZR_ClassLibrary.Util.ElapsedToString(this.stopwatch.Elapsed);
            ConfigInit? configInitIndicator = this.handler.ConnectedMeter.GetConfigInitIndicator();
            if (configInitIndicator.Value == ConfigInit.CORRUPT)
            {
              int num3 = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, "Configuration detected, but CRC failed, defaults loaded!", "INFOA memory", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            else if (configInitIndicator.Value == ConfigInit.FIRSTRUN)
            {
              int num4 = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, "No configuration detected, defaults loaded!", "INFOA memory", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
          }
        }
      }
      catch (NotSupportedException ex)
      {
        if (DialogResult.Yes != System.Windows.Forms.MessageBox.Show((IWin32Window) this, ex.Message + Environment.NewLine + "Do you want to make a firmware upgrade?", "Old firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1))
          return;
        FirmwareEditor.ShowDialog((Form) this, this.handler);
      }
      catch (Exception ex)
      {
        int num = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, "Failed read meter! " + ex.Message + Environment.NewLine + ex.StackTrace, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      finally
      {
        this.UpdateUI();
        this.ValidateDevice();
      }
    }

    private void btnWriteDevice_Click(object sender, EventArgs e)
    {
      try
      {
        this.DisableUI();
        Cursor.Current = Cursors.WaitCursor;
        if (this.handler.WriteDevice())
        {
          this.stopwatch.Stop();
          this.lblStatus.Text = "Time elapsed: " + ZR_ClassLibrary.Util.ElapsedToString(this.stopwatch.Elapsed);
          int num = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, "Successfully!", "Write device", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        else
        {
          int num1 = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, "Unable to write to device! Error: " + ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription, "Failed write device", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }
        this.UpdateUI();
      }
      finally
      {
        this.btnReadDevice.Enabled = true;
        this.btnWriteDevice.Enabled = true;
        Cursor.Current = Cursors.Default;
      }
    }

    private void btnParameter_Click(object sender, EventArgs e)
    {
      ParameterEditor.ShowDialog((Form) this, this.handler);
      this.UpdateUI();
    }

    private void btnLogger_Click(object sender, EventArgs e)
    {
      LoggerEditor.ShowDialog((Form) this, this.handler);
      this.UpdateUI();
    }

    private void btnClear_Click(object sender, EventArgs e)
    {
      this.handler.ClearAllData();
      this.ResetUI();
      this.btnWriteDevice.Enabled = false;
      this.UpdateUI();
    }

    private void btnTestCommands_Click(object sender, EventArgs e)
    {
      TestCommand.ShowDialog((Form) this, this.handler);
    }

    private void btnZoomWork_Click(object sender, EventArgs e)
    {
      ZoomEditor.ShowDialog((Form) this, this.handler.WorkMeter);
    }

    private void btnZoomConnected_Click(object sender, EventArgs e)
    {
      ZoomEditor.ShowDialog((Form) this, this.handler.ConnectedMeter);
    }

    private void btnZoomDeviceBackup_Click(object sender, EventArgs e)
    {
      ZoomEditor.ShowDialog((Form) this, this.handler.BackupMeter);
    }

    private void btnZoomType_Click(object sender, EventArgs e)
    {
      ZoomEditor.ShowDialog((Form) this, this.handler.TypeMeter);
    }

    private void MyDeviceCollector_OnMessage(object sender, GMM_EventArgs e)
    {
      if (this.InvokeRequired)
      {
        try
        {
          this.BeginInvoke((Delegate) new EventHandler<GMM_EventArgs>(this.MyDeviceCollector_OnMessage), sender, (object) e);
        }
        catch
        {
        }
      }
      else
      {
        e.Cancel = this.isCanceled;
        if (e.Cancel)
          this.handler.MyDeviceCollector.BreakRequest = true;
        if (string.IsNullOrEmpty(e.EventMessage) || e.TheMessageType == GMM_EventArgs.MessageType.Alive)
          return;
        this.lblStatus.Text = e.EventMessage;
      }
    }

    private void MyFunctions_OnProgress(object sender, int e)
    {
      if (e >= 0 && e <= 100)
        this.progress.Value = e;
      System.Windows.Forms.Application.DoEvents();
    }

    private void ResetUI()
    {
      this.isCanceled = false;
      this.lblStatus.Text = string.Empty;
      this.txtTypeInfo.Text = string.Empty;
      this.txtBackupDeviceInfo.Text = string.Empty;
      this.txtConnectedDeviceInfo.Text = string.Empty;
      this.txtWorkDeviceInfo.Text = string.Empty;
      this.progress.Visible = false;
      this.progress.Value = 0;
      System.Windows.Forms.Application.DoEvents();
      this.stopwatch.Reset();
      this.stopwatch.Start();
    }

    private void UpdateUI()
    {
      if (this.handler == null)
        return;
      if (this.handler.ConnectedMeter != null)
        this.txtConnectedDeviceInfo.Text = this.handler.ConnectedMeter.ToString();
      else
        this.txtConnectedDeviceInfo.Text = string.Empty;
      if (this.handler.WorkMeter != null)
        this.txtWorkDeviceInfo.Text = this.handler.WorkMeter.ToString();
      else
        this.txtWorkDeviceInfo.Text = string.Empty;
      if (this.handler.TypeMeter != null)
      {
        this.txtTypeInfo.Text = this.handler.TypeMeter.ToString();
        if (this.handler.TypeMeter.DBDeviceInfo != null && this.handler.TypeMeter.DBDeviceInfo.MeterInfo != null)
          this.gboxTypeDevice.Text = "Type (MeterInfoID: " + this.handler.TypeMeter.DBDeviceInfo.MeterInfo.MeterInfoID.ToString() + " " + this.handler.TypeMeter.DBDeviceInfo.MeterInfo.Description + ")";
        else
          this.gboxTypeDevice.Text = "Base type";
      }
      else
      {
        this.txtTypeInfo.Text = string.Empty;
        this.gboxTypeDevice.Text = "Type";
      }
      if (this.handler.BackupMeter != null)
        this.txtBackupDeviceInfo.Text = this.handler.BackupMeter.ToString();
      else
        this.txtBackupDeviceInfo.Text = string.Empty;
      bool flag1 = this.handler.ConnectedMeter != null || this.handler.WorkMeter != null || this.handler.BackupMeter != null || this.handler.TypeMeter != null;
      this.btnClear.Enabled = flag1;
      this.btnConfigurator.Enabled = flag1;
      this.btnParameter.Enabled = flag1;
      this.btnLogger.Enabled = flag1;
      bool flag2 = this.handler.WorkMeter != null;
      this.btnWriteDevice.Enabled = flag2;
      this.btnCreateBackup.Enabled = flag2;
      this.btnTypeEditor.Enabled = true;
      this.btnLoadBackup.Enabled = true;
      this.btnOverwriteWorkFromType.Enabled = this.handler.TypeMeter != null;
      this.btnReadDevice.Enabled = true;
      this.btnFirmware.Enabled = true;
      this.btnTestDialog.Enabled = true;
      this.btnSimulator.Enabled = true;
      this.progress.Visible = false;
      this.gboxTypeDevice.Visible = true;
      this.gboxBackupDevice.Visible = true;
      this.gboxConnectedDevice.Visible = true;
      this.gboxWorkDevice.Visible = true;
      this.btnClear.Visible = true;
      this.btnConfigurator.Visible = true;
      this.btnParameter.Visible = true;
      this.btnLogger.Visible = true;
      this.btnSimulator.Visible = true;
      this.btnFirmware.Visible = true;
      this.btnTestDialog.Visible = true;
      Cursor.Current = Cursors.Default;
    }

    private void DisableUI()
    {
      this.btnReadDevice.Enabled = false;
      this.btnWriteDevice.Enabled = false;
      this.btnCreateBackup.Enabled = false;
      this.btnTypeEditor.Enabled = false;
      this.btnLoadBackup.Enabled = false;
      this.btnFirmware.Enabled = false;
      this.btnTestDialog.Enabled = false;
      this.btnLogger.Enabled = false;
      this.btnConfigurator.Enabled = false;
      this.btnParameter.Enabled = false;
      this.btnSimulator.Enabled = false;
      this.btnOverwriteWorkFromType.Enabled = false;
    }

    private void ValidateDevice()
    {
      string text = this.handler.ValidateMeter(this.handler.WorkMeter);
      if (string.IsNullOrEmpty(text))
        return;
      int num = (int) System.Windows.Forms.MessageBox.Show((IWin32Window) this, text, "Invalid Work device", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (PDC_HandlerWindow));
      this.menuStrip = new MenuStrip();
      this.ToolStripMenuItemComponents = new ToolStripMenuItem();
      this.gboxTypeDevice = new GroupBox();
      this.btnZoomType = new Button();
      this.btnTypeEditor = new Button();
      this.btnOverwriteWorkFromType = new Button();
      this.txtTypeInfo = new TextBox();
      this.btnClear = new Button();
      this.gboxConnectedDevice = new GroupBox();
      this.btnZoomConnected = new Button();
      this.ckboxReadLoggerToo = new CheckBox();
      this.cboxReadCyclic = new CheckBox();
      this.btnWriteDevice = new Button();
      this.btnReadDevice = new Button();
      this.txtConnectedDeviceInfo = new TextBox();
      this.groupBoxShowEditData = new GroupBox();
      this.btnSimulator = new Button();
      this.btnFirmware = new Button();
      this.btnConfigurator = new Button();
      this.btnTestDialog = new Button();
      this.btnParameter = new Button();
      this.btnLogger = new Button();
      this.gboxBackupDevice = new GroupBox();
      this.btnZoomDeviceBackup = new Button();
      this.btnLoadBackup = new Button();
      this.btnCreateBackup = new Button();
      this.txtBackupDeviceInfo = new TextBox();
      this.statusStrip = new StatusStrip();
      this.progress = new ToolStripProgressBar();
      this.lblStatus = new ToolStripStatusLabel();
      this.zennerCoroprateDesign2 = new ZennerCoroprateDesign();
      this.gboxWorkDevice = new GroupBox();
      this.btnZoomWork = new Button();
      this.txtWorkDeviceInfo = new TextBox();
      this.menuStrip.SuspendLayout();
      this.gboxTypeDevice.SuspendLayout();
      this.gboxConnectedDevice.SuspendLayout();
      this.groupBoxShowEditData.SuspendLayout();
      this.gboxBackupDevice.SuspendLayout();
      this.statusStrip.SuspendLayout();
      this.gboxWorkDevice.SuspendLayout();
      this.SuspendLayout();
      this.menuStrip.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.ToolStripMenuItemComponents
      });
      this.menuStrip.Location = new Point(0, 0);
      this.menuStrip.Name = "menuStrip";
      this.menuStrip.Size = new Size(784, 24);
      this.menuStrip.TabIndex = 17;
      this.menuStrip.Text = "menuStrip1";
      this.ToolStripMenuItemComponents.Name = "ToolStripMenuItemComponents";
      this.ToolStripMenuItemComponents.Size = new Size(83, 20);
      this.ToolStripMenuItemComponents.Text = "Component";
      this.gboxTypeDevice.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.gboxTypeDevice.Controls.Add((Control) this.btnZoomType);
      this.gboxTypeDevice.Controls.Add((Control) this.btnTypeEditor);
      this.gboxTypeDevice.Controls.Add((Control) this.btnOverwriteWorkFromType);
      this.gboxTypeDevice.Controls.Add((Control) this.txtTypeInfo);
      this.gboxTypeDevice.Location = new Point(7, 71);
      this.gboxTypeDevice.Name = "gboxTypeDevice";
      this.gboxTypeDevice.Size = new Size(617, 109);
      this.gboxTypeDevice.TabIndex = 33;
      this.gboxTypeDevice.TabStop = false;
      this.gboxTypeDevice.Text = "Type";
      this.btnZoomType.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnZoomType.Image = (Image) componentResourceManager.GetObject("btnZoomType.Image");
      this.btnZoomType.Location = new Point(372, 22);
      this.btnZoomType.Name = "btnZoomType";
      this.btnZoomType.Size = new Size(23, 23);
      this.btnZoomType.TabIndex = 36;
      this.btnZoomType.UseVisualStyleBackColor = true;
      this.btnZoomType.Click += new System.EventHandler(this.btnZoomType_Click);
      this.btnTypeEditor.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnTypeEditor.Image = (Image) componentResourceManager.GetObject("btnTypeEditor.Image");
      this.btnTypeEditor.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnTypeEditor.Location = new Point(422, 19);
      this.btnTypeEditor.Name = "btnTypeEditor";
      this.btnTypeEditor.Size = new Size(186, 39);
      this.btnTypeEditor.TabIndex = 20;
      this.btnTypeEditor.Text = "Type";
      this.btnTypeEditor.UseVisualStyleBackColor = true;
      this.btnTypeEditor.Click += new System.EventHandler(this.btnTypeEditor_Click);
      this.btnOverwriteWorkFromType.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnOverwriteWorkFromType.Enabled = false;
      this.btnOverwriteWorkFromType.Location = new Point(422, 64);
      this.btnOverwriteWorkFromType.Name = "btnOverwriteWorkFromType";
      this.btnOverwriteWorkFromType.Size = new Size(186, 39);
      this.btnOverwriteWorkFromType.TabIndex = 17;
      this.btnOverwriteWorkFromType.Text = "Overwrite work (from type) ...";
      this.btnOverwriteWorkFromType.UseVisualStyleBackColor = true;
      this.btnOverwriteWorkFromType.Click += new System.EventHandler(this.btnOverwriteWorkFromType_Click);
      this.txtTypeInfo.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtTypeInfo.BackColor = Color.White;
      this.txtTypeInfo.Font = new Font("Consolas", 8.25f);
      this.txtTypeInfo.Location = new Point(6, 19);
      this.txtTypeInfo.Multiline = true;
      this.txtTypeInfo.Name = "txtTypeInfo";
      this.txtTypeInfo.ReadOnly = true;
      this.txtTypeInfo.ScrollBars = ScrollBars.Vertical;
      this.txtTypeInfo.Size = new Size(410, 84);
      this.txtTypeInfo.TabIndex = 19;
      this.btnClear.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnClear.Enabled = false;
      this.btnClear.Image = (Image) componentResourceManager.GetObject("btnClear.Image");
      this.btnClear.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnClear.Location = new Point(636, 488);
      this.btnClear.Name = "btnClear";
      this.btnClear.Size = new Size(130, 39);
      this.btnClear.TabIndex = 25;
      this.btnClear.Text = "Clear";
      this.btnClear.UseVisualStyleBackColor = true;
      this.btnClear.Click += new System.EventHandler(this.btnClear_Click);
      this.gboxConnectedDevice.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.gboxConnectedDevice.Controls.Add((Control) this.btnZoomConnected);
      this.gboxConnectedDevice.Controls.Add((Control) this.ckboxReadLoggerToo);
      this.gboxConnectedDevice.Controls.Add((Control) this.cboxReadCyclic);
      this.gboxConnectedDevice.Controls.Add((Control) this.btnWriteDevice);
      this.gboxConnectedDevice.Controls.Add((Control) this.btnReadDevice);
      this.gboxConnectedDevice.Controls.Add((Control) this.txtConnectedDeviceInfo);
      this.gboxConnectedDevice.Location = new Point(7, 301);
      this.gboxConnectedDevice.Name = "gboxConnectedDevice";
      this.gboxConnectedDevice.Size = new Size(617, 125);
      this.gboxConnectedDevice.TabIndex = 32;
      this.gboxConnectedDevice.TabStop = false;
      this.gboxConnectedDevice.Text = "Connected device";
      this.btnZoomConnected.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnZoomConnected.Image = (Image) componentResourceManager.GetObject("btnZoomConnected.Image");
      this.btnZoomConnected.Location = new Point(372, 22);
      this.btnZoomConnected.Name = "btnZoomConnected";
      this.btnZoomConnected.Size = new Size(23, 23);
      this.btnZoomConnected.TabIndex = 21;
      this.btnZoomConnected.UseVisualStyleBackColor = true;
      this.btnZoomConnected.Click += new System.EventHandler(this.btnZoomConnected_Click);
      this.ckboxReadLoggerToo.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.ckboxReadLoggerToo.Checked = true;
      this.ckboxReadLoggerToo.CheckState = CheckState.Checked;
      this.ckboxReadLoggerToo.Location = new Point(422, 16);
      this.ckboxReadLoggerToo.Name = "ckboxReadLoggerToo";
      this.ckboxReadLoggerToo.Size = new Size(85, 17);
      this.ckboxReadLoggerToo.TabIndex = 22;
      this.ckboxReadLoggerToo.Text = "Read logger";
      this.cboxReadCyclic.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.cboxReadCyclic.Location = new Point(509, 16);
      this.cboxReadCyclic.Name = "cboxReadCyclic";
      this.cboxReadCyclic.Size = new Size(86, 17);
      this.cboxReadCyclic.TabIndex = 34;
      this.cboxReadCyclic.Text = "Read cyclic";
      this.btnWriteDevice.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnWriteDevice.Image = (Image) componentResourceManager.GetObject("btnWriteDevice.Image");
      this.btnWriteDevice.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnWriteDevice.Location = new Point(422, 81);
      this.btnWriteDevice.Name = "btnWriteDevice";
      this.btnWriteDevice.Size = new Size(186, 39);
      this.btnWriteDevice.TabIndex = 21;
      this.btnWriteDevice.Text = "Write";
      this.btnWriteDevice.UseVisualStyleBackColor = true;
      this.btnWriteDevice.Click += new System.EventHandler(this.btnWriteDevice_Click);
      this.btnReadDevice.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnReadDevice.Image = (Image) componentResourceManager.GetObject("btnReadDevice.Image");
      this.btnReadDevice.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnReadDevice.Location = new Point(422, 39);
      this.btnReadDevice.Name = "btnReadDevice";
      this.btnReadDevice.Size = new Size(186, 39);
      this.btnReadDevice.TabIndex = 20;
      this.btnReadDevice.Text = "Read";
      this.btnReadDevice.UseVisualStyleBackColor = true;
      this.btnReadDevice.Click += new System.EventHandler(this.btnReadDevice_Click);
      this.txtConnectedDeviceInfo.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtConnectedDeviceInfo.BackColor = Color.White;
      this.txtConnectedDeviceInfo.Font = new Font("Consolas", 8.25f);
      this.txtConnectedDeviceInfo.Location = new Point(6, 19);
      this.txtConnectedDeviceInfo.Multiline = true;
      this.txtConnectedDeviceInfo.Name = "txtConnectedDeviceInfo";
      this.txtConnectedDeviceInfo.ReadOnly = true;
      this.txtConnectedDeviceInfo.ScrollBars = ScrollBars.Vertical;
      this.txtConnectedDeviceInfo.Size = new Size(410, 100);
      this.txtConnectedDeviceInfo.TabIndex = 19;
      this.groupBoxShowEditData.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.groupBoxShowEditData.Controls.Add((Control) this.btnSimulator);
      this.groupBoxShowEditData.Controls.Add((Control) this.btnFirmware);
      this.groupBoxShowEditData.Controls.Add((Control) this.btnConfigurator);
      this.groupBoxShowEditData.Controls.Add((Control) this.btnTestDialog);
      this.groupBoxShowEditData.Controls.Add((Control) this.btnParameter);
      this.groupBoxShowEditData.Controls.Add((Control) this.btnLogger);
      this.groupBoxShowEditData.Location = new Point(630, 68);
      this.groupBoxShowEditData.Name = "groupBoxShowEditData";
      this.groupBoxShowEditData.Size = new Size(144, 254);
      this.groupBoxShowEditData.TabIndex = 31;
      this.groupBoxShowEditData.TabStop = false;
      this.btnSimulator.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSimulator.Location = new Point(5, 211);
      this.btnSimulator.Name = "btnSimulator";
      this.btnSimulator.Size = new Size(130, 35);
      this.btnSimulator.TabIndex = 22;
      this.btnSimulator.Text = "Simulator";
      this.btnSimulator.UseVisualStyleBackColor = true;
      this.btnSimulator.Click += new System.EventHandler(this.btnSimulator_Click);
      this.btnFirmware.Image = (Image) componentResourceManager.GetObject("btnFirmware.Image");
      this.btnFirmware.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnFirmware.Location = new Point(5, 133);
      this.btnFirmware.Name = "btnFirmware";
      this.btnFirmware.Size = new Size(130, 35);
      this.btnFirmware.TabIndex = 21;
      this.btnFirmware.Text = "Firmware";
      this.btnFirmware.UseVisualStyleBackColor = true;
      this.btnFirmware.Click += new System.EventHandler(this.btnUpgradeFirmware_Click);
      this.btnConfigurator.Image = (Image) componentResourceManager.GetObject("btnConfigurator.Image");
      this.btnConfigurator.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnConfigurator.Location = new Point(5, 17);
      this.btnConfigurator.Name = "btnConfigurator";
      this.btnConfigurator.Size = new Size(130, 35);
      this.btnConfigurator.TabIndex = 20;
      this.btnConfigurator.Text = "Configurator";
      this.btnConfigurator.UseVisualStyleBackColor = true;
      this.btnConfigurator.Click += new System.EventHandler(this.btnConfigurator_Click);
      this.btnTestDialog.Image = (Image) componentResourceManager.GetObject("btnTestDialog.Image");
      this.btnTestDialog.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnTestDialog.Location = new Point(5, 172);
      this.btnTestDialog.Name = "btnTestDialog";
      this.btnTestDialog.Size = new Size(130, 35);
      this.btnTestDialog.TabIndex = 18;
      this.btnTestDialog.Text = "Test";
      this.btnTestDialog.UseVisualStyleBackColor = true;
      this.btnTestDialog.Click += new System.EventHandler(this.btnTestCommands_Click);
      this.btnParameter.Image = (Image) componentResourceManager.GetObject("btnParameter.Image");
      this.btnParameter.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnParameter.Location = new Point(5, 56);
      this.btnParameter.Name = "btnParameter";
      this.btnParameter.Size = new Size(130, 35);
      this.btnParameter.TabIndex = 17;
      this.btnParameter.Text = "Parameter";
      this.btnParameter.UseVisualStyleBackColor = true;
      this.btnParameter.Click += new System.EventHandler(this.btnParameter_Click);
      this.btnLogger.Enabled = false;
      this.btnLogger.Image = (Image) componentResourceManager.GetObject("btnLogger.Image");
      this.btnLogger.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnLogger.Location = new Point(5, 94);
      this.btnLogger.Name = "btnLogger";
      this.btnLogger.Size = new Size(130, 35);
      this.btnLogger.TabIndex = 17;
      this.btnLogger.Text = "Logger";
      this.btnLogger.UseVisualStyleBackColor = true;
      this.btnLogger.Click += new System.EventHandler(this.btnLogger_Click);
      this.gboxBackupDevice.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.gboxBackupDevice.Controls.Add((Control) this.btnZoomDeviceBackup);
      this.gboxBackupDevice.Controls.Add((Control) this.btnLoadBackup);
      this.gboxBackupDevice.Controls.Add((Control) this.btnCreateBackup);
      this.gboxBackupDevice.Controls.Add((Control) this.txtBackupDeviceInfo);
      this.gboxBackupDevice.Location = new Point(7, 186);
      this.gboxBackupDevice.Name = "gboxBackupDevice";
      this.gboxBackupDevice.Size = new Size(617, 109);
      this.gboxBackupDevice.TabIndex = 30;
      this.gboxBackupDevice.TabStop = false;
      this.gboxBackupDevice.Text = "Device backup";
      this.btnZoomDeviceBackup.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnZoomDeviceBackup.Image = (Image) componentResourceManager.GetObject("btnZoomDeviceBackup.Image");
      this.btnZoomDeviceBackup.Location = new Point(372, 25);
      this.btnZoomDeviceBackup.Name = "btnZoomDeviceBackup";
      this.btnZoomDeviceBackup.Size = new Size(23, 23);
      this.btnZoomDeviceBackup.TabIndex = 35;
      this.btnZoomDeviceBackup.UseVisualStyleBackColor = true;
      this.btnZoomDeviceBackup.Click += new System.EventHandler(this.btnZoomDeviceBackup_Click);
      this.btnLoadBackup.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnLoadBackup.Image = (Image) componentResourceManager.GetObject("btnLoadBackup.Image");
      this.btnLoadBackup.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnLoadBackup.Location = new Point(422, 21);
      this.btnLoadBackup.Name = "btnLoadBackup";
      this.btnLoadBackup.Size = new Size(186, 39);
      this.btnLoadBackup.TabIndex = 17;
      this.btnLoadBackup.Text = "Load backup";
      this.btnLoadBackup.UseVisualStyleBackColor = true;
      this.btnLoadBackup.Click += new System.EventHandler(this.btnLoadBackup_Click);
      this.btnCreateBackup.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnCreateBackup.Enabled = false;
      this.btnCreateBackup.Image = (Image) componentResourceManager.GetObject("btnCreateBackup.Image");
      this.btnCreateBackup.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnCreateBackup.Location = new Point(422, 64);
      this.btnCreateBackup.Name = "btnCreateBackup";
      this.btnCreateBackup.Size = new Size(186, 39);
      this.btnCreateBackup.TabIndex = 17;
      this.btnCreateBackup.Text = "Create backup";
      this.btnCreateBackup.UseVisualStyleBackColor = true;
      this.btnCreateBackup.Click += new System.EventHandler(this.btnSaveBackup_Click);
      this.txtBackupDeviceInfo.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtBackupDeviceInfo.BackColor = Color.White;
      this.txtBackupDeviceInfo.Font = new Font("Consolas", 8.25f);
      this.txtBackupDeviceInfo.Location = new Point(6, 21);
      this.txtBackupDeviceInfo.Multiline = true;
      this.txtBackupDeviceInfo.Name = "txtBackupDeviceInfo";
      this.txtBackupDeviceInfo.ReadOnly = true;
      this.txtBackupDeviceInfo.ScrollBars = ScrollBars.Vertical;
      this.txtBackupDeviceInfo.Size = new Size(410, 81);
      this.txtBackupDeviceInfo.TabIndex = 19;
      this.statusStrip.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.progress,
        (ToolStripItem) this.lblStatus
      });
      this.statusStrip.Location = new Point(0, 540);
      this.statusStrip.Name = "statusStrip";
      this.statusStrip.Size = new Size(784, 22);
      this.statusStrip.TabIndex = 22;
      this.statusStrip.Text = "statusStrip1";
      this.progress.Name = "progress";
      this.progress.Size = new Size(100, 16);
      this.progress.Step = 1;
      this.progress.Visible = false;
      this.lblStatus.Name = "lblStatus";
      this.lblStatus.Size = new Size(46, 17);
      this.lblStatus.Text = "{status}";
      this.zennerCoroprateDesign2.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.zennerCoroprateDesign2.Location = new Point(0, 24);
      this.zennerCoroprateDesign2.Margin = new Padding(2);
      this.zennerCoroprateDesign2.Name = "zennerCoroprateDesign2";
      this.zennerCoroprateDesign2.Size = new Size(782, 41);
      this.zennerCoroprateDesign2.TabIndex = 16;
      this.gboxWorkDevice.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.gboxWorkDevice.Controls.Add((Control) this.btnZoomWork);
      this.gboxWorkDevice.Controls.Add((Control) this.txtWorkDeviceInfo);
      this.gboxWorkDevice.Location = new Point(7, 432);
      this.gboxWorkDevice.Name = "gboxWorkDevice";
      this.gboxWorkDevice.Size = new Size(424, 102);
      this.gboxWorkDevice.TabIndex = 33;
      this.gboxWorkDevice.TabStop = false;
      this.gboxWorkDevice.Text = "Work device";
      this.btnZoomWork.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnZoomWork.Image = (Image) componentResourceManager.GetObject("btnZoomWork.Image");
      this.btnZoomWork.Location = new Point(372, 21);
      this.btnZoomWork.Name = "btnZoomWork";
      this.btnZoomWork.Size = new Size(23, 23);
      this.btnZoomWork.TabIndex = 20;
      this.btnZoomWork.UseVisualStyleBackColor = true;
      this.btnZoomWork.Click += new System.EventHandler(this.btnZoomWork_Click);
      this.txtWorkDeviceInfo.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtWorkDeviceInfo.BackColor = Color.White;
      this.txtWorkDeviceInfo.Font = new Font("Consolas", 8.25f);
      this.txtWorkDeviceInfo.Location = new Point(6, 18);
      this.txtWorkDeviceInfo.Multiline = true;
      this.txtWorkDeviceInfo.Name = "txtWorkDeviceInfo";
      this.txtWorkDeviceInfo.ReadOnly = true;
      this.txtWorkDeviceInfo.ScrollBars = ScrollBars.Vertical;
      this.txtWorkDeviceInfo.Size = new Size(410, 77);
      this.txtWorkDeviceInfo.TabIndex = 19;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(784, 562);
      this.Controls.Add((Control) this.gboxWorkDevice);
      this.Controls.Add((Control) this.gboxTypeDevice);
      this.Controls.Add((Control) this.btnClear);
      this.Controls.Add((Control) this.gboxConnectedDevice);
      this.Controls.Add((Control) this.groupBoxShowEditData);
      this.Controls.Add((Control) this.gboxBackupDevice);
      this.Controls.Add((Control) this.statusStrip);
      this.Controls.Add((Control) this.menuStrip);
      this.Controls.Add((Control) this.zennerCoroprateDesign2);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (PDC_HandlerWindow);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "PDC";
      this.FormClosing += new FormClosingEventHandler(this.PDC_HandlerWindow_FormClosing);
      this.Load += new System.EventHandler(this.PDC_HandlerWindow_Load);
      this.menuStrip.ResumeLayout(false);
      this.menuStrip.PerformLayout();
      this.gboxTypeDevice.ResumeLayout(false);
      this.gboxTypeDevice.PerformLayout();
      this.gboxConnectedDevice.ResumeLayout(false);
      this.gboxConnectedDevice.PerformLayout();
      this.groupBoxShowEditData.ResumeLayout(false);
      this.gboxBackupDevice.ResumeLayout(false);
      this.gboxBackupDevice.PerformLayout();
      this.statusStrip.ResumeLayout(false);
      this.statusStrip.PerformLayout();
      this.gboxWorkDevice.ResumeLayout(false);
      this.gboxWorkDevice.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- PDC_MemoryMap.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.PDC_MemoryMap
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using GmmDbLib;
using NLog;
using System;
using System.Collections.Generic;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class PDC_MemoryMap
  {
    private static Logger logger = LogManager.GetLogger(nameof (PDC_MemoryMap));
    public const ushort MAX_MEMORY_SIZE = 65535;
    private const byte MAX_BLOCK_SIZE_TO_WRITE = 64;
    private const byte MAX_BLOCK_SIZE_TO_READ = 178;
    private static string databaseUsedForCache = string.Empty;
    private static Dictionary<string, List<Parameter>> cachedParameters;
    private static Dictionary<string, RangeSet<ushort>> cachedRangesToRead;
    private byte[] memoryBytes = new byte[(int) ushort.MaxValue];
    private bool[] byteIsDefined = new bool[(int) ushort.MaxValue];

    public PDC_MemoryMap()
    {
      for (int index = 0; index < (int) ushort.MaxValue; ++index)
        this.memoryBytes[index] = byte.MaxValue;
    }

    public byte[] MemoryBytes => this.memoryBytes;

    internal PDC_MemoryMap DeepCopy()
    {
      return new PDC_MemoryMap()
      {
        byteIsDefined = this.byteIsDefined != null ? (bool[]) this.byteIsDefined.Clone() : (bool[]) null,
        memoryBytes = this.memoryBytes != null ? (byte[]) this.memoryBytes.Clone() : (byte[]) null
      };
    }

    internal void ResetMemoryMap()
    {
      for (int index = 0; index < (int) ushort.MaxValue; ++index)
      {
        if (this.byteIsDefined[index])
          this.byteIsDefined[index] = false;
        if (this.memoryBytes[index] != byte.MaxValue)
          this.memoryBytes[index] = byte.MaxValue;
      }
    }

    internal bool IsEmpty()
    {
      for (int index = 0; index < (int) ushort.MaxValue; ++index)
      {
        if (this.byteIsDefined[index])
          return false;
      }
      return true;
    }

    internal bool SetMemoryBytes(ushort address, byte[] buffer)
    {
      if (buffer == null)
        throw new ArgumentException("Can not set bytes to MAP! The 'buffer' is null.");
      if ((int) address + buffer.Length > (int) ushort.MaxValue)
        throw new ArgumentOutOfRangeException("Can not set bytes at the address: 0x" + address.ToString("X4"));
      Buffer.BlockCopy((Array) buffer, 0, (Array) this.memoryBytes, (int) address, buffer.Length);
      for (int index = 0; index < buffer.Length; ++index)
        this.byteIsDefined[(int) address + index] = true;
      return true;
    }

    public byte[] GetMemoryBytes(Parameter p)
    {
      if (p == null)
        throw new ArgumentNullException("Parameter 'p' can not be null!");
      return this.GetMemoryBytes(p.Address, p.Size);
    }

    internal byte[] GetMemoryBytes(ushort address, int size)
    {
      if (size <= 0)
        throw new ArgumentException("Invalid byte size!");
      byte[] dst = this.AreBytesDefined(address, size) ? new byte[size] : throw new ArgumentException("No bytes defined at the address: 0x" + address.ToString("X4") + ", Size: " + size.ToString());
      Buffer.BlockCopy((Array) this.memoryBytes, (int) address, (Array) dst, 0, size);
      return dst;
    }

    internal bool AreBytesDefined(ushort address, int size)
    {
      for (int index = (int) address; index < (int) address + size; ++index)
      {
        if (!this.byteIsDefined[index])
          return false;
      }
      return true;
    }

    internal SortedList<ushort, byte[]> GetChangedRamBlocks(
      DeviceVersion version,
      PDC_Meter sourceMeter)
    {
      if (version == null)
        throw new ArgumentNullException(nameof (version));
      PDC_MemoryMap.CacheParameter(version);
      if (!PDC_MemoryMap.ExistParameter(version))
        return (SortedList<ushort, byte[]>) null;
      SortedList<ushort, byte[]> changedRamBlocks = new SortedList<ushort, byte[]>();
      List<byte> byteList = new List<byte>(64);
      int key = -1;
      Parameter parameter1 = PDC_MemoryMap.cachedParameters[version.VersionString].Find((Predicate<Parameter>) (e => e.Name == "DATA_CONFIG"));
      if (parameter1 == null)
        return (SortedList<ushort, byte[]>) null;
      Parameter parameter2 = PDC_MemoryMap.cachedParameters[version.VersionString].Find((Predicate<Parameter>) (e => e.Name == "CSTACK"));
      if (parameter2 == null)
        return (SortedList<ushort, byte[]>) null;
      for (int address = (int) parameter1.Address; address < (int) parameter2.Address; ++address)
      {
        bool flag1 = this.byteIsDefined[address];
        bool flag2 = sourceMeter == null || (int) this.memoryBytes[address] != (int) sourceMeter.Map.memoryBytes[address];
        bool flag3 = byteList.Count == 0;
        if (!(!flag2 & flag3) && !(!flag1 & flag3))
        {
          if (!flag1 && !flag3)
            throw new Exception("INTERNAL ERROR: Invalid memory map!");
          if (key == -1)
            key = address;
          byteList.Add(this.memoryBytes[address]);
          bool flag4 = byteList.Count == 64;
          bool flag5 = address + 1 == this.memoryBytes.Length;
          bool flag6 = !flag5 && !this.byteIsDefined[address + 1];
          if (flag4 | flag5 | flag6)
          {
            for (int index = byteList.Count - 1; index >= 0 && sourceMeter != null && (int) byteList[index] == (int) sourceMeter.Map.memoryBytes[index + key]; --index)
              byteList.RemoveAt(index);
            changedRamBlocks.Add((ushort) key, byteList.ToArray());
            byteList.Clear();
            key = -1;
          }
        }
      }
      return changedRamBlocks;
    }

    internal SortedList<ushort, byte[]> GetChangedFlashBlocks(
      PDC_Meter sourceMeter,
      int segmentStartAddress,
      int segmentEndAddress,
      int sizeOfSegment,
      out List<ushort> segmentsToErase)
    {
      segmentsToErase = new List<ushort>();
      SortedList<ushort, byte[]> changedFlashBlocks = new SortedList<ushort, byte[]>();
      for (int address = segmentStartAddress; address < segmentEndAddress; address += sizeOfSegment)
      {
        if (!this.IsSegmentValid(address, sizeOfSegment))
          throw new Exception("Corrupt segment detected! Address: 0x" + address.ToString("X4"));
        if (this.IsSegmentDefined(address, sizeOfSegment) && !this.IsSegmentEmpty(address, sizeOfSegment))
        {
          for (int index = address; index < address + sizeOfSegment; ++index)
          {
            if (sourceMeter == null || (int) this.memoryBytes[index] != (int) sourceMeter.Map.memoryBytes[index])
            {
              segmentsToErase.Add((ushort) address);
              break;
            }
          }
        }
      }
      if (segmentsToErase.Count == 0)
        return (SortedList<ushort, byte[]>) null;
      List<byte> byteList = new List<byte>(64);
      int key = -1;
      for (int index = (int) segmentsToErase[0]; index < (int) segmentsToErase[segmentsToErase.Count - 1] + sizeOfSegment; ++index)
      {
        if (this.byteIsDefined[index] && !(this.memoryBytes[index] == byte.MaxValue & byteList.Count == 0))
        {
          if (key == -1)
          {
            if (index % 2 != 0)
            {
              if (!this.byteIsDefined[index])
                throw new Exception("Invalid segment detected! Address" + index.ToString());
              --index;
            }
            key = index;
          }
          byteList.Add(this.memoryBytes[index]);
          bool flag1 = byteList.Count == 64;
          bool flag2 = index + 1 == (int) segmentsToErase[segmentsToErase.Count - 1] + sizeOfSegment;
          bool flag3 = !flag2 && !this.byteIsDefined[index + 1];
          if (flag1 | flag2 | flag3)
          {
            changedFlashBlocks.Add((ushort) key, byteList.ToArray());
            byteList.Clear();
            key = -1;
          }
        }
      }
      return changedFlashBlocks;
    }

    private bool IsSegmentEmpty(int address, int sizeOfSegment)
    {
      for (int index = address; index < address + sizeOfSegment; ++index)
      {
        if (this.memoryBytes[index] != byte.MaxValue)
          return false;
      }
      return true;
    }

    private bool IsSegmentDefined(int address, int sizeOfSegment)
    {
      for (int index = address; index < address + sizeOfSegment; ++index)
      {
        if (!this.byteIsDefined[index])
          return false;
      }
      return true;
    }

    private bool IsSegmentValid(int address, int sizeOfSegment)
    {
      if (address % sizeOfSegment != 0)
        return false;
      bool flag = this.byteIsDefined[address];
      for (int index = address; index < address + sizeOfSegment; ++index)
      {
        if (this.byteIsDefined[index] != flag)
          return false;
      }
      return true;
    }

    internal byte[] Zip(DeviceVersion version)
    {
      if (version == null)
        return (byte[]) null;
      byte[] numArray1 = new byte[1]{ (byte) 1 };
      byte[] bytes = version.GetBytes();
      byte[] numArray2 = Util.ConvertAll<bool, byte>(this.byteIsDefined, new Converter<bool, byte>(Convert.ToByte));
      byte[] memoryBytes = this.memoryBytes;
      byte[] buffer = new byte[1 + bytes.Length + 131070];
      numArray1.CopyTo((Array) buffer, 0);
      bytes.CopyTo((Array) buffer, numArray1.Length);
      numArray2.CopyTo((Array) buffer, numArray1.Length + bytes.Length);
      memoryBytes.CopyTo((Array) buffer, numArray1.Length + bytes.Length + numArray2.Length);
      return Util.Zip(buffer);
    }

    internal bool Unzip(byte[] buffer, out DeviceVersion version)
    {
      version = (DeviceVersion) null;
      if (buffer == null)
        return false;
      byte[] numArray1 = Util.Unzip(buffer);
      if (numArray1 == null || numArray1.Length != 131089 || numArray1[0] != (byte) 1)
        return false;
      int offset = 1;
      version = DeviceVersion.Parse(numArray1, ref offset);
      if (version == null)
        return false;
      byte[] numArray2 = new byte[(int) ushort.MaxValue];
      Buffer.BlockCopy((Array) numArray1, offset, (Array) numArray2, 0, numArray2.Length);
      this.byteIsDefined = Util.ConvertAll<byte, bool>(numArray2, new Converter<byte, bool>(Convert.ToBoolean));
      Buffer.BlockCopy((Array) numArray1, offset + (int) ushort.MaxValue, (Array) this.memoryBytes, 0, this.memoryBytes.Length);
      return true;
    }

    internal static void CacheParameter(DeviceVersion version)
    {
      if (version == null)
        throw new ArgumentNullException(nameof (version));
      PDC_MemoryMap.CheckCache();
      if (PDC_MemoryMap.cachedParameters != null && PDC_MemoryMap.cachedParameters.ContainsKey(version.VersionString))
        return;
      if (PDC_MemoryMap.cachedParameters == null)
        PDC_MemoryMap.cachedParameters = new Dictionary<string, List<Parameter>>();
      lock (PDC_MemoryMap.cachedParameters)
      {
        if (PDC_MemoryMap.cachedParameters.ContainsKey(version.VersionString))
          return;
        List<Parameter> parameterList = PDC_Database.LoadParameter(version);
        if (parameterList != null)
          PDC_MemoryMap.cachedParameters.Add(version.VersionString, parameterList);
        PDC_MemoryMap.SaveDatabaseUsedForCache();
      }
    }

    internal static bool ExistParameter(DeviceVersion version)
    {
      if (version == null)
        throw new ArgumentNullException(nameof (version));
      return PDC_MemoryMap.cachedParameters != null && PDC_MemoryMap.cachedParameters.ContainsKey(version.VersionString);
    }

    public static List<Parameter> GetParameter(DeviceVersion version)
    {
      if (version == null)
        throw new ArgumentNullException(nameof (version));
      PDC_MemoryMap.CacheParameter(version);
      return !PDC_MemoryMap.ExistParameter(version) ? (List<Parameter>) null : PDC_MemoryMap.cachedParameters[version.VersionString];
    }

    internal static Parameter GetParameter(DeviceVersion version, string name)
    {
      return PDC_MemoryMap.GetParameter(version)?.Find((Predicate<Parameter>) (e => e.Name == name));
    }

    internal static Parameter GetParameter(DeviceVersion version, ushort address)
    {
      return PDC_MemoryMap.GetParameter(version)?.Find((Predicate<Parameter>) (e => (int) e.Address == (int) address));
    }

    internal static RangeSet<ushort> GetMemoryBlocksToRead(DeviceVersion version)
    {
      if (version == null)
        throw new ArgumentNullException(nameof (version));
      PDC_MemoryMap.CacheParameter(version);
      if (!PDC_MemoryMap.ExistParameter(version))
        return (RangeSet<ushort>) null;
      string versionString = version.VersionString;
      PDC_MemoryMap.CheckCache();
      Parameter parameter1 = PDC_MemoryMap.cachedParameters[version.VersionString].Find((Predicate<Parameter>) (e => e.Name == "INFOA"));
      if (parameter1 == null)
        throw new Exception("INTERNAL ERROR: Invalid MAP file! Can not find the parameter INFOA.");
      Parameter parameter2 = PDC_MemoryMap.cachedParameters[version.VersionString].Find((Predicate<Parameter>) (e => e.Name == "PARAM_CONST_LIST"));
      if (parameter2 == null)
        throw new Exception("INTERNAL ERROR: Invalid MAP file! Can not find the parameter PARAM_CONST_LIST.");
      if (PDC_MemoryMap.cachedRangesToRead != null && PDC_MemoryMap.cachedRangesToRead.ContainsKey(versionString))
        return PDC_MemoryMap.cachedRangesToRead[versionString];
      if (PDC_MemoryMap.cachedRangesToRead == null)
        PDC_MemoryMap.cachedRangesToRead = new Dictionary<string, RangeSet<ushort>>();
      bool[] points = new bool[(int) ushort.MaxValue];
      for (int index = 0; index < points.Length; ++index)
        points[index] = false;
      foreach (Parameter parameter3 in PDC_MemoryMap.cachedParameters[version.VersionString])
      {
        if (parameter3.Type != S3_VariableTypes.Address)
        {
          for (int address = (int) parameter3.Address; address < (int) parameter3.Address + parameter3.Size; ++address)
            points[address] = true;
        }
      }
      for (int address = (int) parameter1.Address; address < (int) parameter1.Address + 128; ++address)
        points[address] = true;
      for (int address = (int) parameter2.Address; address < (int) parameter2.Address + 1024; ++address)
        points[address] = true;
      RangeSet<ushort> rangeSet = PDC_MemoryMap.ConvertBoolArrayToRangeSet(points);
      if (rangeSet == null)
        return (RangeSet<ushort>) null;
      PDC_MemoryMap.cachedRangesToRead.Add(versionString, rangeSet);
      PDC_MemoryMap.SaveDatabaseUsedForCache();
      return rangeSet;
    }

    public static RangeSet<ushort> ConvertBoolArrayToRangeSet(bool[] points)
    {
      RangeSet<ushort> rangeSet = new RangeSet<ushort>();
      ushort startRange = 0;
      ushort endRange = 0;
      for (ushort index = 0; (int) index < points.Length; ++index)
      {
        if (points[(int) index])
        {
          if (startRange == (ushort) 0)
          {
            startRange = (int) index % 2 == 0 ? index : (ushort) ((int) index - 1);
            endRange = startRange;
          }
          int num = (int) index - (int) startRange;
          if (num % 2 != 0)
            ++num;
          if (num >= 178)
          {
            if ((int) endRange % 2 == 0)
              ++endRange;
            rangeSet.Add(startRange, endRange);
            startRange = (int) index % 2 == 0 ? index : (ushort) ((int) index - 1);
          }
          endRange = index;
        }
        if ((int) index + 1 == points.Length && startRange > (ushort) 0)
        {
          if ((uint) endRange % 2U > 0U)
            ++endRange;
          rangeSet.Add(startRange, endRange);
        }
      }
      return rangeSet;
    }

    internal int GetDefinedBytesCount()
    {
      int definedBytesCount = 0;
      for (int index = 0; index < this.byteIsDefined.Length; ++index)
      {
        if (this.byteIsDefined[index])
          ++definedBytesCount;
      }
      return definedBytesCount;
    }

    private static void CheckCache()
    {
      if (!string.IsNullOrEmpty(PDC_MemoryMap.databaseUsedForCache) && DbBasis.PrimaryDB != null && !(DbBasis.PrimaryDB.ConnectionString != PDC_MemoryMap.databaseUsedForCache))
        return;
      if (PDC_MemoryMap.cachedParameters != null)
        PDC_MemoryMap.cachedParameters.Clear();
      if (PDC_MemoryMap.cachedRangesToRead != null)
        PDC_MemoryMap.cachedRangesToRead.Clear();
      PDC_MemoryMap.databaseUsedForCache = string.Empty;
    }

    private static void SaveDatabaseUsedForCache()
    {
      if (string.IsNullOrEmpty(PDC_MemoryMap.databaseUsedForCache))
        PDC_MemoryMap.databaseUsedForCache = DbBasis.PrimaryDB.ConnectionString;
      else if (PDC_MemoryMap.databaseUsedForCache != DbBasis.PrimaryDB.ConnectionString)
        throw new Exception("INTERNAL ERROR: Wrong state of the handler detected! The cached objects are not of the same database source. Cached objects in handler use: " + PDC_MemoryMap.databaseUsedForCache + Environment.NewLine + " Actual database is: " + DbBasis.PrimaryDB.ConnectionString);
    }
  }
}


--- PDC_Meter.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.PDC_Meter
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using DeviceCollector;
using GmmDbLib;
using HandlerLib;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Text;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class PDC_Meter : IMeter
  {
    private static Logger logger = LogManager.GetLogger(nameof (PDC_Meter));
    private readonly byte[] EMPTY_AES_KEY = new byte[16]
    {
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue,
      byte.MaxValue
    };
    public const int COL_INDEX_VALUE_NAME_KEY = 1;
    public const int COL_INDEX_VALUE_NAME = 2;
    public const int COL_INDEX_VALUE_SIZE = 3;
    public const int COL_INDEX_VALUE_TYPE = 4;
    public const int COL_INDEX_VALUE_ADDRESS_HEX = 5;
    public const int COL_INDEX_VALUE_HEX = 6;
    public const int COL_INDEX_VALUE_DEC = 7;
    public const int COL_INDEX_VALUE_DIF_VIF = 8;

    public PDC_Meter(PDC_MemoryMap map)
    {
      this.Map = map;
      this.DBDeviceInfo = new DatabaseDeviceInfo();
    }

    public DeviceVersion Version { get; set; }

    public DatabaseDeviceInfo DBDeviceInfo { get; set; }

    public PDC_MemoryMap Map { get; private set; }

    public PDC_Meter DeepCopy()
    {
      return new PDC_Meter(this.Map.DeepCopy())
      {
        DBDeviceInfo = this.DBDeviceInfo != null ? this.DBDeviceInfo.DeepCopy() : (DatabaseDeviceInfo) null,
        Map = this.Map != null ? this.Map.DeepCopy() : (PDC_MemoryMap) null,
        Version = this.Version != null ? this.Version.DeepCopy() : (DeviceVersion) null
      };
    }

    public DataTable CreateParameterTable()
    {
      DataTable parameterTable = new DataTable();
      parameterTable.Columns.Add("#", typeof (int));
      parameterTable.Columns.Add("Key", typeof (string));
      parameterTable.Columns.Add("Name", typeof (string));
      parameterTable.Columns.Add("Bytes", typeof (int));
      parameterTable.Columns.Add("Type", typeof (S3_VariableTypes));
      parameterTable.Columns.Add("Address", typeof (string));
      parameterTable.Columns.Add("Value Hex", typeof (string));
      parameterTable.Columns.Add("Value Dec", typeof (object));
      parameterTable.Columns.Add("DifVif", typeof (string));
      List<Parameter> parameter = PDC_MemoryMap.GetParameter(this.Version);
      if (parameter == null)
        return (DataTable) null;
      foreach (Parameter p in parameter)
      {
        string str1 = Ot.GetTranslatedLanguageText("S3ParaName", p.Name);
        string str2 = string.Empty;
        object obj = (object) null;
        if (p.Type != S3_VariableTypes.Address)
        {
          byte[] memoryBytes = this.Map.GetMemoryBytes(p);
          str2 = Util.ByteArrayToHexString(memoryBytes);
          try
          {
            switch (p.Type)
            {
              case S3_VariableTypes.INT8:
                obj = (object) ((((int) memoryBytes[0] & 128) == 128 ? -1 : 1) * ((int) memoryBytes[0] & (int) sbyte.MaxValue));
                break;
              case S3_VariableTypes.UINT8:
                obj = (object) memoryBytes[0];
                break;
              case S3_VariableTypes.UINT16:
                obj = (object) BitConverter.ToUInt16(memoryBytes, 0);
                break;
              case S3_VariableTypes.INT16:
                obj = (object) BitConverter.ToInt16(memoryBytes, 0);
                break;
              case S3_VariableTypes.UINT32:
                obj = (object) BitConverter.ToUInt32(memoryBytes, 0);
                break;
              case S3_VariableTypes.INT32:
                obj = (object) BitConverter.ToInt32(memoryBytes, 0);
                break;
              case S3_VariableTypes.REAL32:
                obj = (object) BitConverter.ToSingle(memoryBytes, 0);
                break;
              case S3_VariableTypes.INT64:
                obj = (object) BitConverter.ToInt64(memoryBytes, 0);
                break;
              case S3_VariableTypes.UINT64:
                obj = (object) BitConverter.ToUInt64(memoryBytes, 0);
                break;
              case S3_VariableTypes.REAL64:
                obj = (object) BitConverter.ToDouble(memoryBytes, 0);
                break;
              case S3_VariableTypes.MeterTime1980:
                obj = (object) ZR_Calendar.Cal_GetDateTime(BitConverter.ToUInt32(memoryBytes, 0));
                break;
              case S3_VariableTypes.Address:
                obj = (object) string.Empty;
                break;
              case S3_VariableTypes.ByteArray:
                obj = (object) string.Empty;
                break;
              default:
                obj = (object) "???";
                break;
            }
          }
          catch (Exception ex)
          {
            throw new Exception("Can not convert parameter: " + p?.ToString(), ex);
          }
        }
        if (str1 == "S3ParaName" + p.Name)
          str1 = string.Empty;
        parameterTable.Rows.Add((object) parameter.IndexOf(p), (object) p.Name, (object) str1, (object) (p.Type != S3_VariableTypes.Address ? p.Size : 0), (object) p.Type, (object) ("0x" + p.Address.ToString("X4")), (object) str2, obj, (object) p.DifVif);
      }
      return parameterTable;
    }

    public override string ToString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      int totalWidth = 60;
      int num = 37;
      if (this.Version == null || this.Map == null)
        return string.Empty;
      try
      {
        PDC_MemoryMap.CacheParameter(this.Version);
        if (!PDC_MemoryMap.ExistParameter(this.Version))
          return "No MAP available into database! Version: " + this.Version?.ToString();
        string serialnumberFull = this.GetSerialnumberFull();
        if (!string.IsNullOrEmpty(serialnumberFull))
          stringBuilder.Append("Full serial number: ".PadRight(num, ' ')).AppendLine(serialnumberFull);
        else
          stringBuilder.Append("Full serial number: ".PadRight(num, ' ')).AppendLine("null");
        stringBuilder.AppendLine(this.Version.ToString(num));
        if (this.DBDeviceInfo.HardwareType != null)
        {
          stringBuilder.AppendLine("Database Hardware Info ".PadRight(totalWidth, '-'));
          stringBuilder.AppendLine(this.DBDeviceInfo.HardwareType.ToString(num));
        }
        if (this.DBDeviceInfo.MeterInfo != null)
        {
          stringBuilder.AppendLine("Database Meter Info ".PadRight(totalWidth, '-'));
          stringBuilder.AppendLine(this.DBDeviceInfo.MeterInfo.ToString(num));
        }
        DeviceIdentification deviceIdentification = this.GetDeviceIdentification();
        if (deviceIdentification != null)
        {
          stringBuilder.AppendLine("Device Identification ".PadRight(totalWidth, '-'));
          stringBuilder.AppendLine(deviceIdentification.ToString(num));
        }
        else
        {
          stringBuilder.AppendLine("Device Identification ".PadRight(totalWidth, '-'));
          stringBuilder.AppendLine("not defined");
        }
        stringBuilder.AppendLine("Parameter ".PadRight(totalWidth, '-'));
        foreach (Parameter parameter in PDC_MemoryMap.GetParameter(this.Version))
        {
          if (parameter.Type != S3_VariableTypes.Address)
          {
            if (!this.Map.AreBytesDefined(parameter.Address, parameter.Size))
            {
              stringBuilder.Append(parameter.Name.PadRight(num, ' ')).AppendLine("!!!!!! NOT AVAILABLE !!!!!!");
            }
            else
            {
              byte[] parameterValue = this.GetParameterValue<byte[]>(parameter.Name);
              if (parameterValue != null)
              {
                stringBuilder.Append(parameter.Name.PadRight(num, ' '));
                for (int index = parameterValue.Length - 1; index >= 0; --index)
                  stringBuilder.Append(parameterValue[index].ToString("X2"));
                stringBuilder.AppendLine();
              }
              else
                stringBuilder.Append(parameter.Name.PadRight(num, ' ')).AppendLine(" ERROR ");
            }
          }
        }
        stringBuilder.Append("Read ").Append(this.Map.GetDefinedBytesCount().ToString()).AppendLine(" bytes.");
      }
      catch (Exception ex)
      {
        stringBuilder.AppendLine("INTERNAL ERROR: ").AppendLine(ex.Message);
      }
      return stringBuilder.ToString();
    }

    public SortedList<ushort, byte[]> GetChangedRamBlocks(PDC_Meter sourceMeter)
    {
      return this.Map.GetChangedRamBlocks(this.Version, sourceMeter);
    }

    public SortedList<ushort, byte[]> GetChangedFlashBlocks(
      PDC_Meter sourceMeter,
      out List<ushort> segmentsToErase)
    {
      segmentsToErase = (List<ushort>) null;
      SortedList<ushort, byte[]> changedFlashBlocks1 = new SortedList<ushort, byte[]>();
      List<ushort> ushortList = new List<ushort>();
      Parameter parameter = this.GetParameter("INFOA");
      if (parameter == null)
        throw new Exception("INTERNAL ERROR: Invalid MAP file! Can not find the parameter INFOA.");
      if (this.GetParameter("PARAM_CONST_LIST") == null)
        throw new Exception("INTERNAL ERROR: Invalid MAP file! Can not find the parameter PARAM_CONST_LIST.");
      SortedList<ushort, byte[]> changedFlashBlocks2 = this.Map.GetChangedFlashBlocks(sourceMeter, (int) parameter.Address, (int) parameter.Address + 128, 128, out segmentsToErase);
      if (changedFlashBlocks2 != null)
      {
        foreach (KeyValuePair<ushort, byte[]> keyValuePair in changedFlashBlocks2)
          changedFlashBlocks1.Add(keyValuePair.Key, keyValuePair.Value);
        ushortList.AddRange((IEnumerable<ushort>) segmentsToErase);
      }
      SortedList<ushort, byte[]> changedFlashBlocks3 = this.Map.GetChangedFlashBlocks(sourceMeter, 32768, 4991, 512, out segmentsToErase);
      if (changedFlashBlocks3 != null)
      {
        foreach (KeyValuePair<ushort, byte[]> keyValuePair in changedFlashBlocks3)
          changedFlashBlocks1.Add(keyValuePair.Key, keyValuePair.Value);
        ushortList.AddRange((IEnumerable<ushort>) segmentsToErase);
      }
      segmentsToErase = ushortList;
      return changedFlashBlocks1;
    }

    public Parameter GetParameter(string parameterName)
    {
      return string.IsNullOrEmpty(parameterName) || !PDC_MemoryMap.ExistParameter(this.Version) ? (Parameter) null : PDC_MemoryMap.GetParameter(this.Version, parameterName);
    }

    public T GetParameterValue<T>(string parameterName)
    {
      PDC_MemoryMap.CacheParameter(this.Version);
      if (!PDC_MemoryMap.ExistParameter(this.Version))
        throw new ArgumentException("The map file info is not available into database for this firmware! Version: " + this.Version?.ToString());
      Parameter parameter = this.GetParameter(parameterName);
      if (parameter == null)
        throw new ArgumentException("Access of an unknown parameter! Name: " + parameterName);
      if (!this.Map.AreBytesDefined(parameter.Address, parameter.Size))
        throw new ArgumentException("No bytes are available at this address! Parameter name: " + parameterName);
      if (typeof (T) == typeof (short))
        return (T) (System.ValueType) BitConverter.ToInt16(this.Map.GetMemoryBytes(parameter), 0);
      if (typeof (T) == typeof (ushort))
        return (T) (System.ValueType) BitConverter.ToUInt16(this.Map.GetMemoryBytes(parameter), 0);
      if (typeof (T) == typeof (byte))
        return (T) (System.ValueType) this.Map.GetMemoryBytes(parameter)[0];
      if (typeof (T) == typeof (sbyte))
        return (T) (System.ValueType) (sbyte) this.Map.GetMemoryBytes(parameter)[0];
      if (typeof (T) == typeof (byte[]))
        return (T) this.Map.GetMemoryBytes(parameter);
      if (typeof (T) == typeof (uint))
        return (T) (System.ValueType) BitConverter.ToUInt32(this.Map.GetMemoryBytes(parameter), 0);
      if (typeof (T) == typeof (int))
        return (T) (System.ValueType) BitConverter.ToInt32(this.Map.GetMemoryBytes(parameter), 0);
      if (typeof (T) == typeof (ulong))
        return (T) (System.ValueType) BitConverter.ToUInt64(this.Map.GetMemoryBytes(parameter), 0);
      if (typeof (T) == typeof (long))
        return (T) (System.ValueType) BitConverter.ToInt64(this.Map.GetMemoryBytes(parameter), 0);
      if (!(typeof (T) == typeof (DateTime)))
        throw new NotImplementedException("INTERNAL ERROR: Can not cast the Value. The type is not implemented. Type: " + typeof (T)?.ToString());
      byte[] memoryBytes = this.Map.GetMemoryBytes(parameter);
      byte num = memoryBytes[0];
      byte month = memoryBytes[1];
      byte day = memoryBytes[2];
      byte hour = memoryBytes[3];
      byte minute = memoryBytes[4];
      byte second = memoryBytes[5];
      if (num == byte.MaxValue || month == byte.MaxValue || day == byte.MaxValue || hour == byte.MaxValue || minute == byte.MaxValue || second == byte.MaxValue)
        return (T) (System.ValueType) PDC_HandlerFunctions.DateTimeNull;
      if (num > byte.MaxValue || month > (byte) 12 || day > (byte) 31 || minute > (byte) 59 || second > (byte) 59)
        return (T) (System.ValueType) PDC_HandlerFunctions.DateTimeNull;
      try
      {
        return (T) (System.ValueType) new DateTime(2000 + (int) num, (int) month, (int) day, (int) hour, (int) minute, (int) second);
      }
      catch
      {
        return (T) (System.ValueType) PDC_HandlerFunctions.DateTimeNull;
      }
    }

    public bool SetParameterValue<T>(string parameterName, T newValue)
    {
      CultureInfo invariantCulture = CultureInfo.InvariantCulture;
      Parameter parameter = this.GetParameter(parameterName);
      if (parameter == null)
        throw new ArgumentException("Access of an unknown parameter! Name: " + parameterName);
      if (!this.Map.AreBytesDefined(parameter.Address, parameter.Size))
        throw new ArgumentException("No bytes are available at this address! Parameter name: " + parameterName);
      if (typeof (T) == typeof (short))
      {
        byte[] bytes = BitConverter.GetBytes((short) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture));
        return this.Map.SetMemoryBytes(parameter.Address, bytes);
      }
      if (typeof (T) == typeof (ushort))
      {
        byte[] bytes = BitConverter.GetBytes((ushort) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture));
        return this.Map.SetMemoryBytes(parameter.Address, bytes);
      }
      if (typeof (T) == typeof (int))
      {
        byte[] bytes = BitConverter.GetBytes((int) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture));
        return this.Map.SetMemoryBytes(parameter.Address, bytes);
      }
      if (typeof (T) == typeof (uint))
      {
        byte[] bytes = BitConverter.GetBytes((uint) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture));
        return this.Map.SetMemoryBytes(parameter.Address, bytes);
      }
      if (typeof (T) == typeof (byte))
      {
        byte num = (byte) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture);
        return this.Map.SetMemoryBytes(parameter.Address, new byte[1]
        {
          num
        });
      }
      if (typeof (T) == typeof (sbyte))
      {
        sbyte num = (sbyte) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture);
        return this.Map.SetMemoryBytes(parameter.Address, new byte[1]
        {
          (byte) num
        });
      }
      if (typeof (T) == typeof (byte[]))
      {
        byte[] buffer = (byte[]) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture);
        return this.Map.SetMemoryBytes(parameter.Address, buffer);
      }
      if (typeof (T) == typeof (long))
      {
        byte[] bytes = BitConverter.GetBytes((long) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture));
        return this.Map.SetMemoryBytes(parameter.Address, bytes);
      }
      if (typeof (T) == typeof (ulong))
      {
        byte[] bytes = BitConverter.GetBytes((ulong) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture));
        return this.Map.SetMemoryBytes(parameter.Address, bytes);
      }
      if (!(typeof (T) == typeof (DateTime)))
        throw new NotImplementedException("INTERNAL ERROR: Can not convert value to byte array. The type is not implemented. Type: " + typeof (T)?.ToString());
      DateTime dateTime = (DateTime) Convert.ChangeType((object) newValue, typeof (T), (IFormatProvider) invariantCulture);
      if (dateTime.Year < 2000)
        throw new ArgumentOutOfRangeException("Invalid date time! The year should be greater or equal to 2000. Value: " + dateTime.ToString("G"));
      if (dateTime.Year > 2255)
        throw new ArgumentOutOfRangeException("Invalid date time! The year should be smaller as 2255. Value: " + dateTime.ToString("G"));
      byte[] buffer1 = new byte[6]
      {
        (byte) (dateTime.Year - 2000),
        (byte) dateTime.Month,
        (byte) dateTime.Day,
        (byte) dateTime.Hour,
        (byte) dateTime.Minute,
        (byte) dateTime.Second
      };
      return this.Map.SetMemoryBytes(parameter.Address, buffer1);
    }

    private bool SetBit<T>(string parameterName, T mask) where T : struct
    {
      return this.ChangeBit(parameterName, true, PDC_Meter.GetBytes<T>(mask));
    }

    private bool ClearBit<T>(string parameterName, T mask) where T : struct
    {
      return this.ChangeBit(parameterName, false, PDC_Meter.GetBytes<T>(mask));
    }

    private bool ChangeBit(string parameterName, bool isSet, byte[] mask)
    {
      Parameter parameter = this.GetParameter(parameterName);
      if (parameter == null)
        throw new ArgumentException("Access of an unknown parameter! Name: " + parameterName);
      if (parameter.Size != mask.Length)
        throw new ArgumentException("Invalid size! Name: " + parameterName);
      byte[] memoryBytes = this.Map.GetMemoryBytes(parameter);
      if (memoryBytes == null)
        return false;
      for (int index = 0; index < memoryBytes.Length; ++index)
      {
        if (isSet)
          memoryBytes[index] |= mask[index];
        else
          memoryBytes[index] &= ~mask[index];
      }
      this.Map.SetMemoryBytes(parameter.Address, memoryBytes);
      return true;
    }

    private bool GetBit<T>(string parameterName, T mask) where T : struct
    {
      return this.GetBit(parameterName, PDC_Meter.GetBytes<T>(mask));
    }

    private bool GetBit(string parameterName, byte[] mask)
    {
      Parameter parameter = this.GetParameter(parameterName);
      if (parameter == null)
        throw new ArgumentException("Access of an unknown parameter! Name: " + parameterName);
      if (parameter.Size != mask.Length)
        throw new ArgumentException("Invalid size! Name: " + parameterName);
      byte[] memoryBytes = this.Map.GetMemoryBytes(parameter);
      if (memoryBytes == null)
        return false;
      for (int index = 0; index < memoryBytes.Length; ++index)
      {
        if (mask[index] != (byte) 0 && (int) (byte) ((uint) memoryBytes[index] & (uint) mask[index]) == (int) mask[index])
          return true;
      }
      return false;
    }

    private static byte[] GetBytes<T>(T type) where T : struct
    {
      if (typeof (T) == typeof (byte))
        return new byte[1]{ Convert.ToByte((object) type) };
      if (typeof (T) == typeof (ushort))
        return BitConverter.GetBytes(Convert.ToUInt16((object) type));
      throw new NotImplementedException("INTERNAL ERROR: Can not get bytes of the generic type. The type is not implemented. Type: " + typeof (T)?.ToString());
    }

    public byte[] Zip() => this.Map.Zip(this.Version);

    public static bool IsValidZipBuffer(byte[] buffer)
    {
      if (buffer == null)
        return false;
      PDC_MemoryMap pdcMemoryMap = new PDC_MemoryMap();
      try
      {
        if (!pdcMemoryMap.Unzip(buffer, out DeviceVersion _))
          return false;
        if (pdcMemoryMap.IsEmpty())
          return false;
      }
      catch
      {
        return false;
      }
      return true;
    }

    public static PDC_Meter Unzip(byte[] buffer)
    {
      if (buffer == null)
        throw new ArgumentNullException("The parameter 'buffer' can not be null!");
      PDC_MemoryMap map = new PDC_MemoryMap();
      DeviceVersion version;
      if (!map.Unzip(buffer, out version))
        throw new Exception("Can not unzip MAP file!");
      PDC_Meter pdcMeter = !map.IsEmpty() ? new PDC_Meter(map) : throw new Exception("The MAP is empty!");
      pdcMeter.Version = version;
      DeviceIdentification deviceIdentification = pdcMeter.GetDeviceIdentification();
      if (deviceIdentification != null && deviceIdentification.IsChecksumOK)
      {
        pdcMeter.DBDeviceInfo.MeterInfo = PDC_Database.GetMeterInfo(deviceIdentification.MeterInfoID);
        pdcMeter.DBDeviceInfo.HardwareType = MeterDatabase.GetHardwareType((int) version.HardwareTypeID);
      }
      return pdcMeter;
    }

    public bool Overwrite(PDC_Meter meter, OverwritePart parts)
    {
      if (meter == null)
        throw new ArgumentException("Overwrite failed! Input parameter 'meter' is null.");
      if (meter.Version.Type != this.Version.Type)
        throw new ArgumentException("Overwrite failed! Wrong device type. Actual: " + meter.Version.Type.ToString() + ", Expected: " + this.Version.Type.ToString());
      return ((parts & OverwritePart.TypeIdentification) != OverwritePart.TypeIdentification || this.OverwriteTypeIdentification(meter)) && ((parts & OverwritePart.RadioSettings) != OverwritePart.RadioSettings || this.OverwriteRadioSettings(meter)) && ((parts & OverwritePart.DeviceSettings) != OverwritePart.DeviceSettings || this.OverwriteDeviceSettings(meter)) && ((parts & OverwritePart.Constants) != OverwritePart.Constants || this.OverwriteConstants(meter));
    }

    private bool OverwriteTypeIdentification(PDC_Meter meter)
    {
      DeviceIdentification deviceIdentification = meter != null ? meter.GetDeviceIdentification() : throw new ArgumentException("Failed overwrite type identification! Input parameter 'meter' is null.");
      if (deviceIdentification == null)
        throw new Exception("Failed overwrite type identification! Identification block of the base type is null.");
      DeviceIdentification ident = this.GetDeviceIdentification() ?? new DeviceIdentification();
      ident.HardwareTypeID = deviceIdentification.HardwareTypeID;
      ident.MeterInfoID = deviceIdentification.MeterInfoID;
      ident.BaseTypeID = deviceIdentification.BaseTypeID;
      ident.MeterTypeID = deviceIdentification.MeterTypeID;
      ident.SapMaterialNumber = deviceIdentification.SapMaterialNumber;
      ident.SapProductionOrderNumber = deviceIdentification.SapProductionOrderNumber;
      if (ident.MeterID == 0U || ident.MeterID == uint.MaxValue)
      {
        int? nextUniqueId = MeterDatabase.GetNextUniqueID("Meter", "MeterID");
        if (!nextUniqueId.HasValue)
          throw new Exception("Failed overwrite type identification! Can not get new MeterID from database.");
        ident.MeterID = MeterDatabase.SetNextUniqueID("Meter", "MeterID", nextUniqueId.Value + 1) ? (uint) nextUniqueId.Value : throw new Exception("Failed overwrite type identification! Can not set new MeterID to database.");
      }
      if (!this.SetDeviceIdentification(ident) || !this.SetManufacturerPDC(meter.GetManufacturerPDC()) || !this.SetManufacturerInputA(meter.GetManufacturerInputA()) || !this.SetManufacturerInputB(meter.GetManufacturerInputB()))
        return false;
      MBusDeviceType? nullable1 = meter.GetMediumPDC();
      if (!this.SetMediumPDC(nullable1.Value))
        return false;
      nullable1 = meter.GetMediumInputA();
      if (!this.SetMediumInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetMediumInputB();
      if (!this.SetMediumInputB(nullable1.Value))
        return false;
      byte? nullable2 = meter.GetVIFInputA();
      if (!this.SetVIFInputA(nullable2.Value))
        return false;
      nullable2 = meter.GetVIFInputB();
      if (!this.SetVIFInputB(nullable2.Value))
        return false;
      nullable2 = meter.GetMBusGenerationPDC();
      if (!this.SetMBusGenerationPDC(nullable2.Value))
        return false;
      nullable2 = meter.GetMBusGenerationInputA();
      if (!this.SetMBusGenerationInputA(nullable2.Value))
        return false;
      nullable2 = meter.GetMBusGenerationInputB();
      if (!this.SetMBusGenerationInputB(nullable2.Value))
        return false;
      nullable2 = meter.GetMBusAddressPDC();
      if (!this.SetMBusAddressPDC(nullable2.Value))
        return false;
      nullable2 = meter.GetMBusAddressInputA();
      if (!this.SetMBusAddressInputA(nullable2.Value))
        return false;
      nullable2 = meter.GetMBusAddressInputB();
      return this.SetMBusAddressInputB(nullable2.Value) && this.SetObisPDC(meter.GetObisPDC()) && this.SetObisInputA(meter.GetObisInputA()) && this.SetObisInputB(meter.GetObisInputB());
    }

    private bool OverwriteRadioSettings(PDC_Meter meter)
    {
      if (meter == null)
        return false;
      if (meter.Version.Type == PDC_DeviceIdentity.PDC_WmBus)
      {
        if (!this.SetRadioFlagsPDCwMBus(meter.GetRadioFlagsPDCwMBus().Value) || !this.SetRadioMode(meter.GetRadioMode().Value) || !this.SetRadioPower(meter.GetRadioPower().Value))
          return false;
        short? nullable1 = meter.GetRadioTimeBias();
        if (!this.SetRadioTimeBias(nullable1.Value))
          return false;
        ushort? nullable2 = meter.GetRadioTransmitInterval();
        if (!this.SetRadioTransmitInterval(nullable2.Value))
          return false;
        nullable2 = meter.GetRadioInstallInterval();
        if (!this.SetRadioInstallInterval(nullable2.Value))
          return false;
        byte? nullable3 = meter.GetRadioInstallCount();
        if (!this.SetRadioInstallCount(nullable3.Value) || !this.SetAESkey(meter.GetAESkey()))
          return false;
        nullable3 = meter.GetPulseActivateRadio();
        if (!this.SetPulseActivateRadio(nullable3.Value))
          return false;
        nullable1 = meter.GetRadioPacketBOffset();
        if (!this.SetRadioPacketBOffset(nullable1.Value) || !this.SetRadioListType(meter.GetRadioListType().Value))
          return false;
      }
      return true;
    }

    private bool OverwriteDeviceSettings(PDC_Meter meter)
    {
      if (meter == null || !this.SetDueDate(meter.GetDueDate().Value) || !this.SetConfigFlagsPDCwMBus(meter.GetConfigFlagsPDCwMBus().Value) || !this.SetTimeZone(meter.GetTimeZone().Value))
        return false;
      ushort? nullable1 = meter.GetPulsePeriod();
      if (!this.SetPulsePeriod(nullable1.Value) || !this.SetPulseOn(meter.GetPulseOn().Value))
        return false;
      nullable1 = meter.GetScaleMantissaInputA();
      if (!this.SetScaleMantissaInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetScaleMantissaInputB();
      if (!this.SetScaleMantissaInputB(nullable1.Value))
        return false;
      sbyte? nullable2 = meter.GetScaleExponentInputA();
      if (!this.SetScaleExponentInputA(nullable2.Value))
        return false;
      nullable2 = meter.GetScaleExponentInputB();
      return this.SetScaleExponentInputB(nullable2.Value);
    }

    private bool OverwriteConstants(PDC_Meter meter)
    {
      if (meter == null)
        return false;
      ushort? nullable1 = meter.GetPulseBlockLimitInputA();
      if (!this.SetPulseBlockLimitInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetPulseLeakLimitInputA();
      if (!this.SetPulseLeakLimitInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetPulseUnleakLimitInputA();
      if (!this.SetPulseUnleakLimitInputA(nullable1.Value))
        return false;
      short? nullable2 = meter.GetPulseLeakLowerInputA();
      if (!this.SetPulseLeakLowerInputA(nullable2.Value))
        return false;
      nullable2 = meter.GetPulseLeakUpperInputA();
      if (!this.SetPulseLeakUpperInputA(nullable2.Value))
        return false;
      nullable1 = meter.GetOversizeDiffInputA();
      if (!this.SetOversizeDiffInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetOversizeLimitInputA();
      if (!this.SetOversizeLimitInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetUndersizeDiffInputA();
      if (!this.SetUndersizeDiffInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetUndersizeLimitInputA();
      if (!this.SetUndersizeLimitInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetBurstDiffInputA();
      if (!this.SetBurstDiffInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetBurstLimitInputA();
      if (!this.SetBurstLimitInputA(nullable1.Value))
        return false;
      nullable1 = meter.GetPulseBlockLimitInputB();
      if (!this.SetPulseBlockLimitInputB(nullable1.Value))
        return false;
      nullable1 = meter.GetPulseLeakLimitInputB();
      if (!this.SetPulseLeakLimitInputB(nullable1.Value))
        return false;
      nullable1 = meter.GetPulseUnleakLimitInputB();
      if (!this.SetPulseUnleakLimitInputB(nullable1.Value))
        return false;
      nullable2 = meter.GetPulseLeakLowerInputB();
      if (!this.SetPulseLeakLowerInputB(nullable2.Value))
        return false;
      nullable2 = meter.GetPulseLeakUpperInputB();
      if (!this.SetPulseLeakUpperInputB(nullable2.Value))
        return false;
      nullable1 = meter.GetOversizeDiffInputB();
      if (!this.SetOversizeDiffInputB(nullable1.Value))
        return false;
      nullable1 = meter.GetOversizeLimitInputB();
      if (!this.SetOversizeLimitInputB(nullable1.Value))
        return false;
      nullable1 = meter.GetUndersizeDiffInputB();
      if (!this.SetUndersizeDiffInputB(nullable1.Value))
        return false;
      nullable1 = meter.GetUndersizeLimitInputB();
      if (!this.SetUndersizeLimitInputB(nullable1.Value))
        return false;
      nullable1 = meter.GetBurstDiffInputB();
      if (!this.SetBurstDiffInputB(nullable1.Value))
        return false;
      nullable1 = meter.GetBurstLimitInputB();
      return this.SetBurstLimitInputB(nullable1.Value);
    }

    public uint? GetMeterValueA() => new uint?(this.GetParameterValue<uint>("pulseReadingA"));

    public uint? GetMeterValueB() => new uint?(this.GetParameterValue<uint>("pulseReadingB"));

    public DateTime? GetSystemTime()
    {
      DateTime parameterValue = this.GetParameterValue<DateTime>("hwSystemDate");
      return parameterValue == PDC_HandlerFunctions.DateTimeNull ? new DateTime?() : new DateTime?(parameterValue);
    }

    public bool SetRadioMode(RadioMode type)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return this.SetParameterValue<byte>("cfg_radio_mode", (byte) type);
    }

    public RadioMode? GetRadioMode()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return new RadioMode?((RadioMode) Enum.ToObject(typeof (RadioMode), this.GetParameterValue<byte>("cfg_radio_mode")));
    }

    public DeviceIdentification GetDeviceIdentification()
    {
      DeviceIdentification deviceIdentification = new DeviceIdentification();
      deviceIdentification.MeterID = this.GetParameterValue<uint>("Con_MeterId");
      deviceIdentification.HardwareTypeID = this.GetParameterValue<uint>("Con_HardwareTypeId");
      deviceIdentification.MeterInfoID = this.GetParameterValue<uint>("Con_MeterInfoId");
      deviceIdentification.BaseTypeID = this.GetParameterValue<uint>("Con_BaseTypeId");
      deviceIdentification.MeterTypeID = this.GetParameterValue<uint>("Con_MeterTypeId");
      deviceIdentification.SapMaterialNumber = this.GetParameterValue<uint>("Con_SAP_MaterialNumber");
      deviceIdentification.SapProductionOrderNumber = this.GetParameterValue<uint>("Con_SAP_ProductionOrderNumber");
      deviceIdentification.IdentificationChecksum = this.GetParameterValue<ushort>("Con_IdentificationChecksum");
      return deviceIdentification.IsChecksumOK && (deviceIdentification.MeterID != 0U || deviceIdentification.HardwareTypeID != 0U || deviceIdentification.MeterInfoID != 0U || deviceIdentification.BaseTypeID != 0U || deviceIdentification.MeterTypeID != 0U || deviceIdentification.SapMaterialNumber != 0U || deviceIdentification.SapProductionOrderNumber > 0U) ? deviceIdentification : (DeviceIdentification) null;
    }

    public bool SetDeviceIdentification(DeviceIdentification ident)
    {
      ident.IdentificationChecksum = ident != null ? ident.CalculateChecksum() : throw new ArgumentException("Can not set device identification! Input parameter 'ident' is null.");
      Parameter parameter = PDC_MemoryMap.GetParameter(this.Version, "Con_MeterId");
      if (parameter == null)
        throw new Exception("Can not set device identification! Parameter 'Con_MeterId' is in this MAP not available.");
      byte[] buffer = ident.Buffer;
      return this.Map.SetMemoryBytes(parameter.Address, buffer);
    }

    public bool SetRadioListType(string value)
    {
      if (string.IsNullOrEmpty(value))
        throw new NullReferenceException("Radio list type is empty!");
      return Enum.IsDefined(typeof (RadioList), (object) value) ? this.SetParameterValue<byte>("cfg_list", (byte) Enum.Parse(typeof (RadioList), value, true)) : throw new ArgumentException(value);
    }

    public bool SetRadioListType(RadioList value)
    {
      return this.SetParameterValue<byte>("cfg_list", (byte) value);
    }

    public RadioList? GetRadioListType()
    {
      return new RadioList?((RadioList) Enum.ToObject(typeof (RadioList), this.GetParameterValue<byte>("cfg_list")));
    }

    public bool SetRadioTimeBias(short interval)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return this.SetParameterValue<short>("cfg_radio_time_bias", interval);
    }

    public short? GetRadioTimeBias()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return new short?(this.GetParameterValue<short>("cfg_radio_time_bias"));
    }

    public bool SetRadioTransmitInterval(ushort interval)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return interval >= (ushort) 2 && this.SetParameterValue<ushort>("cfg_radio_normal_basetime", interval);
    }

    public ushort? GetRadioTransmitInterval()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return new ushort?(this.GetParameterValue<ushort>("cfg_radio_normal_basetime"));
    }

    public bool SetRadioInstallInterval(ushort interval)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return interval >= (ushort) 2 ? this.SetParameterValue<ushort>("cfg_radio_install_basetime", interval) : throw new ArgumentOutOfRangeException("The value must be at least 2 to ensure proper device operation.");
    }

    public ushort? GetRadioInstallInterval()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return new ushort?(this.GetParameterValue<ushort>("cfg_radio_install_basetime"));
    }

    public bool SetRadioInstallCount(byte value)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return this.SetParameterValue<byte>("cfg_radio_install_count", value);
    }

    public byte? GetRadioInstallCount()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return new byte?(this.GetParameterValue<byte>("cfg_radio_install_count"));
    }

    public bool SetTimeZone(int valueInQuarterHours)
    {
      if (valueInQuarterHours > 56)
        throw new ArgumentOutOfRangeException("Invalid value of 'Timezone'! Too big. Max. UTC+14:00 (14*4=56), Min. UTC-12:00 (-12*4=-48), Actual value is: " + valueInQuarterHours.ToString());
      return valueInQuarterHours >= -48 ? this.SetParameterValue<byte>("Bak_TimeZoneInQuarterHours", (byte) valueInQuarterHours) : throw new ArgumentOutOfRangeException("Invalid value of 'Timezone'! Too small. Max. UTC+14:00 (14*4=56), Min. UTC-12:00 (-12*4=-48), Actual value is: " + valueInQuarterHours.ToString());
    }

    public int? GetTimeZone()
    {
      byte parameterValue = this.GetParameterValue<byte>("Bak_TimeZoneInQuarterHours");
      int num = ((int) parameterValue & 128) != 128 ? (int) parameterValue : (int) parameterValue | -256;
      return num > 56 || num < -48 ? new int?() : new int?(num);
    }

    public bool SetMediumPDC(MBusDeviceType type)
    {
      return this.SetParameterValue<byte>("cfg_mbus_medium_c", (byte) type);
    }

    public MBusDeviceType? GetMediumPDC()
    {
      return new MBusDeviceType?((MBusDeviceType) Enum.ToObject(typeof (MBusDeviceType), this.GetParameterValue<byte>("cfg_mbus_medium_c")));
    }

    public bool SetConfigFlagsPDCwMBus(ConfigFlagsPDCwMBus flags)
    {
      return this.SetParameterValue<ushort>("cfg_config_flags", (ushort) flags);
    }

    public ConfigFlagsPDCwMBus? GetConfigFlagsPDCwMBus()
    {
      return new ConfigFlagsPDCwMBus?((ConfigFlagsPDCwMBus) Enum.ToObject(typeof (ConfigFlagsPDCwMBus), this.GetParameterValue<ushort>("cfg_config_flags")));
    }

    public bool SetRadioFlagsPDCwMBus(RadioFlagsPDCwMBus flags)
    {
      return this.SetParameterValue<byte>("cfg_radio_flags", (byte) flags);
    }

    public RadioFlagsPDCwMBus? GetRadioFlagsPDCwMBus()
    {
      return new RadioFlagsPDCwMBus?((RadioFlagsPDCwMBus) Enum.ToObject(typeof (RadioFlagsPDCwMBus), this.GetParameterValue<byte>("cfg_radio_flags")));
    }

    public bool SetMediumInputA(MBusDeviceType type)
    {
      return this.SetParameterValue<byte>("cfg_mbus_medium_a", (byte) type);
    }

    public MBusDeviceType? GetMediumInputA()
    {
      return new MBusDeviceType?((MBusDeviceType) Enum.ToObject(typeof (MBusDeviceType), this.GetParameterValue<byte>("cfg_mbus_medium_a")));
    }

    public bool SetMediumInputB(MBusDeviceType type)
    {
      return this.SetParameterValue<byte>("cfg_mbus_medium_b", (byte) type);
    }

    public MBusDeviceType? GetMediumInputB()
    {
      return new MBusDeviceType?((MBusDeviceType) Enum.ToObject(typeof (MBusDeviceType), this.GetParameterValue<byte>("cfg_mbus_medium_b")));
    }

    public bool SetRadioPacketBOffset(short value)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return this.SetParameterValue<short>("cfg_radio_packetb_offset", value);
    }

    public short? GetRadioPacketBOffset()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return new short?(this.GetParameterValue<short>("cfg_radio_packetb_offset"));
    }

    public bool SetFrequencyOffset(short value)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return this.SetParameterValue<short>("cfg_radio_freq_offset", value);
    }

    public short? GetFrequencyOffset()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return new short?(this.GetParameterValue<short>("cfg_radio_freq_offset"));
    }

    public bool SetMBusAddressPDC(byte value)
    {
      return this.SetParameterValue<byte>("cfg_mbus_address_c", value);
    }

    public byte? GetMBusAddressPDC()
    {
      return new byte?(this.GetParameterValue<byte>("cfg_mbus_address_c"));
    }

    public bool SetMBusAddressInputA(byte value)
    {
      return this.SetParameterValue<byte>("cfg_mbus_address_a", value);
    }

    public byte? GetMBusAddressInputA()
    {
      return new byte?(this.GetParameterValue<byte>("cfg_mbus_address_a"));
    }

    public bool SetMBusAddressInputB(byte value)
    {
      return this.SetParameterValue<byte>("cfg_mbus_address_b", value);
    }

    public byte? GetMBusAddressInputB()
    {
      return new byte?(this.GetParameterValue<byte>("cfg_mbus_address_b"));
    }

    public bool SetRadioPower(RadioPower value)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return this.SetParameterValue<byte>("cfg_radio_power", (byte) value);
    }

    public RadioPower? GetRadioPower()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return new RadioPower?((RadioPower) Enum.ToObject(typeof (RadioPower), this.GetParameterValue<byte>("cfg_radio_power")));
    }

    public bool SetAESkey(object value)
    {
      if (value == null)
        value = (object) this.EMPTY_AES_KEY;
      return value is byte[] ? this.SetAESkey((byte[]) value) : this.SetAESkey(Util.HexStringToByteArray(value.ToString()));
    }

    public bool SetAESkey(byte[] value)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      if (value == null)
        value = this.EMPTY_AES_KEY;
      return value.Length == 16 ? this.SetParameterValue<byte[]>("cfg_key", value) : throw new ArgumentException("The value of AES key has wrong length! Length: " + value.Length.ToString());
    }

    public byte[] GetAESkey()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      byte[] parameterValue = this.GetParameterValue<byte[]>("cfg_key");
      return Util.ByteArrayCompare(parameterValue, this.EMPTY_AES_KEY) ? (byte[]) null : parameterValue;
    }

    public bool SetDueDate(DateTime value)
    {
      if (value.Year < 2000 || value.Year > 2255)
        throw new ArgumentException("Can not set DueDate! The year of new value is invalid (Valid are: 2000-2255). Value: " + value.ToString());
      return this.SetParameterValue<byte>("cfg_stichtag_month", (byte) value.Month) && this.SetParameterValue<byte>("cfg_stichtag_day", (byte) value.Day);
    }

    public DateTime? GetDueDate()
    {
      byte parameterValue1 = this.GetParameterValue<byte>("cfg_stichtag_month");
      byte parameterValue2 = this.GetParameterValue<byte>("cfg_stichtag_day");
      if (parameterValue1 > (byte) 12 || parameterValue2 > (byte) 31)
        return new DateTime?(PDC_HandlerFunctions.DateTimeNull);
      try
      {
        return new DateTime?(new DateTime(2000, (int) parameterValue1, (int) parameterValue2));
      }
      catch
      {
        return new DateTime?(PDC_HandlerFunctions.DateTimeNull);
      }
    }

    public bool SetPulseActivateRadio(byte value)
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return this.SetParameterValue<byte>("cfg_pulse_activate", value);
    }

    public byte? GetPulseActivateRadio()
    {
      if (this.Version == null || this.Version.Type != PDC_DeviceIdentity.PDC_WmBus)
        throw new NotSupportedException("Radio functions not supported!");
      return new byte?(this.GetParameterValue<byte>("cfg_pulse_activate"));
    }

    public bool SetPulsePeriod(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_pulse_period", value);
    }

    public ushort? GetPulsePeriod()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_pulse_period"));
    }

    public bool SetPulseOn(byte value) => this.SetParameterValue<byte>("cfg_pulse_on", value);

    public byte? GetPulseOn() => new byte?(this.GetParameterValue<byte>("cfg_pulse_on"));

    public bool SetMBusGenerationPDC(byte value)
    {
      return this.SetParameterValue<byte>("cfg_mbus_version_c", value);
    }

    public byte? GetMBusGenerationPDC()
    {
      return new byte?(this.GetParameterValue<byte>("cfg_mbus_version_c"));
    }

    public bool SetMBusGenerationInputA(byte value)
    {
      return this.SetParameterValue<byte>("cfg_mbus_version_a", value);
    }

    public byte? GetMBusGenerationInputA()
    {
      return new byte?(this.GetParameterValue<byte>("cfg_mbus_version_a"));
    }

    public bool SetMBusGenerationInputB(byte value)
    {
      return this.SetParameterValue<byte>("cfg_mbus_version_b", value);
    }

    public byte? GetMBusGenerationInputB()
    {
      return new byte?(this.GetParameterValue<byte>("cfg_mbus_version_b"));
    }

    public bool SetManufacturerPDC(string value)
    {
      if (string.IsNullOrEmpty(value))
        throw new ArgumentException("Can not set manufacturer! Input parameter 'value' is null.");
      if (value == "ZENNER")
        value = "ZRI";
      return value.Length == 3 ? this.SetParameterValue<ushort>("cfg_mbus_manid_c", MBusDevice.GetManufacturerCode(value)) : throw new ArgumentException("Can not set manufacturer! The length of input parameter 'value' is not 3 chars.");
    }

    public string GetManufacturerPDC()
    {
      return MBusDevice.GetManufacturer((short) this.GetParameterValue<ushort>("cfg_mbus_manid_c"));
    }

    public bool SetManufacturerInputA(string value)
    {
      if (string.IsNullOrEmpty(value))
        throw new ArgumentException("Can not set manufacturer! Input parameter 'value' is null.");
      if (value == "ZENNER")
        value = "ZRI";
      return value.Length == 3 ? this.SetParameterValue<ushort>("cfg_mbus_manid_a", MBusDevice.GetManufacturerCode(value)) : throw new ArgumentException("Can not set manufacturer! The length of input parameter 'value' is not 3 chars.");
    }

    public string GetManufacturerInputA()
    {
      return MBusDevice.GetManufacturer((short) this.GetParameterValue<ushort>("cfg_mbus_manid_a"));
    }

    public bool SetManufacturerInputB(string value)
    {
      if (string.IsNullOrEmpty(value))
        throw new ArgumentException("Can not set manufacturer! Input parameter 'value' is null.");
      if (value == "ZENNER")
        value = "ZRI";
      return value.Length == 3 ? this.SetParameterValue<ushort>("cfg_mbus_manid_b", MBusDevice.GetManufacturerCode(value)) : throw new ArgumentException("Can not set manufacturer! The length of input parameter 'value' is not 3 chars.");
    }

    public string GetManufacturerInputB()
    {
      return MBusDevice.GetManufacturer((short) this.GetParameterValue<ushort>("cfg_mbus_manid_b"));
    }

    public bool SetSerialnumberFull(string value)
    {
      return this.SetSerialnumberFull(value, "Con_fullserialnumber", true);
    }

    public string GetSerialnumberFull() => this.GetSerialnumberFull("Con_fullserialnumber");

    public bool SetSerialnumberFullInputA(string value)
    {
      return this.SetSerialnumberFull(value, "Con_fullserialnumberA", false);
    }

    public string GetSerialnumberFullInputA() => this.GetSerialnumberFull("Con_fullserialnumberA");

    public bool SetSerialnumberFullInputB(string value)
    {
      return this.SetSerialnumberFull(value, "Con_fullserialnumberB", false);
    }

    public string GetSerialnumberFullInputB() => this.GetSerialnumberFull("Con_fullserialnumberB");

    private bool SetSerialnumberFull(string value, string key, bool checkOBIS)
    {
      if (string.IsNullOrEmpty(value))
        return this.SetParameterValue<byte[]>(key, new byte[8]
        {
          byte.MaxValue,
          byte.MaxValue,
          byte.MaxValue,
          byte.MaxValue,
          byte.MaxValue,
          byte.MaxValue,
          byte.MaxValue,
          byte.MaxValue
        });
      if (value.Length != 14)
        throw new ArgumentException("Wrong length of the full serial number detected! Expected 14, Value: " + value);
      string s = !checkOBIS || value[0] == 'E' ? value.Substring(0, 1) : throw new ArgumentException("Wrong start char of the full serial number detected! Expected E, Actual: " + value[0].ToString());
      string Manufacturer = value.Substring(1, 3);
      byte num = byte.Parse(value.Substring(4, 2));
      string str = value.Substring(6);
      if (num > (byte) 99)
        throw new ArgumentOutOfRangeException("Wrong generation in full serial number detected! Valid range are: 0-99");
      if (!Util.IsValidBCD(str))
        throw new ArgumentException("Wrong full serial number detected! The last 8 chars should contains only numbers. Value: " + value);
      List<byte> byteList = new List<byte>(14);
      byteList.AddRange((IEnumerable<byte>) Encoding.ASCII.GetBytes(s));
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(MBusDevice.GetManufacturerCode(Manufacturer)));
      byteList.Add(num);
      byteList.AddRange((IEnumerable<byte>) BitConverter.GetBytes(Util.ConvertUnt32ToBcdUInt32(uint.Parse(str))));
      return byteList.Count == 8 ? this.SetParameterValue<byte[]>(key, byteList.ToArray()) : throw new ArgumentOutOfRangeException("Wrong full serial number was generated!");
    }

    private string GetSerialnumberFull(string key)
    {
      byte[] parameterValue = this.GetParameterValue<byte[]>(key);
      if (parameterValue == null || parameterValue.Length != 8)
        throw new ArgumentException("The parameter '" + key + "' is invalid!");
      if (parameterValue[0] == byte.MaxValue && parameterValue[1] == byte.MaxValue && parameterValue[2] == byte.MaxValue && parameterValue[3] == byte.MaxValue && parameterValue[4] == byte.MaxValue && parameterValue[5] == byte.MaxValue && parameterValue[6] == byte.MaxValue && parameterValue[7] == byte.MaxValue)
        return string.Empty;
      if (parameterValue[0] == (byte) 0 && parameterValue[1] == (byte) 0 && parameterValue[2] == (byte) 0 && parameterValue[3] == (byte) 0 && parameterValue[4] == (byte) 0 && parameterValue[5] == (byte) 0 && parameterValue[6] == (byte) 0 && parameterValue[7] == (byte) 0)
        return string.Empty;
      try
      {
        return string.Format("{0}{1}{2:00}{3}", (object) Encoding.ASCII.GetString(parameterValue, 0, 1), (object) MBusDevice.GetManufacturer(BitConverter.ToInt16(parameterValue, 1)), (object) parameterValue[3], (object) BitConverter.ToUInt32(parameterValue, 4).ToString("X8"));
      }
      catch
      {
        return string.Empty;
      }
    }

    public bool SetPulseBlockLimitInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_pulse_a_block_limit", value);
    }

    public ushort? GetPulseBlockLimitInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_pulse_a_block_limit"));
    }

    public bool SetPulseLeakLimitInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_pulse_a_leak_limit", value);
    }

    public ushort? GetPulseLeakLimitInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_pulse_a_leak_limit"));
    }

    public bool SetPulseUnleakLimitInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_pulse_a_unleak_limit", value);
    }

    public ushort? GetPulseUnleakLimitInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_pulse_a_unleak_limit"));
    }

    public bool SetPulseLeakLowerInputA(short value)
    {
      return this.SetParameterValue<short>("cfg_pulse_a_leak_lower", value);
    }

    public short? GetPulseLeakLowerInputA()
    {
      return new short?(this.GetParameterValue<short>("cfg_pulse_a_leak_lower"));
    }

    public bool SetPulseLeakUpperInputA(short value)
    {
      return this.SetParameterValue<short>("cfg_pulse_a_leak_upper", value);
    }

    public short? GetPulseLeakUpperInputA()
    {
      return new short?(this.GetParameterValue<short>("cfg_pulse_a_leak_upper"));
    }

    public bool SetOversizeDiffInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_oversize_a_diff", value);
    }

    public ushort? GetOversizeDiffInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_oversize_a_diff"));
    }

    public bool SetOversizeLimitInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_oversize_a_limit", value);
    }

    public ushort? GetOversizeLimitInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_oversize_a_limit"));
    }

    public bool SetUndersizeDiffInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_undersize_a_diff", value);
    }

    public ushort? GetUndersizeDiffInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_undersize_a_diff"));
    }

    public bool SetUndersizeLimitInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_undersize_a_limit", value);
    }

    public ushort? GetUndersizeLimitInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_undersize_a_limit"));
    }

    public bool SetBurstDiffInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_burst_a_diff", value);
    }

    public ushort? GetBurstDiffInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_burst_a_diff"));
    }

    public bool SetBurstLimitInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_burst_a_limit", value);
    }

    public ushort? GetBurstLimitInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_burst_a_limit"));
    }

    public bool SetPulseBlockLimitInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_pulse_b_block_limit", value);
    }

    public ushort? GetPulseBlockLimitInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_pulse_b_block_limit"));
    }

    public bool SetPulseLeakLimitInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_pulse_b_leak_limit", value);
    }

    public ushort? GetPulseLeakLimitInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_pulse_b_leak_limit"));
    }

    public bool SetPulseUnleakLimitInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_pulse_b_unleak_limit", value);
    }

    public ushort? GetPulseUnleakLimitInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_pulse_b_unleak_limit"));
    }

    public bool SetPulseLeakLowerInputB(short value)
    {
      return this.SetParameterValue<short>("cfg_pulse_b_leak_lower", value);
    }

    public short? GetPulseLeakLowerInputB()
    {
      return new short?(this.GetParameterValue<short>("cfg_pulse_b_leak_lower"));
    }

    public bool SetPulseLeakUpperInputB(short value)
    {
      return this.SetParameterValue<short>("cfg_pulse_b_leak_upper", value);
    }

    public short? GetPulseLeakUpperInputB()
    {
      return new short?(this.GetParameterValue<short>("cfg_pulse_b_leak_upper"));
    }

    public bool SetOversizeDiffInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_oversize_b_diff", value);
    }

    public ushort? GetOversizeDiffInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_oversize_b_diff"));
    }

    public bool SetOversizeLimitInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_oversize_b_limit", value);
    }

    public ushort? GetOversizeLimitInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_oversize_b_limit"));
    }

    public bool SetUndersizeDiffInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_undersize_b_diff", value);
    }

    public ushort? GetUndersizeDiffInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_undersize_b_diff"));
    }

    public bool SetUndersizeLimitInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_undersize_b_limit", value);
    }

    public ushort? GetUndersizeLimitInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_undersize_b_limit"));
    }

    public bool SetBurstDiffInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_burst_b_diff", value);
    }

    public ushort? GetBurstDiffInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_burst_b_diff"));
    }

    public bool SetBurstLimitInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_burst_b_limit", value);
    }

    public ushort? GetBurstLimitInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_burst_b_limit"));
    }

    public bool SetVIFInputA(byte value) => this.SetParameterValue<byte>("cfg_vif_a", value);

    public byte? GetVIFInputA() => new byte?(this.GetParameterValue<byte>("cfg_vif_a"));

    public bool SetVIFInputB(byte value) => this.SetParameterValue<byte>("cfg_vif_b", value);

    public byte? GetVIFInputB() => new byte?(this.GetParameterValue<byte>("cfg_vif_b"));

    public bool SetScaleMantissaInputA(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_scale_mantissa_a", value);
    }

    public ushort? GetScaleMantissaInputA()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_scale_mantissa_a"));
    }

    public bool SetScaleMantissaInputB(ushort value)
    {
      return this.SetParameterValue<ushort>("cfg_scale_mantissa_b", value);
    }

    public ushort? GetScaleMantissaInputB()
    {
      return new ushort?(this.GetParameterValue<ushort>("cfg_scale_mantissa_b"));
    }

    public bool SetScaleExponentInputA(sbyte value)
    {
      return (double) value <= 4.0 && (double) value >= -4.0 ? this.SetParameterValue<sbyte>("cfg_scale_exponent_a", value) : throw new ArgumentOutOfRangeException("cfg_scale_exponent_a", "Invalid exponent value! Valid range +-4.");
    }

    public sbyte? GetScaleExponentInputA()
    {
      return new sbyte?(this.GetParameterValue<sbyte>("cfg_scale_exponent_a"));
    }

    public bool SetScaleExponentInputB(sbyte value)
    {
      return (double) value <= 4.0 && (double) value >= -4.0 ? this.SetParameterValue<sbyte>("cfg_scale_exponent_b", value) : throw new ArgumentOutOfRangeException("cfg_scale_exponent_b", "Invalid exponent value! Valid range +-4.");
    }

    public sbyte? GetScaleExponentInputB()
    {
      return new sbyte?(this.GetParameterValue<sbyte>("cfg_scale_exponent_b"));
    }

    public bool SetScaleFactorInputA(double value)
    {
      if (value <= 0.0)
        throw new ArgumentOutOfRangeException(nameof (value), "Negative value  is not allowed!");
      sbyte num1 = 0;
      double num2 = value;
      while (num2 % 1.0 != 0.0)
      {
        num2 *= 10.0;
        --num1;
      }
      return this.SetScaleExponentInputA(num1) && this.SetScaleMantissaInputA(Convert.ToUInt16(num2));
    }

    public double? GetScaleFactorInputA()
    {
      sbyte? scaleExponentInputA = this.GetScaleExponentInputA();
      if (!scaleExponentInputA.HasValue)
        return new double?();
      ushort? scaleMantissaInputA = this.GetScaleMantissaInputA();
      if (!scaleMantissaInputA.HasValue)
        return new double?();
      ushort? nullable1 = scaleMantissaInputA;
      double? nullable2 = nullable1.HasValue ? new double?((double) nullable1.GetValueOrDefault()) : new double?();
      double num = Math.Pow(10.0, (double) scaleExponentInputA.Value);
      return new double?(Convert.ToDouble((object) (nullable2.HasValue ? new double?(nullable2.GetValueOrDefault() * num) : new double?())));
    }

    public bool SetScaleFactorInputB(double value)
    {
      if (value <= 0.0)
        throw new ArgumentOutOfRangeException(nameof (value), "Negative value  is not allowed!");
      sbyte num1 = 0;
      double num2 = value;
      while (num2 % 1.0 != 0.0)
      {
        num2 *= 10.0;
        --num1;
      }
      return this.SetScaleExponentInputB(num1) && this.SetScaleMantissaInputB(Convert.ToUInt16(num2));
    }

    public double? GetScaleFactorInputB()
    {
      sbyte? scaleExponentInputB = this.GetScaleExponentInputB();
      if (!scaleExponentInputB.HasValue)
        return new double?();
      ushort? scaleMantissaInputB = this.GetScaleMantissaInputB();
      if (!scaleMantissaInputB.HasValue)
        return new double?();
      ushort? nullable1 = scaleMantissaInputB;
      double? nullable2 = nullable1.HasValue ? new double?((double) nullable1.GetValueOrDefault()) : new double?();
      double num = Math.Pow(10.0, (double) scaleExponentInputB.Value);
      return new double?(Convert.ToDouble((object) (nullable2.HasValue ? new double?(nullable2.GetValueOrDefault() * num) : new double?())));
    }

    public void SetNominalFlowB(double value)
    {
      double? scaleFactorInputB = this.GetScaleFactorInputB();
      double? nullable1 = scaleFactorInputB;
      double num1 = 1.0;
      if (nullable1.GetValueOrDefault() == num1 & nullable1.HasValue)
      {
        if (2.5 == value)
          this.SetValuesFromNominalFlowB((ushort) 62, (ushort) 625, (ushort) 187);
        if (4.0 == value)
          this.SetValuesFromNominalFlowB((ushort) 100, (ushort) 1000, (ushort) 300);
        if (6.3 == value)
          this.SetValuesFromNominalFlowB((ushort) 157, (ushort) 1575, (ushort) 472);
        if (10.0 == value)
          this.SetValuesFromNominalFlowB((ushort) 250, (ushort) 2500, (ushort) 750);
        if (16.0 == value)
          this.SetValuesFromNominalFlowB((ushort) 400, (ushort) 4000, (ushort) 1200);
        if (25.0 != value)
          return;
        this.SetValuesFromNominalFlowB((ushort) 625, (ushort) 6250, (ushort) 1875);
      }
      else
      {
        double? nullable2 = scaleFactorInputB;
        double num2 = 10.0;
        if (nullable2.GetValueOrDefault() == num2 & nullable2.HasValue)
        {
          if (25.0 == value)
            this.SetValuesFromNominalFlowB((ushort) 62, (ushort) 625, (ushort) 187);
          if (40.0 == value)
            this.SetValuesFromNominalFlowB((ushort) 100, (ushort) 1000, (ushort) 300);
          if (63.0 == value)
            this.SetValuesFromNominalFlowB((ushort) 157, (ushort) 1575, (ushort) 472);
          if (100.0 != value)
            return;
          this.SetValuesFromNominalFlowB((ushort) 250, (ushort) 2500, (ushort) 750);
        }
        else
        {
          nullable2 = scaleFactorInputB;
          double num3 = 100.0;
          if (nullable2.GetValueOrDefault() == num3 & nullable2.HasValue)
          {
            if (160.0 == value)
              this.SetValuesFromNominalFlowB((ushort) 40, (ushort) 400, (ushort) 120);
            if (250.0 == value)
              this.SetValuesFromNominalFlowB((ushort) 62, (ushort) 625, (ushort) 187);
            if (400.0 == value)
              this.SetValuesFromNominalFlowB((ushort) 100, (ushort) 1000, (ushort) 300);
            if (630.0 == value)
              this.SetValuesFromNominalFlowB((ushort) 157, (ushort) 1575, (ushort) 472);
            if (1000.0 != value)
              return;
            this.SetValuesFromNominalFlowB((ushort) 250, (ushort) 2500, (ushort) 750);
          }
          else
          {
            nullable2 = scaleFactorInputB;
            double num4 = 0.5;
            int num5;
            if (!(nullable2.GetValueOrDefault() == num4 & nullable2.HasValue))
            {
              nullable2 = scaleFactorInputB;
              double num6 = 5.0;
              num5 = nullable2.GetValueOrDefault() == num6 & nullable2.HasValue ? 1 : 0;
            }
            else
              num5 = 1;
            if (num5 != 0)
            {
              double num7 = value * 1000.0 / 4.0;
              this.SetValuesFromNominalFlowB(Convert.ToUInt16(num7 * 0.1 / scaleFactorInputB.Value), Convert.ToUInt16(num7 * 1.0 / scaleFactorInputB.Value), Convert.ToUInt16(num7 * 0.3 / scaleFactorInputB.Value));
            }
            else
            {
              string str1 = value.ToString();
              nullable2 = scaleFactorInputB;
              string str2 = nullable2.ToString();
              throw new NotImplementedException("Nominal flow: " + str1 + ", pulseMultiplierA: " + str2);
            }
          }
        }
      }
    }

    private void SetValuesFromNominalFlowB(
      ushort oversizeDiff,
      ushort undersizeDiff,
      ushort burstDiff)
    {
      this.SetOversizeDiffInputB(oversizeDiff);
      this.SetUndersizeDiffInputB(undersizeDiff);
      this.SetBurstDiffInputB(burstDiff);
    }

    public string GetNominalFlowB()
    {
      double? scaleFactorInputB = this.GetScaleFactorInputB();
      ushort? oversizeDiffInputB = this.GetOversizeDiffInputB();
      ushort? undersizeDiffInputB = this.GetUndersizeDiffInputB();
      ushort? burstDiffInputB = this.GetBurstDiffInputB();
      double? nullable1 = scaleFactorInputB;
      double num1 = 1.0;
      if (nullable1.GetValueOrDefault() == num1 & nullable1.HasValue)
      {
        ushort? nullable2 = oversizeDiffInputB;
        int? nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num2 = 62;
        int num3;
        if (nullable3.GetValueOrDefault() == num2 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputB;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num4 = 625;
          if (nullable3.GetValueOrDefault() == num4 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputB;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num5 = 187;
            num3 = nullable3.GetValueOrDefault() == num5 & nullable3.HasValue ? 1 : 0;
            goto label_5;
          }
        }
        num3 = 0;
label_5:
        if (num3 != 0)
          return 2.5.ToString();
        nullable2 = oversizeDiffInputB;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num6 = 100;
        int num7;
        if (nullable3.GetValueOrDefault() == num6 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputB;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num8 = 1000;
          if (nullable3.GetValueOrDefault() == num8 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputB;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num9 = 300;
            num7 = nullable3.GetValueOrDefault() == num9 & nullable3.HasValue ? 1 : 0;
            goto label_11;
          }
        }
        num7 = 0;
label_11:
        if (num7 != 0)
          return 4.ToString();
        nullable2 = oversizeDiffInputB;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num10 = 157;
        int num11;
        if (nullable3.GetValueOrDefault() == num10 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputB;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num12 = 1575;
          if (nullable3.GetValueOrDefault() == num12 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputB;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num13 = 472;
            num11 = nullable3.GetValueOrDefault() == num13 & nullable3.HasValue ? 1 : 0;
            goto label_17;
          }
        }
        num11 = 0;
label_17:
        if (num11 != 0)
          return 6.3.ToString();
        nullable2 = oversizeDiffInputB;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num14 = 250;
        int num15;
        if (nullable3.GetValueOrDefault() == num14 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputB;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num16 = 2500;
          if (nullable3.GetValueOrDefault() == num16 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputB;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num17 = 750;
            num15 = nullable3.GetValueOrDefault() == num17 & nullable3.HasValue ? 1 : 0;
            goto label_23;
          }
        }
        num15 = 0;
label_23:
        if (num15 != 0)
          return 10.ToString();
        nullable2 = oversizeDiffInputB;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num18 = 400;
        int num19;
        if (nullable3.GetValueOrDefault() == num18 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputB;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num20 = 4000;
          if (nullable3.GetValueOrDefault() == num20 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputB;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num21 = 1200;
            num19 = nullable3.GetValueOrDefault() == num21 & nullable3.HasValue ? 1 : 0;
            goto label_29;
          }
        }
        num19 = 0;
label_29:
        if (num19 != 0)
          return 16.ToString();
        nullable2 = oversizeDiffInputB;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num22 = 625;
        int num23;
        if (nullable3.GetValueOrDefault() == num22 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputB;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num24 = 6250;
          if (nullable3.GetValueOrDefault() == num24 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputB;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num25 = 1875;
            num23 = nullable3.GetValueOrDefault() == num25 & nullable3.HasValue ? 1 : 0;
            goto label_35;
          }
        }
        num23 = 0;
label_35:
        if (num23 != 0)
          return 25.ToString();
      }
      else
      {
        double? nullable4 = scaleFactorInputB;
        double num26 = 10.0;
        if (nullable4.GetValueOrDefault() == num26 & nullable4.HasValue)
        {
          ushort? nullable5 = oversizeDiffInputB;
          int? nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
          int num27 = 62;
          int num28;
          if (nullable6.GetValueOrDefault() == num27 & nullable6.HasValue)
          {
            nullable5 = undersizeDiffInputB;
            nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
            int num29 = 625;
            if (nullable6.GetValueOrDefault() == num29 & nullable6.HasValue)
            {
              nullable5 = burstDiffInputB;
              nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
              int num30 = 187;
              num28 = nullable6.GetValueOrDefault() == num30 & nullable6.HasValue ? 1 : 0;
              goto label_42;
            }
          }
          num28 = 0;
label_42:
          if (num28 != 0)
            return 25.ToString();
          nullable5 = oversizeDiffInputB;
          nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
          int num31 = 100;
          int num32;
          if (nullable6.GetValueOrDefault() == num31 & nullable6.HasValue)
          {
            nullable5 = undersizeDiffInputB;
            nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
            int num33 = 1000;
            if (nullable6.GetValueOrDefault() == num33 & nullable6.HasValue)
            {
              nullable5 = burstDiffInputB;
              nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
              int num34 = 300;
              num32 = nullable6.GetValueOrDefault() == num34 & nullable6.HasValue ? 1 : 0;
              goto label_48;
            }
          }
          num32 = 0;
label_48:
          if (num32 != 0)
            return 40.ToString();
          nullable5 = oversizeDiffInputB;
          nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
          int num35 = 157;
          int num36;
          if (nullable6.GetValueOrDefault() == num35 & nullable6.HasValue)
          {
            nullable5 = undersizeDiffInputB;
            nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
            int num37 = 1575;
            if (nullable6.GetValueOrDefault() == num37 & nullable6.HasValue)
            {
              nullable5 = burstDiffInputB;
              nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
              int num38 = 472;
              num36 = nullable6.GetValueOrDefault() == num38 & nullable6.HasValue ? 1 : 0;
              goto label_54;
            }
          }
          num36 = 0;
label_54:
          if (num36 != 0)
            return 63.ToString();
          nullable5 = oversizeDiffInputB;
          nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
          int num39 = 250;
          int num40;
          if (nullable6.GetValueOrDefault() == num39 & nullable6.HasValue)
          {
            nullable5 = undersizeDiffInputB;
            nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
            int num41 = 2500;
            if (nullable6.GetValueOrDefault() == num41 & nullable6.HasValue)
            {
              nullable5 = burstDiffInputB;
              nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
              int num42 = 750;
              num40 = nullable6.GetValueOrDefault() == num42 & nullable6.HasValue ? 1 : 0;
              goto label_60;
            }
          }
          num40 = 0;
label_60:
          if (num40 != 0)
            return 100.ToString();
        }
        else
        {
          double? nullable7 = scaleFactorInputB;
          double num43 = 100.0;
          if (nullable7.GetValueOrDefault() == num43 & nullable7.HasValue)
          {
            ushort? nullable8 = oversizeDiffInputB;
            int? nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num44 = 40;
            int num45;
            if (nullable9.GetValueOrDefault() == num44 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputB;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num46 = 400;
              if (nullable9.GetValueOrDefault() == num46 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputB;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num47 = 120;
                num45 = nullable9.GetValueOrDefault() == num47 & nullable9.HasValue ? 1 : 0;
                goto label_67;
              }
            }
            num45 = 0;
label_67:
            if (num45 != 0)
              return 160.ToString();
            nullable8 = oversizeDiffInputB;
            nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num48 = 62;
            int num49;
            if (nullable9.GetValueOrDefault() == num48 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputB;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num50 = 625;
              if (nullable9.GetValueOrDefault() == num50 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputB;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num51 = 187;
                num49 = nullable9.GetValueOrDefault() == num51 & nullable9.HasValue ? 1 : 0;
                goto label_73;
              }
            }
            num49 = 0;
label_73:
            if (num49 != 0)
              return 250.ToString();
            nullable8 = oversizeDiffInputB;
            nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num52 = 100;
            int num53;
            if (nullable9.GetValueOrDefault() == num52 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputB;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num54 = 1000;
              if (nullable9.GetValueOrDefault() == num54 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputB;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num55 = 300;
                num53 = nullable9.GetValueOrDefault() == num55 & nullable9.HasValue ? 1 : 0;
                goto label_79;
              }
            }
            num53 = 0;
label_79:
            if (num53 != 0)
              return 400.ToString();
            nullable8 = oversizeDiffInputB;
            nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num56 = 157;
            int num57;
            if (nullable9.GetValueOrDefault() == num56 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputB;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num58 = 1575;
              if (nullable9.GetValueOrDefault() == num58 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputB;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num59 = 472;
                num57 = nullable9.GetValueOrDefault() == num59 & nullable9.HasValue ? 1 : 0;
                goto label_85;
              }
            }
            num57 = 0;
label_85:
            if (num57 != 0)
              return 630.ToString();
            nullable8 = oversizeDiffInputB;
            nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num60 = 250;
            int num61;
            if (nullable9.GetValueOrDefault() == num60 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputB;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num62 = 2500;
              if (nullable9.GetValueOrDefault() == num62 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputB;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num63 = 750;
                num61 = nullable9.GetValueOrDefault() == num63 & nullable9.HasValue ? 1 : 0;
                goto label_91;
              }
            }
            num61 = 0;
label_91:
            if (num61 != 0)
              return 1000.ToString();
          }
        }
      }
      return string.Empty;
    }

    public string[] GetNominalFlowAllowedValuesB()
    {
      double? scaleFactorInputB = this.GetScaleFactorInputB();
      double? nullable1 = scaleFactorInputB;
      double num1 = 1.0;
      if (nullable1.GetValueOrDefault() == num1 & nullable1.HasValue)
      {
        string[] flowAllowedValuesB = new string[7];
        double num2 = 2.5;
        flowAllowedValuesB[0] = num2.ToString();
        flowAllowedValuesB[1] = 4.ToString();
        num2 = 6.3;
        flowAllowedValuesB[2] = num2.ToString();
        int num3 = 10;
        flowAllowedValuesB[3] = num3.ToString();
        num3 = 16;
        flowAllowedValuesB[4] = num3.ToString();
        num3 = 25;
        flowAllowedValuesB[5] = num3.ToString();
        flowAllowedValuesB[6] = string.Empty;
        return flowAllowedValuesB;
      }
      double? nullable2 = scaleFactorInputB;
      double num4 = 10.0;
      if (nullable2.GetValueOrDefault() == num4 & nullable2.HasValue)
      {
        string[] flowAllowedValuesB = new string[5];
        int num5 = 25;
        flowAllowedValuesB[0] = num5.ToString();
        num5 = 40;
        flowAllowedValuesB[1] = num5.ToString();
        num5 = 63;
        flowAllowedValuesB[2] = num5.ToString();
        num5 = 100;
        flowAllowedValuesB[3] = num5.ToString();
        flowAllowedValuesB[4] = string.Empty;
        return flowAllowedValuesB;
      }
      nullable2 = scaleFactorInputB;
      double num6 = 100.0;
      if (!(nullable2.GetValueOrDefault() == num6 & nullable2.HasValue))
        return new string[0];
      string[] flowAllowedValuesB1 = new string[6];
      int num7 = 160;
      flowAllowedValuesB1[0] = num7.ToString();
      num7 = 250;
      flowAllowedValuesB1[1] = num7.ToString();
      num7 = 400;
      flowAllowedValuesB1[2] = num7.ToString();
      num7 = 630;
      flowAllowedValuesB1[3] = num7.ToString();
      num7 = 1000;
      flowAllowedValuesB1[4] = num7.ToString();
      flowAllowedValuesB1[5] = string.Empty;
      return flowAllowedValuesB1;
    }

    public void SetNominalFlowA(double value)
    {
      double? scaleFactorInputA = this.GetScaleFactorInputA();
      double? nullable1 = scaleFactorInputA;
      double num1 = 1.0;
      if (nullable1.GetValueOrDefault() == num1 & nullable1.HasValue)
      {
        if (2.5 == value)
          this.SetValuesFromNominalFlowA((ushort) 62, (ushort) 625, (ushort) 187);
        if (4.0 == value)
          this.SetValuesFromNominalFlowA((ushort) 100, (ushort) 1000, (ushort) 300);
        if (6.3 == value)
          this.SetValuesFromNominalFlowA((ushort) 157, (ushort) 1575, (ushort) 472);
        if (10.0 == value)
          this.SetValuesFromNominalFlowA((ushort) 250, (ushort) 2500, (ushort) 750);
        if (16.0 == value)
          this.SetValuesFromNominalFlowA((ushort) 400, (ushort) 4000, (ushort) 1200);
        if (25.0 != value)
          return;
        this.SetValuesFromNominalFlowA((ushort) 625, (ushort) 6250, (ushort) 1875);
      }
      else
      {
        double? nullable2 = scaleFactorInputA;
        double num2 = 10.0;
        if (nullable2.GetValueOrDefault() == num2 & nullable2.HasValue)
        {
          if (25.0 == value)
            this.SetValuesFromNominalFlowA((ushort) 62, (ushort) 625, (ushort) 187);
          if (40.0 == value)
            this.SetValuesFromNominalFlowA((ushort) 100, (ushort) 1000, (ushort) 300);
          if (63.0 == value)
            this.SetValuesFromNominalFlowA((ushort) 157, (ushort) 1575, (ushort) 472);
          if (100.0 != value)
            return;
          this.SetValuesFromNominalFlowA((ushort) 250, (ushort) 2500, (ushort) 750);
        }
        else
        {
          nullable2 = scaleFactorInputA;
          double num3 = 100.0;
          if (nullable2.GetValueOrDefault() == num3 & nullable2.HasValue)
          {
            if (160.0 == value)
              this.SetValuesFromNominalFlowA((ushort) 40, (ushort) 400, (ushort) 120);
            if (250.0 == value)
              this.SetValuesFromNominalFlowA((ushort) 62, (ushort) 625, (ushort) 187);
            if (400.0 == value)
              this.SetValuesFromNominalFlowA((ushort) 100, (ushort) 1000, (ushort) 300);
            if (630.0 == value)
              this.SetValuesFromNominalFlowA((ushort) 157, (ushort) 1575, (ushort) 472);
            if (1000.0 != value)
              return;
            this.SetValuesFromNominalFlowA((ushort) 250, (ushort) 2500, (ushort) 750);
          }
          else
          {
            nullable2 = scaleFactorInputA;
            double num4 = 0.5;
            int num5;
            if (!(nullable2.GetValueOrDefault() == num4 & nullable2.HasValue))
            {
              nullable2 = scaleFactorInputA;
              double num6 = 5.0;
              num5 = nullable2.GetValueOrDefault() == num6 & nullable2.HasValue ? 1 : 0;
            }
            else
              num5 = 1;
            if (num5 != 0)
            {
              double num7 = value * 1000.0 / 4.0;
              this.SetValuesFromNominalFlowA(Convert.ToUInt16(num7 * 0.1 / scaleFactorInputA.Value), Convert.ToUInt16(num7 * 1.0 / scaleFactorInputA.Value), Convert.ToUInt16(num7 * 0.3 / scaleFactorInputA.Value));
            }
            else
            {
              string str1 = value.ToString();
              nullable2 = scaleFactorInputA;
              string str2 = nullable2.ToString();
              throw new NotImplementedException("Nominal flow: " + str1 + ", pulseMultiplierA: " + str2);
            }
          }
        }
      }
    }

    private void SetValuesFromNominalFlowA(
      ushort oversizeDiff,
      ushort undersizeDiff,
      ushort burstDiff)
    {
      this.SetOversizeDiffInputA(oversizeDiff);
      this.SetUndersizeDiffInputA(undersizeDiff);
      this.SetBurstDiffInputA(burstDiff);
    }

    public string GetNominalFlowA()
    {
      double? scaleFactorInputA = this.GetScaleFactorInputA();
      ushort? oversizeDiffInputA = this.GetOversizeDiffInputA();
      ushort? undersizeDiffInputA = this.GetUndersizeDiffInputA();
      ushort? burstDiffInputA = this.GetBurstDiffInputA();
      double? nullable1 = scaleFactorInputA;
      double num1 = 1.0;
      if (nullable1.GetValueOrDefault() == num1 & nullable1.HasValue)
      {
        ushort? nullable2 = oversizeDiffInputA;
        int? nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num2 = 62;
        int num3;
        if (nullable3.GetValueOrDefault() == num2 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputA;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num4 = 625;
          if (nullable3.GetValueOrDefault() == num4 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputA;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num5 = 187;
            num3 = nullable3.GetValueOrDefault() == num5 & nullable3.HasValue ? 1 : 0;
            goto label_5;
          }
        }
        num3 = 0;
label_5:
        if (num3 != 0)
          return 2.5.ToString();
        nullable2 = oversizeDiffInputA;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num6 = 100;
        int num7;
        if (nullable3.GetValueOrDefault() == num6 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputA;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num8 = 1000;
          if (nullable3.GetValueOrDefault() == num8 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputA;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num9 = 300;
            num7 = nullable3.GetValueOrDefault() == num9 & nullable3.HasValue ? 1 : 0;
            goto label_11;
          }
        }
        num7 = 0;
label_11:
        if (num7 != 0)
          return 4.ToString();
        nullable2 = oversizeDiffInputA;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num10 = 157;
        int num11;
        if (nullable3.GetValueOrDefault() == num10 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputA;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num12 = 1575;
          if (nullable3.GetValueOrDefault() == num12 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputA;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num13 = 472;
            num11 = nullable3.GetValueOrDefault() == num13 & nullable3.HasValue ? 1 : 0;
            goto label_17;
          }
        }
        num11 = 0;
label_17:
        if (num11 != 0)
          return 6.3.ToString();
        nullable2 = oversizeDiffInputA;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num14 = 250;
        int num15;
        if (nullable3.GetValueOrDefault() == num14 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputA;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num16 = 2500;
          if (nullable3.GetValueOrDefault() == num16 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputA;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num17 = 750;
            num15 = nullable3.GetValueOrDefault() == num17 & nullable3.HasValue ? 1 : 0;
            goto label_23;
          }
        }
        num15 = 0;
label_23:
        if (num15 != 0)
          return 10.ToString();
        nullable2 = oversizeDiffInputA;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num18 = 400;
        int num19;
        if (nullable3.GetValueOrDefault() == num18 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputA;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num20 = 4000;
          if (nullable3.GetValueOrDefault() == num20 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputA;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num21 = 1200;
            num19 = nullable3.GetValueOrDefault() == num21 & nullable3.HasValue ? 1 : 0;
            goto label_29;
          }
        }
        num19 = 0;
label_29:
        if (num19 != 0)
          return 16.ToString();
        nullable2 = oversizeDiffInputA;
        nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
        int num22 = 625;
        int num23;
        if (nullable3.GetValueOrDefault() == num22 & nullable3.HasValue)
        {
          nullable2 = undersizeDiffInputA;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
          int num24 = 6250;
          if (nullable3.GetValueOrDefault() == num24 & nullable3.HasValue)
          {
            nullable2 = burstDiffInputA;
            nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault()) : new int?();
            int num25 = 1875;
            num23 = nullable3.GetValueOrDefault() == num25 & nullable3.HasValue ? 1 : 0;
            goto label_35;
          }
        }
        num23 = 0;
label_35:
        if (num23 != 0)
          return 25.ToString();
      }
      else
      {
        double? nullable4 = scaleFactorInputA;
        double num26 = 10.0;
        if (nullable4.GetValueOrDefault() == num26 & nullable4.HasValue)
        {
          ushort? nullable5 = oversizeDiffInputA;
          int? nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
          int num27 = 62;
          int num28;
          if (nullable6.GetValueOrDefault() == num27 & nullable6.HasValue)
          {
            nullable5 = undersizeDiffInputA;
            nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
            int num29 = 625;
            if (nullable6.GetValueOrDefault() == num29 & nullable6.HasValue)
            {
              nullable5 = burstDiffInputA;
              nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
              int num30 = 187;
              num28 = nullable6.GetValueOrDefault() == num30 & nullable6.HasValue ? 1 : 0;
              goto label_42;
            }
          }
          num28 = 0;
label_42:
          if (num28 != 0)
            return 25.ToString();
          nullable5 = oversizeDiffInputA;
          nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
          int num31 = 100;
          int num32;
          if (nullable6.GetValueOrDefault() == num31 & nullable6.HasValue)
          {
            nullable5 = undersizeDiffInputA;
            nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
            int num33 = 1000;
            if (nullable6.GetValueOrDefault() == num33 & nullable6.HasValue)
            {
              nullable5 = burstDiffInputA;
              nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
              int num34 = 300;
              num32 = nullable6.GetValueOrDefault() == num34 & nullable6.HasValue ? 1 : 0;
              goto label_48;
            }
          }
          num32 = 0;
label_48:
          if (num32 != 0)
            return 40.ToString();
          nullable5 = oversizeDiffInputA;
          nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
          int num35 = 157;
          int num36;
          if (nullable6.GetValueOrDefault() == num35 & nullable6.HasValue)
          {
            nullable5 = undersizeDiffInputA;
            nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
            int num37 = 1575;
            if (nullable6.GetValueOrDefault() == num37 & nullable6.HasValue)
            {
              nullable5 = burstDiffInputA;
              nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
              int num38 = 472;
              num36 = nullable6.GetValueOrDefault() == num38 & nullable6.HasValue ? 1 : 0;
              goto label_54;
            }
          }
          num36 = 0;
label_54:
          if (num36 != 0)
            return 63.ToString();
          nullable5 = oversizeDiffInputA;
          nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
          int num39 = 250;
          int num40;
          if (nullable6.GetValueOrDefault() == num39 & nullable6.HasValue)
          {
            nullable5 = undersizeDiffInputA;
            nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
            int num41 = 2500;
            if (nullable6.GetValueOrDefault() == num41 & nullable6.HasValue)
            {
              nullable5 = burstDiffInputA;
              nullable6 = nullable5.HasValue ? new int?((int) nullable5.GetValueOrDefault()) : new int?();
              int num42 = 750;
              num40 = nullable6.GetValueOrDefault() == num42 & nullable6.HasValue ? 1 : 0;
              goto label_60;
            }
          }
          num40 = 0;
label_60:
          if (num40 != 0)
            return 100.ToString();
        }
        else
        {
          double? nullable7 = scaleFactorInputA;
          double num43 = 100.0;
          if (nullable7.GetValueOrDefault() == num43 & nullable7.HasValue)
          {
            ushort? nullable8 = oversizeDiffInputA;
            int? nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num44 = 40;
            int num45;
            if (nullable9.GetValueOrDefault() == num44 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputA;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num46 = 400;
              if (nullable9.GetValueOrDefault() == num46 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputA;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num47 = 120;
                num45 = nullable9.GetValueOrDefault() == num47 & nullable9.HasValue ? 1 : 0;
                goto label_67;
              }
            }
            num45 = 0;
label_67:
            if (num45 != 0)
              return 160.ToString();
            nullable8 = oversizeDiffInputA;
            nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num48 = 62;
            int num49;
            if (nullable9.GetValueOrDefault() == num48 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputA;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num50 = 625;
              if (nullable9.GetValueOrDefault() == num50 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputA;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num51 = 187;
                num49 = nullable9.GetValueOrDefault() == num51 & nullable9.HasValue ? 1 : 0;
                goto label_73;
              }
            }
            num49 = 0;
label_73:
            if (num49 != 0)
              return 250.ToString();
            nullable8 = oversizeDiffInputA;
            nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num52 = 100;
            int num53;
            if (nullable9.GetValueOrDefault() == num52 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputA;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num54 = 1000;
              if (nullable9.GetValueOrDefault() == num54 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputA;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num55 = 300;
                num53 = nullable9.GetValueOrDefault() == num55 & nullable9.HasValue ? 1 : 0;
                goto label_79;
              }
            }
            num53 = 0;
label_79:
            if (num53 != 0)
              return 400.ToString();
            nullable8 = oversizeDiffInputA;
            nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num56 = 157;
            int num57;
            if (nullable9.GetValueOrDefault() == num56 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputA;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num58 = 1575;
              if (nullable9.GetValueOrDefault() == num58 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputA;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num59 = 472;
                num57 = nullable9.GetValueOrDefault() == num59 & nullable9.HasValue ? 1 : 0;
                goto label_85;
              }
            }
            num57 = 0;
label_85:
            if (num57 != 0)
              return 630.ToString();
            nullable8 = oversizeDiffInputA;
            nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
            int num60 = 250;
            int num61;
            if (nullable9.GetValueOrDefault() == num60 & nullable9.HasValue)
            {
              nullable8 = undersizeDiffInputA;
              nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
              int num62 = 2500;
              if (nullable9.GetValueOrDefault() == num62 & nullable9.HasValue)
              {
                nullable8 = burstDiffInputA;
                nullable9 = nullable8.HasValue ? new int?((int) nullable8.GetValueOrDefault()) : new int?();
                int num63 = 750;
                num61 = nullable9.GetValueOrDefault() == num63 & nullable9.HasValue ? 1 : 0;
                goto label_91;
              }
            }
            num61 = 0;
label_91:
            if (num61 != 0)
              return 1000.ToString();
          }
        }
      }
      return string.Empty;
    }

    public string[] GetNominalFlowAllowedValuesA()
    {
      double? scaleFactorInputA = this.GetScaleFactorInputA();
      double? nullable1 = scaleFactorInputA;
      double num1 = 1.0;
      if (nullable1.GetValueOrDefault() == num1 & nullable1.HasValue)
      {
        string[] flowAllowedValuesA = new string[7];
        double num2 = 2.5;
        flowAllowedValuesA[0] = num2.ToString();
        flowAllowedValuesA[1] = 4.ToString();
        num2 = 6.3;
        flowAllowedValuesA[2] = num2.ToString();
        int num3 = 10;
        flowAllowedValuesA[3] = num3.ToString();
        num3 = 16;
        flowAllowedValuesA[4] = num3.ToString();
        num3 = 25;
        flowAllowedValuesA[5] = num3.ToString();
        flowAllowedValuesA[6] = string.Empty;
        return flowAllowedValuesA;
      }
      double? nullable2 = scaleFactorInputA;
      double num4 = 10.0;
      if (nullable2.GetValueOrDefault() == num4 & nullable2.HasValue)
      {
        string[] flowAllowedValuesA = new string[5];
        int num5 = 25;
        flowAllowedValuesA[0] = num5.ToString();
        num5 = 40;
        flowAllowedValuesA[1] = num5.ToString();
        num5 = 63;
        flowAllowedValuesA[2] = num5.ToString();
        num5 = 100;
        flowAllowedValuesA[3] = num5.ToString();
        flowAllowedValuesA[4] = string.Empty;
        return flowAllowedValuesA;
      }
      nullable2 = scaleFactorInputA;
      double num6 = 100.0;
      if (!(nullable2.GetValueOrDefault() == num6 & nullable2.HasValue))
        return new string[0];
      string[] flowAllowedValuesA1 = new string[6];
      int num7 = 160;
      flowAllowedValuesA1[0] = num7.ToString();
      num7 = 250;
      flowAllowedValuesA1[1] = num7.ToString();
      num7 = 400;
      flowAllowedValuesA1[2] = num7.ToString();
      num7 = 630;
      flowAllowedValuesA1[3] = num7.ToString();
      num7 = 1000;
      flowAllowedValuesA1[4] = num7.ToString();
      flowAllowedValuesA1[5] = string.Empty;
      return flowAllowedValuesA1;
    }

    public bool SetWarningsInputA(Warning value)
    {
      return this.SetParameterValue<ushort>("persistentFlagsA", (ushort) value);
    }

    public Warning? GetWarningsInputA()
    {
      return new Warning?((Warning) this.GetParameterValue<ushort>("persistentFlagsA"));
    }

    public bool SetWarningsInputB(Warning value)
    {
      return this.SetParameterValue<ushort>("persistentFlagsB", (ushort) value);
    }

    public Warning? GetWarningsInputB()
    {
      return new Warning?((Warning) this.GetParameterValue<ushort>("persistentFlagsB"));
    }

    public bool SetHardwareErrors(HardwareError value)
    {
      return this.SetParameterValue<ushort>("hwStatusFlags", (ushort) value);
    }

    public HardwareError? GetHardwareErrors()
    {
      return new HardwareError?((HardwareError) this.GetParameterValue<ushort>("hwStatusFlags"));
    }

    public bool SetBatteryEndDate(DateTime value)
    {
      if (value.Year < 2000 || value.Year > 2255)
        throw new ArgumentException("Can not set BatteryEndDate! The year of new value is invalid (Valid are: 2000-2255). Value: " + value.ToString());
      if (this.GetParameter("cfg_lowbatt_year") == null)
        throw new Exception("The firmware " + this.Version?.ToString() + " not supports BatteryEndDate parameter!");
      return this.SetParameterValue<byte>("cfg_lowbatt_year", (byte) (value.Year - 2000)) && this.SetParameterValue<byte>("cfg_lowbatt_month", (byte) value.Month) && this.SetParameterValue<byte>("cfg_lowbatt_day", (byte) value.Day);
    }

    public DateTime GetBatteryEndDate()
    {
      if (this.GetParameter("cfg_lowbatt_year") == null)
        throw new Exception("The firmware " + this.Version?.ToString() + " not supports BatteryEndDate parameter!");
      byte parameterValue1 = this.GetParameterValue<byte>("cfg_lowbatt_year");
      byte parameterValue2 = this.GetParameterValue<byte>("cfg_lowbatt_month");
      byte parameterValue3 = this.GetParameterValue<byte>("cfg_lowbatt_day");
      if (parameterValue1 == byte.MaxValue || parameterValue2 == byte.MaxValue || parameterValue3 == byte.MaxValue)
        return PDC_HandlerFunctions.DateTimeNull;
      if (parameterValue1 > byte.MaxValue || parameterValue2 > (byte) 12 || parameterValue3 > (byte) 31)
        return PDC_HandlerFunctions.DateTimeNull;
      try
      {
        return new DateTime(2000 + (int) parameterValue1, (int) parameterValue2, (int) parameterValue3);
      }
      catch
      {
        return PDC_HandlerFunctions.DateTimeNull;
      }
    }

    public bool SetObisPDC(string value)
    {
      if (string.IsNullOrEmpty(value))
        throw new ArgumentException("Can not set manufacturer! Input parameter 'value' is null.");
      return value.Length == 1 ? this.SetParameterValue<byte>("cfg_obis_c", Convert.ToByte(value, 16)) : throw new ArgumentException("Can not set manufacturer! The length of input parameter 'value' is not 1 chars.");
    }

    public string GetObisPDC()
    {
      return Convert.ToString(this.GetParameterValue<byte>("cfg_obis_c"), 16).ToUpper();
    }

    public bool SetObisInputA(string value)
    {
      if (string.IsNullOrEmpty(value))
        throw new ArgumentException("Can not set obis number! Input parameter 'value' is null.");
      return value.Length == 1 ? this.SetParameterValue<byte>("cfg_obis_a", Convert.ToByte(value, 16)) : throw new ArgumentException("Can not set obis number! The length of input parameter 'value' is not 1 chars.");
    }

    public string GetObisInputA()
    {
      return Convert.ToString(this.GetParameterValue<byte>("cfg_obis_a"), 16).ToUpper();
    }

    public bool SetObisInputB(string value)
    {
      if (string.IsNullOrEmpty(value))
        throw new ArgumentException("Can not set obis number! Input parameter 'value' is null.");
      return value.Length == 1 ? this.SetParameterValue<byte>("cfg_obis_b", Convert.ToByte(value, 16)) : throw new ArgumentException("Can not set obis number! The length of input parameter 'value' is not 1 chars.");
    }

    public string GetObisInputB()
    {
      return Convert.ToString(this.GetParameterValue<byte>("cfg_obis_b"), 16).ToUpper();
    }

    public bool SetSerialMBusPDC(uint value)
    {
      return this.SetParameterValue<uint>("cfg_serial_c", Util.ConvertUnt32ToBcdUInt32(value));
    }

    public uint? GetSerialMBusPDC()
    {
      return new uint?(Util.ConvertBcdUInt32ToUInt32(this.GetParameterValue<uint>("cfg_serial_c")));
    }

    public bool SetSerialMBusInputA(uint value)
    {
      return this.SetParameterValue<uint>("cfg_serial_a", Util.ConvertUnt32ToBcdUInt32(value));
    }

    public uint? GetSerialMBusInputA()
    {
      return new uint?(Util.ConvertBcdUInt32ToUInt32(this.GetParameterValue<uint>("cfg_serial_a")));
    }

    public bool SetSerialMBusInputB(uint value)
    {
      return this.SetParameterValue<uint>("cfg_serial_b", Util.ConvertUnt32ToBcdUInt32(value));
    }

    public uint? GetSerialMBusInputB()
    {
      return new uint?(Util.ConvertBcdUInt32ToUInt32(this.GetParameterValue<uint>("cfg_serial_b")));
    }

    public ConfigInit? GetConfigInitIndicator()
    {
      return new ConfigInit?((ConfigInit) this.GetParameterValue<byte>("configInitIndicator"));
    }

    public bool DisableLeakDetectionInputA() => this.SetPulseLeakLimitInputA((ushort) 0);

    public bool DisableBurstDetectionInputA() => this.SetBurstLimitInputA((ushort) 0);

    public bool DisableStandstillDetectionInputA() => this.SetPulseBlockLimitInputA((ushort) 0);

    public bool DisableUndersizeDetectionInputA() => this.SetUndersizeLimitInputA((ushort) 0);

    public bool DisableOversizeDetectionInputA() => this.SetOversizeLimitInputA((ushort) 0);

    public bool DisableLeakDetectionInputB() => this.SetPulseLeakLimitInputB((ushort) 0);

    public bool DisableBurstDetectionInputB() => this.SetBurstLimitInputB((ushort) 0);

    public bool DisableStandstillDetectionInputB() => this.SetPulseBlockLimitInputB((ushort) 0);

    public bool DisableUndersizeDetectionInputB() => this.SetUndersizeLimitInputB((ushort) 0);

    public bool DisableOversizeDetectionInputB() => this.SetOversizeLimitInputB((ushort) 0);

    internal SortedList<long, SortedList<DateTime, ReadingValue>> GetValues(
      int channel,
      List<long> filter)
    {
      SortedList<long, SortedList<DateTime, ReadingValue>> valueList = new SortedList<long, SortedList<DateTime, ReadingValue>>();
      DateTime? systemTime = this.GetSystemTime();
      if (!systemTime.HasValue)
        return (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      DateTime timePoint = systemTime.Value;
      Warning? warnings = new Warning?();
      MBusDeviceType? nullable1 = new MBusDeviceType?();
      byte? nullable2 = new byte?();
      switch (channel)
      {
        case 1:
          warnings = this.GetWarningsInputA();
          nullable1 = this.GetMediumInputA();
          nullable2 = this.GetVIFInputA();
          break;
        case 2:
          warnings = this.GetWarningsInputB();
          nullable1 = this.GetMediumInputB();
          nullable2 = this.GetVIFInputB();
          break;
      }
      if (!nullable1.HasValue)
        return (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      ValueIdent.ValueIdPart_MeterType meterType = ValueIdent.ConvertToMeterType(nullable1.Value);
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity = ValueIdent.ConvertToPhysicalQuantity(nullable2.Value);
      HardwareError? hardwareErrors = this.GetHardwareErrors();
      if (this.IsWarning(warnings, Warning.WARNING_BATT_LOW))
        ValueIdent.AddValueToValueIdentList(ref valueList, new DateTime(timePoint.Year, timePoint.Month, timePoint.Day), ValueIdent.GetValueIdentOfWarninig(meterType, ValueIdent.ValueIdentWarning.BatteryLow, ValueIdent.ValueIdPart_Creation.Meter), (object) 1);
      if (this.IsWarning(warnings, Warning.WARNING_LEAK))
        ValueIdent.AddValueToValueIdentList(ref valueList, new DateTime(timePoint.Year, timePoint.Month, timePoint.Day), ValueIdent.GetValueIdentOfWarninig(meterType, ValueIdent.ValueIdentWarning.Leak, ValueIdent.ValueIdPart_Creation.Meter), (object) 1);
      if (this.IsWarning(warnings, Warning.WARNING_BLOCK))
        ValueIdent.AddValueToValueIdentList(ref valueList, new DateTime(timePoint.Year, timePoint.Month, timePoint.Day), ValueIdent.GetValueIdentOfWarninig(meterType, ValueIdent.ValueIdentWarning.Blockage, ValueIdent.ValueIdPart_Creation.Meter), (object) 1);
      if (this.IsWarning(warnings, Warning.WARNING_OVERSIZE))
        ValueIdent.AddValueToValueIdentList(ref valueList, new DateTime(timePoint.Year, timePoint.Month, timePoint.Day), ValueIdent.GetValueIdentOfWarninig(meterType, ValueIdent.ValueIdentWarning.Oversized, ValueIdent.ValueIdPart_Creation.Meter), (object) 1);
      if (this.IsWarning(warnings, Warning.WARNING_UNDERSIZE))
        ValueIdent.AddValueToValueIdentList(ref valueList, new DateTime(timePoint.Year, timePoint.Month, timePoint.Day), ValueIdent.GetValueIdentOfWarninig(meterType, ValueIdent.ValueIdentWarning.Undersized, ValueIdent.ValueIdPart_Creation.Meter), (object) 1);
      if (this.IsWarning(warnings, Warning.WARNING_ABNORMAL) || this.IsWarning(warnings, Warning.WARNING_PERMANENT_ERROR) || this.IsError(hardwareErrors, HardwareError.HW_ERROR_OSCILLATOR))
        ValueIdent.AddValueToValueIdentList(ref valueList, new DateTime(timePoint.Year, timePoint.Month, timePoint.Day), ValueIdent.GetValueIdentOfError(meterType, ValueIdent.ValueIdentError.DeviceError), (object) 1);
      long valueIdForValueEnum = ValueIdent.GetValueIdForValueEnum(physicalQuantity, meterType, ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, ValueIdent.ValueIdPart_StorageInterval.None, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
      if (ValueIdent.IsExpectedValueIdent(filter, valueIdForValueEnum))
      {
        uint? nullable3 = new uint?();
        switch (channel)
        {
          case 1:
            nullable3 = this.GetMeterValueA();
            break;
          case 2:
            nullable3 = this.GetMeterValueB();
            break;
        }
        if (nullable3.HasValue)
          ValueIdent.AddValueToValueIdentList(ref valueList, timePoint, valueIdForValueEnum, (object) nullable3.Value);
      }
      List<RamLogger> ramLogger = LoggerManager.ParseRamLogger(this);
      if (ramLogger == null)
        return (SortedList<long, SortedList<DateTime, ReadingValue>>) null;
      this.CreateValues(channel, meterType, physicalQuantity, ref valueList, ramLogger, filter, ValueIdent.ValueIdPart_StorageInterval.QuarterHour, RamLoggerType.QuarterHour);
      this.CreateValues(channel, meterType, physicalQuantity, ref valueList, ramLogger, filter, ValueIdent.ValueIdPart_StorageInterval.Day, RamLoggerType.Daily);
      this.CreateValues(channel, meterType, physicalQuantity, ref valueList, ramLogger, filter, ValueIdent.ValueIdPart_StorageInterval.HalfMonth, RamLoggerType.Halfmonth);
      this.CreateValues(channel, meterType, physicalQuantity, ref valueList, ramLogger, filter, ValueIdent.ValueIdPart_StorageInterval.Month, RamLoggerType.Fullmonth);
      this.CreateValues(channel, meterType, physicalQuantity, ref valueList, ramLogger, filter, ValueIdent.ValueIdPart_StorageInterval.DueDate, RamLoggerType.DueDate);
      ValueIdent.CleanUpEmptyValueIdents(valueList);
      return valueList;
    }

    private bool IsError(HardwareError? errors, HardwareError error)
    {
      return errors.HasValue && (errors.Value & error) == error;
    }

    private bool IsWarning(Warning? warnings, Warning warning)
    {
      return warnings.HasValue && (warnings.Value & warning) == warning;
    }

    private void CreateValues(
      int channel,
      ValueIdent.ValueIdPart_MeterType medium,
      ValueIdent.ValueIdPart_PhysicalQuantity physicalQuantity,
      ref SortedList<long, SortedList<DateTime, ReadingValue>> valueList,
      List<RamLogger> loggers,
      List<long> filter,
      ValueIdent.ValueIdPart_StorageInterval interval,
      RamLoggerType type)
    {
      long valueIdForValueEnum = ValueIdent.GetValueIdForValueEnum(physicalQuantity, medium, ValueIdent.ValueIdPart_Calculation.Current, ValueIdent.ValueIdPart_CalculationStart.MeterProduction, interval, ValueIdent.ValueIdPart_Creation.Meter, (object) ValueIdent.ValueIdPart_Index.Any);
      if (!ValueIdent.IsExpectedValueIdent(filter, valueIdForValueEnum))
        return;
      RamLogger ramLogger = loggers.Find((Predicate<RamLogger>) (x => x.Type == type));
      if (ramLogger != null)
      {
        SortedList<DateTime, ReadValue> values = ramLogger.Values;
        if (values != null)
        {
          foreach (KeyValuePair<DateTime, ReadValue> keyValuePair in values)
          {
            switch (channel)
            {
              case 1:
                ValueIdent.AddValueToValueIdentList(ref valueList, keyValuePair.Key, valueIdForValueEnum, (object) keyValuePair.Value.A);
                continue;
              case 2:
                ValueIdent.AddValueToValueIdentList(ref valueList, keyValuePair.Key, valueIdForValueEnum, (object) keyValuePair.Value.B);
                continue;
              default:
                continue;
            }
          }
        }
      }
    }

    public string GetInfo() => this.ToString();
  }
}


--- PlugInAnchor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.PlugInAnchor
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using PlugInLib;
using StartupLib;

#nullable disable
namespace PDC_Handler
{
  [ComponentPath("Configuration/Handler")]
  internal class PlugInAnchor : GmmPlugIn
  {
    private PDC_HandlerFunctions MyFunctions;
    internal static string[] UsedRights = new string[2]
    {
      "Developer",
      "Right\\ReadOnly"
    };

    public PlugInAnchor()
    {
      if (!PlugInLoader.IsPluginLoaderInitialised())
        return;
      this.MyFunctions = new PDC_HandlerFunctions();
    }

    public override void Dispose() => this.MyFunctions.GMM_Dispose();

    public override string ShowMainWindow() => this.MyFunctions.ShowHandlerWindow();

    public override PlugInInfo GetPluginInfo()
    {
      return new PlugInInfo("PDC_Handler", "Configuration", "Change PDC device settings", "View and change device settings.", new string[2]
      {
        "AsyncCom",
        "DeviceCollector"
      }, PlugInAnchor.UsedRights, (object) this.MyFunctions);
    }
  }
}


--- RadioFlagsPDCwMBus.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.RadioFlagsPDCwMBus
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;

#nullable disable
namespace PDC_Handler
{
  [Flags]
  public enum RadioFlagsPDCwMBus : byte
  {
    CONFIG_RADIO_LONGHEADER = 1,
    CONFIG_RADIO_ENCRYPT = 2,
    CONFIG_RADIO_SYNCHRONOUS = 4,
    CONFIG_RADIO_INSTALL = 8,
    CONFIG_RADIO_CHANNEL_A = 16, // 0x10
    CONFIG_RADIO_CHANNEL_B = 32, // 0x20
    CONFIG_RADIO_ENCRYPT_7 = 64, // 0x40
  }
}


--- RadioList.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.RadioList
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  public enum RadioList : byte
  {
    LIST_A,
    LIST_B,
    LIST_C,
  }
}


--- RadioPower.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.RadioPower
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  public enum RadioPower : byte
  {
    Minus30dB,
    Minus20dB,
    Minus10dB,
    Minus5dB,
    Plus0dB,
    Plus5dB,
    Plus7dB,
    Plus10dB,
  }
}


--- RamLogger.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.RamLogger
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using System.Collections.Generic;
using System.Data;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public sealed class RamLogger
  {
    public RamLoggerType Type { get; set; }

    public RamLoggerHeader Header { get; set; }

    public List<ReadValue> Data { get; set; }

    public SortedList<DateTime, ReadValue> Values
    {
      get
      {
        if (this.Data == null || this.Header == null || !this.Header.LastDate.HasValue || this.Header.Length < (byte) 1)
          return (SortedList<DateTime, ReadValue>) null;
        SortedList<DateTime, ReadValue> values = new SortedList<DateTime, ReadValue>((int) this.Header.Length);
        DateTime dateTime1 = this.Header.LastDate.Value;
        DateTime dateTime2 = new DateTime(dateTime1.Year, dateTime1.Month, dateTime1.Day, dateTime1.Hour, dateTime1.Minute, 0);
        int num = (int) this.Header.FifoEnd - 1;
        for (int index = 0; index < (int) this.Header.Length; ++index)
        {
          if (index <= num)
          {
            switch (this.Type)
            {
              case RamLoggerType.QuarterHour:
                values.Add(dateTime2.AddMinutes((double) (-15 * (num - index))), this.Data[index]);
                continue;
              case RamLoggerType.Daily:
                values.Add(dateTime2.AddDays((double) (-1 * (num - index))), this.Data[index]);
                continue;
              case RamLoggerType.Halfmonth:
                values.Add(dateTime2.AddMonths(-1 * (num - index)), this.Data[index]);
                continue;
              case RamLoggerType.Fullmonth:
                values.Add(dateTime2.AddMonths(-1 * (num - index)), this.Data[index]);
                continue;
              case RamLoggerType.DueDate:
                values.Add(dateTime2.AddYears(-1 * (num - index)), this.Data[index]);
                continue;
              default:
                throw new NotSupportedException(this.Type.ToString());
            }
          }
          else
          {
            switch (this.Type)
            {
              case RamLoggerType.QuarterHour:
                values.Add(dateTime2.AddMinutes((double) (-15 * ((int) this.Header.Length - (index - num)))), this.Data[index]);
                break;
              case RamLoggerType.Daily:
                values.Add(dateTime2.AddDays((double) (-1 * ((int) this.Header.Length - (index - num)))), this.Data[index]);
                break;
              case RamLoggerType.Halfmonth:
                values.Add(dateTime2.AddMonths(-1 * ((int) this.Header.Length - (index - num))), this.Data[index]);
                break;
              case RamLoggerType.Fullmonth:
                values.Add(dateTime2.AddMonths(-1 * ((int) this.Header.Length - (index - num))), this.Data[index]);
                break;
              case RamLoggerType.DueDate:
                values.Add(dateTime2.AddYears(-1 * ((int) this.Header.Length - (index - num))), this.Data[index]);
                break;
              default:
                throw new NotSupportedException(this.Type.ToString());
            }
          }
        }
        return values;
      }
    }

    public bool? IsCrcOK
    {
      get
      {
        if (this.Header == null || this.Data == null)
          return new bool?();
        List<byte> buffer = new List<byte>();
        this.Data.ForEach((Action<ReadValue>) (x => buffer.AddRange((IEnumerable<byte>) x.Buffer)));
        return new bool?((int) this.Header.CRC == (int) Util.CalculatesCRC16_CC430(buffer.ToArray(), 0, (int) this.Header.MaxLength * 4));
      }
    }

    public RamLogger() => this.Data = new List<ReadValue>();

    public override string ToString()
    {
      return this.Type.ToString() + " " + this.Data.Count.ToString() + " items";
    }

    public DataTable CreateTableValues()
    {
      SortedList<DateTime, ReadValue> values = this.Values;
      if (values == null)
        return (DataTable) null;
      DataTable tableValues = new DataTable();
      tableValues.Columns.Add("#", typeof (int));
      tableValues.Columns.Add("Date", typeof (DateTime));
      tableValues.Columns.Add("ValueInputA", typeof (uint));
      tableValues.Columns.Add("ValueinputB", typeof (uint));
      int num = 1;
      foreach (KeyValuePair<DateTime, ReadValue> keyValuePair in values)
        tableValues.Rows.Add((object) num++, (object) keyValuePair.Key, (object) keyValuePair.Value.A, (object) keyValuePair.Value.B);
      return tableValues;
    }

    public DataTable CreateTableRawData()
    {
      if (this.Header == null || this.Data == null || this.Data.Count == 0)
        return (DataTable) null;
      DataTable tableRawData = new DataTable();
      tableRawData.Columns.Add("Position", typeof (int));
      tableRawData.Columns.Add("Address", typeof (string));
      tableRawData.Columns.Add("ValueInputA", typeof (uint));
      tableRawData.Columns.Add("ValueInputB", typeof (uint));
      for (int index = 0; index < (int) this.Header.MaxLength; ++index)
        tableRawData.Rows.Add((object) (index + 1), (object) ("0x" + ((int) this.Header.Address + index * 4).ToString("X4")), (object) this.Data[index].A, (object) this.Data[index].B);
      return tableRawData;
    }
  }
}


--- RamLoggerFifoType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.RamLoggerFifoType
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  public enum RamLoggerFifoType : byte
  {
    QUARTERHOUR,
    DAILY,
    MONTHLY,
    YEARLY,
  }
}


--- RamLoggerHeader.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.RamLoggerHeader
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;

#nullable disable
namespace PDC_Handler
{
  public sealed class RamLoggerHeader
  {
    public ushort Address { get; set; }

    public byte MaxLength { get; set; }

    public byte Length { get; set; }

    public byte FifoEnd { get; set; }

    public RamLoggerFifoType Flags { get; set; }

    public DateTime? LastDate { get; set; }

    public ushort CRC { get; set; }

    public override string ToString()
    {
      return string.Format("{0} ADDR:0x{1:X4}, MAX:{2}, LENGTH:{3}, FIFO_END:{4}, LAST_DATE:{5}, CRC:0x{6:X4}", (object) this.Flags, (object) this.Address, (object) this.MaxLength, (object) this.Length, (object) this.FifoEnd, (object) this.LastDate, (object) this.CRC);
    }

    internal byte[] ToByteArray()
    {
      byte num1 = byte.MaxValue;
      byte num2 = byte.MaxValue;
      byte num3 = byte.MaxValue;
      byte num4 = byte.MaxValue;
      byte num5 = byte.MaxValue;
      byte num6 = byte.MaxValue;
      if (this.LastDate.HasValue)
      {
        DateTime? lastDate = this.LastDate;
        num1 = (byte) (lastDate.Value.Year - 2000);
        lastDate = this.LastDate;
        num2 = (byte) lastDate.Value.Month;
        lastDate = this.LastDate;
        num3 = (byte) lastDate.Value.Day;
        lastDate = this.LastDate;
        DateTime dateTime = lastDate.Value;
        num4 = (byte) dateTime.Hour;
        lastDate = this.LastDate;
        dateTime = lastDate.Value;
        num5 = (byte) dateTime.Minute;
        lastDate = this.LastDate;
        dateTime = lastDate.Value;
        num6 = (byte) dateTime.Second;
      }
      return new byte[14]
      {
        (byte) this.Address,
        (byte) ((uint) this.Address >> 8),
        this.MaxLength,
        this.Length,
        this.FifoEnd,
        (byte) this.Flags,
        num1,
        num2,
        num3,
        num4,
        num5,
        num6,
        (byte) this.CRC,
        (byte) ((uint) this.CRC >> 8)
      };
    }

    internal static RamLoggerHeader Parse(byte[] buffer, ref ushort offset)
    {
      ushort startIndex = offset;
      offset += (ushort) 14;
      return new RamLoggerHeader()
      {
        Address = BitConverter.ToUInt16(buffer, (int) startIndex),
        MaxLength = buffer[(int) startIndex + 2],
        Length = buffer[(int) startIndex + 3],
        FifoEnd = buffer[(int) startIndex + 4],
        Flags = (RamLoggerFifoType) buffer[(int) startIndex + 5],
        LastDate = RamLoggerHeader.ParseDateTime(buffer, (int) startIndex + 6),
        CRC = BitConverter.ToUInt16(buffer, (int) startIndex + 12)
      };
    }

    private static DateTime? ParseDateTime(byte[] buffer, int offset)
    {
      byte num = buffer[offset];
      byte month = buffer[1 + offset];
      byte day = buffer[2 + offset];
      byte hour = buffer[3 + offset];
      byte minute = buffer[4 + offset];
      byte second = buffer[5 + offset];
      if (num == byte.MaxValue || month == byte.MaxValue || day == byte.MaxValue || hour == byte.MaxValue || minute == byte.MaxValue || second == byte.MaxValue)
        return new DateTime?();
      if (num > byte.MaxValue || month > (byte) 12 || day > (byte) 31 || minute > (byte) 59 || second > (byte) 59)
        return new DateTime?();
      try
      {
        return new DateTime?(new DateTime(2000 + (int) num, (int) month, (int) day, (int) hour, (int) minute, (int) second));
      }
      catch
      {
        return new DateTime?();
      }
    }
  }
}


--- RamLoggerType.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.RamLoggerType
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

#nullable disable
namespace PDC_Handler
{
  public enum RamLoggerType
  {
    None,
    QuarterHour,
    Daily,
    Halfmonth,
    Fullmonth,
    DueDate,
  }
}


--- ReadValue.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.ReadValue
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;

#nullable disable
namespace PDC_Handler
{
  public struct ReadValue
  {
    public uint A;
    public uint B;

    public byte[] Buffer
    {
      get
      {
        byte[] bytes1 = BitConverter.GetBytes(this.A);
        byte[] bytes2 = BitConverter.GetBytes(this.B);
        byte[] buffer = new byte[bytes1.Length + bytes2.Length];
        bytes1.CopyTo((Array) buffer, 0);
        bytes2.CopyTo((Array) buffer, bytes1.Length);
        return buffer;
      }
    }

    public override string ToString()
    {
      return string.Format("A: {0}, B: {1}", (object) this.A, (object) this.B);
    }
  }
}


--- Simulator.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.Simulator
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using NLog;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;

#nullable disable
namespace PDC_Handler
{
  public class Simulator : Form
  {
    private static Logger logger = LogManager.GetLogger("LoggerSimulator");
    private PDC_HandlerFunctions handler;
    private bool isStopped;
    private const string TEST_READ = "Test: Read 1000 times meter values of input A";
    private const string TEST_READDEVICE_WITH_SLEEP = "Test: Read device with sleep time 22000";
    private const string TEST_READDEVICE = "Test: Read device without sleep";
    private IContainer components = (IContainer) null;
    private Button btnExecute;
    private TextBox txtStatus;
    private Button btnStop;
    private ComboBox cboxTestList;

    public Simulator() => this.InitializeComponent();

    private void Simulator_Load(object sender, EventArgs e)
    {
      this.cboxTestList.Items.Clear();
      this.cboxTestList.Items.Add((object) "Test: Read 1000 times meter values of input A");
      this.cboxTestList.Items.Add((object) "Test: Read device with sleep time 22000");
      this.cboxTestList.Items.Add((object) "Test: Read device without sleep");
      this.cboxTestList.SelectedIndex = 0;
    }

    internal static void ShowDialog(Form owner, PDC_HandlerFunctions MyFunctions)
    {
      if (MyFunctions == null)
        return;
      using (Simulator simulator = new Simulator())
      {
        simulator.handler = MyFunctions;
        int num = (int) simulator.ShowDialog((IWin32Window) owner);
      }
    }

    private void btnExecute_Click(object sender, EventArgs e)
    {
      if (this.cboxTestList.SelectedItem == null || this.cboxTestList.SelectedItem.ToString() == string.Empty)
        return;
      this.cboxTestList.Enabled = false;
      this.btnExecute.Enabled = false;
      this.btnStop.Enabled = true;
      this.isStopped = false;
      try
      {
        switch (this.cboxTestList.SelectedItem.ToString())
        {
          case "Test: Read 1000 times meter values of input A":
            this.TestRead();
            break;
          case "Test: Read device with sleep time 22000":
            this.TestReadDeviceWithSleep();
            break;
          case "Test: Read device without sleep":
            this.TestReadDeviceWith();
            break;
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, "Simulation failed! " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      finally
      {
        this.btnExecute.Enabled = true;
        this.btnStop.Enabled = false;
        this.cboxTestList.Enabled = true;
      }
    }

    private void btnStop_Click(object sender, EventArgs e) => this.isStopped = true;

    private void TestRead()
    {
      string newLine = Environment.NewLine;
      for (uint index = 1; !this.isStopped && index <= 1000U; ++index)
        this.txtStatus.AppendText("A: " + this.handler.ReadMeterValue((byte) 0).ToString() + newLine);
    }

    private void TestReadDeviceWithSleep()
    {
      string newLine = Environment.NewLine;
      for (uint index = 1; !this.isStopped && index <= 40U; ++index)
      {
        if (this.handler.ReadDevice())
        {
          this.txtStatus.AppendText("OK: 22000 ms sleep time" + newLine);
          Thread.Sleep(22000);
        }
        else
          this.txtStatus.AppendText("Failed no sleep" + newLine);
      }
    }

    private void TestReadDeviceWith()
    {
      string newLine = Environment.NewLine;
      for (uint index = 1; !this.isStopped && index <= 200U; ++index)
      {
        if (this.handler.ReadDevice())
          this.txtStatus.AppendText("OK: " + newLine);
        else
          this.txtStatus.AppendText("Failed " + newLine);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Simulator));
      this.btnExecute = new Button();
      this.txtStatus = new TextBox();
      this.btnStop = new Button();
      this.cboxTestList = new ComboBox();
      this.SuspendLayout();
      this.btnExecute.Location = new Point(12, 12);
      this.btnExecute.Name = "btnExecute";
      this.btnExecute.Size = new Size(75, 23);
      this.btnExecute.TabIndex = 0;
      this.btnExecute.Text = "Execute";
      this.btnExecute.UseVisualStyleBackColor = true;
      this.btnExecute.Click += new EventHandler(this.btnExecute_Click);
      this.txtStatus.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtStatus.Location = new Point(12, 41);
      this.txtStatus.Multiline = true;
      this.txtStatus.Name = "txtStatus";
      this.txtStatus.ScrollBars = ScrollBars.Vertical;
      this.txtStatus.Size = new Size(535, 430);
      this.txtStatus.TabIndex = 1;
      this.btnStop.Enabled = false;
      this.btnStop.Location = new Point(93, 12);
      this.btnStop.Name = "btnStop";
      this.btnStop.Size = new Size(75, 23);
      this.btnStop.TabIndex = 2;
      this.btnStop.Text = "Stop";
      this.btnStop.UseVisualStyleBackColor = true;
      this.btnStop.Click += new EventHandler(this.btnStop_Click);
      this.cboxTestList.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.cboxTestList.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxTestList.FormattingEnabled = true;
      this.cboxTestList.Location = new Point(195, 13);
      this.cboxTestList.Name = "cboxTestList";
      this.cboxTestList.Size = new Size(352, 21);
      this.cboxTestList.TabIndex = 3;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(559, 483);
      this.Controls.Add((Control) this.cboxTestList);
      this.Controls.Add((Control) this.btnStop);
      this.Controls.Add((Control) this.txtStatus);
      this.Controls.Add((Control) this.btnExecute);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Simulator);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = nameof (Simulator);
      this.Load += new EventHandler(this.Simulator_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- TestCommand.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.TestCommand
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using AsyncCom;
using DeviceCollector;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO.Ports;
using System.Threading;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public class TestCommand : Form
  {
    private PDC_HandlerFunctions pdcHandler;
    private bool isCanceled;
    private Stopwatch stopwatch;
    private GMMSettings settingsForSecondMinoConnect;
    private static DeviceCollectorFunctions secondDeviceCollector;
    private IContainer components = (IContainer) null;
    private TextBox txtOutput;
    private StatusStrip statusStrip;
    private ToolStripStatusLabel lblStatus;
    private ToolStripProgressBar progress;
    private ToolStripStatusLabel lblProgress;
    private ToolStripStatusLabel lblPerformance;
    private GroupBox groupBox2;
    private TabPage tabGenerally;
    private Button btnRadioNormal;
    private Button btnRadioPN9;
    private Button btnResetDevice;
    private Button btnRadioDisable;
    private Button btnRadioOOK;
    private Button btnReadVersion;
    private Button btnPulseDisable;
    private Button btnPulseEnable;
    private Button btnSendAck;
    private Button btnRunRamBackup;
    private TabControl tabs;
    private GroupBox groupBox3;
    private Button btnReadSystemTime;
    private Button btnWriteSystemTime;
    private DateTimePicker txtSystemTime;
    private TabPage tabMinoConnect;
    private Button btnReceiveRadioPacket;
    private NumericUpDown txtSerialnumberInputA;
    private Label label6;
    private Label label8;
    private ComboBox cboxRadioMode;
    private GroupBox groupBox5;
    private Label label9;
    private NumericUpDown txtTimeout;
    private Label label7;
    private GroupBox groupBox7;
    private Label label34;
    private NumericUpDown txtRadioTimeout;
    private Label label17;
    private NumericUpDown txtRadioFrequencyOffset;
    private Label label10;
    private ComboBox cboxRadioModeForTest;
    private Button btnRadioReceive;
    private GroupBox groupBox6;
    private Label label11;
    private NumericUpDown txtTimeoutRadioReceive;
    private GroupBox groupBox9;
    private Button btnStopSendMinoConnectTestPacket;
    private Label label13;
    private ComboBox cboxRadioModeForMiConTestPacket;
    private Button btnStartSendMinoConnectTestPacket;
    private NumericUpDown txtSendTestPacketPower;
    private Label label12;
    private Label label14;
    private ComboBox cboxPortNames;
    private Button btnCloseSecondaryComPort;
    private Button btnOpenSecondaryComPort;
    private Button btnStartRadioReceiver;
    private Button btnSND_NKE_IrDaOff;
    private TabPage tabMemory;
    private Button btnEventLogClear;
    private GroupBox groupBox1;
    private Label label5;
    private Label label4;
    private Label label3;
    private TextBox txtByteSize;
    private Label label2;
    private TextBox txtEndAddress;
    private TextBox txtStartAddress;
    private Label label1;
    private Label lblStartAddress;
    private Button btnReadMemory;
    private Button btnSystemLogClear;
    private Button btnSetCurrentTime;
    private TabPage tabChannels;
    private Button btnReadMeterValueA;
    private Label label16;
    private NumericUpDown txtMeterValueA;
    private Button btnWriteMeterValueA;
    private TabPage tabConfig;
    private Label label19;
    private Label label15;
    private Button btnRadioFlagsClear;
    private Button btnConfigFlagsClear;
    private Button btnRadioFlagsSet;
    private Button btnConfigFlagsSet;
    private Button btnRadioFlagsWrite;
    private Button btnConfigFlagsWrite;
    private Button btnRadioFlagsRead;
    private Button btnConfigFlagsRead;
    private TextBox txtRadioFlags;
    private TextBox txtConfigFlags;
    private Button btnSerialWrite;
    private Button btnSerialRead;
    private TextBox txtSerialABC;
    private Label label21;
    private ComboBox cboxConfigChannel;
    private Label label25;
    private Button btnMBusIdWrite;
    private Button btnManIdRead;
    private TextBox txtManIdABC;
    private Label label24;
    private Button btnMBusTypeWrite;
    private Button btnMBusTypeRead;
    private TextBox txtMBusTypeABC;
    private Label label23;
    private Button btnMBusVersionWrite;
    private Button btnMBusVersionRead;
    private TextBox txtMBusVersionABC;
    private Label label22;
    private Button btnMBusAddressWrite;
    private Button btnMBusAddressRead;
    private TextBox txtMBusAddressABC;
    private Label label20;
    private NumericUpDown txtKeyMonth;
    private NumericUpDown txtKeyDay;
    private Label label26;
    private Button btnKeydateWrite;
    private Button btnKeydateRead;
    private NumericUpDown txtRadioList;
    private Label label27;
    private Button btnRadioListWrite;
    private Button btnRadioListRead;
    private Button btnRadioListQuery;
    private Button btnResetDelivery;
    private Button btnStatusFlagsARead;
    private Label label28;
    private Button btnStatusFlagsAClear;
    private TextBox txtStatusFlagsA;
    private Label label31;
    private Button btnObisWrite;
    private Button btnObisRead;
    private TextBox txtObisCode;
    private NumericUpDown txtExponentA;
    private NumericUpDown txtMantissaA;
    private Button btnExponentARead;
    private Label label33;
    private Button btnExponentAWrite;
    private Button btnMantissaARead;
    private Label label32;
    private Button btnMantissaAWrite;
    private TextBox txtVIFA;
    private Label label37;
    private NumericUpDown txtPulseOn;
    private NumericUpDown txtPulsePeriod;
    private Label label38;
    private Button btnPulseWrite;
    private Button btnPulseRead;
    private NumericUpDown txtLower;
    private Button btnLeakRead;
    private Label label42;
    private Button btnLeakWrite;
    private NumericUpDown txtUpper;
    private Label label41;
    private NumericUpDown txtUnleak;
    private Label label40;
    private NumericUpDown txtLeak;
    private Label label39;
    private NumericUpDown txtUndersizeLimit;
    private Button btnUndersizeRead;
    private Label label36;
    private Button btnUndersizeWrite;
    private NumericUpDown txtOversizeLimit;
    private Button btnOversizeRead;
    private Label label35;
    private Button btnOversizeWrite;
    private NumericUpDown txtBurstDiff;
    private Button btnBurstRead;
    private Label label30;
    private Button btnBurstWrite;
    private NumericUpDown txtBlock;
    private Button btnBlockRead;
    private Label label29;
    private Button btnBlockWrite;
    private Label label18;
    private ComboBox comboChannel;
    private Button btnVIFARead;
    private Button btnVIFAWrite;
    private NumericUpDown txtBurstLimit;
    private Label label43;
    private NumericUpDown txtUndersizeDiff;
    private Label label45;
    private NumericUpDown txtOversizeDiff;
    private Label label44;
    private TabPage tabMBus;
    private Button btnMBusStatusQuery;
    private Button btnDepassNow;
    private NumericUpDown txtDepassPeriod;
    private NumericUpDown txtDepassTimeout;
    private Label label46;
    private Button btnDepassWrite;
    private Button btnDepassRead;

    public TestCommand()
    {
      this.InitializeComponent();
      this.stopwatch = new Stopwatch();
      this.isCanceled = false;
      this.ResetUI();
    }

    public TestCommand(PDC_HandlerFunctions MyFunctions)
      : this()
    {
      this.pdcHandler = MyFunctions;
    }

    internal static void ShowDialog(Form owner, PDC_HandlerFunctions pdcHandler)
    {
      if (pdcHandler == null)
        return;
      using (TestCommand testCommand = new TestCommand())
      {
        testCommand.pdcHandler = pdcHandler;
        int num = (int) testCommand.ShowDialog((IWin32Window) owner);
      }
      ZR_ClassLibMessages.ClearErrors();
    }

    private void TestCommand_Load(object sender, EventArgs e)
    {
      this.pdcHandler.MyDeviceCollector.OnMessage += new EventHandler<GMM_EventArgs>(this.MyDeviceCollector_OnMessage);
      string[] namesOfEnum = ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (RadioMode));
      this.cboxRadioMode.DataSource = (object) namesOfEnum;
      this.cboxRadioModeForTest.DataSource = (object) namesOfEnum;
      this.cboxRadioModeForMiConTestPacket.DataSource = (object) namesOfEnum;
      this.txtTimeout.Value = 180M;
    }

    private void TestCommand_FormClosing(object sender, FormClosingEventArgs e)
    {
      this.pdcHandler.MyDeviceCollector.OnMessage -= new EventHandler<GMM_EventArgs>(this.MyDeviceCollector_OnMessage);
    }

    private void MyDeviceCollector_OnMessage(object sender, GMM_EventArgs e)
    {
      if (this.InvokeRequired)
      {
        try
        {
          this.BeginInvoke((Delegate) new EventHandler<GMM_EventArgs>(this.MyDeviceCollector_OnMessage), sender, (object) e);
        }
        catch
        {
        }
      }
      else
      {
        e.Cancel = this.isCanceled;
        if (e.Cancel)
        {
          this.pdcHandler.MyDeviceCollector.BreakRequest = true;
        }
        else
        {
          this.progress.Visible = e.ProgressPercentage > 0;
          this.lblProgress.Visible = this.progress.Visible;
          if (this.progress.Visible)
          {
            this.progress.Value = e.ProgressPercentage;
            this.lblProgress.Text = string.Format("{0}%", (object) e.ProgressPercentage);
          }
          if (string.IsNullOrEmpty(e.EventMessage) || e.TheMessageType == GMM_EventArgs.MessageType.Alive)
            return;
          this.lblStatus.Text = e.EventMessage;
        }
      }
    }

    private void tabs_Selected(object sender, TabControlEventArgs e)
    {
      this.txtOutput.Text = string.Empty;
      if (e.TabPage != this.tabMinoConnect || this.cboxPortNames.Items.Count != 0)
        return;
      string[] portNames = SerialPort.GetPortNames();
      if (portNames != null)
      {
        foreach (object obj in portNames)
          this.cboxPortNames.Items.Add(obj);
      }
      if (this.cboxPortNames.Items.Count > 0)
        this.cboxPortNames.SelectedIndex = 0;
      if (this.settingsForSecondMinoConnect == null)
        this.settingsForSecondMinoConnect = GMMSettings.Default_Radio2_MinoConnect;
      if (TestCommand.secondDeviceCollector == null)
      {
        TestCommand.secondDeviceCollector = new DeviceCollectorFunctions((IAsyncFunctions) new AsyncFunctions(true), false);
        TestCommand.secondDeviceCollector.SetDeviceCollectorSettings(this.settingsForSecondMinoConnect.DeviceCollectorSettings);
        TestCommand.secondDeviceCollector.SetAsyncComSettings(this.settingsForSecondMinoConnect.AsyncComSettings);
      }
      else
      {
        string asyncComSettings = TestCommand.secondDeviceCollector.GetAsyncComSettings(AsyncComSettings.Port);
        if (!string.IsNullOrEmpty(asyncComSettings) && this.cboxPortNames.Items.Count > 0)
          this.cboxPortNames.Text = asyncComSettings;
      }
      PDC_Meter meter = this.pdcHandler.Meter;
      if (meter != null)
      {
        try
        {
          ushort? transmitInterval = meter.GetRadioTransmitInterval();
          this.txtTimeout.Value = (Decimal) (transmitInterval.HasValue ? (int) transmitInterval.Value : 180);
          uint? serialMbusInputA = meter.GetSerialMBusInputA();
          this.txtSerialnumberInputA.Value = (Decimal) (serialMbusInputA.HasValue ? serialMbusInputA.Value : 0U);
          RadioMode? radioMode = meter.GetRadioMode();
          this.cboxRadioMode.SelectedItem = radioMode.HasValue ? (object) radioMode.Value.ToString() : (object) RadioMode.Radio2.ToString();
          this.cboxRadioModeForTest.SelectedItem = radioMode.HasValue ? (object) radioMode.Value.ToString() : (object) RadioMode.Radio2.ToString();
          this.cboxRadioModeForMiConTestPacket.SelectedItem = radioMode.HasValue ? (object) radioMode.Value.ToString() : (object) RadioMode.Radio2.ToString();
          short? frequencyOffset = meter.GetFrequencyOffset();
          this.txtRadioFrequencyOffset.Value = (Decimal) (frequencyOffset.HasValue ? (int) frequencyOffset.Value : 0);
        }
        catch
        {
        }
      }
    }

    private void txtStartEnd_TextChanged(object sender, EventArgs e)
    {
      try
      {
        ushort uint16 = Convert.ToUInt16(this.txtStartAddress.Text.Replace("0x", string.Empty), 16);
        this.txtByteSize.Text = ((int) Convert.ToUInt16(this.txtEndAddress.Text.Replace("0x", string.Empty), 16) - (int) uint16).ToString();
      }
      catch
      {
      }
    }

    private void txtByteSize_TextChanged(object sender, EventArgs e)
    {
      try
      {
        ushort uint16 = Convert.ToUInt16(this.txtStartAddress.Text.Replace("0x", string.Empty), 16);
        ushort result;
        if (!ushort.TryParse(this.txtByteSize.Text, out result))
          return;
        this.txtEndAddress.Text = ((int) uint16 + (int) result).ToString("X4");
      }
      catch
      {
      }
    }

    private void btnOpenSecondaryComPort_Click(object sender, EventArgs e)
    {
      if (string.IsNullOrEmpty(this.cboxPortNames.Text))
        return;
      this.settingsForSecondMinoConnect.SetAsyncComSettings(AsyncComSettings.Port, this.cboxPortNames.Text);
      TestCommand.secondDeviceCollector.SetAsyncComSettings(this.settingsForSecondMinoConnect.AsyncComSettings);
      TestCommand.secondDeviceCollector.ComOpen();
    }

    private void btnCloseSecondaryComPort_Click(object sender, EventArgs e)
    {
      if (string.IsNullOrEmpty(this.cboxPortNames.Text))
        return;
      this.settingsForSecondMinoConnect.SetAsyncComSettings(AsyncComSettings.Port, this.cboxPortNames.Text);
      TestCommand.secondDeviceCollector.SetAsyncComSettings(this.settingsForSecondMinoConnect.AsyncComSettings);
      TestCommand.secondDeviceCollector.ComClose();
    }

    private void btnSetCurrentTime_Click(object sender, EventArgs e)
    {
      this.txtSystemTime.Value = DateTime.Now;
    }

    private void btnResetDevice_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.ResetDevice));
    }

    private void btnEventLogClear_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.EventLogClear));
    }

    private void btnSystemLogClear_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.SystemLogClear));
    }

    private void btnRunRamBackup_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.RunRAMBackup));
    }

    private void btnPulseDisable_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.PulseDisable));
    }

    private void btnPulseEnable_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.PulseEnable));
    }

    private void btnRadioDisable_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.RadioDisable));
    }

    private void btnRadioNormal_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.RadioNormal));
    }

    private void btnSendAck_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.MyDeviceCollector.EDCHandler.StopVolumeMonitor_SendE5));
    }

    private void btnSND_NKE_IrDaOff_Click(object sender, EventArgs e)
    {
      this.ExecuteSimpleMethod(new TestCommand.ActionSimpleMethod(this.pdcHandler.SendSND_NKE));
    }

    private void btnReadVersion_Click(object sender, EventArgs e)
    {
      this.ResetUI();
      DeviceVersion deviceVersion = this.pdcHandler.ReadVersion();
      if (deviceVersion != null)
      {
        this.stopwatch.Stop();
        this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
        this.txtOutput.Text = deviceVersion.ToString(20);
      }
      else
        this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
      this.lblStatus.Text = string.Empty;
      this.lblProgress.Text = string.Empty;
    }

    private void btnReadMemory_Click(object sender, EventArgs e)
    {
      try
      {
        ushort uint16_1 = Convert.ToUInt16(this.txtStartAddress.Text.Replace("0x", string.Empty), 16);
        ushort uint16_2 = Convert.ToUInt16(this.txtEndAddress.Text.Replace("0x", string.Empty), 16);
        this.ResetUI();
        byte[] buffer;
        if (this.pdcHandler.ReadMemory(uint16_1, (int) uint16_2 - (int) uint16_1, out buffer))
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = ZR_ClassLibrary.Util.ByteArrayToHexString(buffer);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
      }
    }

    private void btnStartRadioReceiver_Click(object sender, EventArgs e)
    {
      this.ResetUI();
      try
      {
        if (this.pdcHandler.StartRadioReceiver())
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          Thread.Sleep(1000);
          byte[] buffer;
          if (this.pdcHandler.MyDeviceCollector.AsyncCom.TryReceiveBlock(out buffer) && buffer != null)
            this.txtOutput.Text = ZR_ClassLibrary.Util.ByteArrayToHexString(buffer);
          else
            this.txtOutput.Text = "OK";
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
      }
      catch (Exception ex)
      {
        this.txtOutput.Text = ex.Message;
      }
      this.lblStatus.Text = string.Empty;
      this.lblProgress.Text = string.Empty;
    }

    private void btnRadioOOK_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        if (this.pdcHandler.RadioOOK((RadioMode) Enum.Parse(typeof (RadioMode), this.cboxRadioModeForTest.SelectedItem.ToString(), true), Convert.ToInt16(this.txtRadioFrequencyOffset.Value), Convert.ToUInt16(this.txtRadioTimeout.Value)))
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnRadioPN9_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        if (this.pdcHandler.RadioPN9((RadioMode) Enum.Parse(typeof (RadioMode), this.cboxRadioModeForTest.SelectedItem.ToString(), true), Convert.ToInt16(this.txtRadioFrequencyOffset.Value), Convert.ToUInt16(this.txtRadioTimeout.Value)))
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnRadioReceive_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        RadioPacket packet;
        byte[] buffer;
        int rssi_dBm;
        int lqi;
        if (this.pdcHandler.RadioReceive(out packet, out buffer, out rssi_dBm, out lqi, (uint) this.txtTimeoutRadioReceive.Value))
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "RSSI: " + rssi_dBm.ToString() + Environment.NewLine;
          TextBox txtOutput1 = this.txtOutput;
          txtOutput1.Text = txtOutput1.Text + "LQI: 0x" + lqi.ToString("X2") + Environment.NewLine;
          TextBox txtOutput2 = this.txtOutput;
          txtOutput2.Text = txtOutput2.Text + "Buffer: " + ZR_ClassLibrary.Util.ByteArrayToHexString(buffer) + Environment.NewLine;
          if (packet != null)
          {
            TextBox txtOutput3 = this.txtOutput;
            txtOutput3.Text = txtOutput3.Text + "Packet type: " + packet.GetType()?.ToString() + Environment.NewLine;
            TextBox txtOutput4 = this.txtOutput;
            txtOutput4.Text = txtOutput4.Text + "FunkId: " + packet.FunkId.ToString() + Environment.NewLine;
            TextBox txtOutput5 = this.txtOutput;
            txtOutput5.Text = txtOutput5.Text + Environment.NewLine + "ATTENTION: The radio receiver is deactivated now!!! To activate receiver please press the 'Radio normal' button.";
          }
        }
        else
        {
          this.txtOutput.Text = "Failed to receive radio packet!" + Environment.NewLine;
          TextBox txtOutput = this.txtOutput;
          txtOutput.Text = txtOutput.Text + "Reason: " + ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        }
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnReadSystemTime_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        DateTime? nullable = this.pdcHandler.ReadSystemTime();
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtSystemTime.Value = nullable.Value;
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnWriteSystemTime_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        if (this.pdcHandler.WriteSystemTime(this.txtSystemTime.Value))
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnReceiveRadioPacket_Click(object sender, EventArgs e)
    {
      this.settingsForSecondMinoConnect.SetAsyncComSettings(AsyncComSettings.Port, this.cboxPortNames.Text);
      TestCommand.secondDeviceCollector.SetAsyncComSettings(this.settingsForSecondMinoConnect.AsyncComSettings);
      Cursor.Current = Cursors.WaitCursor;
      Application.DoEvents();
      try
      {
        this.ResetUI();
        SortedList<DeviceCollectorSettings, object> collectorSettings = TestCommand.secondDeviceCollector.GetDeviceCollectorSettings();
        RadioMode radioMode = (RadioMode) Enum.Parse(typeof (RadioMode), this.cboxRadioMode.Text, true);
        switch (radioMode)
        {
          case RadioMode.Radio2:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.Radio2;
            break;
          case RadioMode.Radio3:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.Radio3;
            break;
          case RadioMode.wMBusS1:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.wMBusS1;
            break;
          case RadioMode.wMBusS1M:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.wMBusS1M;
            break;
          case RadioMode.wMBusS2:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.wMBusS2;
            break;
          case RadioMode.wMBusT1:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.wMBusT1;
            break;
          case RadioMode.wMBusT2_meter:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.wMBusT2_meter;
            break;
          case RadioMode.wMBusT2_other:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.wMBusT2_other;
            break;
          case RadioMode.wMBusC1A:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.wMBusC1A;
            break;
          case RadioMode.wMBusC1B:
            collectorSettings[DeviceCollectorSettings.BusMode] = (object) BusMode.wMBusC1B;
            break;
          default:
            int num = (int) MessageBox.Show("The radio mode " + radioMode.ToString() + " is not implemented! ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return;
        }
        int funkId = (int) this.txtSerialnumberInputA.Value;
        int timeout = (int) this.txtTimeout.Value;
        TestCommand.secondDeviceCollector.SetDeviceCollectorSettings(collectorSettings);
        if (!TestCommand.secondDeviceCollector.ComOpen())
        {
          string errorDescription = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
          if (string.IsNullOrEmpty(errorDescription))
            this.txtOutput.Text = "COM open error!";
          else
            this.txtOutput.Text = "COM open error! Error: " + errorDescription;
        }
        else
        {
          RadioPacket onePacket = TestCommand.secondDeviceCollector.RadioReader.ReceiveOnePacket((long) funkId, timeout);
          if (onePacket != null)
          {
            this.stopwatch.Stop();
            this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
            this.txtOutput.Text = onePacket.ToString();
          }
          else
          {
            string errorDescription = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
            if (string.IsNullOrEmpty(errorDescription))
              this.txtOutput.Text = "Faled! Timeout";
            else
              this.txtOutput.Text = "Faled! Error: " + errorDescription;
          }
          this.lblStatus.Text = string.Empty;
          this.lblProgress.Text = string.Empty;
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      finally
      {
        Cursor.Current = Cursors.Default;
      }
    }

    private void btnStartSendMinoConnectTestPacket_Click(object sender, EventArgs e)
    {
      this.settingsForSecondMinoConnect.SetAsyncComSettings(AsyncComSettings.Port, this.cboxPortNames.Text);
      TestCommand.secondDeviceCollector.SetAsyncComSettings(this.settingsForSecondMinoConnect.AsyncComSettings);
      if (!TestCommand.secondDeviceCollector.ComOpen())
      {
        string errorDescription = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        if (string.IsNullOrEmpty(errorDescription))
          this.txtOutput.Text = "COM open error!";
        else
          this.txtOutput.Text = "COM open error! Error: " + errorDescription;
      }
      else
      {
        Cursor.Current = Cursors.WaitCursor;
        Application.DoEvents();
        try
        {
          this.ResetUI();
          RadioMode radioMode = (RadioMode) Enum.Parse(typeof (RadioMode), this.cboxRadioModeForMiConTestPacket.Text, true);
          byte num = Convert.ToByte(this.txtSendTestPacketPower.Value);
          if (TestCommand.secondDeviceCollector.AsyncCom.CallTransceiverFunction(TransceiverDeviceFunction.StartSendTestPacket, (object) radioMode, (object) num))
          {
            this.stopwatch.Stop();
            this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
            this.txtOutput.Text = "OK";
          }
          else
          {
            string errorDescription = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
            if (string.IsNullOrEmpty(errorDescription))
              this.txtOutput.Text = "Failed! Timeout";
            else
              this.txtOutput.Text = "Failed! Error: " + errorDescription;
          }
          this.lblStatus.Text = string.Empty;
          this.lblProgress.Text = string.Empty;
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }
        finally
        {
          Cursor.Current = Cursors.Default;
        }
      }
    }

    private void btnStopSendMinoConnectTestPacket_Click(object sender, EventArgs e)
    {
      this.settingsForSecondMinoConnect.SetAsyncComSettings(AsyncComSettings.Port, this.cboxPortNames.Text);
      TestCommand.secondDeviceCollector.SetAsyncComSettings(this.settingsForSecondMinoConnect.AsyncComSettings);
      if (!TestCommand.secondDeviceCollector.ComOpen())
      {
        string errorDescription = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        if (string.IsNullOrEmpty(errorDescription))
          this.txtOutput.Text = "COM open error!";
        else
          this.txtOutput.Text = "COM open error! Error: " + errorDescription;
      }
      else
      {
        Cursor.Current = Cursors.WaitCursor;
        Application.DoEvents();
        try
        {
          this.ResetUI();
          if (TestCommand.secondDeviceCollector.AsyncCom.CallTransceiverFunction(TransceiverDeviceFunction.StopSendTestPacket))
          {
            this.stopwatch.Stop();
            this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
            this.txtOutput.Text = "OK";
          }
          else
          {
            string errorDescription = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
            if (string.IsNullOrEmpty(errorDescription))
              this.txtOutput.Text = "Faled! Timeout";
            else
              this.txtOutput.Text = "Faled! Error: " + errorDescription;
          }
          this.lblStatus.Text = string.Empty;
          this.lblProgress.Text = string.Empty;
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }
        finally
        {
          TestCommand.secondDeviceCollector.ComClose();
          Cursor.Current = Cursors.Default;
        }
      }
    }

    private void btnWriteMeterValue_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        if (this.pdcHandler.WriteMeterValue((byte) this.comboChannel.SelectedIndex, Convert.ToUInt32(this.txtMeterValueA.Value)))
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
        }
        else
          this.txtOutput.Text = "Failed! " + ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnReadMeterValueA_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        int? nullable = this.pdcHandler.ReadMeterValue((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtMeterValueA.Value = (Decimal) nullable.Value;
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void ResetUI()
    {
      this.isCanceled = false;
      this.lblProgress.Text = string.Empty;
      this.lblStatus.Text = string.Empty;
      this.lblPerformance.Text = string.Empty;
      this.txtOutput.Text = string.Empty;
      this.stopwatch.Reset();
      this.stopwatch.Start();
    }

    private void ExecuteSimpleMethod(TestCommand.ActionSimpleMethod act)
    {
      this.ResetUI();
      string str = string.Format("{0}{1}.{2}", (object) act.Method.ReturnParameter, act.Target, (object) act.Method.Name);
      try
      {
        if (act())
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
        }
        else
        {
          string errorDescription = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
          this.txtOutput.Text = "Failed to execute: " + str + Environment.NewLine + Environment.NewLine + errorDescription;
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      this.lblStatus.Text = string.Empty;
      this.lblProgress.Text = string.Empty;
    }

    private void btnConfigFlagsRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.ReadConfigFlags();
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtConfigFlags.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnConfigFlagsWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.WriteConfigFlags(Convert.ToUInt16(this.txtConfigFlags.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtConfigFlags.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnConfigFlagsSet_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.ModifyConfigFlags(Convert.ToUInt16(this.txtConfigFlags.Text, 16), (ushort) 0);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtConfigFlags.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnConfigFlagsClear_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.ModifyConfigFlags((ushort) 0, Convert.ToUInt16(this.txtConfigFlags.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtConfigFlags.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnRadioFlagsRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.ReadRadioFlags();
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtRadioFlags.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnRadioFlagsWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.WriteRadioFlags(Convert.ToByte(this.txtRadioFlags.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtRadioFlags.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnRadioFlagsSet_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.ModifyRadioFlags(Convert.ToByte(this.txtRadioFlags.Text, 16), (byte) 0);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtRadioFlags.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnRadioFlagsClear_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.ModifyRadioFlags((byte) 0, Convert.ToByte(this.txtRadioFlags.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtRadioFlags.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnSerialRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.ReadSerialNumber((byte) this.cboxConfigChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtSerialABC.Text = nullable.Value.ToString("X8");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnSerialWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.WriteSerialNumber((byte) this.cboxConfigChannel.SelectedIndex, Convert.ToUInt32(this.txtSerialABC.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtSerialABC.Text = nullable.Value.ToString("X8");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnMBusAddressRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.ReadMBusAddress((byte) this.cboxConfigChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtMBusAddressABC.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnMBusAddressWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.WriteMBusAddress((byte) this.cboxConfigChannel.SelectedIndex, Convert.ToByte(this.txtMBusAddressABC.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtMBusAddressABC.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnMBusVersionRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.ReadMBusVersion((byte) this.cboxConfigChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtMBusVersionABC.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnMBusVersionWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.WriteMBusVersion((byte) this.cboxConfigChannel.SelectedIndex, Convert.ToByte(this.txtMBusVersionABC.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtMBusVersionABC.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnMBusTypeRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.ReadMBusType((byte) this.cboxConfigChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtMBusTypeABC.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnMBusTypeWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.WriteMBusType((byte) this.cboxConfigChannel.SelectedIndex, Convert.ToByte(this.txtMBusTypeABC.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtMBusTypeABC.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnManIdRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.ReadMBusManId((byte) this.cboxConfigChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtManIdABC.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnMBusIdWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.WriteMBusManId((byte) this.cboxConfigChannel.SelectedIndex, Convert.ToUInt16(this.txtManIdABC.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtManIdABC.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnObisRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.ReadObisCode((byte) this.cboxConfigChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtObisCode.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnObisWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.WriteObisCode((byte) this.cboxConfigChannel.SelectedIndex, Convert.ToByte(this.txtObisCode.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtObisCode.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnKeydateRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.ReadKeydate();
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          byte num1 = (byte) ((uint) nullable.Value >> 8);
          byte num2 = (byte) ((uint) nullable.Value & (uint) byte.MaxValue);
          this.txtKeyDay.Text = num1.ToString("X2");
          this.txtKeyMonth.Text = num2.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnKeydateWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.WriteKeydate(Convert.ToByte(this.txtKeyMonth.Text, 16), Convert.ToByte(this.txtKeyDay.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          byte num1 = (byte) ((uint) nullable.Value >> 8);
          byte num2 = (byte) ((uint) nullable.Value & (uint) byte.MaxValue);
          this.txtKeyDay.Text = num1.ToString("X2");
          this.txtKeyMonth.Text = num2.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnRadioListRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.ReadRadioList();
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtRadioList.Text = nullable.Value.ToString();
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnRadioListWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.WriteRadioList(Convert.ToByte(this.txtRadioList.Text));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtRadioList.Text = nullable.Value.ToString();
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnRadioListQuery_Click(object sender, EventArgs e)
    {
      uint? nullable1 = this.pdcHandler.QueryRadioList();
      if (nullable1.HasValue)
      {
        uint? nullable2 = nullable1;
        uint maxValue1 = (uint) byte.MaxValue;
        byte num1 = (byte) (nullable2.HasValue ? new uint?(nullable2.GetValueOrDefault() & maxValue1) : new uint?()).Value;
        uint? nullable3 = nullable1;
        nullable2 = nullable3.HasValue ? new uint?(nullable3.GetValueOrDefault() >> 8) : new uint?();
        uint maxValue2 = (uint) byte.MaxValue;
        uint? nullable4;
        if (!nullable2.HasValue)
        {
          nullable3 = new uint?();
          nullable4 = nullable3;
        }
        else
          nullable4 = new uint?(nullable2.GetValueOrDefault() & maxValue2);
        nullable3 = nullable4;
        byte num2 = (byte) nullable3.Value;
        nullable3 = nullable1;
        nullable2 = nullable3.HasValue ? new uint?(nullable3.GetValueOrDefault() >> 16) : new uint?();
        uint maxValue3 = (uint) byte.MaxValue;
        uint? nullable5;
        if (!nullable2.HasValue)
        {
          nullable3 = new uint?();
          nullable5 = nullable3;
        }
        else
          nullable5 = new uint?(nullable2.GetValueOrDefault() & maxValue3);
        nullable3 = nullable5;
        byte num3 = (byte) nullable3.Value;
        this.txtOutput.Text = "List 1:\r\n";
        TextBox txtOutput1 = this.txtOutput;
        txtOutput1.Text = txtOutput1.Text + "  Install: " + (((int) num1 & 8) == 0 ? "No" : "Yes") + "\r\n";
        TextBox txtOutput2 = this.txtOutput;
        txtOutput2.Text = txtOutput2.Text + "  A: " + (((int) num1 & 1) == 0 ? "No" : "Yes") + "\r\n";
        TextBox txtOutput3 = this.txtOutput;
        txtOutput3.Text = txtOutput3.Text + "  B: " + (((int) num1 & 2) == 0 ? "No" : "Yes") + "\r\n";
        TextBox txtOutput4 = this.txtOutput;
        txtOutput4.Text = txtOutput4.Text + "  C: " + (((int) num1 & 4) == 0 ? "No" : "Yes") + "\r\n";
        this.txtOutput.Text += "List 2:\r\n";
        TextBox txtOutput5 = this.txtOutput;
        txtOutput5.Text = txtOutput5.Text + "  Install: " + (((int) num2 & 8) == 0 ? "No" : "Yes") + "\r\n";
        TextBox txtOutput6 = this.txtOutput;
        txtOutput6.Text = txtOutput6.Text + "  A: " + (((int) num2 & 1) == 0 ? "No" : "Yes") + "\r\n";
        TextBox txtOutput7 = this.txtOutput;
        txtOutput7.Text = txtOutput7.Text + "  B: " + (((int) num2 & 2) == 0 ? "No" : "Yes") + "\r\n";
        TextBox txtOutput8 = this.txtOutput;
        txtOutput8.Text = txtOutput8.Text + "  C: " + (((int) num2 & 4) == 0 ? "No" : "Yes") + "\r\n";
        this.txtOutput.Text += "List 3:\r\n";
        TextBox txtOutput9 = this.txtOutput;
        txtOutput9.Text = txtOutput9.Text + "  Install: " + (((int) num3 & 8) == 0 ? "No" : "Yes") + "\r\n";
        TextBox txtOutput10 = this.txtOutput;
        txtOutput10.Text = txtOutput10.Text + "  A: " + (((int) num3 & 1) == 0 ? "No" : "Yes") + "\r\n";
        TextBox txtOutput11 = this.txtOutput;
        txtOutput11.Text = txtOutput11.Text + "  B: " + (((int) num3 & 2) == 0 ? "No" : "Yes") + "\r\n";
        TextBox txtOutput12 = this.txtOutput;
        txtOutput12.Text = txtOutput12.Text + "  C: " + (((int) num3 & 4) == 0 ? "No" : "Yes") + "\r\n";
      }
      ushort? nullable6 = this.pdcHandler.ReadConfigFlags();
      if (!nullable6.HasValue)
        return;
      byte? nullable7 = this.pdcHandler.ReadRadioFlags();
      if (nullable7.HasValue)
      {
        this.txtOutput.Text += "For current configuration settings:\r\n";
        if (((int) nullable6.Value & 1024) != 0 || ((uint) nullable7.Value & 16U) > 0U)
          this.txtOutput.Text += "List 1 looks like it might be used.\r\n";
        else
          this.txtOutput.Text += "List 1 looks like it will not be used.\r\n";
        if (((int) nullable6.Value & 2048) != 0 || ((uint) nullable7.Value & 32U) > 0U)
          this.txtOutput.Text += "List 2 looks like it might be used.\r\n";
        else
          this.txtOutput.Text += "List 2 looks like it will not be used.\r\n";
        if (((int) nullable6.Value & 3072) == 0 && ((int) nullable7.Value & 48) == 0)
          this.txtOutput.Text += "List 3 looks like it will be used.\r\n";
        else
          this.txtOutput.Text += "List 3 looks like it will not be used.\r\n";
      }
    }

    private void btnResetDelivery_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        if (this.pdcHandler.ResetToDelivery())
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnStatusFlagsARead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.ReadStatusFlags((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtStatusFlagsA.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnStatusFlagsAClear_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.ClearStatusFlags((byte) this.comboChannel.SelectedIndex, Convert.ToUInt16(this.txtStatusFlagsA.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtStatusFlagsA.Text = nullable.Value.ToString("X4");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnMantissaARead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.ReadMantissa((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtMantissaA.Value = (Decimal) nullable.Value;
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnMantissaAWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.WriteMantissa((byte) this.comboChannel.SelectedIndex, (ushort) this.txtMantissaA.Value);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtMantissaA.Value = (Decimal) nullable.Value;
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnExponentARead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        sbyte? nullable = this.pdcHandler.ReadExponent((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtExponentA.Value = (Decimal) nullable.Value;
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnExponentAWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        sbyte? nullable = this.pdcHandler.WriteExponent((byte) this.comboChannel.SelectedIndex, (sbyte) this.txtExponentA.Value);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtExponentA.Value = (Decimal) nullable.Value;
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnVIFARead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.ReadVIF((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtVIFA.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnVIFAWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable = this.pdcHandler.WriteVIF((byte) this.comboChannel.SelectedIndex, Convert.ToByte(this.txtVIFA.Text, 16));
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtVIFA.Text = nullable.Value.ToString("X2");
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnPulseRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.ReadPulseSettings();
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtPulsePeriod.Value = (Decimal) (ushort) (nullable.Value & (uint) ushort.MaxValue);
          this.txtPulseOn.Value = (Decimal) (byte) (nullable.Value >> 16 & (uint) byte.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnPulseWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.WritePulseSettings((ushort) this.txtPulsePeriod.Value, (byte) this.txtPulseOn.Value);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtPulsePeriod.Value = (Decimal) (ushort) (nullable.Value & (uint) ushort.MaxValue);
          this.txtPulseOn.Value = (Decimal) (byte) (nullable.Value >> 16 & (uint) byte.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnBlockRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.ReadFlowBlock((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtBlock.Value = (Decimal) nullable.Value;
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnBlockWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ushort? nullable = this.pdcHandler.WriteFlowBlock((byte) this.comboChannel.SelectedIndex, (ushort) this.txtBlock.Value);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtBlock.Value = (Decimal) nullable.Value;
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnBurstRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.ReadFlowBurst((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtBurstDiff.Value = (Decimal) (nullable.Value & (uint) ushort.MaxValue);
          this.txtBurstLimit.Value = (Decimal) (nullable.Value >> 16 & (uint) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnBurstWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.WriteFlowBurst((byte) this.comboChannel.SelectedIndex, (ushort) this.txtBurstDiff.Value, (ushort) this.txtBurstLimit.Value);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtBurstDiff.Value = (Decimal) (nullable.Value & (uint) ushort.MaxValue);
          this.txtBurstLimit.Value = (Decimal) (nullable.Value >> 16 & (uint) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnOversizeRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.ReadFlowOversize((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtOversizeDiff.Value = (Decimal) (nullable.Value & (uint) ushort.MaxValue);
          this.txtOversizeLimit.Value = (Decimal) (nullable.Value >> 16 & (uint) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnOversizeWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.WriteFlowOversize((byte) this.comboChannel.SelectedIndex, (ushort) this.txtOversizeDiff.Value, (ushort) this.txtOversizeLimit.Value);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtOversizeDiff.Value = (Decimal) (nullable.Value & (uint) ushort.MaxValue);
          this.txtOversizeLimit.Value = (Decimal) (nullable.Value >> 16 & (uint) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnUndersizeRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.ReadFlowUndersize((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtUndersizeDiff.Value = (Decimal) (nullable.Value & (uint) ushort.MaxValue);
          this.txtUndersizeLimit.Value = (Decimal) (nullable.Value >> 16 & (uint) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnUndersizeWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.WriteFlowUndersize((byte) this.comboChannel.SelectedIndex, (ushort) this.txtUndersizeDiff.Value, (ushort) this.txtUndersizeLimit.Value);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtUndersizeDiff.Value = (Decimal) (nullable.Value & (uint) ushort.MaxValue);
          this.txtUndersizeLimit.Value = (Decimal) (nullable.Value >> 16 & (uint) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnLeakRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ulong? nullable = this.pdcHandler.ReadFlowLeak((byte) this.comboChannel.SelectedIndex);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtLeak.Value = (Decimal) (ushort) (nullable.Value & (ulong) ushort.MaxValue);
          this.txtUnleak.Value = (Decimal) (ushort) (nullable.Value >> 16 & (ulong) ushort.MaxValue);
          this.txtUpper.Value = (Decimal) (ushort) (nullable.Value >> 32 & (ulong) ushort.MaxValue);
          this.txtLower.Value = (Decimal) (ushort) (nullable.Value >> 48 & (ulong) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnLeakWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        ulong? nullable = this.pdcHandler.WriteFlowLeak((byte) this.comboChannel.SelectedIndex, (ushort) this.txtLeak.Value, (ushort) this.txtUnleak.Value, (ushort) this.txtUpper.Value, (ushort) this.txtLower.Value);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtLeak.Value = (Decimal) (ushort) (nullable.Value & (ulong) ushort.MaxValue);
          this.txtUnleak.Value = (Decimal) (ushort) (nullable.Value >> 16 & (ulong) ushort.MaxValue);
          this.txtUpper.Value = (Decimal) (ushort) (nullable.Value >> 32 & (ulong) ushort.MaxValue);
          this.txtLower.Value = (Decimal) (ushort) (nullable.Value >> 48 & (ulong) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnDepassRead_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.ReadDepass();
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtDepassTimeout.Value = (Decimal) (ushort) (nullable.Value & (uint) ushort.MaxValue);
          this.txtDepassPeriod.Value = (Decimal) (ushort) (nullable.Value >> 16 & (uint) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnDepassWrite_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        uint? nullable = this.pdcHandler.WriteDepass((ushort) this.txtDepassTimeout.Value, (ushort) this.txtDepassPeriod.Value);
        if (nullable.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          this.txtDepassTimeout.Value = (Decimal) (ushort) (nullable.Value & (uint) ushort.MaxValue);
          this.txtDepassPeriod.Value = (Decimal) (ushort) (nullable.Value >> 16 & (uint) ushort.MaxValue);
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void btnDepassNow_Click(object sender, EventArgs e) => this.pdcHandler.Depassivate();

    private void btnMBusStatusQuery_Click(object sender, EventArgs e)
    {
      try
      {
        this.ResetUI();
        byte? nullable1 = this.pdcHandler.QueryMBusState();
        if (nullable1.HasValue)
        {
          this.stopwatch.Stop();
          this.lblPerformance.Text = string.Format("Time elapsed: {0}", (object) this.stopwatch.Elapsed);
          this.txtOutput.Text = "OK";
          byte? nullable2 = nullable1;
          int? nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault() & 8) : new int?();
          int num1 = 0;
          if (!(nullable3.GetValueOrDefault() == num1 & nullable3.HasValue))
            this.txtOutput.Text += "\n\tMBus UART acquired.";
          nullable2 = nullable1;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault() & 4) : new int?();
          int num2 = 0;
          if (!(nullable3.GetValueOrDefault() == num2 & nullable3.HasValue))
            this.txtOutput.Text += "\n\tMBus powered.";
          nullable2 = nullable1;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault() & 2) : new int?();
          int num3 = 0;
          if (!(nullable3.GetValueOrDefault() == num3 & nullable3.HasValue))
            this.txtOutput.Text += "\n\tMBus hardware missing.";
          nullable2 = nullable1;
          nullable3 = nullable2.HasValue ? new int?((int) nullable2.GetValueOrDefault() & 1) : new int?();
          int num4 = 0;
          if (!(nullable3.GetValueOrDefault() == num4 & nullable3.HasValue))
            this.txtOutput.Text += "\n\tMBus harware powerfail.";
        }
        else
          this.txtOutput.Text = ZR_ClassLibMessages.GetLastErrorAndClearError().LastErrorDescription;
        this.lblStatus.Text = string.Empty;
        this.lblProgress.Text = string.Empty;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show((IWin32Window) this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (TestCommand));
      this.txtOutput = new TextBox();
      this.statusStrip = new StatusStrip();
      this.progress = new ToolStripProgressBar();
      this.lblStatus = new ToolStripStatusLabel();
      this.lblProgress = new ToolStripStatusLabel();
      this.lblPerformance = new ToolStripStatusLabel();
      this.groupBox2 = new GroupBox();
      this.tabGenerally = new TabPage();
      this.btnResetDelivery = new Button();
      this.btnSystemLogClear = new Button();
      this.btnEventLogClear = new Button();
      this.btnSND_NKE_IrDaOff = new Button();
      this.btnStartRadioReceiver = new Button();
      this.btnRadioNormal = new Button();
      this.groupBox6 = new GroupBox();
      this.label11 = new Label();
      this.txtTimeoutRadioReceive = new NumericUpDown();
      this.btnRadioReceive = new Button();
      this.groupBox7 = new GroupBox();
      this.label34 = new Label();
      this.txtRadioTimeout = new NumericUpDown();
      this.label17 = new Label();
      this.txtRadioFrequencyOffset = new NumericUpDown();
      this.label10 = new Label();
      this.btnRadioOOK = new Button();
      this.btnRadioPN9 = new Button();
      this.cboxRadioModeForTest = new ComboBox();
      this.groupBox3 = new GroupBox();
      this.btnSetCurrentTime = new Button();
      this.btnReadSystemTime = new Button();
      this.btnWriteSystemTime = new Button();
      this.txtSystemTime = new DateTimePicker();
      this.btnResetDevice = new Button();
      this.btnRadioDisable = new Button();
      this.btnReadVersion = new Button();
      this.btnPulseDisable = new Button();
      this.btnPulseEnable = new Button();
      this.btnSendAck = new Button();
      this.btnRunRamBackup = new Button();
      this.tabs = new TabControl();
      this.tabChannels = new TabPage();
      this.txtUndersizeDiff = new NumericUpDown();
      this.label45 = new Label();
      this.txtOversizeDiff = new NumericUpDown();
      this.label44 = new Label();
      this.txtBurstLimit = new NumericUpDown();
      this.label43 = new Label();
      this.txtLower = new NumericUpDown();
      this.btnLeakRead = new Button();
      this.label42 = new Label();
      this.btnLeakWrite = new Button();
      this.txtUpper = new NumericUpDown();
      this.label41 = new Label();
      this.txtUnleak = new NumericUpDown();
      this.label40 = new Label();
      this.txtLeak = new NumericUpDown();
      this.label39 = new Label();
      this.txtUndersizeLimit = new NumericUpDown();
      this.btnUndersizeRead = new Button();
      this.label36 = new Label();
      this.btnUndersizeWrite = new Button();
      this.txtOversizeLimit = new NumericUpDown();
      this.btnOversizeRead = new Button();
      this.label35 = new Label();
      this.btnOversizeWrite = new Button();
      this.txtBurstDiff = new NumericUpDown();
      this.btnBurstRead = new Button();
      this.label30 = new Label();
      this.btnBurstWrite = new Button();
      this.txtBlock = new NumericUpDown();
      this.btnBlockRead = new Button();
      this.label29 = new Label();
      this.btnBlockWrite = new Button();
      this.label18 = new Label();
      this.comboChannel = new ComboBox();
      this.txtVIFA = new TextBox();
      this.btnVIFARead = new Button();
      this.label37 = new Label();
      this.btnVIFAWrite = new Button();
      this.txtExponentA = new NumericUpDown();
      this.txtMantissaA = new NumericUpDown();
      this.btnExponentARead = new Button();
      this.label33 = new Label();
      this.btnExponentAWrite = new Button();
      this.btnMantissaARead = new Button();
      this.label32 = new Label();
      this.btnMantissaAWrite = new Button();
      this.txtStatusFlagsA = new TextBox();
      this.btnStatusFlagsARead = new Button();
      this.label28 = new Label();
      this.btnStatusFlagsAClear = new Button();
      this.btnReadMeterValueA = new Button();
      this.label16 = new Label();
      this.txtMeterValueA = new NumericUpDown();
      this.btnWriteMeterValueA = new Button();
      this.tabConfig = new TabPage();
      this.txtPulseOn = new NumericUpDown();
      this.txtPulsePeriod = new NumericUpDown();
      this.label38 = new Label();
      this.btnPulseWrite = new Button();
      this.btnPulseRead = new Button();
      this.label31 = new Label();
      this.btnObisWrite = new Button();
      this.btnObisRead = new Button();
      this.txtObisCode = new TextBox();
      this.btnRadioListQuery = new Button();
      this.txtRadioList = new NumericUpDown();
      this.label27 = new Label();
      this.btnRadioListWrite = new Button();
      this.btnRadioListRead = new Button();
      this.txtKeyMonth = new NumericUpDown();
      this.txtKeyDay = new NumericUpDown();
      this.label26 = new Label();
      this.btnKeydateWrite = new Button();
      this.btnKeydateRead = new Button();
      this.label25 = new Label();
      this.btnMBusIdWrite = new Button();
      this.btnManIdRead = new Button();
      this.txtManIdABC = new TextBox();
      this.label24 = new Label();
      this.btnMBusTypeWrite = new Button();
      this.btnMBusTypeRead = new Button();
      this.txtMBusTypeABC = new TextBox();
      this.label23 = new Label();
      this.btnMBusVersionWrite = new Button();
      this.btnMBusVersionRead = new Button();
      this.txtMBusVersionABC = new TextBox();
      this.label22 = new Label();
      this.btnMBusAddressWrite = new Button();
      this.btnMBusAddressRead = new Button();
      this.txtMBusAddressABC = new TextBox();
      this.label20 = new Label();
      this.cboxConfigChannel = new ComboBox();
      this.label21 = new Label();
      this.btnSerialWrite = new Button();
      this.btnSerialRead = new Button();
      this.txtSerialABC = new TextBox();
      this.btnRadioFlagsClear = new Button();
      this.btnConfigFlagsClear = new Button();
      this.btnRadioFlagsSet = new Button();
      this.btnConfigFlagsSet = new Button();
      this.btnRadioFlagsWrite = new Button();
      this.btnConfigFlagsWrite = new Button();
      this.btnRadioFlagsRead = new Button();
      this.btnConfigFlagsRead = new Button();
      this.txtRadioFlags = new TextBox();
      this.txtConfigFlags = new TextBox();
      this.label19 = new Label();
      this.label15 = new Label();
      this.tabMBus = new TabPage();
      this.btnMBusStatusQuery = new Button();
      this.btnDepassNow = new Button();
      this.txtDepassPeriod = new NumericUpDown();
      this.txtDepassTimeout = new NumericUpDown();
      this.label46 = new Label();
      this.btnDepassWrite = new Button();
      this.btnDepassRead = new Button();
      this.tabMemory = new TabPage();
      this.groupBox1 = new GroupBox();
      this.label5 = new Label();
      this.label4 = new Label();
      this.label3 = new Label();
      this.txtByteSize = new TextBox();
      this.label2 = new Label();
      this.txtEndAddress = new TextBox();
      this.txtStartAddress = new TextBox();
      this.label1 = new Label();
      this.lblStartAddress = new Label();
      this.btnReadMemory = new Button();
      this.tabMinoConnect = new TabPage();
      this.btnCloseSecondaryComPort = new Button();
      this.btnOpenSecondaryComPort = new Button();
      this.label14 = new Label();
      this.cboxPortNames = new ComboBox();
      this.groupBox9 = new GroupBox();
      this.txtSendTestPacketPower = new NumericUpDown();
      this.label12 = new Label();
      this.btnStopSendMinoConnectTestPacket = new Button();
      this.label13 = new Label();
      this.cboxRadioModeForMiConTestPacket = new ComboBox();
      this.btnStartSendMinoConnectTestPacket = new Button();
      this.groupBox5 = new GroupBox();
      this.label9 = new Label();
      this.label8 = new Label();
      this.txtTimeout = new NumericUpDown();
      this.cboxRadioMode = new ComboBox();
      this.label7 = new Label();
      this.txtSerialnumberInputA = new NumericUpDown();
      this.btnReceiveRadioPacket = new Button();
      this.label6 = new Label();
      this.statusStrip.SuspendLayout();
      this.groupBox2.SuspendLayout();
      this.tabGenerally.SuspendLayout();
      this.groupBox6.SuspendLayout();
      this.txtTimeoutRadioReceive.BeginInit();
      this.groupBox7.SuspendLayout();
      this.txtRadioTimeout.BeginInit();
      this.txtRadioFrequencyOffset.BeginInit();
      this.groupBox3.SuspendLayout();
      this.tabs.SuspendLayout();
      this.tabChannels.SuspendLayout();
      this.txtUndersizeDiff.BeginInit();
      this.txtOversizeDiff.BeginInit();
      this.txtBurstLimit.BeginInit();
      this.txtLower.BeginInit();
      this.txtUpper.BeginInit();
      this.txtUnleak.BeginInit();
      this.txtLeak.BeginInit();
      this.txtUndersizeLimit.BeginInit();
      this.txtOversizeLimit.BeginInit();
      this.txtBurstDiff.BeginInit();
      this.txtBlock.BeginInit();
      this.txtExponentA.BeginInit();
      this.txtMantissaA.BeginInit();
      this.txtMeterValueA.BeginInit();
      this.tabConfig.SuspendLayout();
      this.txtPulseOn.BeginInit();
      this.txtPulsePeriod.BeginInit();
      this.txtRadioList.BeginInit();
      this.txtKeyMonth.BeginInit();
      this.txtKeyDay.BeginInit();
      this.tabMBus.SuspendLayout();
      this.txtDepassPeriod.BeginInit();
      this.txtDepassTimeout.BeginInit();
      this.tabMemory.SuspendLayout();
      this.groupBox1.SuspendLayout();
      this.tabMinoConnect.SuspendLayout();
      this.groupBox9.SuspendLayout();
      this.txtSendTestPacketPower.BeginInit();
      this.groupBox5.SuspendLayout();
      this.txtTimeout.BeginInit();
      this.txtSerialnumberInputA.BeginInit();
      this.SuspendLayout();
      this.txtOutput.Dock = DockStyle.Fill;
      this.txtOutput.Font = new Font("Consolas", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.txtOutput.Location = new Point(3, 16);
      this.txtOutput.Multiline = true;
      this.txtOutput.Name = "txtOutput";
      this.txtOutput.ScrollBars = ScrollBars.Vertical;
      this.txtOutput.Size = new Size(763, 157);
      this.txtOutput.TabIndex = 20;
      this.statusStrip.ImageScalingSize = new Size(20, 20);
      this.statusStrip.Items.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.progress,
        (ToolStripItem) this.lblStatus,
        (ToolStripItem) this.lblProgress,
        (ToolStripItem) this.lblPerformance
      });
      this.statusStrip.Location = new Point(0, 540);
      this.statusStrip.Name = "statusStrip";
      this.statusStrip.Size = new Size(780, 22);
      this.statusStrip.TabIndex = 21;
      this.statusStrip.Text = "statusStrip1";
      this.progress.Name = "progress";
      this.progress.Size = new Size(100, 16);
      this.progress.Step = 1;
      this.progress.Visible = false;
      this.lblStatus.Name = "lblStatus";
      this.lblStatus.Size = new Size(46, 17);
      this.lblStatus.Text = "{status}";
      this.lblProgress.Name = "lblProgress";
      this.lblProgress.Size = new Size(60, 17);
      this.lblProgress.Text = "{progress}";
      this.lblPerformance.Name = "lblPerformance";
      this.lblPerformance.Size = new Size(83, 17);
      this.lblPerformance.Text = "{performance}";
      this.groupBox2.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.groupBox2.Controls.Add((Control) this.txtOutput);
      this.groupBox2.Location = new Point(3, 361);
      this.groupBox2.Name = "groupBox2";
      this.groupBox2.Size = new Size(769, 176);
      this.groupBox2.TabIndex = 32;
      this.groupBox2.TabStop = false;
      this.groupBox2.Text = "Result";
      this.tabGenerally.Controls.Add((Control) this.btnResetDelivery);
      this.tabGenerally.Controls.Add((Control) this.btnSystemLogClear);
      this.tabGenerally.Controls.Add((Control) this.btnEventLogClear);
      this.tabGenerally.Controls.Add((Control) this.btnSND_NKE_IrDaOff);
      this.tabGenerally.Controls.Add((Control) this.btnStartRadioReceiver);
      this.tabGenerally.Controls.Add((Control) this.btnRadioNormal);
      this.tabGenerally.Controls.Add((Control) this.groupBox6);
      this.tabGenerally.Controls.Add((Control) this.groupBox7);
      this.tabGenerally.Controls.Add((Control) this.groupBox3);
      this.tabGenerally.Controls.Add((Control) this.btnResetDevice);
      this.tabGenerally.Controls.Add((Control) this.btnRadioDisable);
      this.tabGenerally.Controls.Add((Control) this.btnReadVersion);
      this.tabGenerally.Controls.Add((Control) this.btnPulseDisable);
      this.tabGenerally.Controls.Add((Control) this.btnPulseEnable);
      this.tabGenerally.Controls.Add((Control) this.btnSendAck);
      this.tabGenerally.Controls.Add((Control) this.btnRunRamBackup);
      this.tabGenerally.Location = new Point(4, 22);
      this.tabGenerally.Name = "tabGenerally";
      this.tabGenerally.Padding = new Padding(3, 3, 3, 3);
      this.tabGenerally.Size = new Size(761, 326);
      this.tabGenerally.TabIndex = 0;
      this.tabGenerally.Text = "Generally";
      this.tabGenerally.UseVisualStyleBackColor = true;
      this.btnResetDelivery.Location = new Point(160, 64);
      this.btnResetDelivery.Name = "btnResetDelivery";
      this.btnResetDelivery.Size = new Size(147, 23);
      this.btnResetDelivery.TabIndex = 65;
      this.btnResetDelivery.Text = "Reset To Delivery";
      this.btnResetDelivery.UseVisualStyleBackColor = true;
      this.btnResetDelivery.Click += new System.EventHandler(this.btnResetDelivery_Click);
      this.btnSystemLogClear.Location = new Point(160, 35);
      this.btnSystemLogClear.Name = "btnSystemLogClear";
      this.btnSystemLogClear.Size = new Size(147, 23);
      this.btnSystemLogClear.TabIndex = 64;
      this.btnSystemLogClear.Text = "System Log Clear";
      this.btnSystemLogClear.UseVisualStyleBackColor = true;
      this.btnSystemLogClear.Click += new System.EventHandler(this.btnSystemLogClear_Click);
      this.btnEventLogClear.Location = new Point(160, 6);
      this.btnEventLogClear.Name = "btnEventLogClear";
      this.btnEventLogClear.Size = new Size(147, 23);
      this.btnEventLogClear.TabIndex = 63;
      this.btnEventLogClear.Text = "Event Log Clear";
      this.btnEventLogClear.UseVisualStyleBackColor = true;
      this.btnEventLogClear.Click += new System.EventHandler(this.btnEventLogClear_Click);
      this.btnSND_NKE_IrDaOff.Location = new Point(5, 267);
      this.btnSND_NKE_IrDaOff.Name = "btnSND_NKE_IrDaOff";
      this.btnSND_NKE_IrDaOff.Size = new Size(147, 23);
      this.btnSND_NKE_IrDaOff.TabIndex = 62;
      this.btnSND_NKE_IrDaOff.Text = "IrDa Off (SND_NKE)";
      this.btnSND_NKE_IrDaOff.UseVisualStyleBackColor = true;
      this.btnSND_NKE_IrDaOff.Click += new System.EventHandler(this.btnSND_NKE_IrDaOff_Click);
      this.btnStartRadioReceiver.Location = new Point(7, 209);
      this.btnStartRadioReceiver.Name = "btnStartRadioReceiver";
      this.btnStartRadioReceiver.Size = new Size(147, 23);
      this.btnStartRadioReceiver.TabIndex = 7;
      this.btnStartRadioReceiver.Text = "Start Radio Receiver";
      this.btnStartRadioReceiver.UseVisualStyleBackColor = true;
      this.btnStartRadioReceiver.Click += new System.EventHandler(this.btnStartRadioReceiver_Click);
      this.btnRadioNormal.Location = new Point(7, 150);
      this.btnRadioNormal.Name = "btnRadioNormal";
      this.btnRadioNormal.Size = new Size(147, 23);
      this.btnRadioNormal.TabIndex = 4;
      this.btnRadioNormal.Text = "Radio Normal";
      this.btnRadioNormal.UseVisualStyleBackColor = true;
      this.btnRadioNormal.Click += new System.EventHandler(this.btnRadioNormal_Click);
      this.groupBox6.Controls.Add((Control) this.label11);
      this.groupBox6.Controls.Add((Control) this.txtTimeoutRadioReceive);
      this.groupBox6.Controls.Add((Control) this.btnRadioReceive);
      this.groupBox6.Location = new Point(469, 167);
      this.groupBox6.Name = "groupBox6";
      this.groupBox6.Size = new Size(282, 45);
      this.groupBox6.TabIndex = 60;
      this.groupBox6.TabStop = false;
      this.groupBox6.Text = "Radio";
      this.label11.Location = new Point(5, 18);
      this.label11.Name = "label11";
      this.label11.Size = new Size(75, 15);
      this.label11.TabIndex = 60;
      this.label11.Text = "Timeout (ms):";
      this.label11.TextAlign = ContentAlignment.MiddleRight;
      this.txtTimeoutRadioReceive.Location = new Point(85, 17);
      this.txtTimeoutRadioReceive.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtTimeoutRadioReceive.Name = "txtTimeoutRadioReceive";
      this.txtTimeoutRadioReceive.Size = new Size(67, 20);
      this.txtTimeoutRadioReceive.TabIndex = 61;
      this.txtTimeoutRadioReceive.Value = new Decimal(new int[4]
      {
        10000,
        0,
        0,
        0
      });
      this.btnRadioReceive.Location = new Point(159, 16);
      this.btnRadioReceive.Name = "btnRadioReceive";
      this.btnRadioReceive.Size = new Size(106, 23);
      this.btnRadioReceive.TabIndex = 59;
      this.btnRadioReceive.Text = "Radio Receive";
      this.btnRadioReceive.UseVisualStyleBackColor = true;
      this.btnRadioReceive.Click += new System.EventHandler(this.btnRadioReceive_Click);
      this.groupBox7.Controls.Add((Control) this.label34);
      this.groupBox7.Controls.Add((Control) this.txtRadioTimeout);
      this.groupBox7.Controls.Add((Control) this.label17);
      this.groupBox7.Controls.Add((Control) this.txtRadioFrequencyOffset);
      this.groupBox7.Controls.Add((Control) this.label10);
      this.groupBox7.Controls.Add((Control) this.btnRadioOOK);
      this.groupBox7.Controls.Add((Control) this.btnRadioPN9);
      this.groupBox7.Controls.Add((Control) this.cboxRadioModeForTest);
      this.groupBox7.Location = new Point(469, 4);
      this.groupBox7.Name = "groupBox7";
      this.groupBox7.Size = new Size(282, 86);
      this.groupBox7.TabIndex = 44;
      this.groupBox7.TabStop = false;
      this.groupBox7.Text = "Radio test";
      this.label34.Location = new Point(5, 62);
      this.label34.Name = "label34";
      this.label34.Size = new Size(106, 15);
      this.label34.TabIndex = 57;
      this.label34.Text = "Timeout (seconds):";
      this.label34.TextAlign = ContentAlignment.MiddleRight;
      this.txtRadioTimeout.Location = new Point(119, 60);
      this.txtRadioTimeout.Maximum = new Decimal(new int[4]
      {
        65536,
        0,
        0,
        0
      });
      this.txtRadioTimeout.Name = "txtRadioTimeout";
      this.txtRadioTimeout.Size = new Size(94, 20);
      this.txtRadioTimeout.TabIndex = 58;
      this.txtRadioTimeout.Value = new Decimal(new int[4]
      {
        10,
        0,
        0,
        0
      });
      this.label17.Location = new Point(5, 39);
      this.label17.Name = "label17";
      this.label17.Size = new Size(106, 15);
      this.label17.TabIndex = 55;
      this.label17.Text = "Frequency offset:";
      this.label17.TextAlign = ContentAlignment.MiddleRight;
      this.txtRadioFrequencyOffset.Location = new Point(119, 37);
      this.txtRadioFrequencyOffset.Maximum = new Decimal(new int[4]
      {
        (int) short.MaxValue,
        0,
        0,
        0
      });
      this.txtRadioFrequencyOffset.Minimum = new Decimal(new int[4]
      {
        32768,
        0,
        0,
        int.MinValue
      });
      this.txtRadioFrequencyOffset.Name = "txtRadioFrequencyOffset";
      this.txtRadioFrequencyOffset.Size = new Size(94, 20);
      this.txtRadioFrequencyOffset.TabIndex = 56;
      this.label10.Location = new Point(5, 16);
      this.label10.Name = "label10";
      this.label10.Size = new Size(106, 15);
      this.label10.TabIndex = 54;
      this.label10.Text = "Mode:";
      this.label10.TextAlign = ContentAlignment.MiddleRight;
      this.btnRadioOOK.Location = new Point(220, 12);
      this.btnRadioOOK.Name = "btnRadioOOK";
      this.btnRadioOOK.Size = new Size(56, 23);
      this.btnRadioOOK.TabIndex = 41;
      this.btnRadioOOK.Text = "OOK";
      this.btnRadioOOK.UseVisualStyleBackColor = true;
      this.btnRadioOOK.Click += new System.EventHandler(this.btnRadioOOK_Click);
      this.btnRadioPN9.Location = new Point(220, 41);
      this.btnRadioPN9.Name = "btnRadioPN9";
      this.btnRadioPN9.Size = new Size(56, 23);
      this.btnRadioPN9.TabIndex = 42;
      this.btnRadioPN9.Text = "PN9";
      this.btnRadioPN9.UseVisualStyleBackColor = true;
      this.btnRadioPN9.Click += new System.EventHandler(this.btnRadioPN9_Click);
      this.cboxRadioModeForTest.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxRadioModeForTest.FormattingEnabled = true;
      this.cboxRadioModeForTest.Location = new Point(119, 14);
      this.cboxRadioModeForTest.Name = "cboxRadioModeForTest";
      this.cboxRadioModeForTest.Size = new Size(95, 21);
      this.cboxRadioModeForTest.TabIndex = 53;
      this.groupBox3.Controls.Add((Control) this.btnSetCurrentTime);
      this.groupBox3.Controls.Add((Control) this.btnReadSystemTime);
      this.groupBox3.Controls.Add((Control) this.btnWriteSystemTime);
      this.groupBox3.Controls.Add((Control) this.txtSystemTime);
      this.groupBox3.Location = new Point(469, 93);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.Size = new Size(282, 71);
      this.groupBox3.TabIndex = 43;
      this.groupBox3.TabStop = false;
      this.groupBox3.Text = "System time";
      this.btnSetCurrentTime.Location = new Point(154, 19);
      this.btnSetCurrentTime.Name = "btnSetCurrentTime";
      this.btnSetCurrentTime.Size = new Size(60, 23);
      this.btnSetCurrentTime.TabIndex = 47;
      this.btnSetCurrentTime.Text = "Current";
      this.btnSetCurrentTime.UseVisualStyleBackColor = true;
      this.btnSetCurrentTime.Click += new System.EventHandler(this.btnSetCurrentTime_Click);
      this.btnReadSystemTime.Location = new Point(18, 42);
      this.btnReadSystemTime.Name = "btnReadSystemTime";
      this.btnReadSystemTime.Size = new Size(60, 23);
      this.btnReadSystemTime.TabIndex = 45;
      this.btnReadSystemTime.Text = "Read";
      this.btnReadSystemTime.UseVisualStyleBackColor = true;
      this.btnReadSystemTime.Click += new System.EventHandler(this.btnReadSystemTime_Click);
      this.btnWriteSystemTime.Location = new Point(85, 42);
      this.btnWriteSystemTime.Name = "btnWriteSystemTime";
      this.btnWriteSystemTime.Size = new Size(60, 23);
      this.btnWriteSystemTime.TabIndex = 46;
      this.btnWriteSystemTime.Text = "Write";
      this.btnWriteSystemTime.UseVisualStyleBackColor = true;
      this.btnWriteSystemTime.Click += new System.EventHandler(this.btnWriteSystemTime_Click);
      this.txtSystemTime.CustomFormat = "dd.MM.yyyy HH:mm:ss";
      this.txtSystemTime.Format = DateTimePickerFormat.Custom;
      this.txtSystemTime.Location = new Point(18, 19);
      this.txtSystemTime.Name = "txtSystemTime";
      this.txtSystemTime.ShowUpDown = true;
      this.txtSystemTime.Size = new Size((int) sbyte.MaxValue, 20);
      this.txtSystemTime.TabIndex = 44;
      this.btnResetDevice.Location = new Point(7, 35);
      this.btnResetDevice.Name = "btnResetDevice";
      this.btnResetDevice.Size = new Size(147, 23);
      this.btnResetDevice.TabIndex = 1;
      this.btnResetDevice.Text = "Reset Device";
      this.btnResetDevice.UseVisualStyleBackColor = true;
      this.btnResetDevice.Click += new System.EventHandler(this.btnResetDevice_Click);
      this.btnRadioDisable.Location = new Point(7, 179);
      this.btnRadioDisable.Name = "btnRadioDisable";
      this.btnRadioDisable.Size = new Size(147, 23);
      this.btnRadioDisable.TabIndex = 8;
      this.btnRadioDisable.Text = "Radio Disable";
      this.btnRadioDisable.UseVisualStyleBackColor = true;
      this.btnRadioDisable.Click += new System.EventHandler(this.btnRadioDisable_Click);
      this.btnReadVersion.Location = new Point(7, 6);
      this.btnReadVersion.Name = "btnReadVersion";
      this.btnReadVersion.Size = new Size(147, 23);
      this.btnReadVersion.TabIndex = 2;
      this.btnReadVersion.Text = "Read Version";
      this.btnReadVersion.UseVisualStyleBackColor = true;
      this.btnReadVersion.Click += new System.EventHandler(this.btnReadVersion_Click);
      this.btnPulseDisable.Location = new Point(7, 92);
      this.btnPulseDisable.Name = "btnPulseDisable";
      this.btnPulseDisable.Size = new Size(147, 23);
      this.btnPulseDisable.TabIndex = 5;
      this.btnPulseDisable.Text = "Pulse Disable";
      this.btnPulseDisable.UseVisualStyleBackColor = true;
      this.btnPulseDisable.Click += new System.EventHandler(this.btnPulseDisable_Click);
      this.btnPulseEnable.Location = new Point(7, 121);
      this.btnPulseEnable.Name = "btnPulseEnable";
      this.btnPulseEnable.Size = new Size(147, 23);
      this.btnPulseEnable.TabIndex = 6;
      this.btnPulseEnable.Text = "Pulse Enable";
      this.btnPulseEnable.UseVisualStyleBackColor = true;
      this.btnPulseEnable.Click += new System.EventHandler(this.btnPulseEnable_Click);
      this.btnSendAck.Location = new Point(7, 238);
      this.btnSendAck.Name = "btnSendAck";
      this.btnSendAck.Size = new Size(147, 23);
      this.btnSendAck.TabIndex = 9;
      this.btnSendAck.Text = "Send 0xE5";
      this.btnSendAck.UseVisualStyleBackColor = true;
      this.btnSendAck.Click += new System.EventHandler(this.btnSendAck_Click);
      this.btnRunRamBackup.Location = new Point(7, 64);
      this.btnRunRamBackup.Name = "btnRunRamBackup";
      this.btnRunRamBackup.Size = new Size(147, 23);
      this.btnRunRamBackup.TabIndex = 3;
      this.btnRunRamBackup.Text = "Run RAM Backup";
      this.btnRunRamBackup.UseVisualStyleBackColor = true;
      this.btnRunRamBackup.Click += new System.EventHandler(this.btnRunRamBackup_Click);
      this.tabs.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.tabs.Controls.Add((Control) this.tabGenerally);
      this.tabs.Controls.Add((Control) this.tabChannels);
      this.tabs.Controls.Add((Control) this.tabConfig);
      this.tabs.Controls.Add((Control) this.tabMBus);
      this.tabs.Controls.Add((Control) this.tabMemory);
      this.tabs.Controls.Add((Control) this.tabMinoConnect);
      this.tabs.Location = new Point(3, 3);
      this.tabs.Name = "tabs";
      this.tabs.SelectedIndex = 0;
      this.tabs.Size = new Size(769, 352);
      this.tabs.TabIndex = 33;
      this.tabs.Selected += new TabControlEventHandler(this.tabs_Selected);
      this.tabChannels.Controls.Add((Control) this.txtUndersizeDiff);
      this.tabChannels.Controls.Add((Control) this.label45);
      this.tabChannels.Controls.Add((Control) this.txtOversizeDiff);
      this.tabChannels.Controls.Add((Control) this.label44);
      this.tabChannels.Controls.Add((Control) this.txtBurstLimit);
      this.tabChannels.Controls.Add((Control) this.label43);
      this.tabChannels.Controls.Add((Control) this.txtLower);
      this.tabChannels.Controls.Add((Control) this.btnLeakRead);
      this.tabChannels.Controls.Add((Control) this.label42);
      this.tabChannels.Controls.Add((Control) this.btnLeakWrite);
      this.tabChannels.Controls.Add((Control) this.txtUpper);
      this.tabChannels.Controls.Add((Control) this.label41);
      this.tabChannels.Controls.Add((Control) this.txtUnleak);
      this.tabChannels.Controls.Add((Control) this.label40);
      this.tabChannels.Controls.Add((Control) this.txtLeak);
      this.tabChannels.Controls.Add((Control) this.label39);
      this.tabChannels.Controls.Add((Control) this.txtUndersizeLimit);
      this.tabChannels.Controls.Add((Control) this.btnUndersizeRead);
      this.tabChannels.Controls.Add((Control) this.label36);
      this.tabChannels.Controls.Add((Control) this.btnUndersizeWrite);
      this.tabChannels.Controls.Add((Control) this.txtOversizeLimit);
      this.tabChannels.Controls.Add((Control) this.btnOversizeRead);
      this.tabChannels.Controls.Add((Control) this.label35);
      this.tabChannels.Controls.Add((Control) this.btnOversizeWrite);
      this.tabChannels.Controls.Add((Control) this.txtBurstDiff);
      this.tabChannels.Controls.Add((Control) this.btnBurstRead);
      this.tabChannels.Controls.Add((Control) this.label30);
      this.tabChannels.Controls.Add((Control) this.btnBurstWrite);
      this.tabChannels.Controls.Add((Control) this.txtBlock);
      this.tabChannels.Controls.Add((Control) this.btnBlockRead);
      this.tabChannels.Controls.Add((Control) this.label29);
      this.tabChannels.Controls.Add((Control) this.btnBlockWrite);
      this.tabChannels.Controls.Add((Control) this.label18);
      this.tabChannels.Controls.Add((Control) this.comboChannel);
      this.tabChannels.Controls.Add((Control) this.txtVIFA);
      this.tabChannels.Controls.Add((Control) this.btnVIFARead);
      this.tabChannels.Controls.Add((Control) this.label37);
      this.tabChannels.Controls.Add((Control) this.btnVIFAWrite);
      this.tabChannels.Controls.Add((Control) this.txtExponentA);
      this.tabChannels.Controls.Add((Control) this.txtMantissaA);
      this.tabChannels.Controls.Add((Control) this.btnExponentARead);
      this.tabChannels.Controls.Add((Control) this.label33);
      this.tabChannels.Controls.Add((Control) this.btnExponentAWrite);
      this.tabChannels.Controls.Add((Control) this.btnMantissaARead);
      this.tabChannels.Controls.Add((Control) this.label32);
      this.tabChannels.Controls.Add((Control) this.btnMantissaAWrite);
      this.tabChannels.Controls.Add((Control) this.txtStatusFlagsA);
      this.tabChannels.Controls.Add((Control) this.btnStatusFlagsARead);
      this.tabChannels.Controls.Add((Control) this.label28);
      this.tabChannels.Controls.Add((Control) this.btnStatusFlagsAClear);
      this.tabChannels.Controls.Add((Control) this.btnReadMeterValueA);
      this.tabChannels.Controls.Add((Control) this.label16);
      this.tabChannels.Controls.Add((Control) this.txtMeterValueA);
      this.tabChannels.Controls.Add((Control) this.btnWriteMeterValueA);
      this.tabChannels.Location = new Point(4, 22);
      this.tabChannels.Name = "tabChannels";
      this.tabChannels.Size = new Size(761, 326);
      this.tabChannels.TabIndex = 3;
      this.tabChannels.Text = "Channels";
      this.tabChannels.UseVisualStyleBackColor = true;
      this.txtUndersizeDiff.Location = new Point(538, 154);
      this.txtUndersizeDiff.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtUndersizeDiff.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtUndersizeDiff.Name = "txtUndersizeDiff";
      this.txtUndersizeDiff.Size = new Size(89, 20);
      this.txtUndersizeDiff.TabIndex = 143;
      this.label45.Location = new Point(435, 154);
      this.label45.Name = "label45";
      this.label45.Size = new Size(95, 15);
      this.label45.TabIndex = 142;
      this.label45.Text = "Undersize Diff";
      this.label45.TextAlign = ContentAlignment.MiddleRight;
      this.txtOversizeDiff.Location = new Point(538, 96);
      this.txtOversizeDiff.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtOversizeDiff.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtOversizeDiff.Name = "txtOversizeDiff";
      this.txtOversizeDiff.Size = new Size(89, 20);
      this.txtOversizeDiff.TabIndex = 141;
      this.label44.Location = new Point(435, 97);
      this.label44.Name = "label44";
      this.label44.Size = new Size(95, 15);
      this.label44.TabIndex = 140;
      this.label44.Text = "Oversize Diff";
      this.label44.TextAlign = ContentAlignment.MiddleRight;
      this.txtBurstLimit.Location = new Point(538, 63);
      this.txtBurstLimit.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtBurstLimit.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtBurstLimit.Name = "txtBurstLimit";
      this.txtBurstLimit.Size = new Size(89, 20);
      this.txtBurstLimit.TabIndex = 139;
      this.label43.Location = new Point(435, 63);
      this.label43.Name = "label43";
      this.label43.Size = new Size(95, 15);
      this.label43.TabIndex = 138;
      this.label43.Text = "Burst Limit";
      this.label43.TextAlign = ContentAlignment.MiddleRight;
      this.txtLower.Location = new Point(538, 301);
      this.txtLower.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtLower.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtLower.Name = "txtLower";
      this.txtLower.Size = new Size(89, 20);
      this.txtLower.TabIndex = 137;
      this.btnLeakRead.Location = new Point(635, 298);
      this.btnLeakRead.Name = "btnLeakRead";
      this.btnLeakRead.Size = new Size(60, 23);
      this.btnLeakRead.TabIndex = 136;
      this.btnLeakRead.Text = "Read";
      this.btnLeakRead.UseVisualStyleBackColor = true;
      this.btnLeakRead.Click += new System.EventHandler(this.btnLeakRead_Click);
      this.label42.Location = new Point(435, 302);
      this.label42.Name = "label42";
      this.label42.Size = new Size(95, 15);
      this.label42.TabIndex = 135;
      this.label42.Text = "Leak Lower Limit";
      this.label42.TextAlign = ContentAlignment.MiddleRight;
      this.btnLeakWrite.Location = new Point(701, 298);
      this.btnLeakWrite.Name = "btnLeakWrite";
      this.btnLeakWrite.Size = new Size(60, 23);
      this.btnLeakWrite.TabIndex = 134;
      this.btnLeakWrite.Text = "Write";
      this.btnLeakWrite.UseVisualStyleBackColor = true;
      this.btnLeakWrite.Click += new System.EventHandler(this.btnLeakWrite_Click);
      this.txtUpper.Location = new Point(538, 272);
      this.txtUpper.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtUpper.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtUpper.Name = "txtUpper";
      this.txtUpper.Size = new Size(89, 20);
      this.txtUpper.TabIndex = 133;
      this.label41.Location = new Point(435, 273);
      this.label41.Name = "label41";
      this.label41.Size = new Size(95, 15);
      this.label41.TabIndex = 131;
      this.label41.Text = "Leak Upper Limit";
      this.label41.TextAlign = ContentAlignment.MiddleRight;
      this.txtUnleak.Location = new Point(538, 243);
      this.txtUnleak.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtUnleak.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtUnleak.Name = "txtUnleak";
      this.txtUnleak.Size = new Size(89, 20);
      this.txtUnleak.TabIndex = 129;
      this.label40.Location = new Point(435, 244);
      this.label40.Name = "label40";
      this.label40.Size = new Size(95, 15);
      this.label40.TabIndex = (int) sbyte.MaxValue;
      this.label40.Text = "Unleak Limit";
      this.label40.TextAlign = ContentAlignment.MiddleRight;
      this.txtLeak.Location = new Point(538, 215);
      this.txtLeak.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtLeak.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtLeak.Name = "txtLeak";
      this.txtLeak.Size = new Size(89, 20);
      this.txtLeak.TabIndex = 125;
      this.label39.Location = new Point(435, 216);
      this.label39.Name = "label39";
      this.label39.Size = new Size(95, 15);
      this.label39.TabIndex = 123;
      this.label39.Text = "Leak Limit";
      this.label39.TextAlign = ContentAlignment.MiddleRight;
      this.txtUndersizeLimit.Location = new Point(538, 178);
      this.txtUndersizeLimit.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtUndersizeLimit.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtUndersizeLimit.Name = "txtUndersizeLimit";
      this.txtUndersizeLimit.Size = new Size(89, 20);
      this.txtUndersizeLimit.TabIndex = 121;
      this.btnUndersizeRead.Location = new Point(635, 175);
      this.btnUndersizeRead.Name = "btnUndersizeRead";
      this.btnUndersizeRead.Size = new Size(60, 23);
      this.btnUndersizeRead.TabIndex = 120;
      this.btnUndersizeRead.Text = "Read";
      this.btnUndersizeRead.UseVisualStyleBackColor = true;
      this.btnUndersizeRead.Click += new System.EventHandler(this.btnUndersizeRead_Click);
      this.label36.Location = new Point(435, 179);
      this.label36.Name = "label36";
      this.label36.Size = new Size(95, 15);
      this.label36.TabIndex = 119;
      this.label36.Text = "Undersize Limit";
      this.label36.TextAlign = ContentAlignment.MiddleRight;
      this.btnUndersizeWrite.Location = new Point(701, 175);
      this.btnUndersizeWrite.Name = "btnUndersizeWrite";
      this.btnUndersizeWrite.Size = new Size(60, 23);
      this.btnUndersizeWrite.TabIndex = 118;
      this.btnUndersizeWrite.Text = "Write";
      this.btnUndersizeWrite.UseVisualStyleBackColor = true;
      this.btnUndersizeWrite.Click += new System.EventHandler(this.btnUndersizeWrite_Click);
      this.txtOversizeLimit.Location = new Point(538, 120);
      this.txtOversizeLimit.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtOversizeLimit.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtOversizeLimit.Name = "txtOversizeLimit";
      this.txtOversizeLimit.Size = new Size(89, 20);
      this.txtOversizeLimit.TabIndex = 117;
      this.btnOversizeRead.Location = new Point(635, 117);
      this.btnOversizeRead.Name = "btnOversizeRead";
      this.btnOversizeRead.Size = new Size(60, 23);
      this.btnOversizeRead.TabIndex = 116;
      this.btnOversizeRead.Text = "Read";
      this.btnOversizeRead.UseVisualStyleBackColor = true;
      this.btnOversizeRead.Click += new System.EventHandler(this.btnOversizeRead_Click);
      this.label35.Location = new Point(435, 121);
      this.label35.Name = "label35";
      this.label35.Size = new Size(95, 15);
      this.label35.TabIndex = 115;
      this.label35.Text = "Oversize Limit";
      this.label35.TextAlign = ContentAlignment.MiddleRight;
      this.btnOversizeWrite.Location = new Point(701, 117);
      this.btnOversizeWrite.Name = "btnOversizeWrite";
      this.btnOversizeWrite.Size = new Size(60, 23);
      this.btnOversizeWrite.TabIndex = 114;
      this.btnOversizeWrite.Text = "Write";
      this.btnOversizeWrite.UseVisualStyleBackColor = true;
      this.btnOversizeWrite.Click += new System.EventHandler(this.btnOversizeWrite_Click);
      this.txtBurstDiff.Location = new Point(538, 38);
      this.txtBurstDiff.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtBurstDiff.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtBurstDiff.Name = "txtBurstDiff";
      this.txtBurstDiff.Size = new Size(89, 20);
      this.txtBurstDiff.TabIndex = 113;
      this.btnBurstRead.Location = new Point(635, 59);
      this.btnBurstRead.Name = "btnBurstRead";
      this.btnBurstRead.Size = new Size(60, 23);
      this.btnBurstRead.TabIndex = 112;
      this.btnBurstRead.Text = "Read";
      this.btnBurstRead.UseVisualStyleBackColor = true;
      this.btnBurstRead.Click += new System.EventHandler(this.btnBurstRead_Click);
      this.label30.Location = new Point(435, 39);
      this.label30.Name = "label30";
      this.label30.Size = new Size(95, 15);
      this.label30.TabIndex = 111;
      this.label30.Text = "Burst Diff";
      this.label30.TextAlign = ContentAlignment.MiddleRight;
      this.btnBurstWrite.Location = new Point(701, 59);
      this.btnBurstWrite.Name = "btnBurstWrite";
      this.btnBurstWrite.Size = new Size(60, 23);
      this.btnBurstWrite.TabIndex = 110;
      this.btnBurstWrite.Text = "Write";
      this.btnBurstWrite.UseVisualStyleBackColor = true;
      this.btnBurstWrite.Click += new System.EventHandler(this.btnBurstWrite_Click);
      this.txtBlock.Location = new Point(538, 8);
      this.txtBlock.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtBlock.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtBlock.Name = "txtBlock";
      this.txtBlock.Size = new Size(89, 20);
      this.txtBlock.TabIndex = 109;
      this.btnBlockRead.Location = new Point(635, 5);
      this.btnBlockRead.Name = "btnBlockRead";
      this.btnBlockRead.Size = new Size(60, 23);
      this.btnBlockRead.TabIndex = 108;
      this.btnBlockRead.Text = "Read";
      this.btnBlockRead.UseVisualStyleBackColor = true;
      this.btnBlockRead.Click += new System.EventHandler(this.btnBlockRead_Click);
      this.label29.Location = new Point(435, 9);
      this.label29.Name = "label29";
      this.label29.Size = new Size(95, 15);
      this.label29.TabIndex = 107;
      this.label29.Text = "Block Limit";
      this.label29.TextAlign = ContentAlignment.MiddleRight;
      this.btnBlockWrite.Location = new Point(701, 5);
      this.btnBlockWrite.Name = "btnBlockWrite";
      this.btnBlockWrite.Size = new Size(60, 23);
      this.btnBlockWrite.TabIndex = 106;
      this.btnBlockWrite.Text = "Write";
      this.btnBlockWrite.UseVisualStyleBackColor = true;
      this.btnBlockWrite.Click += new System.EventHandler(this.btnBlockWrite_Click);
      this.label18.Location = new Point(12, 8);
      this.label18.Name = "label18";
      this.label18.Size = new Size(87, 15);
      this.label18.TabIndex = 105;
      this.label18.Text = "Channel:";
      this.label18.TextAlign = ContentAlignment.MiddleRight;
      this.comboChannel.DropDownStyle = ComboBoxStyle.DropDownList;
      this.comboChannel.FormattingEnabled = true;
      this.comboChannel.Items.AddRange(new object[2]
      {
        (object) "A",
        (object) "B"
      });
      this.comboChannel.Location = new Point(105, 6);
      this.comboChannel.Name = "comboChannel";
      this.comboChannel.Size = new Size(93, 21);
      this.comboChannel.TabIndex = 104;
      this.txtVIFA.Location = new Point(106, 165);
      this.txtVIFA.Name = "txtVIFA";
      this.txtVIFA.Size = new Size(93, 20);
      this.txtVIFA.TabIndex = 102;
      this.btnVIFARead.Location = new Point(205, 163);
      this.btnVIFARead.Name = "btnVIFARead";
      this.btnVIFARead.Size = new Size(60, 23);
      this.btnVIFARead.TabIndex = 98;
      this.btnVIFARead.Text = "Read";
      this.btnVIFARead.UseVisualStyleBackColor = true;
      this.btnVIFARead.Click += new System.EventHandler(this.btnVIFARead_Click);
      this.label37.Location = new Point(13, 167);
      this.label37.Name = "label37";
      this.label37.Size = new Size(87, 15);
      this.label37.TabIndex = 97;
      this.label37.Text = "VIF";
      this.label37.TextAlign = ContentAlignment.MiddleRight;
      this.btnVIFAWrite.Location = new Point(271, 163);
      this.btnVIFAWrite.Name = "btnVIFAWrite";
      this.btnVIFAWrite.Size = new Size(60, 23);
      this.btnVIFAWrite.TabIndex = 96;
      this.btnVIFAWrite.Text = "Write";
      this.btnVIFAWrite.UseVisualStyleBackColor = true;
      this.btnVIFAWrite.Click += new System.EventHandler(this.btnVIFAWrite_Click);
      this.txtExponentA.Location = new Point(107, 141);
      this.txtExponentA.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtExponentA.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtExponentA.Name = "txtExponentA";
      this.txtExponentA.Size = new Size(89, 20);
      this.txtExponentA.TabIndex = 93;
      this.txtMantissaA.Location = new Point(108, 115);
      this.txtMantissaA.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtMantissaA.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtMantissaA.Name = "txtMantissaA";
      this.txtMantissaA.Size = new Size(89, 20);
      this.txtMantissaA.TabIndex = 92;
      this.btnExponentARead.Location = new Point(204, 137);
      this.btnExponentARead.Name = "btnExponentARead";
      this.btnExponentARead.Size = new Size(60, 23);
      this.btnExponentARead.TabIndex = 83;
      this.btnExponentARead.Text = "Read";
      this.btnExponentARead.UseVisualStyleBackColor = true;
      this.btnExponentARead.Click += new System.EventHandler(this.btnExponentARead_Click);
      this.label33.Location = new Point(4, 141);
      this.label33.Name = "label33";
      this.label33.Size = new Size(95, 15);
      this.label33.TabIndex = 82;
      this.label33.Text = "Scale Exponent";
      this.label33.TextAlign = ContentAlignment.MiddleRight;
      this.btnExponentAWrite.Location = new Point(270, 137);
      this.btnExponentAWrite.Name = "btnExponentAWrite";
      this.btnExponentAWrite.Size = new Size(60, 23);
      this.btnExponentAWrite.TabIndex = 81;
      this.btnExponentAWrite.Text = "Write";
      this.btnExponentAWrite.UseVisualStyleBackColor = true;
      this.btnExponentAWrite.Click += new System.EventHandler(this.btnExponentAWrite_Click);
      this.btnMantissaARead.Location = new Point(204, 112);
      this.btnMantissaARead.Name = "btnMantissaARead";
      this.btnMantissaARead.Size = new Size(60, 23);
      this.btnMantissaARead.TabIndex = 79;
      this.btnMantissaARead.Text = "Read";
      this.btnMantissaARead.UseVisualStyleBackColor = true;
      this.btnMantissaARead.Click += new System.EventHandler(this.btnMantissaARead_Click);
      this.label32.Location = new Point(12, 116);
      this.label32.Name = "label32";
      this.label32.Size = new Size(87, 15);
      this.label32.TabIndex = 78;
      this.label32.Text = "Scale Mantissa";
      this.label32.TextAlign = ContentAlignment.MiddleRight;
      this.btnMantissaAWrite.Location = new Point(270, 112);
      this.btnMantissaAWrite.Name = "btnMantissaAWrite";
      this.btnMantissaAWrite.Size = new Size(60, 23);
      this.btnMantissaAWrite.TabIndex = 77;
      this.btnMantissaAWrite.Text = "Write";
      this.btnMantissaAWrite.UseVisualStyleBackColor = true;
      this.btnMantissaAWrite.Click += new System.EventHandler(this.btnMantissaAWrite_Click);
      this.txtStatusFlagsA.Location = new Point(105, 66);
      this.txtStatusFlagsA.Name = "txtStatusFlagsA";
      this.txtStatusFlagsA.Size = new Size(93, 20);
      this.txtStatusFlagsA.TabIndex = 75;
      this.btnStatusFlagsARead.Location = new Point(204, 64);
      this.btnStatusFlagsARead.Name = "btnStatusFlagsARead";
      this.btnStatusFlagsARead.Size = new Size(60, 23);
      this.btnStatusFlagsARead.TabIndex = 70;
      this.btnStatusFlagsARead.Text = "Read";
      this.btnStatusFlagsARead.UseVisualStyleBackColor = true;
      this.btnStatusFlagsARead.Click += new System.EventHandler(this.btnStatusFlagsARead_Click);
      this.label28.Location = new Point(12, 68);
      this.label28.Name = "label28";
      this.label28.Size = new Size(87, 15);
      this.label28.TabIndex = 68;
      this.label28.Text = "Status Flags";
      this.label28.TextAlign = ContentAlignment.MiddleRight;
      this.btnStatusFlagsAClear.Location = new Point(270, 64);
      this.btnStatusFlagsAClear.Name = "btnStatusFlagsAClear";
      this.btnStatusFlagsAClear.Size = new Size(60, 23);
      this.btnStatusFlagsAClear.TabIndex = 67;
      this.btnStatusFlagsAClear.Text = "Clear";
      this.btnStatusFlagsAClear.UseVisualStyleBackColor = true;
      this.btnStatusFlagsAClear.Click += new System.EventHandler(this.btnStatusFlagsAClear_Click);
      this.btnReadMeterValueA.Location = new Point(204, 38);
      this.btnReadMeterValueA.Name = "btnReadMeterValueA";
      this.btnReadMeterValueA.Size = new Size(60, 23);
      this.btnReadMeterValueA.TabIndex = 62;
      this.btnReadMeterValueA.Text = "Read";
      this.btnReadMeterValueA.UseVisualStyleBackColor = true;
      this.btnReadMeterValueA.Click += new System.EventHandler(this.btnReadMeterValueA_Click);
      this.label16.Location = new Point(12, 42);
      this.label16.Name = "label16";
      this.label16.Size = new Size(87, 15);
      this.label16.TabIndex = 60;
      this.label16.Text = "Meter value";
      this.label16.TextAlign = ContentAlignment.MiddleRight;
      this.txtMeterValueA.Location = new Point(108, 41);
      this.txtMeterValueA.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtMeterValueA.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtMeterValueA.Name = "txtMeterValueA";
      this.txtMeterValueA.Size = new Size(89, 20);
      this.txtMeterValueA.TabIndex = 61;
      this.btnWriteMeterValueA.Location = new Point(270, 38);
      this.btnWriteMeterValueA.Name = "btnWriteMeterValueA";
      this.btnWriteMeterValueA.Size = new Size(60, 23);
      this.btnWriteMeterValueA.TabIndex = 59;
      this.btnWriteMeterValueA.Text = "Write";
      this.btnWriteMeterValueA.UseVisualStyleBackColor = true;
      this.btnWriteMeterValueA.Click += new System.EventHandler(this.btnWriteMeterValue_Click);
      this.tabConfig.Controls.Add((Control) this.txtPulseOn);
      this.tabConfig.Controls.Add((Control) this.txtPulsePeriod);
      this.tabConfig.Controls.Add((Control) this.label38);
      this.tabConfig.Controls.Add((Control) this.btnPulseWrite);
      this.tabConfig.Controls.Add((Control) this.btnPulseRead);
      this.tabConfig.Controls.Add((Control) this.label31);
      this.tabConfig.Controls.Add((Control) this.btnObisWrite);
      this.tabConfig.Controls.Add((Control) this.btnObisRead);
      this.tabConfig.Controls.Add((Control) this.txtObisCode);
      this.tabConfig.Controls.Add((Control) this.btnRadioListQuery);
      this.tabConfig.Controls.Add((Control) this.txtRadioList);
      this.tabConfig.Controls.Add((Control) this.label27);
      this.tabConfig.Controls.Add((Control) this.btnRadioListWrite);
      this.tabConfig.Controls.Add((Control) this.btnRadioListRead);
      this.tabConfig.Controls.Add((Control) this.txtKeyMonth);
      this.tabConfig.Controls.Add((Control) this.txtKeyDay);
      this.tabConfig.Controls.Add((Control) this.label26);
      this.tabConfig.Controls.Add((Control) this.btnKeydateWrite);
      this.tabConfig.Controls.Add((Control) this.btnKeydateRead);
      this.tabConfig.Controls.Add((Control) this.label25);
      this.tabConfig.Controls.Add((Control) this.btnMBusIdWrite);
      this.tabConfig.Controls.Add((Control) this.btnManIdRead);
      this.tabConfig.Controls.Add((Control) this.txtManIdABC);
      this.tabConfig.Controls.Add((Control) this.label24);
      this.tabConfig.Controls.Add((Control) this.btnMBusTypeWrite);
      this.tabConfig.Controls.Add((Control) this.btnMBusTypeRead);
      this.tabConfig.Controls.Add((Control) this.txtMBusTypeABC);
      this.tabConfig.Controls.Add((Control) this.label23);
      this.tabConfig.Controls.Add((Control) this.btnMBusVersionWrite);
      this.tabConfig.Controls.Add((Control) this.btnMBusVersionRead);
      this.tabConfig.Controls.Add((Control) this.txtMBusVersionABC);
      this.tabConfig.Controls.Add((Control) this.label22);
      this.tabConfig.Controls.Add((Control) this.btnMBusAddressWrite);
      this.tabConfig.Controls.Add((Control) this.btnMBusAddressRead);
      this.tabConfig.Controls.Add((Control) this.txtMBusAddressABC);
      this.tabConfig.Controls.Add((Control) this.label20);
      this.tabConfig.Controls.Add((Control) this.cboxConfigChannel);
      this.tabConfig.Controls.Add((Control) this.label21);
      this.tabConfig.Controls.Add((Control) this.btnSerialWrite);
      this.tabConfig.Controls.Add((Control) this.btnSerialRead);
      this.tabConfig.Controls.Add((Control) this.txtSerialABC);
      this.tabConfig.Controls.Add((Control) this.btnRadioFlagsClear);
      this.tabConfig.Controls.Add((Control) this.btnConfigFlagsClear);
      this.tabConfig.Controls.Add((Control) this.btnRadioFlagsSet);
      this.tabConfig.Controls.Add((Control) this.btnConfigFlagsSet);
      this.tabConfig.Controls.Add((Control) this.btnRadioFlagsWrite);
      this.tabConfig.Controls.Add((Control) this.btnConfigFlagsWrite);
      this.tabConfig.Controls.Add((Control) this.btnRadioFlagsRead);
      this.tabConfig.Controls.Add((Control) this.btnConfigFlagsRead);
      this.tabConfig.Controls.Add((Control) this.txtRadioFlags);
      this.tabConfig.Controls.Add((Control) this.txtConfigFlags);
      this.tabConfig.Controls.Add((Control) this.label19);
      this.tabConfig.Controls.Add((Control) this.label15);
      this.tabConfig.Location = new Point(4, 22);
      this.tabConfig.Name = "tabConfig";
      this.tabConfig.Size = new Size(761, 326);
      this.tabConfig.TabIndex = 4;
      this.tabConfig.Text = "Config";
      this.tabConfig.UseVisualStyleBackColor = true;
      this.txtPulseOn.Location = new Point(536, 234);
      this.txtPulseOn.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtPulseOn.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtPulseOn.Name = "txtPulseOn";
      this.txtPulseOn.Size = new Size(48, 20);
      this.txtPulseOn.TabIndex = 130;
      this.txtPulsePeriod.Location = new Point(482, 234);
      this.txtPulsePeriod.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtPulsePeriod.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtPulsePeriod.Name = "txtPulsePeriod";
      this.txtPulsePeriod.Size = new Size(48, 20);
      this.txtPulsePeriod.TabIndex = 129;
      this.label38.Location = new Point(388, 236);
      this.label38.Name = "label38";
      this.label38.Size = new Size(87, 15);
      this.label38.TabIndex = 128;
      this.label38.Text = "Pulse Testing";
      this.label38.TextAlign = ContentAlignment.MiddleRight;
      this.btnPulseWrite.Location = new Point(656, 232);
      this.btnPulseWrite.Name = "btnPulseWrite";
      this.btnPulseWrite.Size = new Size(60, 23);
      this.btnPulseWrite.TabIndex = (int) sbyte.MaxValue;
      this.btnPulseWrite.Text = "Write";
      this.btnPulseWrite.UseVisualStyleBackColor = true;
      this.btnPulseWrite.Click += new System.EventHandler(this.btnPulseWrite_Click);
      this.btnPulseRead.Location = new Point(590, 232);
      this.btnPulseRead.Name = "btnPulseRead";
      this.btnPulseRead.Size = new Size(60, 23);
      this.btnPulseRead.TabIndex = 126;
      this.btnPulseRead.Text = "Read";
      this.btnPulseRead.UseVisualStyleBackColor = true;
      this.btnPulseRead.Click += new System.EventHandler(this.btnPulseRead_Click);
      this.label31.Location = new Point(389, 94);
      this.label31.Name = "label31";
      this.label31.Size = new Size(87, 15);
      this.label31.TabIndex = 125;
      this.label31.Text = "Obis Code";
      this.label31.TextAlign = ContentAlignment.MiddleRight;
      this.btnObisWrite.Location = new Point(656, 90);
      this.btnObisWrite.Name = "btnObisWrite";
      this.btnObisWrite.Size = new Size(60, 23);
      this.btnObisWrite.TabIndex = 124;
      this.btnObisWrite.Text = "Write";
      this.btnObisWrite.UseVisualStyleBackColor = true;
      this.btnObisWrite.Click += new System.EventHandler(this.btnObisWrite_Click);
      this.btnObisRead.Location = new Point(590, 90);
      this.btnObisRead.Name = "btnObisRead";
      this.btnObisRead.Size = new Size(60, 23);
      this.btnObisRead.TabIndex = 123;
      this.btnObisRead.Text = "Read";
      this.btnObisRead.UseVisualStyleBackColor = true;
      this.btnObisRead.Click += new System.EventHandler(this.btnObisRead_Click);
      this.txtObisCode.Location = new Point(482, 91);
      this.txtObisCode.Name = "txtObisCode";
      this.txtObisCode.Size = new Size(102, 20);
      this.txtObisCode.TabIndex = 122;
      this.btnRadioListQuery.Location = new Point(350, 280);
      this.btnRadioListQuery.Name = "btnRadioListQuery";
      this.btnRadioListQuery.Size = new Size(60, 23);
      this.btnRadioListQuery.TabIndex = 117;
      this.btnRadioListQuery.Text = "Query";
      this.btnRadioListQuery.UseVisualStyleBackColor = true;
      this.btnRadioListQuery.Click += new System.EventHandler(this.btnRadioListQuery_Click);
      this.txtRadioList.Location = new Point(110, 282);
      this.txtRadioList.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtRadioList.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtRadioList.Name = "txtRadioList";
      this.txtRadioList.Size = new Size(102, 20);
      this.txtRadioList.TabIndex = 116;
      this.label27.Location = new Point(17, 284);
      this.label27.Name = "label27";
      this.label27.Size = new Size(87, 15);
      this.label27.TabIndex = 115;
      this.label27.Text = "Radio List";
      this.label27.TextAlign = ContentAlignment.MiddleRight;
      this.btnRadioListWrite.Location = new Point(284, 280);
      this.btnRadioListWrite.Name = "btnRadioListWrite";
      this.btnRadioListWrite.Size = new Size(60, 23);
      this.btnRadioListWrite.TabIndex = 114;
      this.btnRadioListWrite.Text = "Write";
      this.btnRadioListWrite.UseVisualStyleBackColor = true;
      this.btnRadioListWrite.Click += new System.EventHandler(this.btnRadioListWrite_Click);
      this.btnRadioListRead.Location = new Point(218, 280);
      this.btnRadioListRead.Name = "btnRadioListRead";
      this.btnRadioListRead.Size = new Size(60, 23);
      this.btnRadioListRead.TabIndex = 113;
      this.btnRadioListRead.Text = "Read";
      this.btnRadioListRead.UseVisualStyleBackColor = true;
      this.btnRadioListRead.Click += new System.EventHandler(this.btnRadioListRead_Click);
      this.txtKeyMonth.Location = new Point(164, 234);
      this.txtKeyMonth.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtKeyMonth.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtKeyMonth.Name = "txtKeyMonth";
      this.txtKeyMonth.Size = new Size(48, 20);
      this.txtKeyMonth.TabIndex = 111;
      this.txtKeyDay.Location = new Point(110, 234);
      this.txtKeyDay.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtKeyDay.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtKeyDay.Name = "txtKeyDay";
      this.txtKeyDay.Size = new Size(48, 20);
      this.txtKeyDay.TabIndex = 110;
      this.label26.Location = new Point(17, 236);
      this.label26.Name = "label26";
      this.label26.Size = new Size(87, 15);
      this.label26.TabIndex = 109;
      this.label26.Text = "KeyDate DD MM";
      this.label26.TextAlign = ContentAlignment.MiddleRight;
      this.btnKeydateWrite.Location = new Point(284, 232);
      this.btnKeydateWrite.Name = "btnKeydateWrite";
      this.btnKeydateWrite.Size = new Size(60, 23);
      this.btnKeydateWrite.TabIndex = 108;
      this.btnKeydateWrite.Text = "Write";
      this.btnKeydateWrite.UseVisualStyleBackColor = true;
      this.btnKeydateWrite.Click += new System.EventHandler(this.btnKeydateWrite_Click);
      this.btnKeydateRead.Location = new Point(218, 232);
      this.btnKeydateRead.Name = "btnKeydateRead";
      this.btnKeydateRead.Size = new Size(60, 23);
      this.btnKeydateRead.TabIndex = 107;
      this.btnKeydateRead.Text = "Read";
      this.btnKeydateRead.UseVisualStyleBackColor = true;
      this.btnKeydateRead.Click += new System.EventHandler(this.btnKeydateRead_Click);
      this.label25.Location = new Point(17, 198);
      this.label25.Name = "label25";
      this.label25.Size = new Size(87, 15);
      this.label25.TabIndex = 105;
      this.label25.Text = "Manufacturer ID";
      this.label25.TextAlign = ContentAlignment.MiddleRight;
      this.btnMBusIdWrite.Location = new Point(284, 194);
      this.btnMBusIdWrite.Name = "btnMBusIdWrite";
      this.btnMBusIdWrite.Size = new Size(60, 23);
      this.btnMBusIdWrite.TabIndex = 104;
      this.btnMBusIdWrite.Text = "Write";
      this.btnMBusIdWrite.UseVisualStyleBackColor = true;
      this.btnMBusIdWrite.Click += new System.EventHandler(this.btnMBusIdWrite_Click);
      this.btnManIdRead.Location = new Point(218, 194);
      this.btnManIdRead.Name = "btnManIdRead";
      this.btnManIdRead.Size = new Size(60, 23);
      this.btnManIdRead.TabIndex = 103;
      this.btnManIdRead.Text = "Read";
      this.btnManIdRead.UseVisualStyleBackColor = true;
      this.btnManIdRead.Click += new System.EventHandler(this.btnManIdRead_Click);
      this.txtManIdABC.Location = new Point(110, 195);
      this.txtManIdABC.Name = "txtManIdABC";
      this.txtManIdABC.Size = new Size(102, 20);
      this.txtManIdABC.TabIndex = 102;
      this.label24.Location = new Point(17, 172);
      this.label24.Name = "label24";
      this.label24.Size = new Size(87, 15);
      this.label24.TabIndex = 101;
      this.label24.Text = "MBus Type";
      this.label24.TextAlign = ContentAlignment.MiddleRight;
      this.btnMBusTypeWrite.Location = new Point(284, 168);
      this.btnMBusTypeWrite.Name = "btnMBusTypeWrite";
      this.btnMBusTypeWrite.Size = new Size(60, 23);
      this.btnMBusTypeWrite.TabIndex = 100;
      this.btnMBusTypeWrite.Text = "Write";
      this.btnMBusTypeWrite.UseVisualStyleBackColor = true;
      this.btnMBusTypeWrite.Click += new System.EventHandler(this.btnMBusTypeWrite_Click);
      this.btnMBusTypeRead.Location = new Point(218, 168);
      this.btnMBusTypeRead.Name = "btnMBusTypeRead";
      this.btnMBusTypeRead.Size = new Size(60, 23);
      this.btnMBusTypeRead.TabIndex = 99;
      this.btnMBusTypeRead.Text = "Read";
      this.btnMBusTypeRead.UseVisualStyleBackColor = true;
      this.btnMBusTypeRead.Click += new System.EventHandler(this.btnMBusTypeRead_Click);
      this.txtMBusTypeABC.Location = new Point(110, 169);
      this.txtMBusTypeABC.Name = "txtMBusTypeABC";
      this.txtMBusTypeABC.Size = new Size(102, 20);
      this.txtMBusTypeABC.TabIndex = 98;
      this.label23.Location = new Point(17, 146);
      this.label23.Name = "label23";
      this.label23.Size = new Size(87, 15);
      this.label23.TabIndex = 97;
      this.label23.Text = "MBus Version";
      this.label23.TextAlign = ContentAlignment.MiddleRight;
      this.btnMBusVersionWrite.Location = new Point(284, 142);
      this.btnMBusVersionWrite.Name = "btnMBusVersionWrite";
      this.btnMBusVersionWrite.Size = new Size(60, 23);
      this.btnMBusVersionWrite.TabIndex = 96;
      this.btnMBusVersionWrite.Text = "Write";
      this.btnMBusVersionWrite.UseVisualStyleBackColor = true;
      this.btnMBusVersionWrite.Click += new System.EventHandler(this.btnMBusVersionWrite_Click);
      this.btnMBusVersionRead.Location = new Point(218, 142);
      this.btnMBusVersionRead.Name = "btnMBusVersionRead";
      this.btnMBusVersionRead.Size = new Size(60, 23);
      this.btnMBusVersionRead.TabIndex = 95;
      this.btnMBusVersionRead.Text = "Read";
      this.btnMBusVersionRead.UseVisualStyleBackColor = true;
      this.btnMBusVersionRead.Click += new System.EventHandler(this.btnMBusVersionRead_Click);
      this.txtMBusVersionABC.Location = new Point(110, 143);
      this.txtMBusVersionABC.Name = "txtMBusVersionABC";
      this.txtMBusVersionABC.Size = new Size(102, 20);
      this.txtMBusVersionABC.TabIndex = 94;
      this.label22.Location = new Point(17, 120);
      this.label22.Name = "label22";
      this.label22.Size = new Size(87, 15);
      this.label22.TabIndex = 93;
      this.label22.Text = "MBus Address";
      this.label22.TextAlign = ContentAlignment.MiddleRight;
      this.btnMBusAddressWrite.Location = new Point(284, 116);
      this.btnMBusAddressWrite.Name = "btnMBusAddressWrite";
      this.btnMBusAddressWrite.Size = new Size(60, 23);
      this.btnMBusAddressWrite.TabIndex = 92;
      this.btnMBusAddressWrite.Text = "Write";
      this.btnMBusAddressWrite.UseVisualStyleBackColor = true;
      this.btnMBusAddressWrite.Click += new System.EventHandler(this.btnMBusAddressWrite_Click);
      this.btnMBusAddressRead.Location = new Point(218, 116);
      this.btnMBusAddressRead.Name = "btnMBusAddressRead";
      this.btnMBusAddressRead.Size = new Size(60, 23);
      this.btnMBusAddressRead.TabIndex = 91;
      this.btnMBusAddressRead.Text = "Read";
      this.btnMBusAddressRead.UseVisualStyleBackColor = true;
      this.btnMBusAddressRead.Click += new System.EventHandler(this.btnMBusAddressRead_Click);
      this.txtMBusAddressABC.Location = new Point(110, 117);
      this.txtMBusAddressABC.Name = "txtMBusAddressABC";
      this.txtMBusAddressABC.Size = new Size(102, 20);
      this.txtMBusAddressABC.TabIndex = 90;
      this.label20.Location = new Point(17, 67);
      this.label20.Name = "label20";
      this.label20.Size = new Size(87, 15);
      this.label20.TabIndex = 89;
      this.label20.Text = "Config Group";
      this.label20.TextAlign = ContentAlignment.MiddleRight;
      this.cboxConfigChannel.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxConfigChannel.FormattingEnabled = true;
      this.cboxConfigChannel.Items.AddRange(new object[3]
      {
        (object) "A",
        (object) "B",
        (object) "C"
      });
      this.cboxConfigChannel.Location = new Point(110, 65);
      this.cboxConfigChannel.Name = "cboxConfigChannel";
      this.cboxConfigChannel.Size = new Size(102, 21);
      this.cboxConfigChannel.TabIndex = 88;
      this.label21.Location = new Point(17, 94);
      this.label21.Name = "label21";
      this.label21.Size = new Size(87, 15);
      this.label21.TabIndex = 87;
      this.label21.Text = "Serial Number";
      this.label21.TextAlign = ContentAlignment.MiddleRight;
      this.btnSerialWrite.Location = new Point(284, 90);
      this.btnSerialWrite.Name = "btnSerialWrite";
      this.btnSerialWrite.Size = new Size(60, 23);
      this.btnSerialWrite.TabIndex = 83;
      this.btnSerialWrite.Text = "Write";
      this.btnSerialWrite.UseVisualStyleBackColor = true;
      this.btnSerialWrite.Click += new System.EventHandler(this.btnSerialWrite_Click);
      this.btnSerialRead.Location = new Point(218, 90);
      this.btnSerialRead.Name = "btnSerialRead";
      this.btnSerialRead.Size = new Size(60, 23);
      this.btnSerialRead.TabIndex = 82;
      this.btnSerialRead.Text = "Read";
      this.btnSerialRead.UseVisualStyleBackColor = true;
      this.btnSerialRead.Click += new System.EventHandler(this.btnSerialRead_Click);
      this.txtSerialABC.Location = new Point(110, 91);
      this.txtSerialABC.Name = "txtSerialABC";
      this.txtSerialABC.Size = new Size(102, 20);
      this.txtSerialABC.TabIndex = 77;
      this.btnRadioFlagsClear.Location = new Point(416, 38);
      this.btnRadioFlagsClear.Name = "btnRadioFlagsClear";
      this.btnRadioFlagsClear.Size = new Size(60, 23);
      this.btnRadioFlagsClear.TabIndex = 75;
      this.btnRadioFlagsClear.Text = "Clear";
      this.btnRadioFlagsClear.UseVisualStyleBackColor = true;
      this.btnRadioFlagsClear.Click += new System.EventHandler(this.btnRadioFlagsClear_Click);
      this.btnConfigFlagsClear.Location = new Point(416, 11);
      this.btnConfigFlagsClear.Name = "btnConfigFlagsClear";
      this.btnConfigFlagsClear.Size = new Size(60, 23);
      this.btnConfigFlagsClear.TabIndex = 74;
      this.btnConfigFlagsClear.Text = "Clear";
      this.btnConfigFlagsClear.UseVisualStyleBackColor = true;
      this.btnConfigFlagsClear.Click += new System.EventHandler(this.btnConfigFlagsClear_Click);
      this.btnRadioFlagsSet.Location = new Point(350, 38);
      this.btnRadioFlagsSet.Name = "btnRadioFlagsSet";
      this.btnRadioFlagsSet.Size = new Size(60, 23);
      this.btnRadioFlagsSet.TabIndex = 73;
      this.btnRadioFlagsSet.Text = "Set";
      this.btnRadioFlagsSet.UseVisualStyleBackColor = true;
      this.btnRadioFlagsSet.Click += new System.EventHandler(this.btnRadioFlagsSet_Click);
      this.btnConfigFlagsSet.Location = new Point(350, 11);
      this.btnConfigFlagsSet.Name = "btnConfigFlagsSet";
      this.btnConfigFlagsSet.Size = new Size(60, 23);
      this.btnConfigFlagsSet.TabIndex = 72;
      this.btnConfigFlagsSet.Text = "Set";
      this.btnConfigFlagsSet.UseVisualStyleBackColor = true;
      this.btnConfigFlagsSet.Click += new System.EventHandler(this.btnConfigFlagsSet_Click);
      this.btnRadioFlagsWrite.Location = new Point(284, 38);
      this.btnRadioFlagsWrite.Name = "btnRadioFlagsWrite";
      this.btnRadioFlagsWrite.Size = new Size(60, 23);
      this.btnRadioFlagsWrite.TabIndex = 71;
      this.btnRadioFlagsWrite.Text = "Write";
      this.btnRadioFlagsWrite.UseVisualStyleBackColor = true;
      this.btnRadioFlagsWrite.Click += new System.EventHandler(this.btnRadioFlagsWrite_Click);
      this.btnConfigFlagsWrite.Location = new Point(284, 11);
      this.btnConfigFlagsWrite.Name = "btnConfigFlagsWrite";
      this.btnConfigFlagsWrite.Size = new Size(60, 23);
      this.btnConfigFlagsWrite.TabIndex = 70;
      this.btnConfigFlagsWrite.Text = "Write";
      this.btnConfigFlagsWrite.UseVisualStyleBackColor = true;
      this.btnConfigFlagsWrite.Click += new System.EventHandler(this.btnConfigFlagsWrite_Click);
      this.btnRadioFlagsRead.Location = new Point(218, 38);
      this.btnRadioFlagsRead.Name = "btnRadioFlagsRead";
      this.btnRadioFlagsRead.Size = new Size(60, 23);
      this.btnRadioFlagsRead.TabIndex = 69;
      this.btnRadioFlagsRead.Text = "Read";
      this.btnRadioFlagsRead.UseVisualStyleBackColor = true;
      this.btnRadioFlagsRead.Click += new System.EventHandler(this.btnRadioFlagsRead_Click);
      this.btnConfigFlagsRead.Location = new Point(218, 11);
      this.btnConfigFlagsRead.Name = "btnConfigFlagsRead";
      this.btnConfigFlagsRead.Size = new Size(60, 23);
      this.btnConfigFlagsRead.TabIndex = 68;
      this.btnConfigFlagsRead.Text = "Read";
      this.btnConfigFlagsRead.UseVisualStyleBackColor = true;
      this.btnConfigFlagsRead.Click += new System.EventHandler(this.btnConfigFlagsRead_Click);
      this.txtRadioFlags.Location = new Point(110, 39);
      this.txtRadioFlags.Name = "txtRadioFlags";
      this.txtRadioFlags.Size = new Size(102, 20);
      this.txtRadioFlags.TabIndex = 67;
      this.txtConfigFlags.Location = new Point(110, 13);
      this.txtConfigFlags.Name = "txtConfigFlags";
      this.txtConfigFlags.Size = new Size(102, 20);
      this.txtConfigFlags.TabIndex = 66;
      this.label19.Location = new Point(17, 42);
      this.label19.Name = "label19";
      this.label19.Size = new Size(87, 15);
      this.label19.TabIndex = 62;
      this.label19.Text = "cfg_radio_flags";
      this.label19.TextAlign = ContentAlignment.MiddleRight;
      this.label15.Location = new Point(17, 13);
      this.label15.Name = "label15";
      this.label15.Size = new Size(87, 15);
      this.label15.TabIndex = 61;
      this.label15.Text = "cfg_config_flags";
      this.label15.TextAlign = ContentAlignment.MiddleRight;
      this.tabMBus.Controls.Add((Control) this.btnMBusStatusQuery);
      this.tabMBus.Controls.Add((Control) this.btnDepassNow);
      this.tabMBus.Controls.Add((Control) this.txtDepassPeriod);
      this.tabMBus.Controls.Add((Control) this.txtDepassTimeout);
      this.tabMBus.Controls.Add((Control) this.label46);
      this.tabMBus.Controls.Add((Control) this.btnDepassWrite);
      this.tabMBus.Controls.Add((Control) this.btnDepassRead);
      this.tabMBus.Location = new Point(4, 22);
      this.tabMBus.Margin = new Padding(2, 2, 2, 2);
      this.tabMBus.Name = "tabMBus";
      this.tabMBus.Padding = new Padding(2, 2, 2, 2);
      this.tabMBus.Size = new Size(761, 326);
      this.tabMBus.TabIndex = 5;
      this.tabMBus.Text = "MBus";
      this.tabMBus.UseVisualStyleBackColor = true;
      this.btnMBusStatusQuery.Location = new Point(20, 67);
      this.btnMBusStatusQuery.Name = "btnMBusStatusQuery";
      this.btnMBusStatusQuery.Size = new Size(116, 23);
      this.btnMBusStatusQuery.TabIndex = 118;
      this.btnMBusStatusQuery.Text = "MBus Status Query";
      this.btnMBusStatusQuery.UseVisualStyleBackColor = true;
      this.btnMBusStatusQuery.Click += new System.EventHandler(this.btnMBusStatusQuery_Click);
      this.btnDepassNow.Location = new Point(409, 17);
      this.btnDepassNow.Name = "btnDepassNow";
      this.btnDepassNow.Size = new Size(60, 23);
      this.btnDepassNow.TabIndex = 117;
      this.btnDepassNow.Text = "Now";
      this.btnDepassNow.UseVisualStyleBackColor = true;
      this.btnDepassNow.Click += new System.EventHandler(this.btnDepassNow_Click);
      this.txtDepassPeriod.Location = new Point(195, 19);
      this.txtDepassPeriod.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtDepassPeriod.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtDepassPeriod.Name = "txtDepassPeriod";
      this.txtDepassPeriod.Size = new Size(48, 20);
      this.txtDepassPeriod.TabIndex = 116;
      this.txtDepassTimeout.Location = new Point(141, 19);
      this.txtDepassTimeout.Maximum = new Decimal(new int[4]
      {
        int.MaxValue,
        0,
        0,
        0
      });
      this.txtDepassTimeout.Minimum = new Decimal(new int[4]
      {
        int.MinValue,
        0,
        0,
        int.MinValue
      });
      this.txtDepassTimeout.Name = "txtDepassTimeout";
      this.txtDepassTimeout.Size = new Size(48, 20);
      this.txtDepassTimeout.TabIndex = 115;
      this.label46.Location = new Point(17, 20);
      this.label46.Name = "label46";
      this.label46.Size = new Size(118, 15);
      this.label46.TabIndex = 114;
      this.label46.Text = "Depass Timeout/Period";
      this.label46.TextAlign = ContentAlignment.MiddleRight;
      this.btnDepassWrite.Location = new Point(315, 17);
      this.btnDepassWrite.Name = "btnDepassWrite";
      this.btnDepassWrite.Size = new Size(60, 23);
      this.btnDepassWrite.TabIndex = 113;
      this.btnDepassWrite.Text = "Write";
      this.btnDepassWrite.UseVisualStyleBackColor = true;
      this.btnDepassWrite.Click += new System.EventHandler(this.btnDepassWrite_Click);
      this.btnDepassRead.Location = new Point(249, 17);
      this.btnDepassRead.Name = "btnDepassRead";
      this.btnDepassRead.Size = new Size(60, 23);
      this.btnDepassRead.TabIndex = 112;
      this.btnDepassRead.Text = "Read";
      this.btnDepassRead.UseVisualStyleBackColor = true;
      this.btnDepassRead.Click += new System.EventHandler(this.btnDepassRead_Click);
      this.tabMemory.Controls.Add((Control) this.groupBox1);
      this.tabMemory.Location = new Point(4, 22);
      this.tabMemory.Name = "tabMemory";
      this.tabMemory.Size = new Size(761, 326);
      this.tabMemory.TabIndex = 2;
      this.tabMemory.Text = "Memory";
      this.tabMemory.UseVisualStyleBackColor = true;
      this.groupBox1.Controls.Add((Control) this.label5);
      this.groupBox1.Controls.Add((Control) this.label4);
      this.groupBox1.Controls.Add((Control) this.label3);
      this.groupBox1.Controls.Add((Control) this.txtByteSize);
      this.groupBox1.Controls.Add((Control) this.label2);
      this.groupBox1.Controls.Add((Control) this.txtEndAddress);
      this.groupBox1.Controls.Add((Control) this.txtStartAddress);
      this.groupBox1.Controls.Add((Control) this.label1);
      this.groupBox1.Controls.Add((Control) this.lblStartAddress);
      this.groupBox1.Controls.Add((Control) this.btnReadMemory);
      this.groupBox1.Location = new Point(12, 7);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.Size = new Size(161, 116);
      this.groupBox1.TabIndex = 34;
      this.groupBox1.TabStop = false;
      this.label5.Location = new Point(123, 94);
      this.label5.Name = "label5";
      this.label5.Size = new Size(32, 13);
      this.label5.TabIndex = 32;
      this.label5.Text = "bytes";
      this.label5.TextAlign = ContentAlignment.MiddleLeft;
      this.label4.Location = new Point(123, 69);
      this.label4.Name = "label4";
      this.label4.Size = new Size(28, 13);
      this.label4.TabIndex = 31;
      this.label4.Text = "hex";
      this.label4.TextAlign = ContentAlignment.MiddleLeft;
      this.label3.Location = new Point(123, 45);
      this.label3.Name = "label3";
      this.label3.Size = new Size(28, 13);
      this.label3.TabIndex = 30;
      this.label3.Text = "hex";
      this.label3.TextAlign = ContentAlignment.MiddleLeft;
      this.txtByteSize.Location = new Point(56, 90);
      this.txtByteSize.Name = "txtByteSize";
      this.txtByteSize.Size = new Size(65, 20);
      this.txtByteSize.TabIndex = 28;
      this.txtByteSize.Text = "512";
      this.txtByteSize.TextChanged += new System.EventHandler(this.txtByteSize_TextChanged);
      this.label2.Location = new Point(6, 94);
      this.label2.Name = "label2";
      this.label2.Size = new Size(51, 13);
      this.label2.TabIndex = 29;
      this.label2.Text = "Size:";
      this.label2.TextAlign = ContentAlignment.MiddleRight;
      this.txtEndAddress.Location = new Point(56, 66);
      this.txtEndAddress.Name = "txtEndAddress";
      this.txtEndAddress.Size = new Size(65, 20);
      this.txtEndAddress.TabIndex = 26;
      this.txtEndAddress.Text = "9800";
      this.txtEndAddress.TextChanged += new System.EventHandler(this.txtStartEnd_TextChanged);
      this.txtStartAddress.Location = new Point(56, 42);
      this.txtStartAddress.Name = "txtStartAddress";
      this.txtStartAddress.Size = new Size(65, 20);
      this.txtStartAddress.TabIndex = 24;
      this.txtStartAddress.Text = "9600";
      this.txtStartAddress.TextChanged += new System.EventHandler(this.txtStartEnd_TextChanged);
      this.label1.Location = new Point(5, 70);
      this.label1.Name = "label1";
      this.label1.Size = new Size(48, 13);
      this.label1.TabIndex = 27;
      this.label1.Text = "End: 0x";
      this.label1.TextAlign = ContentAlignment.MiddleRight;
      this.lblStartAddress.Location = new Point(5, 46);
      this.lblStartAddress.Name = "lblStartAddress";
      this.lblStartAddress.Size = new Size(48, 13);
      this.lblStartAddress.TabIndex = 25;
      this.lblStartAddress.Text = "Start: 0x";
      this.lblStartAddress.TextAlign = ContentAlignment.MiddleRight;
      this.btnReadMemory.Location = new Point(4, 13);
      this.btnReadMemory.Name = "btnReadMemory";
      this.btnReadMemory.Size = new Size(147, 23);
      this.btnReadMemory.TabIndex = 23;
      this.btnReadMemory.Text = "Read Memory";
      this.btnReadMemory.UseVisualStyleBackColor = true;
      this.btnReadMemory.Click += new System.EventHandler(this.btnReadMemory_Click);
      this.tabMinoConnect.Controls.Add((Control) this.btnCloseSecondaryComPort);
      this.tabMinoConnect.Controls.Add((Control) this.btnOpenSecondaryComPort);
      this.tabMinoConnect.Controls.Add((Control) this.label14);
      this.tabMinoConnect.Controls.Add((Control) this.cboxPortNames);
      this.tabMinoConnect.Controls.Add((Control) this.groupBox9);
      this.tabMinoConnect.Controls.Add((Control) this.groupBox5);
      this.tabMinoConnect.Location = new Point(4, 22);
      this.tabMinoConnect.Name = "tabMinoConnect";
      this.tabMinoConnect.Size = new Size(761, 326);
      this.tabMinoConnect.TabIndex = 1;
      this.tabMinoConnect.Text = "MinoConnect";
      this.tabMinoConnect.UseVisualStyleBackColor = true;
      this.btnCloseSecondaryComPort.Location = new Point(327, 15);
      this.btnCloseSecondaryComPort.Margin = new Padding(2, 3, 2, 3);
      this.btnCloseSecondaryComPort.Name = "btnCloseSecondaryComPort";
      this.btnCloseSecondaryComPort.Size = new Size(77, 23);
      this.btnCloseSecondaryComPort.TabIndex = 33;
      this.btnCloseSecondaryComPort.Text = "Close";
      this.btnCloseSecondaryComPort.UseVisualStyleBackColor = true;
      this.btnCloseSecondaryComPort.Click += new System.EventHandler(this.btnCloseSecondaryComPort_Click);
      this.btnOpenSecondaryComPort.Location = new Point(246, 15);
      this.btnOpenSecondaryComPort.Margin = new Padding(2, 3, 2, 3);
      this.btnOpenSecondaryComPort.Name = "btnOpenSecondaryComPort";
      this.btnOpenSecondaryComPort.Size = new Size(77, 23);
      this.btnOpenSecondaryComPort.TabIndex = 32;
      this.btnOpenSecondaryComPort.Text = "Open";
      this.btnOpenSecondaryComPort.UseVisualStyleBackColor = true;
      this.btnOpenSecondaryComPort.Click += new System.EventHandler(this.btnOpenSecondaryComPort_Click);
      this.label14.AutoSize = true;
      this.label14.Location = new Point(21, 20);
      this.label14.Name = "label14";
      this.label14.Size = new Size(134, 13);
      this.label14.TabIndex = 31;
      this.label14.Text = "Second MinoConnect port:";
      this.cboxPortNames.FormattingEnabled = true;
      this.cboxPortNames.Location = new Point(160, 17);
      this.cboxPortNames.Name = "cboxPortNames";
      this.cboxPortNames.Size = new Size(71, 21);
      this.cboxPortNames.TabIndex = 30;
      this.groupBox9.Controls.Add((Control) this.txtSendTestPacketPower);
      this.groupBox9.Controls.Add((Control) this.label12);
      this.groupBox9.Controls.Add((Control) this.btnStopSendMinoConnectTestPacket);
      this.groupBox9.Controls.Add((Control) this.label13);
      this.groupBox9.Controls.Add((Control) this.cboxRadioModeForMiConTestPacket);
      this.groupBox9.Controls.Add((Control) this.btnStartSendMinoConnectTestPacket);
      this.groupBox9.Location = new Point(300, 44);
      this.groupBox9.Name = "groupBox9";
      this.groupBox9.Size = new Size(252, 148);
      this.groupBox9.TabIndex = 29;
      this.groupBox9.TabStop = false;
      this.groupBox9.Text = "Transmit";
      this.txtSendTestPacketPower.Location = new Point(88, 44);
      this.txtSendTestPacketPower.Maximum = new Decimal(new int[4]
      {
        7,
        0,
        0,
        0
      });
      this.txtSendTestPacketPower.Name = "txtSendTestPacketPower";
      this.txtSendTestPacketPower.Size = new Size(121, 20);
      this.txtSendTestPacketPower.TabIndex = 30;
      this.txtSendTestPacketPower.Value = new Decimal(new int[4]
      {
        7,
        0,
        0,
        0
      });
      this.label12.Location = new Point(7, 44);
      this.label12.Name = "label12";
      this.label12.Size = new Size(75, 15);
      this.label12.TabIndex = 29;
      this.label12.Text = "Power (0-7):";
      this.label12.TextAlign = ContentAlignment.MiddleRight;
      this.btnStopSendMinoConnectTestPacket.Location = new Point(13, 107);
      this.btnStopSendMinoConnectTestPacket.Name = "btnStopSendMinoConnectTestPacket";
      this.btnStopSendMinoConnectTestPacket.Size = new Size(225, 23);
      this.btnStopSendMinoConnectTestPacket.TabIndex = 25;
      this.btnStopSendMinoConnectTestPacket.Text = "Stop";
      this.btnStopSendMinoConnectTestPacket.UseVisualStyleBackColor = true;
      this.btnStopSendMinoConnectTestPacket.Click += new System.EventHandler(this.btnStopSendMinoConnectTestPacket_Click);
      this.label13.Location = new Point(40, 18);
      this.label13.Name = "label13";
      this.label13.Size = new Size(42, 15);
      this.label13.TabIndex = 24;
      this.label13.Text = "Mode:";
      this.label13.TextAlign = ContentAlignment.MiddleRight;
      this.cboxRadioModeForMiConTestPacket.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxRadioModeForMiConTestPacket.FormattingEnabled = true;
      this.cboxRadioModeForMiConTestPacket.Location = new Point(88, 17);
      this.cboxRadioModeForMiConTestPacket.Name = "cboxRadioModeForMiConTestPacket";
      this.cboxRadioModeForMiConTestPacket.Size = new Size(121, 21);
      this.cboxRadioModeForMiConTestPacket.TabIndex = 23;
      this.btnStartSendMinoConnectTestPacket.Location = new Point(13, 70);
      this.btnStartSendMinoConnectTestPacket.Name = "btnStartSendMinoConnectTestPacket";
      this.btnStartSendMinoConnectTestPacket.Size = new Size(225, 23);
      this.btnStartSendMinoConnectTestPacket.TabIndex = 0;
      this.btnStartSendMinoConnectTestPacket.Text = "Start send MinoConnect test packet";
      this.btnStartSendMinoConnectTestPacket.UseVisualStyleBackColor = true;
      this.btnStartSendMinoConnectTestPacket.Click += new System.EventHandler(this.btnStartSendMinoConnectTestPacket_Click);
      this.groupBox5.Controls.Add((Control) this.label9);
      this.groupBox5.Controls.Add((Control) this.label8);
      this.groupBox5.Controls.Add((Control) this.txtTimeout);
      this.groupBox5.Controls.Add((Control) this.cboxRadioMode);
      this.groupBox5.Controls.Add((Control) this.label7);
      this.groupBox5.Controls.Add((Control) this.txtSerialnumberInputA);
      this.groupBox5.Controls.Add((Control) this.btnReceiveRadioPacket);
      this.groupBox5.Controls.Add((Control) this.label6);
      this.groupBox5.Location = new Point(11, 44);
      this.groupBox5.Name = "groupBox5";
      this.groupBox5.Size = new Size(283, 148);
      this.groupBox5.TabIndex = 28;
      this.groupBox5.TabStop = false;
      this.groupBox5.Text = "Receive";
      this.label9.Location = new Point(229, 71);
      this.label9.Name = "label9";
      this.label9.Size = new Size(49, 15);
      this.label9.TabIndex = 29;
      this.label9.Text = "sec";
      this.label9.TextAlign = ContentAlignment.MiddleLeft;
      this.label8.Location = new Point(54, 18);
      this.label8.Name = "label8";
      this.label8.Size = new Size(42, 15);
      this.label8.TabIndex = 24;
      this.label8.Text = "Mode:";
      this.label8.TextAlign = ContentAlignment.MiddleRight;
      this.txtTimeout.Location = new Point(102, 70);
      this.txtTimeout.Maximum = new Decimal(new int[4]
      {
        10000,
        0,
        0,
        0
      });
      this.txtTimeout.Name = "txtTimeout";
      this.txtTimeout.Size = new Size(121, 20);
      this.txtTimeout.TabIndex = 28;
      this.txtTimeout.Value = new Decimal(new int[4]
      {
        180,
        0,
        0,
        0
      });
      this.cboxRadioMode.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxRadioMode.FormattingEnabled = true;
      this.cboxRadioMode.Location = new Point(102, 17);
      this.cboxRadioMode.Name = "cboxRadioMode";
      this.cboxRadioMode.Size = new Size(121, 21);
      this.cboxRadioMode.TabIndex = 23;
      this.label7.Location = new Point(21, 70);
      this.label7.Name = "label7";
      this.label7.Size = new Size(75, 15);
      this.label7.TabIndex = 27;
      this.label7.Text = "Timeout:";
      this.label7.TextAlign = ContentAlignment.MiddleRight;
      this.txtSerialnumberInputA.Location = new Point(102, 44);
      this.txtSerialnumberInputA.Maximum = new Decimal(new int[4]
      {
        99999999,
        0,
        0,
        0
      });
      this.txtSerialnumberInputA.Name = "txtSerialnumberInputA";
      this.txtSerialnumberInputA.Size = new Size(120, 20);
      this.txtSerialnumberInputA.TabIndex = 26;
      this.btnReceiveRadioPacket.Location = new Point(35, 107);
      this.btnReceiveRadioPacket.Name = "btnReceiveRadioPacket";
      this.btnReceiveRadioPacket.Size = new Size(199, 23);
      this.btnReceiveRadioPacket.TabIndex = 0;
      this.btnReceiveRadioPacket.Text = "Receive radio packet";
      this.btnReceiveRadioPacket.UseVisualStyleBackColor = true;
      this.btnReceiveRadioPacket.Click += new System.EventHandler(this.btnReceiveRadioPacket_Click);
      this.label6.Location = new Point(0, 44);
      this.label6.Name = "label6";
      this.label6.Size = new Size(96, 15);
      this.label6.TabIndex = 25;
      this.label6.Text = "Serialnumber A:";
      this.label6.TextAlign = ContentAlignment.MiddleRight;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(780, 562);
      this.Controls.Add((Control) this.tabs);
      this.Controls.Add((Control) this.groupBox2);
      this.Controls.Add((Control) this.statusStrip);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (TestCommand);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Test commands";
      this.FormClosing += new FormClosingEventHandler(this.TestCommand_FormClosing);
      this.Load += new System.EventHandler(this.TestCommand_Load);
      this.statusStrip.ResumeLayout(false);
      this.statusStrip.PerformLayout();
      this.groupBox2.ResumeLayout(false);
      this.groupBox2.PerformLayout();
      this.tabGenerally.ResumeLayout(false);
      this.groupBox6.ResumeLayout(false);
      this.txtTimeoutRadioReceive.EndInit();
      this.groupBox7.ResumeLayout(false);
      this.txtRadioTimeout.EndInit();
      this.txtRadioFrequencyOffset.EndInit();
      this.groupBox3.ResumeLayout(false);
      this.tabs.ResumeLayout(false);
      this.tabChannels.ResumeLayout(false);
      this.tabChannels.PerformLayout();
      this.txtUndersizeDiff.EndInit();
      this.txtOversizeDiff.EndInit();
      this.txtBurstLimit.EndInit();
      this.txtLower.EndInit();
      this.txtUpper.EndInit();
      this.txtUnleak.EndInit();
      this.txtLeak.EndInit();
      this.txtUndersizeLimit.EndInit();
      this.txtOversizeLimit.EndInit();
      this.txtBurstDiff.EndInit();
      this.txtBlock.EndInit();
      this.txtExponentA.EndInit();
      this.txtMantissaA.EndInit();
      this.txtMeterValueA.EndInit();
      this.tabConfig.ResumeLayout(false);
      this.tabConfig.PerformLayout();
      this.txtPulseOn.EndInit();
      this.txtPulsePeriod.EndInit();
      this.txtRadioList.EndInit();
      this.txtKeyMonth.EndInit();
      this.txtKeyDay.EndInit();
      this.tabMBus.ResumeLayout(false);
      this.txtDepassPeriod.EndInit();
      this.txtDepassTimeout.EndInit();
      this.tabMemory.ResumeLayout(false);
      this.groupBox1.ResumeLayout(false);
      this.groupBox1.PerformLayout();
      this.tabMinoConnect.ResumeLayout(false);
      this.tabMinoConnect.PerformLayout();
      this.groupBox9.ResumeLayout(false);
      this.txtSendTestPacketPower.EndInit();
      this.groupBox5.ResumeLayout(false);
      this.txtTimeout.EndInit();
      this.txtSerialnumberInputA.EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private delegate bool ActionSimpleMethod();
  }
}


--- TypeDataEditor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.TypeDataEditor
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public class TypeDataEditor : Form
  {
    private PDC_HandlerFunctions MyFunctions;
    private MeterInfo editMeterInfo;
    private PDC_Meter editMeter;
    private PDC_DeviceIdentity hardware;
    private IContainer components = (IContainer) null;
    private ComboBox cboxHardwareType;
    private Label lblHardwareType;
    private TextBox txtDescription;
    private ComboBox txtSapNumber;
    private Label label4;
    private Label label2;
    private Button btnSave;
    private Button btnCancel;
    private ErrorProvider error;
    private ComboBox cboxHandlerObject;
    private RadioButton rbtnUse;
    private RadioButton rbtnUseCurrentMeterObject;
    private ComboBox cboxBaseType;
    private Label lblBaseType;

    public TypeDataEditor() => this.InitializeComponent();

    internal static void ShowDialog(
      Form owner,
      PDC_DeviceIdentity hardware,
      PDC_HandlerFunctions MyFunctions)
    {
      TypeDataEditor.ShowDialog(owner, hardware, MyFunctions, (PDC_Meter) null, (MeterInfo) null);
    }

    internal static void ShowDialog(
      Form owner,
      PDC_DeviceIdentity hardware,
      PDC_HandlerFunctions MyFunctions,
      PDC_Meter editMeter,
      MeterInfo editMeterInfo)
    {
      using (TypeDataEditor typeDataEditor = new TypeDataEditor())
      {
        typeDataEditor.editMeter = editMeter;
        typeDataEditor.MyFunctions = MyFunctions;
        typeDataEditor.editMeterInfo = editMeterInfo;
        typeDataEditor.hardware = hardware;
        int num = (int) typeDataEditor.ShowDialog((IWin32Window) owner);
      }
    }

    private void TypeDataEditor_Load(object sender, EventArgs e)
    {
      this.cboxHandlerObject.DataSource = (object) ZR_ClassLibrary.Util.GetNamesOfEnum(typeof (HandlerMeterType));
      this.cboxHandlerObject.SelectedItem = (object) HandlerMeterType.WorkMeter;
      this.cboxBaseType.DataSource = (object) PDC_Database.LoadMeterInfo("PDC_BASETYPE", this.hardware);
      this.RefreshHardwareTypes();
      if (this.editMeterInfo != null)
      {
        this.SelectHardwareType(MeterDatabase.GetHardwareType(this.editMeterInfo.HardwareTypeID));
        this.txtSapNumber.Text = this.editMeterInfo.PPSArtikelNr;
        this.txtDescription.Text = this.editMeterInfo.Description;
        this.btnSave.Text = "Override";
        this.Text = "Edit type";
        this.rbtnUse.Checked = false;
        this.rbtnUseCurrentMeterObject.Visible = true;
        this.SelectBaseType();
      }
      else
      {
        this.txtSapNumber.Text = "PDC_BASETYPE";
        this.txtDescription.Text = "Base type";
        this.btnSave.Text = "Save";
        this.Text = "Create new type";
        this.rbtnUse.Checked = true;
        this.rbtnUseCurrentMeterObject.Visible = false;
      }
    }

    private void SelectBaseType()
    {
      if (this.editMeter == null)
        return;
      DeviceIdentification deviceIdentification = this.editMeter.GetDeviceIdentification();
      if (deviceIdentification == null || !deviceIdentification.IsChecksumOK)
        return;
      for (int index = 0; index < this.cboxBaseType.Items.Count; ++index)
      {
        if ((long) (this.cboxBaseType.Items[index] as MeterInfo).MeterInfoID == (long) deviceIdentification.BaseTypeID)
        {
          this.cboxBaseType.SelectedIndex = index;
          break;
        }
      }
    }

    private void SelectHardwareType(HardwareType sel)
    {
      for (int index = 0; index < this.cboxHardwareType.Items.Count; ++index)
      {
        if ((this.cboxHardwareType.Items[index] as HardwareType).HardwareTypeID == sel.HardwareTypeID)
        {
          this.cboxHardwareType.SelectedIndex = index;
          break;
        }
      }
    }

    private void rbtnUse_CheckedChanged(object sender, EventArgs e)
    {
      this.cboxHandlerObject.Enabled = this.rbtnUse.Checked;
      this.RefreshHardwareTypes();
    }

    private void cboxHandlerObject_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.RefreshHardwareTypes();
    }

    private void txtSapNumber_TextChanged(object sender, EventArgs e)
    {
      bool flag = this.txtSapNumber.Text == "PDC_BASETYPE";
      this.cboxHardwareType.Visible = !flag;
      this.lblHardwareType.Visible = !flag;
      this.cboxBaseType.Visible = !flag;
      this.lblBaseType.Visible = !flag;
    }

    private void btnSave_Click(object sender, EventArgs e)
    {
      this.error.Clear();
      bool flag = true;
      PDC_Meter selectedHandlerMeter = this.GetSelectedHandlerMeter();
      if (selectedHandlerMeter == null)
      {
        string str = "Meter object can not be null!";
        this.error.SetError(this.rbtnUse.Checked ? (Control) this.cboxHandlerObject : (Control) this.rbtnUseCurrentMeterObject, str);
        flag = false;
      }
      if (selectedHandlerMeter != null && this.hardware != selectedHandlerMeter.Version.Type)
      {
        string str = "Wrong type of Meter object! Actual: " + selectedHandlerMeter.Version.Type.ToString() + " Expected: " + this.hardware.ToString();
        this.error.SetError(this.rbtnUse.Checked ? (Control) this.cboxHandlerObject : (Control) this.rbtnUseCurrentMeterObject, str);
        flag = false;
      }
      if (string.IsNullOrEmpty(this.txtSapNumber.Text))
      {
        this.error.SetError((Control) this.txtSapNumber, "SAP material number can not be empty!");
        flag = false;
      }
      if (this.txtSapNumber.Text == "PDC_BASETYPE" && MeterDatabase.GetDatabaseLocationName() != "ZENNER Development")
      {
        this.error.SetError((Control) this.txtSapNumber, "Only 'ZENNER Development' can create a base type!");
        flag = false;
      }
      HardwareType selectedHardwareType = this.GetSelectedHardwareType();
      if (selectedHardwareType == null)
      {
        this.error.SetError((Control) this.cboxHardwareType, "Hardware type can not be null!");
        flag = false;
      }
      if (string.IsNullOrEmpty(this.txtDescription.Text))
      {
        this.error.SetError((Control) this.txtDescription, "The type description can not be empty!");
        flag = false;
      }
      if (!flag)
        return;
      if (this.cboxBaseType.Visible && this.cboxBaseType.SelectedItem is MeterInfo)
      {
        MeterInfo selectedItem = this.cboxBaseType.SelectedItem as MeterInfo;
        DeviceIdentification ident = selectedHandlerMeter.GetDeviceIdentification();
        if (ident == null || !ident.IsChecksumOK)
          ident = new DeviceIdentification();
        ident.BaseTypeID = (uint) selectedItem.MeterInfoID;
        selectedHandlerMeter.SetDeviceIdentification(ident);
      }
      if (this.editMeterInfo == null)
      {
        if (PDC_Database.CreateType(this.txtSapNumber.Text.Trim(), selectedHardwareType.HardwareTypeID, this.txtDescription.Text.Trim(), selectedHandlerMeter))
          this.Close();
        else
          ZR_ClassLibMessages.ShowAndClearErrors();
      }
      else
      {
        if (MessageBox.Show("Override existing type?", "Save", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) != DialogResult.Yes)
          return;
        this.editMeterInfo.Description = this.txtDescription.Text.Trim();
        this.editMeterInfo.PPSArtikelNr = this.txtSapNumber.Text.Trim();
        this.editMeterInfo.HardwareTypeID = selectedHardwareType.HardwareTypeID;
        if (PDC_Database.UpdateType(this.editMeterInfo, selectedHandlerMeter))
          this.Close();
        else
          ZR_ClassLibMessages.ShowAndClearErrors();
      }
      this.DialogResult = DialogResult.OK;
    }

    private HardwareType GetSelectedHardwareType()
    {
      return this.cboxHardwareType.SelectedItem as HardwareType;
    }

    private PDC_Meter GetSelectedHandlerMeter()
    {
      if (this.MyFunctions == null)
        return (PDC_Meter) null;
      if (!this.rbtnUse.Checked)
        return this.editMeter;
      switch ((HandlerMeterType) Enum.Parse(typeof (HandlerMeterType), this.cboxHandlerObject.SelectedItem.ToString()))
      {
        case HandlerMeterType.WorkMeter:
          return this.MyFunctions.WorkMeter != null ? this.MyFunctions.WorkMeter.DeepCopy() : (PDC_Meter) null;
        case HandlerMeterType.TypeMeter:
          return this.MyFunctions.TypeMeter != null ? this.MyFunctions.TypeMeter.DeepCopy() : (PDC_Meter) null;
        case HandlerMeterType.BackupMeter:
          return this.MyFunctions.BackupMeter != null ? this.MyFunctions.BackupMeter.DeepCopy() : (PDC_Meter) null;
        case HandlerMeterType.ConnectedMeter:
          return this.MyFunctions.ConnectedMeter != null ? this.MyFunctions.ConnectedMeter.DeepCopy() : (PDC_Meter) null;
        default:
          throw new NotImplementedException();
      }
    }

    private void RefreshHardwareTypes()
    {
      PDC_Meter selectedHandlerMeter = this.GetSelectedHandlerMeter();
      if (selectedHandlerMeter != null)
        this.cboxHardwareType.DataSource = (object) PDC_Database.LoadHardwareType(selectedHandlerMeter.Version);
      else
        this.cboxHardwareType.DataSource = (object) null;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (TypeDataEditor));
      this.cboxHardwareType = new ComboBox();
      this.lblHardwareType = new Label();
      this.txtDescription = new TextBox();
      this.txtSapNumber = new ComboBox();
      this.label4 = new Label();
      this.label2 = new Label();
      this.btnSave = new Button();
      this.btnCancel = new Button();
      this.error = new ErrorProvider(this.components);
      this.cboxHandlerObject = new ComboBox();
      this.rbtnUseCurrentMeterObject = new RadioButton();
      this.rbtnUse = new RadioButton();
      this.cboxBaseType = new ComboBox();
      this.lblBaseType = new Label();
      ((ISupportInitialize) this.error).BeginInit();
      this.SuspendLayout();
      this.cboxHardwareType.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxHardwareType.FormattingEnabled = true;
      this.cboxHardwareType.Location = new Point(132, 121);
      this.cboxHardwareType.Name = "cboxHardwareType";
      this.cboxHardwareType.Size = new Size(428, 21);
      this.cboxHardwareType.TabIndex = 4;
      this.lblHardwareType.Location = new Point(13, 123);
      this.lblHardwareType.Name = "lblHardwareType";
      this.lblHardwareType.Size = new Size(113, 13);
      this.lblHardwareType.TabIndex = 60;
      this.lblHardwareType.Text = "Hardware Type:";
      this.lblHardwareType.TextAlign = ContentAlignment.MiddleRight;
      this.txtDescription.Location = new Point(132, 41);
      this.txtDescription.MaxLength = (int) byte.MaxValue;
      this.txtDescription.Name = "txtDescription";
      this.txtDescription.Size = new Size(428, 20);
      this.txtDescription.TabIndex = 1;
      this.txtSapNumber.FormattingEnabled = true;
      this.txtSapNumber.Items.AddRange(new object[2]
      {
        (object) "NotDefined",
        (object) "PDC_BASETYPE"
      });
      this.txtSapNumber.Location = new Point(132, 67);
      this.txtSapNumber.Name = "txtSapNumber";
      this.txtSapNumber.Size = new Size(132, 21);
      this.txtSapNumber.TabIndex = 3;
      this.txtSapNumber.TextChanged += new System.EventHandler(this.txtSapNumber_TextChanged);
      this.label4.Location = new Point(13, 70);
      this.label4.Name = "label4";
      this.label4.Size = new Size(113, 13);
      this.label4.TabIndex = 40;
      this.label4.Text = "SAP material number:";
      this.label4.TextAlign = ContentAlignment.MiddleRight;
      this.label2.Location = new Point(13, 44);
      this.label2.Name = "label2";
      this.label2.Size = new Size(113, 13);
      this.label2.TabIndex = 54;
      this.label2.Text = "Description:";
      this.label2.TextAlign = ContentAlignment.MiddleRight;
      this.btnSave.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnSave.Image = (Image) componentResourceManager.GetObject("btnSave.Image");
      this.btnSave.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSave.ImeMode = ImeMode.NoControl;
      this.btnSave.Location = new Point(179, 154);
      this.btnSave.Name = "btnSave";
      this.btnSave.Size = new Size(99, 29);
      this.btnSave.TabIndex = 5;
      this.btnSave.Text = "Save";
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnCancel.DialogResult = DialogResult.Cancel;
      this.btnCancel.Image = (Image) componentResourceManager.GetObject("btnCancel.Image");
      this.btnCancel.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnCancel.ImeMode = ImeMode.NoControl;
      this.btnCancel.Location = new Point(294, 154);
      this.btnCancel.Name = "btnCancel";
      this.btnCancel.Size = new Size(99, 29);
      this.btnCancel.TabIndex = 6;
      this.btnCancel.Text = "Cancel";
      this.btnCancel.UseVisualStyleBackColor = true;
      this.error.ContainerControl = (ContainerControl) this;
      this.cboxHandlerObject.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxHandlerObject.Enabled = false;
      this.cboxHandlerObject.FormattingEnabled = true;
      this.cboxHandlerObject.Location = new Point(132, 12);
      this.cboxHandlerObject.Name = "cboxHandlerObject";
      this.cboxHandlerObject.Size = new Size(132, 21);
      this.cboxHandlerObject.TabIndex = 62;
      this.cboxHandlerObject.SelectedIndexChanged += new System.EventHandler(this.cboxHandlerObject_SelectedIndexChanged);
      this.rbtnUseCurrentMeterObject.AutoSize = true;
      this.rbtnUseCurrentMeterObject.Checked = true;
      this.rbtnUseCurrentMeterObject.Location = new Point(274, 13);
      this.rbtnUseCurrentMeterObject.Name = "rbtnUseCurrentMeterObject";
      this.rbtnUseCurrentMeterObject.Size = new Size(141, 17);
      this.rbtnUseCurrentMeterObject.TabIndex = 63;
      this.rbtnUseCurrentMeterObject.TabStop = true;
      this.rbtnUseCurrentMeterObject.Text = "Use current meter object";
      this.rbtnUseCurrentMeterObject.UseVisualStyleBackColor = true;
      this.rbtnUseCurrentMeterObject.CheckedChanged += new System.EventHandler(this.rbtnUse_CheckedChanged);
      this.rbtnUse.AutoSize = true;
      this.rbtnUse.Location = new Point(82, 13);
      this.rbtnUse.Name = "rbtnUse";
      this.rbtnUse.Size = new Size(44, 17);
      this.rbtnUse.TabIndex = 64;
      this.rbtnUse.Text = "Use";
      this.rbtnUse.UseVisualStyleBackColor = true;
      this.rbtnUse.CheckedChanged += new System.EventHandler(this.rbtnUse_CheckedChanged);
      this.cboxBaseType.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cboxBaseType.FormattingEnabled = true;
      this.cboxBaseType.Items.AddRange(new object[2]
      {
        (object) "NotDefined",
        (object) "PDC_BASETYPE"
      });
      this.cboxBaseType.Location = new Point(132, 94);
      this.cboxBaseType.Name = "cboxBaseType";
      this.cboxBaseType.Size = new Size(428, 21);
      this.cboxBaseType.TabIndex = 65;
      this.lblBaseType.Location = new Point(17, 97);
      this.lblBaseType.Name = "lblBaseType";
      this.lblBaseType.Size = new Size(109, 13);
      this.lblBaseType.TabIndex = 66;
      this.lblBaseType.Text = "Base type:";
      this.lblBaseType.TextAlign = ContentAlignment.MiddleRight;
      this.AcceptButton = (IButtonControl) this.btnSave;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.btnCancel;
      this.ClientSize = new Size(572, 195);
      this.Controls.Add((Control) this.cboxBaseType);
      this.Controls.Add((Control) this.lblBaseType);
      this.Controls.Add((Control) this.rbtnUse);
      this.Controls.Add((Control) this.rbtnUseCurrentMeterObject);
      this.Controls.Add((Control) this.cboxHandlerObject);
      this.Controls.Add((Control) this.btnCancel);
      this.Controls.Add((Control) this.cboxHardwareType);
      this.Controls.Add((Control) this.btnSave);
      this.Controls.Add((Control) this.lblHardwareType);
      this.Controls.Add((Control) this.txtDescription);
      this.Controls.Add((Control) this.txtSapNumber);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label4);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (TypeDataEditor);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Type";
      this.Load += new System.EventHandler(this.TypeDataEditor_Load);
      ((ISupportInitialize) this.error).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}


--- TypeEditor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.TypeEditor
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using CorporateDesign;
using StartupLib;
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using ZR_ClassLibrary;

#nullable disable
namespace PDC_Handler
{
  public class TypeEditor : Form
  {
    private PDC_HandlerFunctions MyFunctions;
    private PDC_Meter selectedMeter;
    private IContainer components = (IContainer) null;
    private ZennerCoroprateDesign zennerCoroprateDesign2;
    private Button btnNew;
    private DataGridView tableTypes;
    private Button btnDelete;
    private Button btnLoad;
    private Button btnEdit;
    private GroupBox groupBox3;
    private TextBox txtInfo;

    public TypeEditor() => this.InitializeComponent();

    internal static void ShowDialog(Form owner, PDC_HandlerFunctions MyFunctions)
    {
      if (MyFunctions == null)
        return;
      using (TypeEditor typeEditor = new TypeEditor())
      {
        typeEditor.MyFunctions = MyFunctions;
        int num = (int) typeEditor.ShowDialog((IWin32Window) owner);
      }
    }

    private void TypeEditor_Load(object sender, EventArgs e) => this.InitializeControls();

    private void tableTypes_MouseDoubleClick(object sender, MouseEventArgs e)
    {
      this.btnLoad_Click(sender, (EventArgs) e);
    }

    private void tableTypes_SelectionChanged(object sender, EventArgs e)
    {
      if (this.tableTypes.SelectedRows.Count != 1 || this.tableTypes.SelectedRows[0].DataBoundItem == null)
        return;
      if (!(this.tableTypes.SelectedRows[0].DataBoundItem is MeterInfo dataBoundItem))
        return;
      try
      {
        this.selectedMeter = TypeEditor.GetMeterObject(dataBoundItem.MeterInfoID);
        this.txtInfo.Text = this.selectedMeter != null ? this.selectedMeter.ToString() : string.Empty;
      }
      catch (Exception ex)
      {
        this.txtInfo.Text = ex.Message;
      }
      if (dataBoundItem.PPSArtikelNr == "PDC_BASETYPE")
        this.btnDelete.Enabled = UserManager.CheckPermission("Developer");
      else
        this.btnDelete.Enabled = true;
    }

    private void btnLoad_Click(object sender, EventArgs e)
    {
      MeterInfo selectedType = this.GetSelectedType();
      if (selectedType == null)
        return;
      try
      {
        if (!this.MyFunctions.OpenType(selectedType.MeterInfoID))
          return;
        if (this.MyFunctions.TypeMeter != null && this.MyFunctions.WorkMeter == null)
          this.MyFunctions.WorkMeter = this.MyFunctions.TypeMeter.DeepCopy();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "Load type error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      this.Close();
    }

    private void btnNew_Click(object sender, EventArgs e)
    {
      TypeDataEditor.ShowDialog((Form) this, PDC_DeviceIdentity.PDC_WmBus, this.MyFunctions);
      this.InitializeControls();
    }

    private void btnEdit_Click(object sender, EventArgs e)
    {
      MeterInfo selectedType = this.GetSelectedType();
      if (selectedType == null)
        return;
      TypeDataEditor.ShowDialog((Form) this, PDC_DeviceIdentity.PDC_WmBus, this.MyFunctions, this.selectedMeter, selectedType);
      this.InitializeControls();
    }

    private void btnDelete_Click(object sender, EventArgs e)
    {
      MeterInfo selectedType = this.GetSelectedType();
      if (selectedType == null || MessageBox.Show("Are you sure to delete the type?", "Delete?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) != DialogResult.OK)
        return;
      PDC_Database.DeleteType(selectedType.MeterInfoID);
      this.InitializeControls();
    }

    private void cboxEdcHardware_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.InitializeControls();
    }

    private MeterInfo GetSelectedType()
    {
      return this.tableTypes.SelectedRows == null || this.tableTypes.SelectedRows.Count != 1 ? (MeterInfo) null : this.tableTypes.SelectedRows[0].DataBoundItem as MeterInfo;
    }

    private void InitializeControls()
    {
      this.txtInfo.Text = string.Empty;
      this.tableTypes.DataSource = (object) MeterDatabase.LoadMeterInfoByHardwareName(PDC_DeviceIdentity.PDC_WmBus.ToString());
      if (this.MyFunctions.TypeMeter == null)
        return;
      DeviceIdentification deviceIdentification = this.MyFunctions.WorkMeter.GetDeviceIdentification();
      if (deviceIdentification != null && deviceIdentification.IsChecksumOK)
      {
        uint meterInfoId = deviceIdentification.MeterInfoID;
        foreach (DataGridViewRow row in (IEnumerable) this.tableTypes.Rows)
        {
          if ((long) (row.DataBoundItem as MeterInfo).MeterInfoID == (long) meterInfoId)
          {
            row.Selected = true;
            break;
          }
        }
      }
    }

    private static PDC_Meter GetMeterObject(int meterInfoID)
    {
      MeterTypeData meterTypeData = PDC_Database.LoadType(meterInfoID);
      return meterTypeData == null ? (PDC_Meter) null : PDC_Meter.Unzip(meterTypeData.EEPdata);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (TypeEditor));
      DataGridViewCellStyle gridViewCellStyle1 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle2 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle3 = new DataGridViewCellStyle();
      this.zennerCoroprateDesign2 = new ZennerCoroprateDesign();
      this.btnNew = new Button();
      this.tableTypes = new DataGridView();
      this.btnDelete = new Button();
      this.btnLoad = new Button();
      this.btnEdit = new Button();
      this.groupBox3 = new GroupBox();
      this.txtInfo = new TextBox();
      ((ISupportInitialize) this.tableTypes).BeginInit();
      this.groupBox3.SuspendLayout();
      this.SuspendLayout();
      this.zennerCoroprateDesign2.Dock = DockStyle.Top;
      this.zennerCoroprateDesign2.Location = new Point(0, 0);
      this.zennerCoroprateDesign2.Margin = new Padding(2);
      this.zennerCoroprateDesign2.Name = "zennerCoroprateDesign2";
      this.zennerCoroprateDesign2.Size = new Size(784, 42);
      this.zennerCoroprateDesign2.TabIndex = 26;
      this.btnNew.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnNew.Image = (Image) componentResourceManager.GetObject("btnNew.Image");
      this.btnNew.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnNew.ImeMode = ImeMode.NoControl;
      this.btnNew.Location = new Point(683, 47);
      this.btnNew.Name = "btnNew";
      this.btnNew.Size = new Size(92, 29);
      this.btnNew.TabIndex = 57;
      this.btnNew.Text = "New";
      this.btnNew.Click += new System.EventHandler(this.btnNew_Click);
      this.tableTypes.AllowUserToAddRows = false;
      this.tableTypes.AllowUserToDeleteRows = false;
      this.tableTypes.AllowUserToResizeRows = false;
      this.tableTypes.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tableTypes.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.tableTypes.BackgroundColor = Color.White;
      gridViewCellStyle1.Alignment = DataGridViewContentAlignment.MiddleLeft;
      gridViewCellStyle1.BackColor = SystemColors.Control;
      gridViewCellStyle1.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      gridViewCellStyle1.ForeColor = SystemColors.WindowText;
      gridViewCellStyle1.SelectionBackColor = SystemColors.Highlight;
      gridViewCellStyle1.SelectionForeColor = SystemColors.HighlightText;
      gridViewCellStyle1.WrapMode = DataGridViewTriState.True;
      this.tableTypes.ColumnHeadersDefaultCellStyle = gridViewCellStyle1;
      this.tableTypes.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      gridViewCellStyle2.Alignment = DataGridViewContentAlignment.MiddleLeft;
      gridViewCellStyle2.BackColor = SystemColors.Window;
      gridViewCellStyle2.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      gridViewCellStyle2.ForeColor = SystemColors.ControlText;
      gridViewCellStyle2.SelectionBackColor = SystemColors.Highlight;
      gridViewCellStyle2.SelectionForeColor = SystemColors.HighlightText;
      gridViewCellStyle2.WrapMode = DataGridViewTriState.False;
      this.tableTypes.DefaultCellStyle = gridViewCellStyle2;
      this.tableTypes.Location = new Point(12, 47);
      this.tableTypes.MultiSelect = false;
      this.tableTypes.Name = "tableTypes";
      this.tableTypes.ReadOnly = true;
      gridViewCellStyle3.Alignment = DataGridViewContentAlignment.MiddleLeft;
      gridViewCellStyle3.BackColor = SystemColors.Control;
      gridViewCellStyle3.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      gridViewCellStyle3.ForeColor = SystemColors.WindowText;
      gridViewCellStyle3.SelectionBackColor = SystemColors.Highlight;
      gridViewCellStyle3.SelectionForeColor = SystemColors.HighlightText;
      gridViewCellStyle3.WrapMode = DataGridViewTriState.True;
      this.tableTypes.RowHeadersDefaultCellStyle = gridViewCellStyle3;
      this.tableTypes.RowHeadersVisible = false;
      this.tableTypes.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
      this.tableTypes.Size = new Size(662, 284);
      this.tableTypes.TabIndex = 58;
      this.tableTypes.SelectionChanged += new System.EventHandler(this.tableTypes_SelectionChanged);
      this.tableTypes.MouseDoubleClick += new MouseEventHandler(this.tableTypes_MouseDoubleClick);
      this.btnDelete.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnDelete.Image = (Image) componentResourceManager.GetObject("btnDelete.Image");
      this.btnDelete.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnDelete.ImeMode = ImeMode.NoControl;
      this.btnDelete.Location = new Point(683, 117);
      this.btnDelete.Name = "btnDelete";
      this.btnDelete.Size = new Size(92, 29);
      this.btnDelete.TabIndex = 61;
      this.btnDelete.Text = "Delete";
      this.btnDelete.Click += new System.EventHandler(this.btnDelete_Click);
      this.btnLoad.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.btnLoad.Image = (Image) componentResourceManager.GetObject("btnLoad.Image");
      this.btnLoad.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnLoad.ImeMode = ImeMode.NoControl;
      this.btnLoad.Location = new Point(683, 521);
      this.btnLoad.Name = "btnLoad";
      this.btnLoad.Size = new Size(92, 29);
      this.btnLoad.TabIndex = 64;
      this.btnLoad.Text = "Load";
      this.btnLoad.Click += new System.EventHandler(this.btnLoad_Click);
      this.btnEdit.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnEdit.Image = (Image) componentResourceManager.GetObject("btnEdit.Image");
      this.btnEdit.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnEdit.ImeMode = ImeMode.NoControl;
      this.btnEdit.Location = new Point(683, 82);
      this.btnEdit.Name = "btnEdit";
      this.btnEdit.Size = new Size(92, 29);
      this.btnEdit.TabIndex = 67;
      this.btnEdit.Text = "Edit";
      this.btnEdit.UseVisualStyleBackColor = true;
      this.btnEdit.Click += new System.EventHandler(this.btnEdit_Click);
      this.groupBox3.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.groupBox3.Controls.Add((Control) this.txtInfo);
      this.groupBox3.Location = new Point(7, 337);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.Size = new Size(670, 213);
      this.groupBox3.TabIndex = 68;
      this.groupBox3.TabStop = false;
      this.groupBox3.Text = "Meter object data";
      this.txtInfo.Dock = DockStyle.Fill;
      this.txtInfo.Font = new Font("Consolas", 8.25f);
      this.txtInfo.Location = new Point(3, 16);
      this.txtInfo.Multiline = true;
      this.txtInfo.Name = "txtInfo";
      this.txtInfo.ScrollBars = ScrollBars.Vertical;
      this.txtInfo.Size = new Size(664, 194);
      this.txtInfo.TabIndex = 0;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(784, 562);
      this.Controls.Add((Control) this.groupBox3);
      this.Controls.Add((Control) this.btnEdit);
      this.Controls.Add((Control) this.btnLoad);
      this.Controls.Add((Control) this.btnDelete);
      this.Controls.Add((Control) this.tableTypes);
      this.Controls.Add((Control) this.btnNew);
      this.Controls.Add((Control) this.zennerCoroprateDesign2);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (TypeEditor);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Type editor";
      this.Load += new System.EventHandler(this.TypeEditor_Load);
      ((ISupportInitialize) this.tableTypes).EndInit();
      this.groupBox3.ResumeLayout(false);
      this.groupBox3.PerformLayout();
      this.ResumeLayout(false);
    }
  }
}


--- Warning.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.Warning
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;

#nullable disable
namespace PDC_Handler
{
  [Flags]
  public enum Warning : ushort
  {
    WARNING_APP_BUSY = 1,
    WARNING_ABNORMAL = 2,
    WARNING_BATT_LOW = 4,
    WARNING_PERMANENT_ERROR = 8,
    WARNING_TEMPORARY = 16, // 0x0010
    WARNING_LEAK = 256, // 0x0100
    WARNING_LEAK_H = 32, // 0x0020
    WARNING_BLOCK = 512, // 0x0200
    WARNING_BLOCK_H = 64, // 0x0040
    WARNING_UNDERSIZE = 1024, // 0x0400
    WARNING_OVERSIZE = 2048, // 0x0800
    WARNING_BURST = 128, // 0x0080
  }
}


--- ZoomEditor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: PDC_Handler.ZoomEditor
// Assembly: PDC_Handler, Version=1.0.3.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 9FFD3ACC-6945-4315-9101-00D149CAC985
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\PDC_Handler.dll

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;
using System.Windows.Forms;

#nullable disable
namespace PDC_Handler
{
  public sealed class ZoomEditor : Form
  {
    private StringReader reader;
    private Font printFont;
    private SolidBrush printBrush;
    private IContainer components = (IContainer) null;
    private Button btnExport;
    private Button btnPrint;
    internal RichTextBox txtContent;

    public ZoomEditor()
    {
      this.InitializeComponent();
      this.printFont = new Font("Consolas", 8f);
      this.printBrush = new SolidBrush(Color.Black);
    }

    internal static void ShowDialog(Form owner, PDC_Meter meter)
    {
      if (meter == null)
        return;
      using (ZoomEditor zoomEditor = new ZoomEditor())
      {
        zoomEditor.txtContent.Text = meter.ToString();
        zoomEditor.txtContent.Select(0, 0);
        int num = (int) zoomEditor.ShowDialog((IWin32Window) owner);
      }
    }

    private void btnExport_Click(object sender, EventArgs e)
    {
      if (string.IsNullOrEmpty(this.txtContent.Text))
        return;
      using (SaveFileDialog saveFileDialog = new SaveFileDialog())
      {
        saveFileDialog.FileName = string.Format("EDC_{0:yyyy-MM-dd_HH-mm-ss}.txt", (object) DateTime.Now);
        if (saveFileDialog.ShowDialog() != DialogResult.OK)
          return;
        this.txtContent.SaveFile(saveFileDialog.FileName, RichTextBoxStreamType.PlainText);
      }
    }

    private void btnPrint_Click(object sender, EventArgs e)
    {
      if (string.IsNullOrEmpty(this.txtContent.Text))
        return;
      using (PrintDialog printDialog = new PrintDialog())
      {
        using (PrintDocument printDocument = new PrintDocument())
        {
          printDialog.Document = printDocument;
          if (printDialog.ShowDialog() != DialogResult.OK)
            return;
          using (this.reader = new StringReader(this.txtContent.Text))
          {
            printDocument.DefaultPageSettings.Landscape = false;
            printDocument.DefaultPageSettings.Margins = new Margins(40, 40, 40, 40);
            printDocument.PrintPage += new PrintPageEventHandler(this.DocumentToPrint_PrintPage);
            printDocument.Print();
          }
        }
      }
    }

    private void DocumentToPrint_PrintPage(object sender, PrintPageEventArgs e)
    {
      int num1 = 0;
      float left = (float) e.MarginBounds.Left;
      float top = (float) e.MarginBounds.Top;
      string s = (string) null;
      for (float num2 = (float) e.MarginBounds.Height / this.printFont.GetHeight(e.Graphics); (double) num1 < (double) num2 && (s = this.reader.ReadLine()) != null; ++num1)
      {
        float y = top + (float) num1 * this.printFont.GetHeight(e.Graphics);
        e.Graphics.DrawString(s, this.printFont, (Brush) this.printBrush, left, y, new StringFormat());
      }
      if (s != null)
        e.HasMorePages = true;
      else
        e.HasMorePages = false;
    }

    private void txtContent_TextChanged(object sender, EventArgs e)
    {
      this.btnPrint.Enabled = !string.IsNullOrEmpty(this.txtContent.Text);
      this.btnExport.Enabled = this.btnPrint.Enabled;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (ZoomEditor));
      this.btnExport = new Button();
      this.btnPrint = new Button();
      this.txtContent = new RichTextBox();
      this.SuspendLayout();
      this.btnExport.BackColor = Color.Transparent;
      this.btnExport.Image = (Image) componentResourceManager.GetObject("btnExport.Image");
      this.btnExport.ImeMode = ImeMode.NoControl;
      this.btnExport.Location = new Point(45, 3);
      this.btnExport.Name = "btnExport";
      this.btnExport.Size = new Size(30, 30);
      this.btnExport.TabIndex = 6;
      this.btnExport.UseVisualStyleBackColor = false;
      this.btnExport.Click += new EventHandler(this.btnExport_Click);
      this.btnPrint.BackColor = Color.Transparent;
      this.btnPrint.Image = (Image) componentResourceManager.GetObject("btnPrint.Image");
      this.btnPrint.ImeMode = ImeMode.NoControl;
      this.btnPrint.Location = new Point(9, 3);
      this.btnPrint.Name = "btnPrint";
      this.btnPrint.Size = new Size(30, 30);
      this.btnPrint.TabIndex = 5;
      this.btnPrint.UseVisualStyleBackColor = false;
      this.btnPrint.Click += new EventHandler(this.btnPrint_Click);
      this.txtContent.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txtContent.Font = new Font("Consolas", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.txtContent.Location = new Point(-1, 37);
      this.txtContent.Name = "txtContent";
      this.txtContent.Size = new Size(785, 526);
      this.txtContent.TabIndex = 7;
      this.txtContent.Text = "";
      this.txtContent.TextChanged += new EventHandler(this.txtContent_TextChanged);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(784, 562);
      this.Controls.Add((Control) this.txtContent);
      this.Controls.Add((Control) this.btnExport);
      this.Controls.Add((Control) this.btnPrint);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (ZoomEditor);
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Zoom";
      this.ResumeLayout(false);
    }
  }
}

