
--- AddConnectionItem.xaml.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.AddConnectionItem
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Markup;

#nullable disable
namespace ReadoutConfiguration
{
  public partial class AddConnectionItem : Window, IComponentConnector
  {
    private bool _contentLoaded;

    public AddConnectionItem() => this.InitializeComponent();

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/ReadoutConfiguration;component/addconnectionitem.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target) => this._contentLoaded = true;
  }
}


--- AssemblyInfo.cs ---

﻿using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows;

[assembly: AssemblyTitle("ReadoutConfiguration")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ReadoutConfiguration")]
[assembly: AssemblyCopyright("Copyright ©  2014")]
[assembly: AssemblyTrademark("")]
[assembly: ComVisible(false)]
[assembly: ThemeInfo(ResourceDictionaryLocation.None, ResourceDictionaryLocation.SourceAssembly)]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: AssemblyVersion("1.0.0.0")]


--- ChangeNameAndDescription.xaml.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ChangeNameAndDescription
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using StartupLib;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;

#nullable disable
namespace ReadoutConfiguration
{
  public partial class ChangeNameAndDescription : Window, IComponentConnector
  {
    public string ConfigItemType;
    public string ConfigItemName;
    public string ConfigItemDescription = "";
    public string ConfigItemTypeClassification = "";
    internal GmmCorporateControl gmmCorporateControl1;
    internal Button ButtonOk;
    internal TextBox TextBoxName;
    internal TextBox TextBoxTypeClassification;
    internal TextBox TextBoxDescription;
    internal Label LableItemType;
    private bool _contentLoaded;

    public ChangeNameAndDescription() => this.InitializeComponent();

    private void Window_Loaded(object sender, RoutedEventArgs e)
    {
      this.LableItemType.Content = (object) this.ConfigItemType;
      this.TextBoxName.Text = this.ConfigItemName;
      this.TextBoxDescription.Text = this.ConfigItemDescription;
      this.TextBoxTypeClassification.Text = this.ConfigItemTypeClassification;
    }

    private void ButtonOk_Click(object sender, RoutedEventArgs e)
    {
      this.ConfigItemName = this.TextBoxName.Text;
      this.ConfigItemDescription = this.TextBoxDescription.Text;
      this.DialogResult = new bool?(true);
      this.Close();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/ReadoutConfiguration;component/changenameanddescription.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((FrameworkElement) target).Loaded += new RoutedEventHandler(this.Window_Loaded);
          break;
        case 2:
          this.gmmCorporateControl1 = (GmmCorporateControl) target;
          break;
        case 3:
          this.ButtonOk = (Button) target;
          this.ButtonOk.Click += new RoutedEventHandler(this.ButtonOk_Click);
          break;
        case 4:
          this.TextBoxName = (TextBox) target;
          break;
        case 5:
          this.TextBoxTypeClassification = (TextBox) target;
          break;
        case 6:
          this.TextBoxDescription = (TextBox) target;
          break;
        case 7:
          this.LableItemType = (Label) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}


--- CommonEditValues.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.CommonEditValues
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using System.Collections.Generic;

#nullable disable
namespace ReadoutConfiguration
{
  public class CommonEditValues
  {
    public SortedList<string, List<int>> valueListAndUsing = new SortedList<string, List<int>>();
    public SortedList<string, List<int>> editByListAndUsing = new SortedList<string, List<int>>();
    private string valueName;

    internal CommonEditValues(string ValueName) => this.valueName = ValueName;

    public bool IsSettingsIDRegisterd(int settingsID)
    {
      foreach (List<int> intList in (IEnumerable<List<int>>) this.valueListAndUsing.Values)
      {
        foreach (int num in intList)
        {
          if (num == settingsID)
            return true;
        }
      }
      return false;
    }

    internal string ValueName => this.valueName;

    internal void AddValue(string theValue, int settingsID)
    {
      string key = "null";
      if (theValue != null)
      {
        key = theValue.Trim();
        if (key.Length == 0)
          key = "\"\"";
      }
      List<int> intList;
      if (!this.valueListAndUsing.ContainsKey(key))
      {
        intList = new List<int>();
        this.valueListAndUsing.Add(key, intList);
      }
      else
        intList = this.valueListAndUsing[key];
      intList.Add(settingsID);
    }

    internal void AddEditBy(string theEditByValue, int settingsID)
    {
      string key = "null";
      if (theEditByValue != null)
      {
        key = theEditByValue.Trim();
        if (key.Length == 0)
          key = "\"\"";
      }
      List<int> intList;
      if (!this.editByListAndUsing.ContainsKey(key))
      {
        intList = new List<int>();
        this.editByListAndUsing.Add(key, intList);
      }
      else
        intList = this.editByListAndUsing[key];
      intList.Add(settingsID);
    }

    internal void EscapeEdit(List<int> settingIds)
    {
      foreach (int settingId in settingIds)
      {
        if (!this.IsSettingsIDRegisterd(settingId))
          this.AddValue("NotAvailable", settingId);
      }
      foreach (KeyValuePair<string, List<int>> keyValuePair in this.valueListAndUsing)
        keyValuePair.Value.Sort();
      foreach (KeyValuePair<string, List<int>> keyValuePair in this.editByListAndUsing)
        keyValuePair.Value.Sort();
    }
  }
}


--- CommonParameterEditor.xaml.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.CommonParameterEditor
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using StartupLib;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Markup;
using System.Windows.Media;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;

#nullable disable
namespace ReadoutConfiguration
{
  public partial class CommonParameterEditor : Window, IComponentConnector
  {
    internal SortedList<string, CommonEditValues> EditValues;
    private int NumberOfSettings;
    private bool FormIsInitialised = false;
    internal GmmCorporateControl gmmCorporateControl1;
    internal StackPanel StackPanelContent;
    internal StackPanel StackPanelOverview;
    internal TextBlock TextBlockNumberOfLists;
    internal System.Windows.Controls.CheckBox CheckBoxShowOnlyDifferent;
    internal StackPanel StackPanelParameterList;
    private bool _contentLoaded;

    public CommonParameterEditor(List<CommonEditValues> editValues, int numberOfSettings)
    {
      this.EditValues = new SortedList<string, CommonEditValues>();
      foreach (CommonEditValues editValue in editValues)
        this.EditValues.Add(editValue.ValueName, editValue);
      this.NumberOfSettings = numberOfSettings;
      this.InitializeComponent();
      this.FormIsInitialised = true;
      this.RefreshForm();
    }

    private void RefreshForm()
    {
      if (!this.FormIsInitialised)
        return;
      this.TextBlockNumberOfLists.Text = this.NumberOfSettings.ToString();
      this.StackPanelParameterList.Children.Clear();
      foreach (CommonEditValues commonEditValues in (IEnumerable<CommonEditValues>) this.EditValues.Values)
      {
        if (!this.CheckBoxShowOnlyDifferent.IsChecked.Value || commonEditValues.valueListAndUsing.Count != 1 || commonEditValues.editByListAndUsing.Count != 1)
        {
          StringBuilder stringBuilder1 = new StringBuilder();
          int num1 = 0;
          foreach (KeyValuePair<string, List<int>> keyValuePair in commonEditValues.valueListAndUsing)
          {
            if (stringBuilder1.Length > 0)
              stringBuilder1.Append("; ");
            num1 += keyValuePair.Value.Count;
            stringBuilder1.Append(keyValuePair.Key + "(" + keyValuePair.Value.Count.ToString() + ")");
          }
          int num2 = this.NumberOfSettings - num1;
          if (num2 > 0)
            stringBuilder1.Append("; null(" + num2.ToString() + ")");
          StringBuilder stringBuilder2 = new StringBuilder();
          int num3 = 0;
          foreach (KeyValuePair<string, List<int>> keyValuePair in commonEditValues.editByListAndUsing)
          {
            if (stringBuilder2.Length > 0)
              stringBuilder2.Append("; ");
            num3 += keyValuePair.Value.Count;
            stringBuilder2.Append(keyValuePair.Key + "(" + keyValuePair.Value.Count.ToString() + ")");
          }
          int num4 = this.NumberOfSettings - num3;
          if (num4 > 0)
            stringBuilder2.Append("; null(" + num4.ToString() + ")");
          Border element1 = new Border();
          element1.BorderBrush = (Brush) Brushes.Blue;
          element1.BorderThickness = new Thickness(2.0);
          element1.Margin = new Thickness(2.0);
          StackPanel stackPanel = new StackPanel();
          stackPanel.Margin = new Thickness(2.0);
          StackPanel element2 = new StackPanel();
          element2.Orientation = System.Windows.Controls.Orientation.Horizontal;
          StackPanel element3 = new StackPanel();
          element3.Orientation = System.Windows.Controls.Orientation.Horizontal;
          element1.Child = (UIElement) stackPanel;
          stackPanel.Children.Add((UIElement) element2);
          stackPanel.Children.Add((UIElement) element3);
          TextBlock element4 = new TextBlock();
          element4.Text = commonEditValues.ValueName;
          element4.Margin = new Thickness(2.0, 2.0, 10.0, 2.0);
          element4.FontSize = 16.0;
          element4.FontWeight = FontWeights.Bold;
          element2.Children.Add((UIElement) element4);
          TextBlock element5 = new TextBlock();
          element5.Text = "Existing values: " + stringBuilder1.ToString();
          element5.Margin = new Thickness(8.0, 2.0, 2.0, 2.0);
          element2.Children.Add((UIElement) element5);
          TextBlock element6 = new TextBlock();
          element6.Text = "Edit by settings: " + stringBuilder2.ToString();
          element6.Margin = new Thickness(8.0, 2.0, 8.0, 2.0);
          element2.Children.Add((UIElement) element6);
          System.Windows.Controls.Button element7 = new System.Windows.Controls.Button();
          element7.Name = "ButtonDetails" + commonEditValues.ValueName;
          element7.Content = (object) "Details";
          element7.Click += new RoutedEventHandler(this.ButtonDetails_Click);
          element2.Children.Add((UIElement) element7);
          TextBlock element8 = new TextBlock();
          element8.Text = "New value:";
          element8.Margin = new Thickness(2.0);
          element3.Children.Add((UIElement) element8);
          System.Windows.Controls.TextBox textBox = new System.Windows.Controls.TextBox();
          textBox.Margin = new Thickness(8.0, 2.0, 8.0, 2.0);
          textBox.Width = 100.0;
          element3.Children.Add((UIElement) textBox);
          TextBlock element9 = new TextBlock();
          element9.Text = "New edit by setup:";
          element9.Margin = new Thickness(2.0);
          element3.Children.Add((UIElement) element9);
          System.Windows.Controls.ComboBox comboBox = new System.Windows.Controls.ComboBox();
          comboBox.Margin = new Thickness(8.0, 2.0, 8.0, 2.0);
          foreach (string name in Enum.GetNames(typeof (ConnectionSettingsParameterUsing)))
            comboBox.Items.Add((object) name);
          comboBox.SelectedIndex = 0;
          comboBox.Width = 300.0;
          element3.Children.Add((UIElement) comboBox);
          System.Windows.Controls.Button element10 = new System.Windows.Controls.Button();
          element10.Name = "ButtonChangeValues";
          element10.Content = (object) "Change values";
          element10.Click += new RoutedEventHandler(this.ButtonChangeValues_Click);
          element10.Tag = (object) new CommonParameterEditor.EditControls(commonEditValues.ValueName, textBox, comboBox);
          element10.Margin = new Thickness(8.0, 2.0, 8.0, 2.0);
          element3.Children.Add((UIElement) element10);
          System.Windows.Controls.Button element11 = new System.Windows.Controls.Button();
          element11.Name = "ButtonDeleteValues";
          element11.Content = (object) "Delete values";
          element11.Tag = (object) commonEditValues.ValueName;
          element11.Click += new RoutedEventHandler(this.ButtonDeleteValues_Click);
          element11.Margin = new Thickness(8.0, 2.0, 8.0, 2.0);
          element3.Children.Add((UIElement) element11);
          this.StackPanelParameterList.Children.Add((UIElement) element1);
        }
      }
    }

    private void ButtonDetails_Click(object sender, RoutedEventArgs e)
    {
      string key1 = ((FrameworkElement) sender).Name.Substring("ButtonDetails".Length);
      CommonEditValues editValue = this.EditValues[key1];
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("Detaild using of setting " + key1);
      foreach (KeyValuePair<string, List<int>> keyValuePair in editValue.valueListAndUsing)
      {
        stringBuilder.AppendLine();
        stringBuilder.AppendLine("Value '" + keyValuePair.Key + "' used in settings:");
        foreach (int key2 in keyValuePair.Value)
        {
          ConnectionSettings connectionSettings = ReadoutConfigFunctions.DbData.CachedConnectionSettingsById[key2];
          stringBuilder.AppendLine("\t" + key2.ToString() + "; " + connectionSettings.Name);
        }
      }
      foreach (KeyValuePair<string, List<int>> keyValuePair in editValue.editByListAndUsing)
      {
        stringBuilder.AppendLine();
        stringBuilder.AppendLine("Using '" + keyValuePair.Key + "' used in settings:");
        foreach (int key3 in keyValuePair.Value)
        {
          ConnectionSettings connectionSettings = ReadoutConfigFunctions.DbData.CachedConnectionSettingsById[key3];
          stringBuilder.AppendLine("\t" + key3.ToString() + "; " + connectionSettings.Name);
        }
      }
      int num = (int) GMM_MessageBox.ShowMessage("Settings values used in settings", stringBuilder.ToString(), MessageBoxButtons.OK);
    }

    private void ButtonChangeValues_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        System.Windows.Controls.Button button = (System.Windows.Controls.Button) sender;
        CommonParameterEditor.EditControls tag = (CommonParameterEditor.EditControls) button.Tag;
        string valueName = tag.ValueName;
        string newValue = tag.ValueText.Text.Trim();
        string text = tag.EditByText.Text;
        if (newValue.Length == 0)
          return;
        CommonEditValues editValue = this.EditValues[valueName];
        List<int> settingIds = new List<int>();
        foreach (KeyValuePair<string, List<int>> keyValuePair in editValue.valueListAndUsing)
        {
          foreach (int num in keyValuePair.Value)
            settingIds.Add(num);
        }
        ReadoutConfigFunctions.DbData.SetCommonSettingsValues(valueName, newValue, text, settingIds);
        foreach (object child in ((System.Windows.Controls.Panel) button.Parent).Children)
        {
          switch (child)
          {
            case System.Windows.Controls.Button _:
              ((UIElement) child).IsEnabled = false;
              break;
            case System.Windows.Controls.TextBox _:
              ((UIElement) child).IsEnabled = false;
              ((System.Windows.Controls.Control) child).Background = (Brush) Brushes.LightGreen;
              break;
            case System.Windows.Controls.ComboBox _:
              ((UIElement) child).IsEnabled = false;
              break;
          }
        }
        int num1 = (int) System.Windows.MessageBox.Show("Values changed");
      }
      catch (Exception ex)
      {
        int num = (int) System.Windows.MessageBox.Show(ex.ToString());
      }
    }

    private void ButtonDeleteValues_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        System.Windows.Controls.Button button = (System.Windows.Controls.Button) sender;
        string tag = (string) button.Tag;
        CommonEditValues editValue = this.EditValues[tag];
        List<int> settingIds = new List<int>();
        foreach (KeyValuePair<string, List<int>> keyValuePair in editValue.valueListAndUsing)
        {
          foreach (int num in keyValuePair.Value)
            settingIds.Add(num);
        }
        ReadoutConfigFunctions.DbData.DeleteCommonSettingsValues(tag, settingIds);
        foreach (object child in ((System.Windows.Controls.Panel) button.Parent).Children)
        {
          switch (child)
          {
            case System.Windows.Controls.Button _:
              ((UIElement) child).IsEnabled = false;
              break;
            case System.Windows.Controls.TextBox _:
              ((System.Windows.Controls.TextBox) child).Text = "Deleted";
              ((UIElement) child).IsEnabled = false;
              ((System.Windows.Controls.Control) child).Background = (Brush) Brushes.Red;
              break;
            case System.Windows.Controls.ComboBox _:
              ((UIElement) child).IsEnabled = false;
              break;
          }
        }
        int num1 = (int) System.Windows.MessageBox.Show("Values deleted");
      }
      catch (Exception ex)
      {
        int num = (int) System.Windows.MessageBox.Show(ex.ToString());
      }
    }

    private void CheckBoxShowOnlyDifferent_Checked(object sender, RoutedEventArgs e)
    {
      this.RefreshForm();
    }

    private void CheckBoxShowOnlyDifferent_Unchecked(object sender, RoutedEventArgs e)
    {
      this.RefreshForm();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      System.Windows.Application.LoadComponent((object) this, new Uri("/ReadoutConfiguration;component/commonparametereditor.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.gmmCorporateControl1 = (GmmCorporateControl) target;
          break;
        case 2:
          this.StackPanelContent = (StackPanel) target;
          break;
        case 3:
          this.StackPanelOverview = (StackPanel) target;
          break;
        case 4:
          this.TextBlockNumberOfLists = (TextBlock) target;
          break;
        case 5:
          this.CheckBoxShowOnlyDifferent = (System.Windows.Controls.CheckBox) target;
          this.CheckBoxShowOnlyDifferent.Checked += new RoutedEventHandler(this.CheckBoxShowOnlyDifferent_Checked);
          this.CheckBoxShowOnlyDifferent.Unchecked += new RoutedEventHandler(this.CheckBoxShowOnlyDifferent_Unchecked);
          break;
        case 6:
          this.StackPanelParameterList = (StackPanel) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }

    internal class EditControls
    {
      internal string ValueName;
      internal System.Windows.Controls.TextBox ValueText;
      internal System.Windows.Controls.ComboBox EditByText;

      internal EditControls(string valueName, System.Windows.Controls.TextBox valueText, System.Windows.Controls.ComboBox editByText)
      {
        this.ValueName = valueName;
        this.ValueText = valueText;
        this.EditByText = editByText;
      }
    }
  }
}


--- ConfigDatabaseAccess.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ConfigDatabaseAccess
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using CommonWPF;
using GmmDbLib;
using NLog;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using System.Windows.Media.Imaging;
using ZENNER.CommonLibrary;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace ReadoutConfiguration
{
  internal class ConfigDatabaseAccess
  {
    private static Logger ReadoutDatabaseAccess = LogManager.GetLogger(nameof (ReadoutDatabaseAccess));
    internal IDbConnection MyDbConnection;
    internal bool DailyAutosave = true;
    private StringBuilder SQL = new StringBuilder(2000);
    private Schema.DatabaseIdentificationDataTable DatabaseIdentTable;
    private Schema.ConnectionItemsDataTable connectionItemsDataTable;
    private ZRDataAdapter ConnectionItemsAdapter;
    private Schema.ConnectionItemParametersDataTable connectionItemParametersDataTable;
    private ZRDataAdapter ConnectionItemsParametersAdapter;
    private Schema.ConnectionProfilesDataTable connectionProfilesDataTable;
    private ZRDataAdapter ConnectionProfilesAdapter;
    private Schema.ConnectionProfileParametersDataTable connectionProfileParametersDataTable;
    private ZRDataAdapter ConnectionProfilesParametersAdapter;
    private Schema.ConnectionSettingsDataTable connectionSettingsDataTable;
    private ZRDataAdapter ConnectionSettingsAdapter;
    private Schema.ChangeableParametersDataTable changeableParametersDataTable;
    private ZRDataAdapter ChangeableParametersAdapter;
    private Schema.ConnectionProfileFiltersDataTable connectionFiltersDataTable;
    private ZRDataAdapter ConnectionFiltersAdapter;
    private Schema.GmmImagesDataTable _gmmImageDataTable;
    private ZRDataAdapter GmmImageAdapter;
    internal List<DeviceGroup> CachedDeviceGroups;
    internal List<DeviceModel> CachedDeviceModels;
    internal List<EquipmentGroup> CachedEquipmentGroups;
    internal List<EquipmentModel> CachedEquipmentModels;
    internal List<ProfileTypeGroup> CachedProfileTypeGroups;
    internal List<ProfileType> CachedProfileTypes;
    internal SortedList<int, int> SettingsID_FromProfileID;
    internal SortedList<int, ConnectionSettings> CachedConnectionSettingsById;
    internal SortedList<int, ChangeableParameter> ChangableParameterByID;
    internal SortedList<string, ChangeableParameter> ChangableParameterByName;
    internal SortedList<int, BitmapImage> CachedBitmapImages;
    internal List<ConnectionProfile> CachedPartiallyConnectionProfiles;
    private SortedList<string, ConnectionProfileFilter> profileFilters;
    private SortedList<int, Schema.ConnectionItemsRow> ProfileTypesById = (SortedList<int, Schema.ConnectionItemsRow>) null;
    private ObservableCollection<ConnectionListRow> currentConnectionProfilesList;
    private ConnectionListRow selectedProfileRow;
    private const string profileIdTag = "ProfileID:";

    private Schema.GmmImagesDataTable gmmImageDataTable
    {
      get
      {
        if (this._gmmImageDataTable != null)
          return this._gmmImageDataTable;
        this.LoadImages();
        return this._gmmImageDataTable;
      }
    }

    internal SortedList<string, ConnectionProfileFilter> CachedProfileFilters
    {
      get
      {
        if (this.profileFilters == null)
          this.LoadProfileFilters();
        return this.profileFilters;
      }
    }

    public ConfigDatabaseAccess()
    {
      this.MyDbConnection = DbBasis.PrimaryDB.GetDbConnection();
      string databaseOption = this.GetDatabaseOption("DatabaseSaveOption");
      if (databaseOption != null && databaseOption == "DailyAutosaveOff")
        this.DailyAutosave = false;
      this.LoadAllConnectionTables();
    }

    internal string GetDatabaseOption(string option)
    {
      if (this.DatabaseIdentTable == null)
      {
        ZRDataAdapter zrDataAdapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM DatabaseIdentification", this.MyDbConnection);
        this.DatabaseIdentTable = new Schema.DatabaseIdentificationDataTable();
        zrDataAdapter.Fill((DataTable) this.DatabaseIdentTable);
      }
      Schema.DatabaseIdentificationRow[] identificationRowArray = (Schema.DatabaseIdentificationRow[]) this.DatabaseIdentTable.Select("InfoName = '" + option + "'");
      return identificationRowArray.Length == 1 ? identificationRowArray[0].InfoData : (string) null;
    }

    internal void LoadAllConnectionTables()
    {
      this.CachedDeviceGroups = (List<DeviceGroup>) null;
      this.CachedDeviceModels = (List<DeviceModel>) null;
      this.CachedEquipmentGroups = (List<EquipmentGroup>) null;
      this.CachedEquipmentModels = (List<EquipmentModel>) null;
      this.CachedProfileTypes = (List<ProfileType>) null;
      this.CachedProfileTypeGroups = (List<ProfileTypeGroup>) null;
      this.CachedConnectionSettingsById = (SortedList<int, ConnectionSettings>) null;
      this.ChangableParameterByID = (SortedList<int, ChangeableParameter>) null;
      this.CachedPartiallyConnectionProfiles = (List<ConnectionProfile>) null;
      this.CachedBitmapImages = (SortedList<int, BitmapImage>) null;
      this.LoadChangeableParameters();
      this.LoadConnectionSettings();
      this.LoadConnectionProfiles();
      this.LoadConnectionItems();
      this.GetReadoutSettings();
      this.GetDeviceGroups();
      this.GetDeviceModels();
      this.GetEquipmentGroups();
      this.GetEquipmentModels();
      this.GetProfileTypeGroups();
      this.GetProfileTypes();
      this.GetPartiallyConnectionProfiles();
    }

    internal void LoadConnectionItems()
    {
      this.ConnectionItemsAdapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM ConnectionItems", this.MyDbConnection);
      this.connectionItemsDataTable = new Schema.ConnectionItemsDataTable();
      this.ConnectionItemsAdapter.Fill((DataTable) this.connectionItemsDataTable);
      try
      {
        this.ConnectionItemsParametersAdapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM ConnectionItemParameters", this.MyDbConnection);
        this.connectionItemParametersDataTable = new Schema.ConnectionItemParametersDataTable();
        this.ConnectionItemsParametersAdapter.Fill((DataTable) this.connectionItemParametersDataTable);
      }
      catch
      {
        this.connectionItemParametersDataTable = (Schema.ConnectionItemParametersDataTable) null;
      }
    }

    internal void LoadProfileFilters()
    {
      try
      {
        this.profileFilters = new SortedList<string, ConnectionProfileFilter>();
        this.ConnectionFiltersAdapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM ConnectionProfileFilters ORDER BY ConnectionFilterID,ParameterOrder", this.MyDbConnection);
        this.connectionFiltersDataTable = new Schema.ConnectionProfileFiltersDataTable();
        this.ConnectionFiltersAdapter.Fill((DataTable) this.connectionFiltersDataTable);
        ConnectionProfileFilter connectionProfileFilter = (ConnectionProfileFilter) null;
        ConnectionParameterGroup connectionParameterGroup1 = (ConnectionParameterGroup) null;
        foreach (Schema.ConnectionProfileFiltersRow profileFiltersRow in (TypedTableBase<Schema.ConnectionProfileFiltersRow>) this.connectionFiltersDataTable)
        {
          if (connectionProfileFilter == null || profileFiltersRow.ConnectionFilterID != connectionProfileFilter.FilterID)
          {
            connectionProfileFilter = new ConnectionProfileFilter(profileFiltersRow.ConnectionFilterID, profileFiltersRow.ParameterValue);
            this.profileFilters.Add(connectionProfileFilter.Name, connectionProfileFilter);
            connectionParameterGroup1 = (ConnectionParameterGroup) null;
          }
          else
          {
            if (connectionParameterGroup1 == null)
            {
              connectionParameterGroup1 = new ConnectionParameterGroup(profileFiltersRow.FilterGroupNumber);
              connectionParameterGroup1.GroupFunction = (ConnectionProfileFilterGroupFunctions) profileFiltersRow.GroupFunction;
              connectionProfileFilter.FilterGroups.Add(connectionParameterGroup1);
            }
            else if (connectionParameterGroup1.GroupNumber != profileFiltersRow.FilterGroupNumber)
            {
              if (connectionProfileFilter.SubGroups != null && connectionProfileFilter.SubGroups.ContainsKey(profileFiltersRow.FilterGroupNumber))
              {
                connectionParameterGroup1 = connectionProfileFilter.SubGroups[profileFiltersRow.FilterGroupNumber];
              }
              else
              {
                connectionParameterGroup1 = new ConnectionParameterGroup(profileFiltersRow.FilterGroupNumber);
                connectionProfileFilter.FilterGroups.Add(connectionParameterGroup1);
              }
              connectionParameterGroup1.GroupFunction = (ConnectionProfileFilterGroupFunctions) profileFiltersRow.GroupFunction;
            }
            if (profileFiltersRow.ConnectionProfileParameter == 0)
            {
              int num = int.Parse(profileFiltersRow.ParameterValue);
              if (connectionProfileFilter.SubGroups == null)
                connectionProfileFilter.SubGroups = new SortedList<int, ConnectionParameterGroup>();
              if (connectionParameterGroup1.SubGroups == null)
                connectionParameterGroup1.SubGroups = new List<ConnectionParameterGroup>();
              if (connectionProfileFilter.SubGroups.ContainsKey(num))
              {
                connectionParameterGroup1.SubGroups.Add(connectionProfileFilter.SubGroups[num]);
              }
              else
              {
                ConnectionParameterGroup connectionParameterGroup2 = new ConnectionParameterGroup(num);
                connectionProfileFilter.SubGroups.Add(connectionParameterGroup2.GroupNumber, connectionParameterGroup2);
                connectionParameterGroup1.SubGroups.Add(connectionParameterGroup2);
              }
            }
            else
            {
              string parameterValue = (string) null;
              if (!profileFiltersRow.IsParameterValueNull())
                parameterValue = profileFiltersRow.ParameterValue;
              connectionParameterGroup1.Parameters.Add(new ConnectionProfileParameterPair((ConnectionProfileParameter) profileFiltersRow.ConnectionProfileParameter, parameterValue));
            }
          }
        }
      }
      catch
      {
      }
    }

    public List<string> GetFilterList(
      SortedList<ConnectionProfileParameter, string> filtersFor = null)
    {
      if (filtersFor == null)
        return this.CachedProfileFilters.Keys.ToList<string>();
      List<string> filterList = new List<string>();
      foreach (ConnectionProfileFilter connectionProfileFilter in (IEnumerable<ConnectionProfileFilter>) this.CachedProfileFilters.Values)
      {
        if (connectionProfileFilter.IsFilterExpliciteDesignedFor(filtersFor))
          filterList.Add(connectionProfileFilter.Name);
      }
      return filterList;
    }

    internal void LoadConnectionProfiles()
    {
      this.ConnectionProfilesAdapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM ConnectionProfiles", this.MyDbConnection);
      this.connectionProfilesDataTable = new Schema.ConnectionProfilesDataTable();
      this.ConnectionProfilesAdapter.Fill((DataTable) this.connectionProfilesDataTable);
      try
      {
        this.ConnectionProfilesParametersAdapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM ConnectionProfileParameters", this.MyDbConnection);
        this.connectionProfileParametersDataTable = new Schema.ConnectionProfileParametersDataTable();
        this.ConnectionProfilesParametersAdapter.Fill((DataTable) this.connectionProfileParametersDataTable);
      }
      catch
      {
        this.connectionProfileParametersDataTable = (Schema.ConnectionProfileParametersDataTable) null;
      }
    }

    internal void LoadConnectionSettings()
    {
      this.ConnectionSettingsAdapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM ConnectionSettings", this.MyDbConnection);
      this.connectionSettingsDataTable = new Schema.ConnectionSettingsDataTable();
      this.ConnectionSettingsAdapter.Fill((DataTable) this.connectionSettingsDataTable);
    }

    internal void LoadChangeableParameters()
    {
      this.ChangeableParametersAdapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM ChangeableParameters", this.MyDbConnection);
      this.changeableParametersDataTable = new Schema.ChangeableParametersDataTable();
      this.ChangeableParametersAdapter.Fill((DataTable) this.changeableParametersDataTable);
    }

    internal void LoadImages()
    {
      Stopwatch stopwatch = new Stopwatch();
      stopwatch.Start();
      lock (this.MyDbConnection)
      {
        this.GmmImageAdapter = DbBasis.PrimaryDB.ZRDataAdapter("SELECT * FROM GmmImages", this.MyDbConnection);
        this._gmmImageDataTable = new Schema.GmmImagesDataTable();
        this.GmmImageAdapter.Fill((DataTable) this._gmmImageDataTable);
      }
      stopwatch.Stop();
      ConfigDatabaseAccess.ReadoutDatabaseAccess.Trace("PictureLoadTime:" + stopwatch.Elapsed.TotalMilliseconds.ToString() + "ms");
    }

    internal void PreloadImages(List<int> theImageIDs)
    {
      List<int> intList;
      if (this.CachedBitmapImages == null)
      {
        this.CachedBitmapImages = new SortedList<int, BitmapImage>();
        intList = theImageIDs;
      }
      else
      {
        intList = new List<int>();
        foreach (int theImageId in theImageIDs)
        {
          if (!this.CachedBitmapImages.ContainsKey(theImageId))
            intList.Add(theImageId);
        }
      }
      if (intList.Count == 0)
        return;
      try
      {
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          StringBuilder stringBuilder = new StringBuilder("SELECT * FROM GmmImages");
          stringBuilder.Append(" WHERE ImageID = " + intList[0].ToString());
          for (int index = 1; index < intList.Count; ++index)
            stringBuilder.Append(" OR ImageID = " + intList[index].ToString());
          DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(stringBuilder.ToString(), newConnection);
          Schema.GmmImagesDataTable gmmImagesDataTable = new Schema.GmmImagesDataTable();
          dataAdapter.Fill((DataTable) gmmImagesDataTable);
          foreach (Schema.GmmImagesRow gmmImagesRow in (TypedTableBase<Schema.GmmImagesRow>) gmmImagesDataTable)
            this.CachedBitmapImages.Add(gmmImagesRow.ImageID, this.GetImage(gmmImagesRow.ImageData));
        }
      }
      catch (Exception ex)
      {
        throw new Exception("Error on preload images", ex);
      }
    }

    private BitmapImage GetBitmapImage(int imageId)
    {
      if (this.CachedBitmapImages != null && this.CachedBitmapImages.ContainsKey(imageId))
        return this.CachedBitmapImages[imageId];
      if (imageId == 0)
        return (BitmapImage) null;
      Schema.GmmImagesRow[] gmmImagesRowArray = (Schema.GmmImagesRow[]) this.gmmImageDataTable.Select("ImageID = " + imageId.ToString());
      return gmmImagesRowArray.Length != 1 ? (BitmapImage) null : this.GetImage(gmmImagesRowArray[0].ImageData);
    }

    private BitmapImage GetImage(byte[] imageData)
    {
      MemoryStream memoryStream = new MemoryStream(imageData);
      BitmapImage image = new BitmapImage();
      image.BeginInit();
      image.StreamSource = (Stream) memoryStream;
      image.EndInit();
      return image;
    }

    private string GetProfileTypeName(int ProfileTypeId)
    {
      lock (this.connectionItemsDataTable)
      {
        if (this.ProfileTypesById == null)
        {
          this.ProfileTypesById = new SortedList<int, Schema.ConnectionItemsRow>();
          foreach (Schema.ConnectionItemsRow connectionItemsRow in (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ItemType = '" + ConnectionItemTypes.ProfileType.ToString() + "'"))
            this.ProfileTypesById.Add(connectionItemsRow.ConnectionItemID, connectionItemsRow);
        }
      }
      return this.ProfileTypesById[ProfileTypeId].Name;
    }

    internal List<DeviceGroup> GetDeviceGroups()
    {
      lock (this.connectionItemsDataTable)
      {
        if (this.CachedDeviceGroups == null)
        {
          this.CachedDeviceGroups = new List<DeviceGroup>();
          foreach (Schema.ConnectionItemsRow connectionItemsRow in (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ItemType = '" + ConnectionItemTypes.DeviceGroup.ToString() + "'"))
          {
            DeviceGroup deviceGroup = new DeviceGroup();
            deviceGroup.DeviceGroupID = connectionItemsRow.ConnectionItemID;
            deviceGroup.Name = connectionItemsRow.Name;
            deviceGroup.ImageID = connectionItemsRow.ImageID;
            deviceGroup.PreLoadImage = new System.Func<int, BitmapImage>(this.GetBitmapImage);
            if (!connectionItemsRow.IsDescriptionNull())
              deviceGroup.Description = connectionItemsRow.Description;
            this.CachedDeviceGroups.Add(deviceGroup);
          }
        }
      }
      return this.CachedDeviceGroups;
    }

    internal List<DeviceModel> GetDeviceModels()
    {
      if (this.CachedDeviceGroups == null)
        this.GetDeviceGroups();
      lock (this.connectionItemsDataTable)
      {
        if (this.CachedDeviceModels == null)
        {
          this.CachedDeviceModels = new List<DeviceModel>();
          foreach (Schema.ConnectionItemsRow connectionItemsRow in (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ItemType = '" + ConnectionItemTypes.DeviceModel.ToString() + "'"))
          {
            Schema.ConnectionItemsRow theRow = connectionItemsRow;
            DeviceModel deviceModel = new DeviceModel();
            deviceModel.DeviceModelID = theRow.ConnectionItemID;
            deviceModel.Name = theRow.Name;
            deviceModel.ImageID = theRow.ImageID;
            deviceModel.PreLoadImage = new System.Func<int, BitmapImage>(this.GetBitmapImage);
            if (this.connectionItemParametersDataTable != null)
            {
              Schema.ConnectionItemParametersRow[] itemParametersRowArray = (Schema.ConnectionItemParametersRow[]) this.connectionItemParametersDataTable.Select("ConnectionItemID = " + deviceModel.DeviceModelID.ToString());
              if (itemParametersRowArray != null && itemParametersRowArray.Length != 0)
              {
                deviceModel.Parameters = new SortedList<ConnectionProfileParameter, string>();
                foreach (Schema.ConnectionItemParametersRow itemParametersRow in itemParametersRowArray)
                {
                  ConnectionProfileParameter connectionItemParameter = (ConnectionProfileParameter) itemParametersRow.ConnectionItemParameter;
                  if (!deviceModel.Parameters.ContainsKey(connectionItemParameter))
                  {
                    if (itemParametersRow.IsParameterValueNull())
                      deviceModel.Parameters.Add(connectionItemParameter, (string) null);
                    else
                      deviceModel.Parameters.Add(connectionItemParameter, itemParametersRow.ParameterValue);
                  }
                }
              }
            }
            if (!theRow.IsDescriptionNull())
              deviceModel.Description = theRow.Description;
            if (!theRow.IsManufacturerNull())
              deviceModel.Manufacturer = theRow.Manufacturer;
            if (!theRow.IsMediumNull())
              deviceModel.Medium = theRow.Medium;
            if (!theRow.IsGenerationNull())
              deviceModel.Generation = theRow.Generation;
            if (theRow.ItemGroupID > 0)
            {
              deviceModel.DeviceGroup = this.CachedDeviceGroups.Find((Predicate<DeviceGroup>) (x => x.DeviceGroupID == theRow.ItemGroupID));
              if (deviceModel.DeviceGroup != null)
              {
                deviceModel.ChangeableParameters = new List<ChangeableParameter>();
                foreach (Schema.ConnectionProfilesRow connectionProfilesRow in (TypedTableBase<Schema.ConnectionProfilesRow>) this.connectionProfilesDataTable)
                {
                  if (connectionProfilesRow.DeviceModelID == deviceModel.DeviceModelID && this.CachedConnectionSettingsById.ContainsKey(connectionProfilesRow.ConnectionSettingsID))
                  {
                    ConnectionSettings connectionSettings = this.CachedConnectionSettingsById[connectionProfilesRow.ConnectionSettingsID];
                    if (connectionSettings.ChangableDeviceParameters != null)
                    {
                      using (List<string>.Enumerator enumerator = connectionSettings.ChangableDeviceParameters.GetEnumerator())
                      {
                        while (enumerator.MoveNext())
                        {
                          string parameterName = enumerator.Current;
                          if (deviceModel.ChangeableParameters.FirstOrDefault<ChangeableParameter>((System.Func<ChangeableParameter, bool>) (x => x.Key == parameterName)) == null)
                          {
                            ChangeableParameter changeableParameter = this.ChangableParameterByName[parameterName].DeepCopy();
                            changeableParameter.Value = connectionSettings.AllChangableParameters[parameterName];
                            deviceModel.ChangeableParameters.Add(changeableParameter);
                          }
                        }
                        break;
                      }
                    }
                  }
                }
                this.CachedDeviceModels.Add(deviceModel);
              }
            }
          }
        }
      }
      return this.CachedDeviceModels;
    }

    internal List<EquipmentGroup> GetEquipmentGroups()
    {
      lock (this.connectionItemsDataTable)
      {
        if (this.CachedEquipmentGroups == null)
        {
          this.CachedEquipmentGroups = new List<EquipmentGroup>();
          foreach (Schema.ConnectionItemsRow connectionItemsRow in (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ItemType = '" + ConnectionItemTypes.EquipmentGroup.ToString() + "'"))
          {
            EquipmentGroup equipmentGroup = new EquipmentGroup();
            equipmentGroup.EquipmentGroupID = connectionItemsRow.ConnectionItemID;
            equipmentGroup.Name = connectionItemsRow.Name;
            equipmentGroup.ImageID = connectionItemsRow.ImageID;
            equipmentGroup.PreLoadImage = new System.Func<int, BitmapImage>(this.GetBitmapImage);
            if (!connectionItemsRow.IsDescriptionNull())
              equipmentGroup.Description = connectionItemsRow.Description;
            this.CachedEquipmentGroups.Add(equipmentGroup);
          }
        }
      }
      return this.CachedEquipmentGroups;
    }

    internal List<EquipmentModel> GetEquipmentModels()
    {
      if (this.CachedEquipmentGroups == null)
        this.GetEquipmentGroups();
      lock (this.connectionItemsDataTable)
      {
        if (this.CachedEquipmentModels == null)
        {
          this.CachedEquipmentModels = new List<EquipmentModel>();
          foreach (Schema.ConnectionItemsRow connectionItemsRow in (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ItemType = '" + ConnectionItemTypes.EquipmentModel.ToString() + "'"))
          {
            Schema.ConnectionItemsRow theRow = connectionItemsRow;
            EquipmentModel equipmentModel = new EquipmentModel();
            equipmentModel.EquipmentModelID = theRow.ConnectionItemID;
            equipmentModel.Name = theRow.Name;
            equipmentModel.ImageID = theRow.ImageID;
            equipmentModel.PreLoadImage = new System.Func<int, BitmapImage>(this.GetBitmapImage);
            if (this.connectionItemParametersDataTable != null)
            {
              Schema.ConnectionItemParametersRow[] itemParametersRowArray = (Schema.ConnectionItemParametersRow[]) this.connectionItemParametersDataTable.Select("ConnectionItemID = " + equipmentModel.EquipmentModelID.ToString());
              if (itemParametersRowArray != null && itemParametersRowArray.Length != 0)
              {
                equipmentModel.Parameters = new SortedList<ConnectionProfileParameter, string>();
                foreach (Schema.ConnectionItemParametersRow itemParametersRow in itemParametersRowArray)
                {
                  if (itemParametersRow.IsParameterValueNull())
                    equipmentModel.Parameters.Add((ConnectionProfileParameter) itemParametersRow.ConnectionItemParameter, (string) null);
                  else
                    equipmentModel.Parameters.Add((ConnectionProfileParameter) itemParametersRow.ConnectionItemParameter, itemParametersRow.ParameterValue);
                }
              }
            }
            if (!theRow.IsDescriptionNull())
              equipmentModel.Description = theRow.Description;
            if (theRow.ItemGroupID > 0)
            {
              equipmentModel.EquipmentGroup = this.CachedEquipmentGroups.Find((Predicate<EquipmentGroup>) (x => x.EquipmentGroupID == theRow.ItemGroupID));
              if (equipmentModel.EquipmentGroup != null)
              {
                equipmentModel.ChangeableParameters = new List<ChangeableParameter>();
                foreach (Schema.ConnectionProfilesRow connectionProfilesRow in (TypedTableBase<Schema.ConnectionProfilesRow>) this.connectionProfilesDataTable)
                {
                  if (connectionProfilesRow.EquipmentModelID == equipmentModel.EquipmentModelID && this.CachedConnectionSettingsById.ContainsKey(connectionProfilesRow.ConnectionSettingsID))
                  {
                    ConnectionSettings connectionSettings = this.CachedConnectionSettingsById[connectionProfilesRow.ConnectionSettingsID];
                    if (connectionSettings.ChangableEquipmentParameters != null)
                    {
                      using (List<string>.Enumerator enumerator = connectionSettings.ChangableEquipmentParameters.GetEnumerator())
                      {
                        while (enumerator.MoveNext())
                        {
                          string parameterName = enumerator.Current;
                          if (equipmentModel.ChangeableParameters.FirstOrDefault<ChangeableParameter>((System.Func<ChangeableParameter, bool>) (x => x.Key == parameterName)) == null)
                          {
                            ChangeableParameter changeableParameter = this.ChangableParameterByName[parameterName].DeepCopy();
                            changeableParameter.Value = connectionSettings.AllChangableParameters[parameterName];
                            equipmentModel.ChangeableParameters.Add(changeableParameter);
                          }
                        }
                        break;
                      }
                    }
                  }
                }
                this.CachedEquipmentModels.Add(equipmentModel);
              }
            }
          }
        }
      }
      return this.CachedEquipmentModels;
    }

    internal List<ProfileTypeGroup> GetProfileTypeGroups()
    {
      lock (this.connectionItemsDataTable)
      {
        if (this.CachedProfileTypeGroups == null)
        {
          this.CachedProfileTypeGroups = new List<ProfileTypeGroup>();
          foreach (Schema.ConnectionItemsRow connectionItemsRow in (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ItemType = '" + ConnectionItemTypes.ProfileTypeGroup.ToString() + "'"))
          {
            ProfileTypeGroup profileTypeGroup = new ProfileTypeGroup();
            profileTypeGroup.ProfileTypeGroupID = connectionItemsRow.ConnectionItemID;
            profileTypeGroup.Name = connectionItemsRow.Name;
            profileTypeGroup.ImageID = connectionItemsRow.ImageID;
            profileTypeGroup.PreLoadImage = new System.Func<int, BitmapImage>(this.GetBitmapImage);
            if (!connectionItemsRow.IsDescriptionNull())
              profileTypeGroup.Description = connectionItemsRow.Description;
            this.CachedProfileTypeGroups.Add(profileTypeGroup);
          }
        }
      }
      return this.CachedProfileTypeGroups;
    }

    internal List<ProfileType> GetProfileTypes()
    {
      if (this.CachedProfileTypeGroups == null)
        this.GetProfileTypeGroups();
      lock (this.connectionItemsDataTable)
      {
        if (this.CachedProfileTypes == null)
        {
          this.CachedProfileTypes = new List<ProfileType>();
          foreach (Schema.ConnectionItemsRow connectionItemsRow in (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ItemType = '" + ConnectionItemTypes.ProfileType.ToString() + "'"))
          {
            Schema.ConnectionItemsRow theRow = connectionItemsRow;
            ProfileType profileType = new ProfileType();
            profileType.ProfileTypeID = theRow.ConnectionItemID;
            profileType.Name = theRow.Name;
            profileType.ImageID = theRow.ImageID;
            profileType.PreLoadImage = new System.Func<int, BitmapImage>(this.GetBitmapImage);
            if (this.connectionItemParametersDataTable != null)
            {
              Schema.ConnectionItemParametersRow[] itemParametersRowArray = (Schema.ConnectionItemParametersRow[]) this.connectionItemParametersDataTable.Select("ConnectionItemID = " + profileType.ProfileTypeID.ToString());
              if (itemParametersRowArray != null && itemParametersRowArray.Length != 0)
              {
                profileType.Parameters = new SortedList<ConnectionProfileParameter, string>();
                foreach (Schema.ConnectionItemParametersRow itemParametersRow in itemParametersRowArray)
                {
                  if (itemParametersRow.IsParameterValueNull())
                    profileType.Parameters.Add((ConnectionProfileParameter) itemParametersRow.ConnectionItemParameter, (string) null);
                  else
                    profileType.Parameters.Add((ConnectionProfileParameter) itemParametersRow.ConnectionItemParameter, itemParametersRow.ParameterValue);
                }
              }
            }
            if (!theRow.IsDescriptionNull())
              profileType.Description = theRow.Description;
            if (theRow.ItemGroupID > 0)
            {
              profileType.ProfileTypeGroup = this.CachedProfileTypeGroups.Find((Predicate<ProfileTypeGroup>) (x => x.ProfileTypeGroupID == theRow.ItemGroupID));
              if (profileType.ProfileTypeGroup != null)
              {
                profileType.ChangeableParameters = new List<ChangeableParameter>();
                foreach (Schema.ConnectionProfilesRow connectionProfilesRow in (TypedTableBase<Schema.ConnectionProfilesRow>) this.connectionProfilesDataTable)
                {
                  if (connectionProfilesRow.ProfileTypeID == profileType.ProfileTypeID && this.CachedConnectionSettingsById.ContainsKey(connectionProfilesRow.ConnectionSettingsID))
                  {
                    ConnectionSettings connectionSettings = this.CachedConnectionSettingsById[connectionProfilesRow.ConnectionSettingsID];
                    if (connectionSettings.ChangableProfileTypeParameters != null)
                    {
                      using (List<string>.Enumerator enumerator = connectionSettings.ChangableProfileTypeParameters.GetEnumerator())
                      {
                        while (enumerator.MoveNext())
                        {
                          string parameterName = enumerator.Current;
                          if (profileType.ChangeableParameters.FirstOrDefault<ChangeableParameter>((System.Func<ChangeableParameter, bool>) (x => x.Key == parameterName)) == null)
                          {
                            ChangeableParameter changeableParameter = this.ChangableParameterByName[parameterName].DeepCopy();
                            changeableParameter.Value = connectionSettings.AllChangableParameters[parameterName];
                            profileType.ChangeableParameters.Add(changeableParameter);
                          }
                        }
                        break;
                      }
                    }
                  }
                }
                this.CachedProfileTypes.Add(profileType);
              }
            }
          }
        }
      }
      return this.CachedProfileTypes;
    }

    internal List<ConnectionSettings> GetReadoutSettings()
    {
      lock (this.connectionItemsDataTable)
      {
        if (this.CachedConnectionSettingsById == null)
        {
          try
          {
            this.ChangableParameterByID = new SortedList<int, ChangeableParameter>();
            this.ChangableParameterByName = new SortedList<string, ChangeableParameter>();
            foreach (Schema.ChangeableParametersRow changeableParametersRow in (TypedTableBase<Schema.ChangeableParametersRow>) this.changeableParametersDataTable)
            {
              HashSet<ConfigurationParameterEnvironment> parameterEnvironmentSet = (HashSet<ConfigurationParameterEnvironment>) null;
              if (!changeableParametersRow.IsParameterEnvironmentNull())
              {
                string parameterEnvironment = changeableParametersRow.ParameterEnvironment;
                char[] separator = new char[1]{ ';' };
                foreach (string str in parameterEnvironment.Split(separator, StringSplitOptions.RemoveEmptyEntries))
                {
                  ConfigurationParameterEnvironment result;
                  if (Enum.TryParse<ConfigurationParameterEnvironment>(str.Trim(), out result))
                  {
                    if (parameterEnvironmentSet == null)
                      parameterEnvironmentSet = new HashSet<ConfigurationParameterEnvironment>();
                    parameterEnvironmentSet.Add(result);
                  }
                }
              }
              ChangeableParameter changeableParameter = new ChangeableParameter();
              if (parameterEnvironmentSet != null)
              {
                if (!parameterEnvironmentSet.Contains(ConfigurationParameterEnvironment.Obsolete))
                  changeableParameter.ParameterEnvironment = parameterEnvironmentSet;
                else
                  continue;
              }
              changeableParameter.Key = changeableParametersRow.Name;
              changeableParameter.Type = System.Type.GetType(changeableParametersRow.ParameterType);
              if (!changeableParametersRow.IsMaxValueNull())
                changeableParameter.ValueMax = (object) changeableParametersRow.MaxValue;
              else if (changeableParameter.Type != (System.Type) null)
              {
                FieldInfo field = changeableParameter.Type.GetField("MaxValue", BindingFlags.Static | BindingFlags.Public);
                if (field != (FieldInfo) null)
                  changeableParameter.ValueMax = Convert.ChangeType(field.GetValue((object) null), changeableParameter.Type);
              }
              if (!changeableParametersRow.IsMinValueNull())
                changeableParameter.ValueMin = (object) changeableParametersRow.MinValue;
              else if (changeableParameter.Type != (System.Type) null)
              {
                FieldInfo field = changeableParameter.Type.GetField("MinValue", BindingFlags.Static | BindingFlags.Public);
                if (field != (FieldInfo) null)
                  changeableParameter.ValueMin = Convert.ChangeType(field.GetValue((object) null), changeableParameter.Type);
              }
              if (!changeableParametersRow.IsValueListNull())
              {
                changeableParameter.AvailableValues = new List<ValueItem>();
                string valueList = changeableParametersRow.ValueList;
                char[] separator = new char[1]{ ';' };
                foreach (string str in ((IEnumerable<string>) valueList.Split(separator, StringSplitOptions.RemoveEmptyEntries)).ToList<string>())
                  changeableParameter.AvailableValues.Add(new ValueItem(str));
              }
              if (changeableParameter.Key == "Port")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableComPorts);
              else if (changeableParameter.Key == "Baudrate")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableBaudrates);
              else if (changeableParameter.Key == "COMserver")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableCOMserver);
              else if (changeableParameter.Key == "Parity")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableParity);
              else if (changeableParameter.Key == "TestEcho")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableTestEcho);
              else if (changeableParameter.Key == "Wakeup")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableWakeup);
              else if (changeableParameter.Key == "IrDaSelection")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableIrDaSelection);
              else if (changeableParameter.Key == "TransceiverDevice")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableTransceiverDevice);
              else if (changeableParameter.Key == "Type")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableAsyncComConnectionType);
              else if (changeableParameter.Key == "BusMode")
                changeableParameter.UpdateAvailableValuesHandler = new ChangeableParameter.UpdateAvailableValuesDelegate(Constants.GetAvailableBusMode);
              this.ChangableParameterByID.Add(changeableParametersRow.ParameterID, changeableParameter);
              this.ChangableParameterByName.Add(changeableParameter.Key, changeableParameter);
            }
            this.CachedConnectionSettingsById = new SortedList<int, ConnectionSettings>();
            foreach (Schema.ConnectionSettingsRow connectionSettingsRow in (TypedTableBase<Schema.ConnectionSettingsRow>) this.connectionSettingsDataTable)
            {
              if (this.ChangableParameterByID.ContainsKey(connectionSettingsRow.ParameterID))
              {
                ConnectionSettings connectionSettings;
                if (this.CachedConnectionSettingsById.ContainsKey(connectionSettingsRow.ConnectionSettingsID))
                {
                  connectionSettings = this.CachedConnectionSettingsById[connectionSettingsRow.ConnectionSettingsID];
                }
                else
                {
                  connectionSettings = new ConnectionSettings();
                  connectionSettings.ConnectionSettingsID = connectionSettingsRow.ConnectionSettingsID;
                  connectionSettings.SetupParameterList = new SortedList<string, string>();
                  this.CachedConnectionSettingsById.Add(connectionSettings.ConnectionSettingsID, connectionSettings);
                }
                string key = this.ChangableParameterByID[connectionSettingsRow.ParameterID].Key;
                if (!connectionSettingsRow.IsParameterValueNull())
                  connectionSettings.SetupParameterList.Add(key, connectionSettingsRow.ParameterValue);
                else
                  connectionSettings.SetupParameterList.Add(key, string.Empty);
                if (!connectionSettingsRow.IsParameterUsingNull())
                {
                  string parameterUsing1 = connectionSettingsRow.ParameterUsing;
                  ConnectionSettingsParameterUsing settingsParameterUsing = ConnectionSettingsParameterUsing.changableByDevice;
                  string str1 = settingsParameterUsing.ToString();
                  if (parameterUsing1 == str1)
                  {
                    if (connectionSettings.ChangableDeviceParameters == null)
                      connectionSettings.ChangableDeviceParameters = new List<string>();
                    connectionSettings.ChangableDeviceParameters.Add(key);
                  }
                  else
                  {
                    string parameterUsing2 = connectionSettingsRow.ParameterUsing;
                    settingsParameterUsing = ConnectionSettingsParameterUsing.changableByEquipment;
                    string str2 = settingsParameterUsing.ToString();
                    if (parameterUsing2 == str2)
                    {
                      if (connectionSettings.ChangableEquipmentParameters == null)
                        connectionSettings.ChangableEquipmentParameters = new List<string>();
                      connectionSettings.ChangableEquipmentParameters.Add(key);
                    }
                    else
                    {
                      string parameterUsing3 = connectionSettingsRow.ParameterUsing;
                      settingsParameterUsing = ConnectionSettingsParameterUsing.changableByProfileType;
                      string str3 = settingsParameterUsing.ToString();
                      if (parameterUsing3 == str3)
                      {
                        if (connectionSettings.ChangableProfileTypeParameters == null)
                          connectionSettings.ChangableProfileTypeParameters = new List<string>();
                        connectionSettings.ChangableProfileTypeParameters.Add(key);
                      }
                    }
                  }
                }
              }
            }
            foreach (ConnectionSettings connectionSettings in (IEnumerable<ConnectionSettings>) this.CachedConnectionSettingsById.Values)
            {
              int index1 = connectionSettings.SetupParameterList.IndexOfKey("TransceiverType");
              if (index1 >= 0)
              {
                connectionSettings.TransceiverType = (TransceiverType) Enum.Parse(typeof (TransceiverType), connectionSettings.SetupParameterList.Values[index1]);
                connectionSettings.SetupParameterList.RemoveAt(index1);
              }
              int index2 = connectionSettings.SetupParameterList.IndexOfKey("ConnectionSettingsName");
              if (index2 >= 0)
                connectionSettings.SetupParameterList.RemoveAt(index2);
              ConfigList configList = new ConfigList(connectionSettings.SetupParameterList);
              connectionSettings.Name = configList.Name;
            }
          }
          catch (Exception ex)
          {
            throw new Exception("Error by loading connection settings", ex);
          }
        }
      }
      return this.CachedConnectionSettingsById.Values.ToList<ConnectionSettings>();
    }

    internal List<ConnectionProfile> GetPartiallyConnectionProfiles(
      ConnectionProfileFilter profileFilter = null)
    {
      if (this.CachedEquipmentModels == null)
        this.GetEquipmentModels();
      if (this.CachedDeviceModels == null)
        this.GetDeviceModels();
      if (this.CachedConnectionSettingsById == null)
        this.GetReadoutSettings();
      lock (this.connectionItemsDataTable)
      {
        if (this.CachedPartiallyConnectionProfiles == null)
        {
          this.SettingsID_FromProfileID = new SortedList<int, int>();
          this.CachedPartiallyConnectionProfiles = new List<ConnectionProfile>();
          foreach (Schema.ConnectionProfilesRow connectionProfilesRow in (TypedTableBase<Schema.ConnectionProfilesRow>) this.connectionProfilesDataTable)
          {
            Schema.ConnectionProfilesRow profileRow = connectionProfilesRow;
            if (this.CachedConnectionSettingsById.ContainsKey(profileRow.ConnectionSettingsID))
            {
              ConnectionProfile theProfile = new ConnectionProfile();
              theProfile.ConnectionProfileID = profileRow.ConnectionProfileID;
              theProfile.EquipmentModel = this.CachedEquipmentModels.Find((Predicate<EquipmentModel>) (x => x.EquipmentModelID == profileRow.EquipmentModelID));
              theProfile.DeviceModel = this.CachedDeviceModels.Find((Predicate<DeviceModel>) (x => x.DeviceModelID == profileRow.DeviceModelID));
              theProfile.ProfileType = this.CachedProfileTypes.Find((Predicate<ProfileType>) (x => x.ProfileTypeID == profileRow.ProfileTypeID));
              theProfile.ConnectionSettings = this.CachedConnectionSettingsById[profileRow.ConnectionSettingsID];
              if (theProfile.EquipmentModel != null && theProfile.DeviceModel != null && theProfile.ProfileType != null && theProfile.ConnectionSettings != null)
              {
                this.SettingsID_FromProfileID.Add(profileRow.ConnectionProfileID, profileRow.ConnectionSettingsID);
                if (this.connectionProfileParametersDataTable != null)
                {
                  Schema.ConnectionProfileParametersRow[] profileParametersRowArray = (Schema.ConnectionProfileParametersRow[]) this.connectionProfileParametersDataTable.Select("ConnectionProfileID = " + theProfile.ConnectionProfileID.ToString());
                  if (profileParametersRowArray != null && profileParametersRowArray.Length != 0)
                  {
                    theProfile.Parameters = new SortedList<ConnectionProfileParameter, string>();
                    foreach (Schema.ConnectionProfileParametersRow profileParametersRow in profileParametersRowArray)
                    {
                      ConnectionProfileParameter profileParameter = (ConnectionProfileParameter) profileParametersRow.ConnectionProfileParameter;
                      if (profileParametersRow.IsParameterValueNull())
                        theProfile.Parameters.Add(profileParameter, (string) null);
                      else
                        theProfile.Parameters.Add(profileParameter, profileParametersRow.ParameterValue);
                    }
                  }
                }
                this.GarantSelectedDeviceMBusTypeFromHandler(theProfile);
                this.CachedPartiallyConnectionProfiles.Add(theProfile);
              }
            }
          }
        }
      }
      if (profileFilter == null)
        return this.CachedPartiallyConnectionProfiles;
      List<ConnectionProfile> connectionProfiles = new List<ConnectionProfile>();
      foreach (ConnectionProfile connectionProfile in this.CachedPartiallyConnectionProfiles)
      {
        if (profileFilter.IsSelectedByFilter(connectionProfile.CombinedParameters, connectionProfile.ConnectionSettings.SetupParameterList))
          connectionProfiles.Add(connectionProfile);
      }
      return connectionProfiles;
    }

    private void GarantSelectedDeviceMBusTypeFromHandler(ConnectionProfile theProfile)
    {
      if (theProfile.ConnectionSettings.SetupParameterList.IndexOfKey(ParameterKey.BusMode.ToString()) < 0 || theProfile.ConnectionSettings.SetupParameterList[ParameterKey.BusMode.ToString()] != ZENNER.CommonLibrary.BusMode.MBusPointToPoint.ToString())
        return;
      bool flag = false;
      string str = PointToPointDevices.MBus.ToString();
      if (theProfile.CombinedParameters.ContainsKey(ConnectionProfileParameter.Handler))
      {
        flag = true;
        switch (theProfile.CombinedParameters[ConnectionProfileParameter.Handler])
        {
          case "EDC_Handler":
            str = PointToPointDevices.EDC.ToString();
            break;
          case "TH_Handler":
            str = PointToPointDevices.HumiditySensor.ToString();
            break;
          case "MinolHandler":
            str = PointToPointDevices.Minol_Device.ToString();
            break;
          case "PDC_Handler":
            str = PointToPointDevices.PDC.ToString();
            break;
          case "GMM_Handler":
            str = PointToPointDevices.ZR_Serie2.ToString();
            break;
          case "S3_Handler":
            str = PointToPointDevices.ZR_Serie3.ToString();
            break;
          default:
            flag = false;
            break;
        }
      }
      if (!flag)
        return;
      if (theProfile.ConnectionSettings.SetupParameterList.IndexOfKey(ParameterKey.SelectedDeviceMBusType.ToString()) >= 0)
      {
        string setupParameter = theProfile.ConnectionSettings.SetupParameterList[ParameterKey.SelectedDeviceMBusType.ToString()];
        if (setupParameter == str)
          return;
        theProfile.ConnectionSettings = theProfile.ConnectionSettings.Clone();
        theProfile.ConnectionSettings.SetupParameterList[ParameterKey.SelectedDeviceMBusType.ToString()] = str;
        theProfile.ConnectionSettings.Name = new ConfigList(theProfile.ConnectionSettings.SetupParameterList).Name;
        ConfigDatabaseAccess.ReadoutDatabaseAccess.Info("MBusType in Profile " + theProfile.ConnectionProfileID.ToString() + " changed from " + setupParameter + " to " + str);
      }
      else
      {
        theProfile.ConnectionSettings = theProfile.ConnectionSettings.Clone();
        theProfile.ConnectionSettings.SetupParameterList.Add(ParameterKey.SelectedDeviceMBusType.ToString(), str);
        theProfile.ConnectionSettings.Name = new ConfigList(theProfile.ConnectionSettings.SetupParameterList).Name;
        ConfigDatabaseAccess.ReadoutDatabaseAccess.Info("MBusType added to Profile " + theProfile.ConnectionProfileID.ToString() + ": " + str);
      }
    }

    internal List<ConnectionProfile> GetConnectionProfiles(
      ConnectionProfileFilter profileFilter,
      bool fullConfiguration)
    {
      List<ConnectionProfile> connectionProfiles1 = this.GetPartiallyConnectionProfiles(profileFilter);
      List<ConnectionProfile> connectionProfiles2 = new List<ConnectionProfile>();
      foreach (ConnectionProfile connectionProfile1 in connectionProfiles1)
      {
        if (UserManager.IsDeviceModelAllowed(connectionProfile1.DeviceModel.Name))
        {
          ConnectionProfile connectionProfile2 = connectionProfile1.DeepCopy();
          connectionProfile2.DeviceModel.ChangeableParameters = new List<ChangeableParameter>();
          if (connectionProfile2.ConnectionSettings.ChangableDeviceParameters != null)
          {
            foreach (string changableDeviceParameter in connectionProfile2.ConnectionSettings.ChangableDeviceParameters)
            {
              ChangeableParameter changeableParameter = this.ChangableParameterByName[changableDeviceParameter].DeepCopy();
              changeableParameter.ParameterUsing = ChangeableParameterUsings.changableByDevice;
              changeableParameter.Value = connectionProfile2.ConnectionSettings.SetupParameterList[changableDeviceParameter];
              connectionProfile2.DeviceModel.ChangeableParameters.Add(changeableParameter);
            }
          }
          connectionProfile2.EquipmentModel.ChangeableParameters = new List<ChangeableParameter>();
          if (connectionProfile2.ConnectionSettings.ChangableEquipmentParameters != null)
          {
            foreach (string equipmentParameter in connectionProfile2.ConnectionSettings.ChangableEquipmentParameters)
            {
              ChangeableParameter changeableParameter = this.ChangableParameterByName[equipmentParameter].DeepCopy();
              changeableParameter.ParameterUsing = ChangeableParameterUsings.changableByEquipment;
              changeableParameter.Value = connectionProfile2.ConnectionSettings.SetupParameterList[equipmentParameter];
              connectionProfile2.EquipmentModel.ChangeableParameters.Add(changeableParameter);
            }
          }
          connectionProfile2.ProfileType.ChangeableParameters = new List<ChangeableParameter>();
          if (connectionProfile2.ConnectionSettings.ChangableProfileTypeParameters != null)
          {
            foreach (string profileTypeParameter in connectionProfile2.ConnectionSettings.ChangableProfileTypeParameters)
            {
              ChangeableParameter changeableParameter = this.ChangableParameterByName[profileTypeParameter].DeepCopy();
              changeableParameter.ParameterUsing = ChangeableParameterUsings.changableByProfileType;
              changeableParameter.Value = connectionProfile2.ConnectionSettings.SetupParameterList[profileTypeParameter];
              connectionProfile2.ProfileType.ChangeableParameters.Add(changeableParameter);
            }
          }
          if (fullConfiguration)
          {
            foreach (KeyValuePair<string, string> setupParameter in connectionProfile2.ConnectionSettings.SetupParameterList)
            {
              KeyValuePair<string, string> p = setupParameter;
              if ((connectionProfile2.EquipmentModel.ChangeableParameters == null || !connectionProfile2.EquipmentModel.ChangeableParameters.Exists((Predicate<ChangeableParameter>) (x => x.Key == p.Key))) && (connectionProfile2.DeviceModel.ChangeableParameters == null || !connectionProfile2.DeviceModel.ChangeableParameters.Exists((Predicate<ChangeableParameter>) (x => x.Key == p.Key))) && (connectionProfile2.ProfileType.ChangeableParameters == null || !connectionProfile2.ProfileType.ChangeableParameters.Exists((Predicate<ChangeableParameter>) (x => x.Key == p.Key))) && (!(p.Key == "BusMode") || UserManager.CheckPermission("Developer")))
              {
                if (connectionProfile2.ProfileType.ChangeableParameters == null)
                  connectionProfile2.ProfileType.ChangeableParameters = new List<ChangeableParameter>();
                ChangeableParameter changeableParameter = this.ChangableParameterByName[p.Key].DeepCopy();
                changeableParameter.ParameterUsing = ChangeableParameterUsings.standard;
                changeableParameter.Value = p.Value;
                connectionProfile2.ProfileType.ChangeableParameters.Add(changeableParameter);
              }
            }
          }
          connectionProfiles2.Add(connectionProfile2);
        }
      }
      return connectionProfiles2;
    }

    internal ObservableCollection<ConnectionListRow> GetConnectionProfilesList(
      int startProfileID,
      int selectedProfileID,
      ConnectionProfileFilter profileFilter = null)
    {
      this.currentConnectionProfilesList = new ObservableCollection<ConnectionListRow>();
      this.selectedProfileRow = (ConnectionListRow) null;
      foreach (ConnectionProfile connectionProfile in this.GetPartiallyConnectionProfiles(profileFilter))
      {
        ConnectionListRow connectionListRow = new ConnectionListRow();
        connectionListRow.ID = connectionProfile.ConnectionProfileID;
        if (connectionProfile.EquipmentModel != null)
        {
          if (connectionProfile.EquipmentModel.EquipmentGroup != null)
          {
            connectionListRow.EquipmentGroup = connectionProfile.EquipmentModel.EquipmentGroup.Name;
            connectionListRow.EquipmentGroupID = connectionProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID;
          }
          connectionListRow.EquipmentModel = connectionProfile.EquipmentModel.Name;
          connectionListRow.EquipmentModelID = connectionProfile.EquipmentModel.EquipmentModelID;
        }
        if (connectionProfile.DeviceModel != null)
        {
          if (connectionProfile.DeviceModel.DeviceGroup != null)
          {
            connectionListRow.DeviceGroup = connectionProfile.DeviceModel.DeviceGroup.Name;
            connectionListRow.DeviceGroupID = connectionProfile.DeviceModel.DeviceGroup.DeviceGroupID;
          }
          connectionListRow.DeviceModel = connectionProfile.DeviceModel.Name;
          connectionListRow.DeviceModelID = connectionProfile.DeviceModel.DeviceModelID;
        }
        if (connectionProfile.ProfileType != null)
        {
          if (connectionProfile.ProfileType.ProfileTypeGroup != null)
          {
            connectionListRow.ProfileTypeGroup = connectionProfile.ProfileType.ProfileTypeGroup.Name;
            connectionListRow.ProfileTypeGroupID = connectionProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID;
          }
          connectionListRow.ProfileType = connectionProfile.ProfileType.Name;
          connectionListRow.ProfileTypeID = connectionProfile.ProfileType.ProfileTypeID;
        }
        connectionListRow.SettingsId = connectionProfile.ConnectionSettings.ConnectionSettingsID;
        connectionListRow.SettingsName = connectionProfile.ConnectionSettings.Name;
        StringBuilder stringBuilder = new StringBuilder();
        if (connectionProfile.Parameters != null)
        {
          foreach (KeyValuePair<ConnectionProfileParameter, string> parameter in connectionProfile.Parameters)
          {
            if (stringBuilder.Length > 0)
              stringBuilder.Append(';');
            stringBuilder.Append(parameter.Key.ToString());
            if (parameter.Value != null)
              stringBuilder.Append("=" + parameter.Value);
          }
        }
        if (connectionProfile.DeviceModel.Parameters != null)
        {
          foreach (KeyValuePair<ConnectionProfileParameter, string> parameter in connectionProfile.DeviceModel.Parameters)
          {
            if (stringBuilder.Length > 0)
              stringBuilder.Append(';');
            stringBuilder.Append("D:" + parameter.Key.ToString());
            if (parameter.Value != null)
              stringBuilder.Append("=" + parameter.Value);
          }
        }
        if (connectionProfile.EquipmentModel.Parameters != null)
        {
          foreach (KeyValuePair<ConnectionProfileParameter, string> parameter in connectionProfile.EquipmentModel.Parameters)
          {
            if (stringBuilder.Length > 0)
              stringBuilder.Append(';');
            stringBuilder.Append("E:" + parameter.Key.ToString());
            if (parameter.Value != null)
              stringBuilder.Append("=" + parameter.Value);
          }
        }
        if (connectionProfile.ProfileType.Parameters != null)
        {
          foreach (KeyValuePair<ConnectionProfileParameter, string> parameter in connectionProfile.ProfileType.Parameters)
          {
            if (stringBuilder.Length > 0)
              stringBuilder.Append(';');
            stringBuilder.Append("T:" + parameter.Key.ToString());
            if (parameter.Value != null)
              stringBuilder.Append("=" + parameter.Value);
          }
        }
        connectionListRow.Parameters = stringBuilder.ToString();
        this.currentConnectionProfilesList.Add(connectionListRow);
      }
      int num1 = 0;
      int num2 = 0;
      for (int index1 = 0; index1 < this.currentConnectionProfilesList.Count; ++index1)
      {
        if (num2 > 0)
        {
          num2 = 0;
          ++num1;
        }
        ConnectionListRow connectionProfiles1 = this.currentConnectionProfilesList[index1];
        for (int index2 = index1 + 1; index2 < this.currentConnectionProfilesList.Count; ++index2)
        {
          ConnectionListRow connectionProfiles2 = this.currentConnectionProfilesList[index2];
          if (connectionProfiles1.DeviceGroup == connectionProfiles2.DeviceGroup && connectionProfiles1.DeviceModel == connectionProfiles2.DeviceModel && connectionProfiles1.EquipmentGroup == connectionProfiles2.EquipmentGroup && connectionProfiles1.EquipmentModel == connectionProfiles2.EquipmentModel && connectionProfiles1.ProfileTypeGroup == connectionProfiles2.ProfileTypeGroup && connectionProfiles1.ProfileType == connectionProfiles2.ProfileType)
          {
            ++num2;
            connectionProfiles1.Mark = num1.ToString();
            connectionProfiles2.Mark = num1.ToString();
          }
        }
        if (connectionProfiles1.ID == startProfileID)
          connectionProfiles1.Mark = connectionProfiles1.Mark != null ? connectionProfiles1.Mark + "***" : "***";
        if (connectionProfiles1.ID == selectedProfileID)
        {
          this.selectedProfileRow = connectionProfiles1;
          connectionProfiles1.Mark = connectionProfiles1.Mark != null ? connectionProfiles1.Mark + "!!!" : "!!!";
        }
      }
      return this.currentConnectionProfilesList;
    }

    internal void MarkSelectedProfile(int selectedProfileID)
    {
      if (this.selectedProfileRow != null)
      {
        if (this.selectedProfileRow.Mark != null)
        {
          string str = this.selectedProfileRow.Mark.Replace("!", "").Trim();
          this.selectedProfileRow.Mark = str.Length <= 0 ? (string) null : str;
        }
        this.selectedProfileRow = (ConnectionListRow) null;
      }
      ConnectionListRow connectionListRow = this.currentConnectionProfilesList.First<ConnectionListRow>((System.Func<ConnectionListRow, bool>) (item => item.ID == selectedProfileID));
      if (connectionListRow == null)
        return;
      if (connectionListRow.Mark == null)
      {
        connectionListRow.Mark = "!!!";
      }
      else
      {
        string mark = connectionListRow.Mark;
        string str = "";
        for (int index = 0; index < mark.Length && char.IsDigit(mark[index]); ++index)
          str += mark[index].ToString();
        connectionListRow.Mark = str + "!!!";
        this.selectedProfileRow = connectionListRow;
      }
    }

    internal void CloneSettings(List<int> profileIdList)
    {
      if (profileIdList == null || profileIdList.Count == 0)
        return;
      int? nullable = new int?();
      foreach (int profileId1 in profileIdList)
      {
        int profileId = profileId1;
        ConnectionProfile connectionProfile = ReadoutConfigFunctions.DbData.GetPartiallyConnectionProfiles().Find((Predicate<ConnectionProfile>) (x => x.ConnectionProfileID == profileId));
        if (!nullable.HasValue)
          nullable = new int?(connectionProfile.ConnectionSettings.ConnectionSettingsID);
        else if (nullable.Value != connectionProfile.ConnectionSettings.ConnectionSettingsID)
        {
          int num = (int) System.Windows.MessageBox.Show("More the one ConnectionSettingsID selected! This is not supported.");
          return;
        }
      }
      int newId = (int) Datenbankverbindung.MainDBAccess.GetNewId("ConnectionSettings", "ConnectionSettingsID");
      Schema.ConnectionSettingsRow[] connectionSettingsRowArray = (Schema.ConnectionSettingsRow[]) this.connectionSettingsDataTable.Select("ConnectionSettingsID=" + nullable.Value.ToString());
      for (int index = 0; index < connectionSettingsRowArray.Length; ++index)
      {
        Schema.ConnectionSettingsRow row = this.connectionSettingsDataTable.NewConnectionSettingsRow();
        row.ConnectionSettingsID = newId;
        row.ParameterID = connectionSettingsRowArray[index].ParameterID;
        row.ParameterValue = connectionSettingsRowArray[index].ParameterValue;
        row.ParameterUsing = connectionSettingsRowArray[index].ParameterUsing;
        this.connectionSettingsDataTable.AddConnectionSettingsRow(row);
      }
      this.ConnectionSettingsAdapter.Update((DataTable) this.connectionSettingsDataTable);
      foreach (int profileId in profileIdList)
        ((Schema.ConnectionProfilesRow[]) this.connectionProfilesDataTable.Select("ConnectionProfileID=" + profileId.ToString()))[0].ConnectionSettingsID = newId;
      this.ConnectionProfilesAdapter.Update((DataTable) this.connectionProfilesDataTable);
      this.LoadAllConnectionTables();
    }

    internal void ChangeSettings(int ConnectionSettingsID, SortedList<string, string> newSettings)
    {
      bool flag1 = false;
      bool flag2 = false;
      foreach (KeyValuePair<string, string> newSetting in newSettings)
      {
        Schema.ChangeableParametersRow[] changeableParametersRowArray = (Schema.ChangeableParametersRow[]) this.changeableParametersDataTable.Select("Name = '" + newSetting.Key + "'");
        int num;
        if (changeableParametersRowArray == null || changeableParametersRowArray.Length == 0)
        {
          num = (int) Datenbankverbindung.MainDBAccess.GetNewId("ChangeableParameters", "ParameterID");
          Schema.ChangeableParametersRow row = this.changeableParametersDataTable.NewChangeableParametersRow();
          row.ParameterID = num;
          row.Name = newSetting.Key;
          row.ParameterType = typeof (string).ToString();
          this.changeableParametersDataTable.AddChangeableParametersRow(row);
          flag1 = true;
        }
        else
          num = changeableParametersRowArray[0].ParameterID;
        Schema.ConnectionSettingsRow[] connectionSettingsRowArray = (Schema.ConnectionSettingsRow[]) this.connectionSettingsDataTable.Select("ConnectionSettingsID=" + ConnectionSettingsID.ToString() + "AND ParameterID = " + num.ToString());
        if (connectionSettingsRowArray == null || connectionSettingsRowArray.Length == 0)
        {
          Schema.ConnectionSettingsRow row = this.connectionSettingsDataTable.NewConnectionSettingsRow();
          row.ConnectionSettingsID = ConnectionSettingsID;
          row.ParameterID = num;
          row.ParameterValue = newSetting.Value;
          row.ParameterUsing = ConnectionSettingsParameterUsing.standard.ToString();
          this.connectionSettingsDataTable.AddConnectionSettingsRow(row);
          flag2 = true;
        }
        else if (connectionSettingsRowArray[0].ParameterValue != newSetting.Value)
        {
          connectionSettingsRowArray[0].ParameterValue = newSetting.Value;
          flag2 = true;
        }
      }
      if (flag1)
        this.ChangeableParametersAdapter.Update((DataTable) this.changeableParametersDataTable);
      if (!flag2)
        return;
      this.ConnectionSettingsAdapter.Update((DataTable) this.connectionSettingsDataTable);
      this.LoadAllConnectionTables();
    }

    internal ObservableCollection<SettingsParameterData> GetSettingList(int ConnectionSettingsID)
    {
      Schema.ConnectionSettingsRow[] connectionSettingsRowArray = (Schema.ConnectionSettingsRow[]) this.connectionSettingsDataTable.Select("ConnectionSettingsID=" + ConnectionSettingsID.ToString());
      ObservableCollection<SettingsParameterData> source = new ObservableCollection<SettingsParameterData>();
      for (int index = 0; index < connectionSettingsRowArray.Length; ++index)
      {
        if (this.ChangableParameterByID.ContainsKey(connectionSettingsRowArray[index].ParameterID))
          source.Add(new SettingsParameterData()
          {
            Name = this.ChangableParameterByID[connectionSettingsRowArray[index].ParameterID].Key,
            Value = connectionSettingsRowArray[index].ParameterValue,
            Using = connectionSettingsRowArray[index].ParameterUsing
          });
      }
      return new ObservableCollection<SettingsParameterData>((IEnumerable<SettingsParameterData>) source.OrderBy<SettingsParameterData, string>((System.Func<SettingsParameterData, string>) (x => x.Name)));
    }

    internal bool ChangeSettingList(
      int ConnectionSettingsID,
      ObservableCollection<SettingsParameterData> newSettingsList)
    {
      bool flag1 = false;
      StringBuilder stringBuilder = new StringBuilder();
      foreach (SettingsParameterData newSettings in (Collection<SettingsParameterData>) newSettingsList)
      {
        if (!(newSettings.Name == "ConnectionSettingsName"))
        {
          if (!Enum.TryParse<ParameterKey>(newSettings.Name, out ParameterKey _))
            stringBuilder.AppendLine("Illegal parameter name: " + newSettings.Name);
          else if (!Enum.TryParse<ConnectionSettingsParameterUsing>(newSettings.Using, out ConnectionSettingsParameterUsing _))
          {
            stringBuilder.AppendLine("Illegal parameter using: " + newSettings.Using);
          }
          else
          {
            Schema.ChangeableParametersRow[] changeableParametersRowArray = (Schema.ChangeableParametersRow[]) this.changeableParametersDataTable.Select("Name = '" + newSettings.Name + "'");
            if (changeableParametersRowArray == null || changeableParametersRowArray.Length == 0)
            {
              int newId = (int) Datenbankverbindung.MainDBAccess.GetNewId("ChangeableParameters", "ParameterID");
              Schema.ChangeableParametersRow row = this.changeableParametersDataTable.NewChangeableParametersRow();
              row.ParameterID = newId;
              row.Name = newSettings.Name;
              row.ParameterType = typeof (string).ToString();
              this.changeableParametersDataTable.AddChangeableParametersRow(row);
              flag1 = true;
            }
            else
            {
              int parameterId = changeableParametersRowArray[0].ParameterID;
            }
          }
        }
      }
      if (stringBuilder.Length > 0)
        throw new Exception(stringBuilder.ToString());
      if (flag1)
      {
        this.ChangeableParametersAdapter.Update((DataTable) this.changeableParametersDataTable);
        this.LoadChangeableParameters();
      }
      Schema.ConnectionSettingsRow[] SettingRows = (Schema.ConnectionSettingsRow[]) this.connectionSettingsDataTable.Select("ConnectionSettingsID=" + ConnectionSettingsID.ToString());
      List<SettingsParameterData> settingsParameterDataList = new List<SettingsParameterData>();
      bool flag2 = false;
      for (int i = 0; i < SettingRows.Length; i++)
      {
        if (!this.ChangableParameterByID.ContainsKey(SettingRows[i].ParameterID))
        {
          SettingRows[i].Delete();
          flag2 = true;
        }
        else
        {
          SettingsParameterData settingsParameterData = newSettingsList.FirstOrDefault<SettingsParameterData>((System.Func<SettingsParameterData, bool>) (x => x.Name == this.ChangableParameterByID[SettingRows[i].ParameterID].Key));
          if (settingsParameterData != null)
          {
            settingsParameterDataList.Add(settingsParameterData);
            if (settingsParameterData.Value != SettingRows[i].ParameterValue)
            {
              SettingRows[i].ParameterValue = settingsParameterData.Value;
              flag2 = true;
            }
            if (settingsParameterData.Using != SettingRows[i].ParameterUsing)
            {
              SettingRows[i].ParameterUsing = settingsParameterData.Using;
              flag2 = true;
            }
          }
          else
          {
            SettingRows[i].Delete();
            flag2 = true;
          }
        }
      }
      foreach (SettingsParameterData newSettings in (Collection<SettingsParameterData>) newSettingsList)
      {
        if (!settingsParameterDataList.Contains(newSettings))
        {
          Schema.ChangeableParametersRow[] changeableParametersRowArray = (Schema.ChangeableParametersRow[]) this.changeableParametersDataTable.Select("Name = '" + newSettings.Name + "'");
          Schema.ConnectionSettingsRow row = this.connectionSettingsDataTable.NewConnectionSettingsRow();
          row.ConnectionSettingsID = ConnectionSettingsID;
          row.ParameterID = changeableParametersRowArray[0].ParameterID;
          row.ParameterValue = newSettings.Value;
          row.ParameterUsing = newSettings.Using;
          this.connectionSettingsDataTable.AddConnectionSettingsRow(row);
          flag2 = true;
        }
      }
      if (flag2)
      {
        this.ConnectionSettingsAdapter.Update((DataTable) this.connectionSettingsDataTable);
        this.LoadAllConnectionTables();
      }
      return flag2;
    }

    internal bool ChangeNameAndDescription(int ConnectionItemID)
    {
      try
      {
        Schema.ConnectionItemsRow[] connectionItemsRowArray = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + ConnectionItemID.ToString());
        ReadoutConfiguration.ChangeNameAndDescription nameAndDescription = new ReadoutConfiguration.ChangeNameAndDescription();
        nameAndDescription.ConfigItemName = connectionItemsRowArray[0].Name;
        nameAndDescription.ConfigItemType = connectionItemsRowArray[0].ItemType;
        if (!connectionItemsRowArray[0].IsTypeClassificationNull())
          nameAndDescription.ConfigItemTypeClassification = connectionItemsRowArray[0].TypeClassification;
        if (!connectionItemsRowArray[0].IsDescriptionNull())
          nameAndDescription.ConfigItemDescription = connectionItemsRowArray[0].Description;
        bool? nullable = nameAndDescription.ShowDialog();
        bool flag = true;
        if (nullable.GetValueOrDefault() == flag & nullable.HasValue)
        {
          connectionItemsRowArray[0].Name = nameAndDescription.ConfigItemName;
          if (string.IsNullOrEmpty(nameAndDescription.ConfigItemDescription))
            connectionItemsRowArray[0].SetDescriptionNull();
          else
            connectionItemsRowArray[0].Description = nameAndDescription.ConfigItemDescription;
          this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
        }
        this.LoadAllConnectionTables();
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("Change picture error", ex.ToString());
      }
      return false;
    }

    internal bool ChooseNewGroup(int ConnectionItemID)
    {
      try
      {
        Schema.ConnectionItemsRow[] connectionItemsRowArray1 = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + ConnectionItemID.ToString());
        if (connectionItemsRowArray1 == null || connectionItemsRowArray1.Length != 1)
          throw new Exception("ConnectionItem not found");
        Schema.ConnectionItemsRow[] connectionItemsRowArray2 = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + connectionItemsRowArray1[0].ItemGroupID.ToString());
        Schema.ConnectionItemsRow connectionItemsRow = connectionItemsRowArray2 != null && connectionItemsRowArray2.Length == 1 ? connectionItemsRowArray2[0] : throw new Exception("Original group not found");
        Schema.ConnectionItemsRow[] connectionItemsRowArray3 = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ItemType = '" + connectionItemsRow.ItemType + "'");
        string[] selectList = connectionItemsRowArray3 != null && connectionItemsRowArray3.Length >= 1 ? new string[connectionItemsRowArray3.Length] : throw new Exception("Group list not found");
        for (int index = 0; index < selectList.Length; ++index)
          selectList[index] = connectionItemsRowArray3[index].Name;
        string selectedValue = SelectOneValue.GetSelectedValue("Select group", "Select the new group", selectList, connectionItemsRow.Name);
        if (selectedValue != null)
        {
          Schema.ConnectionItemsRow[] connectionItemsRowArray4 = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("Name = '" + selectedValue + "'");
          if (connectionItemsRowArray4 == null || connectionItemsRowArray4.Length != 1)
            throw new Exception("Group not found");
          this.ChangeGroup(ConnectionItemID, connectionItemsRowArray4[0].ConnectionItemID);
          this.LoadAllConnectionTables();
        }
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("Change picture error", ex.ToString());
      }
      return false;
    }

    internal bool ChangeGroup(int ConnectionItemID, int GroupID)
    {
      try
      {
        Schema.ConnectionItemsRow[] connectionItemsRowArray = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + ConnectionItemID.ToString());
        if (connectionItemsRowArray.Length != 1)
          throw new Exception("Connection imtem not found");
        connectionItemsRowArray[0].ItemGroupID = GroupID;
        this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
        this.LoadAllConnectionTables();
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("ChangeGroup error", ex.ToString());
      }
      return false;
    }

    internal int GetGroupID(int ConnectionItemID)
    {
      try
      {
        Schema.ConnectionItemsRow[] connectionItemsRowArray = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + ConnectionItemID.ToString());
        return connectionItemsRowArray.Length == 1 ? connectionItemsRowArray[0].ItemGroupID : throw new Exception("Connection item not found");
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("ChangeGroup error", ex.ToString());
      }
      return -1;
    }

    internal bool ChangePicture(int ConnectionItemID)
    {
      try
      {
        Microsoft.Win32.OpenFileDialog openFileDialog = new Microsoft.Win32.OpenFileDialog();
        openFileDialog.DefaultExt = ".png";
        openFileDialog.Filter = "Image documents (.png)|*.png";
        bool? nullable = openFileDialog.ShowDialog();
        bool flag = true;
        if (nullable.GetValueOrDefault() == flag & nullable.HasValue)
        {
          BitmapImage source = new BitmapImage();
          using (FileStream fileStream = new FileStream(openFileDialog.FileName, FileMode.Open))
          {
            source.BeginInit();
            source.StreamSource = (Stream) fileStream;
            source.EndInit();
            using (MemoryStream memoryStream = new MemoryStream())
            {
              PngBitmapEncoder pngBitmapEncoder = new PngBitmapEncoder();
              pngBitmapEncoder.Frames.Add(BitmapFrame.Create((BitmapSource) source));
              pngBitmapEncoder.Save((Stream) memoryStream);
              Schema.ConnectionItemsRow[] connectionItemsRowArray = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + ConnectionItemID.ToString());
              if (connectionItemsRowArray[0].ImageID > 0)
              {
                ((Schema.GmmImagesRow[]) this.gmmImageDataTable.Select("ImageID = " + connectionItemsRowArray[0].ImageID.ToString()))[0].ImageData = memoryStream.ToArray();
                this.GmmImageAdapter.Update((DataTable) this.gmmImageDataTable);
              }
              else
              {
                int newId = (int) Datenbankverbindung.MainDBAccess.GetNewId("GmmImages", "ImageID");
                Schema.GmmImagesRow row = this.gmmImageDataTable.NewGmmImagesRow();
                row.ImageID = newId;
                row.ImageData = memoryStream.ToArray();
                this.gmmImageDataTable.AddGmmImagesRow(row);
                this.GmmImageAdapter.Update((DataTable) this.gmmImageDataTable);
                connectionItemsRowArray[0].ImageID = newId;
                this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
              }
              this.LoadAllConnectionTables();
              return true;
            }
          }
        }
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Change picture from file error");
      }
      return false;
    }

    internal bool PastPicture(int ConnectionItemID)
    {
      try
      {
        System.Windows.DataObject dataObject = System.Windows.Clipboard.GetDataObject() as System.Windows.DataObject;
        if (!dataObject.GetDataPresent("PNG"))
        {
          int num = (int) System.Windows.MessageBox.Show("No PNG data found");
          return false;
        }
        if (!(dataObject.GetData("PNG") is MemoryStream data))
        {
          int num = (int) System.Windows.MessageBox.Show("Cannot load PNG data");
          return false;
        }
        Schema.ConnectionItemsRow[] connectionItemsRowArray = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + ConnectionItemID.ToString());
        if (connectionItemsRowArray[0].ImageID > 0)
        {
          ((Schema.GmmImagesRow[]) this.gmmImageDataTable.Select("ImageID = " + connectionItemsRowArray[0].ImageID.ToString()))[0].ImageData = data.ToArray();
          this.GmmImageAdapter.Update((DataTable) this.gmmImageDataTable);
        }
        else
        {
          int newId = (int) Datenbankverbindung.MainDBAccess.GetNewId("GmmImages", "ImageID");
          Schema.GmmImagesRow row = this.gmmImageDataTable.NewGmmImagesRow();
          row.ImageID = newId;
          row.ImageData = data.ToArray();
          this.gmmImageDataTable.AddGmmImagesRow(row);
          this.GmmImageAdapter.Update((DataTable) this.gmmImageDataTable);
          connectionItemsRowArray[0].ImageID = newId;
          this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
        }
        this.LoadAllConnectionTables();
        return true;
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Past picture error");
      }
      return false;
    }

    internal bool CopyPicture(int ConnectionItemID)
    {
      try
      {
        Schema.ConnectionItemsRow[] connectionItemsRowArray = (Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + ConnectionItemID.ToString());
        if (connectionItemsRowArray[0].ImageID > 0)
        {
          Schema.GmmImagesRow[] gmmImagesRowArray = (Schema.GmmImagesRow[]) this.gmmImageDataTable.Select("ImageID = " + connectionItemsRowArray[0].ImageID.ToString());
          System.Windows.Clipboard.Clear();
          System.Windows.DataObject data1 = new System.Windows.DataObject();
          using (MemoryStream data2 = new MemoryStream(gmmImagesRowArray[0].ImageData))
          {
            data1.SetData("PNG", (object) data2, false);
            using (MemoryStream bitmapStream = new MemoryStream(gmmImagesRowArray[0].ImageData))
            {
              PngBitmapDecoder pngBitmapDecoder = new PngBitmapDecoder((Stream) bitmapStream, BitmapCreateOptions.None, BitmapCacheOption.Default);
              data1.SetData(System.Windows.DataFormats.Bitmap, (object) pngBitmapDecoder.Frames[0], true);
              System.Windows.Clipboard.SetDataObject((object) data1, true);
            }
          }
        }
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Copy picture error");
      }
      return false;
    }

    internal bool AddDeviceModel(ConnectionProfile activeProfile)
    {
      try
      {
        if (((Schema.ConnectionProfilesRow[]) this.connectionProfilesDataTable.Select("DeviceModelID = " + activeProfile.DeviceModel.DeviceModelID.ToString())).Length < 2)
          return this.ShowNeadAdditionalProfileErrorMessage("device model");
        Schema.ConnectionItemsRow row = this.connectionItemsDataTable.NewConnectionItemsRow();
        row.ConnectionItemID = (int) Datenbankverbindung.MainDBAccess.GetNewId("ConnectionItems", "ConnectionItemID");
        row.ItemGroupID = activeProfile.DeviceModel.DeviceGroup.DeviceGroupID;
        row.Name = this.GetUniqueConnectionItemName("New device model");
        row.ImageID = 0;
        row.ItemType = ConnectionItemTypes.DeviceModel.ToString();
        ((Schema.ConnectionProfilesRow[]) this.connectionProfilesDataTable.Select("ConnectionProfileID = " + activeProfile.ConnectionProfileID.ToString()))[0].DeviceModelID = row.ConnectionItemID;
        this.connectionItemsDataTable.AddConnectionItemsRow(row);
        this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
        this.ConnectionProfilesAdapter.Update((DataTable) this.connectionProfilesDataTable);
        this.LoadAllConnectionTables();
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("AddDeviceModel error", ex.ToString());
      }
      return false;
    }

    internal bool AddDeviceGroupForDeviceModel(ConnectionProfile activeProfile)
    {
      try
      {
        Schema.ConnectionItemsRow row = this.connectionItemsDataTable.NewConnectionItemsRow();
        row.ConnectionItemID = (int) Datenbankverbindung.MainDBAccess.GetNewId("ConnectionItems", "ConnectionItemID");
        row.ItemGroupID = 0;
        row.Name = this.GetUniqueConnectionItemName("New profile type group");
        row.ImageID = 0;
        row.ItemType = ConnectionItemTypes.DeviceGroup.ToString();
        ((Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + activeProfile.DeviceModel.DeviceGroup.DeviceGroupID.ToString()))[0].ItemGroupID = row.ConnectionItemID;
        this.connectionItemsDataTable.AddConnectionItemsRow(row);
        this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
        this.LoadAllConnectionTables();
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("ProfileTypeGroup error", ex.ToString());
      }
      return false;
    }

    internal bool AddEquipmentModel(ConnectionProfile activeProfile)
    {
      try
      {
        if (((Schema.ConnectionProfilesRow[]) this.connectionProfilesDataTable.Select("EquipmentModelID = " + activeProfile.EquipmentModel.EquipmentModelID.ToString())).Length < 2)
          return this.ShowNeadAdditionalProfileErrorMessage("equipment model");
        Schema.ConnectionItemsRow row = this.connectionItemsDataTable.NewConnectionItemsRow();
        row.ConnectionItemID = (int) Datenbankverbindung.MainDBAccess.GetNewId("ConnectionItems", "ConnectionItemID");
        row.ItemGroupID = activeProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID;
        row.Name = this.GetUniqueConnectionItemName("New Equipment model");
        row.ImageID = 0;
        row.ItemType = ConnectionItemTypes.EquipmentModel.ToString();
        ((Schema.ConnectionProfilesRow[]) this.connectionProfilesDataTable.Select("ConnectionProfileID = " + activeProfile.ConnectionProfileID.ToString()))[0].EquipmentModelID = row.ConnectionItemID;
        this.connectionItemsDataTable.AddConnectionItemsRow(row);
        this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
        this.ConnectionProfilesAdapter.Update((DataTable) this.connectionProfilesDataTable);
        this.LoadAllConnectionTables();
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("AddEquipmentModel error", ex.ToString());
      }
      return false;
    }

    internal bool AddEquipmentGroupForModel(ConnectionProfile activeProfile)
    {
      try
      {
        Schema.ConnectionItemsRow row = this.connectionItemsDataTable.NewConnectionItemsRow();
        row.ConnectionItemID = (int) Datenbankverbindung.MainDBAccess.GetNewId("ConnectionItems", "ConnectionItemID");
        row.ItemGroupID = 0;
        row.Name = this.GetUniqueConnectionItemName("New equipment group");
        row.ImageID = 0;
        row.ItemType = ConnectionItemTypes.EquipmentGroup.ToString();
        ((Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + activeProfile.EquipmentModel.EquipmentModelID.ToString()))[0].ItemGroupID = row.ConnectionItemID;
        this.connectionItemsDataTable.AddConnectionItemsRow(row);
        this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
        this.LoadAllConnectionTables();
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("AddEquipmentModel error", ex.ToString());
      }
      return false;
    }

    internal bool AddProfileType(ConnectionProfile activeProfile)
    {
      try
      {
        if (((Schema.ConnectionProfilesRow[]) this.connectionProfilesDataTable.Select("ProfileTypeID = " + activeProfile.ProfileType.ProfileTypeID.ToString())).Length < 2)
          return this.ShowNeadAdditionalProfileErrorMessage("profile type");
        Schema.ConnectionItemsRow row = this.connectionItemsDataTable.NewConnectionItemsRow();
        row.ConnectionItemID = (int) Datenbankverbindung.MainDBAccess.GetNewId("ConnectionItems", "ConnectionItemID");
        row.ItemGroupID = activeProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID;
        row.Name = this.GetUniqueConnectionItemName("New ProfileType model");
        row.ImageID = 0;
        row.ItemType = ConnectionItemTypes.ProfileType.ToString();
        ((Schema.ConnectionProfilesRow[]) this.connectionProfilesDataTable.Select("ConnectionProfileID = " + activeProfile.ConnectionProfileID.ToString()))[0].ProfileTypeID = row.ConnectionItemID;
        this.connectionItemsDataTable.AddConnectionItemsRow(row);
        this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
        this.ConnectionProfilesAdapter.Update((DataTable) this.connectionProfilesDataTable);
        this.LoadAllConnectionTables();
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("AddProfileType error", ex.ToString());
      }
      return false;
    }

    internal bool AddProfileTypeGroupForProfileType(ConnectionProfile activeProfile)
    {
      try
      {
        Schema.ConnectionItemsRow row = this.connectionItemsDataTable.NewConnectionItemsRow();
        row.ConnectionItemID = (int) Datenbankverbindung.MainDBAccess.GetNewId("ConnectionItems", "ConnectionItemID");
        row.ItemGroupID = 0;
        row.Name = this.GetUniqueConnectionItemName("New profile type group");
        row.ImageID = 0;
        row.ItemType = ConnectionItemTypes.ProfileTypeGroup.ToString();
        ((Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("ConnectionItemID = " + activeProfile.ProfileType.ProfileTypeID.ToString()))[0].ItemGroupID = row.ConnectionItemID;
        this.connectionItemsDataTable.AddConnectionItemsRow(row);
        this.ConnectionItemsAdapter.Update((DataTable) this.connectionItemsDataTable);
        this.LoadAllConnectionTables();
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("ProfileTypeGroup error", ex.ToString());
      }
      return false;
    }

    internal string DeleteProfiles(List<int> connectionProfileIDsList)
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.AppendLine("Deleted profiles");
      stringBuilder1.AppendLine("------------------");
      stringBuilder1.AppendLine();
      try
      {
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.Append("SELECT * FROM ConnectionProfiles");
        int num1;
        for (int index = 0; index < connectionProfileIDsList.Count; ++index)
        {
          StringBuilder stringBuilder3 = stringBuilder1;
          num1 = connectionProfileIDsList[index];
          string str1 = num1.ToString();
          stringBuilder3.AppendLine(str1);
          if (index == 0)
          {
            StringBuilder stringBuilder4 = stringBuilder2;
            num1 = connectionProfileIDsList[index];
            string str2 = " WHERE ConnectionProfileID = " + num1.ToString();
            stringBuilder4.Append(str2);
          }
          else
          {
            StringBuilder stringBuilder5 = stringBuilder2;
            num1 = connectionProfileIDsList[index];
            string str3 = " OR ConnectionProfileID = " + num1.ToString();
            stringBuilder5.Append(str3);
          }
        }
        string selectSql = stringBuilder2.ToString();
        DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection();
        DbCommandBuilder commandBuilder;
        DbDataAdapter dataAdapter1 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql, newConnection, out commandBuilder);
        Schema.ConnectionProfilesDataTable source1 = new Schema.ConnectionProfilesDataTable();
        dataAdapter1.Fill((DataTable) source1);
        DbDataAdapter dataAdapter2 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM ConnectionProfiles", newConnection);
        Schema.ConnectionProfilesDataTable source2 = new Schema.ConnectionProfilesDataTable();
        dataAdapter2.Fill((DataTable) source2);
        SortedList<int, int> sortedList1 = new SortedList<int, int>();
        SortedList<int, int> sortedList2 = new SortedList<int, int>();
        SortedList<int, int> sortedList3 = new SortedList<int, int>();
        SortedList<int, int> sortedList4 = new SortedList<int, int>();
        SortedList<int, int> sortedList5 = new SortedList<int, int>();
        StringBuilder stringBuilder6 = new StringBuilder();
        foreach (Schema.ConnectionProfilesRow connectionProfilesRow in (TypedTableBase<Schema.ConnectionProfilesRow>) source1)
        {
          Schema.ConnectionProfilesRow theRow = connectionProfilesRow;
          if (!sortedList1.ContainsKey(theRow.DeviceModelID))
          {
            if (source1.Count<Schema.ConnectionProfilesRow>((System.Func<Schema.ConnectionProfilesRow, bool>) (item => item.DeviceModelID == theRow.DeviceModelID)) >= source2.Count<Schema.ConnectionProfilesRow>((System.Func<Schema.ConnectionProfilesRow, bool>) (item => item.DeviceModelID == theRow.DeviceModelID)))
            {
              StringBuilder stringBuilder7 = stringBuilder6;
              num1 = theRow.DeviceModelID;
              string str = "DeviceModelID '" + num1.ToString() + "' is only available inside this range and will be deleted!";
              stringBuilder7.AppendLine(str);
              sortedList4.Add(theRow.DeviceModelID, 0);
            }
            sortedList1.Add(theRow.DeviceModelID, 0);
          }
          if (!sortedList2.ContainsKey(theRow.EquipmentModelID))
          {
            if (source1.Count<Schema.ConnectionProfilesRow>((System.Func<Schema.ConnectionProfilesRow, bool>) (item => item.EquipmentModelID == theRow.EquipmentModelID)) >= source2.Count<Schema.ConnectionProfilesRow>((System.Func<Schema.ConnectionProfilesRow, bool>) (item => item.EquipmentModelID == theRow.EquipmentModelID)))
            {
              StringBuilder stringBuilder8 = stringBuilder6;
              num1 = theRow.EquipmentModelID;
              string str = "EquipmentModelID '" + num1.ToString() + "' is only available inside this range and will be deleted!";
              stringBuilder8.AppendLine(str);
              sortedList4.Add(theRow.EquipmentModelID, 0);
            }
            sortedList2.Add(theRow.EquipmentModelID, 0);
          }
          if (!sortedList3.ContainsKey(theRow.ProfileTypeID))
          {
            if (source1.Count<Schema.ConnectionProfilesRow>((System.Func<Schema.ConnectionProfilesRow, bool>) (item => item.ProfileTypeID == theRow.ProfileTypeID)) >= source2.Count<Schema.ConnectionProfilesRow>((System.Func<Schema.ConnectionProfilesRow, bool>) (item => item.ProfileTypeID == theRow.ProfileTypeID)))
            {
              StringBuilder stringBuilder9 = stringBuilder6;
              num1 = theRow.ProfileTypeID;
              string str = "ProfileTypeID '" + num1.ToString() + "' is only available inside this range and will be deleted!";
              stringBuilder9.AppendLine(str);
              sortedList4.Add(theRow.ProfileTypeID, 0);
            }
            sortedList3.Add(theRow.ProfileTypeID, 0);
          }
          if (!sortedList5.ContainsKey(theRow.ConnectionSettingsID))
          {
            if (source1.Count<Schema.ConnectionProfilesRow>((System.Func<Schema.ConnectionProfilesRow, bool>) (item => item.ConnectionSettingsID == theRow.ConnectionSettingsID)) >= source2.Count<Schema.ConnectionProfilesRow>((System.Func<Schema.ConnectionProfilesRow, bool>) (item => item.ConnectionSettingsID == theRow.ConnectionSettingsID)))
            {
              StringBuilder stringBuilder10 = stringBuilder6;
              num1 = theRow.ConnectionSettingsID;
              string str = "ConnectionSettingsID '" + num1.ToString() + "' is only available inside this range and will be deleted!";
              stringBuilder10.AppendLine(str);
            }
            sortedList5.Add(theRow.ConnectionSettingsID, 0);
          }
        }
        if (stringBuilder6.Length > 0)
        {
          StringBuilder stringBuilder11 = new StringBuilder();
          stringBuilder11.AppendLine("****** Warning ******");
          stringBuilder11.AppendLine("Would you like to continue?");
          stringBuilder11.AppendLine("---------------------------------------");
          stringBuilder11.AppendLine();
          stringBuilder6.Insert(0, stringBuilder11.ToString());
          if (GMM_MessageBox.ShowMessage("Delete profiles", stringBuilder6.ToString(), MessageBoxButtons.OKCancel) != DialogResult.OK)
            return "Delete canceled. Nothing done.";
        }
        foreach (DataRow dataRow in (TypedTableBase<Schema.ConnectionProfilesRow>) source1)
          dataRow.Delete();
        int num2 = dataAdapter1.Update((DataTable) source1);
        stringBuilder1.Append("Number of deleted profiles: " + num2.ToString());
        if (sortedList4.Count > 0)
        {
          StringBuilder stringBuilder12 = new StringBuilder();
          stringBuilder12.Append("SELECT * FROM ConnectionItems");
          bool flag = true;
          foreach (int key in (IEnumerable<int>) sortedList4.Keys)
          {
            if (flag)
              stringBuilder12.Append(" WHERE ");
            else
              stringBuilder12.Append(" OR ");
          }
          DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(stringBuilder12.ToString(), newConnection, out commandBuilder);
          Schema.ConnectionItemsDataTable connectionItemsDataTable = new Schema.ConnectionItemsDataTable();
        }
        this.LoadAllConnectionTables();
      }
      catch (Exception ex)
      {
        stringBuilder1.Clear();
        stringBuilder1.AppendLine("Delete error");
        stringBuilder1.AppendLine("Exception");
        stringBuilder1.AppendLine(ex.ToString());
        return stringBuilder1.ToString();
      }
      return stringBuilder1.ToString();
    }

    internal List<CommonEditValues> GetCommonProfileEditValues(List<int> connectionProfileIDsList)
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.AppendLine("Deleted profiles");
      stringBuilder1.AppendLine("------------------");
      stringBuilder1.AppendLine();
      List<CommonEditValues> profileEditValues = (List<CommonEditValues>) null;
      try
      {
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.Append("SELECT * FROM ConnectionProfiles");
        for (int index = 0; index < connectionProfileIDsList.Count; ++index)
        {
          StringBuilder stringBuilder3 = stringBuilder1;
          int connectionProfileIds = connectionProfileIDsList[index];
          string str1 = connectionProfileIds.ToString();
          stringBuilder3.AppendLine(str1);
          if (index == 0)
          {
            StringBuilder stringBuilder4 = stringBuilder2;
            connectionProfileIds = connectionProfileIDsList[index];
            string str2 = " WHERE ConnectionProfileID = " + connectionProfileIds.ToString();
            stringBuilder4.Append(str2);
          }
          else
          {
            StringBuilder stringBuilder5 = stringBuilder2;
            connectionProfileIds = connectionProfileIDsList[index];
            string str3 = " OR ConnectionProfileID = " + connectionProfileIds.ToString();
            stringBuilder5.Append(str3);
          }
        }
        string selectSql = stringBuilder2.ToString();
        DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection();
        DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql, newConnection, out DbCommandBuilder _).Fill((DataTable) new Schema.ConnectionProfilesDataTable());
      }
      catch (Exception ex)
      {
        stringBuilder1.Clear();
        stringBuilder1.AppendLine("Delete error");
        stringBuilder1.AppendLine("Exception");
        stringBuilder1.AppendLine(ex.ToString());
        return (List<CommonEditValues>) null;
      }
      return profileEditValues;
    }

    internal List<CommonEditValues> GetCommonSettingsEditValues(
      List<int> connectionProfileIDsList,
      out List<int> settingIds)
    {
      settingIds = (List<int>) null;
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.AppendLine("Deleted profiles");
      stringBuilder1.AppendLine("------------------");
      stringBuilder1.AppendLine();
      List<CommonEditValues> settingsEditValues;
      try
      {
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.Append("SELECT * FROM ConnectionProfiles");
        for (int index = 0; index < connectionProfileIDsList.Count; ++index)
        {
          stringBuilder1.AppendLine(connectionProfileIDsList[index].ToString());
          if (index == 0)
            stringBuilder2.Append(" WHERE ConnectionProfileID = " + connectionProfileIDsList[index].ToString());
          else
            stringBuilder2.Append(" OR ConnectionProfileID = " + connectionProfileIDsList[index].ToString());
        }
        string selectSql1 = stringBuilder2.ToString();
        DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection();
        DbDataAdapter dataAdapter1 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql1, newConnection);
        Schema.ConnectionProfilesDataTable profilesDataTable = new Schema.ConnectionProfilesDataTable();
        dataAdapter1.Fill((DataTable) profilesDataTable);
        settingIds = new List<int>();
        foreach (Schema.ConnectionProfilesRow connectionProfilesRow in (TypedTableBase<Schema.ConnectionProfilesRow>) profilesDataTable)
        {
          if (!settingIds.Contains(connectionProfilesRow.ConnectionSettingsID))
            settingIds.Add(connectionProfilesRow.ConnectionSettingsID);
        }
        stringBuilder2.Clear();
        stringBuilder2.Append("SELECT * FROM ConnectionSettings");
        for (int index = 0; index < settingIds.Count; ++index)
        {
          stringBuilder1.AppendLine(settingIds[index].ToString());
          if (index == 0)
            stringBuilder2.Append(" WHERE ConnectionSettingsID = " + settingIds[index].ToString());
          else
            stringBuilder2.Append(" OR ConnectionSettingsID = " + settingIds[index].ToString());
        }
        string selectSql2 = stringBuilder2.ToString();
        DbDataAdapter dataAdapter2 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql2, newConnection, out DbCommandBuilder _);
        Schema.ConnectionSettingsDataTable settingsDataTable = new Schema.ConnectionSettingsDataTable();
        dataAdapter2.Fill((DataTable) settingsDataTable);
        settingsEditValues = new List<CommonEditValues>();
        foreach (Schema.ConnectionSettingsRow connectionSettingsRow in (TypedTableBase<Schema.ConnectionSettingsRow>) settingsDataTable)
        {
          if (connectionSettingsRow.ParameterID != 1)
          {
            ChangeableParameter cParam = this.ChangableParameterByID[connectionSettingsRow.ParameterID];
            CommonEditValues commonEditValues = settingsEditValues.Find((Predicate<CommonEditValues>) (item => item.ValueName == cParam.Key));
            if (commonEditValues == null)
            {
              commonEditValues = new CommonEditValues(cParam.Key);
              settingsEditValues.Add(commonEditValues);
            }
            commonEditValues.AddValue(connectionSettingsRow.ParameterValue, connectionSettingsRow.ConnectionSettingsID);
            commonEditValues.AddEditBy(connectionSettingsRow.ParameterUsing, connectionSettingsRow.ConnectionSettingsID);
          }
        }
        foreach (CommonEditValues commonEditValues in settingsEditValues)
          commonEditValues.EscapeEdit(settingIds);
      }
      catch (Exception ex)
      {
        stringBuilder1.Clear();
        stringBuilder1.AppendLine("Delete error");
        stringBuilder1.AppendLine("Exception");
        stringBuilder1.AppendLine(ex.ToString());
        return (List<CommonEditValues>) null;
      }
      return settingsEditValues;
    }

    internal void SetCommonSettingsValues(
      string parameterName,
      string newValue,
      string newUsing,
      List<int> settingIds)
    {
      int key = this.ChangableParameterByID.Keys[this.ChangableParameterByID.IndexOfValue(this.ChangableParameterByName[parameterName])];
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("SELECT * FROM ConnectionSettings");
      stringBuilder.Append(" WHERE ParameterID = " + key.ToString());
      for (int index = 0; index < settingIds.Count; ++index)
      {
        if (index == 0)
          stringBuilder.Append(" AND (ConnectionSettingsID = " + settingIds[index].ToString());
        else
          stringBuilder.Append(" OR ConnectionSettingsID = " + settingIds[index].ToString());
      }
      stringBuilder.Append(")");
      DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection();
      DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(stringBuilder.ToString(), newConnection, out DbCommandBuilder _);
      Schema.ConnectionSettingsDataTable settingsDataTable = new Schema.ConnectionSettingsDataTable();
      dataAdapter.Fill((DataTable) settingsDataTable);
      foreach (int settingId in settingIds)
      {
        Schema.ConnectionSettingsRow[] connectionSettingsRowArray = (Schema.ConnectionSettingsRow[]) settingsDataTable.Select("ConnectionSettingsID = " + settingId.ToString());
        if (connectionSettingsRowArray.Length == 1)
        {
          connectionSettingsRowArray[0].ParameterValue = newValue;
          connectionSettingsRowArray[0].ParameterUsing = newUsing;
        }
        else
        {
          if (connectionSettingsRowArray.Length != 0)
            throw new Exception("Illegal settings count");
          Schema.ConnectionSettingsRow row = settingsDataTable.NewConnectionSettingsRow();
          row.ConnectionSettingsID = settingId;
          row.ParameterID = key;
          row.ParameterValue = newValue;
          row.ParameterUsing = newUsing;
          settingsDataTable.AddConnectionSettingsRow(row);
        }
      }
      dataAdapter.Update((DataTable) settingsDataTable);
    }

    internal string CreateCopiedProfiles(
      List<int> connectionProfileIDsList,
      string newName,
      int groupID,
      ConnectionItemTypes itemType)
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.AppendLine("Copy profiles");
      stringBuilder1.AppendLine("------------------");
      stringBuilder1.AppendLine();
      try
      {
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          newConnection.Open();
          DbTransaction transaction = newConnection.BeginTransaction();
          string selectSql1 = "SELECT * FROM ConnectionItems WHERE Name = '" + newName + "'";
          DbCommandBuilder commandBuilder;
          DbDataAdapter dataAdapter1 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql1, newConnection, transaction, out commandBuilder);
          Schema.ConnectionItemsDataTable connectionItemsDataTable = new Schema.ConnectionItemsDataTable();
          dataAdapter1.Fill((DataTable) connectionItemsDataTable);
          Schema.ConnectionItemsRow row1 = connectionItemsDataTable.Count <= 0 ? connectionItemsDataTable.NewConnectionItemsRow() : throw new Exception("The name exists!");
          row1.ConnectionItemID = DbBasis.PrimaryDB.BaseDbConnection.GetNewId("ConnectionItems");
          row1.ItemGroupID = groupID;
          row1.ItemType = itemType.ToString();
          row1.ImageID = 0;
          row1.ItemOrder = 0;
          row1.Name = newName;
          connectionItemsDataTable.AddConnectionItemsRow(row1);
          StringBuilder stringBuilder2 = new StringBuilder();
          stringBuilder2.Append("SELECT * FROM ConnectionProfiles");
          int num1;
          for (int index = 0; index < connectionProfileIDsList.Count; ++index)
          {
            StringBuilder stringBuilder3 = stringBuilder1;
            num1 = connectionProfileIDsList[index];
            string str1 = num1.ToString();
            stringBuilder3.AppendLine(str1);
            if (index == 0)
            {
              StringBuilder stringBuilder4 = stringBuilder2;
              num1 = connectionProfileIDsList[index];
              string str2 = " WHERE ConnectionProfileID = " + num1.ToString();
              stringBuilder4.Append(str2);
            }
            else
            {
              StringBuilder stringBuilder5 = stringBuilder2;
              num1 = connectionProfileIDsList[index];
              string str3 = " OR ConnectionProfileID = " + num1.ToString();
              stringBuilder5.Append(str3);
            }
          }
          string selectSql2 = stringBuilder2.ToString();
          DbDataAdapter dataAdapter2 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql2, newConnection, transaction, out commandBuilder);
          Schema.ConnectionProfilesDataTable profilesDataTable = new Schema.ConnectionProfilesDataTable();
          dataAdapter2.Fill((DataTable) profilesDataTable);
          if (profilesDataTable.Count != connectionProfileIDsList.Count)
            throw new Exception("Illegal number of profiles found");
          stringBuilder2.Clear();
          stringBuilder2.Append("SELECT * FROM ConnectionProfileParameters");
          for (int index = 0; index < connectionProfileIDsList.Count; ++index)
          {
            StringBuilder stringBuilder6 = stringBuilder1;
            num1 = connectionProfileIDsList[index];
            string str4 = num1.ToString();
            stringBuilder6.AppendLine(str4);
            if (index == 0)
            {
              StringBuilder stringBuilder7 = stringBuilder2;
              num1 = connectionProfileIDsList[index];
              string str5 = " WHERE ConnectionProfileID = " + num1.ToString();
              stringBuilder7.Append(str5);
            }
            else
            {
              StringBuilder stringBuilder8 = stringBuilder2;
              num1 = connectionProfileIDsList[index];
              string str6 = " OR ConnectionProfileID = " + num1.ToString();
              stringBuilder8.Append(str6);
            }
          }
          string selectSql3 = stringBuilder2.ToString();
          DbDataAdapter dataAdapter3 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql3, newConnection, transaction, out DbCommandBuilder _);
          Schema.ConnectionProfileParametersDataTable parametersDataTable1 = new Schema.ConnectionProfileParametersDataTable();
          dataAdapter3.Fill((DataTable) parametersDataTable1);
          IdContainer newIds = DbBasis.PrimaryDB.BaseDbConnection.GetNewIds("ConnectionProfiles", profilesDataTable.Count);
          for (int index = 0; index < connectionProfileIDsList.Count; ++index)
          {
            Schema.ConnectionProfilesRow connectionProfilesRow = profilesDataTable[index];
            Schema.ConnectionProfilesRow row2 = profilesDataTable.NewConnectionProfilesRow();
            row2.ConnectionProfileID = newIds.GetNextID();
            row2.DeviceModelID = connectionProfilesRow.DeviceModelID;
            row2.EquipmentModelID = connectionProfilesRow.EquipmentModelID;
            row2.ProfileTypeID = connectionProfilesRow.ProfileTypeID;
            row2.ConnectionSettingsID = connectionProfilesRow.ConnectionSettingsID;
            switch (itemType)
            {
              case ConnectionItemTypes.EquipmentModel:
                row2.EquipmentModelID = row1.ConnectionItemID;
                break;
              case ConnectionItemTypes.DeviceModel:
                row2.DeviceModelID = row1.ConnectionItemID;
                break;
              case ConnectionItemTypes.ProfileType:
                row2.ProfileTypeID = row1.ConnectionItemID;
                break;
              default:
                throw new Exception("Illegal item type");
            }
            profilesDataTable.AddConnectionProfilesRow(row2);
            Schema.ConnectionProfileParametersDataTable parametersDataTable2 = parametersDataTable1;
            num1 = connectionProfilesRow.ConnectionProfileID;
            string filterExpression = "ConnectionProfileID = " + num1.ToString();
            foreach (Schema.ConnectionProfileParametersRow profileParametersRow in (Schema.ConnectionProfileParametersRow[]) parametersDataTable2.Select(filterExpression))
            {
              Schema.ConnectionProfileParametersRow row3 = parametersDataTable1.NewConnectionProfileParametersRow();
              row3.ConnectionProfileID = row2.ConnectionProfileID;
              row3.ConnectionProfileParameter = profileParametersRow.ConnectionProfileParameter;
              row3.ParameterOrder = profileParametersRow.ParameterOrder;
              if (!profileParametersRow.IsParameterValueNull())
                row3.ParameterValue = profileParametersRow.ParameterValue;
              parametersDataTable1.AddConnectionProfileParametersRow(row3);
            }
          }
          dataAdapter1.Update((DataTable) connectionItemsDataTable);
          int num2 = dataAdapter2.Update((DataTable) profilesDataTable);
          dataAdapter3.Update((DataTable) parametersDataTable1);
          stringBuilder1.Append("Number of created profiles: " + num2.ToString());
          transaction.Commit();
          this.LoadAllConnectionTables();
        }
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error on copy profiles");
        return (string) null;
      }
      return stringBuilder1.ToString();
    }

    internal string CreateCopiedProfiles(
      List<int> connectionProfileIDsList,
      ConnectionItemTypes itemType)
    {
      ConnectionProfile profileFromClipboard = this.GetProfileFromClipboard();
      int num1;
      switch (itemType)
      {
        case ConnectionItemTypes.EquipmentModel:
          num1 = profileFromClipboard.EquipmentModel.EquipmentModelID;
          break;
        case ConnectionItemTypes.DeviceModel:
          num1 = profileFromClipboard.DeviceModel.DeviceModelID;
          break;
        case ConnectionItemTypes.ProfileType:
          num1 = profileFromClipboard.ProfileType.ProfileTypeID;
          break;
        default:
          throw new Exception("Illegal item type");
      }
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.AppendLine("Create new copied profiles");
      stringBuilder1.AppendLine("------------------");
      stringBuilder1.AppendLine();
      try
      {
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          newConnection.Open();
          DbTransaction transaction = newConnection.BeginTransaction();
          string selectSql1 = "SELECT * FROM ConnectionItems WHERE ConnectionItemID = " + num1.ToString();
          DbCommandBuilder commandBuilder;
          DbDataAdapter dataAdapter1 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql1, newConnection, transaction, out commandBuilder);
          Schema.ConnectionItemsDataTable connectionItemsDataTable = new Schema.ConnectionItemsDataTable();
          dataAdapter1.Fill((DataTable) connectionItemsDataTable);
          if (connectionItemsDataTable.Count != 1 || connectionItemsDataTable[0].ItemType != itemType.ToString())
            throw new Exception("Illegal item ID. (Wrong type or not available.");
          StringBuilder stringBuilder2 = new StringBuilder();
          stringBuilder2.Append("SELECT * FROM ConnectionProfiles");
          for (int index = 0; index < connectionProfileIDsList.Count; ++index)
          {
            stringBuilder1.AppendLine(connectionProfileIDsList[index].ToString());
            if (index == 0)
              stringBuilder2.Append(" WHERE ConnectionProfileID = " + connectionProfileIDsList[index].ToString());
            else
              stringBuilder2.Append(" OR ConnectionProfileID = " + connectionProfileIDsList[index].ToString());
          }
          string selectSql2 = stringBuilder2.ToString();
          DbDataAdapter dataAdapter2 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql2, newConnection, transaction, out commandBuilder);
          Schema.ConnectionProfilesDataTable profilesDataTable = new Schema.ConnectionProfilesDataTable();
          dataAdapter2.Fill((DataTable) profilesDataTable);
          if (profilesDataTable.Count != connectionProfileIDsList.Count)
            throw new Exception("Illegal number of profiles found");
          stringBuilder2.Clear();
          stringBuilder2.Append("SELECT * FROM ConnectionProfileParameters");
          for (int index = 0; index < connectionProfileIDsList.Count; ++index)
          {
            stringBuilder1.AppendLine(connectionProfileIDsList[index].ToString());
            if (index == 0)
              stringBuilder2.Append(" WHERE ConnectionProfileID = " + connectionProfileIDsList[index].ToString());
            else
              stringBuilder2.Append(" OR ConnectionProfileID = " + connectionProfileIDsList[index].ToString());
          }
          string selectSql3 = stringBuilder2.ToString();
          DbDataAdapter dataAdapter3 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql3, newConnection, transaction, out DbCommandBuilder _);
          Schema.ConnectionProfileParametersDataTable parametersDataTable = new Schema.ConnectionProfileParametersDataTable();
          dataAdapter3.Fill((DataTable) parametersDataTable);
          IdContainer newIds = DbBasis.PrimaryDB.BaseDbConnection.GetNewIds("ConnectionProfiles", profilesDataTable.Count);
          for (int index = 0; index < connectionProfileIDsList.Count; ++index)
          {
            Schema.ConnectionProfilesRow connectionProfilesRow = profilesDataTable[index];
            Schema.ConnectionProfilesRow row1 = profilesDataTable.NewConnectionProfilesRow();
            row1.ConnectionProfileID = newIds.GetNextID();
            row1.DeviceModelID = connectionProfilesRow.DeviceModelID;
            row1.EquipmentModelID = connectionProfilesRow.EquipmentModelID;
            row1.ProfileTypeID = connectionProfilesRow.ProfileTypeID;
            row1.ConnectionSettingsID = connectionProfilesRow.ConnectionSettingsID;
            switch (itemType)
            {
              case ConnectionItemTypes.EquipmentModel:
                row1.EquipmentModelID = num1;
                break;
              case ConnectionItemTypes.DeviceModel:
                row1.DeviceModelID = num1;
                break;
              case ConnectionItemTypes.ProfileType:
                row1.ProfileTypeID = num1;
                break;
            }
            profilesDataTable.AddConnectionProfilesRow(row1);
            foreach (Schema.ConnectionProfileParametersRow profileParametersRow in (Schema.ConnectionProfileParametersRow[]) parametersDataTable.Select("ConnectionProfileID = " + connectionProfilesRow.ConnectionProfileID.ToString()))
            {
              Schema.ConnectionProfileParametersRow row2 = parametersDataTable.NewConnectionProfileParametersRow();
              row2.ConnectionProfileID = row1.ConnectionProfileID;
              row2.ConnectionProfileParameter = profileParametersRow.ConnectionProfileParameter;
              row2.ParameterOrder = profileParametersRow.ParameterOrder;
              if (!profileParametersRow.IsParameterValueNull())
                row2.ParameterValue = profileParametersRow.ParameterValue;
              parametersDataTable.AddConnectionProfileParametersRow(row2);
            }
          }
          int num2 = dataAdapter2.Update((DataTable) profilesDataTable);
          dataAdapter3.Update((DataTable) parametersDataTable);
          stringBuilder1.Append("Number of created profiles: " + num2.ToString());
          transaction.Commit();
          this.LoadAllConnectionTables();
        }
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error on copy profiles");
        return (string) null;
      }
      return stringBuilder1.ToString();
    }

    internal void CreateProfilesForMBusConverters(int ProfileTypeID)
    {
      ProfileType profileType = this.CachedProfileTypes.FirstOrDefault<ProfileType>((System.Func<ProfileType, bool>) (x => x.ProfileTypeID == ProfileTypeID));
      if (profileType == null)
        throw new Exception("ProfileType error");
      SortedList<int, EquipmentModel> sortedList1 = new SortedList<int, EquipmentModel>();
      SortedList<int, DeviceModel> sortedList2 = new SortedList<int, DeviceModel>();
      foreach (ConnectionProfile connectionProfile in this.CachedPartiallyConnectionProfiles)
      {
        if (connectionProfile.EquipmentModel.EquipmentGroup.Name == "Converters" && connectionProfile.ProfileType.ProfileTypeID == ProfileTypeID)
        {
          if (!sortedList1.ContainsKey(connectionProfile.EquipmentModel.EquipmentModelID))
            sortedList1.Add(connectionProfile.EquipmentModel.EquipmentModelID, connectionProfile.EquipmentModel);
          if (!sortedList2.ContainsKey(connectionProfile.DeviceModel.DeviceModelID))
            sortedList2.Add(connectionProfile.DeviceModel.DeviceModelID, connectionProfile.DeviceModel);
        }
      }
      try
      {
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          newConnection.Open();
          string selectSql = "SELECT * FROM ConnectionProfiles";
          DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql, newConnection, out DbCommandBuilder _);
          Schema.ConnectionProfilesDataTable profilesDataTable = new Schema.ConnectionProfilesDataTable();
          StringBuilder stringBuilder = new StringBuilder();
          foreach (DeviceModel deviceModel in (IEnumerable<DeviceModel>) sortedList2.Values)
          {
            DeviceModel theModel = deviceModel;
            List<Schema.ConnectionProfilesRow> connectionProfilesRowList = new List<Schema.ConnectionProfilesRow>();
            int? nullable = new int?();
            foreach (EquipmentModel equipmentModel in (IEnumerable<EquipmentModel>) sortedList1.Values)
            {
              EquipmentModel theConverter = equipmentModel;
              ConnectionProfile connectionProfile = this.CachedPartiallyConnectionProfiles.SingleOrDefault<ConnectionProfile>((System.Func<ConnectionProfile, bool>) (p => p.DeviceModel.DeviceModelID == theModel.ID && p.EquipmentModel.EquipmentModelID == theConverter.EquipmentModelID && p.ProfileType.ProfileTypeID == ProfileTypeID));
              if (connectionProfile == null)
              {
                Schema.ConnectionProfilesRow connectionProfilesRow = profilesDataTable.NewConnectionProfilesRow();
                connectionProfilesRow.ConnectionProfileID = DbBasis.PrimaryDB.BaseDbConnection.GetNewId("ConnectionProfiles");
                connectionProfilesRow.DeviceModelID = theModel.DeviceModelID;
                connectionProfilesRow.ProfileTypeID = ProfileTypeID;
                connectionProfilesRow.EquipmentModelID = theConverter.EquipmentModelID;
                connectionProfilesRowList.Add(connectionProfilesRow);
                stringBuilder.AppendLine(theModel.Name + ";" + theConverter.Name + ";" + profileType.Name);
              }
              else
                nullable = new int?(connectionProfile.ConnectionSettings.ConnectionSettingsID);
            }
            if (connectionProfilesRowList.Count > 0)
            {
              stringBuilder.AppendLine("   -> ConnectionSettingsID = " + nullable.Value.ToString());
              foreach (Schema.ConnectionProfilesRow row in connectionProfilesRowList)
              {
                row.ConnectionSettingsID = nullable.Value;
                profilesDataTable.AddConnectionProfilesRow(row);
              }
            }
          }
          if (GMM_MessageBox.ShowMessage("Create profiles", stringBuilder.ToString(), MessageBoxButtons.OKCancel) != DialogResult.OK)
            return;
          dataAdapter.Update((DataTable) profilesDataTable);
          this.LoadAllConnectionTables();
        }
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error on copy profiles");
      }
    }

    internal void CheckSettings()
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (ConnectionSettings connectionSettings in (IEnumerable<ConnectionSettings>) this.CachedConnectionSettingsById.Values)
      {
        SortedList<string, string> changableParameters = connectionSettings.AllChangableParameters;
        SortedList<string, string> setupParameterList = connectionSettings.SetupParameterList;
        if (!setupParameterList.ContainsKey("BusMode"))
        {
          stringBuilder.AppendLine("BusMode missed in: " + connectionSettings.ConnectionSettingsID.ToString());
        }
        else
        {
          switch (setupParameterList["BusMode"])
          {
            case "MBusPointToPoint":
              if (!setupParameterList.ContainsKey("OnlySecondaryAddressing"))
              {
                stringBuilder.AppendLine("OnlySecondaryAddressing missed in: " + connectionSettings.ConnectionSettingsID.ToString());
                break;
              }
              if (setupParameterList["OnlySecondaryAddressing"] != "False")
                stringBuilder.AppendLine("OnlySecondaryAddressing wrong in: " + connectionSettings.ConnectionSettingsID.ToString());
              break;
            case "MBus":
              if (!setupParameterList.ContainsKey("OnlySecondaryAddressing"))
                stringBuilder.AppendLine("OnlySecondaryAddressing missed in: " + connectionSettings.ConnectionSettingsID.ToString());
              break;
          }
        }
        SortedList<string, string> sortedList1 = changableParameters;
        ParameterKey parameterKey = ParameterKey.PrimaryAddress;
        string key1 = parameterKey.ToString();
        if (sortedList1.ContainsKey(key1))
        {
          SortedList<string, string> sortedList2 = changableParameters;
          parameterKey = ParameterKey.SecondaryAddress;
          string key2 = parameterKey.ToString();
          if (sortedList2.ContainsKey(key2))
            stringBuilder.AppendLine("PrimaryAddress and SecondaryAddress marked as changable in: " + connectionSettings.ConnectionSettingsID.ToString());
        }
      }
      int num = (int) System.Windows.MessageBox.Show(stringBuilder.ToString());
    }

    internal string ChangeIDs(
      List<int> connectionProfileIDsList,
      string newIdString,
      ConnectionItemTypes itemType)
    {
      int result;
      if (!int.TryParse(newIdString, out result) || result < 0)
        throw new Exception("Illegal ID number");
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.AppendLine("Change id's");
      stringBuilder1.AppendLine("------------------");
      stringBuilder1.AppendLine();
      try
      {
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          StringBuilder stringBuilder2 = new StringBuilder();
          stringBuilder2.Append("SELECT * FROM ConnectionProfiles");
          for (int index = 0; index < connectionProfileIDsList.Count; ++index)
          {
            stringBuilder1.AppendLine(connectionProfileIDsList[index].ToString());
            if (index == 0)
              stringBuilder2.Append(" WHERE ConnectionProfileID = " + connectionProfileIDsList[index].ToString());
            else
              stringBuilder2.Append(" OR ConnectionProfileID = " + connectionProfileIDsList[index].ToString());
          }
          string selectSql = stringBuilder2.ToString();
          DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql, newConnection, out DbCommandBuilder _);
          Schema.ConnectionProfilesDataTable profilesDataTable = new Schema.ConnectionProfilesDataTable();
          dataAdapter.Fill((DataTable) profilesDataTable);
          if (profilesDataTable.Count != connectionProfileIDsList.Count)
            throw new Exception("Illegal number of profiles found");
          foreach (Schema.ConnectionProfilesRow connectionProfilesRow in (TypedTableBase<Schema.ConnectionProfilesRow>) profilesDataTable)
          {
            switch (itemType)
            {
              case ConnectionItemTypes.EquipmentModel:
                connectionProfilesRow.EquipmentModelID = result;
                break;
              case ConnectionItemTypes.DeviceModel:
                connectionProfilesRow.DeviceModelID = result;
                break;
              case ConnectionItemTypes.ProfileType:
                connectionProfilesRow.ProfileTypeID = result;
                break;
              default:
                if (itemType != ~ConnectionItemTypes.EquipmentModel)
                  throw new Exception("Illegal ID type");
                connectionProfilesRow.ConnectionSettingsID = result;
                break;
            }
          }
          int num = dataAdapter.Update((DataTable) profilesDataTable);
          stringBuilder1.Append("Number of changed profiles: " + num.ToString());
          this.LoadAllConnectionTables();
        }
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error on copy profiles");
        return (string) null;
      }
      return stringBuilder1.ToString();
    }

    internal int CopyTagsToParameters()
    {
      int parameters = 0;
      using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
      {
        DbDataAdapter dataAdapter1 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM ConnectionItems", newConnection);
        Schema.ConnectionItemsDataTable connectionItemsDataTable = new Schema.ConnectionItemsDataTable();
        dataAdapter1.Fill((DataTable) connectionItemsDataTable);
        newConnection.Open();
        DbTransaction transaction = newConnection.BeginTransaction();
        foreach (Schema.ConnectionItemsRow connectionItemsRow in (TypedTableBase<Schema.ConnectionItemsRow>) connectionItemsDataTable)
        {
          if (!connectionItemsRow.IsTypeClassificationNull())
          {
            string[] strArray = connectionItemsRow.TypeClassification.Split(new char[1]
            {
              ';'
            }, StringSplitOptions.RemoveEmptyEntries);
            if (strArray.Length >= 1)
            {
              DbDataAdapter dataAdapter2 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM ConnectionItemParameters WHERE ConnectionItemID = " + connectionItemsRow.ConnectionItemID.ToString(), newConnection, transaction, out DbCommandBuilder _);
              Schema.ConnectionItemParametersDataTable parametersDataTable = new Schema.ConnectionItemParametersDataTable();
              dataAdapter2.Fill((DataTable) parametersDataTable);
              SortedList<ConnectionProfileParameter, string> sortedList = new SortedList<ConnectionProfileParameter, string>();
              foreach (Schema.ConnectionItemParametersRow itemParametersRow in (TypedTableBase<Schema.ConnectionItemParametersRow>) parametersDataTable)
              {
                ConnectionProfileParameter connectionItemParameter = (ConnectionProfileParameter) itemParametersRow.ConnectionItemParameter;
                string str = (string) null;
                if (!itemParametersRow.IsParameterValueNull())
                  str = itemParametersRow.ParameterValue;
                sortedList.Add(connectionItemParameter, str);
              }
              int num = parameters;
              foreach (string str in strArray)
              {
                ConnectionProfileParameter key = (ConnectionProfileParameter) Enum.Parse(typeof (ConnectionProfileParameter), str);
                if (!sortedList.ContainsKey(key))
                {
                  sortedList.Add(key, (string) null);
                  ++parameters;
                }
              }
              if (!connectionItemsRow.IsManufacturerNull() && connectionItemsRow.Manufacturer.Length > 0)
              {
                if (sortedList.ContainsKey(ConnectionProfileParameter.Manufacturer))
                {
                  if (sortedList[ConnectionProfileParameter.Manufacturer] != connectionItemsRow.Manufacturer)
                  {
                    sortedList[ConnectionProfileParameter.Manufacturer] = connectionItemsRow.Manufacturer;
                    ++parameters;
                  }
                }
                else
                {
                  sortedList.Add(ConnectionProfileParameter.Manufacturer, connectionItemsRow.Manufacturer);
                  ++parameters;
                }
              }
              if (!connectionItemsRow.IsMediumNull() && connectionItemsRow.Medium.Length > 0)
              {
                if (sortedList.ContainsKey(ConnectionProfileParameter.Medium))
                {
                  if (sortedList[ConnectionProfileParameter.Medium] != connectionItemsRow.Medium)
                  {
                    sortedList[ConnectionProfileParameter.Medium] = connectionItemsRow.Medium;
                    ++parameters;
                  }
                }
                else
                {
                  sortedList.Add(ConnectionProfileParameter.Medium, connectionItemsRow.Medium);
                  ++parameters;
                }
              }
              if (!connectionItemsRow.IsGenerationNull() && connectionItemsRow.Generation.Length > 0)
              {
                if (sortedList.ContainsKey(ConnectionProfileParameter.Generation))
                {
                  if (sortedList[ConnectionProfileParameter.Generation] != connectionItemsRow.Generation)
                  {
                    sortedList[ConnectionProfileParameter.Generation] = connectionItemsRow.Generation;
                    ++parameters;
                  }
                }
                else
                {
                  sortedList.Add(ConnectionProfileParameter.Generation, connectionItemsRow.Generation);
                  ++parameters;
                }
              }
              if (num < parameters)
              {
                foreach (DataRow dataRow in (TypedTableBase<Schema.ConnectionItemParametersRow>) parametersDataTable)
                  dataRow.Delete();
                dataAdapter2.Update((DataTable) parametersDataTable);
                for (int index = 0; index < sortedList.Count; ++index)
                {
                  Schema.ConnectionItemParametersRow row = parametersDataTable.NewConnectionItemParametersRow();
                  row.ConnectionItemID = connectionItemsRow.ConnectionItemID;
                  row.ConnectionItemParameter = (int) sortedList.Keys[index];
                  row.ParameterOrder = index;
                  if (sortedList.Values[index] != null)
                    row.ParameterValue = sortedList.Values[index];
                  parametersDataTable.AddConnectionItemParametersRow(row);
                }
                dataAdapter2.Update((DataTable) parametersDataTable);
              }
              dataAdapter2.Dispose();
            }
          }
        }
        transaction.Commit();
        newConnection.Close();
      }
      return parameters;
    }

    internal void CopyProfileToClipboard(int profileID)
    {
      System.Windows.Clipboard.SetDataObject((object) ("ProfileID:" + profileID.ToString()));
    }

    internal ConnectionProfile GetProfileFromClipboard()
    {
      string text = System.Windows.Clipboard.GetText();
      if (text == null || !text.StartsWith("ProfileID:"))
        throw new Exception("No profile in Clipboard");
      int profileID;
      if (!int.TryParse(text.Substring("ProfileID:".Length), out profileID))
        throw new Exception("Profile ID error");
      return this.CachedPartiallyConnectionProfiles.FirstOrDefault<ConnectionProfile>((System.Func<ConnectionProfile, bool>) (x => x.ConnectionProfileID == profileID));
    }

    internal string PastDeviceParametersFromClipboard(List<int> theIds)
    {
      return this.PastProfileItemParametersFromClipboard(theIds, (IConnectionDeviceItem) this.GetProfileFromClipboard().DeviceModel);
    }

    internal string PastEquipmentParametersFromClipboard(List<int> theIds)
    {
      return this.PastProfileItemParametersFromClipboard(theIds, (IConnectionDeviceItem) this.GetProfileFromClipboard().EquipmentModel);
    }

    internal string PastTypeParametersFromClipboard(List<int> theIds)
    {
      return this.PastProfileItemParametersFromClipboard(theIds, (IConnectionDeviceItem) this.GetProfileFromClipboard().ProfileType);
    }

    internal string PastProfileParametersFromClipboard(List<int> profileIds)
    {
      ConnectionProfile profileFromClipboard = this.GetProfileFromClipboard();
      using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
      {
        newConnection.Open();
        DbTransaction myTransaction = newConnection.BeginTransaction();
        foreach (int profileId in profileIds)
        {
          int profileID = profileId;
          if (profileID != profileFromClipboard.ConnectionProfileID)
            this.ChangeProfileParameters(this.CachedPartiallyConnectionProfiles.FirstOrDefault<ConnectionProfile>((System.Func<ConnectionProfile, bool>) (x => x.ConnectionProfileID == profileID)).ConnectionProfileID, profileFromClipboard.Parameters, newConnection, myTransaction);
        }
        myTransaction.Commit();
        newConnection.Close();
      }
      this.LoadAllConnectionTables();
      return "ok";
    }

    internal string PastProfileItemParametersFromClipboard(
      List<int> profileIds,
      IConnectionDeviceItem sourceItem)
    {
      using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
      {
        newConnection.Open();
        DbTransaction myTransaction = newConnection.BeginTransaction();
        HashSet<int> intSet = new HashSet<int>();
        foreach (int profileId in profileIds)
        {
          int profileID = profileId;
          ConnectionProfile connectionProfile = this.CachedPartiallyConnectionProfiles.FirstOrDefault<ConnectionProfile>((System.Func<ConnectionProfile, bool>) (x => x.ConnectionProfileID == profileID));
          IConnectionDeviceItem connectionDeviceItem;
          switch (sourceItem)
          {
            case DeviceModel _:
              connectionDeviceItem = (IConnectionDeviceItem) connectionProfile.DeviceModel;
              break;
            case EquipmentModel _:
              connectionDeviceItem = (IConnectionDeviceItem) connectionProfile.EquipmentModel;
              break;
            case ProfileType _:
              connectionDeviceItem = (IConnectionDeviceItem) connectionProfile.ProfileType;
              break;
            default:
              throw new Exception("Illegal item type");
          }
          if (connectionDeviceItem.ID != sourceItem.ID && !intSet.Contains(connectionDeviceItem.ID))
          {
            intSet.Add(connectionDeviceItem.ID);
            this.ChangeItemParameters(connectionDeviceItem.ID, sourceItem.Parameters, newConnection, myTransaction);
          }
        }
        myTransaction.Commit();
        newConnection.Close();
      }
      this.LoadAllConnectionTables();
      return "ok";
    }

    private void ChangeItemParameters(
      int connectionItemID,
      SortedList<ConnectionProfileParameter, string> theParameters,
      DbConnection myConnection,
      DbTransaction myTransaction)
    {
      DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM ConnectionItemParameters WHERE ConnectionItemID = " + connectionItemID.ToString(), myConnection, myTransaction, out DbCommandBuilder _);
      Schema.ConnectionItemParametersDataTable parametersDataTable = new Schema.ConnectionItemParametersDataTable();
      dataAdapter.Fill((DataTable) parametersDataTable);
      foreach (DataRow dataRow in (TypedTableBase<Schema.ConnectionItemParametersRow>) parametersDataTable)
        dataRow.Delete();
      dataAdapter.Update((DataTable) parametersDataTable);
      if (theParameters != null)
      {
        for (int index = 0; index < theParameters.Count; ++index)
        {
          if (theParameters.Keys[index] != ConnectionProfileParameter.None)
          {
            Schema.ConnectionItemParametersRow row = parametersDataTable.NewConnectionItemParametersRow();
            row.ConnectionItemID = connectionItemID;
            row.ConnectionItemParameter = (int) theParameters.Keys[index];
            row.ParameterOrder = index;
            if (theParameters.Values[index] != null)
              row.ParameterValue = theParameters.Values[index];
            parametersDataTable.AddConnectionItemParametersRow(row);
          }
        }
        dataAdapter.Update((DataTable) parametersDataTable);
      }
      dataAdapter.Dispose();
    }

    private void ChangeProfileParameters(
      int profileID,
      SortedList<ConnectionProfileParameter, string> theParameters,
      DbConnection myConnection,
      DbTransaction myTransaction)
    {
      DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM ConnectionProfileParameters WHERE ConnectionProfileID = " + profileID.ToString(), myConnection, myTransaction, out DbCommandBuilder _);
      Schema.ConnectionProfileParametersDataTable parametersDataTable = new Schema.ConnectionProfileParametersDataTable();
      dataAdapter.Fill((DataTable) parametersDataTable);
      foreach (DataRow dataRow in (TypedTableBase<Schema.ConnectionProfileParametersRow>) parametersDataTable)
        dataRow.Delete();
      dataAdapter.Update((DataTable) parametersDataTable);
      if (theParameters != null)
      {
        for (int index = 0; index < theParameters.Count; ++index)
        {
          if (theParameters.Keys[index] != ConnectionProfileParameter.None)
          {
            Schema.ConnectionProfileParametersRow row = parametersDataTable.NewConnectionProfileParametersRow();
            row.ConnectionProfileID = profileID;
            row.ConnectionProfileParameter = (int) theParameters.Keys[index];
            row.ParameterOrder = index;
            if (theParameters.Values[index] != null)
              row.ParameterValue = theParameters.Values[index];
            parametersDataTable.AddConnectionProfileParametersRow(row);
          }
        }
        dataAdapter.Update((DataTable) parametersDataTable);
      }
      dataAdapter.Dispose();
    }

    internal void DeleteCommonSettingsValues(string parameterName, List<int> settingIds)
    {
      int key = this.ChangableParameterByID.Keys[this.ChangableParameterByID.IndexOfValue(this.ChangableParameterByName[parameterName])];
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("SELECT * FROM ConnectionSettings");
      stringBuilder.Append(" WHERE ParameterID = " + key.ToString());
      for (int index = 0; index < settingIds.Count; ++index)
      {
        if (index == 0)
          stringBuilder.Append(" AND (ConnectionSettingsID = " + settingIds[index].ToString());
        else
          stringBuilder.Append(" OR ConnectionSettingsID = " + settingIds[index].ToString());
      }
      stringBuilder.Append(")");
      DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection();
      DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(stringBuilder.ToString(), newConnection, out DbCommandBuilder _);
      Schema.ConnectionSettingsDataTable settingsDataTable = new Schema.ConnectionSettingsDataTable();
      dataAdapter.Fill((DataTable) settingsDataTable);
      foreach (int settingId in settingIds)
      {
        Schema.ConnectionSettingsRow[] connectionSettingsRowArray = (Schema.ConnectionSettingsRow[]) settingsDataTable.Select("ConnectionSettingsID = " + settingId.ToString());
        if (connectionSettingsRowArray.Length == 1)
          connectionSettingsRowArray[0].Delete();
        else if (connectionSettingsRowArray.Length > 1)
          throw new Exception("Illegal settings count");
      }
      dataAdapter.Update((DataTable) settingsDataTable);
    }

    internal void DeleteConnectionItems(List<int> itemIds)
    {
      if (itemIds == null || itemIds.Count == 0)
        return;
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.Append("DELETE FROM ConnectionItems");
      int itemId;
      for (int index = 0; index < itemIds.Count; ++index)
      {
        if (index == 0)
        {
          StringBuilder stringBuilder2 = stringBuilder1;
          itemId = itemIds[index];
          string str = " WHERE (ConnectionItemID = " + itemId.ToString();
          stringBuilder2.Append(str);
        }
        else
        {
          StringBuilder stringBuilder3 = stringBuilder1;
          itemId = itemIds[index];
          string str = " OR ConnectionItemID = " + itemId.ToString();
          stringBuilder3.Append(str);
        }
      }
      stringBuilder1.Append(")");
      DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection();
      using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = stringBuilder1.ToString();
        command.ExecuteNonQuery();
      }
    }

    internal void DeleteSettings(List<int> settingIds)
    {
      if (settingIds == null || settingIds.Count == 0)
        return;
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.Append("DELETE FROM ConnectionSettings");
      int settingId;
      for (int index = 0; index < settingIds.Count; ++index)
      {
        if (index == 0)
        {
          StringBuilder stringBuilder2 = stringBuilder1;
          settingId = settingIds[index];
          string str = " WHERE (ConnectionSettingsID = " + settingId.ToString();
          stringBuilder2.Append(str);
        }
        else
        {
          StringBuilder stringBuilder3 = stringBuilder1;
          settingId = settingIds[index];
          string str = " OR ConnectionSettingsID = " + settingId.ToString();
          stringBuilder3.Append(str);
        }
      }
      stringBuilder1.Append(")");
      DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection();
      using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
      {
        newConnection.Open();
        DbCommand command = newConnection.CreateCommand();
        command.CommandText = stringBuilder1.ToString();
        command.ExecuteNonQuery();
      }
    }

    private string GetUniqueConnectionItemName(string baseName)
    {
      baseName = baseName.Trim();
      while (((Schema.ConnectionItemsRow[]) this.connectionItemsDataTable.Select("Name = '" + baseName + "'")).Length != 0)
        baseName += "_";
      return baseName;
    }

    internal void ChangeConnectionProfile(ConnectionListRow listRow)
    {
      Schema.ConnectionProfilesRow[] connectionProfilesRowArray = (Schema.ConnectionProfilesRow[]) this.connectionProfilesDataTable.Select("ConnectionProfileID=" + listRow.ID.ToString());
      connectionProfilesRowArray[0].DeviceModelID = listRow.DeviceModelID;
      connectionProfilesRowArray[0].EquipmentModelID = listRow.EquipmentModelID;
      connectionProfilesRowArray[0].ProfileTypeID = listRow.ProfileTypeID;
      connectionProfilesRowArray[0].ConnectionSettingsID = listRow.SettingsId;
      this.ConnectionProfilesAdapter.Update((DataTable) this.connectionProfilesDataTable);
      if (listRow.DeviceGroupID != this.GetGroupID(listRow.DeviceModelID))
        this.ChangeGroup(listRow.DeviceModelID, listRow.DeviceGroupID);
      if (listRow.EquipmentGroupID != this.GetGroupID(listRow.EquipmentModelID))
        this.ChangeGroup(listRow.EquipmentModelID, listRow.EquipmentGroupID);
      if (listRow.ProfileTypeGroupID != this.GetGroupID(listRow.ProfileTypeID))
        this.ChangeGroup(listRow.ProfileTypeID, listRow.ProfileTypeGroupID);
      this.LoadAllConnectionTables();
    }

    private bool ShowNeadAdditionalProfileErrorMessage(string partName)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("The current " + partName + " is only used in current profile!");
      stringBuilder.AppendLine();
      stringBuilder.AppendLine("By changing this profile to a new " + partName + " the old");
      stringBuilder.AppendLine(partName + " will lose all connections to profiles");
      stringBuilder.AppendLine("and will be lost for future editing!");
      stringBuilder.AppendLine();
      stringBuilder.AppendLine("Please create first a second profile before you");
      stringBuilder.AppendLine("create a new " + partName + " and connect it to the profile.");
      return this.ShowErrorMessage(stringBuilder.ToString());
    }

    private bool ShowErrorMessage(string message)
    {
      int num = (int) GMM_MessageBox.ShowMessage("Readout configuration", message, true);
      return false;
    }
  }
}


--- ConfigurationSelector.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ConfigurationSelector
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using StartupLib;
using System;
using System.Collections.Generic;
using System.Linq;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace ReadoutConfiguration
{
  internal class ConfigurationSelector
  {
    private List<ConnectionProfile> filteredProfilesList;

    internal ConfigurationSelector(List<ConnectionProfile> filteredProfilesList)
    {
      this.filteredProfilesList = filteredProfilesList;
      if (this.filteredProfilesList != null)
        return;
      this.filteredProfilesList = ReadoutConfigFunctions.DbData.GetPartiallyConnectionProfiles();
    }

    internal ProfileSelecterLists GetAllowedSelectorLists(int ConnectionProfileID)
    {
      ConnectionProfile activeProfile = this.filteredProfilesList.Find((Predicate<ConnectionProfile>) (x => x.ConnectionProfileID == ConnectionProfileID));
      if (!UserManager.IsDeviceModelAllowed(activeProfile.DeviceModel.Name))
        throw new Exception("Selected profile not allowed by license.");
      ProfileSelecterLists allowedSelectorLists = new ProfileSelecterLists();
      List<DeviceGroup> source1 = new List<DeviceGroup>();
      List<DeviceModel> allowedDeviceModels = new List<DeviceModel>();
      List<EquipmentGroup> source2 = new List<EquipmentGroup>();
      List<EquipmentModel> source3 = new List<EquipmentModel>();
      List<ProfileTypeGroup> source4 = new List<ProfileTypeGroup>();
      List<ProfileType> source5 = new List<ProfileType>();
      foreach (ConnectionProfile filteredProfiles in this.filteredProfilesList)
      {
        ConnectionProfile theProfile = filteredProfiles;
        if (source1.FirstOrDefault<DeviceGroup>((Func<DeviceGroup, bool>) (x => x.DeviceGroupID == theProfile.DeviceModel.DeviceGroup.DeviceGroupID)) == null)
          source1.Add(theProfile.DeviceModel.DeviceGroup);
        if (allowedDeviceModels.FirstOrDefault<DeviceModel>((Func<DeviceModel, bool>) (x => x.DeviceModelID == theProfile.DeviceModel.DeviceModelID)) == null)
          allowedDeviceModels.Add(theProfile.DeviceModel);
        if (source2.FirstOrDefault<EquipmentGroup>((Func<EquipmentGroup, bool>) (x => x.EquipmentGroupID == theProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID)) == null)
          source2.Add(theProfile.EquipmentModel.EquipmentGroup);
        if (source3.FirstOrDefault<EquipmentModel>((Func<EquipmentModel, bool>) (x => x.EquipmentModelID == theProfile.EquipmentModel.EquipmentModelID)) == null)
          source3.Add(theProfile.EquipmentModel);
        if (source4.FirstOrDefault<ProfileTypeGroup>((Func<ProfileTypeGroup, bool>) (x => x.ProfileTypeGroupID == theProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID)) == null)
          source4.Add(theProfile.ProfileType.ProfileTypeGroup);
        if (source5.FirstOrDefault<ProfileType>((Func<ProfileType, bool>) (x => x.ProfileTypeID == theProfile.ProfileType.ProfileTypeID)) == null)
          source5.Add(theProfile.ProfileType);
      }
      allowedSelectorLists.allDeviceGroupsList = source1.FindAll((Predicate<DeviceGroup>) (x => allowedDeviceModels.FindAll((Predicate<DeviceModel>) (d => d.DeviceGroup.DeviceGroupID == x.DeviceGroupID)).Count > 0));
      allowedSelectorLists.allDeviceGroupsList.Sort((IComparer<DeviceGroup>) new ConnectionItemComparer());
      allowedSelectorLists.allDeviceModelsList = allowedDeviceModels.FindAll((Predicate<DeviceModel>) (x => x.DeviceGroup.DeviceGroupID == activeProfile.DeviceModel.DeviceGroup.DeviceGroupID));
      allowedSelectorLists.allDeviceModelsList.Sort((IComparer<DeviceModel>) new ConnectionItemComparer());
      List<ConnectionProfile> selectedDeviceProfiles = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == activeProfile.DeviceModel.DeviceModelID));
      allowedSelectorLists.reducedEquipmentGroups = source2.FindAll((Predicate<EquipmentGroup>) (x => selectedDeviceProfiles.Find((Predicate<ConnectionProfile>) (y => y.EquipmentModel.EquipmentGroup.EquipmentGroupID == x.EquipmentGroupID)) != null));
      allowedSelectorLists.reducedEquipmentGroups.Sort((IComparer<EquipmentGroup>) new ConnectionItemComparer());
      allowedSelectorLists.reducedEquipmentModels = source3.FindAll((Predicate<EquipmentModel>) (x => x.EquipmentGroup.EquipmentGroupID == activeProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID && selectedDeviceProfiles.Find((Predicate<ConnectionProfile>) (y => y.EquipmentModel.EquipmentModelID == x.EquipmentModelID)) != null));
      allowedSelectorLists.reducedEquipmentModels.Sort((IComparer<EquipmentModel>) new ConnectionItemComparer());
      List<ConnectionProfile> selectedEquipmentProfiles = selectedDeviceProfiles.FindAll((Predicate<ConnectionProfile>) (x => x.EquipmentModel.EquipmentModelID == activeProfile.EquipmentModel.EquipmentModelID));
      allowedSelectorLists.reducedProfileTypeGroups = source4.FindAll((Predicate<ProfileTypeGroup>) (x => selectedEquipmentProfiles.Find((Predicate<ConnectionProfile>) (y => y.ProfileType.ProfileTypeGroup.ProfileTypeGroupID == x.ProfileTypeGroupID)) != null));
      allowedSelectorLists.reducedProfileTypeGroups.Sort((IComparer<ProfileTypeGroup>) new ConnectionItemComparer());
      allowedSelectorLists.reducedProfileTypes = source5.FindAll((Predicate<ProfileType>) (x => x.ProfileTypeGroup.ProfileTypeGroupID == activeProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID && selectedEquipmentProfiles.Find((Predicate<ConnectionProfile>) (y => y.ProfileType.ProfileTypeID == x.ProfileTypeID)) != null));
      allowedSelectorLists.reducedProfileTypes.Sort((IComparer<ProfileType>) new ConnectionItemComparer());
      return allowedSelectorLists;
    }

    internal int GetProfileIdFromProfileSelecterIDs(
      ConnectionProfile activeProfile,
      ProfileSelecterIDs selectorIDs)
    {
      if (activeProfile.DeviceModel.DeviceGroup.DeviceGroupID != selectorIDs.DeviceGroupID)
      {
        List<ConnectionProfile> all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceGroup.DeviceGroupID == selectorIDs.DeviceGroupID && x.EquipmentModel.EquipmentModelID == selectorIDs.EquipmentModelID && x.ProfileType.ProfileTypeID == selectorIDs.ProfileTypeID));
        if (all == null || all.Count == 0)
        {
          all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceGroup.DeviceGroupID == selectorIDs.DeviceGroupID && x.EquipmentModel.EquipmentModelID == selectorIDs.EquipmentModelID));
          if (all == null || all.Count == 0)
          {
            all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceGroup.DeviceGroupID == selectorIDs.DeviceGroupID));
            if (all == null || all.Count == 0)
              throw new Exception("No ConnectionProfile for DeviceGroupID: " + selectorIDs.DeviceGroupID.ToString());
          }
        }
        return all[0].ConnectionProfileID;
      }
      if (activeProfile.DeviceModel.DeviceModelID != selectorIDs.DeviceModelID)
      {
        List<ConnectionProfile> all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == selectorIDs.DeviceModelID && x.EquipmentModel.EquipmentModelID == selectorIDs.EquipmentModelID && x.ProfileType.ProfileTypeID == selectorIDs.ProfileTypeID));
        if (all == null || all.Count == 0)
        {
          all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == selectorIDs.DeviceModelID && x.EquipmentModel.EquipmentModelID == selectorIDs.EquipmentModelID));
          if (all == null || all.Count == 0)
          {
            all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == selectorIDs.DeviceModelID));
            if (all == null || all.Count == 0)
              throw new Exception("No ConnectionProfile for DeviceModelID: " + selectorIDs.DeviceModelID.ToString());
          }
        }
        return all[0].ConnectionProfileID;
      }
      if (activeProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID != selectorIDs.EquipmentGroupID)
      {
        List<ConnectionProfile> all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == selectorIDs.DeviceModelID && x.EquipmentModel.EquipmentGroup.EquipmentGroupID == selectorIDs.EquipmentGroupID && x.ProfileType.ProfileTypeID == selectorIDs.ProfileTypeID));
        if (all == null || all.Count == 0)
        {
          all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == selectorIDs.DeviceModelID && x.EquipmentModel.EquipmentGroup.EquipmentGroupID == selectorIDs.EquipmentGroupID));
          if (all == null || all.Count == 0)
            throw new Exception("No ConnectionProfile for EquipmentGroupID: " + selectorIDs.EquipmentGroupID.ToString());
        }
        return all[0].ConnectionProfileID;
      }
      if (activeProfile.EquipmentModel.EquipmentModelID != selectorIDs.EquipmentModelID)
      {
        List<ConnectionProfile> all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == selectorIDs.DeviceModelID && x.EquipmentModel.EquipmentModelID == selectorIDs.EquipmentModelID && x.ProfileType.ProfileTypeID == selectorIDs.ProfileTypeID));
        if (all == null || all.Count == 0)
        {
          all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == selectorIDs.DeviceModelID && x.EquipmentModel.EquipmentModelID == selectorIDs.EquipmentModelID));
          if (all == null || all.Count == 0)
            throw new Exception("No ConnectionProfile for EquipmentModelID: " + selectorIDs.EquipmentModelID.ToString());
        }
        return all[0].ConnectionProfileID;
      }
      if (activeProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID != selectorIDs.ProfileTypeGroupID)
      {
        List<ConnectionProfile> all = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == selectorIDs.DeviceModelID && x.EquipmentModel.EquipmentModelID == selectorIDs.EquipmentModelID && x.ProfileType.ProfileTypeGroup.ProfileTypeGroupID == selectorIDs.ProfileTypeGroupID));
        return all != null && all.Count != 0 ? all[0].ConnectionProfileID : throw new Exception("No ConnectionProfile for ProfileTypeGroupID: " + selectorIDs.ProfileTypeGroupID.ToString());
      }
      if (activeProfile.ProfileType.ProfileTypeID == selectorIDs.ProfileTypeID)
        return activeProfile.ConnectionProfileID;
      List<ConnectionProfile> all1 = this.filteredProfilesList.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == selectorIDs.DeviceModelID && x.EquipmentModel.EquipmentModelID == selectorIDs.EquipmentModelID && x.ProfileType.ProfileTypeID == selectorIDs.ProfileTypeID));
      return all1 != null && all1.Count != 0 ? all1[0].ConnectionProfileID : throw new Exception("No ConnectionProfile for ProfileTypeID: " + selectorIDs.ProfileTypeID.ToString());
    }
  }
}


--- ConnectionItemSelectObject.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ConnectionItemSelectObject
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using System.Collections.Generic;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace ReadoutConfiguration
{
  public class ConnectionItemSelectObject
  {
    internal IConnectionItem selectedItem;
    internal List<IConnectionItem> itemList = new List<IConnectionItem>();
  }
}


--- ConnectionItemTypes.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ConnectionItemTypes
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

#nullable disable
namespace ReadoutConfiguration
{
  public enum ConnectionItemTypes
  {
    EquipmentModel,
    EquipmentGroup,
    DeviceModel,
    DeviceGroup,
    ProfileType,
    ProfileTypeGroup,
  }
}


--- ConnectionListRow.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ConnectionListRow
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

#nullable disable
namespace ReadoutConfiguration
{
  public class ConnectionListRow
  {
    public int DeviceGroupID;
    public int DeviceModelID;
    public int EquipmentGroupID;
    public int EquipmentModelID;
    public int ProfileTypeGroupID;
    public int ProfileTypeID;

    public int ID { get; set; }

    public string Mark { get; set; }

    public string DeviceGroup { get; set; }

    public int D_ID => this.DeviceModelID;

    public string DeviceModel { get; set; }

    public string EquipmentGroup { get; set; }

    public int E_ID => this.EquipmentModelID;

    public string EquipmentModel { get; set; }

    public string ProfileTypeGroup { get; set; }

    public int T_ID => this.ProfileTypeID;

    public string ProfileType { get; set; }

    public int SettingsId { get; set; }

    public string SettingsName { get; set; }

    public string Parameters { get; set; }
  }
}


--- ConnectionProfileAdjusted.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ConnectionProfileAdjusted
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using NLog;
using System;
using System.Collections.Generic;
using System.Linq;
using ZENNER.CommonLibrary;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace ReadoutConfiguration
{
  public class ConnectionProfileAdjusted
  {
    private static Logger ConnectionProfileAdjustedLogger = LogManager.GetLogger(nameof (ConnectionProfileAdjusted));
    private ConfigList ConfigListObject = (ConfigList) null;

    public int ConnectionProfileID { get; private set; }

    public int SettingsID { get; private set; }

    internal SortedList<string, string> AdjustedParameters { get; private set; }

    internal SortedList<string, string> DefaultParameters { get; private set; }

    public ConnectionProfileAdjusted(int connectionProfileID)
    {
      this.BaseConstructor(connectionProfileID);
    }

    public ConnectionProfileAdjusted(ConnectionProfile connectionProfile)
    {
      if (connectionProfile == null)
        throw new ArgumentException("ConnectionProfile not defined");
      this.BaseConstructor(connectionProfile.ConnectionProfileID);
    }

    internal ConnectionProfileAdjusted(
      int connectionProfileID,
      ConnectionProfileAdjusted connectionProfileAdjustedBefore)
    {
      if (connectionProfileAdjustedBefore == null)
        throw new ArgumentException("ConnectionProfileAdjustedBefore not defined");
      if (connectionProfileAdjustedBefore.ConfigListObject != null)
        this.ConfigListObject = connectionProfileAdjustedBefore.ConfigListObject;
      this.BaseConstructor(connectionProfileID);
      foreach (KeyValuePair<string, string> adjustedParameter in connectionProfileAdjustedBefore.AdjustedParameters)
      {
        if ((!(adjustedParameter.Key != "Port") || ReadoutConfigFunctions.DbData.ChangableParameterByName[adjustedParameter.Key].ParameterUsing != ChangeableParameterUsings.standard) && this.DefaultParameters.ContainsKey(adjustedParameter.Key) && this.DefaultParameters[adjustedParameter.Key] != adjustedParameter.Value)
          this.AdjustedParameters.Add(adjustedParameter.Key, adjustedParameter.Value);
      }
      this.CheckAdjustedConfig();
    }

    public ConnectionProfileAdjusted(ConfigList configList)
    {
      if (configList == null)
        throw new ArgumentException("ConfigList not defined");
      this.BaseConstructor(configList.ConnectionProfileID);
      foreach (KeyValuePair<string, string> sorted in configList.GetSortedList())
      {
        if (this.DefaultParameters.ContainsKey(sorted.Key) && this.DefaultParameters[sorted.Key] != sorted.Value)
          this.ChangeParameter(sorted.Key, sorted.Value);
      }
      this.ConfigListObject = configList;
      this.CheckAdjustedConfig();
    }

    private void BaseConstructor(int connectionProfileID)
    {
      if (!ReadoutConfigFunctions.DbData.SettingsID_FromProfileID.ContainsKey(connectionProfileID))
        throw new ArgumentException("Unknown ConnectionProfileID:" + connectionProfileID.ToString());
      this.ConnectionProfileID = connectionProfileID;
      this.SettingsID = ReadoutConfigFunctions.DbData.SettingsID_FromProfileID[connectionProfileID];
      this.DefaultParameters = ReadoutConfigFunctions.DbData.CachedConnectionSettingsById[this.SettingsID].SetupParameterList;
      this.AdjustedParameters = new SortedList<string, string>();
    }

    public void ChangeParameter(ChangeableParameter changeableParameter)
    {
      this.ChangeParameter(changeableParameter.Key, changeableParameter.Value);
    }

    public void ChangeParameter(string parameterKey, string newValue)
    {
      if (parameterKey == "ConnectionProfileID")
        return;
      if (!this.DefaultParameters.ContainsKey(parameterKey))
        throw new ArgumentException("Changed parameter '" + parameterKey + "' is not part of profile" + this.ConnectionProfileID.ToString());
      if (this.DefaultParameters[parameterKey] == newValue && this.AdjustedParameters.ContainsKey(parameterKey))
        this.AdjustedParameters.Remove(parameterKey);
      if (this.AdjustedParameters.ContainsKey(parameterKey))
        this.AdjustedParameters[parameterKey] = newValue;
      else
        this.AdjustedParameters.Add(parameterKey, newValue);
    }

    public SortedList<string, string> GetAdjustedList()
    {
      SortedList<string, string> adjustedList = new SortedList<string, string>();
      foreach (KeyValuePair<string, string> defaultParameter in this.DefaultParameters)
      {
        if (this.AdjustedParameters.ContainsKey(defaultParameter.Key))
          adjustedList.Add(defaultParameter.Key, this.AdjustedParameters[defaultParameter.Key]);
        else
          adjustedList.Add(defaultParameter.Key, defaultParameter.Value);
      }
      adjustedList.Add("ConnectionProfileID", this.ConnectionProfileID.ToString());
      return adjustedList;
    }

    public void UpdateConfigList()
    {
      if (this.ConfigListObject == null)
        throw new Exception("ConfigList object not available");
      this.ConfigListObject.Reset(this.GetAdjustedList());
    }

    public ConfigList GetConfigList()
    {
      if (this.ConfigListObject != null)
        throw new Exception("Illegal ConfigList object using. Use UpdateConfigList() to change the ConfigList object deliverd by constructor instead.");
      return new ConfigList(this.GetAdjustedList())
      {
        ConnectionProfileID = this.ConnectionProfileID
      };
    }

    private void CheckAdjustedConfig()
    {
      ConnectionProfile connectionProfile = ReadoutConfigFunctions.DbData.CachedPartiallyConnectionProfiles.FirstOrDefault<ConnectionProfile>((Func<ConnectionProfile, bool>) (x => x.ConnectionProfileID == this.ConnectionProfileID));
      if (connectionProfile == null)
        throw new Exception("ConnectionProfile not found");
      string str1 = (string) null;
      string str2 = (string) null;
      if (this.AdjustedParameters.ContainsKey(ParameterKey.BusMode.ToString()))
      {
        str1 = this.AdjustedParameters[ParameterKey.BusMode.ToString()];
        if (connectionProfile.ConnectionSettings.SetupParameterList.ContainsKey(ParameterKey.BusMode.ToString()))
          str2 = connectionProfile.ConnectionSettings.SetupParameterList[ParameterKey.BusMode.ToString()];
      }
      string str3 = (string) null;
      string str4 = (string) null;
      if (this.AdjustedParameters.ContainsKey(ParameterKey.SelectedDeviceMBusType.ToString()))
      {
        str3 = this.AdjustedParameters[ParameterKey.SelectedDeviceMBusType.ToString()];
        if (connectionProfile.ConnectionSettings.SetupParameterList.ContainsKey(ParameterKey.SelectedDeviceMBusType.ToString()))
          str4 = connectionProfile.ConnectionSettings.SetupParameterList[ParameterKey.SelectedDeviceMBusType.ToString()];
      }
      if (!(str2 != str1) && !(str4 != str3))
        return;
      ConnectionProfileAdjusted.ConnectionProfileAdjustedLogger.Error("Illegal changes");
      this.AdjustedParameters.Clear();
    }
  }
}


--- ConnectionProfileIdentification.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ConnectionProfileIdentification
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using System;
using System.Linq;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace ReadoutConfiguration
{
  public class ConnectionProfileIdentification
  {
    public int ConnectionProfileID { get; private set; }

    public int DeviceModelID { get; private set; }

    public string DeviceModelName { get; private set; }

    public int DeviceGroupID { get; private set; }

    public string DeviceGroupName { get; private set; }

    public int EquipmentModelID { get; private set; }

    public string EquipmentModelName { get; private set; }

    public int EquipmentGroupID { get; private set; }

    public string EquipmentGroupName { get; private set; }

    public int ProfileTypeID { get; private set; }

    public string ProfileTypeName { get; private set; }

    public int ProfileTypeGroupID { get; private set; }

    public string ProfileTypeGroupName { get; private set; }

    public int ConnectionSettingsID { get; private set; }

    public override string ToString()
    {
      return this.DeviceModelName + ";" + this.EquipmentModelName + ";" + this.ProfileTypeName;
    }

    public ConnectionProfileIdentification(int profileID)
    {
      ConnectionProfile connectionProfile = ReadoutConfigFunctions.DbData.CachedPartiallyConnectionProfiles.FirstOrDefault<ConnectionProfile>((Func<ConnectionProfile, bool>) (x => x.ConnectionProfileID == profileID));
      this.ConnectionProfileID = connectionProfile != null ? connectionProfile.ConnectionProfileID : throw new Exception("Unknown connection profile ID");
      this.DeviceModelID = connectionProfile.DeviceModel.DeviceModelID;
      this.DeviceModelName = connectionProfile.DeviceModel.Name;
      this.DeviceGroupID = connectionProfile.DeviceModel.DeviceGroup.DeviceGroupID;
      this.DeviceGroupName = connectionProfile.DeviceModel.DeviceGroup.Name;
      this.EquipmentModelID = connectionProfile.EquipmentModel.EquipmentModelID;
      this.EquipmentModelName = connectionProfile.EquipmentModel.Name;
      this.EquipmentGroupID = connectionProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID;
      this.EquipmentGroupName = connectionProfile.EquipmentModel.EquipmentGroup.Name;
      this.ProfileTypeID = connectionProfile.ProfileType.ProfileTypeID;
      this.ProfileTypeName = connectionProfile.ProfileType.Name;
      this.ProfileTypeGroupID = connectionProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID;
      this.ProfileTypeGroupName = connectionProfile.ProfileType.ProfileTypeGroup.Name;
      this.ConnectionSettingsID = connectionProfile.ConnectionSettings.ConnectionSettingsID;
    }
  }
}


--- ConnectionSettingsParameterUsing.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ConnectionSettingsParameterUsing
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

#nullable disable
namespace ReadoutConfiguration
{
  internal enum ConnectionSettingsParameterUsing
  {
    standard,
    changableByEquipment,
    changableByDevice,
    changableByProfileType,
  }
}


--- DeviceManager.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.DeviceManager
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using PlugInLib;
using System;
using System.Collections.Generic;
using System.Linq;
using ZENNER.CommonLibrary;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;

#nullable disable
namespace ReadoutConfiguration
{
  public sealed class DeviceManager
  {
    internal ConnectionProfileFilter selectedFilterObject;
    internal List<ConnectionProfile> FilteredConnectionProfiles;
    internal List<EquipmentGroup> equipmentGroups;
    internal List<EquipmentModel> equipmentModels;
    internal List<DeviceGroup> deviceGroups;
    internal List<DeviceModel> deviceModels;
    private bool fullConfiguration = false;

    public event EventHandler<string> OnProfileFilterChanged;

    static DeviceManager()
    {
      LicenseManager.LicenseChanged += new System.EventHandler(DeviceManager.LicenseManager_LicenseChanged);
    }

    private static void LicenseManager_LicenseChanged(object sender, EventArgs e)
    {
      DeviceManager.Dispose();
    }

    public DeviceManager() => this.SelectedFilter = (string) null;

    public ConnectionProfileFilter SelectedFilterObject
    {
      get => this.selectedFilterObject;
      set
      {
        this.selectedFilterObject = !this.GetFilterList().Contains(value.Name) ? value : throw new Exception("This filter name '" + value.Name + "' is a predefined fileter name. Please set a different name for customised filters!");
        this.LoadFilterdProfiles();
      }
    }

    public List<string> GetFilterList(
      SortedList<ConnectionProfileParameter, string> filtersFor = null)
    {
      return ReadoutConfigFunctions.DbData.GetFilterList(filtersFor);
    }

    public string SelectedFilter
    {
      get => this.selectedFilterObject == null ? (string) null : this.selectedFilterObject.Name;
      set
      {
        if (this.FilteredConnectionProfiles != null && (value == null && this.selectedFilterObject == null || this.selectedFilterObject != null && this.selectedFilterObject.Name == value))
          return;
        this.LoadFilterdProfiles(value);
      }
    }

    public bool FullConfiguration
    {
      get => this.fullConfiguration;
      set
      {
        if (value == this.fullConfiguration)
          return;
        this.fullConfiguration = value;
        this.LoadFilterdProfiles(this.SelectedFilter);
      }
    }

    internal void LoadFilterdProfiles(string filterName)
    {
      ConfigDatabaseAccess dbData = ReadoutConfigFunctions.DbData;
      if (filterName == null)
      {
        this.selectedFilterObject = (ConnectionProfileFilter) null;
      }
      else
      {
        if (!dbData.CachedProfileFilters.ContainsKey(filterName))
          throw new Exception("Unknown profile filter: " + filterName);
        this.selectedFilterObject = dbData.CachedProfileFilters[filterName];
      }
      this.LoadFilterdProfiles();
    }

    internal void LoadFilterdProfiles()
    {
      this.FilteredConnectionProfiles = ReadoutConfigFunctions.DbData.GetConnectionProfiles(this.selectedFilterObject, this.fullConfiguration);
      if (this.OnProfileFilterChanged != null && this.selectedFilterObject != null)
        this.OnProfileFilterChanged((object) this, this.selectedFilterObject.Name);
      this.equipmentGroups = new List<EquipmentGroup>();
      this.equipmentModels = new List<EquipmentModel>();
      this.deviceGroups = new List<DeviceGroup>();
      this.deviceModels = new List<DeviceModel>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (this.deviceGroups.FirstOrDefault<DeviceGroup>((Func<DeviceGroup, bool>) (x => x.DeviceGroupID == theProfile.DeviceModel.DeviceGroup.DeviceGroupID)) == null)
          this.deviceGroups.Add(theProfile.DeviceModel.DeviceGroup);
        if (this.equipmentGroups.FirstOrDefault<EquipmentGroup>((Func<EquipmentGroup, bool>) (x => x.EquipmentGroupID == theProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID)) == null)
          this.equipmentGroups.Add(theProfile.EquipmentModel.EquipmentGroup);
        DeviceModel deviceModel = this.deviceModels.FirstOrDefault<DeviceModel>((Func<DeviceModel, bool>) (x => x.DeviceModelID == theProfile.DeviceModel.DeviceModelID));
        if (deviceModel == null)
          this.deviceModels.Add(theProfile.DeviceModel.DeepCopy());
        else if (theProfile.DeviceModel.ChangeableParameters != null)
        {
          foreach (ChangeableParameter changeableParameter1 in theProfile.DeviceModel.ChangeableParameters)
          {
            ChangeableParameter configurationParameter = changeableParameter1;
            ChangeableParameter changeableParameter2 = (ChangeableParameter) null;
            if (deviceModel.ChangeableParameters == null)
              deviceModel.ChangeableParameters = new List<ChangeableParameter>();
            else
              changeableParameter2 = deviceModel.ChangeableParameters.FirstOrDefault<ChangeableParameter>((Func<ChangeableParameter, bool>) (x => x.Key == configurationParameter.Key));
            if (changeableParameter2 == null)
              deviceModel.ChangeableParameters.Add(configurationParameter.DeepCopy());
          }
        }
        EquipmentModel equipmentModel = this.equipmentModels.FirstOrDefault<EquipmentModel>((Func<EquipmentModel, bool>) (x => x.EquipmentModelID == theProfile.EquipmentModel.EquipmentModelID));
        if (equipmentModel == null)
          this.equipmentModels.Add(theProfile.EquipmentModel.DeepCopy());
        else if (theProfile.EquipmentModel.ChangeableParameters != null)
        {
          foreach (ChangeableParameter changeableParameter3 in theProfile.EquipmentModel.ChangeableParameters)
          {
            ChangeableParameter configurationParameter = changeableParameter3;
            ChangeableParameter changeableParameter4 = (ChangeableParameter) null;
            if (equipmentModel.ChangeableParameters == null)
              equipmentModel.ChangeableParameters = new List<ChangeableParameter>();
            else
              changeableParameter4 = equipmentModel.ChangeableParameters.FirstOrDefault<ChangeableParameter>((Func<ChangeableParameter, bool>) (x => x.Key == configurationParameter.Key));
            if (changeableParameter4 == null)
              equipmentModel.ChangeableParameters.Add(configurationParameter.DeepCopy());
          }
        }
      }
    }

    private List<ConnectionProfile> GetChoosedProfiles(
      TransceiverType type,
      DeviceModelTags? dTags,
      ProfileTypeTags? tTags)
    {
      return this.GetChoosedProfiles(this.FilteredConnectionProfiles, type, dTags, tTags);
    }

    private List<ConnectionProfile> GetChoosedProfiles(
      List<ConnectionProfile> inputProfiles,
      TransceiverType type,
      DeviceModelTags? dTags,
      ProfileTypeTags? tTags)
    {
      string str = (string) null;
      if (type != 0)
      {
        switch (type)
        {
          case TransceiverType.Listener:
            str = "Listener";
            break;
          case TransceiverType.Reader:
            str = "Reader";
            break;
          case TransceiverType.Receiver:
            str = "Receiver";
            break;
          default:
            throw new Exception("Unknown TransceiverType");
        }
      }
      else if (!dTags.HasValue && !tTags.HasValue)
        return inputProfiles;
      List<ConnectionProfileParameter> profileParameterList1 = (List<ConnectionProfileParameter>) null;
      bool flag1 = false;
      if (dTags.HasValue)
      {
        DeviceModelTags? nullable1 = dTags;
        DeviceModelTags deviceModelTags1 = DeviceModelTags.Undefined | DeviceModelTags.Radio2 | DeviceModelTags.Radio3 | DeviceModelTags.MBus | DeviceModelTags.wMBus | DeviceModelTags.LoRa;
        if (nullable1.GetValueOrDefault() == deviceModelTags1 & nullable1.HasValue)
        {
          flag1 = true;
        }
        else
        {
          profileParameterList1 = new List<ConnectionProfileParameter>();
          DeviceModelTags? nullable2 = dTags;
          nullable1 = nullable2.HasValue ? new DeviceModelTags?(nullable2.GetValueOrDefault() & DeviceModelTags.LoRa) : new DeviceModelTags?();
          DeviceModelTags deviceModelTags2 = DeviceModelTags.None;
          if (!(nullable1.GetValueOrDefault() == deviceModelTags2 & nullable1.HasValue))
            profileParameterList1.Add(ConnectionProfileParameter.LoRa);
          nullable2 = dTags;
          nullable1 = nullable2.HasValue ? new DeviceModelTags?(nullable2.GetValueOrDefault() & DeviceModelTags.Radio2) : new DeviceModelTags?();
          DeviceModelTags deviceModelTags3 = DeviceModelTags.None;
          if (!(nullable1.GetValueOrDefault() == deviceModelTags3 & nullable1.HasValue))
            profileParameterList1.Add(ConnectionProfileParameter.Radio2);
          nullable2 = dTags;
          nullable1 = nullable2.HasValue ? new DeviceModelTags?(nullable2.GetValueOrDefault() & DeviceModelTags.Radio3) : new DeviceModelTags?();
          DeviceModelTags deviceModelTags4 = DeviceModelTags.None;
          if (!(nullable1.GetValueOrDefault() == deviceModelTags4 & nullable1.HasValue))
            profileParameterList1.Add(ConnectionProfileParameter.Radio3);
          nullable2 = dTags;
          nullable1 = nullable2.HasValue ? new DeviceModelTags?(nullable2.GetValueOrDefault() & DeviceModelTags.MBus) : new DeviceModelTags?();
          DeviceModelTags deviceModelTags5 = DeviceModelTags.None;
          if (!(nullable1.GetValueOrDefault() == deviceModelTags5 & nullable1.HasValue))
            profileParameterList1.Add(ConnectionProfileParameter.MBus);
          nullable2 = dTags;
          nullable1 = nullable2.HasValue ? new DeviceModelTags?(nullable2.GetValueOrDefault() & DeviceModelTags.wMBus) : new DeviceModelTags?();
          DeviceModelTags deviceModelTags6 = DeviceModelTags.None;
          if (!(nullable1.GetValueOrDefault() == deviceModelTags6 & nullable1.HasValue))
            profileParameterList1.Add(ConnectionProfileParameter.wMBus);
          nullable2 = dTags;
          nullable1 = nullable2.HasValue ? new DeviceModelTags?(nullable2.GetValueOrDefault() & DeviceModelTags.SystemDevice) : new DeviceModelTags?();
          DeviceModelTags deviceModelTags7 = DeviceModelTags.None;
          if (!(nullable1.GetValueOrDefault() == deviceModelTags7 & nullable1.HasValue))
            profileParameterList1.Add(ConnectionProfileParameter.SystemDevice);
        }
      }
      List<ConnectionProfileParameter> profileParameterList2 = (List<ConnectionProfileParameter>) null;
      if (tTags.HasValue)
      {
        profileParameterList2 = new List<ConnectionProfileParameter>();
        ProfileTypeTags? nullable3 = tTags;
        ProfileTypeTags? nullable4 = nullable3.HasValue ? new ProfileTypeTags?(nullable3.GetValueOrDefault() & ProfileTypeTags.JobManager) : new ProfileTypeTags?();
        ProfileTypeTags profileTypeTags1 = ProfileTypeTags.None;
        if (!(nullable4.GetValueOrDefault() == profileTypeTags1 & nullable4.HasValue))
          profileParameterList2.Add(ConnectionProfileParameter.JobManager);
        nullable3 = tTags;
        nullable4 = nullable3.HasValue ? new ProfileTypeTags?(nullable3.GetValueOrDefault() & ProfileTypeTags.Scanning) : new ProfileTypeTags?();
        ProfileTypeTags profileTypeTags2 = ProfileTypeTags.None;
        if (!(nullable4.GetValueOrDefault() == profileTypeTags2 & nullable4.HasValue))
          profileParameterList2.Add(ConnectionProfileParameter.Scanning);
      }
      List<ConnectionProfile> choosedProfiles = new List<ConnectionProfile>();
      foreach (ConnectionProfile inputProfile in inputProfiles)
      {
        if (str == null || inputProfile.CombinedParameters.ContainsKey(ConnectionProfileParameter.TransceiverType) && !(inputProfile.CombinedParameters[ConnectionProfileParameter.TransceiverType] != str))
        {
          if (profileParameterList1 != null)
          {
            bool flag2 = true;
            foreach (ConnectionProfileParameter key in profileParameterList1)
            {
              if (inputProfile.CombinedParameters.ContainsKey(key))
              {
                flag2 = false;
                break;
              }
            }
            if (flag2)
              continue;
          }
          if (profileParameterList2 != null)
          {
            bool flag3 = true;
            foreach (ConnectionProfileParameter key in profileParameterList2)
            {
              if (inputProfile.CombinedParameters.ContainsKey(key))
              {
                flag3 = false;
                break;
              }
            }
            if (flag3)
              continue;
          }
          if (!flag1 || !inputProfile.CombinedParameters.ContainsKey(ConnectionProfileParameter.SystemDevice))
            choosedProfiles.Add(inputProfile);
        }
      }
      return choosedProfiles;
    }

    public List<DeviceGroup> GetDeviceGroups()
    {
      List<ConnectionProfile> profiles = this.GetConnectionProfiles();
      return profiles == null ? (List<DeviceGroup>) null : this.deviceGroups.FindAll((Predicate<DeviceGroup>) (x => profiles.Exists((Predicate<ConnectionProfile>) (y => x.DeviceGroupID == y.DeviceModel.DeviceGroup.DeviceGroupID))));
    }

    public List<DeviceModel> GetDeviceModels()
    {
      return this.GetDeviceModels(TransceiverType.None, (EquipmentModel) null, new DeviceModelTags?());
    }

    public List<DeviceModel> GetDeviceModels(DeviceModelTags tags)
    {
      return this.GetDeviceModels(TransceiverType.None, (EquipmentModel) null, new DeviceModelTags?(tags));
    }

    public List<DeviceModel> GetDeviceModels(ConnectionProfileParameter requiredDeviceParameter)
    {
      return this.GetDeviceModels(new List<ConnectionProfileParameter>()
      {
        requiredDeviceParameter
      });
    }

    public List<DeviceModel> GetDeviceModels(
      List<ConnectionProfileParameter> requiredDeviceParameters)
    {
      List<DeviceModel> source = new List<DeviceModel>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (source.FirstOrDefault<DeviceModel>((Func<DeviceModel, bool>) (x => x.DeviceModelID == theProfile.DeviceModel.DeviceModelID)) != null)
          source.Add(theProfile.DeviceModel);
      }
      List<DeviceModel> deviceModels = new List<DeviceModel>();
      foreach (DeviceModel deviceModel in deviceModels)
      {
        bool flag = true;
        foreach (ConnectionProfileParameter requiredDeviceParameter in requiredDeviceParameters)
        {
          if (!deviceModel.Parameters.ContainsKey(requiredDeviceParameter))
          {
            flag = false;
            break;
          }
        }
        if (flag)
          deviceModels.Add(deviceModel.DeepCopy());
      }
      return deviceModels;
    }

    public List<DeviceModel> GetDeviceModels(EquipmentModel equipment, DeviceModelTags? tags)
    {
      return this.GetDeviceModels(TransceiverType.None, equipment, tags);
    }

    public List<DeviceModel> GetDeviceModels(DeviceModelTags tags, TransceiverType type)
    {
      return this.GetDeviceModels(type, (EquipmentModel) null, new DeviceModelTags?(tags));
    }

    public List<DeviceModel> GetDeviceModels(DeviceGroup deviceGroup)
    {
      List<DeviceModel> deviceModels = this.GetDeviceModels();
      if (deviceGroup == null)
        return deviceModels;
      return deviceModels?.FindAll((Predicate<DeviceModel>) (x => x.DeviceGroup.DeviceGroupID == deviceGroup.DeviceGroupID));
    }

    public List<DeviceModel> GetDeviceModels(TransceiverType type, EquipmentModel equipment)
    {
      return this.GetDeviceModels(type, equipment, new DeviceModelTags?());
    }

    public List<DeviceModel> GetDeviceModels(EquipmentModel equipment)
    {
      return this.GetDeviceModels(TransceiverType.None, equipment, new DeviceModelTags?());
    }

    public List<DeviceModel> GetDeviceModels(TransceiverType transceiverType)
    {
      return this.GetDeviceModels(transceiverType, (EquipmentModel) null, new DeviceModelTags?());
    }

    public DeviceModel GetDeviceModel(string name)
    {
      if (string.IsNullOrEmpty(name))
        return (DeviceModel) null;
      return this.GetDeviceModels()?.Find((Predicate<DeviceModel>) (x => x.Name == name));
    }

    public DeviceModel GetDeviceModel(int deviceModelID)
    {
      return this.GetDeviceModels()?.Find((Predicate<DeviceModel>) (x => x.DeviceModelID == deviceModelID));
    }

    public List<DeviceModel> GetDeviceModels(
      TransceiverType type,
      EquipmentModel equipment,
      DeviceModelTags? tags)
    {
      List<DeviceModel> source = new List<DeviceModel>();
      foreach (ConnectionProfile choosedProfile in this.GetChoosedProfiles(type, tags, new ProfileTypeTags?()))
      {
        ConnectionProfile theProfile = choosedProfile;
        if ((equipment == null || theProfile.EquipmentModel.EquipmentModelID == equipment.EquipmentModelID) && source.FirstOrDefault<DeviceModel>((Func<DeviceModel, bool>) (x => x.DeviceModelID == theProfile.DeviceModel.DeviceModelID)) == null)
          source.Add(theProfile.DeviceModel.DeepCopy());
      }
      return source;
    }

    public List<DeviceModel> GetDeviceModels(EquipmentModel equipmentModel, ProfileType profileType)
    {
      if (equipmentModel == null)
        throw new ArgumentNullException(nameof (equipmentModel));
      if (profileType == null)
        throw new ArgumentNullException(nameof (profileType));
      List<DeviceModel> source = new List<DeviceModel>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (theProfile.EquipmentModel.EquipmentModelID == equipmentModel.EquipmentModelID && theProfile.ProfileType.ProfileTypeID == profileType.ProfileTypeID && source.FirstOrDefault<DeviceModel>((Func<DeviceModel, bool>) (x => x.DeviceModelID == theProfile.DeviceModel.DeviceModelID)) == null)
          source.Add(theProfile.DeviceModel.DeepCopy());
      }
      return source;
    }

    public List<DeviceModel> GetDeviceModels(ProfileType profileType)
    {
      if (profileType == null)
        throw new ArgumentNullException(nameof (profileType));
      List<DeviceModel> source = new List<DeviceModel>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (theProfile.ProfileType.ProfileTypeID == profileType.ProfileTypeID && source.FirstOrDefault<DeviceModel>((Func<DeviceModel, bool>) (x => x.DeviceModelID == theProfile.DeviceModel.DeviceModelID)) == null)
          source.Add(theProfile.DeviceModel.DeepCopy());
      }
      return source;
    }

    public List<ConnectionProfile> GetConnectionProfiles(DeviceModel model)
    {
      return this.GetConnectionProfiles(model, (EquipmentModel) null);
    }

    public List<ConnectionProfile> GetConnectionProfiles(
      DeviceModel model,
      EquipmentModel equipment)
    {
      if (model == null)
        return this.GetConnectionProfiles(equipment);
      List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles();
      if (connectionProfiles == null)
        return (List<ConnectionProfile>) null;
      if (model != null && equipment != null)
        return connectionProfiles.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == model.DeviceModelID && x.EquipmentModel.EquipmentModelID == equipment.EquipmentModelID));
      if (model != null)
        return connectionProfiles.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == model.DeviceModelID));
      return equipment != null ? connectionProfiles.FindAll((Predicate<ConnectionProfile>) (x => x.EquipmentModel.EquipmentModelID == equipment.EquipmentModelID)) : connectionProfiles;
    }

    public List<ConnectionProfile> GetConnectionProfiles(
      DeviceModel model,
      EquipmentModel equipment,
      TransceiverType type)
    {
      List<ConnectionProfile> choosedProfiles = this.GetChoosedProfiles(type, new DeviceModelTags?(), new ProfileTypeTags?());
      if (choosedProfiles == null)
        return (List<ConnectionProfile>) null;
      if (model != null && equipment != null)
        return choosedProfiles.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == model.DeviceModelID && x.EquipmentModel.EquipmentModelID == equipment.EquipmentModelID));
      if (model != null)
        return choosedProfiles.FindAll((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == model.DeviceModelID));
      return equipment != null ? choosedProfiles.FindAll((Predicate<ConnectionProfile>) (x => x.EquipmentModel.EquipmentModelID == equipment.EquipmentModelID)) : choosedProfiles;
    }

    private List<ConnectionProfile> GetConnectionProfiles(
      TransceiverType type,
      EquipmentModel equipment)
    {
      if (equipment == null)
        return this.GetConnectionProfiles(type);
      return this.GetChoosedProfiles(type, new DeviceModelTags?(), new ProfileTypeTags?())?.FindAll((Predicate<ConnectionProfile>) (x => x.EquipmentModel.EquipmentModelID == equipment.EquipmentModelID));
    }

    private List<ConnectionProfile> GetConnectionProfiles(TransceiverType type, DeviceModel model)
    {
      List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles(model);
      if (connectionProfiles == null)
        return (List<ConnectionProfile>) null;
      return type == TransceiverType.None ? connectionProfiles : connectionProfiles.FindAll((Predicate<ConnectionProfile>) (x => x.ConnectionSettings.TransceiverType == type));
    }

    private List<ConnectionProfile> GetConnectionProfiles(EquipmentModel equipment)
    {
      if (equipment == null)
        return this.GetConnectionProfiles();
      return this.GetConnectionProfiles()?.FindAll((Predicate<ConnectionProfile>) (x => x.EquipmentModel.EquipmentModelID == equipment.EquipmentModelID));
    }

    public List<ConnectionProfile> GetConnectionProfiles(TransceiverType type)
    {
      return this.GetChoosedProfiles(type, new DeviceModelTags?(), new ProfileTypeTags?());
    }

    public List<ConnectionProfile> GetConnectionProfiles() => this.FilteredConnectionProfiles;

    public ConnectionProfile GetConnectionProfile(int connectionProfileID)
    {
      return this.FilteredConnectionProfiles.Find((Predicate<ConnectionProfile>) (x => x.ConnectionProfileID == connectionProfileID))?.DeepCopy();
    }

    public ConnectionProfile GetConnectionProfile(
      DeviceModel deviceModel,
      EquipmentModel equipmentModel,
      ProfileType profileType)
    {
      if (deviceModel == null)
        throw new NullReferenceException(nameof (deviceModel));
      if (equipmentModel == null)
        throw new NullReferenceException(nameof (equipmentModel));
      if (profileType == null)
        throw new NullReferenceException(nameof (profileType));
      return this.GetConnectionProfiles()?.Find((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == deviceModel.DeviceModelID && x.EquipmentModel.EquipmentModelID == equipmentModel.EquipmentModelID && x.ProfileType.Name == profileType.Name))?.DeepCopy();
    }

    public ConnectionAdjuster GetConnectionAdjuster(
      DeviceModel deviceModel,
      EquipmentModel equipmentModel,
      ProfileType profileType)
    {
      if (deviceModel == null)
        throw new NullReferenceException(nameof (deviceModel));
      if (equipmentModel == null)
        throw new NullReferenceException(nameof (equipmentModel));
      if (profileType == null)
        throw new NullReferenceException(nameof (profileType));
      List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles();
      if (connectionProfiles == null)
        return (ConnectionAdjuster) null;
      ConnectionProfile connectionProfile = connectionProfiles.Find((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == deviceModel.DeviceModelID && x.EquipmentModel.EquipmentModelID == equipmentModel.EquipmentModelID && x.ProfileType.Name == profileType.Name));
      if (connectionProfile == null)
        throw new NullReferenceException("profile not selected by defined filter");
      List<ChangeableParameter> changeableParameterList = new List<ChangeableParameter>();
      foreach (ChangeableParameter changeableParameter in connectionProfile.ChangeableParameters)
        changeableParameterList.Add(changeableParameter.DeepCopy());
      this.IncludePresettings(changeableParameterList, deviceModel.ChangeableParameters);
      this.IncludePresettings(changeableParameterList, equipmentModel.ChangeableParameters);
      this.IncludePresettings(changeableParameterList, profileType.ChangeableParameters);
      foreach (KeyValuePair<string, string> setupParameter in connectionProfile.ConnectionSettings.SetupParameterList)
      {
        KeyValuePair<string, string> theParam = setupParameter;
        if (changeableParameterList.FirstOrDefault<ChangeableParameter>((Func<ChangeableParameter, bool>) (x => x.Key == theParam.Key)) == null)
        {
          ChangeableParameter changeableParameter1 = ReadoutConfigFunctions.DbData.ChangableParameterByName[theParam.Key];
          if (changeableParameter1.ParameterEnvironment == null || !changeableParameter1.ParameterEnvironment.Contains(ConfigurationParameterEnvironment.Static) && !changeableParameter1.ParameterEnvironment.Contains(ConfigurationParameterEnvironment.UI))
          {
            ChangeableParameter changeableParameter2 = changeableParameter1.DeepCopy();
            changeableParameter2.Value = theParam.Value;
            changeableParameterList.Add(changeableParameter2);
          }
        }
      }
      return new ConnectionAdjuster(connectionProfile.ConnectionProfileID, connectionProfile.DeviceModel.Name + "_" + connectionProfile.EquipmentModel.Name + "_" + connectionProfile.ProfileType.Name, changeableParameterList);
    }

    private void IncludePresettings(
      List<ChangeableParameter> resultList,
      List<ChangeableParameter> presetList)
    {
      if (presetList == null)
        return;
      foreach (ChangeableParameter preset in presetList)
      {
        ChangeableParameter presetParameter = preset;
        ChangeableParameter changeableParameter = resultList.FirstOrDefault<ChangeableParameter>((Func<ChangeableParameter, bool>) (x => x.Key == presetParameter.Key));
        if (changeableParameter != null)
          changeableParameter.Value = presetParameter.Value;
      }
    }

    public List<EquipmentGroup> GetEquipmentGroups(DeviceModel deviceModel)
    {
      List<EquipmentModel> equipmentModels = this.GetEquipmentModels(deviceModel);
      if (equipmentModels == null)
        return (List<EquipmentGroup>) null;
      return this.GetEquipmentGroups()?.FindAll((Predicate<EquipmentGroup>) (x => equipmentModels.Exists((Predicate<EquipmentModel>) (y => y.EquipmentGroup.EquipmentGroupID == x.EquipmentGroupID))));
    }

    public List<EquipmentGroup> GetEquipmentGroups()
    {
      List<ConnectionProfile> profiles = this.GetConnectionProfiles();
      return profiles == null ? (List<EquipmentGroup>) null : this.equipmentGroups.FindAll((Predicate<EquipmentGroup>) (x => profiles.Exists((Predicate<ConnectionProfile>) (y => x.EquipmentGroupID == y.EquipmentModel.EquipmentGroup.EquipmentGroupID))));
    }

    public EquipmentModel GetEquipmentModel(int equipmentModelID)
    {
      return this.GetEquipmentModels()?.Find((Predicate<EquipmentModel>) (x => x.EquipmentModelID == equipmentModelID))?.DeepCopy();
    }

    public List<EquipmentModel> GetEquipmentModels() => this.CreateDeepCopy(this.equipmentModels);

    public List<EquipmentModel> GetEquipmentModels(DeviceModel deviceModel)
    {
      if (deviceModel == null)
        throw new ArgumentNullException(nameof (deviceModel));
      List<EquipmentModel> source = new List<EquipmentModel>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (theProfile.DeviceModel.DeviceModelID == deviceModel.DeviceModelID && source.FirstOrDefault<EquipmentModel>((Func<EquipmentModel, bool>) (x => x.EquipmentModelID == theProfile.EquipmentModel.EquipmentModelID)) == null)
          source.Add(theProfile.EquipmentModel.DeepCopy());
      }
      return source;
    }

    public List<EquipmentModel> GetEquipmentModels(ProfileType profileType)
    {
      if (profileType == null)
        throw new ArgumentNullException(nameof (profileType));
      List<EquipmentModel> source = new List<EquipmentModel>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (theProfile.ProfileType.ProfileTypeID == profileType.ProfileTypeID && source.FirstOrDefault<EquipmentModel>((Func<EquipmentModel, bool>) (x => x.EquipmentModelID == theProfile.EquipmentModel.EquipmentModelID)) == null)
          source.Add(theProfile.EquipmentModel.DeepCopy());
      }
      return source;
    }

    public List<EquipmentModel> GetEquipmentModels(ProfileType profileType, DeviceModel deviceModel)
    {
      if (profileType == null)
        throw new ArgumentNullException(nameof (profileType));
      if (deviceModel == null)
        throw new ArgumentNullException(nameof (deviceModel));
      List<EquipmentModel> source = new List<EquipmentModel>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (theProfile.ProfileType.ProfileTypeID == profileType.ProfileTypeID && theProfile.DeviceModel.DeviceModelID == deviceModel.DeviceModelID && source.FirstOrDefault<EquipmentModel>((Func<EquipmentModel, bool>) (x => x.EquipmentModelID == theProfile.EquipmentModel.EquipmentModelID)) == null)
          source.Add(theProfile.EquipmentModel.DeepCopy());
      }
      return source;
    }

    public List<EquipmentModel> GetEquipmentModels(List<ConnectionProfile> profiles)
    {
      List<EquipmentModel> equipmentModels = this.GetEquipmentModels();
      if (equipmentModels == null)
        return (List<EquipmentModel>) null;
      return profiles == null ? equipmentModels : this.CreateDeepCopy(equipmentModels.FindAll((Predicate<EquipmentModel>) (x => profiles.Exists((Predicate<ConnectionProfile>) (y => y.EquipmentModel.EquipmentModelID == x.EquipmentModelID)))));
    }

    public List<EquipmentModel> GetEquipmentModels(EquipmentGroup equipmentGroup)
    {
      return this.GetEquipmentModels(equipmentGroup, (DeviceModel) null);
    }

    public List<EquipmentModel> GetEquipmentModels(
      EquipmentGroup equipmentGroup,
      DeviceModel deviceModel)
    {
      List<EquipmentModel> equipmentModels = this.GetEquipmentModels();
      if (equipmentModels == null)
        return (List<EquipmentModel>) null;
      if (equipmentGroup == null && deviceModel == null)
        return this.CreateDeepCopy(equipmentModels);
      if (equipmentGroup != null && deviceModel == null)
        return this.CreateDeepCopy(equipmentModels.FindAll((Predicate<EquipmentModel>) (x => x.EquipmentGroup.EquipmentGroupID == equipmentGroup.EquipmentGroupID)));
      List<ConnectionProfile> profiles = this.GetConnectionProfiles(deviceModel);
      if (profiles == null)
        return (List<EquipmentModel>) null;
      if (equipmentGroup == null && deviceModel != null)
        return this.GetEquipmentModels(profiles);
      return equipmentGroup != null && deviceModel != null ? this.CreateDeepCopy(equipmentModels.FindAll((Predicate<EquipmentModel>) (x => x.EquipmentGroup.EquipmentGroupID == equipmentGroup.EquipmentGroupID && profiles.Exists((Predicate<ConnectionProfile>) (y => y.EquipmentModel.EquipmentModelID == x.EquipmentModelID))))) : (List<EquipmentModel>) null;
    }

    public bool ExistsConnectionProfile(DeviceModel deviceModel, ProfileType profileType)
    {
      List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles();
      return connectionProfiles != null && connectionProfiles.Exists((Predicate<ConnectionProfile>) (x => x.DeviceModel.DeviceModelID == deviceModel.DeviceModelID && x.ProfileType.Name == profileType.Name));
    }

    public List<ProfileType> GetProfileTypes()
    {
      List<ProfileType> source = new List<ProfileType>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (source.FirstOrDefault<ProfileType>((Func<ProfileType, bool>) (x => x.ProfileTypeID == theProfile.ProfileType.ProfileTypeID)) == null)
          source.Add(theProfile.ProfileType.DeepCopy());
      }
      return source;
    }

    public List<ProfileType> GetProfileTypes(EquipmentModel equipmentModel)
    {
      if (equipmentModel == null)
        throw new ArgumentNullException(nameof (equipmentModel));
      List<ProfileType> source = new List<ProfileType>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (theProfile.EquipmentModel.EquipmentModelID == equipmentModel.EquipmentModelID && source.FirstOrDefault<ProfileType>((Func<ProfileType, bool>) (x => x.ProfileTypeID == theProfile.ProfileType.ProfileTypeID)) == null)
          source.Add(theProfile.ProfileType.DeepCopy());
      }
      return source;
    }

    public List<ProfileType> GetProfileTypes(DeviceModel deviceModel)
    {
      if (deviceModel == null)
        throw new ArgumentNullException(nameof (deviceModel));
      List<ProfileType> source = new List<ProfileType>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (theProfile.DeviceModel.DeviceModelID == deviceModel.DeviceModelID && source.FirstOrDefault<ProfileType>((Func<ProfileType, bool>) (x => x.ProfileTypeID == theProfile.ProfileType.ProfileTypeID)) == null)
          source.Add(theProfile.ProfileType.DeepCopy());
      }
      return source;
    }

    public List<ProfileType> GetProfileTypes(DeviceModel deviceModel, EquipmentModel equipmentModel)
    {
      if (deviceModel == null)
        throw new ArgumentNullException(nameof (deviceModel));
      if (equipmentModel == null)
        throw new ArgumentNullException(nameof (equipmentModel));
      List<ProfileType> source = new List<ProfileType>();
      foreach (ConnectionProfile connectionProfile in this.FilteredConnectionProfiles)
      {
        ConnectionProfile theProfile = connectionProfile;
        if (theProfile.EquipmentModel.EquipmentModelID == equipmentModel.EquipmentModelID && theProfile.DeviceModel.DeviceModelID == deviceModel.DeviceModelID && source.FirstOrDefault<ProfileType>((Func<ProfileType, bool>) (x => x.ProfileTypeID == theProfile.ProfileType.ProfileTypeID)) == null)
          source.Add(theProfile.ProfileType.DeepCopy());
      }
      return source;
    }

    public List<ProfileType> GetProfileTypes(
      DeviceModel deviceModel,
      EquipmentModel equipmentModel,
      ProfileTypeTags? tags)
    {
      List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles(deviceModel, equipmentModel);
      if (connectionProfiles == null || connectionProfiles.Count == 0)
        return (List<ProfileType>) null;
      List<ConnectionProfile> choosedProfiles = this.GetChoosedProfiles(connectionProfiles, TransceiverType.None, new DeviceModelTags?(), tags);
      List<ProfileType> result = new List<ProfileType>();
      foreach (ConnectionProfile connectionProfile in choosedProfiles)
      {
        ConnectionProfile profile = connectionProfile;
        if (!result.Exists((Predicate<ProfileType>) (x => x.Name == profile.ProfileType.Name)))
          result.Add(profile.ProfileType);
      }
      return this.CreateDeepCopy(result);
    }

    public List<ProfileType> GetProfileTypes(
      DeviceModel deviceModel,
      EquipmentModel equipmentModel,
      TransceiverType type)
    {
      List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles(deviceModel, equipmentModel, type);
      if (connectionProfiles == null || connectionProfiles.Count == 0)
        return (List<ProfileType>) null;
      List<ProfileType> result = new List<ProfileType>();
      foreach (ConnectionProfile connectionProfile in connectionProfiles)
      {
        ConnectionProfile profile = connectionProfile;
        if (!result.Exists((Predicate<ProfileType>) (x => x.Name == profile.ProfileType.Name)))
          result.Add(profile.ProfileType);
      }
      return this.CreateDeepCopy(result);
    }

    public List<ProfileType> GetProfileTypes(ZENNER.CommonLibrary.Entities.Meter meter)
    {
      return this.GetProfileTypes(new List<ZENNER.CommonLibrary.Entities.Meter>()
      {
        meter
      }, TransceiverType.None);
    }

    public List<ProfileType> GetProfileTypes(List<ZENNER.CommonLibrary.Entities.Meter> meters)
    {
      return this.GetProfileTypes(meters, TransceiverType.None);
    }

    public List<ProfileType> GetProfileTypes(
      List<ZENNER.CommonLibrary.Entities.Meter> meters,
      EquipmentModel equipmentModel,
      ProfileTypeTags? tags)
    {
      if (meters == null)
        return (List<ProfileType>) null;
      List<ProfileType> result = new List<ProfileType>();
      foreach (ZENNER.CommonLibrary.Entities.Meter meter in meters)
      {
        List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles(meter.DeviceModel, equipmentModel);
        if (connectionProfiles != null && connectionProfiles.Count != 0)
        {
          foreach (ConnectionProfile choosedProfile in this.GetChoosedProfiles(connectionProfiles, TransceiverType.None, new DeviceModelTags?(), tags))
          {
            ConnectionProfile profile = choosedProfile;
            if (!result.Exists((Predicate<ProfileType>) (x => x.ProfileTypeID == profile.ProfileType.ProfileTypeID)))
              result.Add(profile.ProfileType);
          }
        }
      }
      return this.CreateDeepCopy(result);
    }

    public List<ProfileType> GetProfileTypes(
      List<ZENNER.CommonLibrary.Entities.Meter> meters,
      EquipmentModel equipmentModel,
      TransceiverType type)
    {
      if (meters == null)
        return (List<ProfileType>) null;
      List<ProfileType> result = new List<ProfileType>();
      foreach (ZENNER.CommonLibrary.Entities.Meter meter in meters)
      {
        List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles(meter.DeviceModel, equipmentModel, type);
        if (connectionProfiles != null && connectionProfiles.Count != 0)
        {
          foreach (ConnectionProfile connectionProfile in connectionProfiles)
          {
            ConnectionProfile profile = connectionProfile;
            if (!result.Exists((Predicate<ProfileType>) (x => x.Name == profile.ProfileType.Name)))
              result.Add(profile.ProfileType);
          }
        }
      }
      return this.CreateDeepCopy(result);
    }

    public List<ProfileType> GetProfileTypes(List<ZENNER.CommonLibrary.Entities.Meter> meters, TransceiverType type)
    {
      if (meters == null)
        return (List<ProfileType>) null;
      List<ProfileType> result = new List<ProfileType>();
      foreach (ZENNER.CommonLibrary.Entities.Meter meter in meters)
      {
        List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles(type, meter.DeviceModel);
        if (connectionProfiles != null && connectionProfiles.Count != 0)
        {
          foreach (ConnectionProfile connectionProfile in connectionProfiles)
          {
            ConnectionProfile profile = connectionProfile;
            if (!result.Exists((Predicate<ProfileType>) (x => x.Name == profile.ProfileType.Name)))
              result.Add(profile.ProfileType);
          }
        }
      }
      return this.CreateDeepCopy(result);
    }

    public List<string> GetProfileTypes(DeviceModel deviceModel, TransceiverType type)
    {
      if (deviceModel == null)
        return (List<string>) null;
      List<ConnectionProfile> connectionProfiles = this.GetConnectionProfiles(type, deviceModel);
      if (connectionProfiles == null || connectionProfiles.Count == 0)
        return (List<string>) null;
      List<string> profileTypes = new List<string>();
      foreach (ConnectionProfile connectionProfile in connectionProfiles)
      {
        if (!profileTypes.Contains(connectionProfile.ProfileType.Name))
          profileTypes.Add(connectionProfile.ProfileType.Name);
      }
      return profileTypes;
    }

    public static void Dispose() => ReadoutConfigFunctions.Dispose();

    public DeviceModel DetermineDeviceModel(ValueIdentSet e)
    {
      if (e == null)
        return (DeviceModel) null;
      string manufacturer = string.Empty;
      string generation = string.Empty;
      bool isRadio = false;
      bool isMbus = false;
      if (e.ZDF != null)
      {
        manufacturer = ParameterService.GetParameter(e.ZDF, "MAN");
        generation = ParameterService.GetParameter(e.ZDF, "GEN");
        int num;
        if (!e.ZDF.Contains("RSSI;"))
        {
          string deviceType1 = e.DeviceType;
          DeviceTypes deviceTypes = DeviceTypes.AquaMicroRadio3;
          string str1 = deviceTypes.ToString();
          if (!(deviceType1 == str1))
          {
            string deviceType2 = e.DeviceType;
            deviceTypes = DeviceTypes.EHCA_M6_Radio3;
            string str2 = deviceTypes.ToString();
            if (!(deviceType2 == str2))
            {
              string deviceType3 = e.DeviceType;
              deviceTypes = DeviceTypes.HumiditySensor;
              string str3 = deviceTypes.ToString();
              if (!(deviceType3 == str3))
              {
                string deviceType4 = e.DeviceType;
                deviceTypes = DeviceTypes.EDC;
                string str4 = deviceTypes.ToString();
                if (!(deviceType4 == str4))
                {
                  string deviceType5 = e.DeviceType;
                  deviceTypes = DeviceTypes.MinotelContactRadio3;
                  string str5 = deviceTypes.ToString();
                  if (!(deviceType5 == str5))
                  {
                    string deviceType6 = e.DeviceType;
                    deviceTypes = DeviceTypes.PDC;
                    string str6 = deviceTypes.ToString();
                    if (!(deviceType6 == str6))
                    {
                      string deviceType7 = e.DeviceType;
                      deviceTypes = DeviceTypes.SmokeDetector;
                      string str7 = deviceTypes.ToString();
                      if (!(deviceType7 == str7))
                      {
                        string deviceType8 = e.DeviceType;
                        deviceTypes = DeviceTypes.TemperatureSensor;
                        string str8 = deviceTypes.ToString();
                        num = deviceType8 == str8 ? 1 : 0;
                        goto label_13;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        num = 1;
label_13:
        isRadio = num != 0;
        isMbus = e.ZDF.Contains("RTIME") && e.ZDF.Contains("SID") && e.ZDF.Contains("MAN") && e.ZDF.Contains("GEN") && e.ZDF.Contains("MED") && e.ZDF.Contains("RADR");
      }
      DeviceModel deviceModel = this.DetermineDeviceModel(e.SerialNumber, manufacturer, generation, isRadio, isMbus);
      if (deviceModel != null)
        deviceModel.ChangeableParameters = (List<ChangeableParameter>) null;
      return deviceModel;
    }

    public DeviceModel DetermineDeviceModel(
      string serialNumber = "",
      string manufacturer = "",
      string generation = "",
      bool isRadio = false,
      bool isMbus = false)
    {
      bool flag = manufacturer.Contains("MINOL") || manufacturer.Contains("Minol");
      if (!flag && !string.IsNullOrEmpty(manufacturer) && !string.IsNullOrEmpty(generation))
      {
        List<DeviceModel> all = this.deviceModels.FindAll((Predicate<DeviceModel>) (x => x.Manufacturer == manufacturer && x.Generation == generation));
        if (all != null && all.Count > 0)
          return all.Count > 1 && isRadio ? all.Find((Predicate<DeviceModel>) (x => x.Parameters.ContainsKey(ConnectionProfileParameter.Radio2) || x.Parameters.ContainsKey(ConnectionProfileParameter.Radio3) || x.Parameters.ContainsKey(ConnectionProfileParameter.wMBus))) : all[0];
      }
      if (!isMbus && !string.IsNullOrEmpty(serialNumber))
      {
        DeviceTypes type = NumberRanges.GetTypeOfMinolDevice(serialNumber);
        if (type != 0)
        {
          List<DeviceModel> all = this.deviceModels.FindAll((Predicate<DeviceModel>) (x => x.Medium == type.ToString()));
          if (all != null && all.Count > 0)
            return all.Count > 1 ? all.Find((Predicate<DeviceModel>) (x => x.Parameters.ContainsKey(ConnectionProfileParameter.Radio2) || x.Parameters.ContainsKey(ConnectionProfileParameter.Radio3))) ?? all[0] : all[0];
        }
      }
      if (flag)
        return this.deviceModels.Find((Predicate<DeviceModel>) (x => x.Name == "Generic Minol device"));
      return !string.IsNullOrEmpty(manufacturer) && !string.IsNullOrEmpty(generation) ? (isRadio ? this.deviceModels.Find((Predicate<DeviceModel>) (x => x.Name == "Generic wM-Bus")) : this.deviceModels.Find((Predicate<DeviceModel>) (x => x.Name == "Generic M-Bus"))) : (isMbus ? this.deviceModels.Find((Predicate<DeviceModel>) (x => x.Name == "Generic M-Bus")) : (DeviceModel) null);
    }

    public DeviceModel GetDeviceModelGenericMBus()
    {
      return this.deviceModels.Find((Predicate<DeviceModel>) (x => x.Name == "Generic M-Bus"))?.DeepCopy();
    }

    private List<DeviceModel> CreateDeepCopy(List<DeviceModel> result)
    {
      if (result == null)
        return (List<DeviceModel>) null;
      if (result.Count == 0)
        return result;
      List<DeviceModel> deepCopy = new List<DeviceModel>(result.Count);
      result.ForEach((Action<DeviceModel>) (t => deepCopy.Add(t.DeepCopy())));
      return deepCopy;
    }

    private List<EquipmentModel> CreateDeepCopy(List<EquipmentModel> result)
    {
      if (result == null)
        return (List<EquipmentModel>) null;
      if (result.Count == 0)
        return result;
      List<EquipmentModel> deepCopy = new List<EquipmentModel>(result.Count);
      result.ForEach((Action<EquipmentModel>) (t => deepCopy.Add(t.DeepCopy())));
      return deepCopy;
    }

    private List<ProfileType> CreateDeepCopy(List<ProfileType> result)
    {
      if (result == null)
        return (List<ProfileType>) null;
      if (result.Count == 0)
        return result;
      List<ProfileType> deepCopy = new List<ProfileType>(result.Count);
      result.ForEach((Action<ProfileType>) (t => deepCopy.Add(t.DeepCopy())));
      return deepCopy;
    }
  }
}


--- HandshakeStates.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.HandshakeStates
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

#nullable disable
namespace ReadoutConfiguration
{
  public enum HandshakeStates
  {
    RTS_ON_DTR_ON,
    RTS_OFF_DTR_OFF,
    RTS_ON_DTR_OFF,
    RTS_OFF_DTR_ON,
  }
}


--- LostConnectionItem.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.LostConnectionItem
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using System.Windows.Media.Imaging;

#nullable disable
namespace ReadoutConfiguration
{
  public class LostConnectionItem
  {
    public int Id { get; set; }

    public string Name { get; set; }

    public BitmapFrame ItemImage { get; set; }

    public LostConnectionItem(int Id, string Name)
    {
      this.Id = Id;
      this.Name = Name;
    }
  }
}


--- LostConnectionSetting.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.LostConnectionSetting
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

#nullable disable
namespace ReadoutConfiguration
{
  public class LostConnectionSetting
  {
    public int Id { get; set; }

    public string Name { get; set; }

    public LostConnectionSetting(int Id, string Name)
    {
      this.Id = Id;
      this.Name = Name;
    }
  }
}


--- LostItems.xaml.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.LostItems
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using GmmDbLib;
using StartupLib;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;
using System.Windows.Media.Imaging;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace ReadoutConfiguration
{
  public partial class LostItems : Window, IComponentConnector
  {
    internal GmmCorporateControl gmmCorporateControl1;
    internal DockPanel DockPanalLostProfiles;
    internal TextBlock TextBlockLostItems;
    internal DataGrid DataGridLostItems;
    internal TextBlock TextBlockLostSettings;
    internal DataGrid DataGridLostSetings;
    internal Button ButtonDeleteSelected;
    private bool _contentLoaded;

    public ObservableCollection<LostConnectionItem> LostConnectionItems { get; set; }

    public ObservableCollection<LostConnectionSetting> LostConnectionSettings { get; set; }

    public LostItems()
    {
      this.InitializeComponent();
      this.LostConnectionItems = new ObservableCollection<LostConnectionItem>();
      this.LostConnectionSettings = new ObservableCollection<LostConnectionSetting>();
    }

    private void Window_Loaded(object sender, RoutedEventArgs e) => this.LoadData();

    private void LoadData()
    {
      this.LostConnectionItems.Clear();
      this.LostConnectionSettings.Clear();
      DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection();
      DbDataAdapter dataAdapter1 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM ConnectionProfiles", newConnection);
      Schema.ConnectionProfilesDataTable profilesDataTable = new Schema.ConnectionProfilesDataTable();
      dataAdapter1.Fill((DataTable) profilesDataTable);
      SortedList<int, int> sortedList1 = new SortedList<int, int>();
      SortedList<int, int> sortedList2 = new SortedList<int, int>();
      foreach (Schema.ConnectionProfilesRow connectionProfilesRow in (TypedTableBase<Schema.ConnectionProfilesRow>) profilesDataTable)
      {
        if (!sortedList1.ContainsKey(connectionProfilesRow.DeviceModelID))
          sortedList1.Add(connectionProfilesRow.DeviceModelID, 0);
        if (!sortedList1.ContainsKey(connectionProfilesRow.EquipmentModelID))
          sortedList1.Add(connectionProfilesRow.EquipmentModelID, 0);
        if (!sortedList1.ContainsKey(connectionProfilesRow.ProfileTypeID))
          sortedList1.Add(connectionProfilesRow.ProfileTypeID, 0);
        if (!sortedList2.ContainsKey(connectionProfilesRow.ConnectionSettingsID))
          sortedList2.Add(connectionProfilesRow.ConnectionSettingsID, 0);
      }
      DbDataAdapter dataAdapter2 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM ConnectionItems", newConnection);
      Schema.ConnectionItemsDataTable connectionItemsDataTable = new Schema.ConnectionItemsDataTable();
      dataAdapter2.Fill((DataTable) connectionItemsDataTable);
      foreach (Schema.ConnectionItemsRow connectionItemsRow in (TypedTableBase<Schema.ConnectionItemsRow>) connectionItemsDataTable)
      {
        if (!sortedList1.ContainsKey(connectionItemsRow.ItemGroupID))
          sortedList1.Add(connectionItemsRow.ItemGroupID, 0);
      }
      int num1 = 0;
      foreach (Schema.ConnectionItemsRow connectionItemsRow in (TypedTableBase<Schema.ConnectionItemsRow>) connectionItemsDataTable)
      {
        if (!sortedList1.ContainsKey(connectionItemsRow.ConnectionItemID))
        {
          ++num1;
          LostConnectionItem lostConnectionItem = new LostConnectionItem(connectionItemsRow.ConnectionItemID, connectionItemsRow.Name);
          if (!connectionItemsRow.IsImageIDNull())
          {
            DbDataAdapter dataAdapter3 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT * FROM GmmImages WHERE ImageID = " + connectionItemsRow.ImageID.ToString(), newConnection);
            Schema.GmmImagesDataTable gmmImagesDataTable = new Schema.GmmImagesDataTable();
            dataAdapter3.Fill((DataTable) gmmImagesDataTable);
            if (gmmImagesDataTable.Rows.Count == 1)
            {
              PngBitmapDecoder pngBitmapDecoder = new PngBitmapDecoder((Stream) new MemoryStream(gmmImagesDataTable[0].ImageData), BitmapCreateOptions.PreservePixelFormat, BitmapCacheOption.Default);
              lostConnectionItem.ItemImage = pngBitmapDecoder.Frames[0];
            }
          }
          this.LostConnectionItems.Add(lostConnectionItem);
        }
      }
      this.TextBlockLostItems.Text = "Number of ConnectionItems without reference: " + num1.ToString();
      DbDataAdapter dataAdapter4 = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter("SELECT DISTINCT ConnectionSettingsID FROM ConnectionSettings", newConnection);
      DataTable dataTable = new DataTable();
      dataAdapter4.Fill(dataTable);
      int num2 = 0;
      for (int index = 0; index < dataTable.Rows.Count; ++index)
      {
        int num3 = int.Parse(dataTable.Rows[index][0].ToString());
        if (!sortedList2.ContainsKey(num3))
        {
          ++num2;
          this.LostConnectionSettings.Add(new LostConnectionSetting(num3, num3.ToString()));
        }
      }
      this.TextBlockLostSettings.Text = "Number of Settings without reference: " + num2.ToString();
    }

    private void ContextMenuDeleteItem_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridLostSetings.SelectedItem != null)
        ;
    }

    private void ButtonDeleteSelected_Click(object sender, RoutedEventArgs e)
    {
      bool flag = false;
      if (this.DataGridLostItems.SelectedItems != null)
      {
        List<int> itemIds = new List<int>();
        foreach (object selectedItem in (IEnumerable) this.DataGridLostItems.SelectedItems)
        {
          if (selectedItem is LostConnectionItem)
          {
            itemIds.Add(((LostConnectionItem) selectedItem).Id);
            flag = true;
          }
        }
        ReadoutConfigFunctions.DbData.DeleteConnectionItems(itemIds);
      }
      if (this.DataGridLostSetings.SelectedItems != null)
      {
        List<int> settingIds = new List<int>();
        foreach (object selectedItem in (IEnumerable) this.DataGridLostSetings.SelectedItems)
        {
          if (selectedItem is LostConnectionSetting)
          {
            settingIds.Add(((LostConnectionSetting) selectedItem).Id);
            flag = true;
          }
        }
        ReadoutConfigFunctions.DbData.DeleteSettings(settingIds);
      }
      if (!flag)
        return;
      this.LoadData();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/ReadoutConfiguration;component/lostitems.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((FrameworkElement) target).Loaded += new RoutedEventHandler(this.Window_Loaded);
          break;
        case 2:
          ((MenuItem) target).Click += new RoutedEventHandler(this.ContextMenuDeleteItem_Click);
          break;
        case 3:
          this.gmmCorporateControl1 = (GmmCorporateControl) target;
          break;
        case 4:
          this.DockPanalLostProfiles = (DockPanel) target;
          break;
        case 5:
          this.TextBlockLostItems = (TextBlock) target;
          break;
        case 6:
          this.DataGridLostItems = (DataGrid) target;
          break;
        case 7:
          this.TextBlockLostSettings = (TextBlock) target;
          break;
        case 8:
          this.DataGridLostSetings = (DataGrid) target;
          break;
        case 9:
          this.ButtonDeleteSelected = (Button) target;
          this.ButtonDeleteSelected.Click += new RoutedEventHandler(this.ButtonDeleteSelected_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}


--- ParameterEditData.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ParameterEditData
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using System.ComponentModel;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace ReadoutConfiguration
{
  public class ParameterEditData : INotifyPropertyChanged
  {
    internal ParameterEditData.GroupFunctionChanged GroupFunctionChangedCall = (ParameterEditData.GroupFunctionChanged) null;
    private string selectedGroupFunction = ConnectionProfileFilterGroupFunctions.OR.ToString();

    public string SelectedGroup { get; set; }

    public string SelectedType { get; set; }

    public string ParameterValue { get; set; }

    public string SelectedGroupFunction
    {
      get => this.selectedGroupFunction;
      set
      {
        this.selectedGroupFunction = value;
        if (this.GroupFunctionChangedCall != null)
          this.GroupFunctionChangedCall(this);
        this.NotifyPropertyChanged(nameof (SelectedGroupFunction));
      }
    }

    public ParameterEditData(string selectedType, string parameterValue)
    {
      this.SelectedGroup = "0";
      this.SelectedType = selectedType;
      this.ParameterValue = parameterValue;
    }

    public event PropertyChangedEventHandler PropertyChanged;

    public void NotifyPropertyChanged(string propName)
    {
      if (this.PropertyChanged == null)
        return;
      this.PropertyChanged((object) this, new PropertyChangedEventArgs(propName));
    }

    public override string ToString()
    {
      return this.SelectedGroup + ";" + this.selectedGroupFunction + ";" + this.SelectedType + ";" + this.ParameterValue;
    }

    internal delegate void GroupFunctionChanged(ParameterEditData changedParam);
  }
}


--- ParameterEditDataComp.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ParameterEditDataComp
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using System.Collections.Generic;

#nullable disable
namespace ReadoutConfiguration
{
  public class ParameterEditDataComp : IComparer<ParameterEditData>
  {
    public int Compare(ParameterEditData x, ParameterEditData y)
    {
      int num1 = int.Parse(x.SelectedGroup).CompareTo(int.Parse(y.SelectedGroup));
      if (num1 != 0)
        return num1;
      if (x.SelectedType == null || y.SelectedType == null)
        return 0;
      int num2 = x.SelectedType.CompareTo(y.SelectedType);
      if (num2 != 0)
        return num2;
      return x.ParameterValue == null || y.ParameterValue == null ? 0 : x.ParameterValue.CompareTo(y.ParameterValue);
    }
  }
}


--- ParameterListEditor.xaml.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ParameterListEditor
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using CommonWPF;
using GmmDbLib;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary.Schema_Access;

#nullable disable
namespace ReadoutConfiguration
{
  public partial class ParameterListEditor : Window, IComponentConnector
  {
    private bool FilterList;
    private bool changingFunction = false;
    internal Button ButtonOk;
    internal Button ButtonAddGroup;
    internal Button ButtonAdd;
    internal Button ButtonDelete;
    internal TextBlock TextBlockUsingInfo;
    internal DataGrid DataGridParameters;
    private bool _contentLoaded;

    internal static bool EditItemParameter(int connectionItemID)
    {
      try
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("Define profile item parameters");
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          string selectSql1 = "SELECT * FROM ConnectionItems WHERE ConnectionItemID = " + connectionItemID.ToString();
          Schema.ConnectionItemsDataTable connectionItemsDataTable = new Schema.ConnectionItemsDataTable();
          DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql1, newConnection).Fill((DataTable) connectionItemsDataTable);
          if (connectionItemsDataTable.Count != 1)
            throw new Exception("ConnectionItem not found");
          string[] names = Enum.GetNames(typeof (ConnectionProfileParameter));
          int[] values = (int[]) Enum.GetValues(typeof (ConnectionProfileParameter));
          List<string> stringList = new List<string>();
          string headerText;
          if (connectionItemsDataTable[0].ItemType == "DeviceModel")
          {
            headerText = "Parameter Editor.   DeviceModel: " + connectionItemsDataTable[0].Name;
            for (int index = 0; index < names.Length; ++index)
            {
              if (values[index] < 10000 || values[index] >= 20000 && values[index] < 30000)
                stringList.Add(names[index]);
            }
          }
          else if (connectionItemsDataTable[0].ItemType == "EquipmentModel")
          {
            headerText = "Parameter Editor.   EquipmentModel: " + connectionItemsDataTable[0].Name;
            for (int index = 0; index < names.Length; ++index)
            {
              if (values[index] < 10000 || values[index] >= 30000 && values[index] < 40000)
                stringList.Add(names[index]);
            }
          }
          else
          {
            if (!(connectionItemsDataTable[0].ItemType == "ProfileType"))
              throw new Exception("Illegal item type");
            headerText = "Parameter Editor.   ProfileType: " + connectionItemsDataTable[0].Name;
            for (int index = 0; index < names.Length; ++index)
            {
              if (values[index] < 10000 || values[index] >= 40000 && values[index] < 50000)
                stringList.Add(names[index]);
            }
          }
          string selectSql2 = "SELECT * FROM ConnectionItemParameters WHERE ConnectionItemID = " + connectionItemID.ToString();
          Schema.ConnectionItemParametersDataTable parametersDataTable1 = new Schema.ConnectionItemParametersDataTable();
          DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql2, newConnection).Fill((DataTable) parametersDataTable1);
          ObservableCollection<ParameterEditData> itemParameters = new ObservableCollection<ParameterEditData>();
          foreach (Schema.ConnectionItemParametersRow itemParametersRow in (TypedTableBase<Schema.ConnectionItemParametersRow>) parametersDataTable1)
          {
            string parameterValue = (string) null;
            if (!itemParametersRow.IsParameterValueNull())
              parameterValue = itemParametersRow.ParameterValue;
            itemParameters.Add(new ParameterEditData(((ConnectionProfileParameter) itemParametersRow.ConnectionItemParameter).ToString(), parameterValue));
          }
          ParameterListEditor parameterListEditor = new ParameterListEditor(headerText, stringBuilder.ToString(), itemParameters, stringList.ToArray(), false);
          if (parameterListEditor.ShowDialog().Value)
          {
            newConnection.Open();
            DbTransaction transaction = newConnection.BeginTransaction();
            Schema.ConnectionItemParametersDataTable parametersDataTable2 = new Schema.ConnectionItemParametersDataTable();
            DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql2, newConnection, transaction, out DbCommandBuilder _);
            dataAdapter.Fill((DataTable) parametersDataTable2);
            foreach (DataRow dataRow in (TypedTableBase<Schema.ConnectionItemParametersRow>) parametersDataTable2)
              dataRow.Delete();
            dataAdapter.Update((DataTable) parametersDataTable2);
            int num = 0;
            foreach (ParameterEditData resultParameter in parameterListEditor.ResultParameters)
            {
              Schema.ConnectionItemParametersRow row = parametersDataTable2.NewConnectionItemParametersRow();
              row.ConnectionItemID = connectionItemID;
              row.ConnectionItemParameter = (int) Enum.Parse(typeof (ConnectionProfileParameter), resultParameter.SelectedType);
              row.ParameterOrder = num++;
              if (string.IsNullOrEmpty(resultParameter.ParameterValue))
                row.SetParameterValueNull();
              else
                row.ParameterValue = resultParameter.ParameterValue;
              parametersDataTable2.AddConnectionItemParametersRow(row);
            }
            dataAdapter.Update((DataTable) parametersDataTable2);
            transaction.Commit();
          }
          return true;
        }
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex);
      }
      return false;
    }

    internal static bool EditProfileParameter(int connectionProfileID, Window owner)
    {
      try
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("Define profile parameters");
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          string selectSql1 = "SELECT * FROM ConnectionProfiles WHERE ConnectionProfileID = " + connectionProfileID.ToString();
          Schema.ConnectionProfilesDataTable profilesDataTable = new Schema.ConnectionProfilesDataTable();
          DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql1, newConnection).Fill((DataTable) profilesDataTable);
          if (profilesDataTable.Count != 1)
            throw new Exception("ConnectionProfile not found");
          string headerText = "Parameter Editor.   ConnectionProfileID: " + connectionProfileID.ToString();
          string[] names = Enum.GetNames(typeof (ConnectionProfileParameter));
          int[] values = (int[]) Enum.GetValues(typeof (ConnectionProfileParameter));
          List<string> stringList = new List<string>();
          for (int index = 0; index < names.Length; ++index)
          {
            if (values[index] < 20000)
              stringList.Add(names[index]);
          }
          string selectSql2 = "SELECT * FROM ConnectionProfileParameters WHERE ConnectionProfileID = " + connectionProfileID.ToString();
          Schema.ConnectionProfileParametersDataTable parametersDataTable1 = new Schema.ConnectionProfileParametersDataTable();
          DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql2, newConnection).Fill((DataTable) parametersDataTable1);
          ObservableCollection<ParameterEditData> itemParameters = new ObservableCollection<ParameterEditData>();
          foreach (Schema.ConnectionProfileParametersRow profileParametersRow in (TypedTableBase<Schema.ConnectionProfileParametersRow>) parametersDataTable1)
          {
            string parameterValue = (string) null;
            if (!profileParametersRow.IsParameterValueNull())
              parameterValue = profileParametersRow.ParameterValue;
            itemParameters.Add(new ParameterEditData(((ConnectionProfileParameter) profileParametersRow.ConnectionProfileParameter).ToString(), parameterValue));
          }
          ParameterListEditor parameterListEditor = new ParameterListEditor(headerText, stringBuilder.ToString(), itemParameters, stringList.ToArray(), false);
          parameterListEditor.Owner = owner;
          if (parameterListEditor.ShowDialog().Value)
          {
            newConnection.Open();
            DbTransaction transaction = newConnection.BeginTransaction();
            Schema.ConnectionProfileParametersDataTable parametersDataTable2 = new Schema.ConnectionProfileParametersDataTable();
            DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql2, newConnection, transaction, out DbCommandBuilder _);
            dataAdapter.Fill((DataTable) parametersDataTable2);
            foreach (DataRow dataRow in (TypedTableBase<Schema.ConnectionProfileParametersRow>) parametersDataTable2)
              dataRow.Delete();
            dataAdapter.Update((DataTable) parametersDataTable2);
            int num = 0;
            foreach (ParameterEditData resultParameter in parameterListEditor.ResultParameters)
            {
              Schema.ConnectionProfileParametersRow row = parametersDataTable2.NewConnectionProfileParametersRow();
              row.ConnectionProfileID = connectionProfileID;
              row.ConnectionProfileParameter = (int) Enum.Parse(typeof (ConnectionProfileParameter), resultParameter.SelectedType);
              row.ParameterOrder = num++;
              if (string.IsNullOrEmpty(resultParameter.ParameterValue))
                row.SetParameterValueNull();
              else
                row.ParameterValue = resultParameter.ParameterValue;
              parametersDataTable2.AddConnectionProfileParametersRow(row);
            }
            dataAdapter.Update((DataTable) parametersDataTable2);
            transaction.Commit();
          }
          return true;
        }
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex);
      }
      return false;
    }

    internal static bool EditFilter(string name, string baseName = null)
    {
      try
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("Define profile filter");
        stringBuilder.AppendLine("Short description:");
        stringBuilder.AppendLine();
        stringBuilder.AppendLine("Define first base groups.");
        stringBuilder.AppendLine("A group is a set of following records that has the same 'Filter group' number");
        stringBuilder.AppendLine("Base groups are groups that are not used in any 'Parameter type' = '__Filter group' record.");
        stringBuilder.AppendLine("If all base groups deliver true as result then the profile is used.");
        stringBuilder.AppendLine();
        stringBuilder.AppendLine("Most filters don't need sub groups.");
        stringBuilder.AppendLine("Sub groups are used for complex logical operations.");
        stringBuilder.AppendLine();
        stringBuilder.AppendLine("Following of base groups define sub groups if necessary.");
        stringBuilder.AppendLine("A sub group is a group whose 'Filter group' number is used in any pre defined 'Parameter type' = '__Filter group' record as 'Parameter value'.");
        stringBuilder.AppendLine("The result of a sub group is used as value insude the parent group.");
        stringBuilder.AppendLine("A parent group is a base group or a sub group that has a 'Parameter type' = '__Filter group' record");
        stringBuilder.AppendLine("As sub group can use a following sub group and so on.");
        using (DbConnection newConnection = DbBasis.PrimaryDB.BaseDbConnection.GetNewConnection())
        {
          string[] names = Enum.GetNames(typeof (ConnectionProfileParameter));
          List<string> stringList = new List<string>();
          stringList.Add("__ Filter group");
          foreach (string str in names)
          {
            if (str != "None")
              stringList.Add(str);
          }
          stringList.Sort();
          ObservableCollection<ParameterEditData> itemParameters = new ObservableCollection<ParameterEditData>();
          int num1 = -1;
          if (baseName != null)
          {
            string selectSql = "SELECT * FROM ConnectionProfileFilters WHERE ConnectionProfileParameter = 0 AND ParameterValue = '" + baseName + "'";
            Schema.ConnectionProfileFiltersDataTable filtersDataTable = new Schema.ConnectionProfileFiltersDataTable();
            DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql, newConnection).Fill((DataTable) filtersDataTable);
            num1 = filtersDataTable.Count != 0 ? filtersDataTable[0].ConnectionFilterID : throw new Exception("The base filter doesn't exists.");
          }
          string selectSql1 = "SELECT * FROM ConnectionProfileFilters WHERE ConnectionProfileParameter = 0 AND ParameterValue = '" + name + "'";
          Schema.ConnectionProfileFiltersDataTable filtersDataTable1 = new Schema.ConnectionProfileFiltersDataTable();
          DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql1, newConnection).Fill((DataTable) filtersDataTable1);
          if (baseName != null)
          {
            if (filtersDataTable1.Count > 0)
              throw new Exception("The new filter exists.");
          }
          else if (filtersDataTable1.Count > 0)
            num1 = filtersDataTable1[0].ConnectionFilterID;
          if (num1 >= 0)
          {
            string selectSql2 = "SELECT * FROM ConnectionProfileFilters WHERE ConnectionFilterID = " + num1.ToString();
            Schema.ConnectionProfileFiltersDataTable filtersDataTable2 = new Schema.ConnectionProfileFiltersDataTable();
            DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql2, newConnection, out DbCommandBuilder _).Fill((DataTable) filtersDataTable2);
            foreach (Schema.ConnectionProfileFiltersRow profileFiltersRow in (TypedTableBase<Schema.ConnectionProfileFiltersRow>) filtersDataTable2)
            {
              if (profileFiltersRow.ParameterOrder != 0)
              {
                string selectedType = profileFiltersRow.ConnectionProfileParameter != 0 ? ((ConnectionProfileParameter) profileFiltersRow.ConnectionProfileParameter).ToString() : "__ Filter group";
                string parameterValue = (string) null;
                if (!profileFiltersRow.IsParameterValueNull())
                  parameterValue = profileFiltersRow.ParameterValue;
                itemParameters.Add(new ParameterEditData(selectedType, parameterValue)
                {
                  SelectedGroup = profileFiltersRow.FilterGroupNumber.ToString(),
                  SelectedGroupFunction = ((ConnectionProfileFilterGroupFunctions) profileFiltersRow.GroupFunction).ToString()
                });
              }
            }
          }
          ParameterListEditor parameterListEditor = new ParameterListEditor("Edit filter: " + name, stringBuilder.ToString(), itemParameters, stringList.ToArray(), true);
          if (parameterListEditor.ShowDialog().Value)
          {
            newConnection.Open();
            DbTransaction transaction = newConnection.BeginTransaction();
            string selectSql3 = "SELECT * FROM ConnectionProfileFilters WHERE ConnectionProfileParameter = 0 AND ParameterValue = '" + name + "'";
            Schema.ConnectionProfileFiltersDataTable filtersDataTable3 = new Schema.ConnectionProfileFiltersDataTable();
            DbCommandBuilder commandBuilder;
            DbDataAdapter dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql3, newConnection, transaction, out commandBuilder);
            dataAdapter.Fill((DataTable) filtersDataTable3);
            int num2 = -1;
            if (filtersDataTable3.Count > 0)
            {
              num2 = filtersDataTable3[0].ConnectionFilterID;
              string selectSql4 = "SELECT * FROM ConnectionProfileFilters WHERE ConnectionFilterID = " + num2.ToString();
              filtersDataTable3 = new Schema.ConnectionProfileFiltersDataTable();
              dataAdapter = DbBasis.PrimaryDB.BaseDbConnection.GetDataAdapter(selectSql4, newConnection, transaction, out commandBuilder);
              dataAdapter.Fill((DataTable) filtersDataTable3);
              foreach (DataRow dataRow in (TypedTableBase<Schema.ConnectionProfileFiltersRow>) filtersDataTable3)
                dataRow.Delete();
              dataAdapter.Update((DataTable) filtersDataTable3);
            }
            if (num2 < 0)
              num2 = DbBasis.PrimaryDB.BaseDbConnection.GetNewId("ConnectionProfileFilters");
            int num3 = 0;
            Schema.ConnectionProfileFiltersRow row1 = filtersDataTable3.NewConnectionProfileFiltersRow();
            row1.ConnectionFilterID = num2;
            row1.FilterGroupNumber = 0;
            row1.ConnectionProfileParameter = 0;
            Schema.ConnectionProfileFiltersRow profileFiltersRow = row1;
            int num4 = num3;
            int num5 = num4 + 1;
            profileFiltersRow.ParameterOrder = num4;
            row1.GroupFunction = 0;
            row1.ParameterValue = name;
            filtersDataTable3.AddConnectionProfileFiltersRow(row1);
            foreach (ParameterEditData resultParameter in parameterListEditor.ResultParameters)
            {
              Schema.ConnectionProfileFiltersRow row2 = filtersDataTable3.NewConnectionProfileFiltersRow();
              row2.ConnectionFilterID = num2;
              row2.FilterGroupNumber = int.Parse(resultParameter.SelectedGroup);
              row2.ConnectionProfileParameter = !(resultParameter.SelectedType == "__ Filter group") ? (int) Enum.Parse(typeof (ConnectionProfileParameter), resultParameter.SelectedType) : 0;
              row2.ParameterOrder = num5++;
              row2.GroupFunction = (int) Enum.Parse(typeof (ConnectionProfileFilterGroupFunctions), resultParameter.SelectedGroupFunction);
              if (!string.IsNullOrEmpty(resultParameter.ParameterValue))
                row2.ParameterValue = resultParameter.ParameterValue;
              filtersDataTable3.AddConnectionProfileFiltersRow(row2);
            }
            dataAdapter.Update((DataTable) filtersDataTable3);
            transaction.Commit();
          }
        }
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex);
      }
      return true;
    }

    public List<string> TypesList { get; set; }

    public List<string> GroupFunctionsList { get; set; }

    public ObservableCollection<ParameterEditData> ItemParameters { get; set; }

    public List<ParameterEditData> ResultParameters { get; private set; }

    private ParameterListEditor(
      string headerText,
      string usingInfo,
      ObservableCollection<ParameterEditData> itemParameters,
      string[] parameterTypes,
      bool filterList)
    {
      this.DataContext = (object) this;
      this.ItemParameters = itemParameters;
      this.FilterList = filterList;
      this.TypesList = new List<string>((IEnumerable<string>) parameterTypes);
      foreach (ParameterEditData itemParameter in (Collection<ParameterEditData>) this.ItemParameters)
        itemParameter.GroupFunctionChangedCall = new ParameterEditData.GroupFunctionChanged(this.GroupFunctionChanged);
      this.GroupFunctionsList = new List<string>((IEnumerable<string>) Enum.GetNames(typeof (ConnectionProfileFilterGroupFunctions)));
      if (filterList)
        this.WindowState = WindowState.Maximized;
      this.InitializeComponent();
      this.Title = "Parameters Editor  " + headerText;
      this.TextBlockUsingInfo.Text = usingInfo;
      if (!filterList)
        return;
      this.DataGridParameters.Columns[0].Visibility = Visibility.Visible;
      this.DataGridParameters.Columns[1].Visibility = Visibility.Visible;
      this.ButtonAddGroup.Visibility = Visibility.Visible;
    }

    internal void GroupFunctionChanged(ParameterEditData changedParam)
    {
      if (this.changingFunction)
        return;
      this.changingFunction = true;
      foreach (ParameterEditData itemParameter in (Collection<ParameterEditData>) this.ItemParameters)
      {
        if (itemParameter != changedParam && !(itemParameter.SelectedGroup != changedParam.SelectedGroup))
          itemParameter.SelectedGroupFunction = changedParam.SelectedGroupFunction;
      }
      this.changingFunction = false;
    }

    private void ButtonOk_Click(object sender, RoutedEventArgs e)
    {
      this.ResultParameters = this.ItemParameters.OrderBy<ParameterEditData, ParameterEditData>((System.Func<ParameterEditData, ParameterEditData>) (x => x), (IComparer<ParameterEditData>) new ParameterEditDataComp()).ToList<ParameterEditData>();
      int num1 = 0;
      string str = (string) null;
      int index = 0;
      while (index < this.ResultParameters.Count)
      {
        if (index == 0)
        {
          str = this.ResultParameters[index].SelectedGroup;
          this.ResultParameters[index].SelectedGroup = num1.ToString();
        }
        else if (this.ResultParameters[index].SelectedGroup == str)
        {
          this.ResultParameters[index].SelectedGroup = num1.ToString();
        }
        else
        {
          str = this.ResultParameters[index].SelectedGroup;
          ++num1;
          this.ResultParameters[index].SelectedGroup = num1.ToString();
        }
        if (this.ResultParameters[index].SelectedType == null || this.ResultParameters[index].SelectedType == ConnectionProfileParameter.None.ToString())
        {
          this.ResultParameters.RemoveAt(index);
        }
        else
        {
          if (index < this.ResultParameters.Count - 1 && this.ResultParameters[index].SelectedGroup == this.ResultParameters[index + 1].SelectedGroup && this.ResultParameters[index].SelectedType == this.ResultParameters[index + 1].SelectedType)
          {
            if (this.FilterList)
            {
              if (this.ResultParameters[index].ParameterValue == this.ResultParameters[index + 1].ParameterValue)
              {
                int num2 = (int) MessageBox.Show("Parameter type and value" + this.ResultParameters[index].SelectedType + " is multiple defined!!");
                return;
              }
            }
            else
            {
              int num3 = (int) MessageBox.Show("Parameter type " + this.ResultParameters[index].SelectedType + " is multiple defined!!");
              return;
            }
          }
          ++index;
        }
      }
      this.DialogResult = new bool?(true);
      this.Close();
    }

    private void ButtonAdd_Click(object sender, RoutedEventArgs e)
    {
      ParameterEditData parameterEditData1 = new ParameterEditData(ConnectionProfileParameter.None.ToString(), (string) null);
      parameterEditData1.GroupFunctionChangedCall = new ParameterEditData.GroupFunctionChanged(this.GroupFunctionChanged);
      if (this.DataGridParameters.Items.Count > 0)
      {
        if (this.DataGridParameters.SelectedCells != null && this.DataGridParameters.SelectedCells.Count > 0)
        {
          ParameterEditData parameterEditData2 = (ParameterEditData) this.DataGridParameters.SelectedCells[0].Item;
          parameterEditData1.SelectedGroup = parameterEditData2.SelectedGroup;
          parameterEditData1.SelectedGroupFunction = parameterEditData2.SelectedGroupFunction;
          this.ItemParameters.Insert(this.ItemParameters.IndexOf(parameterEditData2) + 1, parameterEditData1);
        }
        else
        {
          ParameterEditData parameterEditData3 = (ParameterEditData) this.DataGridParameters.Items[this.DataGridParameters.Items.Count - 1];
          parameterEditData1.SelectedGroup = parameterEditData3.SelectedGroup;
          parameterEditData1.SelectedGroupFunction = parameterEditData3.SelectedGroupFunction;
          this.ItemParameters.Add(parameterEditData1);
        }
      }
      else
        this.ItemParameters.Add(parameterEditData1);
    }

    private void ButtonAddGroup_Click(object sender, RoutedEventArgs e)
    {
      ParameterEditData parameterEditData1 = new ParameterEditData(ConnectionProfileParameter.None.ToString(), (string) null);
      parameterEditData1.GroupFunctionChangedCall = new ParameterEditData.GroupFunctionChanged(this.GroupFunctionChanged);
      if (this.DataGridParameters.Items.Count > 0)
      {
        ParameterEditData parameterEditData2 = (ParameterEditData) this.DataGridParameters.Items[this.DataGridParameters.Items.Count - 1];
        parameterEditData1.SelectedGroup = (int.Parse(parameterEditData2.SelectedGroup) + 1).ToString();
        parameterEditData1.SelectedGroupFunction = ConnectionProfileFilterGroupFunctions.OR.ToString();
        this.ItemParameters.Add(parameterEditData1);
      }
      else
        this.ItemParameters.Add(parameterEditData1);
    }

    private void ButtonDelete_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridParameters.SelectedItem != null)
      {
        this.ItemParameters.Remove((ParameterEditData) this.DataGridParameters.SelectedItem);
      }
      else
      {
        DataGridCellInfo selectedCell;
        int num;
        if (this.DataGridParameters.SelectedCells != null && this.DataGridParameters.SelectedCells.Count > 0)
        {
          selectedCell = this.DataGridParameters.SelectedCells[0];
          num = selectedCell.Item is ParameterEditData ? 1 : 0;
        }
        else
          num = 0;
        if (num == 0)
          return;
        selectedCell = this.DataGridParameters.SelectedCells[0];
        this.ItemParameters.Remove((ParameterEditData) selectedCell.Item);
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/ReadoutConfiguration;component/parameterlisteditor.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.ButtonOk = (Button) target;
          this.ButtonOk.Click += new RoutedEventHandler(this.ButtonOk_Click);
          break;
        case 2:
          this.ButtonAddGroup = (Button) target;
          this.ButtonAddGroup.Click += new RoutedEventHandler(this.ButtonAddGroup_Click);
          break;
        case 3:
          this.ButtonAdd = (Button) target;
          this.ButtonAdd.Click += new RoutedEventHandler(this.ButtonAdd_Click);
          break;
        case 4:
          this.ButtonDelete = (Button) target;
          this.ButtonDelete.Click += new RoutedEventHandler(this.ButtonDelete_Click);
          break;
        case 5:
          this.TextBlockUsingInfo = (TextBlock) target;
          break;
        case 6:
          this.DataGridParameters = (DataGrid) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}


--- PlugInAnchor.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.PlugInAnchor
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using PlugInLib;
using StartupLib;
using System.Collections.Generic;
using System.Windows;
using ZR_ClassLibrary;

#nullable disable
namespace ReadoutConfiguration
{
  [ComponentPath("Reading")]
  public class PlugInAnchor : GmmPlugInByOwner
  {
    private ReadoutConfigFunctions MyFunctions;

    public PlugInAnchor()
    {
      if (!PlugInLoader.IsPluginLoaderInitialised())
        return;
      this.MyFunctions = new ReadoutConfigFunctions();
      this.MyFunctions.IsPluginObject = true;
    }

    public override void Dispose() => this.MyFunctions.GMM_Dispose();

    public override string ShowMainWindow() => this.MyFunctions.ShowMainWindow();

    public override string ShowMainWindow(Window owner) => this.MyFunctions.ShowMainWindow(owner);

    public override PlugInInfo GetPluginInfo()
    {
      return new PlugInInfo("ReadoutConfiguration", "Reading", "Byteübertragung", "Grundeinstellung der Schnittstelle und der Übertragungskanäle", new string[0], PlugInAnchor.GetUsedRights(), (object) this.MyFunctions);
    }

    private static string[] GetUsedRights()
    {
      List<string> stringList = new List<string>();
      foreach (KeyValuePair<OverrideID, ConfigurationParameter.ConPaInfo> keyValuePair in ConfigurationParameter.ConfigParametersByOverrideID)
      {
        if (keyValuePair.Value.SubdeviceNumber == 0)
        {
          stringList.Add("Right\\Configurator\\ConfigParamVisible_" + keyValuePair.Key.ToString() + "|" + keyValuePair.Value.EnabledAsDefaultInOldLicense.ToString() + "|EnumDesc_ZR_ClassLibrary.OverrideID_" + keyValuePair.Key.ToString());
          stringList.Add("Right\\Configurator\\ConfigParamEditable_" + keyValuePair.Key.ToString() + "|" + keyValuePair.Value.EnabledAsDefaultInOldLicense.ToString() + "|EnumDesc_ZR_ClassLibrary.OverrideID_" + keyValuePair.Key.ToString());
        }
      }
      stringList.Add("ReadoutConfiguration\\ShowStandardChangableParameter|false");
      return stringList.ToArray();
    }
  }
}


--- ProfileSelecterIDs.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ProfileSelecterIDs
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

#nullable disable
namespace ReadoutConfiguration
{
  internal class ProfileSelecterIDs
  {
    internal int DeviceGroupID;
    internal int DeviceModelID;
    internal int EquipmentGroupID;
    internal int EquipmentModelID;
    internal int ProfileTypeGroupID;
    internal int ProfileTypeID;
  }
}


--- ProfileSelecterLists.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ProfileSelecterLists
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using System.Collections.Generic;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace ReadoutConfiguration
{
  internal class ProfileSelecterLists
  {
    internal List<DeviceGroup> allDeviceGroupsList;
    internal List<DeviceModel> allDeviceModelsList;
    internal List<EquipmentGroup> reducedEquipmentGroups;
    internal List<EquipmentModel> reducedEquipmentModels;
    internal List<ProfileTypeGroup> reducedProfileTypeGroups;
    internal List<ProfileType> reducedProfileTypes;
  }
}


--- ProfilesList.xaml.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ProfilesList
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using CommonWPF;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Markup;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;

#nullable disable
namespace ReadoutConfiguration
{
  public partial class ProfilesList : Window, IComponentConnector
  {
    internal int startProfileID;
    internal int selectedProfileID = -1;
    private System.Windows.Point dragNewPoint;
    private System.Windows.Point dragStartPoint;
    private StringBuilder listInfo = new StringBuilder();
    private StringBuilder selectInfo = new StringBuilder();
    private Stopwatch stopwatch = new Stopwatch();
    internal System.Windows.Controls.Menu MenuMain;
    internal System.Windows.Controls.MenuItem MenuItemAdditionalTools;
    internal System.Windows.Controls.MenuItem MenuItemShowLostItems;
    internal System.Windows.Controls.MenuItem MenuItemCreateProfilesForMBusConverters;
    internal System.Windows.Controls.MenuItem MenuItemCopyTagsToParameters;
    internal System.Windows.Controls.MenuItem MenuItemCheckSettings;
    internal StartupLib.GmmCorporateControl gmmCorporateControl1;
    internal TextBlock TextBlockInfo;
    internal System.Windows.Controls.Button ButtonUseSelectedProfile;
    internal System.Windows.Controls.TextBox TextBoxDeviceFilter;
    internal System.Windows.Controls.TextBox TextBoxEquipmentFilter;
    internal System.Windows.Controls.TextBox TextBoxTypeFilter;
    internal System.Windows.Controls.ComboBox ComboBoxFilter;
    internal System.Windows.Controls.CheckBox CheckBoxUseFilter;
    internal System.Windows.Controls.Button ButtonAddFilter;
    internal System.Windows.Controls.Button ButtonDeleteFilter;
    internal System.Windows.Controls.Button ButtonChangeFilter;
    internal System.Windows.Controls.CheckBox CheckBoxShowParameters;
    internal System.Windows.Controls.CheckBox CheckBoxShowProfileNames;
    internal System.Windows.Controls.CheckBox CheckBoxShowItemIDs;
    internal System.Windows.Controls.DataGrid DataGridAllProfiles;
    internal System.Windows.Controls.MenuItem MenuItemCopySelectedProfile;
    internal System.Windows.Controls.MenuItem MenuItemPast;
    internal System.Windows.Controls.MenuItem MenuItemDeviceModelParameters;
    internal System.Windows.Controls.MenuItem MenuItemEquipmentModelParameters;
    internal System.Windows.Controls.MenuItem MenuItemProfileTypeParameters;
    internal System.Windows.Controls.MenuItem MenuItemProfileParameters;
    internal System.Windows.Controls.MenuItem MenuItemDeleteProfiles;
    internal System.Windows.Controls.MenuItem MenuItemDefineNewModel;
    internal System.Windows.Controls.MenuItem MenuItemDefineNewEquipment;
    internal System.Windows.Controls.MenuItem MenuItemDefineNewType;
    internal System.Windows.Controls.MenuItem MenuItemSetDifferentModel;
    internal System.Windows.Controls.MenuItem MenuItemSetDifferentEquipment;
    internal System.Windows.Controls.MenuItem MenuItemSetDifferentType;
    internal System.Windows.Controls.MenuItem MenuItemChangeDeviceModelID;
    internal System.Windows.Controls.MenuItem MenuItemChangeEquipmentModelID;
    internal System.Windows.Controls.MenuItem MenuItemChangeProfileTypeID;
    internal System.Windows.Controls.MenuItem MenuItemChangeSettingsID;
    internal System.Windows.Controls.MenuItem MenuItemCreateSettingsCloneAndAssingIt;
    internal System.Windows.Controls.MenuItem MenuItemShowAndEditSettings;
    internal System.Windows.Controls.MenuItem MenuItemEditCommonSettings;
    private bool _contentLoaded;

    public ProfilesList(int startProfileID)
    {
      this.startProfileID = startProfileID;
      this.selectedProfileID = startProfileID;
      this.dragNewPoint = new System.Windows.Point();
      this.dragStartPoint = this.dragNewPoint;
      this.InitializeComponent();
    }

    private void Window_Loaded(object sender, RoutedEventArgs e) => this.UpdateList();

    private void UpdateList()
    {
      this.listInfo.Clear();
      this.selectInfo.Clear();
      this.DataGridAllProfiles.ItemsSource = (IEnumerable) null;
      this.DataGridAllProfiles.Items.Clear();
      ConnectionProfileFilter profileFilter = (ConnectionProfileFilter) null;
      this.stopwatch.Reset();
      this.stopwatch.Start();
      if (this.CheckBoxUseFilter.IsChecked.Value && this.ComboBoxFilter.SelectedItem != null)
      {
        string key = this.ComboBoxFilter.SelectedItem.ToString();
        this.listInfo.Append("FilterName:" + key);
        profileFilter = ReadoutConfigFunctions.DbData.CachedProfileFilters[key];
      }
      ObservableCollection<ConnectionListRow> connectionProfilesList = ReadoutConfigFunctions.DbData.GetConnectionProfilesList(this.startProfileID, this.selectedProfileID, profileFilter);
      this.stopwatch.Stop();
      this.listInfo.Append(" FilterdProfiles:" + connectionProfilesList.Count.ToString());
      this.listInfo.Append(" ListGenerationTime:" + this.stopwatch.Elapsed.TotalMilliseconds.ToString() + "ms");
      string str1 = this.TextBoxDeviceFilter.Text.Trim();
      string str2 = this.TextBoxEquipmentFilter.Text.Trim();
      string str3 = this.TextBoxTypeFilter.Text.Trim();
      if (str1.Length > 0 || str2.Length > 0 || str3.Length > 0)
      {
        ObservableCollection<ConnectionListRow> observableCollection = new ObservableCollection<ConnectionListRow>();
        foreach (ConnectionListRow connectionListRow in (Collection<ConnectionListRow>) connectionProfilesList)
        {
          if (str1.Length > 0 && connectionListRow.DeviceModel.Contains(str1))
            observableCollection.Add(connectionListRow);
          else if (str2.Length > 0 && connectionListRow.EquipmentModel.Contains(str2))
            observableCollection.Add(connectionListRow);
          else if (str3.Length > 0 && connectionListRow.ProfileType.Contains(str3))
            observableCollection.Add(connectionListRow);
        }
        this.DataGridAllProfiles.ItemsSource = (IEnumerable) observableCollection;
        this.listInfo.Append(" DisplaydProfiles:" + observableCollection.Count.ToString());
      }
      else
        this.DataGridAllProfiles.ItemsSource = (IEnumerable) connectionProfilesList;
      for (int displayIndex = 0; displayIndex < this.DataGridAllProfiles.Columns.Count; ++displayIndex)
      {
        DataGridColumn dataGridColumn = this.DataGridAllProfiles.ColumnFromDisplayIndex(displayIndex);
        string str4 = dataGridColumn.Header.ToString();
        if (str4 == "Parameters")
        {
          bool? isChecked = this.CheckBoxShowParameters.IsChecked;
          dataGridColumn.Visibility = !isChecked.Value ? Visibility.Collapsed : Visibility.Visible;
        }
        if (str4 == "SettingsName")
        {
          bool? isChecked = this.CheckBoxShowProfileNames.IsChecked;
          dataGridColumn.Visibility = !isChecked.Value ? Visibility.Collapsed : Visibility.Visible;
        }
        if (str4 == "D_ID" || str4 == "E_ID" || str4 == "T_ID")
        {
          bool? isChecked = this.CheckBoxShowItemIDs.IsChecked;
          dataGridColumn.Visibility = !isChecked.Value ? Visibility.Collapsed : Visibility.Visible;
        }
      }
      this.DataGridAllProfiles.Items.SortDescriptions.Add(new SortDescription("DeviceModel", ListSortDirection.Ascending));
      this.DataGridAllProfiles.Items.SortDescriptions.Add(new SortDescription("ProfileType", ListSortDirection.Ascending));
      this.DataGridAllProfiles.Items.SortDescriptions.Add(new SortDescription("EquipmentModel", ListSortDirection.Ascending));
      if (ReadoutConfigFunctions.DbData.CachedProfileFilters != null)
        this.ComboBoxFilter.ItemsSource = (IEnumerable) ReadoutConfigFunctions.DbData.CachedProfileFilters.Keys.ToList<string>();
      this.DataGridAllProfiles.UpdateLayout();
      for (int index = 0; index < this.DataGridAllProfiles.Items.Count; ++index)
      {
        ConnectionListRow connectionListRow = (ConnectionListRow) this.DataGridAllProfiles.Items[index];
        if (connectionListRow.ID == this.startProfileID)
        {
          this.DataGridAllProfiles.SelectedIndex = index;
          this.DataGridAllProfiles.ScrollIntoView((object) connectionListRow);
          break;
        }
      }
      this.ShowInfo();
    }

    private void DataGridAllProfiles_SelectionChanged(object sender, SelectionChangedEventArgs e)
    {
      this.selectInfo.Clear();
      if (this.DataGridAllProfiles.SelectedItems.Count > 0)
      {
        this.DataGridAllProfiles.ContextMenu.IsEnabled = true;
        this.ButtonUseSelectedProfile.IsEnabled = true;
        this.MenuItemDeleteProfiles.IsEnabled = true;
        this.MenuItemCreateSettingsCloneAndAssingIt.IsEnabled = true;
        this.MenuItemShowAndEditSettings.IsEnabled = true;
        this.MenuItemEditCommonSettings.IsEnabled = false;
        this.MenuItemDefineNewModel.IsEnabled = true;
        this.MenuItemDefineNewEquipment.IsEnabled = true;
        this.MenuItemDefineNewType.IsEnabled = true;
        if (this.DataGridAllProfiles.SelectedItems.Count > 1)
        {
          this.MenuItemCopySelectedProfile.IsEnabled = false;
          ConnectionListRow selectedItem1 = (ConnectionListRow) this.DataGridAllProfiles.SelectedItems[0];
          for (int index = 0; index < this.DataGridAllProfiles.SelectedItems.Count; ++index)
          {
            ConnectionListRow selectedItem2 = (ConnectionListRow) this.DataGridAllProfiles.SelectedItems[index];
            if (selectedItem2.SettingsId != selectedItem1.SettingsId)
            {
              this.MenuItemCreateSettingsCloneAndAssingIt.IsEnabled = false;
              this.MenuItemShowAndEditSettings.IsEnabled = false;
              this.MenuItemEditCommonSettings.IsEnabled = true;
            }
            if (selectedItem2.DeviceModelID != selectedItem1.DeviceModelID)
              this.MenuItemDefineNewModel.IsEnabled = false;
            if (selectedItem2.EquipmentModelID != selectedItem1.EquipmentModelID)
              this.MenuItemDefineNewEquipment.IsEnabled = false;
            if (selectedItem2.ProfileTypeID != selectedItem1.ProfileTypeID)
              this.MenuItemDefineNewType.IsEnabled = false;
          }
        }
        else
          this.MenuItemCopySelectedProfile.IsEnabled = true;
      }
      else
        this.DataGridAllProfiles.ContextMenu.IsEnabled = false;
      this.ShowInfo();
      this.SetNewProfileID();
    }

    private void ShowInfo()
    {
      this.TextBlockInfo.Text = this.listInfo.ToString() + " / " + this.selectInfo.ToString();
    }

    private void DataGridAllProfiles_MouseDoubleClick(object sender, MouseButtonEventArgs e)
    {
      if (!this.SetNewProfileID())
        return;
      this.DialogResult = new bool?(true);
      this.Close();
    }

    private void ButtonUseSelectedProfile_Click(object sender, RoutedEventArgs e)
    {
      if (!this.SetNewProfileID())
        return;
      this.DialogResult = new bool?(true);
      this.Close();
    }

    private void ButtonCreateClonedSettings_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        if (this.DataGridAllProfiles.SelectedItems == null || this.DataGridAllProfiles.SelectedItems.Count < 1)
          return;
        List<int> profileIdList = new List<int>();
        foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
          profileIdList.Add(selectedItem.ID);
        ReadoutConfigFunctions.DbData.CloneSettings(profileIdList);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Clone profiles error");
      }
    }

    private void MenuItemShowAndEditSettings_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        if (!this.SetNewProfileID())
          return;
        SettingsList settingsList = new SettingsList(ReadoutConfigFunctions.DbData.GetPartiallyConnectionProfiles().Find((Predicate<ConnectionProfile>) (x => x.ConnectionProfileID == this.selectedProfileID)).ConnectionSettings);
        settingsList.Owner = (Window) this;
        settingsList.ShowDialog();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Work profile settings error");
      }
    }

    private void MenuItemDefineNewModel_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridAllProfiles.SelectedItems == null || this.DataGridAllProfiles.SelectedItems.Count < 1)
        return;
      try
      {
        string oneValue = EnterOneValue.GetOneValue("Define new DeviceModel", "Define new DeviceModel" + Environment.NewLine + "Type in the name of a new DeviceModel." + Environment.NewLine + Environment.NewLine + "All selected profiles will be copied." + Environment.NewLine + "Inside the copy the DeviceModel will be changed" + Environment.NewLine + "to the new created DeviceModel.");
        if (string.IsNullOrEmpty(oneValue))
          return;
        List<int> connectionProfileIDsList = new List<int>();
        foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
          connectionProfileIDsList.Add(selectedItem.ID);
        int deviceGroupId = ((ConnectionListRow) this.DataGridAllProfiles.SelectedItems[0]).DeviceGroupID;
        ReadoutConfigFunctions.DbData.CreateCopiedProfiles(connectionProfileIDsList, oneValue, deviceGroupId, ConnectionItemTypes.DeviceModel);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by defining new DeviceModel");
      }
    }

    private void MenuItemDefineNewEquipment_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        string oneValue = EnterOneValue.GetOneValue("Define new EquipmentType", "Define new EquipmentType" + Environment.NewLine + "Type in the name of a new EquipmentType." + Environment.NewLine + Environment.NewLine + "All selected profiles will be copied." + Environment.NewLine + "Inside the copy the EquipmentType will be changed" + Environment.NewLine + "to the new created EquipmentType.");
        if (string.IsNullOrEmpty(oneValue))
          return;
        List<int> connectionProfileIDsList = new List<int>();
        foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
          connectionProfileIDsList.Add(selectedItem.ID);
        int equipmentGroupId = ((ConnectionListRow) this.DataGridAllProfiles.SelectedItems[0]).EquipmentGroupID;
        ReadoutConfigFunctions.DbData.CreateCopiedProfiles(connectionProfileIDsList, oneValue, equipmentGroupId, ConnectionItemTypes.EquipmentModel);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by defining new EquipmentType");
      }
    }

    private void MenuItemDefineNewType_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        string oneValue = EnterOneValue.GetOneValue("Define new ProfileType", "Define new ProfileType" + Environment.NewLine + "Type in the name of a new ProfileType." + Environment.NewLine + Environment.NewLine + "All selected profiles will be copied." + Environment.NewLine + "Inside the copy the ProfileType will be changed" + Environment.NewLine + "to the new created ProfileType.");
        if (string.IsNullOrEmpty(oneValue))
          return;
        List<int> connectionProfileIDsList = new List<int>();
        foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
          connectionProfileIDsList.Add(selectedItem.ID);
        int profileTypeGroupId = ((ConnectionListRow) this.DataGridAllProfiles.SelectedItems[0]).ProfileTypeGroupID;
        ReadoutConfigFunctions.DbData.CreateCopiedProfiles(connectionProfileIDsList, oneValue, profileTypeGroupId, ConnectionItemTypes.ProfileType);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by defining new ProfileType");
      }
    }

    private bool SetNewProfileID()
    {
      System.Windows.Controls.DataGrid dataGridAllProfiles = this.DataGridAllProfiles;
      if (dataGridAllProfiles != null && dataGridAllProfiles.SelectedItems != null && dataGridAllProfiles.SelectedItems.Count >= 1)
      {
        this.selectedProfileID = this.GetProfileID(dataGridAllProfiles.SelectedItem);
        ReadoutConfigFunctions.DbData.MarkSelectedProfile(this.selectedProfileID);
        return this.selectedProfileID >= 0;
      }
      this.selectedProfileID = -1;
      return false;
    }

    private int GetProfileID(object dataGridRowItem) => ((ConnectionListRow) dataGridRowItem).ID;

    private void MenuItemDeleteProfiles_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridAllProfiles.SelectedItems == null || this.DataGridAllProfiles.SelectedItems.Count < 1)
        return;
      List<ConnectionProfile> source = new List<ConnectionProfile>();
      foreach (object selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
      {
        int profileId = this.GetProfileID(selectedItem);
        ConnectionProfile connectionProfile = ReadoutConfigFunctions.DbData.GetPartiallyConnectionProfiles().Find((Predicate<ConnectionProfile>) (x => x.ConnectionProfileID == profileId));
        source.Add(connectionProfile);
      }
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("Would you like to delete following profiles?");
      stringBuilder.AppendLine("----------------------------------------------------------");
      stringBuilder.AppendLine("");
      foreach (ConnectionProfile connectionProfile in source)
      {
        stringBuilder.Append(connectionProfile.ConnectionProfileID.ToString("d6"));
        stringBuilder.Append("; " + connectionProfile.DeviceModel.Name);
        stringBuilder.Append("; " + connectionProfile.EquipmentModel.Name);
        stringBuilder.Append("; " + connectionProfile.ProfileType.Name);
        stringBuilder.AppendLine();
      }
      if (GMM_MessageBox.ShowMessage("Profiles list command", stringBuilder.ToString(), MessageBoxButtons.OKCancel) != System.Windows.Forms.DialogResult.OK)
        return;
      int num = (int) GMM_MessageBox.ShowMessage("Profiles list command", ReadoutConfigFunctions.DbData.DeleteProfiles(source.Select<ConnectionProfile, int>((Func<ConnectionProfile, int>) (item => item.ConnectionProfileID)).ToList<int>()));
    }

    private void MenuItemShowLostItems_Click(object sender, RoutedEventArgs e)
    {
      new LostItems().ShowDialog();
    }

    private void MenuItemEditCommonSettings_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridAllProfiles.SelectedItems == null || this.DataGridAllProfiles.SelectedItems.Count < 1)
        return;
      SortedList<int, ConnectionProfile> sortedList = new SortedList<int, ConnectionProfile>();
      foreach (object selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
      {
        int profileId = this.GetProfileID(selectedItem);
        ConnectionProfile connectionProfile = ReadoutConfigFunctions.DbData.GetPartiallyConnectionProfiles().Find((Predicate<ConnectionProfile>) (x => x.ConnectionProfileID == profileId));
        sortedList.Add(profileId, connectionProfile);
      }
      List<int> settingIds;
      List<CommonEditValues> settingsEditValues = ReadoutConfigFunctions.DbData.GetCommonSettingsEditValues(sortedList.Keys.ToList<int>(), out settingIds);
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("Would you like common edit for following " + settingIds.Count.ToString() + " settings?");
      stringBuilder.AppendLine("----------------------------------------------------------");
      stringBuilder.AppendLine("");
      foreach (int key in settingIds)
      {
        ConnectionSettings connectionSettings = ReadoutConfigFunctions.DbData.CachedConnectionSettingsById[key];
        stringBuilder.AppendLine(key.ToString() + "; " + connectionSettings.Name);
      }
      if (GMM_MessageBox.ShowMessage("Profiles list command", stringBuilder.ToString(), MessageBoxButtons.OKCancel) != System.Windows.Forms.DialogResult.OK)
        return;
      CommonParameterEditor commonParameterEditor = new CommonParameterEditor(settingsEditValues, settingIds.Count);
      commonParameterEditor.Owner = (Window) this;
      commonParameterEditor.ShowDialog();
    }

    private void MenuItemChangeDeviceModelID_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        string oneValue = EnterOneValue.GetOneValue("Change DeviceModelID", "Change DeviceModelID" + Environment.NewLine + "Type in the DeviceModelID" + Environment.NewLine + Environment.NewLine + "It has to be a existing DeviceModelID !!!" + Environment.NewLine + "All selected profiles will be changed.");
        if (string.IsNullOrEmpty(oneValue))
          return;
        List<int> connectionProfileIDsList = new List<int>();
        foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
          connectionProfileIDsList.Add(selectedItem.ID);
        ReadoutConfigFunctions.DbData.ChangeIDs(connectionProfileIDsList, oneValue, ConnectionItemTypes.DeviceModel);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by changing DeviceModelID");
      }
    }

    private void MenuItemChangeEquipmentModelID_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        string oneValue = EnterOneValue.GetOneValue("Change EquipmentModelID", "Change EquipmentModelID" + Environment.NewLine + "Type in the EquipmentModelID" + Environment.NewLine + Environment.NewLine + "It has to be a existing EquipmentModelID !!!" + Environment.NewLine + "All selected profiles will be changed.");
        if (string.IsNullOrEmpty(oneValue))
          return;
        List<int> connectionProfileIDsList = new List<int>();
        foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
          connectionProfileIDsList.Add(selectedItem.ID);
        ReadoutConfigFunctions.DbData.ChangeIDs(connectionProfileIDsList, oneValue, ConnectionItemTypes.EquipmentModel);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by changing EquipmentModelID");
      }
    }

    private void MenuItemChangeProfileTypeID_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        string oneValue = EnterOneValue.GetOneValue("Change ProfileTypeID", "Change ProfileTypeID" + Environment.NewLine + "Type in the ProfileTypeID" + Environment.NewLine + Environment.NewLine + "It has to be a existing ProfileTypeID !!!" + Environment.NewLine + "All selected profiles will be changed.");
        if (string.IsNullOrEmpty(oneValue))
          return;
        List<int> connectionProfileIDsList = new List<int>();
        foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
          connectionProfileIDsList.Add(selectedItem.ID);
        ReadoutConfigFunctions.DbData.ChangeIDs(connectionProfileIDsList, oneValue, ConnectionItemTypes.ProfileType);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by changing ProfileTypeID");
      }
    }

    private void MenuItemChangeSettingsID_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        string oneValue = EnterOneValue.GetOneValue("Change ConnectionSettingsID", "Change ConnectionSettingsID" + Environment.NewLine + "Type in the ConnectionSettingsID" + Environment.NewLine + Environment.NewLine + "It has to be a existing ConnectionSettingsID !!!" + Environment.NewLine + "All selected profiles will be changed.");
        if (string.IsNullOrEmpty(oneValue))
          return;
        List<int> connectionProfileIDsList = new List<int>();
        foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
          connectionProfileIDsList.Add(selectedItem.ID);
        ReadoutConfigFunctions.DbData.ChangeIDs(connectionProfileIDsList, oneValue, ~ConnectionItemTypes.EquipmentModel);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by changing ProfileTypeID");
      }
    }

    private void MenuItemSetDifferentModel_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridAllProfiles.SelectedItems == null)
        return;
      try
      {
        if (System.Windows.MessageBox.Show("Create new profile" + Environment.NewLine + "by using the existing DeviceModelID that is past from clipboard:" + ReadoutConfigFunctions.DbData.GetProfileFromClipboard().DeviceModel.DeviceModelID.ToString() + Environment.NewLine + Environment.NewLine + "All selected profiles will be copied." + Environment.NewLine + "Inside the copy the existing DeviceModelID will be set" + Environment.NewLine + Environment.NewLine + "Are you sure to create new profiles?", "Copy profiles", MessageBoxButton.OKCancel) != MessageBoxResult.OK)
          return;
        ReadoutConfigFunctions.DbData.CreateCopiedProfiles(this.GetListOfSelectedProfileIDs(), ConnectionItemTypes.DeviceModel);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by defining new profiles");
      }
    }

    private List<int> GetListOfSelectedProfileIDs()
    {
      List<int> selectedProfileIds = new List<int>();
      foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
        selectedProfileIds.Add(selectedItem.ID);
      return selectedProfileIds;
    }

    private void MenuItemSetDifferentEquipment_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridAllProfiles.SelectedItems == null)
        return;
      try
      {
        if (System.Windows.MessageBox.Show("Create new profile" + Environment.NewLine + "by using the existing EquipmentModelID that is past from clipboard:" + ReadoutConfigFunctions.DbData.GetProfileFromClipboard().EquipmentModel.EquipmentModelID.ToString() + Environment.NewLine + Environment.NewLine + "All selected profiles will be copied." + Environment.NewLine + "Inside the copy the existing EquipmentModelID will be set" + Environment.NewLine + Environment.NewLine + "Are you sure to create new profiles?", "Copy profiles", MessageBoxButton.OKCancel) != MessageBoxResult.OK)
          return;
        ReadoutConfigFunctions.DbData.CreateCopiedProfiles(this.GetListOfSelectedProfileIDs(), ConnectionItemTypes.EquipmentModel);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by defining new profiles");
      }
    }

    private void MenuItemSetDifferentType_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridAllProfiles.SelectedItems == null)
        return;
      try
      {
        if (System.Windows.MessageBox.Show("Create new profile" + Environment.NewLine + "by using the existing ProfileTypeID that is past from clipboard:" + ReadoutConfigFunctions.DbData.GetProfileFromClipboard().ProfileType.ProfileTypeID.ToString() + Environment.NewLine + Environment.NewLine + "All selected profiles will be copied." + Environment.NewLine + "Inside the copy the existing ProfileTypeID will be set" + Environment.NewLine + Environment.NewLine + "Are you sure to create new profiles?", "Copy profiles", MessageBoxButton.OKCancel) != MessageBoxResult.OK)
          return;
        ReadoutConfigFunctions.DbData.CreateCopiedProfiles(this.GetListOfSelectedProfileIDs(), ConnectionItemTypes.ProfileType);
        this.UpdateList();
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex, "Error by defining new profiles");
      }
    }

    private void TextBoxFilter_LostFocus(object sender, RoutedEventArgs e) => this.UpdateList();

    private void TextBoxFilter_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
    {
      if (e.Key != Key.Return)
        return;
      e.Handled = true;
      this.UpdateList();
    }

    private void MenuItemCopyTagsToParameters_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        int parameters = ReadoutConfigFunctions.DbData.CopyTagsToParameters();
        this.UpdateList();
        int num = (int) System.Windows.MessageBox.Show(parameters.ToString() + " tags copied");
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex);
      }
    }

    private void MenuItemCopySelectedProfile_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridAllProfiles.SelectedItems == null || this.DataGridAllProfiles.SelectedItems.Count != 1)
        return;
      ReadoutConfigFunctions.DbData.CopyProfileToClipboard(((ConnectionListRow) this.DataGridAllProfiles.SelectedItems[0]).ID);
    }

    private void CallPastFunction(ProfilesList.PastFunction theFunction)
    {
      try
      {
        List<int> selectedIds = this.GetSelectedIds();
        if (selectedIds == null)
          return;
        string messageBoxText = theFunction(selectedIds);
        this.UpdateList();
        int num = (int) System.Windows.MessageBox.Show(messageBoxText);
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex);
      }
    }

    private void MenuItemDeviceModelParameters_Click(object sender, RoutedEventArgs e)
    {
      this.CallPastFunction(new ProfilesList.PastFunction(ReadoutConfigFunctions.DbData.PastDeviceParametersFromClipboard));
    }

    private void MenuItemEquipmentModelParameters_Click(object sender, RoutedEventArgs e)
    {
      this.CallPastFunction(new ProfilesList.PastFunction(ReadoutConfigFunctions.DbData.PastEquipmentParametersFromClipboard));
    }

    private void MenuItemProfileTypeParameters_Click(object sender, RoutedEventArgs e)
    {
      this.CallPastFunction(new ProfilesList.PastFunction(ReadoutConfigFunctions.DbData.PastTypeParametersFromClipboard));
    }

    private void MenuItemProfileParameters_Click(object sender, RoutedEventArgs e)
    {
      this.CallPastFunction(new ProfilesList.PastFunction(ReadoutConfigFunctions.DbData.PastProfileParametersFromClipboard));
    }

    private List<int> GetSelectedIds()
    {
      if (this.DataGridAllProfiles.SelectedItems == null)
        return (List<int>) null;
      List<int> selectedIds = new List<int>();
      foreach (ConnectionListRow selectedItem in (IEnumerable) this.DataGridAllProfiles.SelectedItems)
        selectedIds.Add(selectedItem.ID);
      return selectedIds;
    }

    private void ButtonAddFilter_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        string baseName = (string) null;
        if (this.ComboBoxFilter.SelectedItem != null)
          baseName = (string) this.ComboBoxFilter.SelectedItem;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("Define new filter.");
        string oneValue;
        bool flag;
        if (baseName == null)
        {
          stringBuilder.AppendLine("Please type in a new filter name.");
          oneValue = EnterOneValue.GetOneValue("Define new filter", stringBuilder.ToString());
          if (string.IsNullOrEmpty(oneValue))
            return;
          if (ReadoutConfigFunctions.DbData.CachedProfileFilters.ContainsKey(oneValue))
          {
            int num = (int) System.Windows.MessageBox.Show("The filter exists." + Environment.NewLine + "Please use change function !!!");
            return;
          }
          flag = ParameterListEditor.EditFilter(oneValue);
        }
        else
        {
          stringBuilder.AppendLine("Please type in a new filter name.");
          stringBuilder.AppendLine("The new filter will be created as copy of");
          stringBuilder.AppendLine("existing filter: " + baseName);
          oneValue = EnterOneValue.GetOneValue("Define new filter", stringBuilder.ToString());
          if (string.IsNullOrEmpty(oneValue))
            return;
          if (ReadoutConfigFunctions.DbData.CachedProfileFilters.ContainsKey(oneValue))
          {
            int num = (int) System.Windows.MessageBox.Show("The filter exists." + Environment.NewLine + "Please use change function !!!");
            return;
          }
          flag = ParameterListEditor.EditFilter(oneValue, baseName);
        }
        if (!flag)
          return;
        ReadoutConfigFunctions.DbData.LoadProfileFilters();
        this.ComboBoxFilter.ItemsSource = (IEnumerable) ReadoutConfigFunctions.DbData.CachedProfileFilters.Keys.ToList<string>();
        if (ReadoutConfigFunctions.DbData.CachedProfileFilters.ContainsKey(oneValue))
          this.ComboBoxFilter.SelectedItem = (object) oneValue;
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex);
      }
    }

    private void ButtonChangeFilter_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        if (this.ComboBoxFilter.SelectedItem == null)
          return;
        string selectedItem = (string) this.ComboBoxFilter.SelectedItem;
        if (!ParameterListEditor.EditFilter(selectedItem))
          return;
        ReadoutConfigFunctions.DbData.LoadProfileFilters();
        this.ComboBoxFilter.ItemsSource = (IEnumerable) ReadoutConfigFunctions.DbData.CachedProfileFilters.Keys.ToList<string>();
        if (ReadoutConfigFunctions.DbData.CachedProfileFilters.ContainsKey(selectedItem))
          this.ComboBoxFilter.SelectedItem = (object) selectedItem;
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex);
      }
    }

    private void ButtonDeleteFilter_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        if (this.ComboBoxFilter.SelectedItem == null || System.Windows.MessageBox.Show("Would you really delete the filter: '" + (string) this.ComboBoxFilter.SelectedItem + "' ?", "Delete filter", MessageBoxButton.OKCancel) != MessageBoxResult.OK)
          ;
      }
      catch (Exception ex)
      {
        ExceptionViewer.Show(ex);
      }
    }

    private void ComboBoxFilter_SelectionChanged(object sender, SelectionChangedEventArgs e)
    {
      if (this.ComboBoxFilter.SelectedItem != null)
      {
        this.ButtonDeleteFilter.IsEnabled = true;
        this.ButtonChangeFilter.IsEnabled = true;
        this.CheckBoxUseFilter.IsEnabled = true;
        if (!this.CheckBoxUseFilter.IsChecked.Value)
          return;
        this.UpdateList();
      }
      else
      {
        this.ButtonDeleteFilter.IsEnabled = false;
        this.ButtonChangeFilter.IsEnabled = false;
        this.CheckBoxUseFilter.IsEnabled = false;
      }
    }

    private void CheckBoxUseFilter_Checked(object sender, RoutedEventArgs e) => this.UpdateList();

    private void CheckBoxUseFilter_Unchecked(object sender, RoutedEventArgs e) => this.UpdateList();

    private void MenuItemCreateProfilesForMBusConverters_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridAllProfiles.SelectedItem == null)
        return;
      ReadoutConfigFunctions.DbData.CreateProfilesForMBusConverters(((ConnectionListRow) this.DataGridAllProfiles.SelectedItem).ProfileTypeID);
      this.UpdateList();
    }

    private void CheckBoxChanged(object sender, RoutedEventArgs e) => this.UpdateList();

    private void MenuItemCheckSettings_Click(object sender, RoutedEventArgs e)
    {
      ReadoutConfigFunctions.DbData.CheckSettings();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      System.Windows.Application.LoadComponent((object) this, new Uri("/ReadoutConfiguration;component/profileslist.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((FrameworkElement) target).Loaded += new RoutedEventHandler(this.Window_Loaded);
          break;
        case 2:
          this.MenuMain = (System.Windows.Controls.Menu) target;
          break;
        case 3:
          this.MenuItemAdditionalTools = (System.Windows.Controls.MenuItem) target;
          break;
        case 4:
          this.MenuItemShowLostItems = (System.Windows.Controls.MenuItem) target;
          this.MenuItemShowLostItems.Click += new RoutedEventHandler(this.MenuItemShowLostItems_Click);
          break;
        case 5:
          this.MenuItemCreateProfilesForMBusConverters = (System.Windows.Controls.MenuItem) target;
          this.MenuItemCreateProfilesForMBusConverters.Click += new RoutedEventHandler(this.MenuItemCreateProfilesForMBusConverters_Click);
          break;
        case 6:
          this.MenuItemCopyTagsToParameters = (System.Windows.Controls.MenuItem) target;
          this.MenuItemCopyTagsToParameters.Click += new RoutedEventHandler(this.MenuItemCopyTagsToParameters_Click);
          break;
        case 7:
          this.MenuItemCheckSettings = (System.Windows.Controls.MenuItem) target;
          this.MenuItemCheckSettings.Click += new RoutedEventHandler(this.MenuItemCheckSettings_Click);
          break;
        case 8:
          this.gmmCorporateControl1 = (StartupLib.GmmCorporateControl) target;
          break;
        case 9:
          this.TextBlockInfo = (TextBlock) target;
          break;
        case 10:
          this.ButtonUseSelectedProfile = (System.Windows.Controls.Button) target;
          this.ButtonUseSelectedProfile.Click += new RoutedEventHandler(this.ButtonUseSelectedProfile_Click);
          break;
        case 11:
          this.TextBoxDeviceFilter = (System.Windows.Controls.TextBox) target;
          this.TextBoxDeviceFilter.LostFocus += new RoutedEventHandler(this.TextBoxFilter_LostFocus);
          this.TextBoxDeviceFilter.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxFilter_PreviewKeyDown);
          break;
        case 12:
          this.TextBoxEquipmentFilter = (System.Windows.Controls.TextBox) target;
          this.TextBoxEquipmentFilter.LostFocus += new RoutedEventHandler(this.TextBoxFilter_LostFocus);
          this.TextBoxEquipmentFilter.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxFilter_PreviewKeyDown);
          break;
        case 13:
          this.TextBoxTypeFilter = (System.Windows.Controls.TextBox) target;
          this.TextBoxTypeFilter.LostFocus += new RoutedEventHandler(this.TextBoxFilter_LostFocus);
          this.TextBoxTypeFilter.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxFilter_PreviewKeyDown);
          break;
        case 14:
          this.ComboBoxFilter = (System.Windows.Controls.ComboBox) target;
          this.ComboBoxFilter.SelectionChanged += new SelectionChangedEventHandler(this.ComboBoxFilter_SelectionChanged);
          break;
        case 15:
          this.CheckBoxUseFilter = (System.Windows.Controls.CheckBox) target;
          this.CheckBoxUseFilter.Checked += new RoutedEventHandler(this.CheckBoxUseFilter_Checked);
          this.CheckBoxUseFilter.Unchecked += new RoutedEventHandler(this.CheckBoxUseFilter_Unchecked);
          break;
        case 16:
          this.ButtonAddFilter = (System.Windows.Controls.Button) target;
          this.ButtonAddFilter.Click += new RoutedEventHandler(this.ButtonAddFilter_Click);
          break;
        case 17:
          this.ButtonDeleteFilter = (System.Windows.Controls.Button) target;
          this.ButtonDeleteFilter.Click += new RoutedEventHandler(this.ButtonDeleteFilter_Click);
          break;
        case 18:
          this.ButtonChangeFilter = (System.Windows.Controls.Button) target;
          this.ButtonChangeFilter.Click += new RoutedEventHandler(this.ButtonChangeFilter_Click);
          break;
        case 19:
          this.CheckBoxShowParameters = (System.Windows.Controls.CheckBox) target;
          this.CheckBoxShowParameters.Checked += new RoutedEventHandler(this.CheckBoxChanged);
          this.CheckBoxShowParameters.Unchecked += new RoutedEventHandler(this.CheckBoxChanged);
          break;
        case 20:
          this.CheckBoxShowProfileNames = (System.Windows.Controls.CheckBox) target;
          this.CheckBoxShowProfileNames.Checked += new RoutedEventHandler(this.CheckBoxChanged);
          this.CheckBoxShowProfileNames.Unchecked += new RoutedEventHandler(this.CheckBoxChanged);
          break;
        case 21:
          this.CheckBoxShowItemIDs = (System.Windows.Controls.CheckBox) target;
          this.CheckBoxShowItemIDs.Checked += new RoutedEventHandler(this.CheckBoxChanged);
          this.CheckBoxShowItemIDs.Unchecked += new RoutedEventHandler(this.CheckBoxChanged);
          break;
        case 22:
          this.DataGridAllProfiles = (System.Windows.Controls.DataGrid) target;
          this.DataGridAllProfiles.SelectionChanged += new SelectionChangedEventHandler(this.DataGridAllProfiles_SelectionChanged);
          this.DataGridAllProfiles.MouseDoubleClick += new MouseButtonEventHandler(this.DataGridAllProfiles_MouseDoubleClick);
          break;
        case 23:
          this.MenuItemCopySelectedProfile = (System.Windows.Controls.MenuItem) target;
          this.MenuItemCopySelectedProfile.Click += new RoutedEventHandler(this.MenuItemCopySelectedProfile_Click);
          break;
        case 24:
          this.MenuItemPast = (System.Windows.Controls.MenuItem) target;
          break;
        case 25:
          this.MenuItemDeviceModelParameters = (System.Windows.Controls.MenuItem) target;
          this.MenuItemDeviceModelParameters.Click += new RoutedEventHandler(this.MenuItemDeviceModelParameters_Click);
          break;
        case 26:
          this.MenuItemEquipmentModelParameters = (System.Windows.Controls.MenuItem) target;
          this.MenuItemEquipmentModelParameters.Click += new RoutedEventHandler(this.MenuItemEquipmentModelParameters_Click);
          break;
        case 27:
          this.MenuItemProfileTypeParameters = (System.Windows.Controls.MenuItem) target;
          this.MenuItemProfileTypeParameters.Click += new RoutedEventHandler(this.MenuItemProfileTypeParameters_Click);
          break;
        case 28:
          this.MenuItemProfileParameters = (System.Windows.Controls.MenuItem) target;
          this.MenuItemProfileParameters.Click += new RoutedEventHandler(this.MenuItemProfileParameters_Click);
          break;
        case 29:
          this.MenuItemDeleteProfiles = (System.Windows.Controls.MenuItem) target;
          this.MenuItemDeleteProfiles.Click += new RoutedEventHandler(this.MenuItemDeleteProfiles_Click);
          break;
        case 30:
          this.MenuItemDefineNewModel = (System.Windows.Controls.MenuItem) target;
          this.MenuItemDefineNewModel.Click += new RoutedEventHandler(this.MenuItemDefineNewModel_Click);
          break;
        case 31:
          this.MenuItemDefineNewEquipment = (System.Windows.Controls.MenuItem) target;
          this.MenuItemDefineNewEquipment.Click += new RoutedEventHandler(this.MenuItemDefineNewEquipment_Click);
          break;
        case 32:
          this.MenuItemDefineNewType = (System.Windows.Controls.MenuItem) target;
          this.MenuItemDefineNewType.Click += new RoutedEventHandler(this.MenuItemDefineNewType_Click);
          break;
        case 33:
          this.MenuItemSetDifferentModel = (System.Windows.Controls.MenuItem) target;
          this.MenuItemSetDifferentModel.Click += new RoutedEventHandler(this.MenuItemSetDifferentModel_Click);
          break;
        case 34:
          this.MenuItemSetDifferentEquipment = (System.Windows.Controls.MenuItem) target;
          this.MenuItemSetDifferentEquipment.Click += new RoutedEventHandler(this.MenuItemSetDifferentEquipment_Click);
          break;
        case 35:
          this.MenuItemSetDifferentType = (System.Windows.Controls.MenuItem) target;
          this.MenuItemSetDifferentType.Click += new RoutedEventHandler(this.MenuItemSetDifferentType_Click);
          break;
        case 36:
          this.MenuItemChangeDeviceModelID = (System.Windows.Controls.MenuItem) target;
          this.MenuItemChangeDeviceModelID.Click += new RoutedEventHandler(this.MenuItemChangeDeviceModelID_Click);
          break;
        case 37:
          this.MenuItemChangeEquipmentModelID = (System.Windows.Controls.MenuItem) target;
          this.MenuItemChangeEquipmentModelID.Click += new RoutedEventHandler(this.MenuItemChangeEquipmentModelID_Click);
          break;
        case 38:
          this.MenuItemChangeProfileTypeID = (System.Windows.Controls.MenuItem) target;
          this.MenuItemChangeProfileTypeID.Click += new RoutedEventHandler(this.MenuItemChangeProfileTypeID_Click);
          break;
        case 39:
          this.MenuItemChangeSettingsID = (System.Windows.Controls.MenuItem) target;
          this.MenuItemChangeSettingsID.Click += new RoutedEventHandler(this.MenuItemChangeSettingsID_Click);
          break;
        case 40:
          this.MenuItemCreateSettingsCloneAndAssingIt = (System.Windows.Controls.MenuItem) target;
          this.MenuItemCreateSettingsCloneAndAssingIt.Click += new RoutedEventHandler(this.ButtonCreateClonedSettings_Click);
          break;
        case 41:
          this.MenuItemShowAndEditSettings = (System.Windows.Controls.MenuItem) target;
          this.MenuItemShowAndEditSettings.Click += new RoutedEventHandler(this.MenuItemShowAndEditSettings_Click);
          break;
        case 42:
          this.MenuItemEditCommonSettings = (System.Windows.Controls.MenuItem) target;
          this.MenuItemEditCommonSettings.Click += new RoutedEventHandler(this.MenuItemEditCommonSettings_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }

    private delegate string PastFunction(List<int> theIds);
  }
}


--- ReadoutConfigFunctions.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ReadoutConfigFunctions
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using NLog;
using StartupLib;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using ZENNER.CommonLibrary;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace ReadoutConfiguration
{
  public sealed class ReadoutConfigFunctions
  {
    private static Logger logger = LogManager.GetLogger(nameof (ReadoutConfigFunctions));
    private static ConfigDatabaseAccess theOnlyConfigDatabaseAccess;
    internal static DeviceManager theOnlyDeviceManager;
    internal bool IsPluginObject = false;

    internal static ConfigDatabaseAccess DbData
    {
      get
      {
        if (ReadoutConfigFunctions.theOnlyConfigDatabaseAccess == null)
          ReadoutConfigFunctions.theOnlyConfigDatabaseAccess = new ConfigDatabaseAccess();
        return ReadoutConfigFunctions.theOnlyConfigDatabaseAccess;
      }
    }

    public static DeviceManager Manager
    {
      get
      {
        if (ReadoutConfigFunctions.theOnlyDeviceManager == null)
          ReadoutConfigFunctions.theOnlyDeviceManager = new DeviceManager();
        return ReadoutConfigFunctions.theOnlyDeviceManager;
      }
    }

    public static void Dispose()
    {
      ReadoutConfigFunctions.theOnlyConfigDatabaseAccess = (ConfigDatabaseAccess) null;
      ReadoutConfigFunctions.theOnlyDeviceManager = (DeviceManager) null;
    }

    public static bool ChooseConfiguration(ReadoutPreferences readoutPreferences)
    {
      if (readoutPreferences == null)
        throw new ArgumentNullException("ReadoutPreferences not defined");
      if (!new ReadoutConfigMain(readoutPreferences, false).ShowDialog().Value)
        return false;
      readoutPreferences.UpdateConfigList();
      return true;
    }

    public static bool ChooseConfiguration(ConfigList configList)
    {
      ReadoutPreferences readoutPreferences = configList != null ? new ReadoutPreferences(configList) : throw new ArgumentNullException("ConfigList not defined");
      readoutPreferences.IsProfileEditingEnabled = UserManager.CheckPermission("Developer");
      if (!new ReadoutConfigMain(readoutPreferences, false).ShowDialog().Value)
        return false;
      readoutPreferences.UpdateConfigList();
      return true;
    }

    public static ConnectionProfileIdentification GetConnectionProfileIdentification(int profileID)
    {
      return new ConnectionProfileIdentification(profileID);
    }

    private static void PrepareChangeInfo(
      string pluginName,
      string parameterName,
      string newValue,
      string oldValue,
      SortedList<string, string> changeInfo)
    {
      string str1 = pluginName + ":" + newValue;
      int index = changeInfo.IndexOfKey(parameterName);
      if (index < 0)
      {
        changeInfo.Add(parameterName, str1 + "; before:" + oldValue);
      }
      else
      {
        string str2 = pluginName + ":" + newValue + "; " + changeInfo.Values[index];
        changeInfo.RemoveAt(index);
        changeInfo.Add(parameterName, str2);
      }
    }

    public static SortedList<string, ConfigList> GetAllConfigurations()
    {
      SortedList<string, ConfigList> allConfigurations = new SortedList<string, ConfigList>();
      try
      {
        foreach (LoadedPlugin loadedPlugin in PlugInLoader.loadedPlugins)
        {
          if (loadedPlugin.gmmPlugIn is IReadoutConfig)
          {
            ConfigList readoutConfiguration = ((IReadoutConfig) loadedPlugin.gmmPlugIn).GetReadoutConfiguration();
            if (readoutConfiguration != null)
              allConfigurations.Add(loadedPlugin.Name, readoutConfiguration);
          }
        }
      }
      catch (Exception ex)
      {
        string message = "Exception on load IReadoutConfig ";
        ReadoutConfigFunctions.logger.Error(message);
        ReadoutConfigFunctions.logger.Error(ex.ToString());
        throw new Exception(message, ex);
      }
      return allConfigurations;
    }

    public static HashSet<string> GetAllLoadedConfiguratedPlugins()
    {
      HashSet<string> configuratedPlugins = new HashSet<string>();
      try
      {
        foreach (LoadedPlugin loadedPlugin in PlugInLoader.loadedPlugins)
        {
          if (loadedPlugin.gmmPlugIn is IReadoutConfig)
            configuratedPlugins.Add(loadedPlugin.Name);
        }
      }
      catch (Exception ex)
      {
        string message = "Exception on load IReadoutConfig ";
        ReadoutConfigFunctions.logger.Error(message);
        ReadoutConfigFunctions.logger.Error(ex.ToString());
        throw new Exception(message, ex);
      }
      return configuratedPlugins;
    }

    public static ConnectionProfile GetPartialProfile(int profileID)
    {
      return ReadoutConfigFunctions.DbData.CachedPartiallyConnectionProfiles.FirstOrDefault<ConnectionProfile>((Func<ConnectionProfile, bool>) (x => x.ConnectionProfileID == profileID));
    }

    internal string ShowMainWindow(Window owner = null)
    {
      ConfigList configList;
      if (PlugInLoader.ConfigListStatic == null)
      {
        configList = ReadoutPreferences.GetConfigListFromProfileId(ReadoutConfigFunctions.DbData.SettingsID_FromProfileID.Keys[0]);
      }
      else
      {
        if (!ReadoutConfigFunctions.DbData.SettingsID_FromProfileID.ContainsKey(PlugInLoader.ConfigListStatic.ConnectionProfileID))
          PlugInLoader.ConfigListStatic.ConnectionProfileID = ReadoutConfigFunctions.DbData.SettingsID_FromProfileID.Keys[0];
        configList = PlugInLoader.ConfigListStatic;
      }
      ConnectionProfileAdjusted adjustedProfile = new ConnectionProfileAdjusted(configList);
      ReadoutPreferences readoutPreferences = new ReadoutPreferences(adjustedProfile);
      readoutPreferences.IsProfileEditingEnabled = UserManager.CheckPermission("Developer");
      readoutPreferences.EnableAllChanges();
      ReadoutConfigMain readoutConfigMain = new ReadoutConfigMain(readoutPreferences, this.IsPluginObject && PlugInLoader.IsWindowEnabled("GMM"));
      readoutConfigMain.Owner = owner;
      if (readoutConfigMain.ShowDialog().Value)
      {
        SortedList<string, string> resultSetup = readoutConfigMain.GetResultSetup();
        configList.Reset(resultSetup);
        if (this.IsPluginObject)
        {
          List<IReadoutConfig> readoutConfigList = new List<IReadoutConfig>();
          try
          {
            foreach (LoadedPlugin loadedPlugin in PlugInLoader.loadedPlugins)
            {
              if (loadedPlugin.gmmPlugIn is IReadoutConfig)
                readoutConfigList.Add(loadedPlugin.gmmPlugIn as IReadoutConfig);
            }
          }
          catch (Exception ex)
          {
            string message = "Exception on load IReadoutConfig ";
            ReadoutConfigFunctions.logger.Error(message);
            ReadoutConfigFunctions.logger.Error(ex.ToString());
            throw new Exception(message, ex);
          }
          if (readoutConfigList != null && adjustedProfile != null)
          {
            foreach (IReadoutConfig readoutConfig in readoutConfigList)
              readoutConfig.SetReadoutConfiguration(configList);
          }
        }
      }
      return readoutConfigMain.nextComponent;
    }

    public void GMM_Dispose()
    {
    }
  }
}


--- ReadoutConfigMain.xaml.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ReadoutConfigMain
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using GmmDbLib;
using StartupLib;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using ZENNER.CommonLibrary;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;

#nullable disable
namespace ReadoutConfiguration
{
  public partial class ReadoutConfigMain : Window, IComponentConnector
  {
    private const string translaterBaseKey = "ReadoutConfigMain";
    private bool initialising = false;
    public static BitmapImage NotDefinedImage;
    internal string nextComponent = "";
    private ConnectionProfile activeProfile;
    private SortedList<string, string> activeProfileChangedParameters;
    private ProfileSelecterLists activeSelectorLists;
    private ConfigurationSelector configSelector;
    internal ReadoutPreferences myReadoutPreferences;
    private ConfigList EditConfigList;
    internal System.Windows.Controls.Menu menuMain;
    internal System.Windows.Controls.MenuItem MenuItemOpenProfile;
    internal System.Windows.Controls.MenuItem MenuItemSaveProfileAs;
    internal System.Windows.Controls.MenuItem MenuItemComponents;
    internal GmmCorporateControl gmmCorporateControl1;
    internal Grid GridGroups;
    internal System.Windows.Controls.Label LableDeviceGroupName;
    internal System.Windows.Controls.ComboBox ComboBoxDeviceGroup;
    internal System.Windows.Controls.Button ButtonDeviceGroup;
    internal Image ImageDeviceGroup;
    internal System.Windows.Controls.Label LableEquipmentGroupName;
    internal System.Windows.Controls.ComboBox ComboBoxEquipmentGroup;
    internal System.Windows.Controls.Button ButtonEquipmentGroup;
    internal Image ImageEquipmentGroup;
    internal System.Windows.Controls.Label LableProfileTypeGroupName;
    internal System.Windows.Controls.ComboBox ComboBoxProfileTypeGroup;
    internal System.Windows.Controls.Button ButtonProfileTypeGroup;
    internal Image ImageProfileTypeGroup;
    internal Grid GridModels;
    internal System.Windows.Controls.Label LableDeviceModelName;
    internal System.Windows.Controls.ComboBox ComboBoxDeviceModelName;
    internal System.Windows.Controls.Button ButtonDeviceModel;
    internal Image ImageDeviceModel;
    internal System.Windows.Controls.Label LableEquipmentModel;
    internal System.Windows.Controls.ComboBox ComboBoxEquipmentModelName;
    internal System.Windows.Controls.Button ButtonEquipmentModel;
    internal Image ImageEquipmentModel;
    internal System.Windows.Controls.Label LableProfileTypeName;
    internal System.Windows.Controls.ComboBox ComboBoxProfileTypeName;
    internal System.Windows.Controls.Button ButtonProfileType;
    internal Image ImageProfileTypeModel;
    internal System.Windows.Controls.Button ButtonResetToDefault;
    internal System.Windows.Controls.Button ButtonResetToPreSet;
    internal System.Windows.Controls.Button ButtonProfileParameters;
    internal System.Windows.Controls.Button ButtonShowProfilesList;
    internal System.Windows.Controls.Button ButtonUseThisConfig;
    internal System.Windows.Controls.GroupBox GroupBoxDeveloperInfo;
    internal StackPanel StackPanelDeveloperPanel;
    internal System.Windows.Controls.TextBox TextBoxIdInfos0;
    internal System.Windows.Controls.TextBox TextBoxIdInfos1;
    internal System.Windows.Controls.TextBox TextBoxIdInfos2;
    internal System.Windows.Controls.CheckBox CheckBoxShowAllChangableParameters;
    internal StackPanel StackPanelNotDefault;
    internal PropertyGrid PropertyGridSettings;
    private bool _contentLoaded;

    public ReadoutConfigMain(ReadoutPreferences readoutPreferences, bool enableComponentMenu)
    {
      this.myReadoutPreferences = readoutPreferences != null ? readoutPreferences : throw new Exception("ReadoutPreferences cannot be null");
      this.myReadoutPreferences.GarantSelectedProfile();
      this.configSelector = new ConfigurationSelector(this.myReadoutPreferences.FilteredProfiles);
      this.InitializeComponent();
      if (enableComponentMenu)
        UserInterfaceServices.AddDefaultMenu((System.Windows.Controls.MenuItem) this.menuMain.Items[1], new RoutedEventHandler(this.componentsClick));
      if (((ItemsControl) this.menuMain.Items[1]).Items.Count == 0)
        this.menuMain.Visibility = Visibility.Collapsed;
      if (readoutPreferences.IsProfileEditingEnabled)
      {
        this.ButtonShowProfilesList.Visibility = Visibility.Visible;
        this.ButtonProfileParameters.Visibility = Visibility.Visible;
      }
      else
      {
        this.ButtonShowProfilesList.Visibility = Visibility.Hidden;
        this.ButtonProfileParameters.Visibility = Visibility.Hidden;
      }
      WpfTranslatorSupport.TranslateWindow(Tg.ReadoutConfigMain, (Window) this);
      if (ReadoutConfigMain.NotDefinedImage == null)
        ReadoutConfigMain.NotDefinedImage = new BitmapImage(new Uri("pack://application:,,,/ReadoutConfiguration;component/Resources/NotDefinedImage.png"));
      this.ShowConnectionProfile(this.myReadoutPreferences.AdjustedProfile.ConnectionProfileID);
    }

    internal SortedList<string, string> GetResultSetup()
    {
      return this.myReadoutPreferences.AdjustedProfile.GetAdjustedList();
    }

    private void componentsClick(object sender, RoutedEventArgs e)
    {
      this.nextComponent = ((HeaderedItemsControl) sender).Header.ToString();
      this.Hide();
    }

    private void ButtonShowProfilesList_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        int connectionProfileId = this.activeProfile.ConnectionProfileID;
        ProfilesList profilesList = new ProfilesList(this.activeProfile.ConnectionProfileID);
        profilesList.Owner = (Window) this;
        bool? nullable = profilesList.ShowDialog();
        bool flag = true;
        if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
          return;
        this.ReloadAndShowConnectionProfile(profilesList.selectedProfileID);
      }
      catch (Exception ex)
      {
        this.WorkException("Change profiles error", ex);
      }
    }

    private void ButtonProfileParameters_Click(object sender, RoutedEventArgs e)
    {
      if (!ParameterListEditor.EditProfileParameter(this.activeProfile.ConnectionProfileID, (Window) this))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void WorkException(string Message, Exception ex)
    {
      ZR_ClassLibMessages.AddErrorDescription(ZR_ClassLibMessages.LastErrors.Exception, ex.ToString());
      ZR_ClassLibMessages.AddErrorDescription("Exception:");
      ZR_ClassLibMessages.AddErrorDescription(Message);
      ZR_ClassLibMessages.ShowAndClearErrors();
    }

    private void AddInfo(StringBuilder changeInfo, string line, string more)
    {
      changeInfo.Append(line);
      changeInfo.Append(' ');
      for (int length = line.Length; length < 60; ++length)
        changeInfo.Append('.');
      changeInfo.Append(' ');
      changeInfo.AppendLine(more);
    }

    private void Window_Closing(object sender, CancelEventArgs e)
    {
      e.Cancel = true;
      this.nextComponent = "";
      this.Hide();
    }

    private void ReloadAndShowConnectionProfile(int ConnectionProfileID)
    {
      this.myReadoutPreferences.ReloadDatabaseAndEnableAllChanges();
      this.configSelector = new ConfigurationSelector(this.myReadoutPreferences.FilteredProfiles);
      this.ShowConnectionProfile(ConnectionProfileID);
    }

    private void ShowConnectionProfile(int ConnectionProfileID)
    {
      try
      {
        ConfigDatabaseAccess dbData = ReadoutConfigFunctions.DbData;
        if (this.myReadoutPreferences.AdjustedProfile.ConnectionProfileID != ConnectionProfileID)
          this.myReadoutPreferences.ChangeToProfile(ConnectionProfileID);
        this.activeProfileChangedParameters = new SortedList<string, string>();
        if (this.myReadoutPreferences != null && this.myReadoutPreferences.AdjustedProfile != null && this.myReadoutPreferences.AdjustedProfile.AdjustedParameters != null && this.myReadoutPreferences.AdjustedProfile.AdjustedParameters.Count > 0)
        {
          ConnectionProfile connectionProfile = dbData.CachedPartiallyConnectionProfiles.FirstOrDefault<ConnectionProfile>((Func<ConnectionProfile, bool>) (x => x.ConnectionProfileID == ConnectionProfileID));
          foreach (string key in (IEnumerable<string>) connectionProfile.ConnectionSettings.SetupParameterList.Keys)
          {
            if (this.myReadoutPreferences.AdjustedProfile.AdjustedParameters.ContainsKey(key))
            {
              string setupParameter = connectionProfile.ConnectionSettings.SetupParameterList[key];
              string adjustedParameter = this.myReadoutPreferences.AdjustedProfile.AdjustedParameters[key];
              if (setupParameter != adjustedParameter)
                this.activeProfileChangedParameters.Add(key, adjustedParameter);
            }
          }
        }
        this.initialising = true;
        this.activeProfile = dbData.CachedPartiallyConnectionProfiles.FirstOrDefault<ConnectionProfile>((Func<ConnectionProfile, bool>) (x => x.ConnectionProfileID == ConnectionProfileID));
        if (this.activeProfile == null)
          throw new Exception("Unknown ConnectionProfileID: " + ConnectionProfileID.ToString());
        dbData.PreloadImages(new List<int>()
        {
          this.activeProfile.DeviceModel.ImageID,
          this.activeProfile.DeviceModel.DeviceGroup.ImageID,
          this.activeProfile.EquipmentModel.ImageID,
          this.activeProfile.EquipmentModel.EquipmentGroup.ImageID,
          this.activeProfile.ProfileType.ImageID,
          this.activeProfile.ProfileType.ProfileTypeGroup.ImageID
        });
        this.activeSelectorLists = this.configSelector.GetAllowedSelectorLists(ConnectionProfileID);
        List<DeviceModel> deviceModelList = this.activeSelectorLists != null ? this.activeSelectorLists.allDeviceModelsList : throw new Exception("Unknown ConnectionProfileID: " + ConnectionProfileID.ToString());
        if (this.myReadoutPreferences.ChangeDeviceModelsAllowed == null || this.myReadoutPreferences.ChangeDeviceModelsAllowed.Count == 0)
        {
          int num = (int) System.Windows.MessageBox.Show("No DeviceModel allowed. Please change restrictions.");
          this.Close();
        }
        else
        {
          if (this.myReadoutPreferences.ChangeDeviceModelsAllowed.Count == 1)
          {
            this.ComboBoxDeviceModelName.IsEnabled = false;
            this.ButtonDeviceModel.IsEnabled = false;
          }
          deviceModelList.RemoveAll((Predicate<DeviceModel>) (item => this.myReadoutPreferences.ChangeDeviceModelsAllowed.Find((Predicate<int>) (allowedItem => allowedItem == item.DeviceModelID)) == 0));
          DeviceModel deviceModel = deviceModelList.Find((Predicate<DeviceModel>) (item => item.DeviceModelID == this.activeProfile.DeviceModel.DeviceModelID));
          if (deviceModel == null)
            throw new InvalidDataException("Profile device model is not part of allowed device models");
          this.ComboBoxDeviceModelName.ItemsSource = (IEnumerable) deviceModelList;
          this.ComboBoxDeviceModelName.SelectedItem = (object) deviceModel;
          this.ImageDeviceModel.Source = (ImageSource) this.GetImage(this.activeProfile.DeviceModel.Image500x500);
          this.ButtonDeviceModel.Tag = (object) this.activeProfile.DeviceModel;
          DeviceGroup deviceGroup = this.activeSelectorLists.allDeviceGroupsList.Find((Predicate<DeviceGroup>) (item => item.DeviceGroupID == this.activeProfile.DeviceModel.DeviceGroup.DeviceGroupID));
          this.ComboBoxDeviceGroup.ItemsSource = (IEnumerable) this.activeSelectorLists.allDeviceGroupsList;
          this.ComboBoxDeviceGroup.SelectedItem = (object) deviceGroup;
          this.ComboBoxDeviceGroup.SelectedItem = (object) this.activeProfile.DeviceModel.DeviceGroup;
          this.ImageDeviceGroup.Source = (ImageSource) this.GetImage(this.activeProfile.DeviceModel.DeviceGroup.Image500x500);
          this.ButtonDeviceGroup.Tag = (object) this.activeProfile.DeviceModel.DeviceGroup;
          if (this.myReadoutPreferences.ChangeDeviceGroupsAllowed == null || this.myReadoutPreferences.ChangeDeviceGroupsAllowed.Count == 1)
          {
            this.ComboBoxDeviceGroup.IsEnabled = false;
            this.ButtonDeviceGroup.IsEnabled = false;
          }
          EquipmentModel equipmentModel = this.activeSelectorLists.reducedEquipmentModels.Find((Predicate<EquipmentModel>) (item => item.EquipmentModelID == this.activeProfile.EquipmentModel.EquipmentModelID));
          this.ComboBoxEquipmentModelName.ItemsSource = (IEnumerable) this.activeSelectorLists.reducedEquipmentModels;
          this.ComboBoxEquipmentModelName.SelectedItem = (object) equipmentModel;
          this.ImageEquipmentModel.Source = (ImageSource) this.GetImage(this.activeProfile.EquipmentModel.Image500x500);
          this.ButtonEquipmentModel.Tag = (object) this.activeProfile.EquipmentModel;
          if (this.myReadoutPreferences.ChangeEquipmentModelsAllowed == null || this.myReadoutPreferences.ChangeEquipmentModelsAllowed.Count == 1)
          {
            this.ComboBoxEquipmentModelName.IsEnabled = false;
            this.ButtonEquipmentModel.IsEnabled = false;
          }
          EquipmentGroup equipmentGroup = this.activeSelectorLists.reducedEquipmentGroups.Find((Predicate<EquipmentGroup>) (item => item.EquipmentGroupID == this.activeProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID));
          this.ComboBoxEquipmentGroup.ItemsSource = (IEnumerable) this.activeSelectorLists.reducedEquipmentGroups;
          this.ComboBoxEquipmentGroup.SelectedItem = (object) equipmentGroup;
          this.ImageEquipmentGroup.Source = (ImageSource) this.GetImage(this.activeProfile.EquipmentModel.EquipmentGroup.Image500x500);
          this.ButtonEquipmentGroup.Tag = (object) this.activeProfile.EquipmentModel.EquipmentGroup;
          if (this.myReadoutPreferences.ChangeEquipmentGroupsAllowed == null || this.myReadoutPreferences.ChangeEquipmentGroupsAllowed.Count == 1)
          {
            this.ComboBoxEquipmentGroup.IsEnabled = false;
            this.ButtonEquipmentGroup.IsEnabled = false;
          }
          ProfileType profileType = this.activeSelectorLists.reducedProfileTypes.Find((Predicate<ProfileType>) (item => item.ProfileTypeID == this.activeProfile.ProfileType.ProfileTypeID));
          this.ComboBoxProfileTypeName.ItemsSource = (IEnumerable) this.activeSelectorLists.reducedProfileTypes;
          this.ComboBoxProfileTypeName.SelectedItem = (object) profileType;
          this.ImageProfileTypeModel.Source = (ImageSource) this.GetImage(this.activeProfile.ProfileType.Image500x500);
          this.ButtonProfileType.Tag = (object) this.activeProfile.ProfileType;
          if (this.myReadoutPreferences.ChangeProfileTypeModelsAllowed == null || this.myReadoutPreferences.ChangeProfileTypeModelsAllowed.Count == 1)
          {
            this.ComboBoxProfileTypeName.IsEnabled = false;
            this.ButtonProfileType.IsEnabled = false;
          }
          ProfileTypeGroup profileTypeGroup = this.activeSelectorLists.reducedProfileTypeGroups.Find((Predicate<ProfileTypeGroup>) (item => item.ProfileTypeGroupID == this.activeProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID));
          this.ComboBoxProfileTypeGroup.ItemsSource = (IEnumerable) this.activeSelectorLists.reducedProfileTypeGroups;
          this.ComboBoxProfileTypeGroup.SelectedItem = (object) profileTypeGroup;
          this.ImageProfileTypeGroup.Source = (ImageSource) this.GetImage(this.activeProfile.ProfileType.ProfileTypeGroup.Image500x500);
          this.ButtonProfileTypeGroup.Tag = (object) this.activeProfile.ProfileType.ProfileTypeGroup;
          if (this.myReadoutPreferences.ChangeProfileTypeGroupsAllowed == null || this.myReadoutPreferences.ChangeProfileTypeGroupsAllowed.Count == 1)
          {
            this.ComboBoxProfileTypeGroup.IsEnabled = false;
            this.ButtonProfileTypeGroup.IsEnabled = false;
          }
          if (UserManager.CheckPermission("Developer"))
          {
            this.GroupBoxDeveloperInfo.Visibility = Visibility.Visible;
            this.TextBoxIdInfos0.Text = "ConnectionSettingsName: " + this.activeProfile.ConnectionSettings.Name;
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.AppendLine("ConnectionProfileID: " + this.activeProfile.ConnectionProfileID.ToString());
            stringBuilder1.AppendLine("DeviceModelID: " + this.activeProfile.DeviceModel.DeviceModelID.ToString());
            StringBuilder stringBuilder2 = stringBuilder1;
            int num = this.activeProfile.EquipmentModel.EquipmentModelID;
            string str1 = "EquipmentModelID: " + num.ToString();
            stringBuilder2.AppendLine(str1);
            StringBuilder stringBuilder3 = stringBuilder1;
            num = this.activeProfile.ProfileType.ProfileTypeID;
            string str2 = "ProfileTypeID: " + num.ToString();
            stringBuilder3.AppendLine(str2);
            this.TextBoxIdInfos1.Text = stringBuilder1.ToString();
            stringBuilder1.Clear();
            StringBuilder stringBuilder4 = stringBuilder1;
            num = this.activeProfile.ConnectionSettings.ConnectionSettingsID;
            string str3 = "ConnectionSettingsID: " + num.ToString();
            stringBuilder4.AppendLine(str3);
            StringBuilder stringBuilder5 = stringBuilder1;
            num = this.activeProfile.DeviceModel.DeviceGroup.DeviceGroupID;
            string str4 = "DeviceGroupID: " + num.ToString();
            stringBuilder5.AppendLine(str4);
            StringBuilder stringBuilder6 = stringBuilder1;
            num = this.activeProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID;
            string str5 = "EquipmentGroupID: " + num.ToString();
            stringBuilder6.AppendLine(str5);
            StringBuilder stringBuilder7 = stringBuilder1;
            num = this.activeProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID;
            string str6 = "ProfileTypeGroupID: " + num.ToString();
            stringBuilder7.AppendLine(str6);
            this.TextBoxIdInfos2.Text = stringBuilder1.ToString();
          }
          else
            this.GroupBoxDeveloperInfo.Visibility = Visibility.Collapsed;
          this.ShowParameterByList(this.myReadoutPreferences.AdjustedProfile.GetAdjustedList());
          if (!this.myReadoutPreferences.IsProfileEditingEnabled)
            return;
          System.Windows.Controls.ContextMenu contextMenu1 = new System.Windows.Controls.ContextMenu();
          this.AddChangePictureMenuItem(contextMenu1, this.activeProfile.DeviceModel.DeviceGroup.DeviceGroupID);
          this.AddNameAndDescriptionMenuItem(contextMenu1, this.activeProfile.DeviceModel.DeviceGroup.DeviceGroupID);
          this.ImageDeviceGroup.ContextMenu = contextMenu1;
          System.Windows.Controls.ContextMenu contextMenu2 = new System.Windows.Controls.ContextMenu();
          this.AddChangePictureMenuItem(contextMenu2, this.activeProfile.DeviceModel.DeviceModelID);
          this.AddNameAndDescriptionMenuItem(contextMenu2, this.activeProfile.DeviceModel.DeviceModelID);
          this.AddChangeParameterMenuItem(contextMenu2, this.activeProfile.DeviceModel.DeviceModelID);
          this.AddGroupChangeMenuItem(contextMenu2, this.activeProfile.DeviceModel.DeviceModelID);
          System.Windows.Controls.MenuItem newItem1 = new System.Windows.Controls.MenuItem();
          newItem1.Header = (object) "Create and select new device model";
          newItem1.Click += new RoutedEventHandler(this.AddDeviceModelHandler);
          contextMenu2.Items.Add((object) newItem1);
          System.Windows.Controls.MenuItem newItem2 = new System.Windows.Controls.MenuItem();
          newItem2.Header = (object) "Create new device group and move current device model to new group";
          newItem2.Click += new RoutedEventHandler(this.AddDeviceGroupForModelHandler);
          contextMenu2.Items.Add((object) newItem2);
          this.ImageDeviceModel.ContextMenu = contextMenu2;
          System.Windows.Controls.ContextMenu contextMenu3 = new System.Windows.Controls.ContextMenu();
          this.AddChangePictureMenuItem(contextMenu3, this.activeProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID);
          this.AddNameAndDescriptionMenuItem(contextMenu3, this.activeProfile.EquipmentModel.EquipmentGroup.EquipmentGroupID);
          this.ImageEquipmentGroup.ContextMenu = contextMenu3;
          System.Windows.Controls.ContextMenu contextMenu4 = new System.Windows.Controls.ContextMenu();
          this.AddChangePictureMenuItem(contextMenu4, this.activeProfile.EquipmentModel.EquipmentModelID);
          this.AddNameAndDescriptionMenuItem(contextMenu4, this.activeProfile.EquipmentModel.EquipmentModelID);
          this.AddChangeParameterMenuItem(contextMenu4, this.activeProfile.EquipmentModel.EquipmentModelID);
          this.AddGroupChangeMenuItem(contextMenu4, this.activeProfile.EquipmentModel.EquipmentModelID);
          System.Windows.Controls.MenuItem newItem3 = new System.Windows.Controls.MenuItem();
          newItem3.Header = (object) "Create and select new equipment model";
          newItem3.Click += new RoutedEventHandler(this.AddEquipmentModelHandler);
          contextMenu4.Items.Add((object) newItem3);
          System.Windows.Controls.MenuItem newItem4 = new System.Windows.Controls.MenuItem();
          newItem4.Header = (object) "Create new equipment group and move current equipment model to new group.";
          newItem4.Click += new RoutedEventHandler(this.AddEquipmentGroupForModelHandler);
          contextMenu4.Items.Add((object) newItem4);
          this.ImageEquipmentModel.ContextMenu = contextMenu4;
          System.Windows.Controls.ContextMenu contextMenu5 = new System.Windows.Controls.ContextMenu();
          this.AddChangePictureMenuItem(contextMenu5, this.activeProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID);
          this.AddNameAndDescriptionMenuItem(contextMenu5, this.activeProfile.ProfileType.ProfileTypeGroup.ProfileTypeGroupID);
          this.ImageProfileTypeGroup.ContextMenu = contextMenu5;
          System.Windows.Controls.ContextMenu contextMenu6 = new System.Windows.Controls.ContextMenu();
          this.AddChangePictureMenuItem(contextMenu6, this.activeProfile.ProfileType.ProfileTypeID);
          this.AddNameAndDescriptionMenuItem(contextMenu6, this.activeProfile.ProfileType.ProfileTypeID);
          this.AddChangeParameterMenuItem(contextMenu6, this.activeProfile.ProfileType.ProfileTypeID);
          this.AddGroupChangeMenuItem(contextMenu6, this.activeProfile.ProfileType.ProfileTypeID);
          System.Windows.Controls.MenuItem newItem5 = new System.Windows.Controls.MenuItem();
          newItem5.Header = (object) "Create and select new profile type";
          newItem5.Click += new RoutedEventHandler(this.AddProfileTypeHandler);
          contextMenu6.Items.Add((object) newItem5);
          System.Windows.Controls.MenuItem newItem6 = new System.Windows.Controls.MenuItem();
          newItem6.Header = (object) "Create new profile type group and move current profile type to new group";
          newItem6.Click += new RoutedEventHandler(this.AddProfileTypeGroupForProfileTypeHandler);
          contextMenu6.Items.Add((object) newItem6);
          this.ImageProfileTypeModel.ContextMenu = contextMenu6;
        }
      }
      catch (Exception ex)
      {
        throw new Exception("Initializing error", ex);
      }
      finally
      {
        this.initialising = false;
      }
    }

    private void ShowParameterByList(SortedList<string, string> theList)
    {
      if (!this.CheckBoxShowAllChangableParameters.IsChecked.Value)
      {
        SortedList<string, string> changableParameters = ReadoutConfigFunctions.DbData.CachedConnectionSettingsById[this.myReadoutPreferences.AdjustedProfile.SettingsID].AllChangableParameters;
        List<string> stringList = new List<string>();
        foreach (KeyValuePair<string, string> the in theList)
        {
          if (!changableParameters.ContainsKey(the.Key))
            stringList.Add(the.Key);
        }
        foreach (string key in stringList)
          theList.Remove(key);
      }
      this.EditConfigList = new ConfigList(theList);
      this.PropertyGridSettings.SelectedObject = (object) this.EditConfigList;
      this.ShowNotDefaultValues();
    }

    private void ShowNotDefaultValues()
    {
      this.StackPanelNotDefault.Children.Clear();
      SortedList<string, string> adjustedList = this.myReadoutPreferences.AdjustedProfile.GetAdjustedList();
      SortedList<string, string> sortedList = this.EditConfigList.GetSortedList();
      foreach (KeyValuePair<string, string> defaultParameter in this.myReadoutPreferences.AdjustedProfile.DefaultParameters)
      {
        string str1 = defaultParameter.Value;
        bool flag = false;
        string str2;
        if (sortedList.ContainsKey(defaultParameter.Key))
        {
          str2 = sortedList[defaultParameter.Key];
          if (str2 != str1)
            flag = true;
        }
        else
          str2 = "-";
        string str3;
        if (adjustedList.ContainsKey(defaultParameter.Key))
        {
          str3 = adjustedList[defaultParameter.Key];
          if (str3 != str1)
            flag = true;
        }
        else
          str3 = "-";
        if (flag)
        {
          Grid element1 = new Grid();
          element1.ColumnDefinitions.Add(new ColumnDefinition()
          {
            Width = new GridLength(2.0, GridUnitType.Star)
          });
          element1.ColumnDefinitions.Add(new ColumnDefinition()
          {
            Width = new GridLength(1.0, GridUnitType.Star)
          });
          element1.ColumnDefinitions.Add(new ColumnDefinition()
          {
            Width = new GridLength(1.0, GridUnitType.Star)
          });
          element1.ColumnDefinitions.Add(new ColumnDefinition()
          {
            Width = new GridLength(1.0, GridUnitType.Star)
          });
          TextBlock element2 = new TextBlock();
          element2.Text = defaultParameter.Key;
          Grid.SetColumn((UIElement) element2, 0);
          element1.Children.Add((UIElement) element2);
          TextBlock element3 = new TextBlock();
          element3.Text = str1;
          Grid.SetColumn((UIElement) element3, 1);
          element1.Children.Add((UIElement) element3);
          TextBlock element4 = new TextBlock();
          element4.Text = str3;
          Grid.SetColumn((UIElement) element4, 2);
          element1.Children.Add((UIElement) element4);
          TextBlock element5 = new TextBlock();
          element5.Text = str2;
          Grid.SetColumn((UIElement) element5, 3);
          element1.Children.Add((UIElement) element5);
          this.StackPanelNotDefault.Children.Add((UIElement) element1);
        }
      }
    }

    private void PropertyGridSettings_PropertyValueChanged(
      object s,
      PropertyValueChangedEventArgs e)
    {
      this.ShowNotDefaultValues();
    }

    private void OnShowAllParametersCheckedChanged(object sender, RoutedEventArgs e)
    {
      SortedList<string, string> theList = new SortedList<string, string>();
      SortedList<string, string> sortedList = this.EditConfigList.GetSortedList();
      SortedList<string, string> adjustedList = this.myReadoutPreferences.AdjustedProfile.GetAdjustedList();
      foreach (KeyValuePair<string, string> defaultParameter in this.myReadoutPreferences.AdjustedProfile.DefaultParameters)
      {
        if (sortedList.ContainsKey(defaultParameter.Key))
          theList.Add(defaultParameter.Key, sortedList[defaultParameter.Key]);
        else if (adjustedList.ContainsKey(defaultParameter.Key))
          theList.Add(defaultParameter.Key, adjustedList[defaultParameter.Key]);
        else
          theList.Add(defaultParameter.Key, defaultParameter.Value);
      }
      this.ShowParameterByList(theList);
    }

    private void AddChangePictureMenuItem(System.Windows.Controls.ContextMenu contextMenu, int ConnectionItemID)
    {
      System.Windows.Controls.MenuItem newItem1 = new System.Windows.Controls.MenuItem();
      newItem1.Header = (object) "Change picture from file ..";
      newItem1.Tag = (object) ConnectionItemID;
      newItem1.Click += new RoutedEventHandler(this.ChangePictureHandler);
      contextMenu.Items.Add((object) newItem1);
      System.Windows.Controls.MenuItem newItem2 = new System.Windows.Controls.MenuItem();
      newItem2.Header = (object) "Past picture";
      newItem2.Tag = (object) ConnectionItemID;
      newItem2.Click += new RoutedEventHandler(this.PastPictureHandler);
      contextMenu.Items.Add((object) newItem2);
      System.Windows.Controls.MenuItem newItem3 = new System.Windows.Controls.MenuItem();
      newItem3.Header = (object) "Copy picture";
      newItem3.Tag = (object) ConnectionItemID;
      newItem3.Click += new RoutedEventHandler(this.CopyPictureHandler);
      contextMenu.Items.Add((object) newItem3);
    }

    private void AddNameAndDescriptionMenuItem(System.Windows.Controls.ContextMenu contextMenu, int ConnectionItemID)
    {
      System.Windows.Controls.MenuItem newItem = new System.Windows.Controls.MenuItem();
      newItem.Header = (object) "Change name and description";
      newItem.Tag = (object) ConnectionItemID;
      newItem.Click += new RoutedEventHandler(this.ChangeNameAndDescriptionHandler);
      contextMenu.Items.Add((object) newItem);
    }

    private void AddChangeParameterMenuItem(System.Windows.Controls.ContextMenu contextMenu, int ConnectionItemID)
    {
      System.Windows.Controls.MenuItem newItem = new System.Windows.Controls.MenuItem();
      newItem.Header = (object) "Show and edit parameters";
      newItem.Tag = (object) ConnectionItemID;
      newItem.Click += new RoutedEventHandler(this.ShowAndEditParameters);
      contextMenu.Items.Add((object) newItem);
    }

    private void AddGroupChangeMenuItem(System.Windows.Controls.ContextMenu contextMenu, int ConnectionItemID)
    {
      System.Windows.Controls.MenuItem newItem = new System.Windows.Controls.MenuItem();
      newItem.Header = (object) "Change group";
      newItem.Tag = (object) ConnectionItemID;
      newItem.Click += new RoutedEventHandler(this.ChooseGroupHandler);
      contextMenu.Items.Add((object) newItem);
    }

    private BitmapImage GetImage(BitmapImage imageObject)
    {
      return imageObject != null ? imageObject : ReadoutConfigMain.NotDefinedImage;
    }

    private void ChangePictureHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.ChangePicture((int) ((FrameworkElement) sender).Tag))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void PastPictureHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.PastPicture((int) ((FrameworkElement) sender).Tag))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void CopyPictureHandler(object sender, RoutedEventArgs e)
    {
      ReadoutConfigFunctions.DbData.CopyPicture((int) ((FrameworkElement) sender).Tag);
    }

    private void ChangeNameAndDescriptionHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.ChangeNameAndDescription((int) ((FrameworkElement) sender).Tag))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void ShowAndEditParameters(object sender, RoutedEventArgs e)
    {
      if (!ParameterListEditor.EditItemParameter((int) ((FrameworkElement) sender).Tag))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void ChooseGroupHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.ChooseNewGroup((int) ((FrameworkElement) sender).Tag))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void AddDeviceModelHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.AddDeviceModel(this.activeProfile))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void AddDeviceGroupForModelHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.AddDeviceGroupForDeviceModel(this.activeProfile))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void AddEquipmentModelHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.AddEquipmentModel(this.activeProfile))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void AddEquipmentGroupForModelHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.AddEquipmentGroupForModel(this.activeProfile))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void AddProfileTypeHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.AddProfileType(this.activeProfile))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void AddProfileTypeGroupForProfileTypeHandler(object sender, RoutedEventArgs e)
    {
      if (!ReadoutConfigFunctions.DbData.AddProfileTypeGroupForProfileType(this.activeProfile))
        return;
      this.ReloadAndShowConnectionProfile(this.activeProfile.ConnectionProfileID);
    }

    private void ComboBoxSelector_SelectionChanged(object sender, SelectionChangedEventArgs e)
    {
      if (this.initialising)
        return;
      try
      {
        this.ShowNextProfileBySelectorIDs(this.GetSelectorIDs());
      }
      catch (Exception ex)
      {
        this.WorkException("Selection changed error", ex);
      }
    }

    private ProfileSelecterIDs GetSelectorIDs()
    {
      return new ProfileSelecterIDs()
      {
        DeviceModelID = ((DeviceModel) this.ComboBoxDeviceModelName.SelectedItem).DeviceModelID,
        DeviceGroupID = ((DeviceGroup) this.ComboBoxDeviceGroup.SelectedItem).DeviceGroupID,
        EquipmentModelID = ((EquipmentModel) this.ComboBoxEquipmentModelName.SelectedItem).EquipmentModelID,
        EquipmentGroupID = ((EquipmentGroup) this.ComboBoxEquipmentGroup.SelectedItem).EquipmentGroupID,
        ProfileTypeID = ((ProfileType) this.ComboBoxProfileTypeName.SelectedItem).ProfileTypeID,
        ProfileTypeGroupID = ((ProfileTypeGroup) this.ComboBoxProfileTypeGroup.SelectedItem).ProfileTypeGroupID
      };
    }

    private void ShowNextProfileBySelectorIDs(ProfileSelecterIDs selectorIDs)
    {
      this.ShowConnectionProfile(this.configSelector.GetProfileIdFromProfileSelecterIDs(this.activeProfile, selectorIDs));
    }

    private void ButtonDeviceGroup_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        DeviceGroup tag = (DeviceGroup) ((FrameworkElement) sender).Tag;
        List<DeviceGroup> deviceGroupsList = this.activeSelectorLists.allDeviceGroupsList;
        List<int> theImageIDs = new List<int>();
        foreach (DeviceGroup deviceGroup in deviceGroupsList)
          theImageIDs.Add(deviceGroup.ImageID);
        ReadoutConfigFunctions.DbData.PreloadImages(theImageIDs);
        ConnectionItemSelectObject selObject = new ConnectionItemSelectObject();
        foreach (DeviceGroup deviceGroup in deviceGroupsList)
        {
          if (deviceGroup == tag)
            selObject.selectedItem = (IConnectionItem) deviceGroup;
          selObject.itemList.Add((IConnectionItem) deviceGroup);
        }
        SelectByPictureWindow selectByPictureWindow = new SelectByPictureWindow(selObject);
        selectByPictureWindow.Owner = (Window) this;
        bool? nullable = selectByPictureWindow.ShowDialog();
        bool flag = true;
        if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
          return;
        int index = selObject.itemList.IndexOf(selObject.selectedItem);
        ProfileSelecterIDs selectorIds = this.GetSelectorIDs();
        selectorIds.DeviceGroupID = deviceGroupsList[index].DeviceGroupID;
        this.ShowNextProfileBySelectorIDs(selectorIds);
      }
      catch (Exception ex)
      {
        this.WorkException("Change by button error", ex);
      }
    }

    private void ButtonDeviceModel_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        DeviceModel tag = (DeviceModel) ((FrameworkElement) sender).Tag;
        List<DeviceModel> deviceModelsList = this.activeSelectorLists.allDeviceModelsList;
        List<int> theImageIDs = new List<int>();
        foreach (DeviceModel deviceModel in deviceModelsList)
          theImageIDs.Add(deviceModel.ImageID);
        ReadoutConfigFunctions.DbData.PreloadImages(theImageIDs);
        ConnectionItemSelectObject selObject = new ConnectionItemSelectObject();
        foreach (DeviceModel deviceModel in deviceModelsList)
        {
          if (deviceModel == tag)
            selObject.selectedItem = (IConnectionItem) deviceModel;
          selObject.itemList.Add((IConnectionItem) deviceModel);
        }
        SelectByPictureWindow selectByPictureWindow = new SelectByPictureWindow(selObject);
        selectByPictureWindow.Owner = (Window) this;
        bool? nullable = selectByPictureWindow.ShowDialog();
        bool flag = true;
        if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
          return;
        int index = selObject.itemList.IndexOf(selObject.selectedItem);
        ProfileSelecterIDs selectorIds = this.GetSelectorIDs();
        selectorIds.DeviceModelID = deviceModelsList[index].DeviceModelID;
        this.ShowNextProfileBySelectorIDs(selectorIds);
      }
      catch (Exception ex)
      {
        this.WorkException("Change by button error", ex);
      }
    }

    private void ButtonEquipmentGroup_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        EquipmentGroup tag = (EquipmentGroup) ((FrameworkElement) sender).Tag;
        List<EquipmentGroup> reducedEquipmentGroups = this.activeSelectorLists.reducedEquipmentGroups;
        List<int> theImageIDs = new List<int>();
        foreach (EquipmentGroup equipmentGroup in reducedEquipmentGroups)
          theImageIDs.Add(equipmentGroup.ImageID);
        ReadoutConfigFunctions.DbData.PreloadImages(theImageIDs);
        ConnectionItemSelectObject selObject = new ConnectionItemSelectObject();
        foreach (EquipmentGroup equipmentGroup in reducedEquipmentGroups)
        {
          if (equipmentGroup == tag)
            selObject.selectedItem = (IConnectionItem) equipmentGroup;
          selObject.itemList.Add((IConnectionItem) equipmentGroup);
        }
        SelectByPictureWindow selectByPictureWindow = new SelectByPictureWindow(selObject);
        selectByPictureWindow.Owner = (Window) this;
        bool? nullable = selectByPictureWindow.ShowDialog();
        bool flag = true;
        if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
          return;
        int index = selObject.itemList.IndexOf(selObject.selectedItem);
        ProfileSelecterIDs selectorIds = this.GetSelectorIDs();
        selectorIds.EquipmentGroupID = reducedEquipmentGroups[index].EquipmentGroupID;
        this.ShowNextProfileBySelectorIDs(selectorIds);
      }
      catch (Exception ex)
      {
        this.WorkException("Change by button error", ex);
      }
    }

    private void ButtonEquipmentModel_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        EquipmentModel tag = (EquipmentModel) ((FrameworkElement) sender).Tag;
        List<EquipmentModel> reducedEquipmentModels = this.activeSelectorLists.reducedEquipmentModels;
        List<int> theImageIDs = new List<int>();
        foreach (EquipmentModel equipmentModel in reducedEquipmentModels)
          theImageIDs.Add(equipmentModel.ImageID);
        ReadoutConfigFunctions.DbData.PreloadImages(theImageIDs);
        ConnectionItemSelectObject selObject = new ConnectionItemSelectObject();
        foreach (EquipmentModel equipmentModel in reducedEquipmentModels)
        {
          if (equipmentModel == tag)
            selObject.selectedItem = (IConnectionItem) equipmentModel;
          selObject.itemList.Add((IConnectionItem) equipmentModel);
        }
        SelectByPictureWindow selectByPictureWindow = new SelectByPictureWindow(selObject);
        selectByPictureWindow.Owner = (Window) this;
        bool? nullable = selectByPictureWindow.ShowDialog();
        bool flag = true;
        if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
          return;
        int index = selObject.itemList.IndexOf(selObject.selectedItem);
        ProfileSelecterIDs selectorIds = this.GetSelectorIDs();
        selectorIds.EquipmentModelID = reducedEquipmentModels[index].EquipmentModelID;
        this.ShowNextProfileBySelectorIDs(selectorIds);
      }
      catch (Exception ex)
      {
        this.WorkException("Change by button error", ex);
      }
    }

    private void ButtonProfileTypeGroup_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        ProfileTypeGroup tag = (ProfileTypeGroup) ((FrameworkElement) sender).Tag;
        List<ProfileTypeGroup> profileTypeGroups = this.activeSelectorLists.reducedProfileTypeGroups;
        List<int> theImageIDs = new List<int>();
        foreach (ProfileTypeGroup profileTypeGroup in profileTypeGroups)
          theImageIDs.Add(profileTypeGroup.ImageID);
        ReadoutConfigFunctions.DbData.PreloadImages(theImageIDs);
        ConnectionItemSelectObject selObject = new ConnectionItemSelectObject();
        foreach (ProfileTypeGroup profileTypeGroup in profileTypeGroups)
        {
          if (profileTypeGroup == tag)
            selObject.selectedItem = (IConnectionItem) profileTypeGroup;
          selObject.itemList.Add((IConnectionItem) profileTypeGroup);
        }
        SelectByPictureWindow selectByPictureWindow = new SelectByPictureWindow(selObject);
        selectByPictureWindow.Owner = (Window) this;
        bool? nullable = selectByPictureWindow.ShowDialog();
        bool flag = true;
        if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
          return;
        int index = selObject.itemList.IndexOf(selObject.selectedItem);
        ProfileSelecterIDs selectorIds = this.GetSelectorIDs();
        selectorIds.ProfileTypeGroupID = profileTypeGroups[index].ProfileTypeGroupID;
        this.ShowNextProfileBySelectorIDs(selectorIds);
      }
      catch (Exception ex)
      {
        this.WorkException("Change by button error", ex);
      }
    }

    private void ButtonProfileType_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        ProfileType tag = (ProfileType) ((FrameworkElement) sender).Tag;
        List<ProfileType> reducedProfileTypes = this.activeSelectorLists.reducedProfileTypes;
        List<int> theImageIDs = new List<int>();
        foreach (ProfileType profileType in reducedProfileTypes)
          theImageIDs.Add(profileType.ImageID);
        ReadoutConfigFunctions.DbData.PreloadImages(theImageIDs);
        ConnectionItemSelectObject selObject = new ConnectionItemSelectObject();
        foreach (ProfileType profileType in reducedProfileTypes)
        {
          if (profileType.Name == tag.Name)
            selObject.selectedItem = (IConnectionItem) profileType;
          selObject.itemList.Add((IConnectionItem) profileType);
        }
        SelectByPictureWindow selectByPictureWindow = new SelectByPictureWindow(selObject);
        selectByPictureWindow.Owner = (Window) this;
        bool? nullable = selectByPictureWindow.ShowDialog();
        bool flag = true;
        if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
          return;
        int index = selObject.itemList.IndexOf(selObject.selectedItem);
        ProfileSelecterIDs selectorIds = this.GetSelectorIDs();
        selectorIds.ProfileTypeID = reducedProfileTypes[index].ProfileTypeID;
        this.ShowNextProfileBySelectorIDs(selectorIds);
      }
      catch (Exception ex)
      {
        this.WorkException("Change by button error", ex);
      }
    }

    private void ButtonUseThisConfig_Click(object sender, RoutedEventArgs e)
    {
      this.myReadoutPreferences.DisableBaseChanges();
      this.AcceptEditResults();
      this.DialogResult = new bool?(true);
      this.Close();
    }

    private void ButtonResetToDefault_Click(object sender, RoutedEventArgs e)
    {
      SortedList<string, string> theList = new SortedList<string, string>();
      this.myReadoutPreferences.AdjustedProfile.AdjustedParameters.Clear();
      foreach (KeyValuePair<string, string> defaultParameter in this.myReadoutPreferences.AdjustedProfile.DefaultParameters)
        theList.Add(defaultParameter.Key, defaultParameter.Value);
      this.ShowParameterByList(theList);
    }

    private void ButtonResetToPreSet_Click(object sender, RoutedEventArgs e)
    {
      SortedList<string, string> theList = new SortedList<string, string>();
      SortedList<string, string> adjustedList = this.myReadoutPreferences.AdjustedProfile.GetAdjustedList();
      foreach (KeyValuePair<string, string> defaultParameter in this.myReadoutPreferences.AdjustedProfile.DefaultParameters)
      {
        if (adjustedList.ContainsKey(defaultParameter.Key))
          theList.Add(defaultParameter.Key, adjustedList[defaultParameter.Key]);
        else
          theList.Add(defaultParameter.Key, defaultParameter.Value);
      }
      this.ShowParameterByList(theList);
    }

    private void AcceptEditResults()
    {
      foreach (KeyValuePair<string, string> sorted in this.EditConfigList.GetSortedList())
        this.myReadoutPreferences.AdjustedProfile.ChangeParameter(sorted.Key, sorted.Value);
      this.myReadoutPreferences.AdjustedProfile.ChangeParameter("ConnectionProfileID", this.myReadoutPreferences.AdjustedProfile.ConnectionProfileID.ToString());
    }

    private void MenuItemSaveProfileAs_Click(object sender, RoutedEventArgs e)
    {
      string path1 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), Path.Combine("ZENNER", "GMM"));
      Microsoft.Win32.SaveFileDialog saveFileDialog = new Microsoft.Win32.SaveFileDialog();
      saveFileDialog.Filter = "Profile files (*.profile)|*.profile|All files (*.*)|*.*";
      saveFileDialog.FilterIndex = 1;
      saveFileDialog.RestoreDirectory = true;
      saveFileDialog.InitialDirectory = Path.Combine(path1, "Settings");
      saveFileDialog.FileName = string.Format("{0}.profile", (object) ReadoutConfigFunctions.DbData.CachedConnectionSettingsById[this.myReadoutPreferences.AdjustedProfile.SettingsID].Name);
      bool? nullable = saveFileDialog.ShowDialog();
      bool flag = true;
      if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
        return;
      this.AcceptEditResults();
      ConfigList.Save(saveFileDialog.FileName, new ConfigList(this.myReadoutPreferences.AdjustedProfile.AdjustedParameters)
      {
        ConnectionProfileID = this.myReadoutPreferences.AdjustedProfile.ConnectionProfileID
      });
    }

    private void MenuItemOpenProfile_Click(object sender, RoutedEventArgs e)
    {
      string path1 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), Path.Combine("ZENNER", "GMM"));
      Microsoft.Win32.OpenFileDialog openFileDialog = new Microsoft.Win32.OpenFileDialog();
      openFileDialog.Filter = "Profile files (*.profile)|*.profile|All files (*.*)|*.*";
      openFileDialog.FilterIndex = 1;
      openFileDialog.RestoreDirectory = true;
      openFileDialog.InitialDirectory = Path.Combine(path1, "Settings");
      bool? nullable = openFileDialog.ShowDialog();
      bool flag = true;
      if (!(nullable.GetValueOrDefault() == flag & nullable.HasValue))
        return;
      this.myReadoutPreferences.AdjustedProfile = new ConnectionProfileAdjusted(ConfigList.Load(openFileDialog.FileName));
      this.ShowConnectionProfile(this.myReadoutPreferences.AdjustedProfile.ConnectionProfileID);
    }

    public static ConfigList ShowDialog(int connectionProfileID)
    {
      ReadoutPreferences readoutPreferences = new ReadoutPreferences(ReadoutConfigFunctions.Manager.GetConnectionProfile(connectionProfileID));
      readoutPreferences.EnableAllChanges();
      ReadoutConfigMain readoutConfigMain = new ReadoutConfigMain(readoutPreferences, false);
      return !readoutConfigMain.ShowDialog().Value ? (ConfigList) null : readoutConfigMain.myReadoutPreferences.AdjustedProfile.GetConfigList();
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      System.Windows.Application.LoadComponent((object) this, new Uri("/ReadoutConfiguration;component/readoutconfigmain.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.menuMain = (System.Windows.Controls.Menu) target;
          break;
        case 2:
          this.MenuItemOpenProfile = (System.Windows.Controls.MenuItem) target;
          this.MenuItemOpenProfile.Click += new RoutedEventHandler(this.MenuItemOpenProfile_Click);
          break;
        case 3:
          this.MenuItemSaveProfileAs = (System.Windows.Controls.MenuItem) target;
          this.MenuItemSaveProfileAs.Click += new RoutedEventHandler(this.MenuItemSaveProfileAs_Click);
          break;
        case 4:
          this.MenuItemComponents = (System.Windows.Controls.MenuItem) target;
          break;
        case 5:
          this.gmmCorporateControl1 = (GmmCorporateControl) target;
          break;
        case 6:
          this.GridGroups = (Grid) target;
          break;
        case 7:
          this.LableDeviceGroupName = (System.Windows.Controls.Label) target;
          break;
        case 8:
          this.ComboBoxDeviceGroup = (System.Windows.Controls.ComboBox) target;
          this.ComboBoxDeviceGroup.SelectionChanged += new SelectionChangedEventHandler(this.ComboBoxSelector_SelectionChanged);
          break;
        case 9:
          this.ButtonDeviceGroup = (System.Windows.Controls.Button) target;
          this.ButtonDeviceGroup.Click += new RoutedEventHandler(this.ButtonDeviceGroup_Click);
          break;
        case 10:
          this.ImageDeviceGroup = (Image) target;
          break;
        case 11:
          this.LableEquipmentGroupName = (System.Windows.Controls.Label) target;
          break;
        case 12:
          this.ComboBoxEquipmentGroup = (System.Windows.Controls.ComboBox) target;
          this.ComboBoxEquipmentGroup.SelectionChanged += new SelectionChangedEventHandler(this.ComboBoxSelector_SelectionChanged);
          break;
        case 13:
          this.ButtonEquipmentGroup = (System.Windows.Controls.Button) target;
          this.ButtonEquipmentGroup.Click += new RoutedEventHandler(this.ButtonEquipmentGroup_Click);
          break;
        case 14:
          this.ImageEquipmentGroup = (Image) target;
          break;
        case 15:
          this.LableProfileTypeGroupName = (System.Windows.Controls.Label) target;
          break;
        case 16:
          this.ComboBoxProfileTypeGroup = (System.Windows.Controls.ComboBox) target;
          this.ComboBoxProfileTypeGroup.SelectionChanged += new SelectionChangedEventHandler(this.ComboBoxSelector_SelectionChanged);
          break;
        case 17:
          this.ButtonProfileTypeGroup = (System.Windows.Controls.Button) target;
          this.ButtonProfileTypeGroup.Click += new RoutedEventHandler(this.ButtonProfileTypeGroup_Click);
          break;
        case 18:
          this.ImageProfileTypeGroup = (Image) target;
          break;
        case 19:
          this.GridModels = (Grid) target;
          break;
        case 20:
          this.LableDeviceModelName = (System.Windows.Controls.Label) target;
          break;
        case 21:
          this.ComboBoxDeviceModelName = (System.Windows.Controls.ComboBox) target;
          this.ComboBoxDeviceModelName.SelectionChanged += new SelectionChangedEventHandler(this.ComboBoxSelector_SelectionChanged);
          break;
        case 22:
          this.ButtonDeviceModel = (System.Windows.Controls.Button) target;
          this.ButtonDeviceModel.Click += new RoutedEventHandler(this.ButtonDeviceModel_Click);
          break;
        case 23:
          this.ImageDeviceModel = (Image) target;
          break;
        case 24:
          this.LableEquipmentModel = (System.Windows.Controls.Label) target;
          break;
        case 25:
          this.ComboBoxEquipmentModelName = (System.Windows.Controls.ComboBox) target;
          this.ComboBoxEquipmentModelName.SelectionChanged += new SelectionChangedEventHandler(this.ComboBoxSelector_SelectionChanged);
          break;
        case 26:
          this.ButtonEquipmentModel = (System.Windows.Controls.Button) target;
          this.ButtonEquipmentModel.Click += new RoutedEventHandler(this.ButtonEquipmentModel_Click);
          break;
        case 27:
          this.ImageEquipmentModel = (Image) target;
          break;
        case 28:
          this.LableProfileTypeName = (System.Windows.Controls.Label) target;
          break;
        case 29:
          this.ComboBoxProfileTypeName = (System.Windows.Controls.ComboBox) target;
          this.ComboBoxProfileTypeName.SelectionChanged += new SelectionChangedEventHandler(this.ComboBoxSelector_SelectionChanged);
          break;
        case 30:
          this.ButtonProfileType = (System.Windows.Controls.Button) target;
          this.ButtonProfileType.Click += new RoutedEventHandler(this.ButtonProfileType_Click);
          break;
        case 31:
          this.ImageProfileTypeModel = (Image) target;
          break;
        case 32:
          this.ButtonResetToDefault = (System.Windows.Controls.Button) target;
          this.ButtonResetToDefault.Click += new RoutedEventHandler(this.ButtonResetToDefault_Click);
          break;
        case 33:
          this.ButtonResetToPreSet = (System.Windows.Controls.Button) target;
          this.ButtonResetToPreSet.Click += new RoutedEventHandler(this.ButtonResetToPreSet_Click);
          break;
        case 34:
          this.ButtonProfileParameters = (System.Windows.Controls.Button) target;
          this.ButtonProfileParameters.Click += new RoutedEventHandler(this.ButtonProfileParameters_Click);
          break;
        case 35:
          this.ButtonShowProfilesList = (System.Windows.Controls.Button) target;
          this.ButtonShowProfilesList.Click += new RoutedEventHandler(this.ButtonShowProfilesList_Click);
          break;
        case 36:
          this.ButtonUseThisConfig = (System.Windows.Controls.Button) target;
          this.ButtonUseThisConfig.Click += new RoutedEventHandler(this.ButtonUseThisConfig_Click);
          break;
        case 37:
          this.GroupBoxDeveloperInfo = (System.Windows.Controls.GroupBox) target;
          break;
        case 38:
          this.StackPanelDeveloperPanel = (StackPanel) target;
          break;
        case 39:
          this.TextBoxIdInfos0 = (System.Windows.Controls.TextBox) target;
          break;
        case 40:
          this.TextBoxIdInfos1 = (System.Windows.Controls.TextBox) target;
          break;
        case 41:
          this.TextBoxIdInfos2 = (System.Windows.Controls.TextBox) target;
          break;
        case 42:
          this.CheckBoxShowAllChangableParameters = (System.Windows.Controls.CheckBox) target;
          this.CheckBoxShowAllChangableParameters.Checked += new RoutedEventHandler(this.OnShowAllParametersCheckedChanged);
          this.CheckBoxShowAllChangableParameters.Unchecked += new RoutedEventHandler(this.OnShowAllParametersCheckedChanged);
          break;
        case 43:
          this.StackPanelNotDefault = (StackPanel) target;
          break;
        case 44:
          this.PropertyGridSettings = (PropertyGrid) target;
          this.PropertyGridSettings.PropertyValueChanged += new PropertyValueChangedEventHandler(this.PropertyGridSettings_PropertyValueChanged);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}


--- ReadoutPreferences.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.ReadoutPreferences
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using StartupLib;
using System;
using System.Collections.Generic;
using System.Linq;
using ZENNER.CommonLibrary;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace ReadoutConfiguration
{
  [Serializable]
  public class ReadoutPreferences
  {
    internal List<ConnectionProfile> FilteredProfiles;
    internal ConnectionProfileAdjusted AdjustedProfile;
    internal ConnectionProfileFilter ProfileFilter;
    private bool isProfileEditingEnabled;

    public List<int> ChangeDeviceGroupsAllowed { get; set; }

    public List<int> ChangeDeviceModelsAllowed { get; set; }

    public List<int> ChangeEquipmentGroupsAllowed { get; set; }

    public List<int> ChangeEquipmentModelsAllowed { get; set; }

    public List<int> ChangeProfileTypeGroupsAllowed { get; set; }

    public List<int> ChangeProfileTypeModelsAllowed { get; set; }

    public List<int> AllDeviceGroupsIds
    {
      get
      {
        return ReadoutConfigFunctions.DbData.CachedDeviceGroups.Select<DeviceGroup, int>((Func<DeviceGroup, int>) (x => x.DeviceGroupID)).ToList<int>();
      }
    }

    public List<int> AllDeviceModelsIds
    {
      get
      {
        return ReadoutConfigFunctions.DbData.CachedDeviceModels.Select<DeviceModel, int>((Func<DeviceModel, int>) (x => x.DeviceModelID)).ToList<int>();
      }
    }

    public List<int> AllEquipmentGroupsIds
    {
      get
      {
        return ReadoutConfigFunctions.DbData.CachedEquipmentGroups.Select<EquipmentGroup, int>((Func<EquipmentGroup, int>) (x => x.EquipmentGroupID)).ToList<int>();
      }
    }

    public List<int> AllEquipmentModelsIds
    {
      get
      {
        return ReadoutConfigFunctions.DbData.CachedEquipmentModels.Select<EquipmentModel, int>((Func<EquipmentModel, int>) (x => x.EquipmentModelID)).ToList<int>();
      }
    }

    public List<int> AllProfilTypeGroupsIds
    {
      get
      {
        return ReadoutConfigFunctions.DbData.CachedProfileTypeGroups.Select<ProfileTypeGroup, int>((Func<ProfileTypeGroup, int>) (x => x.ProfileTypeGroupID)).ToList<int>();
      }
    }

    public List<int> AllProfilTypesIds
    {
      get
      {
        return ReadoutConfigFunctions.DbData.CachedProfileTypes.Select<ProfileType, int>((Func<ProfileType, int>) (x => x.ProfileTypeID)).ToList<int>();
      }
    }

    public bool IsProfileEditingEnabled
    {
      get => this.isProfileEditingEnabled;
      set
      {
        if (value && !UserManager.CheckPermission("Developer"))
          return;
        this.isProfileEditingEnabled = value;
      }
    }

    public ReadoutPreferences(ConnectionProfileAdjusted adjustedProfile)
    {
      this.AdjustedProfile = adjustedProfile;
      this.BaseConstructor();
    }

    public ReadoutPreferences(ConnectionProfile connectionProfile)
    {
      this.AdjustedProfile = new ConnectionProfileAdjusted(connectionProfile.ConnectionProfileID);
      this.BaseConstructor();
    }

    public ReadoutPreferences(ConfigList configList)
    {
      this.AdjustedProfile = new ConnectionProfileAdjusted(configList);
      this.BaseConstructor();
    }

    public ReadoutPreferences(ConfigList configList, ConnectionProfileFilter profileFilter)
    {
      if (profileFilter == null)
        throw new ArgumentNullException(nameof (profileFilter));
      this.AdjustedProfile = new ConnectionProfileAdjusted(configList);
      this.ProfileFilter = profileFilter;
      this.FilteredProfiles = ReadoutConfigFunctions.DbData.GetPartiallyConnectionProfiles(profileFilter);
      this.BaseConstructor();
    }

    private void BaseConstructor()
    {
      this.isProfileEditingEnabled = false;
      if (this.FilteredProfiles == null)
      {
        this.ChangeDeviceGroupsAllowed = this.AllDeviceGroupsIds;
        this.ChangeDeviceModelsAllowed = this.AllDeviceModelsIds;
        this.ChangeEquipmentGroupsAllowed = this.AllEquipmentGroupsIds;
        this.ChangeEquipmentModelsAllowed = this.AllEquipmentModelsIds;
        this.ChangeProfileTypeGroupsAllowed = this.AllProfilTypeGroupsIds;
        this.ChangeProfileTypeModelsAllowed = this.AllProfilTypesIds;
      }
      else
      {
        this.ChangeDeviceGroupsAllowed = new List<int>();
        this.ChangeDeviceModelsAllowed = new List<int>();
        this.ChangeEquipmentGroupsAllowed = new List<int>();
        this.ChangeEquipmentModelsAllowed = new List<int>();
        this.ChangeProfileTypeGroupsAllowed = new List<int>();
        this.ChangeProfileTypeModelsAllowed = new List<int>();
        foreach (ConnectionProfile filteredProfile in this.FilteredProfiles)
        {
          if (this.ChangeDeviceGroupsAllowed.IndexOf(filteredProfile.DeviceModel.GroupID) < 0)
            this.ChangeDeviceGroupsAllowed.Add(filteredProfile.DeviceModel.GroupID);
          if (this.ChangeDeviceModelsAllowed.IndexOf(filteredProfile.DeviceModel.DeviceModelID) < 0)
            this.ChangeDeviceModelsAllowed.Add(filteredProfile.DeviceModel.DeviceModelID);
          if (this.ChangeEquipmentGroupsAllowed.IndexOf(filteredProfile.EquipmentModel.GroupID) < 0)
            this.ChangeEquipmentGroupsAllowed.Add(filteredProfile.EquipmentModel.GroupID);
          if (this.ChangeEquipmentModelsAllowed.IndexOf(filteredProfile.EquipmentModel.EquipmentModelID) < 0)
            this.ChangeEquipmentModelsAllowed.Add(filteredProfile.EquipmentModel.EquipmentModelID);
          if (this.ChangeProfileTypeGroupsAllowed.IndexOf(filteredProfile.ProfileType.GroupID) < 0)
            this.ChangeProfileTypeGroupsAllowed.Add(filteredProfile.ProfileType.GroupID);
          if (this.ChangeProfileTypeModelsAllowed.IndexOf(filteredProfile.ProfileType.ProfileTypeID) < 0)
            this.ChangeProfileTypeModelsAllowed.Add(filteredProfile.ProfileType.ProfileTypeID);
        }
      }
    }

    public void UpdateConfigList() => this.AdjustedProfile.UpdateConfigList();

    public void GarantSelectedProfile()
    {
      if (!this.CheckIfProfileAllowed(this.AdjustedProfile.ConnectionProfileID))
      {
        foreach (ConnectionProfile connectionProfile in ReadoutConfigFunctions.DbData.CachedPartiallyConnectionProfiles)
        {
          if (this.CheckIfProfileAllowed(connectionProfile.ConnectionProfileID))
          {
            this.AdjustedProfile = new ConnectionProfileAdjusted(connectionProfile.ConnectionProfileID, this.AdjustedProfile);
            return;
          }
        }
        throw new Exception("Defined readout preference not possible for any profile");
      }
    }

    private bool CheckIfProfileAllowed(int connectionProfileID)
    {
      ConnectionProfile connectionProfile = ReadoutConfigFunctions.DbData.CachedPartiallyConnectionProfiles.FirstOrDefault<ConnectionProfile>((Func<ConnectionProfile, bool>) (x => x.ConnectionProfileID == connectionProfileID));
      return connectionProfile != null && (this.ChangeDeviceModelsAllowed == null || this.ChangeDeviceModelsAllowed.Contains(connectionProfile.DeviceModel.DeviceModelID)) && (this.ChangeEquipmentModelsAllowed == null || this.ChangeEquipmentModelsAllowed.Contains(connectionProfile.EquipmentModel.EquipmentModelID)) && (this.ChangeProfileTypeModelsAllowed == null || this.ChangeProfileTypeModelsAllowed.Contains(connectionProfile.ProfileType.ProfileTypeID));
    }

    public void ChangeToProfile(int connectionProfileID)
    {
      ConnectionProfileAdjusted connectionProfileAdjusted = new ConnectionProfileAdjusted(connectionProfileID, this.AdjustedProfile);
      ConnectionSettings connectionSettings = ReadoutConfigFunctions.DbData.CachedConnectionSettingsById[connectionProfileAdjusted.SettingsID];
      if (this.AdjustedProfile.AdjustedParameters.ContainsKey("Port") && connectionSettings.AllChangableParameters.ContainsKey("Port"))
        connectionProfileAdjusted.ChangeParameter("Port", this.AdjustedProfile.AdjustedParameters["Port"]);
      this.AdjustedProfile = connectionProfileAdjusted;
    }

    public void ReloadDatabaseAndEnableAllChanges()
    {
      ReadoutConfigFunctions.DbData.LoadAllConnectionTables();
      this.EnableAllChanges();
    }

    public void EnableAllChanges()
    {
      this.FilteredProfiles = ReadoutConfigFunctions.DbData.GetPartiallyConnectionProfiles();
      this.ChangeDeviceGroupsAllowed = this.AllDeviceGroupsIds;
      this.ChangeDeviceModelsAllowed = this.AllDeviceModelsIds;
      this.ChangeEquipmentGroupsAllowed = this.AllEquipmentGroupsIds;
      this.ChangeEquipmentModelsAllowed = this.AllEquipmentModelsIds;
      this.ChangeProfileTypeGroupsAllowed = this.AllProfilTypeGroupsIds;
      this.ChangeProfileTypeModelsAllowed = this.AllProfilTypesIds;
    }

    public void DisableBaseChanges()
    {
      this.ChangeDeviceGroupsAllowed = (List<int>) null;
      this.ChangeDeviceModelsAllowed = (List<int>) null;
      this.ChangeEquipmentGroupsAllowed = (List<int>) null;
      this.ChangeEquipmentModelsAllowed = (List<int>) null;
      this.ChangeProfileTypeGroupsAllowed = (List<int>) null;
      this.ChangeProfileTypeModelsAllowed = (List<int>) null;
    }

    public static ConfigList GetConfigListFromProfileId(int connectionProfileID)
    {
      if (!ReadoutConfigFunctions.DbData.SettingsID_FromProfileID.ContainsKey(connectionProfileID))
        throw new ArgumentException("Unknown ConnectionProfileID:" + connectionProfileID.ToString());
      return new ConfigList(ReadoutConfigFunctions.DbData.CachedConnectionSettingsById[ReadoutConfigFunctions.DbData.SettingsID_FromProfileID[connectionProfileID]].SetupParameterList)
      {
        ConnectionProfileID = connectionProfileID
      };
    }
  }
}


--- SelectByPictureWindow.xaml.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.SelectByPictureWindow
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using StartupLib;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using ZENNER.CommonLibrary.Entities;

#nullable disable
namespace ReadoutConfiguration
{
  public partial class SelectByPictureWindow : Window, IComponentConnector
  {
    private ConnectionItemSelectObject selObject;
    internal GmmCorporateControl gmmCorporateControl1;
    internal WrapPanel WrapPanalPictures;
    private bool _contentLoaded;

    public SelectByPictureWindow(ConnectionItemSelectObject selObject)
    {
      if (selObject == null)
        throw new NullReferenceException("Connection select object not defined");
      if (selObject.itemList == null)
        throw new NullReferenceException("Connection items list not defined");
      if (selObject.itemList.Count == 0)
        throw new ArgumentException("Empty connection items list");
      if (selObject.selectedItem == null)
        selObject.selectedItem = selObject.itemList[0];
      this.selObject = selObject;
      this.InitializeComponent();
      foreach (IConnectionItem connectionItem in selObject.itemList)
      {
        TextBlock element1 = new TextBlock();
        element1.FontSize = 30.0;
        element1.FontWeight = FontWeights.ExtraBold;
        element1.Text = connectionItem.Name;
        element1.HorizontalAlignment = HorizontalAlignment.Center;
        Image image = new Image();
        image.Stretch = Stretch.None;
        BitmapImage image500x500 = connectionItem.Image500x500;
        image.Source = image500x500 == null ? (ImageSource) ReadoutConfigMain.NotDefinedImage : (ImageSource) image500x500;
        Button element2 = new Button();
        element2.Content = (object) image;
        element2.Tag = (object) connectionItem;
        element2.Click += new RoutedEventHandler(this.Button_Click);
        TextBlock element3 = new TextBlock();
        element3.Text = connectionItem.Description;
        element3.Margin = new Thickness(5.0);
        element3.HorizontalAlignment = HorizontalAlignment.Left;
        StackPanel stackPanel = new StackPanel();
        stackPanel.Children.Add((UIElement) element1);
        stackPanel.Children.Add((UIElement) element2);
        stackPanel.Children.Add((UIElement) element3);
        Border element4 = new Border();
        element4.Margin = new Thickness(5.0);
        element4.BorderThickness = new Thickness(5.0);
        element4.BorderBrush = (Brush) new SolidColorBrush(Colors.Black);
        element4.CornerRadius = new CornerRadius(15.0);
        element4.Child = (UIElement) stackPanel;
        this.WrapPanalPictures.Children.Add((UIElement) element4);
      }
    }

    private void Button_Click(object sender, RoutedEventArgs e)
    {
      this.selObject.selectedItem = (IConnectionItem) ((FrameworkElement) sender).Tag;
      this.DialogResult = new bool?(true);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/ReadoutConfiguration;component/selectbypicturewindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.gmmCorporateControl1 = (GmmCorporateControl) target;
          break;
        case 2:
          this.WrapPanalPictures = (WrapPanel) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}


--- SettingsList.xaml.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.SettingsList
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

using StartupLib;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;
using ZENNER.CommonLibrary;
using ZENNER.CommonLibrary.Entities;
using ZR_ClassLibrary;

#nullable disable
namespace ReadoutConfiguration
{
  public partial class SettingsList : Window, IComponentConnector
  {
    private ObservableCollection<SettingsParameterData> ParameterList;
    private ConnectionSettings settings;
    internal bool DataChanged = false;
    internal GmmCorporateControl gmmCorporateControl1;
    internal DataGrid DataGridSettings;
    internal Button ButtonSaveChanges;
    internal Button ButtonDeleteMarked;
    internal Button ButtonMarkeUnused;
    private bool _contentLoaded;

    public SettingsList(ConnectionSettings settings)
    {
      this.settings = settings;
      this.InitializeComponent();
      if (!UserManager.CheckPermission("Developer"))
      {
        this.DataGridSettings.IsReadOnly = true;
        this.DataGridSettings.Margin = new Thickness(0.0);
        this.ButtonSaveChanges.Visibility = Visibility.Hidden;
      }
      this.ParameterList = ReadoutConfigFunctions.DbData.GetSettingList(settings.ConnectionSettingsID);
      this.DataGridSettings.AutoGenerateColumns = true;
      this.DataGridSettings.ItemsSource = (IEnumerable) this.ParameterList;
    }

    private void ButtonSaveChanges_Click(object sender, RoutedEventArgs e)
    {
      try
      {
        this.DataChanged = ReadoutConfigFunctions.DbData.ChangeSettingList(this.settings.ConnectionSettingsID, this.ParameterList);
        this.Close();
      }
      catch (Exception ex)
      {
        int num = (int) GMM_MessageBox.ShowMessage("Change parameter error", ex.ToString());
      }
    }

    private void ButtonDeleteMarked_Click(object sender, RoutedEventArgs e)
    {
      if (this.DataGridSettings.SelectedItems == null || this.DataGridSettings.SelectedItems.Count < 1)
        return;
      List<SettingsParameterData> settingsParameterDataList = new List<SettingsParameterData>();
      foreach (SettingsParameterData selectedItem in (IEnumerable) this.DataGridSettings.SelectedItems)
        settingsParameterDataList.Add(selectedItem);
      foreach (SettingsParameterData settingsParameterData in settingsParameterDataList)
        this.ParameterList.Remove(settingsParameterData);
    }

    private void ButtonMarkeUnused_Click(object sender, RoutedEventArgs e)
    {
      bool flag = true;
      foreach (SettingsParameterData settingsParameterData in (IEnumerable) this.DataGridSettings.Items)
      {
        if (settingsParameterData.Name == ParameterKey.TransceiverDevice.ToString() && settingsParameterData.Value == "None")
        {
          flag = false;
          break;
        }
      }
      if (flag)
        return;
      foreach (object obj in (IEnumerable) this.DataGridSettings.Items)
      {
        if (obj is SettingsParameterData)
        {
          SettingsParameterData settingsParameterData = (SettingsParameterData) obj;
          if ((settingsParameterData.Name == ParameterKey.IrDaSelection.ToString() || settingsParameterData.Name == ParameterKey.MinoConnectIrDaPulseTime.ToString() || settingsParameterData.Name == ParameterKey.MinoConnectPowerOffTime.ToString() || settingsParameterData.Name == ParameterKey.MinoConnectBaseState.ToString() || settingsParameterData.Name == ParameterKey.ForceMinoConnectState.ToString()) && !this.DataGridSettings.SelectedItems.Contains(obj))
            this.DataGridSettings.SelectedItems.Add(obj);
        }
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/ReadoutConfiguration;component/settingslist.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.gmmCorporateControl1 = (GmmCorporateControl) target;
          break;
        case 2:
          this.DataGridSettings = (DataGrid) target;
          break;
        case 3:
          this.ButtonSaveChanges = (Button) target;
          this.ButtonSaveChanges.Click += new RoutedEventHandler(this.ButtonSaveChanges_Click);
          break;
        case 4:
          this.ButtonDeleteMarked = (Button) target;
          this.ButtonDeleteMarked.Click += new RoutedEventHandler(this.ButtonDeleteMarked_Click);
          break;
        case 5:
          this.ButtonMarkeUnused = (Button) target;
          this.ButtonMarkeUnused.Click += new RoutedEventHandler(this.ButtonMarkeUnused_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}


--- SettingsParameterData.cs ---

﻿// Decompiled with JetBrains decompiler
// Type: ReadoutConfiguration.SettingsParameterData
// Assembly: ReadoutConfiguration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f5405c50fba4c3ca
// MVID: 1BD19DC4-A290-473A-8451-94ED3EF61361
// Assembly location: F:\tekst\DoingTomorrow\Zenner_Software\program_filer\ReadoutConfiguration.dll

#nullable disable
namespace ReadoutConfiguration
{
  public class SettingsParameterData
  {
    public string Name { get; set; }

    public string Value { get; set; }

    public string Using { get; set; }
  }
}

